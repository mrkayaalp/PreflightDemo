/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "system.h"
#include "def.h"
#include "checking.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
    .name = "defaultTask",
    .stack_size = 128 * 4,
    .priority = (osPriority_t)osPriorityNormal,
};
/* Definitions for chechState */
osThreadId_t chechStateHandle;
const osThreadAttr_t chechState_attributes = {
    .name = "chechState",
    .stack_size = 512 * 4,
    .priority = (osPriority_t)osPriorityRealtime,
};
/* Definitions for taskEntry */
osThreadId_t taskEntryHandle;
const osThreadAttr_t taskEntry_attributes = {
    .name = "taskEntry",
    .stack_size = 128 * 4,
    .priority = (osPriority_t)osPriorityRealtime,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void checkStateEntry(void *argument);
void dataTaskEntry(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of chechState */
  chechStateHandle = osThreadNew(checkStateEntry, NULL, &chechState_attributes);

  /* creation of taskEntry */
  taskEntryHandle = osThreadNew(dataTaskEntry, NULL, &taskEntry_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_checkStateEntry */
/**
 * @brief Function implementing the chechState thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_checkStateEntry */
void checkStateEntry(void *argument)
{
  /* USER CODE BEGIN checkStateEntry */
  /* Infinite loop */
  for (;;)
  {
    switch (flightState)
    {
    case START:
      if (checkLiftoff() == 1)
      {
        time.liftoffTime = time.current;
        flightState = AFTER_LIFTOFF;
      }
      break;

    case AFTER_LIFTOFF:
      if (checkApogee() == 1)
      {
        time.apogeeTime = time.current;
        flightState = AFTER_APOGEE;
      }
      break;

    case AFTER_APOGEE:
      if (checkMainParachute() == 1)
      {
        flightState = AFTER_MAIN_PAR;
      }
      break;

    case AFTER_MAIN_PAR:
      if (checkLanding() == 1)
      {
        flightState = LANDED;
      }
      break;

    case LANDED:
      if (time.landingTime == 0.0f)
      {
        time.landingTime = time.current;
      }
      osDelay(10000); /* TODO: Something for saving power*/
      break;

    case FLIGHT_FAILURE:
      osDelay(10000); /* TODO: Something for saving power*/
      break;

    default:
      // DEBUG_PROFILE_X
      break;
    }
    osDelay(50);
    /* USER CODE END checkStateEntry */
  }

  /* USER CODE BEGIN Header_dataTaskEntry */
  /**
   * @brief Function implementing the taskEntry thread.
   * @param argument: Not used
   * @retval None
   */
  /* USER CODE END Header_dataTaskEntry */
  void dataTaskEntry(void *argument)
  {
    /* USER CODE BEGIN dataTaskEntry */
    /* Infinite loop */
    for (;;)
    {
      altitudeApogee();
      velocityCalculated();
      
      osDelay(10);
    }
    /* USER CODE END dataTaskEntry */
  }

  /* Private application code --------------------------------------------------*/
  /* USER CODE BEGIN Application */

  /* USER CODE END Application */
