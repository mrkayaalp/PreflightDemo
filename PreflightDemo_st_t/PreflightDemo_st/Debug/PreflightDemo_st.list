
PreflightDemo_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800bf20  0800bf20  0001bf20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c47c  0800c47c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c47c  0800c47c  0001c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c484  0800c484  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c484  0800c484  0001c484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c488  0800c488  0001c488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d88  200001dc  0800c668  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f64  0800c668  00024f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac0e  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e60  00000000  00000000  0003ae5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113c  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a74  00000000  00000000  00041454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b592  00000000  00000000  00066ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd4f0  00000000  00000000  0008245a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007398  00000000  00000000  0015f94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00166ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf08 	.word	0x0800bf08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800bf08 	.word	0x0800bf08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <checkLiftoff>:
#include "main.h"
#include "system.h"
#include "def.h"

uint8_t checkLiftoff()
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    if (altitude.altitude > 50)
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <checkLiftoff+0x28>)
 8001036:	edd3 7a03 	vldr	s15, [r3, #12]
 800103a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800105c <checkLiftoff+0x2c>
 800103e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	dd01      	ble.n	800104c <checkLiftoff+0x1c>
    { // +acc
        return 1;
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <checkLiftoff+0x1e>
    }
    else
        return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000368 	.word	0x20000368
 800105c:	42480000 	.word	0x42480000

08001060 <checkApogee>:

uint8_t checkApogee()
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

    if (altitude.altitude > 500 && altitude.diffToMax > 10)
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <checkApogee+0x3c>)
 8001066:	edd3 7a03 	vldr	s15, [r3, #12]
 800106a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80010a0 <checkApogee+0x40>
 800106e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	dd0b      	ble.n	8001090 <checkApogee+0x30>
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <checkApogee+0x3c>)
 800107a:	edd3 7a07 	vldr	s15, [r3, #28]
 800107e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	dd01      	ble.n	8001090 <checkApogee+0x30>
    { // altitude.diffToMax kısmına emin ol
        return 1;
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <checkApogee+0x32>
    }
    else
        return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000368 	.word	0x20000368
 80010a0:	43fa0000 	.word	0x43fa0000

080010a4 <checkMainParachute>:

uint8_t checkMainParachute()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
    if (altitude.altitude < MAIN_PARACHUTE_ALTITUDE + 10)
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <checkMainParachute+0x28>)
 80010aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80010d0 <checkMainParachute+0x2c>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d501      	bpl.n	80010c0 <checkMainParachute+0x1c>
    {
        return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <checkMainParachute+0x1e>
    }
    else
        return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000368 	.word	0x20000368
 80010d0:	447c8000 	.word	0x447c8000

080010d4 <checkLanding>:
    else
        return 0;
}

uint8_t checkLanding()
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
    if (altitude.altitude < 10 || time.apogeeTime > 31690)
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <checkLanding+0x3c>)
 80010da:	edd3 7a03 	vldr	s15, [r3, #12]
 80010de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d409      	bmi.n	8001100 <checkLanding+0x2c>
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <checkLanding+0x40>)
 80010ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80010f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001118 <checkLanding+0x44>
 80010f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	dd01      	ble.n	8001104 <checkLanding+0x30>
    {
        return 1;
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <checkLanding+0x32>
    }
    else
        return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000368 	.word	0x20000368
 8001114:	200003cc 	.word	0x200003cc
 8001118:	46f79400 	.word	0x46f79400

0800111c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <MX_FREERTOS_Init+0x38>)
 8001122:	2100      	movs	r1, #0
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_FREERTOS_Init+0x3c>)
 8001126:	f003 f96d 	bl	8004404 <osThreadNew>
 800112a:	4603      	mov	r3, r0
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <MX_FREERTOS_Init+0x40>)
 800112e:	6013      	str	r3, [r2, #0]

  /* creation of chechState */
  chechStateHandle = osThreadNew(checkStateEntry, NULL, &chechState_attributes);
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <MX_FREERTOS_Init+0x44>)
 8001132:	2100      	movs	r1, #0
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <MX_FREERTOS_Init+0x48>)
 8001136:	f003 f965 	bl	8004404 <osThreadNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <MX_FREERTOS_Init+0x4c>)
 800113e:	6013      	str	r3, [r2, #0]

  /* creation of taskEntry */
  taskEntryHandle = osThreadNew(dataTaskEntry, NULL, &taskEntry_attributes);
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <MX_FREERTOS_Init+0x50>)
 8001142:	2100      	movs	r1, #0
 8001144:	480a      	ldr	r0, [pc, #40]	; (8001170 <MX_FREERTOS_Init+0x54>)
 8001146:	f003 f95d 	bl	8004404 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <MX_FREERTOS_Init+0x58>)
 800114e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800bfb0 	.word	0x0800bfb0
 8001158:	08001179 	.word	0x08001179
 800115c:	200001fc 	.word	0x200001fc
 8001160:	0800bfd4 	.word	0x0800bfd4
 8001164:	08001189 	.word	0x08001189
 8001168:	20000200 	.word	0x20000200
 800116c:	0800bff8 	.word	0x0800bff8
 8001170:	080012ad 	.word	0x080012ad
 8001174:	20000204 	.word	0x20000204

08001178 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f003 f9d1 	bl	8004528 <osDelay>
 8001186:	e7fb      	b.n	8001180 <StartDefaultTask+0x8>

08001188 <checkStateEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_checkStateEntry */
void checkStateEntry(void *argument)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkStateEntry */
  /* Infinite loop */
  for (;;)
  {
	if(time.current != time.prevTime){
 8001190:	4b41      	ldr	r3, [pc, #260]	; (8001298 <checkStateEntry+0x110>)
 8001192:	ed93 7a00 	vldr	s14, [r3]
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <checkStateEntry+0x110>)
 8001198:	edd3 7a01 	vldr	s15, [r3, #4]
 800119c:	eeb4 7a67 	vcmp.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d00f      	beq.n	80011c6 <checkStateEntry+0x3e>
	  sprintf(flightStateData,"%d\n",flightState);
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <checkStateEntry+0x114>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	493c      	ldr	r1, [pc, #240]	; (80012a0 <checkStateEntry+0x118>)
 80011ae:	483d      	ldr	r0, [pc, #244]	; (80012a4 <checkStateEntry+0x11c>)
 80011b0:	f006 fd82 	bl	8007cb8 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, flightStateData, sizeof(flightStateData));
 80011b4:	2202      	movs	r2, #2
 80011b6:	493b      	ldr	r1, [pc, #236]	; (80012a4 <checkStateEntry+0x11c>)
 80011b8:	483b      	ldr	r0, [pc, #236]	; (80012a8 <checkStateEntry+0x120>)
 80011ba:	f002 f926 	bl	800340a <HAL_UART_Transmit_IT>
	  time.prevTime = time.current;
 80011be:	4b36      	ldr	r3, [pc, #216]	; (8001298 <checkStateEntry+0x110>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a35      	ldr	r2, [pc, #212]	; (8001298 <checkStateEntry+0x110>)
 80011c4:	6053      	str	r3, [r2, #4]
	}

    switch (flightState)
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <checkStateEntry+0x114>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d855      	bhi.n	800127c <checkStateEntry+0xf4>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <checkStateEntry+0x50>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	0800127d 	.word	0x0800127d
 80011e0:	0800127d 	.word	0x0800127d
 80011e4:	08001213 	.word	0x08001213
 80011e8:	0800122d 	.word	0x0800122d
 80011ec:	0800123f 	.word	0x0800123f
 80011f0:	08001251 	.word	0x08001251
 80011f4:	08001273 	.word	0x08001273
    {
    case START:
      if (checkLiftoff() == 1)
 80011f8:	f7ff ff1a 	bl	8001030 <checkLiftoff>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d13e      	bne.n	8001280 <checkStateEntry+0xf8>
      {
        time.liftoffTime = time.current;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <checkStateEntry+0x110>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a24      	ldr	r2, [pc, #144]	; (8001298 <checkStateEntry+0x110>)
 8001208:	6093      	str	r3, [r2, #8]
        flightState = AFTER_LIFTOFF;
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <checkStateEntry+0x114>)
 800120c:	2204      	movs	r2, #4
 800120e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001210:	e036      	b.n	8001280 <checkStateEntry+0xf8>

    case AFTER_LIFTOFF:
      if (checkApogee() == 1)
 8001212:	f7ff ff25 	bl	8001060 <checkApogee>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d133      	bne.n	8001284 <checkStateEntry+0xfc>
      {
        time.apogeeTime = time.current;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <checkStateEntry+0x110>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <checkStateEntry+0x110>)
 8001222:	60d3      	str	r3, [r2, #12]
        flightState = AFTER_APOGEE;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <checkStateEntry+0x114>)
 8001226:	2205      	movs	r2, #5
 8001228:	701a      	strb	r2, [r3, #0]
      }
      break;
 800122a:	e02b      	b.n	8001284 <checkStateEntry+0xfc>

    case AFTER_APOGEE:
      if (checkMainParachute() == 1)
 800122c:	f7ff ff3a 	bl	80010a4 <checkMainParachute>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d128      	bne.n	8001288 <checkStateEntry+0x100>
      {
        flightState = AFTER_MAIN_PAR;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <checkStateEntry+0x114>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800123c:	e024      	b.n	8001288 <checkStateEntry+0x100>

    case AFTER_MAIN_PAR:
      if (checkLanding() == 1)
 800123e:	f7ff ff49 	bl	80010d4 <checkLanding>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d121      	bne.n	800128c <checkStateEntry+0x104>
      {
        flightState = LANDED;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <checkStateEntry+0x114>)
 800124a:	2207      	movs	r2, #7
 800124c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800124e:	e01d      	b.n	800128c <checkStateEntry+0x104>

    case LANDED:
      if (time.landingTime == 0.0f)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <checkStateEntry+0x110>)
 8001252:	edd3 7a06 	vldr	s15, [r3, #24]
 8001256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	d103      	bne.n	8001268 <checkStateEntry+0xe0>
      {
        time.landingTime = time.current;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <checkStateEntry+0x110>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <checkStateEntry+0x110>)
 8001266:	6193      	str	r3, [r2, #24]
      }
      osDelay(10000); /* TODO: Something for saving power*/
 8001268:	f242 7010 	movw	r0, #10000	; 0x2710
 800126c:	f003 f95c 	bl	8004528 <osDelay>
      break;
 8001270:	e00d      	b.n	800128e <checkStateEntry+0x106>

    case FLIGHT_FAILURE:
      osDelay(10000); /* TODO: Something for saving power*/
 8001272:	f242 7010 	movw	r0, #10000	; 0x2710
 8001276:	f003 f957 	bl	8004528 <osDelay>
      break;
 800127a:	e008      	b.n	800128e <checkStateEntry+0x106>

    default:
      // DEBUG_PROFILE_X
      break;
 800127c:	bf00      	nop
 800127e:	e006      	b.n	800128e <checkStateEntry+0x106>
      break;
 8001280:	bf00      	nop
 8001282:	e004      	b.n	800128e <checkStateEntry+0x106>
      break;
 8001284:	bf00      	nop
 8001286:	e002      	b.n	800128e <checkStateEntry+0x106>
      break;
 8001288:	bf00      	nop
 800128a:	e000      	b.n	800128e <checkStateEntry+0x106>
      break;
 800128c:	bf00      	nop
    }
    osDelay(50);
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f003 f94a 	bl	8004528 <osDelay>
	if(time.current != time.prevTime){
 8001294:	e77c      	b.n	8001190 <checkStateEntry+0x8>
 8001296:	bf00      	nop
 8001298:	200003cc 	.word	0x200003cc
 800129c:	20000000 	.word	0x20000000
 80012a0:	0800bf44 	.word	0x0800bf44
 80012a4:	200001f8 	.word	0x200001f8
 80012a8:	200003e8 	.word	0x200003e8

080012ac <dataTaskEntry>:
   * @param argument: Not used
   * @retval None
   */
/* USER CODE END Header_dataTaskEntry */
void dataTaskEntry(void *argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dataTaskEntry */
    /* Infinite loop */
    for (;;)
    {
      altitudeApogee();
 80012b4:	f000 fb10 	bl	80018d8 <altitudeApogee>
      velocityCalculated();
 80012b8:	f000 fb32 	bl	8001920 <velocityCalculated>
      altitudeApogee();
 80012bc:	e7fa      	b.n	80012b4 <dataTaskEntry+0x8>
	...

080012c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <MX_GPIO_Init+0xd0>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a25      	ldr	r2, [pc, #148]	; (8001390 <MX_GPIO_Init+0xd0>)
 80012fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <MX_GPIO_Init+0xd0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <MX_GPIO_Init+0xd0>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_GPIO_Init+0xd0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <MX_GPIO_Init+0xd0>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	4812      	ldr	r0, [pc, #72]	; (8001394 <MX_GPIO_Init+0xd4>)
 800134c:	f000 ff2e 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_GPIO_Init+0xd8>)
 8001368:	f000 fd8c 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800136c:	2320      	movs	r3, #32
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001384:	f000 fd7e 	bl	8001e84 <HAL_GPIO_Init>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020800 	.word	0x40020800

0800139c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  if (huart->Instance == huart2.Instance)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_UART_RxCpltCallback+0x74>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d126      	bne.n	80013fe <HAL_UART_RxCpltCallback+0x62>
  {

    if (rxBuffer[0] != '\n')
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_UART_RxCpltCallback+0x78>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b0a      	cmp	r3, #10
 80013b6:	d00d      	beq.n	80013d4 <HAL_UART_RxCpltCallback+0x38>
    {
      rxStr[rxIndex] = rxBuffer[0];
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_UART_RxCpltCallback+0x7c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_RxCpltCallback+0x78>)
 80013c0:	7819      	ldrb	r1, [r3, #0]
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_UART_RxCpltCallback+0x80>)
 80013c4:	5499      	strb	r1, [r3, r2]
      rxIndex++;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_UART_RxCpltCallback+0x7c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_UART_RxCpltCallback+0x7c>)
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e014      	b.n	80013fe <HAL_UART_RxCpltCallback+0x62>
    }
    else
    {
      //parseData(rxStr);
      parseKongrulData(rxStr);
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <HAL_UART_RxCpltCallback+0x80>)
 80013d6:	f000 fa57 	bl	8001888 <parseKongrulData>
      rxIndex = 0;
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_UART_RxCpltCallback+0x7c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < sizeof(rxStr); i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e007      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x5a>
      {
        rxStr[i] = '\0';
 80013e6:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_UART_RxCpltCallback+0x80>)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < sizeof(rxStr); i++)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80013fc:	d3f3      	bcc.n	80013e6 <HAL_UART_RxCpltCallback+0x4a>
      }
    }
  }
  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 80013fe:	2201      	movs	r2, #1
 8001400:	4904      	ldr	r1, [pc, #16]	; (8001414 <HAL_UART_RxCpltCallback+0x78>)
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <HAL_UART_RxCpltCallback+0x74>)
 8001404:	f002 f846 	bl	8003494 <HAL_UART_Receive_IT>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200003e8 	.word	0x200003e8
 8001414:	20000208 	.word	0x20000208
 8001418:	2000020a 	.word	0x2000020a
 800141c:	2000020c 	.word	0x2000020c

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f000 fb78 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001428:	f000 f814 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142c:	f7ff ff48 	bl	80012c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001430:	f000 face 	bl	80019d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4905      	ldr	r1, [pc, #20]	; (800144c <main+0x2c>)
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <main+0x30>)
 800143a:	f002 f82b 	bl	8003494 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800143e:	f002 ff97 	bl	8004370 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001442:	f7ff fe6b 	bl	800111c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001446:	f002 ffb7 	bl	80043b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800144a:	e7fe      	b.n	800144a <main+0x2a>
 800144c:	20000208 	.word	0x20000208
 8001450:	200003e8 	.word	0x200003e8

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2234      	movs	r2, #52	; 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f006 fcb9 	bl	8007dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <SystemClock_Config+0xd4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a29      	ldr	r2, [pc, #164]	; (8001528 <SystemClock_Config+0xd4>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <SystemClock_Config+0xd4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemClock_Config+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <SystemClock_Config+0xd8>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <SystemClock_Config+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 f9f8 	bl	80028d8 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ee:	f000 f82e 	bl	800154e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fe66 	bl	80021e0 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800151a:	f000 f818 	bl	800154e <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	; 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d101      	bne.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001542:	f000 fb0b 	bl	8001b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001552:	b672      	cpsid	i
}
 8001554:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001556:	e7fe      	b.n	8001556 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_MspInit+0x54>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_MspInit+0x54>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x54>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_MspInit+0x54>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_MspInit+0x54>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_MspInit+0x54>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	210f      	movs	r1, #15
 800159a:	f06f 0001 	mvn.w	r0, #1
 800159e:	f000 fbb5 	bl	8001d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_InitTick+0xe8>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a33      	ldr	r2, [pc, #204]	; (8001698 <HAL_InitTick+0xe8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_InitTick+0xe8>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015dc:	f107 0210 	add.w	r2, r7, #16
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 ff14 	bl	8002414 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d103      	bne.n	80015fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f6:	f000 fee5 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80015fa:	6378      	str	r0, [r7, #52]	; 0x34
 80015fc:	e004      	b.n	8001608 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015fe:	f000 fee1 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8001602:	4603      	mov	r3, r0
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_InitTick+0xec>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	3b01      	subs	r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_InitTick+0xf0>)
 8001618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_InitTick+0xf0>)
 8001620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001624:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_InitTick+0xf0>)
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_InitTick+0xf0>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_InitTick+0xf0>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_InitTick+0xf0>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <HAL_InitTick+0xf0>)
 8001640:	f001 fbe8 	bl	8002e14 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800164a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11b      	bne.n	800168a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <HAL_InitTick+0xf0>)
 8001654:	f001 fc38 	bl	8002ec8 <HAL_TIM_Base_Start_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800165e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001662:	2b00      	cmp	r3, #0
 8001664:	d111      	bne.n	800168a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001666:	201c      	movs	r0, #28
 8001668:	f000 fb6c 	bl	8001d44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d808      	bhi.n	8001684 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001672:	2200      	movs	r2, #0
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	201c      	movs	r0, #28
 8001678:	f000 fb48 	bl	8001d0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167c:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_InitTick+0xf4>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e002      	b.n	800168a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800168a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800168e:	4618      	mov	r0, r3
 8001690:	3738      	adds	r7, #56	; 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	431bde83 	.word	0x431bde83
 80016a0:	2000031c 	.word	0x2000031c
 80016a4:	20000008 	.word	0x20000008

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <TIM2_IRQHandler+0x10>)
 80016da:	f001 fc65 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000031c 	.word	0x2000031c

080016e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <USART2_IRQHandler+0x10>)
 80016ee:	f001 ff01 	bl	80034f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200003e8 	.word	0x200003e8

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001716:	f006 fc09 	bl	8007f2c <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
  return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
  while (1) {}    /* Make sure we hang here */
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
  }
  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f006 fb6e 	bl	8007f2c <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000364 	.word	0x20000364
 8001884:	20004f68 	.word	0x20004f68

08001888 <parseKongrulData>:
           &bpc.mag.y, &bpc.mag.z,
           &bpc.gyro.x, &bpc.gyro.y, &bpc.gyro.z);
}

void parseKongrulData(uint8_t *data)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af06      	add	r7, sp, #24
 800188e:	6078      	str	r0, [r7, #4]
    sscanf(data, "%f, %f, %f, %f, %f, %f, %f",
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <parseKongrulData+0x30>)
 8001892:	9304      	str	r3, [sp, #16]
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <parseKongrulData+0x34>)
 8001896:	9303      	str	r3, [sp, #12]
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <parseKongrulData+0x38>)
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <parseKongrulData+0x3c>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <parseKongrulData+0x40>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <parseKongrulData+0x44>)
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <parseKongrulData+0x48>)
 80018a8:	490a      	ldr	r1, [pc, #40]	; (80018d4 <parseKongrulData+0x4c>)
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f006 fa24 	bl	8007cf8 <siscanf>
           &altitude.altitude, &velocity.verticalVelocity,
           &altitude.temperature, &altitude.humidity,
           &gps.latitude, &gps.longtitude, &time.current);
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200003cc 	.word	0x200003cc
 80018bc:	200003b8 	.word	0x200003b8
 80018c0:	200003b4 	.word	0x200003b4
 80018c4:	20000388 	.word	0x20000388
 80018c8:	20000370 	.word	0x20000370
 80018cc:	2000038c 	.word	0x2000038c
 80018d0:	20000374 	.word	0x20000374
 80018d4:	0800bf70 	.word	0x0800bf70

080018d8 <altitudeApogee>:
        time.flightTime = (time.current - time.liftoffTime);
    }
}

void altitudeApogee()
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
    altitude.diffToMax = altitude.maxAltitude - altitude.altitude;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <altitudeApogee+0x44>)
 80018de:	ed93 7a06 	vldr	s14, [r3, #24]
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <altitudeApogee+0x44>)
 80018e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <altitudeApogee+0x44>)
 80018ee:	edc3 7a07 	vstr	s15, [r3, #28]
    if (altitude.altitude > altitude.maxAltitude)
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <altitudeApogee+0x44>)
 80018f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <altitudeApogee+0x44>)
 80018fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80018fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	dc00      	bgt.n	800190a <altitudeApogee+0x32>
    {
        altitude.maxAltitude = altitude.altitude;
    }
}
 8001908:	e003      	b.n	8001912 <altitudeApogee+0x3a>
        altitude.maxAltitude = altitude.altitude;
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <altitudeApogee+0x44>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4a03      	ldr	r2, [pc, #12]	; (800191c <altitudeApogee+0x44>)
 8001910:	6193      	str	r3, [r2, #24]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	20000368 	.word	0x20000368

08001920 <velocityCalculated>:

void velocityCalculated()
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
    altitude.prevAltitude = altitude.altitude;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <velocityCalculated+0x7c>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <velocityCalculated+0x7c>)
 800192a:	6113      	str	r3, [r2, #16]

    // calculate vertical velocity m/s
    velocity.timeDiffVertical =
        (time.current - velocity.prevTimeVertical) / 1000.0f;
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <velocityCalculated+0x80>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <velocityCalculated+0x84>)
 8001934:	edd3 7a03 	vldr	s15, [r3, #12]
 8001938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800193c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80019a8 <velocityCalculated+0x88>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
    velocity.timeDiffVertical =
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <velocityCalculated+0x84>)
 8001946:	edc3 7a02 	vstr	s15, [r3, #8]

    if (velocity.timeDiffVertical >
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <velocityCalculated+0x84>)
 800194c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	dc00      	bgt.n	8001960 <velocityCalculated+0x40>
            (velocity.timeDiffVertical);

        altitude.prevAltitudeForVelocity = altitude.altitude;
    }

    return 0;
 800195e:	e018      	b.n	8001992 <velocityCalculated+0x72>
        velocity.prevTimeVertical = time.current;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <velocityCalculated+0x80>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <velocityCalculated+0x84>)
 8001966:	60d3      	str	r3, [r2, #12]
            (altitude.altitude - altitude.prevAltitudeForVelocity) /
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <velocityCalculated+0x7c>)
 800196a:	ed93 7a03 	vldr	s14, [r3, #12]
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <velocityCalculated+0x7c>)
 8001970:	edd3 7a05 	vldr	s15, [r3, #20]
 8001974:	ee77 6a67 	vsub.f32	s13, s14, s15
            (velocity.timeDiffVertical);
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <velocityCalculated+0x84>)
 800197a:	ed93 7a02 	vldr	s14, [r3, #8]
            (altitude.altitude - altitude.prevAltitudeForVelocity) /
 800197e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        velocity.verticalVelocityCalculated =
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <velocityCalculated+0x84>)
 8001984:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        altitude.prevAltitudeForVelocity = altitude.altitude;
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <velocityCalculated+0x7c>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <velocityCalculated+0x7c>)
 800198e:	6153      	str	r3, [r2, #20]
    return 0;
 8001990:	bf00      	nop
}
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000368 	.word	0x20000368
 80019a0:	200003cc 	.word	0x200003cc
 80019a4:	2000038c 	.word	0x2000038c
 80019a8:	447a0000 	.word	0x447a0000

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART2_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a08:	f001 fcb2 	bl	8003370 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f7ff fd9c 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200003e8 	.word	0x200003e8
 8001a20:	40004400 	.word	0x40004400

08001a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_UART_MspInit+0x94>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d133      	bne.n	8001aae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a7e:	230c      	movs	r3, #12
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a9a:	f000 f9f3 	bl	8001e84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f000 f932 	bl	8001d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa8:	2026      	movs	r0, #38	; 0x26
 8001aaa:	f000 f94b 	bl	8001d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aee:	f7ff ff5d 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f006 fa21 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff fc93 	bl	8001420 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b08:	0800c48c 	.word	0x0800c48c
  ldr r2, =_sbss
 8001b0c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b10:	20004f64 	.word	0x20004f64

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f8d8 	bl	8001cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f7ff fd32 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fd04 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	2000042c 	.word	0x2000042c

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000042c 	.word	0x2000042c

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff4c 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1e:	f7ff ff61 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7ff ffb1 	bl	8001c90 <NVIC_EncodePriority>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff80 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff54 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff ff09 	bl	8001b84 <HAL_GetTick>
 8001d72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e052      	b.n	8001e38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0216 	bic.w	r2, r2, #22
 8001da0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HAL_DMA_Abort+0x62>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de2:	e013      	b.n	8001e0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de4:	f7ff fece 	bl	8001b84 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d90c      	bls.n	8001e0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e015      	b.n	8001e38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e4      	bne.n	8001de4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	223f      	movs	r2, #63	; 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00c      	b.n	8001e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e165      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8154 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80ae 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <HAL_GPIO_Init+0x300>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x304>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4f      	ldr	r2, [pc, #316]	; (800218c <HAL_GPIO_Init+0x308>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x21a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_GPIO_Init+0x30c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x216>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <HAL_GPIO_Init+0x310>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x212>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4b      	ldr	r2, [pc, #300]	; (800219c <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x20a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4a      	ldr	r2, [pc, #296]	; (80021a0 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x206>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a49      	ldr	r2, [pc, #292]	; (80021a4 <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x202>
 8002082:	2306      	movs	r3, #6
 8002084:	e00c      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002086:	2307      	movs	r3, #7
 8002088:	e00a      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800208a:	2305      	movs	r3, #5
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800208e:	2304      	movs	r3, #4
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_GPIO_Init+0x324>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <HAL_GPIO_Init+0x324>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x324>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_GPIO_Init+0x324>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002112:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_GPIO_Init+0x324>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f ae96 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff fc58 	bl	8001b84 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff fc54 	bl	8001b84 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f887 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490a      	ldr	r1, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f912 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	0800c01c 	.word	0x0800c01c
 80023a4:	20000004 	.word	0x20000004
 80023a8:	20000008 	.word	0x20000008

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	0800c02c 	.word	0x0800c02c

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f0:	f7ff ffdc 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	0800c02c 	.word	0x0800c02c

08002414 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	220f      	movs	r2, #15
 8002422:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_RCC_GetClockConfig+0x60>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40023c00 	.word	0x40023c00

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800247c:	b0ae      	sub	sp, #184	; 0xb8
 800247e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249e:	4bcb      	ldr	r3, [pc, #812]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	f200 8206 	bhi.w	80028b8 <HAL_RCC_GetSysClockFreq+0x440>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024e9 	.word	0x080024e9
 80024b8:	080028b9 	.word	0x080028b9
 80024bc:	080028b9 	.word	0x080028b9
 80024c0:	080028b9 	.word	0x080028b9
 80024c4:	080024f1 	.word	0x080024f1
 80024c8:	080028b9 	.word	0x080028b9
 80024cc:	080028b9 	.word	0x080028b9
 80024d0:	080028b9 	.word	0x080028b9
 80024d4:	080024f9 	.word	0x080024f9
 80024d8:	080028b9 	.word	0x080028b9
 80024dc:	080028b9 	.word	0x080028b9
 80024e0:	080028b9 	.word	0x080028b9
 80024e4:	080026e9 	.word	0x080026e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4bb9      	ldr	r3, [pc, #740]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80024ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80024ee:	e1e7      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f0:	4bb8      	ldr	r3, [pc, #736]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024f6:	e1e3      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f8:	4bb4      	ldr	r3, [pc, #720]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002504:	4bb1      	ldr	r3, [pc, #708]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d071      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002510:	4bae      	ldr	r3, [pc, #696]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800251c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002536:	4622      	mov	r2, r4
 8002538:	462b      	mov	r3, r5
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	0159      	lsls	r1, r3, #5
 8002544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002548:	0150      	lsls	r0, r2, #5
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4621      	mov	r1, r4
 8002550:	1a51      	subs	r1, r2, r1
 8002552:	6439      	str	r1, [r7, #64]	; 0x40
 8002554:	4629      	mov	r1, r5
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002568:	4649      	mov	r1, r9
 800256a:	018b      	lsls	r3, r1, #6
 800256c:	4641      	mov	r1, r8
 800256e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002572:	4641      	mov	r1, r8
 8002574:	018a      	lsls	r2, r1, #6
 8002576:	4641      	mov	r1, r8
 8002578:	1a51      	subs	r1, r2, r1
 800257a:	63b9      	str	r1, [r7, #56]	; 0x38
 800257c:	4649      	mov	r1, r9
 800257e:	eb63 0301 	sbc.w	r3, r3, r1
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002590:	4649      	mov	r1, r9
 8002592:	00cb      	lsls	r3, r1, #3
 8002594:	4641      	mov	r1, r8
 8002596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259a:	4641      	mov	r1, r8
 800259c:	00ca      	lsls	r2, r1, #3
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	4622      	mov	r2, r4
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
 80025aa:	462b      	mov	r3, r5
 80025ac:	460a      	mov	r2, r1
 80025ae:	eb42 0303 	adc.w	r3, r2, r3
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025c0:	4629      	mov	r1, r5
 80025c2:	024b      	lsls	r3, r1, #9
 80025c4:	4621      	mov	r1, r4
 80025c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ca:	4621      	mov	r1, r4
 80025cc:	024a      	lsls	r2, r1, #9
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025e4:	f7fe fb70 	bl	8000cc8 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4613      	mov	r3, r2
 80025ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025f2:	e067      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f4:	4b75      	ldr	r3, [pc, #468]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002600:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260c:	67bb      	str	r3, [r7, #120]	; 0x78
 800260e:	2300      	movs	r3, #0
 8002610:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002612:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002616:	4622      	mov	r2, r4
 8002618:	462b      	mov	r3, r5
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0159      	lsls	r1, r3, #5
 8002624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002628:	0150      	lsls	r0, r2, #5
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4621      	mov	r1, r4
 8002630:	1a51      	subs	r1, r2, r1
 8002632:	62b9      	str	r1, [r7, #40]	; 0x28
 8002634:	4629      	mov	r1, r5
 8002636:	eb63 0301 	sbc.w	r3, r3, r1
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002648:	4649      	mov	r1, r9
 800264a:	018b      	lsls	r3, r1, #6
 800264c:	4641      	mov	r1, r8
 800264e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002652:	4641      	mov	r1, r8
 8002654:	018a      	lsls	r2, r1, #6
 8002656:	4641      	mov	r1, r8
 8002658:	ebb2 0a01 	subs.w	sl, r2, r1
 800265c:	4649      	mov	r1, r9
 800265e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800266e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002672:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002676:	4692      	mov	sl, r2
 8002678:	469b      	mov	fp, r3
 800267a:	4623      	mov	r3, r4
 800267c:	eb1a 0303 	adds.w	r3, sl, r3
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	462b      	mov	r3, r5
 8002684:	eb4b 0303 	adc.w	r3, fp, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002696:	4629      	mov	r1, r5
 8002698:	028b      	lsls	r3, r1, #10
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a0:	4621      	mov	r1, r4
 80026a2:	028a      	lsls	r2, r1, #10
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ac:	2200      	movs	r2, #0
 80026ae:	673b      	str	r3, [r7, #112]	; 0x70
 80026b0:	677a      	str	r2, [r7, #116]	; 0x74
 80026b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026b6:	f7fe fb07 	bl	8000cc8 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4613      	mov	r3, r2
 80026c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c4:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	3301      	adds	r3, #1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026e6:	e0eb      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e8:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d06b      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	2200      	movs	r2, #0
 8002708:	66bb      	str	r3, [r7, #104]	; 0x68
 800270a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800270c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800270e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002712:	663b      	str	r3, [r7, #96]	; 0x60
 8002714:	2300      	movs	r3, #0
 8002716:	667b      	str	r3, [r7, #100]	; 0x64
 8002718:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800271c:	4622      	mov	r2, r4
 800271e:	462b      	mov	r3, r5
 8002720:	f04f 0000 	mov.w	r0, #0
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	0159      	lsls	r1, r3, #5
 800272a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800272e:	0150      	lsls	r0, r2, #5
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4621      	mov	r1, r4
 8002736:	1a51      	subs	r1, r2, r1
 8002738:	61b9      	str	r1, [r7, #24]
 800273a:	4629      	mov	r1, r5
 800273c:	eb63 0301 	sbc.w	r3, r3, r1
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800274e:	4659      	mov	r1, fp
 8002750:	018b      	lsls	r3, r1, #6
 8002752:	4651      	mov	r1, sl
 8002754:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002758:	4651      	mov	r1, sl
 800275a:	018a      	lsls	r2, r1, #6
 800275c:	4651      	mov	r1, sl
 800275e:	ebb2 0801 	subs.w	r8, r2, r1
 8002762:	4659      	mov	r1, fp
 8002764:	eb63 0901 	sbc.w	r9, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002774:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002778:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800277c:	4690      	mov	r8, r2
 800277e:	4699      	mov	r9, r3
 8002780:	4623      	mov	r3, r4
 8002782:	eb18 0303 	adds.w	r3, r8, r3
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	462b      	mov	r3, r5
 800278a:	eb49 0303 	adc.w	r3, r9, r3
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800279c:	4629      	mov	r1, r5
 800279e:	024b      	lsls	r3, r1, #9
 80027a0:	4621      	mov	r1, r4
 80027a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027a6:	4621      	mov	r1, r4
 80027a8:	024a      	lsls	r2, r1, #9
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027b2:	2200      	movs	r2, #0
 80027b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80027b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027bc:	f7fe fa84 	bl	8000cc8 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ca:	e065      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x420>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	2200      	movs	r2, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	4611      	mov	r1, r2
 80027e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027e8:	653b      	str	r3, [r7, #80]	; 0x50
 80027ea:	2300      	movs	r3, #0
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
 80027ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80027f2:	4642      	mov	r2, r8
 80027f4:	464b      	mov	r3, r9
 80027f6:	f04f 0000 	mov.w	r0, #0
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	0159      	lsls	r1, r3, #5
 8002800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002804:	0150      	lsls	r0, r2, #5
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4641      	mov	r1, r8
 800280c:	1a51      	subs	r1, r2, r1
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	4649      	mov	r1, r9
 8002812:	eb63 0301 	sbc.w	r3, r3, r1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002824:	4659      	mov	r1, fp
 8002826:	018b      	lsls	r3, r1, #6
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282e:	4651      	mov	r1, sl
 8002830:	018a      	lsls	r2, r1, #6
 8002832:	4651      	mov	r1, sl
 8002834:	1a54      	subs	r4, r2, r1
 8002836:	4659      	mov	r1, fp
 8002838:	eb63 0501 	sbc.w	r5, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	00eb      	lsls	r3, r5, #3
 8002846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	4643      	mov	r3, r8
 8002852:	18e3      	adds	r3, r4, r3
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	464b      	mov	r3, r9
 8002858:	eb45 0303 	adc.w	r3, r5, r3
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4629      	mov	r1, r5
 800286c:	028b      	lsls	r3, r1, #10
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002874:	4621      	mov	r1, r4
 8002876:	028a      	lsls	r2, r1, #10
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002880:	2200      	movs	r2, #0
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
 8002884:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002886:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800288a:	f7fe fa1d 	bl	8000cc8 <__aeabi_uldivmod>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4613      	mov	r3, r2
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0f1b      	lsrs	r3, r3, #28
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028b6:	e003      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	37b8      	adds	r7, #184	; 0xb8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	00f42400 	.word	0x00f42400

080028d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e28d      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8083 	beq.w	80029fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028f8:	4b94      	ldr	r3, [pc, #592]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d019      	beq.n	8002938 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002904:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800290c:	2b08      	cmp	r3, #8
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002910:	4b8e      	ldr	r3, [pc, #568]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b8b      	ldr	r3, [pc, #556]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d112      	bne.n	8002950 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002936:	d10b      	bne.n	8002950 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b84      	ldr	r3, [pc, #528]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05b      	beq.n	80029fc <HAL_RCC_OscConfig+0x124>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d157      	bne.n	80029fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e25a      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x90>
 800295a:	4b7c      	ldr	r3, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a7b      	ldr	r2, [pc, #492]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <HAL_RCC_OscConfig+0xcc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0xb4>
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a75      	ldr	r2, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b73      	ldr	r3, [pc, #460]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a72      	ldr	r2, [pc, #456]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0xcc>
 800298c:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6b      	ldr	r2, [pc, #428]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 800299e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff f8ea 	bl	8001b84 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7ff f8e6 	bl	8001b84 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e21f      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b61      	ldr	r3, [pc, #388]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0xdc>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7ff f8d6 	bl	8001b84 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff f8d2 	bl	8001b84 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e20b      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x104>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d06f      	beq.n	8002aea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a0a:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d017      	beq.n	8002a46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d105      	bne.n	8002a2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d11c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3a:	4b44      	ldr	r3, [pc, #272]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d116      	bne.n	8002a74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x186>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d001      	beq.n	8002a5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e1d3      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	e03a      	b.n	8002aea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7c:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_RCC_OscConfig+0x278>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff f87f 	bl	8001b84 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7ff f87b 	bl	8001b84 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1b4      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4925      	ldr	r1, [pc, #148]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e015      	b.n	8002aea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0x278>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f85e 	bl	8001b84 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002acc:	f7ff f85a 	bl	8001b84 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e193      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d036      	beq.n	8002b64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7ff f83e 	bl	8001b84 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7ff f83a 	bl	8001b84 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e173      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x234>
 8002b2a:	e01b      	b.n	8002b64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7ff f827 	bl	8001b84 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b38:	e00e      	b.n	8002b58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f823 	bl	8001b84 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d907      	bls.n	8002b58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e15c      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	42470000 	.word	0x42470000
 8002b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b8a      	ldr	r3, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ea      	bne.n	8002b3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8097 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4b83      	ldr	r3, [pc, #524]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b7f      	ldr	r3, [pc, #508]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a7e      	ldr	r2, [pc, #504]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b7c      	ldr	r3, [pc, #496]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <HAL_RCC_OscConfig+0x4b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x4b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x4b0>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe ffe3 	bl	8001b84 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe ffdf 	bl	8001b84 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e118      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x4b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x31e>
 8002be8:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a65      	ldr	r2, [pc, #404]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x358>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x340>
 8002bfe:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a60      	ldr	r2, [pc, #384]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a5d      	ldr	r2, [pc, #372]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0x358>
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a59      	ldr	r2, [pc, #356]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	f023 0304 	bic.w	r3, r3, #4
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe ffa4 	bl	8001b84 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe ffa0 	bl	8001b84 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0d7      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ee      	beq.n	8002c40 <HAL_RCC_OscConfig+0x368>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe ff8e 	bl	8001b84 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe ff8a 	bl	8001b84 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0c1      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c82:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ee      	bne.n	8002c6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80ad 	beq.w	8002e04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d060      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d145      	bne.n	8002d4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x4b4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ff5e 	bl	8001b84 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe ff5a 	bl	8001b84 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e093      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	3b01      	subs	r3, #1
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	071b      	lsls	r3, r3, #28
 8002d16:	491b      	ldr	r1, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x4b4>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe ff2f 	bl	8001b84 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe ff2b 	bl	8001b84 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e064      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x452>
 8002d48:	e05c      	b.n	8002e04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x4b4>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe ff18 	bl	8001b84 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe ff14 	bl	8001b84 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04d      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x480>
 8002d76:	e045      	b.n	8002e04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e040      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_RCC_OscConfig+0x538>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d030      	beq.n	8002e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d129      	bne.n	8002e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d122      	bne.n	8002e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d119      	bne.n	8002e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d10f      	bne.n	8002e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800

08002e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f839 	bl	8002eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 f9d8 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04e      	b.n	8002f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d01d      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x80>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d010      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	e007      	b.n	8002f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40001800 	.word	0x40001800

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0202 	mvn.w	r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8ee 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8e0 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8f1 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8c4 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8b6 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8c7 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0208 	mvn.w	r2, #8
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f89a 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f88c 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f89d 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f870 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f862 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f873 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fa02 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f902 	bl	800335c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f838 	bl	80031f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0220 	mvn.w	r2, #32
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8cc 	bl	8003348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a40      	ldr	r2, [pc, #256]	; (800331c <TIM_Base_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d00f      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <TIM_Base_SetConfig+0x118>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3c      	ldr	r2, [pc, #240]	; (8003324 <TIM_Base_SetConfig+0x11c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <TIM_Base_SetConfig+0x120>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3a      	ldr	r2, [pc, #232]	; (800332c <TIM_Base_SetConfig+0x124>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2f      	ldr	r2, [pc, #188]	; (800331c <TIM_Base_SetConfig+0x114>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d027      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <TIM_Base_SetConfig+0x118>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d023      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <TIM_Base_SetConfig+0x11c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <TIM_Base_SetConfig+0x120>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <TIM_Base_SetConfig+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <TIM_Base_SetConfig+0x128>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <TIM_Base_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <TIM_Base_SetConfig+0x130>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a25      	ldr	r2, [pc, #148]	; (800333c <TIM_Base_SetConfig+0x134>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a24      	ldr	r2, [pc, #144]	; (8003340 <TIM_Base_SetConfig+0x138>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a23      	ldr	r2, [pc, #140]	; (8003344 <TIM_Base_SetConfig+0x13c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <TIM_Base_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0xf8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <TIM_Base_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	615a      	str	r2, [r3, #20]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800
 800333c:	40001800 	.word	0x40001800
 8003340:	40001c00 	.word	0x40001c00
 8003344:	40002000 	.word	0x40002000

08003348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e03f      	b.n	8003402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fb44 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fd23 	bl	8003e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	4613      	mov	r3, r2
 8003416:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b20      	cmp	r3, #32
 8003422:	d130      	bne.n	8003486 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_UART_Transmit_IT+0x26>
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e029      	b.n	8003488 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_UART_Transmit_IT+0x38>
 800343e:	2302      	movs	r3, #2
 8003440:	e022      	b.n	8003488 <HAL_UART_Transmit_IT+0x7e>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2221      	movs	r2, #33	; 0x21
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003480:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d11d      	bne.n	80034ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_Receive_IT+0x26>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e016      	b.n	80034ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Receive_IT+0x38>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e00f      	b.n	80034ec <HAL_UART_Receive_IT+0x58>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	461a      	mov	r2, r3
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fab5 	bl	8003a50 <UART_Start_Receive_IT>
 80034e6:	4603      	mov	r3, r0
 80034e8:	e000      	b.n	80034ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0ba      	sub	sp, #232	; 0xe8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_UART_IRQHandler+0x66>
 8003546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fb99 	bl	8003c8a <UART_Receive_IT>
      return;
 8003558:	e256      	b.n	8003a08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800355a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80de 	beq.w	8003720 <HAL_UART_IRQHandler+0x22c>
 8003564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003574:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80d1 	beq.w	8003720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_UART_IRQHandler+0xae>
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_UART_IRQHandler+0xd2>
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0202 	orr.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_UART_IRQHandler+0xf6>
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d011      	beq.n	800361a <HAL_UART_IRQHandler+0x126>
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f043 0208 	orr.w	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 81ed 	beq.w	80039fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x14e>
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb24 	bl	8003c8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_UART_IRQHandler+0x17a>
 8003666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d04f      	beq.n	800370e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa2c 	bl	8003acc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d141      	bne.n	8003706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800369c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1d9      	bne.n	8003682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4a7d      	ldr	r2, [pc, #500]	; (80038d0 <HAL_UART_IRQHandler+0x3dc>)
 80036dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fbac 	bl	8001e40 <HAL_DMA_Abort_IT>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f8:	4610      	mov	r0, r2
 80036fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e00e      	b.n	800371c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f990 	bl	8003a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	e00a      	b.n	800371c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f98c 	bl	8003a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	e006      	b.n	800371c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f988 	bl	8003a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800371a:	e170      	b.n	80039fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	bf00      	nop
    return;
 800371e:	e16e      	b.n	80039fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	2b01      	cmp	r3, #1
 8003726:	f040 814a 	bne.w	80039be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8143 	beq.w	80039be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 813c 	beq.w	80039be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	f040 80b4 	bne.w	80038d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8140 	beq.w	8003a02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800378a:	429a      	cmp	r2, r3
 800378c:	f080 8139 	bcs.w	8003a02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003796:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	f000 8088 	beq.w	80038b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1d9      	bne.n	80037a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3314      	adds	r3, #20
 80037f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003816:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800381a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800381e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e1      	bne.n	80037f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3314      	adds	r3, #20
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800383e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003852:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e3      	bne.n	800382e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	f023 0310 	bic.w	r3, r3, #16
 800388a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003898:	65ba      	str	r2, [r7, #88]	; 0x58
 800389a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800389e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e3      	bne.n	8003874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fa55 	bl	8001d60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8b6 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038cc:	e099      	b.n	8003a02 <HAL_UART_IRQHandler+0x50e>
 80038ce:	bf00      	nop
 80038d0:	08003b93 	.word	0x08003b93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 808b 	beq.w	8003a06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800391e:	647a      	str	r2, [r7, #68]	; 0x44
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e3      	bne.n	80038fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	623b      	str	r3, [r7, #32]
   return(result);
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003956:	633a      	str	r2, [r7, #48]	; 0x30
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800395c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e3      	bne.n	8003932 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	60fb      	str	r3, [r7, #12]
   return(result);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0310 	bic.w	r3, r3, #16
 800398e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800399c:	61fa      	str	r2, [r7, #28]
 800399e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	69b9      	ldr	r1, [r7, #24]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	617b      	str	r3, [r7, #20]
   return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e3      	bne.n	8003978 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f83e 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039bc:	e023      	b.n	8003a06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_UART_IRQHandler+0x4ea>
 80039ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8ef 	bl	8003bba <UART_Transmit_IT>
    return;
 80039dc:	e014      	b.n	8003a08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00e      	beq.n	8003a08 <HAL_UART_IRQHandler+0x514>
 80039ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f92f 	bl	8003c5a <UART_EndTransmit_IT>
    return;
 80039fc:	e004      	b.n	8003a08 <HAL_UART_IRQHandler+0x514>
    return;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <HAL_UART_IRQHandler+0x514>
      return;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <HAL_UART_IRQHandler+0x514>
      return;
 8003a06:	bf00      	nop
  }
}
 8003a08:	37e8      	adds	r7, #232	; 0xe8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop

08003a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	88fa      	ldrh	r2, [r7, #6]
 8003a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2222      	movs	r2, #34	; 0x22
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0220 	orr.w	r2, r2, #32
 8003abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b095      	sub	sp, #84	; 0x54
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003af4:	643a      	str	r2, [r7, #64]	; 0x40
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3314      	adds	r3, #20
 8003b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d119      	bne.n	8003b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b64:	61ba      	str	r2, [r7, #24]
 8003b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	613b      	str	r3, [r7, #16]
   return(result);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b86:	bf00      	nop
 8003b88:	3754      	adds	r7, #84	; 0x54
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff ff39 	bl	8003a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b21      	cmp	r3, #33	; 0x21
 8003bcc:	d13e      	bne.n	8003c4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd6:	d114      	bne.n	8003c02 <UART_Transmit_IT+0x48>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d110      	bne.n	8003c02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]
 8003c00:	e008      	b.n	8003c14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6211      	str	r1, [r2, #32]
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4619      	mov	r1, r3
 8003c22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10f      	bne.n	8003c48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fec8 	bl	8003a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08c      	sub	sp, #48	; 0x30
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b22      	cmp	r3, #34	; 0x22
 8003c9c:	f040 80ab 	bne.w	8003df6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d117      	bne.n	8003cda <UART_Receive_IT+0x50>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d113      	bne.n	8003cda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	1c9a      	adds	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e026      	b.n	8003d28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d007      	beq.n	8003cfe <UART_Receive_IT+0x74>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <UART_Receive_IT+0x82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e008      	b.n	8003d1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4619      	mov	r1, r3
 8003d36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d15a      	bne.n	8003df2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0220 	bic.w	r2, r2, #32
 8003d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d135      	bne.n	8003de8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	613b      	str	r3, [r7, #16]
   return(result);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f023 0310 	bic.w	r3, r3, #16
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	623a      	str	r2, [r7, #32]
 8003da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	69f9      	ldr	r1, [r7, #28]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d10a      	bne.n	8003dda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fe29 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
 8003de6:	e002      	b.n	8003dee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fd fad7 	bl	800139c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e002      	b.n	8003df8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b0c0      	sub	sp, #256	; 0x100
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	ea40 0301 	orr.w	r3, r0, r1
 8003e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e58:	f021 010c 	bic.w	r1, r1, #12
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e66:	430b      	orrs	r3, r1
 8003e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	6999      	ldr	r1, [r3, #24]
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	ea40 0301 	orr.w	r3, r0, r1
 8003e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b8f      	ldr	r3, [pc, #572]	; (80040cc <UART_SetConfig+0x2cc>)
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d005      	beq.n	8003ea0 <UART_SetConfig+0xa0>
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b8d      	ldr	r3, [pc, #564]	; (80040d0 <UART_SetConfig+0x2d0>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d104      	bne.n	8003eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe faa4 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ea8:	e003      	b.n	8003eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eaa:	f7fe fa8b 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003eae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	f040 810c 	bne.w	80040d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	1891      	adds	r1, r2, r2
 8003ed8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eda:	415b      	adcs	r3, r3
 8003edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	eb12 0801 	adds.w	r8, r2, r1
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb43 0901 	adc.w	r9, r3, r1
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f02:	4690      	mov	r8, r2
 8003f04:	4699      	mov	r9, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	eb18 0303 	adds.w	r3, r8, r3
 8003f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f10:	462b      	mov	r3, r5
 8003f12:	eb49 0303 	adc.w	r3, r9, r3
 8003f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f2e:	460b      	mov	r3, r1
 8003f30:	18db      	adds	r3, r3, r3
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50
 8003f34:	4613      	mov	r3, r2
 8003f36:	eb42 0303 	adc.w	r3, r2, r3
 8003f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f44:	f7fc fec0 	bl	8000cc8 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	011c      	lsls	r4, r3, #4
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f70:	415b      	adcs	r3, r3
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f78:	4641      	mov	r1, r8
 8003f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f7e:	4649      	mov	r1, r9
 8003f80:	eb43 0b01 	adc.w	fp, r3, r1
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f98:	4692      	mov	sl, r2
 8003f9a:	469b      	mov	fp, r3
 8003f9c:	4643      	mov	r3, r8
 8003f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fda:	f7fc fe75 	bl	8000cc8 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2264      	movs	r2, #100	; 0x64
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	1acb      	subs	r3, r1, r3
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004008:	441c      	add	r4, r3
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004014:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	1891      	adds	r1, r2, r2
 8004022:	63b9      	str	r1, [r7, #56]	; 0x38
 8004024:	415b      	adcs	r3, r3
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800402c:	4641      	mov	r1, r8
 800402e:	1851      	adds	r1, r2, r1
 8004030:	6339      	str	r1, [r7, #48]	; 0x30
 8004032:	4649      	mov	r1, r9
 8004034:	414b      	adcs	r3, r1
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004044:	4659      	mov	r1, fp
 8004046:	00cb      	lsls	r3, r1, #3
 8004048:	4651      	mov	r1, sl
 800404a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404e:	4651      	mov	r1, sl
 8004050:	00ca      	lsls	r2, r1, #3
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	4603      	mov	r3, r0
 8004058:	4642      	mov	r2, r8
 800405a:	189b      	adds	r3, r3, r2
 800405c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004060:	464b      	mov	r3, r9
 8004062:	460a      	mov	r2, r1
 8004064:	eb42 0303 	adc.w	r3, r2, r3
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004078:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800407c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004080:	460b      	mov	r3, r1
 8004082:	18db      	adds	r3, r3, r3
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
 8004086:	4613      	mov	r3, r2
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004096:	f7fc fe17 	bl	8000cc8 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 1302 	umull	r1, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	2164      	movs	r1, #100	; 0x64
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	3332      	adds	r3, #50	; 0x32
 80040b2:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <UART_SetConfig+0x2d4>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	f003 0207 	and.w	r2, r3, #7
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4422      	add	r2, r4
 80040c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040c8:	e106      	b.n	80042d8 <UART_SetConfig+0x4d8>
 80040ca:	bf00      	nop
 80040cc:	40011000 	.word	0x40011000
 80040d0:	40011400 	.word	0x40011400
 80040d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040ea:	4642      	mov	r2, r8
 80040ec:	464b      	mov	r3, r9
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	6239      	str	r1, [r7, #32]
 80040f2:	415b      	adcs	r3, r3
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
 80040f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040fa:	4641      	mov	r1, r8
 80040fc:	1854      	adds	r4, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb43 0501 	adc.w	r5, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	00eb      	lsls	r3, r5, #3
 800410e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004112:	00e2      	lsls	r2, r4, #3
 8004114:	4614      	mov	r4, r2
 8004116:	461d      	mov	r5, r3
 8004118:	4643      	mov	r3, r8
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004120:	464b      	mov	r3, r9
 8004122:	eb45 0303 	adc.w	r3, r5, r3
 8004126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004146:	4629      	mov	r1, r5
 8004148:	008b      	lsls	r3, r1, #2
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004150:	4621      	mov	r1, r4
 8004152:	008a      	lsls	r2, r1, #2
 8004154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004158:	f7fc fdb6 	bl	8000cc8 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b60      	ldr	r3, [pc, #384]	; (80042e4 <UART_SetConfig+0x4e4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004174:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	61b9      	str	r1, [r7, #24]
 8004184:	415b      	adcs	r3, r3
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418c:	4641      	mov	r1, r8
 800418e:	1851      	adds	r1, r2, r1
 8004190:	6139      	str	r1, [r7, #16]
 8004192:	4649      	mov	r1, r9
 8004194:	414b      	adcs	r3, r1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a4:	4659      	mov	r1, fp
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4651      	mov	r1, sl
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4642      	mov	r2, r8
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041c0:	464b      	mov	r3, r9
 80041c2:	460a      	mov	r2, r1
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041e4:	4649      	mov	r1, r9
 80041e6:	008b      	lsls	r3, r1, #2
 80041e8:	4641      	mov	r1, r8
 80041ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ee:	4641      	mov	r1, r8
 80041f0:	008a      	lsls	r2, r1, #2
 80041f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041f6:	f7fc fd67 	bl	8000cc8 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <UART_SetConfig+0x4e4>)
 8004202:	fba3 2301 	umull	r2, r3, r3, r1
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2264      	movs	r2, #100	; 0x64
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	1acb      	subs	r3, r1, r3
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	3332      	adds	r3, #50	; 0x32
 8004214:	4a33      	ldr	r2, [pc, #204]	; (80042e4 <UART_SetConfig+0x4e4>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004220:	441c      	add	r4, r3
 8004222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004226:	2200      	movs	r2, #0
 8004228:	673b      	str	r3, [r7, #112]	; 0x70
 800422a:	677a      	str	r2, [r7, #116]	; 0x74
 800422c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	415b      	adcs	r3, r3
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	66bb      	str	r3, [r7, #104]	; 0x68
 8004272:	464b      	mov	r3, r9
 8004274:	460a      	mov	r2, r1
 8004276:	eb42 0303 	adc.w	r3, r2, r3
 800427a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	663b      	str	r3, [r7, #96]	; 0x60
 8004286:	667a      	str	r2, [r7, #100]	; 0x64
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004294:	4649      	mov	r1, r9
 8004296:	008b      	lsls	r3, r1, #2
 8004298:	4641      	mov	r1, r8
 800429a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429e:	4641      	mov	r1, r8
 80042a0:	008a      	lsls	r2, r1, #2
 80042a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042a6:	f7fc fd0f 	bl	8000cc8 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <UART_SetConfig+0x4e4>)
 80042b0:	fba3 1302 	umull	r1, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	3332      	adds	r3, #50	; 0x32
 80042c2:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <UART_SetConfig+0x4e4>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	f003 020f 	and.w	r2, r3, #15
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4422      	add	r2, r4
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e4:	51eb851f 	.word	0x51eb851f

080042e8 <__NVIC_SetPriority>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <SysTick_Handler+0x1c>)
 8004342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004344:	f001 fd28 	bl	8005d98 <xTaskGetSchedulerState>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800434e:	f002 fb13 	bl	8006978 <xPortSysTickHandler>
  }
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	e000e010 	.word	0xe000e010

0800435c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004360:	2100      	movs	r1, #0
 8004362:	f06f 0004 	mvn.w	r0, #4
 8004366:	f7ff ffbf 	bl	80042e8 <__NVIC_SetPriority>
#endif
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004376:	f3ef 8305 	mrs	r3, IPSR
 800437a:	603b      	str	r3, [r7, #0]
  return(result);
 800437c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004382:	f06f 0305 	mvn.w	r3, #5
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e00c      	b.n	80043a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <osKernelInitialize+0x44>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <osKernelInitialize+0x44>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004398:	2300      	movs	r3, #0
 800439a:	607b      	str	r3, [r7, #4]
 800439c:	e002      	b.n	80043a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043a4:	687b      	ldr	r3, [r7, #4]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000430 	.word	0x20000430

080043b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043be:	f3ef 8305 	mrs	r3, IPSR
 80043c2:	603b      	str	r3, [r7, #0]
  return(result);
 80043c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ca:	f06f 0305 	mvn.w	r3, #5
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e010      	b.n	80043f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <osKernelStart+0x48>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d109      	bne.n	80043ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043da:	f7ff ffbf 	bl	800435c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <osKernelStart+0x48>)
 80043e0:	2202      	movs	r2, #2
 80043e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043e4:	f001 f87c 	bl	80054e0 <vTaskStartScheduler>
      stat = osOK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	e002      	b.n	80043f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043f4:	687b      	ldr	r3, [r7, #4]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000430 	.word	0x20000430

08004404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b08e      	sub	sp, #56	; 0x38
 8004408:	af04      	add	r7, sp, #16
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004414:	f3ef 8305 	mrs	r3, IPSR
 8004418:	617b      	str	r3, [r7, #20]
  return(result);
 800441a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800441c:	2b00      	cmp	r3, #0
 800441e:	d17e      	bne.n	800451e <osThreadNew+0x11a>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07b      	beq.n	800451e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800442a:	2318      	movs	r3, #24
 800442c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d045      	beq.n	80044ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <osThreadNew+0x48>
        name = attr->name;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <osThreadNew+0x6e>
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b38      	cmp	r3, #56	; 0x38
 8004464:	d805      	bhi.n	8004472 <osThreadNew+0x6e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <osThreadNew+0x72>
        return (NULL);
 8004472:	2300      	movs	r3, #0
 8004474:	e054      	b.n	8004520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00e      	beq.n	80044ac <osThreadNew+0xa8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2ba7      	cmp	r3, #167	; 0xa7
 8004494:	d90a      	bls.n	80044ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <osThreadNew+0xa8>
        mem = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e010      	b.n	80044ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10c      	bne.n	80044ce <osThreadNew+0xca>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <osThreadNew+0xca>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <osThreadNew+0xca>
          mem = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e001      	b.n	80044ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d110      	bne.n	80044f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044dc:	9202      	str	r2, [sp, #8]
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	6a3a      	ldr	r2, [r7, #32]
 80044e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fe0c 	bl	8005108 <xTaskCreateStatic>
 80044f0:	4603      	mov	r3, r0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e013      	b.n	800451e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d110      	bne.n	800451e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fe57 	bl	80051c2 <xTaskCreate>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <osThreadNew+0x11a>
            hTask = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800451e:	693b      	ldr	r3, [r7, #16]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004530:	f3ef 8305 	mrs	r3, IPSR
 8004534:	60bb      	str	r3, [r7, #8]
  return(result);
 8004536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <osDelay+0x1c>
    stat = osErrorISR;
 800453c:	f06f 0305 	mvn.w	r3, #5
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e007      	b.n	8004554 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <osDelay+0x2c>
      vTaskDelay(ticks);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 ff92 	bl	8005478 <vTaskDelay>
    }
  }

  return (stat);
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a07      	ldr	r2, [pc, #28]	; (800458c <vApplicationGetIdleTaskMemory+0x2c>)
 8004570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a06      	ldr	r2, [pc, #24]	; (8004590 <vApplicationGetIdleTaskMemory+0x30>)
 8004576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000434 	.word	0x20000434
 8004590:	200004dc 	.word	0x200004dc

08004594 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80045a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a06      	ldr	r2, [pc, #24]	; (80045c4 <vApplicationGetTimerTaskMemory+0x30>)
 80045aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	200006dc 	.word	0x200006dc
 80045c4:	20000784 	.word	0x20000784

080045c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f103 0208 	add.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f103 0208 	add.w	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f103 0208 	add.w	r2, r3, #8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d103      	bne.n	800468a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e00c      	b.n	80046a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3308      	adds	r3, #8
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e002      	b.n	8004698 <vListInsert+0x2e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d2f6      	bcs.n	8004692 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d103      	bne.n	8004710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800475a:	f002 f87b 	bl	8006854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	441a      	add	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	3b01      	subs	r3, #1
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	441a      	add	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d114      	bne.n	80047da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01a      	beq.n	80047ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3310      	adds	r3, #16
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f929 	bl	8005a14 <xTaskRemoveFromEventList>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d012      	beq.n	80047ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <xQueueGenericReset+0xcc>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	e009      	b.n	80047ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3310      	adds	r3, #16
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fef2 	bl	80045c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3324      	adds	r3, #36	; 0x24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff feed 	bl	80045c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047ee:	f002 f861 	bl	80068b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047f2:	2301      	movs	r3, #1
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <xQueueGenericCreateStatic+0x52>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <xQueueGenericCreateStatic+0x56>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <xQueueGenericCreateStatic+0x58>
 8004856:	2300      	movs	r3, #0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	623b      	str	r3, [r7, #32]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <xQueueGenericCreateStatic+0x7e>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <xQueueGenericCreateStatic+0x82>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericCreateStatic+0x84>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61fb      	str	r3, [r7, #28]
}
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800489e:	2350      	movs	r3, #80	; 0x50
 80048a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b50      	cmp	r3, #80	; 0x50
 80048a6:	d00a      	beq.n	80048be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	61bb      	str	r3, [r7, #24]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f805 	bl	80048f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3730      	adds	r7, #48	; 0x30
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e002      	b.n	8004912 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800491e:	2101      	movs	r1, #1
 8004920:	69b8      	ldr	r0, [r7, #24]
 8004922:	f7ff ff05 	bl	8004730 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	; 0x38
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004946:	2300      	movs	r3, #0
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xQueueGenericSend+0x32>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <xQueueGenericSend+0x40>
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <xQueueGenericSend+0x44>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <xQueueGenericSend+0x46>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <xQueueGenericSend+0x60>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d103      	bne.n	80049a6 <xQueueGenericSend+0x6e>
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <xQueueGenericSend+0x72>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericSend+0x74>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c6:	f001 f9e7 	bl	8005d98 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xQueueGenericSend+0x9e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <xQueueGenericSend+0xa2>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <xQueueGenericSend+0xa4>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61fb      	str	r3, [r7, #28]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f6:	f001 ff2d 	bl	8006854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <xQueueGenericSend+0xd4>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d129      	bne.n	8004a60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a12:	f000 fa0b 	bl	8004e2c <prvCopyDataToQueue>
 8004a16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	3324      	adds	r3, #36	; 0x24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fff5 	bl	8005a14 <xTaskRemoveFromEventList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	e00a      	b.n	8004a58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a58:	f001 ff2c 	bl	80068b4 <vPortExitCritical>
				return pdPASS;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e063      	b.n	8004b28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a66:	f001 ff25 	bl	80068b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e05c      	b.n	8004b28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 f82f 	bl	8005adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a82:	f001 ff17 	bl	80068b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a86:	f000 fd9b 	bl	80055c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a8a:	f001 fee3 	bl	8006854 <vPortEnterCritical>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d103      	bne.n	8004aa4 <xQueueGenericSend+0x16c>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d103      	bne.n	8004aba <xQueueGenericSend+0x182>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aba:	f001 fefb 	bl	80068b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004abe:	1d3a      	adds	r2, r7, #4
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 f81e 	bl	8005b08 <xTaskCheckForTimeOut>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d124      	bne.n	8004b1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	f000 faa2 	bl	800501c <prvIsQueueFull>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 ff44 	bl	8005974 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aee:	f000 fa2d 	bl	8004f4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004af2:	f000 fd73 	bl	80055dc <xTaskResumeAll>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f af7c 	bne.w	80049f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	e772      	b.n	80049f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b12:	f000 fa1b 	bl	8004f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b16:	f000 fd61 	bl	80055dc <xTaskResumeAll>
 8004b1a:	e76c      	b.n	80049f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fa15 	bl	8004f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b22:	f000 fd5b 	bl	80055dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3738      	adds	r7, #56	; 0x38
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b090      	sub	sp, #64	; 0x40
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueGenericSendFromISR+0x3c>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGenericSendFromISR+0x40>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGenericSendFromISR+0x42>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSendFromISR+0x6a>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSendFromISR+0x6e>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSendFromISR+0x70>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	623b      	str	r3, [r7, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbe:	f001 ff2b 	bl	8006a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	61fa      	str	r2, [r7, #28]
 8004bd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <xQueueGenericSendFromISR+0xbc>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d12f      	bne.n	8004c50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c06:	f000 f911 	bl	8004e2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d112      	bne.n	8004c3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d016      	beq.n	8004c4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fef7 	bl	8005a14 <xTaskRemoveFromEventList>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e007      	b.n	8004c4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	b25a      	sxtb	r2, r3
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c4e:	e001      	b.n	8004c54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3740      	adds	r7, #64	; 0x40
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08c      	sub	sp, #48	; 0x30
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <xQueueReceive+0x30>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	623b      	str	r3, [r7, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <xQueueReceive+0x3e>
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <xQueueReceive+0x42>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <xQueueReceive+0x44>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <xQueueReceive+0x5e>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	61fb      	str	r3, [r7, #28]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cca:	f001 f865 	bl	8005d98 <xTaskGetSchedulerState>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <xQueueReceive+0x6e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <xQueueReceive+0x72>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <xQueueReceive+0x74>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueReceive+0x8e>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	61bb      	str	r3, [r7, #24]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cfa:	f001 fdab 	bl	8006854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01f      	beq.n	8004d4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0e:	f000 f8f7 	bl	8004f00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00f      	beq.n	8004d42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	3310      	adds	r3, #16
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fe74 	bl	8005a14 <xTaskRemoveFromEventList>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d32:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <xQueueReceive+0x1bc>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d42:	f001 fdb7 	bl	80068b4 <vPortExitCritical>
				return pdPASS;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e069      	b.n	8004e1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d50:	f001 fdb0 	bl	80068b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e062      	b.n	8004e1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d5e:	f107 0310 	add.w	r3, r7, #16
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 feba 	bl	8005adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d6c:	f001 fda2 	bl	80068b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d70:	f000 fc26 	bl	80055c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d74:	f001 fd6e 	bl	8006854 <vPortEnterCritical>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d7e:	b25b      	sxtb	r3, r3
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d103      	bne.n	8004d8e <xQueueReceive+0x122>
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d103      	bne.n	8004da4 <xQueueReceive+0x138>
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da4:	f001 fd86 	bl	80068b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004da8:	1d3a      	adds	r2, r7, #4
 8004daa:	f107 0310 	add.w	r3, r7, #16
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fea9 	bl	8005b08 <xTaskCheckForTimeOut>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d123      	bne.n	8004e04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dbe:	f000 f917 	bl	8004ff0 <prvIsQueueEmpty>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d017      	beq.n	8004df8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	3324      	adds	r3, #36	; 0x24
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fdcf 	bl	8005974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd8:	f000 f8b8 	bl	8004f4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ddc:	f000 fbfe 	bl	80055dc <xTaskResumeAll>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d189      	bne.n	8004cfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <xQueueReceive+0x1bc>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	e780      	b.n	8004cfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfa:	f000 f8a7 	bl	8004f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dfe:	f000 fbed 	bl	80055dc <xTaskResumeAll>
 8004e02:	e77a      	b.n	8004cfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e06:	f000 f8a1 	bl	8004f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e0a:	f000 fbe7 	bl	80055dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e10:	f000 f8ee 	bl	8004ff0 <prvIsQueueEmpty>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f43f af6f 	beq.w	8004cfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3730      	adds	r7, #48	; 0x30
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d14d      	bne.n	8004eee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 ffbc 	bl	8005dd4 <xTaskPriorityDisinherit>
 8004e5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	e043      	b.n	8004eee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d119      	bne.n	8004ea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6858      	ldr	r0, [r3, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	461a      	mov	r2, r3
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	f003 f884 	bl	8007f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d32b      	bcc.n	8004eee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	e026      	b.n	8004eee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68d8      	ldr	r0, [r3, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	f003 f86a 	bl	8007f84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	425b      	negs	r3, r3
 8004eba:	441a      	add	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d207      	bcs.n	8004edc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d105      	bne.n	8004eee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ef6:	697b      	ldr	r3, [r7, #20]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	441a      	add	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d303      	bcc.n	8004f34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68d9      	ldr	r1, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6838      	ldr	r0, [r7, #0]
 8004f40:	f003 f820 	bl	8007f84 <memcpy>
	}
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f54:	f001 fc7e 	bl	8006854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f60:	e011      	b.n	8004f86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d012      	beq.n	8004f90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3324      	adds	r3, #36	; 0x24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fd50 	bl	8005a14 <xTaskRemoveFromEventList>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f7a:	f000 fe27 	bl	8005bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	dce9      	bgt.n	8004f62 <prvUnlockQueue+0x16>
 8004f8e:	e000      	b.n	8004f92 <prvUnlockQueue+0x46>
					break;
 8004f90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f9a:	f001 fc8b 	bl	80068b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f9e:	f001 fc59 	bl	8006854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004faa:	e011      	b.n	8004fd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3310      	adds	r3, #16
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fd2b 	bl	8005a14 <xTaskRemoveFromEventList>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fc4:	f000 fe02 	bl	8005bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dce9      	bgt.n	8004fac <prvUnlockQueue+0x60>
 8004fd8:	e000      	b.n	8004fdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	22ff      	movs	r2, #255	; 0xff
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fe4:	f001 fc66 	bl	80068b4 <vPortExitCritical>
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ff8:	f001 fc2c 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e001      	b.n	800500e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800500e:	f001 fc51 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 8005012:	68fb      	ldr	r3, [r7, #12]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005024:	f001 fc16 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	429a      	cmp	r2, r3
 8005032:	d102      	bne.n	800503a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e001      	b.n	800503e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800503e:	f001 fc39 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e014      	b.n	8005086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800505c:	4a0f      	ldr	r2, [pc, #60]	; (800509c <vQueueAddToRegistry+0x50>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <vQueueAddToRegistry+0x50>)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <vQueueAddToRegistry+0x50>)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800507e:	e006      	b.n	800508e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b07      	cmp	r3, #7
 800508a:	d9e7      	bls.n	800505c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000b84 	.word	0x20000b84

080050a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050b0:	f001 fbd0 	bl	8006854 <vPortEnterCritical>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d103      	bne.n	80050ca <vQueueWaitForMessageRestricted+0x2a>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d0:	b25b      	sxtb	r3, r3
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d103      	bne.n	80050e0 <vQueueWaitForMessageRestricted+0x40>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e0:	f001 fbe8 	bl	80068b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3324      	adds	r3, #36	; 0x24
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fc61 	bl	80059bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7ff ff26 	bl	8004f4c <prvUnlockQueue>
	}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08e      	sub	sp, #56	; 0x38
 800510c:	af04      	add	r7, sp, #16
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	623b      	str	r3, [r7, #32]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <xTaskCreateStatic+0x46>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	61fb      	str	r3, [r7, #28]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800514e:	23a8      	movs	r3, #168	; 0xa8
 8005150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2ba8      	cmp	r3, #168	; 0xa8
 8005156:	d00a      	beq.n	800516e <xTaskCreateStatic+0x66>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	61bb      	str	r3, [r7, #24]
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800516e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01e      	beq.n	80051b4 <xTaskCreateStatic+0xac>
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2202      	movs	r2, #2
 800518a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800518e:	2300      	movs	r3, #0
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	9302      	str	r3, [sp, #8]
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f850 	bl	800524c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ae:	f000 f8f3 	bl	8005398 <prvAddNewTaskToReadyList>
 80051b2:	e001      	b.n	80051b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051b8:	697b      	ldr	r3, [r7, #20]
	}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3728      	adds	r7, #40	; 0x28
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b08c      	sub	sp, #48	; 0x30
 80051c6:	af04      	add	r7, sp, #16
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fc5e 	bl	8006a98 <pvPortMalloc>
 80051dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00e      	beq.n	8005202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051e4:	20a8      	movs	r0, #168	; 0xa8
 80051e6:	f001 fc57 	bl	8006a98 <pvPortMalloc>
 80051ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
 80051f8:	e005      	b.n	8005206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051fa:	6978      	ldr	r0, [r7, #20]
 80051fc:	f001 fd18 	bl	8006c30 <vPortFree>
 8005200:	e001      	b.n	8005206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d017      	beq.n	800523c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	2300      	movs	r3, #0
 8005218:	9303      	str	r3, [sp, #12]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	9302      	str	r3, [sp, #8]
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f80e 	bl	800524c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005230:	69f8      	ldr	r0, [r7, #28]
 8005232:	f000 f8b1 	bl	8005398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005236:	2301      	movs	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	e002      	b.n	8005242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005242:	69bb      	ldr	r3, [r7, #24]
	}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	461a      	mov	r2, r3
 8005264:	21a5      	movs	r1, #165	; 0xa5
 8005266:	f002 fdb8 	bl	8007dda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005274:	3b01      	subs	r3, #1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f023 0307 	bic.w	r3, r3, #7
 8005282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	617b      	str	r3, [r7, #20]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01f      	beq.n	80052ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e012      	b.n	80052d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	7819      	ldrb	r1, [r3, #0]
 80052b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	3334      	adds	r3, #52	; 0x34
 80052c0:	460a      	mov	r2, r1
 80052c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d9e9      	bls.n	80052b0 <prvInitialiseNewTask+0x64>
 80052dc:	e000      	b.n	80052e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80052de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e8:	e003      	b.n	80052f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	2b37      	cmp	r3, #55	; 0x37
 80052f6:	d901      	bls.n	80052fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052f8:	2337      	movs	r3, #55	; 0x37
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2200      	movs	r2, #0
 800530c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff f978 	bl	8004608 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	3318      	adds	r3, #24
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff f973 	bl	8004608 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	2200      	movs	r2, #0
 8005344:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	3354      	adds	r3, #84	; 0x54
 800534c:	224c      	movs	r2, #76	; 0x4c
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f002 fd42 	bl	8007dda <memset>
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	4a0c      	ldr	r2, [pc, #48]	; (800538c <prvInitialiseNewTask+0x140>)
 800535a:	659a      	str	r2, [r3, #88]	; 0x58
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <prvInitialiseNewTask+0x144>)
 8005360:	65da      	str	r2, [r3, #92]	; 0x5c
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	4a0b      	ldr	r2, [pc, #44]	; (8005394 <prvInitialiseNewTask+0x148>)
 8005366:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	69b8      	ldr	r0, [r7, #24]
 800536e:	f001 f941 	bl	80065f4 <pxPortInitialiseStack>
 8005372:	4602      	mov	r2, r0
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005384:	bf00      	nop
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20004e18 	.word	0x20004e18
 8005390:	20004e80 	.word	0x20004e80
 8005394:	20004ee8 	.word	0x20004ee8

08005398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053a0:	f001 fa58 	bl	8006854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053a4:	4b2d      	ldr	r3, [pc, #180]	; (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a2c      	ldr	r2, [pc, #176]	; (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ae:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053b6:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053bc:	4b27      	ldr	r3, [pc, #156]	; (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d110      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053c4:	f000 fc26 	bl	8005c14 <prvInitialiseTaskLists>
 80053c8:	e00d      	b.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ca:	4b26      	ldr	r3, [pc, #152]	; (8005464 <prvAddNewTaskToReadyList+0xcc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053d2:	4b23      	ldr	r3, [pc, #140]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d802      	bhi.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053e6:	4b20      	ldr	r3, [pc, #128]	; (8005468 <prvAddNewTaskToReadyList+0xd0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <prvAddNewTaskToReadyList+0xd0>)
 80053ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <prvAddNewTaskToReadyList+0xd0>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <prvAddNewTaskToReadyList+0xd4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <prvAddNewTaskToReadyList+0x74>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <prvAddNewTaskToReadyList+0xd4>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a15      	ldr	r2, [pc, #84]	; (8005470 <prvAddNewTaskToReadyList+0xd8>)
 800541a:	441a      	add	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7ff f8fd 	bl	8004622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005428:	f001 fa44 	bl	80068b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <prvAddNewTaskToReadyList+0xcc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	429a      	cmp	r2, r3
 8005440:	d207      	bcs.n	8005452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <prvAddNewTaskToReadyList+0xdc>)
 8005444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20001098 	.word	0x20001098
 8005460:	20000bc4 	.word	0x20000bc4
 8005464:	200010a4 	.word	0x200010a4
 8005468:	200010b4 	.word	0x200010b4
 800546c:	200010a0 	.word	0x200010a0
 8005470:	20000bc8 	.word	0x20000bc8
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d017      	beq.n	80054ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <vTaskDelay+0x60>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <vTaskDelay+0x30>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60bb      	str	r3, [r7, #8]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054a8:	f000 f88a 	bl	80055c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ac:	2100      	movs	r1, #0
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fcfe 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054b4:	f000 f892 	bl	80055dc <xTaskResumeAll>
 80054b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d107      	bne.n	80054d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <vTaskDelay+0x64>)
 80054c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	200010c0 	.word	0x200010c0
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054ee:	463a      	mov	r2, r7
 80054f0:	1d39      	adds	r1, r7, #4
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff f832 	bl	8004560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	9202      	str	r2, [sp, #8]
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	2300      	movs	r3, #0
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2300      	movs	r3, #0
 800550c:	460a      	mov	r2, r1
 800550e:	4924      	ldr	r1, [pc, #144]	; (80055a0 <vTaskStartScheduler+0xc0>)
 8005510:	4824      	ldr	r0, [pc, #144]	; (80055a4 <vTaskStartScheduler+0xc4>)
 8005512:	f7ff fdf9 	bl	8005108 <xTaskCreateStatic>
 8005516:	4603      	mov	r3, r0
 8005518:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <vTaskStartScheduler+0xc8>)
 800551a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800551c:	4b22      	ldr	r3, [pc, #136]	; (80055a8 <vTaskStartScheduler+0xc8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005524:	2301      	movs	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e001      	b.n	800552e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d102      	bne.n	800553a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005534:	f000 fd10 	bl	8005f58 <xTimerCreateTimerTask>
 8005538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d11b      	bne.n	8005578 <vTaskStartScheduler+0x98>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	613b      	str	r3, [r7, #16]
}
 8005552:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <vTaskStartScheduler+0xcc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3354      	adds	r3, #84	; 0x54
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <vTaskStartScheduler+0xd0>)
 800555c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800555e:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <vTaskStartScheduler+0xd4>)
 8005560:	f04f 32ff 	mov.w	r2, #4294967295
 8005564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <vTaskStartScheduler+0xd8>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <vTaskStartScheduler+0xdc>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005572:	f001 f8cd 	bl	8006710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005576:	e00e      	b.n	8005596 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d10a      	bne.n	8005596 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <vTaskStartScheduler+0xb4>
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	0800bf8c 	.word	0x0800bf8c
 80055a4:	08005be5 	.word	0x08005be5
 80055a8:	200010bc 	.word	0x200010bc
 80055ac:	20000bc4 	.word	0x20000bc4
 80055b0:	2000006c 	.word	0x2000006c
 80055b4:	200010b8 	.word	0x200010b8
 80055b8:	200010a4 	.word	0x200010a4
 80055bc:	2000109c 	.word	0x2000109c

080055c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <vTaskSuspendAll+0x18>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <vTaskSuspendAll+0x18>)
 80055cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055ce:	bf00      	nop
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	200010c0 	.word	0x200010c0

080055dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ea:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <xTaskResumeAll+0x118>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <xTaskResumeAll+0x2c>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	603b      	str	r3, [r7, #0]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005608:	f001 f924 	bl	8006854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800560c:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <xTaskResumeAll+0x118>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3b01      	subs	r3, #1
 8005612:	4a38      	ldr	r2, [pc, #224]	; (80056f4 <xTaskResumeAll+0x118>)
 8005614:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005616:	4b37      	ldr	r3, [pc, #220]	; (80056f4 <xTaskResumeAll+0x118>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d162      	bne.n	80056e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800561e:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <xTaskResumeAll+0x11c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d05e      	beq.n	80056e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005626:	e02f      	b.n	8005688 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005628:	4b34      	ldr	r3, [pc, #208]	; (80056fc <xTaskResumeAll+0x120>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3318      	adds	r3, #24
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff f851 	bl	80046dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3304      	adds	r3, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f84c 	bl	80046dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <xTaskResumeAll+0x124>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d903      	bls.n	8005658 <xTaskResumeAll+0x7c>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	4a2a      	ldr	r2, [pc, #168]	; (8005700 <xTaskResumeAll+0x124>)
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4a27      	ldr	r2, [pc, #156]	; (8005704 <xTaskResumeAll+0x128>)
 8005666:	441a      	add	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3304      	adds	r3, #4
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f7fe ffd7 	bl	8004622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <xTaskResumeAll+0x12c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005682:	4b22      	ldr	r3, [pc, #136]	; (800570c <xTaskResumeAll+0x130>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005688:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <xTaskResumeAll+0x120>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1cb      	bne.n	8005628 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005696:	f000 fb5f 	bl	8005d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800569a:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <xTaskResumeAll+0x134>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d010      	beq.n	80056c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056a6:	f000 f847 	bl	8005738 <xTaskIncrementTick>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056b0:	4b16      	ldr	r3, [pc, #88]	; (800570c <xTaskResumeAll+0x130>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056c2:	4b13      	ldr	r3, [pc, #76]	; (8005710 <xTaskResumeAll+0x134>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056c8:	4b10      	ldr	r3, [pc, #64]	; (800570c <xTaskResumeAll+0x130>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056d4:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <xTaskResumeAll+0x138>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e4:	f001 f8e6 	bl	80068b4 <vPortExitCritical>

	return xAlreadyYielded;
 80056e8:	68bb      	ldr	r3, [r7, #8]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200010c0 	.word	0x200010c0
 80056f8:	20001098 	.word	0x20001098
 80056fc:	20001058 	.word	0x20001058
 8005700:	200010a0 	.word	0x200010a0
 8005704:	20000bc8 	.word	0x20000bc8
 8005708:	20000bc4 	.word	0x20000bc4
 800570c:	200010ac 	.word	0x200010ac
 8005710:	200010a8 	.word	0x200010a8
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <xTaskGetTickCount+0x1c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005724:	687b      	ldr	r3, [r7, #4]
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	2000109c 	.word	0x2000109c

08005738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005742:	4b4f      	ldr	r3, [pc, #316]	; (8005880 <xTaskIncrementTick+0x148>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 808f 	bne.w	800586a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800574c:	4b4d      	ldr	r3, [pc, #308]	; (8005884 <xTaskIncrementTick+0x14c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005754:	4a4b      	ldr	r2, [pc, #300]	; (8005884 <xTaskIncrementTick+0x14c>)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d120      	bne.n	80057a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005760:	4b49      	ldr	r3, [pc, #292]	; (8005888 <xTaskIncrementTick+0x150>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <xTaskIncrementTick+0x48>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	603b      	str	r3, [r7, #0]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <xTaskIncrementTick+0x46>
 8005780:	4b41      	ldr	r3, [pc, #260]	; (8005888 <xTaskIncrementTick+0x150>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4b41      	ldr	r3, [pc, #260]	; (800588c <xTaskIncrementTick+0x154>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3f      	ldr	r2, [pc, #252]	; (8005888 <xTaskIncrementTick+0x150>)
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	4a3f      	ldr	r2, [pc, #252]	; (800588c <xTaskIncrementTick+0x154>)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <xTaskIncrementTick+0x158>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	4a3d      	ldr	r2, [pc, #244]	; (8005890 <xTaskIncrementTick+0x158>)
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	f000 fadb 	bl	8005d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057a2:	4b3c      	ldr	r3, [pc, #240]	; (8005894 <xTaskIncrementTick+0x15c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d349      	bcc.n	8005840 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ac:	4b36      	ldr	r3, [pc, #216]	; (8005888 <xTaskIncrementTick+0x150>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b6:	4b37      	ldr	r3, [pc, #220]	; (8005894 <xTaskIncrementTick+0x15c>)
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295
 80057bc:	601a      	str	r2, [r3, #0]
					break;
 80057be:	e03f      	b.n	8005840 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	4b31      	ldr	r3, [pc, #196]	; (8005888 <xTaskIncrementTick+0x150>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d203      	bcs.n	80057e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d8:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <xTaskIncrementTick+0x15c>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057de:	e02f      	b.n	8005840 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe ff79 	bl	80046dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	3318      	adds	r3, #24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe ff70 	bl	80046dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <xTaskIncrementTick+0x160>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <xTaskIncrementTick+0xd8>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <xTaskIncrementTick+0x160>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <xTaskIncrementTick+0x164>)
 800581e:	441a      	add	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fe fefb 	bl	8004622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <xTaskIncrementTick+0x168>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	429a      	cmp	r2, r3
 8005838:	d3b8      	bcc.n	80057ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583e:	e7b5      	b.n	80057ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <xTaskIncrementTick+0x168>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	4915      	ldr	r1, [pc, #84]	; (800589c <xTaskIncrementTick+0x164>)
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d901      	bls.n	800585c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <xTaskIncrementTick+0x16c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e004      	b.n	8005874 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <xTaskIncrementTick+0x170>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	4a0d      	ldr	r2, [pc, #52]	; (80058a8 <xTaskIncrementTick+0x170>)
 8005872:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005874:	697b      	ldr	r3, [r7, #20]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200010c0 	.word	0x200010c0
 8005884:	2000109c 	.word	0x2000109c
 8005888:	20001050 	.word	0x20001050
 800588c:	20001054 	.word	0x20001054
 8005890:	200010b0 	.word	0x200010b0
 8005894:	200010b8 	.word	0x200010b8
 8005898:	200010a0 	.word	0x200010a0
 800589c:	20000bc8 	.word	0x20000bc8
 80058a0:	20000bc4 	.word	0x20000bc4
 80058a4:	200010ac 	.word	0x200010ac
 80058a8:	200010a8 	.word	0x200010a8

080058ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058b2:	4b2a      	ldr	r3, [pc, #168]	; (800595c <vTaskSwitchContext+0xb0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ba:	4b29      	ldr	r3, [pc, #164]	; (8005960 <vTaskSwitchContext+0xb4>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058c0:	e046      	b.n	8005950 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058c2:	4b27      	ldr	r3, [pc, #156]	; (8005960 <vTaskSwitchContext+0xb4>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <vTaskSwitchContext+0xb8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	e010      	b.n	80058f2 <vTaskSwitchContext+0x46>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <vTaskSwitchContext+0x40>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	607b      	str	r3, [r7, #4]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <vTaskSwitchContext+0x3e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	491d      	ldr	r1, [pc, #116]	; (8005968 <vTaskSwitchContext+0xbc>)
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0e4      	beq.n	80058d0 <vTaskSwitchContext+0x24>
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4a15      	ldr	r2, [pc, #84]	; (8005968 <vTaskSwitchContext+0xbc>)
 8005912:	4413      	add	r3, r2
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	3308      	adds	r3, #8
 8005928:	429a      	cmp	r2, r3
 800592a:	d104      	bne.n	8005936 <vTaskSwitchContext+0x8a>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a0b      	ldr	r2, [pc, #44]	; (800596c <vTaskSwitchContext+0xc0>)
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4a08      	ldr	r2, [pc, #32]	; (8005964 <vTaskSwitchContext+0xb8>)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <vTaskSwitchContext+0xc0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3354      	adds	r3, #84	; 0x54
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <vTaskSwitchContext+0xc4>)
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	200010c0 	.word	0x200010c0
 8005960:	200010ac 	.word	0x200010ac
 8005964:	200010a0 	.word	0x200010a0
 8005968:	20000bc8 	.word	0x20000bc8
 800596c:	20000bc4 	.word	0x20000bc4
 8005970:	2000006c 	.word	0x2000006c

08005974 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	60fb      	str	r3, [r7, #12]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <vTaskPlaceOnEventList+0x44>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3318      	adds	r3, #24
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fe fe61 	bl	800466a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059a8:	2101      	movs	r1, #1
 80059aa:	6838      	ldr	r0, [r7, #0]
 80059ac:	f000 fa80 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000bc4 	.word	0x20000bc4

080059bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	617b      	str	r3, [r7, #20]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <vTaskPlaceOnEventListRestricted+0x54>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3318      	adds	r3, #24
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7fe fe18 	bl	8004622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059f8:	f04f 33ff 	mov.w	r3, #4294967295
 80059fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	68b8      	ldr	r0, [r7, #8]
 8005a02:	f000 fa55 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
	}
 8005a06:	bf00      	nop
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000bc4 	.word	0x20000bc4

08005a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	60fb      	str	r3, [r7, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3318      	adds	r3, #24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fe49 	bl	80046dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <xTaskRemoveFromEventList+0xb0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d11d      	bne.n	8005a8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fe40 	bl	80046dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <xTaskRemoveFromEventList+0xb4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d903      	bls.n	8005a70 <xTaskRemoveFromEventList+0x5c>
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <xTaskRemoveFromEventList+0xb4>)
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <xTaskRemoveFromEventList+0xb8>)
 8005a7e:	441a      	add	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f7fe fdcb 	bl	8004622 <vListInsertEnd>
 8005a8c:	e005      	b.n	8005a9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	3318      	adds	r3, #24
 8005a92:	4619      	mov	r1, r3
 8005a94:	480e      	ldr	r0, [pc, #56]	; (8005ad0 <xTaskRemoveFromEventList+0xbc>)
 8005a96:	f7fe fdc4 	bl	8004622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <xTaskRemoveFromEventList+0xc0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d905      	bls.n	8005ab4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <xTaskRemoveFromEventList+0xc4>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e001      	b.n	8005ab8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ab8:	697b      	ldr	r3, [r7, #20]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200010c0 	.word	0x200010c0
 8005ac8:	200010a0 	.word	0x200010a0
 8005acc:	20000bc8 	.word	0x20000bc8
 8005ad0:	20001058 	.word	0x20001058
 8005ad4:	20000bc4 	.word	0x20000bc4
 8005ad8:	200010ac 	.word	0x200010ac

08005adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <vTaskInternalSetTimeOutState+0x24>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <vTaskInternalSetTimeOutState+0x28>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	605a      	str	r2, [r3, #4]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	200010b0 	.word	0x200010b0
 8005b04:	2000109c 	.word	0x2000109c

08005b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	613b      	str	r3, [r7, #16]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b4a:	f000 fe83 	bl	8006854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <xTaskCheckForTimeOut+0xbc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d102      	bne.n	8005b6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e023      	b.n	8005bb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <xTaskCheckForTimeOut+0xc0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d007      	beq.n	8005b8a <xTaskCheckForTimeOut+0x82>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	e015      	b.n	8005bb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d20b      	bcs.n	8005bac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ff9b 	bl	8005adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e004      	b.n	8005bb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bb6:	f000 fe7d 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 8005bba:	69fb      	ldr	r3, [r7, #28]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	2000109c 	.word	0x2000109c
 8005bc8:	200010b0 	.word	0x200010b0

08005bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <vTaskMissedYield+0x14>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	200010ac 	.word	0x200010ac

08005be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bec:	f000 f852 	bl	8005c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <prvIdleTask+0x28>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d9f9      	bls.n	8005bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <prvIdleTask+0x2c>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c08:	e7f0      	b.n	8005bec <prvIdleTask+0x8>
 8005c0a:	bf00      	nop
 8005c0c:	20000bc8 	.word	0x20000bc8
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	e00c      	b.n	8005c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <prvInitialiseTaskLists+0x60>)
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fcca 	bl	80045c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3301      	adds	r3, #1
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b37      	cmp	r3, #55	; 0x37
 8005c3e:	d9ef      	bls.n	8005c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c40:	480d      	ldr	r0, [pc, #52]	; (8005c78 <prvInitialiseTaskLists+0x64>)
 8005c42:	f7fe fcc1 	bl	80045c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c46:	480d      	ldr	r0, [pc, #52]	; (8005c7c <prvInitialiseTaskLists+0x68>)
 8005c48:	f7fe fcbe 	bl	80045c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c4c:	480c      	ldr	r0, [pc, #48]	; (8005c80 <prvInitialiseTaskLists+0x6c>)
 8005c4e:	f7fe fcbb 	bl	80045c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c52:	480c      	ldr	r0, [pc, #48]	; (8005c84 <prvInitialiseTaskLists+0x70>)
 8005c54:	f7fe fcb8 	bl	80045c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c58:	480b      	ldr	r0, [pc, #44]	; (8005c88 <prvInitialiseTaskLists+0x74>)
 8005c5a:	f7fe fcb5 	bl	80045c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <prvInitialiseTaskLists+0x78>)
 8005c60:	4a05      	ldr	r2, [pc, #20]	; (8005c78 <prvInitialiseTaskLists+0x64>)
 8005c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <prvInitialiseTaskLists+0x7c>)
 8005c66:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <prvInitialiseTaskLists+0x68>)
 8005c68:	601a      	str	r2, [r3, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000bc8 	.word	0x20000bc8
 8005c78:	20001028 	.word	0x20001028
 8005c7c:	2000103c 	.word	0x2000103c
 8005c80:	20001058 	.word	0x20001058
 8005c84:	2000106c 	.word	0x2000106c
 8005c88:	20001084 	.word	0x20001084
 8005c8c:	20001050 	.word	0x20001050
 8005c90:	20001054 	.word	0x20001054

08005c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c9a:	e019      	b.n	8005cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c9c:	f000 fdda 	bl	8006854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <prvCheckTasksWaitingTermination+0x50>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe fd15 	bl	80046dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <prvCheckTasksWaitingTermination+0x54>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	4a0b      	ldr	r2, [pc, #44]	; (8005ce8 <prvCheckTasksWaitingTermination+0x54>)
 8005cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <prvCheckTasksWaitingTermination+0x58>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <prvCheckTasksWaitingTermination+0x58>)
 8005cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cc6:	f000 fdf5 	bl	80068b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f810 	bl	8005cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <prvCheckTasksWaitingTermination+0x58>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e1      	bne.n	8005c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	2000106c 	.word	0x2000106c
 8005ce8:	20001098 	.word	0x20001098
 8005cec:	20001080 	.word	0x20001080

08005cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3354      	adds	r3, #84	; 0x54
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f002 f889 	bl	8007e14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ff8d 	bl	8006c30 <vPortFree>
				vPortFree( pxTCB );
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 ff8a 	bl	8006c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d1c:	e018      	b.n	8005d50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d103      	bne.n	8005d30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 ff81 	bl	8006c30 <vPortFree>
	}
 8005d2e:	e00f      	b.n	8005d50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d00a      	beq.n	8005d50 <prvDeleteTCB+0x60>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60fb      	str	r3, [r7, #12]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <prvDeleteTCB+0x5e>
	}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <prvResetNextTaskUnblockTime+0x38>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <prvResetNextTaskUnblockTime+0x3c>)
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d70:	e008      	b.n	8005d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <prvResetNextTaskUnblockTime+0x38>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <prvResetNextTaskUnblockTime+0x3c>)
 8005d82:	6013      	str	r3, [r2, #0]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20001050 	.word	0x20001050
 8005d94:	200010b8 	.word	0x200010b8

08005d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <xTaskGetSchedulerState+0x34>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005da6:	2301      	movs	r3, #1
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	e008      	b.n	8005dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <xTaskGetSchedulerState+0x38>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005db4:	2302      	movs	r3, #2
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	e001      	b.n	8005dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dbe:	687b      	ldr	r3, [r7, #4]
	}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	200010a4 	.word	0x200010a4
 8005dd0:	200010c0 	.word	0x200010c0

08005dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d056      	beq.n	8005e98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <xTaskPriorityDisinherit+0xd0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d00a      	beq.n	8005e0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60fb      	str	r3, [r7, #12]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60bb      	str	r3, [r7, #8]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d02c      	beq.n	8005e98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d128      	bne.n	8005e98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fc46 	bl	80046dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <xTaskPriorityDisinherit+0xd4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <xTaskPriorityDisinherit+0xa4>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a0c      	ldr	r2, [pc, #48]	; (8005ea8 <xTaskPriorityDisinherit+0xd4>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a09      	ldr	r2, [pc, #36]	; (8005eac <xTaskPriorityDisinherit+0xd8>)
 8005e86:	441a      	add	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe fbc7 	bl	8004622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e98:	697b      	ldr	r3, [r7, #20]
	}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000bc4 	.word	0x20000bc4
 8005ea8:	200010a0 	.word	0x200010a0
 8005eac:	20000bc8 	.word	0x20000bc8

08005eb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eba:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec0:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fc08 	bl	80046dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d10a      	bne.n	8005eea <prvAddCurrentTaskToDelayedList+0x3a>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4819      	ldr	r0, [pc, #100]	; (8005f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ee4:	f7fe fb9d 	bl	8004622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ee8:	e026      	b.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d209      	bcs.n	8005f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7fe fbab 	bl	800466a <vListInsert>
}
 8005f14:	e010      	b.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fe fba1 	bl	800466a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d202      	bcs.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f32:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6013      	str	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	2000109c 	.word	0x2000109c
 8005f44:	20000bc4 	.word	0x20000bc4
 8005f48:	20001084 	.word	0x20001084
 8005f4c:	20001054 	.word	0x20001054
 8005f50:	20001050 	.word	0x20001050
 8005f54:	200010b8 	.word	0x200010b8

08005f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f62:	f000 fb07 	bl	8006574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f66:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <xTimerCreateTimerTask+0x80>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d021      	beq.n	8005fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f76:	1d3a      	adds	r2, r7, #4
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fb07 	bl	8004594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	9202      	str	r2, [sp, #8]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	2302      	movs	r3, #2
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	460a      	mov	r2, r1
 8005f98:	4910      	ldr	r1, [pc, #64]	; (8005fdc <xTimerCreateTimerTask+0x84>)
 8005f9a:	4811      	ldr	r0, [pc, #68]	; (8005fe0 <xTimerCreateTimerTask+0x88>)
 8005f9c:	f7ff f8b4 	bl	8005108 <xTaskCreateStatic>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <xTimerCreateTimerTask+0x8c>)
 8005fa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <xTimerCreateTimerTask+0x8c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	613b      	str	r3, [r7, #16]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200010f4 	.word	0x200010f4
 8005fdc:	0800bf94 	.word	0x0800bf94
 8005fe0:	0800611d 	.word	0x0800611d
 8005fe4:	200010f8 	.word	0x200010f8

08005fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	623b      	str	r3, [r7, #32]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <xTimerGenericCommand+0x98>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d02a      	beq.n	8006074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b05      	cmp	r3, #5
 800602e:	dc18      	bgt.n	8006062 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006030:	f7ff feb2 	bl	8005d98 <xTaskGetSchedulerState>
 8006034:	4603      	mov	r3, r0
 8006036:	2b02      	cmp	r3, #2
 8006038:	d109      	bne.n	800604e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <xTimerGenericCommand+0x98>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f107 0110 	add.w	r1, r7, #16
 8006042:	2300      	movs	r3, #0
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	f7fe fc77 	bl	8004938 <xQueueGenericSend>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24
 800604c:	e012      	b.n	8006074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <xTimerGenericCommand+0x98>)
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f107 0110 	add.w	r1, r7, #16
 8006056:	2300      	movs	r3, #0
 8006058:	2200      	movs	r2, #0
 800605a:	f7fe fc6d 	bl	8004938 <xQueueGenericSend>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24
 8006060:	e008      	b.n	8006074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <xTimerGenericCommand+0x98>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	2300      	movs	r3, #0
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	f7fe fd61 	bl	8004b34 <xQueueGenericSendFromISR>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	200010f4 	.word	0x200010f4

08006084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608e:	4b22      	ldr	r3, [pc, #136]	; (8006118 <prvProcessExpiredTimer+0x94>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3304      	adds	r3, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fb1d 	bl	80046dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d022      	beq.n	80060f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	18d1      	adds	r1, r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	6978      	ldr	r0, [r7, #20]
 80060be:	f000 f8d1 	bl	8006264 <prvInsertTimerInActiveList>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01f      	beq.n	8006108 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060c8:	2300      	movs	r3, #0
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	2300      	movs	r3, #0
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	2100      	movs	r1, #0
 80060d2:	6978      	ldr	r0, [r7, #20]
 80060d4:	f7ff ff88 	bl	8005fe8 <xTimerGenericCommand>
 80060d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d113      	bne.n	8006108 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	6978      	ldr	r0, [r7, #20]
 800610e:	4798      	blx	r3
}
 8006110:	bf00      	nop
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	200010ec 	.word	0x200010ec

0800611c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f857 	bl	80061dc <prvGetNextExpireTime>
 800612e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4619      	mov	r1, r3
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f803 	bl	8006140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800613a:	f000 f8d5 	bl	80062e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800613e:	e7f1      	b.n	8006124 <prvTimerTask+0x8>

08006140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800614a:	f7ff fa39 	bl	80055c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f866 	bl	8006224 <prvSampleTimeNow>
 8006158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d130      	bne.n	80061c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <prvProcessTimerOrBlockTask+0x3c>
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	429a      	cmp	r2, r3
 800616c:	d806      	bhi.n	800617c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800616e:	f7ff fa35 	bl	80055dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff85 	bl	8006084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800617a:	e024      	b.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006182:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <prvProcessTimerOrBlockTask+0x90>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <prvProcessTimerOrBlockTask+0x50>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <prvProcessTimerOrBlockTask+0x52>
 8006190:	2300      	movs	r3, #0
 8006192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <prvProcessTimerOrBlockTask+0x94>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fe ff7d 	bl	80050a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061a6:	f7ff fa19 	bl	80055dc <xTaskResumeAll>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <prvProcessTimerOrBlockTask+0x98>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
}
 80061c0:	e001      	b.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061c2:	f7ff fa0b 	bl	80055dc <xTaskResumeAll>
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200010f0 	.word	0x200010f0
 80061d4:	200010f4 	.word	0x200010f4
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <prvGetNextExpireTime+0x44>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <prvGetNextExpireTime+0x16>
 80061ee:	2201      	movs	r2, #1
 80061f0:	e000      	b.n	80061f4 <prvGetNextExpireTime+0x18>
 80061f2:	2200      	movs	r2, #0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <prvGetNextExpireTime+0x44>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	e001      	b.n	8006210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	200010ec 	.word	0x200010ec

08006224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800622c:	f7ff fa74 	bl	8005718 <xTaskGetTickCount>
 8006230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <prvSampleTimeNow+0x3c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	429a      	cmp	r2, r3
 800623a:	d205      	bcs.n	8006248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800623c:	f000 f936 	bl	80064ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800624e:	4a04      	ldr	r2, [pc, #16]	; (8006260 <prvSampleTimeNow+0x3c>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200010fc 	.word	0x200010fc

08006264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d812      	bhi.n	80062b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e01b      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <prvInsertTimerInActiveList+0x7c>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fe f9de 	bl	800466a <vListInsert>
 80062ae:	e012      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d206      	bcs.n	80062c6 <prvInsertTimerInActiveList+0x62>
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e007      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <prvInsertTimerInActiveList+0x80>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fe f9ca 	bl	800466a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062d6:	697b      	ldr	r3, [r7, #20]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	200010f0 	.word	0x200010f0
 80062e4:	200010ec 	.word	0x200010ec

080062e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	; 0x38
 80062ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ee:	e0ca      	b.n	8006486 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da18      	bge.n	8006328 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	3304      	adds	r3, #4
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61fb      	str	r3, [r7, #28]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631e:	6850      	ldr	r0, [r2, #4]
 8006320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006322:	6892      	ldr	r2, [r2, #8]
 8006324:	4611      	mov	r1, r2
 8006326:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f2c0 80ab 	blt.w	8006486 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	3304      	adds	r3, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe f9cb 	bl	80046dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006346:	463b      	mov	r3, r7
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff6b 	bl	8006224 <prvSampleTimeNow>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b09      	cmp	r3, #9
 8006354:	f200 8096 	bhi.w	8006484 <prvProcessReceivedCommands+0x19c>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <prvProcessReceivedCommands+0x78>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006389 	.word	0x08006389
 8006364:	08006389 	.word	0x08006389
 8006368:	08006389 	.word	0x08006389
 800636c:	080063fd 	.word	0x080063fd
 8006370:	08006411 	.word	0x08006411
 8006374:	0800645b 	.word	0x0800645b
 8006378:	08006389 	.word	0x08006389
 800637c:	08006389 	.word	0x08006389
 8006380:	080063fd 	.word	0x080063fd
 8006384:	08006411 	.word	0x08006411
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	18d1      	adds	r1, r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a8:	f7ff ff5c 	bl	8006264 <prvInsertTimerInActiveList>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d069      	beq.n	8006486 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05e      	beq.n	8006486 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	441a      	add	r2, r3
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063da:	f7ff fe05 	bl	8005fe8 <xTimerGenericCommand>
 80063de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d14f      	bne.n	8006486 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	61bb      	str	r3, [r7, #24]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800640e:	e03a      	b.n	8006486 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	617b      	str	r3, [r7, #20]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	18d1      	adds	r1, r2, r3
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006454:	f7ff ff06 	bl	8006264 <prvInsertTimerInActiveList>
					break;
 8006458:	e015      	b.n	8006486 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646a:	f000 fbe1 	bl	8006c30 <vPortFree>
 800646e:	e00a      	b.n	8006486 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006482:	e000      	b.n	8006486 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006486:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <prvProcessReceivedCommands+0x1c0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1d39      	adds	r1, r7, #4
 800648c:	2200      	movs	r2, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe fbec 	bl	8004c6c <xQueueReceive>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	f47f af2a 	bne.w	80062f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3730      	adds	r7, #48	; 0x30
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200010f4 	.word	0x200010f4

080064ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064b2:	e048      	b.n	8006546 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b4:	4b2d      	ldr	r3, [pc, #180]	; (800656c <prvSwitchTimerLists+0xc0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064be:	4b2b      	ldr	r3, [pc, #172]	; (800656c <prvSwitchTimerLists+0xc0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f905 	bl	80046dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02e      	beq.n	8006546 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90e      	bls.n	8006518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006506:	4b19      	ldr	r3, [pc, #100]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe f8aa 	bl	800466a <vListInsert>
 8006516:	e016      	b.n	8006546 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2100      	movs	r1, #0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fd60 	bl	8005fe8 <xTimerGenericCommand>
 8006528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	603b      	str	r3, [r7, #0]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1b1      	bne.n	80064b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvSwitchTimerLists+0xc4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <prvSwitchTimerLists+0xc0>)
 800655c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800655e:	4a04      	ldr	r2, [pc, #16]	; (8006570 <prvSwitchTimerLists+0xc4>)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6013      	str	r3, [r2, #0]
}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	200010ec 	.word	0x200010ec
 8006570:	200010f0 	.word	0x200010f0

08006574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800657a:	f000 f96b 	bl	8006854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d120      	bne.n	80065c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006586:	4814      	ldr	r0, [pc, #80]	; (80065d8 <prvCheckForValidListAndQueue+0x64>)
 8006588:	f7fe f81e 	bl	80045c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800658c:	4813      	ldr	r0, [pc, #76]	; (80065dc <prvCheckForValidListAndQueue+0x68>)
 800658e:	f7fe f81b 	bl	80045c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <prvCheckForValidListAndQueue+0x6c>)
 8006594:	4a10      	ldr	r2, [pc, #64]	; (80065d8 <prvCheckForValidListAndQueue+0x64>)
 8006596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <prvCheckForValidListAndQueue+0x70>)
 800659a:	4a10      	ldr	r2, [pc, #64]	; (80065dc <prvCheckForValidListAndQueue+0x68>)
 800659c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800659e:	2300      	movs	r3, #0
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <prvCheckForValidListAndQueue+0x74>)
 80065a4:	4a11      	ldr	r2, [pc, #68]	; (80065ec <prvCheckForValidListAndQueue+0x78>)
 80065a6:	2110      	movs	r1, #16
 80065a8:	200a      	movs	r0, #10
 80065aa:	f7fe f929 	bl	8004800 <xQueueGenericCreateStatic>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <prvCheckForValidListAndQueue+0x7c>)
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fd42 	bl	800504c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065c8:	f000 f974 	bl	80068b4 <vPortExitCritical>
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200010f4 	.word	0x200010f4
 80065d8:	200010c4 	.word	0x200010c4
 80065dc:	200010d8 	.word	0x200010d8
 80065e0:	200010ec 	.word	0x200010ec
 80065e4:	200010f0 	.word	0x200010f0
 80065e8:	200011a0 	.word	0x200011a0
 80065ec:	20001100 	.word	0x20001100
 80065f0:	0800bf9c 	.word	0x0800bf9c

080065f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b04      	subs	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b04      	subs	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <pxPortInitialiseStack+0x64>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b14      	subs	r3, #20
 800662e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f06f 0202 	mvn.w	r2, #2
 8006642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b20      	subs	r3, #32
 8006648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	0800665d 	.word	0x0800665d

0800665c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006666:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <prvTaskExitError+0x54>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d00a      	beq.n	8006686 <prvTaskExitError+0x2a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvTaskExitError+0x28>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800669a:	bf00      	nop
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0fc      	beq.n	800669c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000010 	.word	0x20000010
	...

080066c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <pxCurrentTCBConst2>)
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6808      	ldr	r0, [r1, #0]
 80066c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	f380 8809 	msr	PSP, r0
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	4770      	bx	lr
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst2>:
 80066e0:	20000bc4 	.word	0x20000bc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066e8:	4808      	ldr	r0, [pc, #32]	; (800670c <prvPortStartFirstTask+0x24>)
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f380 8808 	msr	MSP, r0
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8814 	msr	CONTROL, r0
 80066fa:	b662      	cpsie	i
 80066fc:	b661      	cpsie	f
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	df00      	svc	0
 8006708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800670a:	bf00      	nop
 800670c:	e000ed08 	.word	0xe000ed08

08006710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006716:	4b46      	ldr	r3, [pc, #280]	; (8006830 <xPortStartScheduler+0x120>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a46      	ldr	r2, [pc, #280]	; (8006834 <xPortStartScheduler+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10a      	bne.n	8006736 <xPortStartScheduler+0x26>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006736:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <xPortStartScheduler+0x120>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <xPortStartScheduler+0x128>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10a      	bne.n	8006756 <xPortStartScheduler+0x46>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <xPortStartScheduler+0x12c>)
 8006758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4b31      	ldr	r3, [pc, #196]	; (8006840 <xPortStartScheduler+0x130>)
 800677c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800677e:	4b31      	ldr	r3, [pc, #196]	; (8006844 <xPortStartScheduler+0x134>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006784:	e009      	b.n	800679a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006786:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <xPortStartScheduler+0x134>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <xPortStartScheduler+0x134>)
 800678e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d0ef      	beq.n	8006786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <xPortStartScheduler+0x134>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1c3 0307 	rsb	r3, r3, #7
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00a      	beq.n	80067c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <xPortStartScheduler+0x134>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <xPortStartScheduler+0x134>)
 80067d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <xPortStartScheduler+0x134>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067da:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <xPortStartScheduler+0x134>)
 80067dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <xPortStartScheduler+0x138>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <xPortStartScheduler+0x138>)
 80067ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <xPortStartScheduler+0x138>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a14      	ldr	r2, [pc, #80]	; (8006848 <xPortStartScheduler+0x138>)
 80067f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067fe:	f000 f8dd 	bl	80069bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <xPortStartScheduler+0x13c>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006808:	f000 f8fc 	bl	8006a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <xPortStartScheduler+0x140>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <xPortStartScheduler+0x140>)
 8006812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006818:	f7ff ff66 	bl	80066e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800681c:	f7ff f846 	bl	80058ac <vTaskSwitchContext>
	prvTaskExitError();
 8006820:	f7ff ff1c 	bl	800665c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000ed00 	.word	0xe000ed00
 8006834:	410fc271 	.word	0x410fc271
 8006838:	410fc270 	.word	0x410fc270
 800683c:	e000e400 	.word	0xe000e400
 8006840:	200011f0 	.word	0x200011f0
 8006844:	200011f4 	.word	0x200011f4
 8006848:	e000ed20 	.word	0xe000ed20
 800684c:	20000010 	.word	0x20000010
 8006850:	e000ef34 	.word	0xe000ef34

08006854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	607b      	str	r3, [r7, #4]
}
 800686c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <vPortEnterCritical+0x58>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <vPortEnterCritical+0x58>)
 8006876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <vPortEnterCritical+0x58>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10f      	bne.n	80068a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <vPortEnterCritical+0x5c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	603b      	str	r3, [r7, #0]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <vPortEnterCritical+0x4a>
	}
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000010 	.word	0x20000010
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <vPortExitCritical+0x50>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <vPortExitCritical+0x24>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	607b      	str	r3, [r7, #4]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <vPortExitCritical+0x50>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3b01      	subs	r3, #1
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <vPortExitCritical+0x50>)
 80068e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <vPortExitCritical+0x50>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <vPortExitCritical+0x42>
 80068ea:	2300      	movs	r3, #0
 80068ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f383 8811 	msr	BASEPRI, r3
}
 80068f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000010 	.word	0x20000010
	...

08006910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006910:	f3ef 8009 	mrs	r0, PSP
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4b15      	ldr	r3, [pc, #84]	; (8006970 <pxCurrentTCBConst>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f01e 0f10 	tst.w	lr, #16
 8006920:	bf08      	it	eq
 8006922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	6010      	str	r0, [r2, #0]
 800692c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006934:	f380 8811 	msr	BASEPRI, r0
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f7fe ffb4 	bl	80058ac <vTaskSwitchContext>
 8006944:	f04f 0000 	mov.w	r0, #0
 8006948:	f380 8811 	msr	BASEPRI, r0
 800694c:	bc09      	pop	{r0, r3}
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	6808      	ldr	r0, [r1, #0]
 8006952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	f01e 0f10 	tst.w	lr, #16
 800695a:	bf08      	it	eq
 800695c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006960:	f380 8809 	msr	PSP, r0
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	f3af 8000 	nop.w

08006970 <pxCurrentTCBConst>:
 8006970:	20000bc4 	.word	0x20000bc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop

08006978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006992:	f7fe fed1 	bl	8005738 <xTaskIncrementTick>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <xPortSysTickHandler+0x40>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f383 8811 	msr	BASEPRI, r3
}
 80069ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortSetupTimerInterrupt+0x34>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <vPortSetupTimerInterrupt+0x38>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <vPortSetupTimerInterrupt+0x3c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <vPortSetupTimerInterrupt+0x40>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	099b      	lsrs	r3, r3, #6
 80069d8:	4a09      	ldr	r2, [pc, #36]	; (8006a00 <vPortSetupTimerInterrupt+0x44>)
 80069da:	3b01      	subs	r3, #1
 80069dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069de:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <vPortSetupTimerInterrupt+0x34>)
 80069e0:	2207      	movs	r2, #7
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	e000e010 	.word	0xe000e010
 80069f4:	e000e018 	.word	0xe000e018
 80069f8:	20000004 	.word	0x20000004
 80069fc:	10624dd3 	.word	0x10624dd3
 8006a00:	e000e014 	.word	0xe000e014

08006a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a14 <vPortEnableVFP+0x10>
 8006a08:	6801      	ldr	r1, [r0, #0]
 8006a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a0e:	6001      	str	r1, [r0, #0]
 8006a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a12:	bf00      	nop
 8006a14:	e000ed88 	.word	0xe000ed88

08006a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a1e:	f3ef 8305 	mrs	r3, IPSR
 8006a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b0f      	cmp	r3, #15
 8006a28:	d914      	bls.n	8006a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <vPortValidateInterruptPriority+0x70>)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a34:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <vPortValidateInterruptPriority+0x74>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	7afa      	ldrb	r2, [r7, #11]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20a      	bcs.n	8006a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	607b      	str	r3, [r7, #4]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a54:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <vPortValidateInterruptPriority+0x78>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <vPortValidateInterruptPriority+0x7c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d90a      	bls.n	8006a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	603b      	str	r3, [r7, #0]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <vPortValidateInterruptPriority+0x60>
	}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	e000e3f0 	.word	0xe000e3f0
 8006a8c:	200011f0 	.word	0x200011f0
 8006a90:	e000ed0c 	.word	0xe000ed0c
 8006a94:	200011f4 	.word	0x200011f4

08006a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006aa4:	f7fe fd8c 	bl	80055c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aa8:	4b5b      	ldr	r3, [pc, #364]	; (8006c18 <pvPortMalloc+0x180>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ab0:	f000 f920 	bl	8006cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ab4:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <pvPortMalloc+0x184>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 8093 	bne.w	8006be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01d      	beq.n	8006b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ac8:	2208      	movs	r2, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d014      	beq.n	8006b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <pvPortMalloc+0x6c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d06e      	beq.n	8006be8 <pvPortMalloc+0x150>
 8006b0a:	4b45      	ldr	r3, [pc, #276]	; (8006c20 <pvPortMalloc+0x188>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d869      	bhi.n	8006be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b14:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <pvPortMalloc+0x18c>)
 8006b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b18:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <pvPortMalloc+0x18c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b1e:	e004      	b.n	8006b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d903      	bls.n	8006b3c <pvPortMalloc+0xa4>
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f1      	bne.n	8006b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b3c:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <pvPortMalloc+0x180>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d050      	beq.n	8006be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	4413      	add	r3, r2
 8006b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	2308      	movs	r3, #8
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d91f      	bls.n	8006ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <pvPortMalloc+0xf8>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	613b      	str	r3, [r7, #16]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ba2:	69b8      	ldr	r0, [r7, #24]
 8006ba4:	f000 f908 	bl	8006db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <pvPortMalloc+0x188>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <pvPortMalloc+0x188>)
 8006bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <pvPortMalloc+0x188>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <pvPortMalloc+0x190>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d203      	bcs.n	8006bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <pvPortMalloc+0x188>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <pvPortMalloc+0x190>)
 8006bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <pvPortMalloc+0x184>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <pvPortMalloc+0x194>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <pvPortMalloc+0x194>)
 8006be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006be8:	f7fe fcf8 	bl	80055dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <pvPortMalloc+0x174>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <pvPortMalloc+0x172>
	return pvReturn;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3728      	adds	r7, #40	; 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20004e00 	.word	0x20004e00
 8006c1c:	20004e14 	.word	0x20004e14
 8006c20:	20004e04 	.word	0x20004e04
 8006c24:	20004df8 	.word	0x20004df8
 8006c28:	20004e08 	.word	0x20004e08
 8006c2c:	20004e0c 	.word	0x20004e0c

08006c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04d      	beq.n	8006cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c42:	2308      	movs	r3, #8
 8006c44:	425b      	negs	r3, r3
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <vPortFree+0xb8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <vPortFree+0x44>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	60fb      	str	r3, [r7, #12]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <vPortFree+0x62>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60bb      	str	r3, [r7, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <vPortFree+0xb8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01e      	beq.n	8006cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11a      	bne.n	8006cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <vPortFree+0xb8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cb8:	f7fe fc82 	bl	80055c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <vPortFree+0xbc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <vPortFree+0xbc>)
 8006cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cca:	6938      	ldr	r0, [r7, #16]
 8006ccc:	f000 f874 	bl	8006db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <vPortFree+0xc0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <vPortFree+0xc0>)
 8006cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cda:	f7fe fc7f 	bl	80055dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20004e14 	.word	0x20004e14
 8006cec:	20004e04 	.word	0x20004e04
 8006cf0:	20004e10 	.word	0x20004e10

08006cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d00:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <prvHeapInit+0xac>)
 8006d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00c      	beq.n	8006d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3307      	adds	r3, #7
 8006d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <prvHeapInit+0xac>)
 8006d24:	4413      	add	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <prvHeapInit+0xb0>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <prvHeapInit+0xb0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d40:	2208      	movs	r2, #8
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <prvHeapInit+0xb4>)
 8006d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <prvHeapInit+0xb4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <prvHeapInit+0xb4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <prvHeapInit+0xb4>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <prvHeapInit+0xb8>)
 8006d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <prvHeapInit+0xbc>)
 8006d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <prvHeapInit+0xc0>)
 8006d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d92:	601a      	str	r2, [r3, #0]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	200011f8 	.word	0x200011f8
 8006da4:	20004df8 	.word	0x20004df8
 8006da8:	20004e00 	.word	0x20004e00
 8006dac:	20004e08 	.word	0x20004e08
 8006db0:	20004e04 	.word	0x20004e04
 8006db4:	20004e14 	.word	0x20004e14

08006db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <prvInsertBlockIntoFreeList+0xac>)
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e002      	b.n	8006dcc <prvInsertBlockIntoFreeList+0x14>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d8f7      	bhi.n	8006dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d108      	bne.n	8006dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	441a      	add	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d118      	bne.n	8006e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <prvInsertBlockIntoFreeList+0xb0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d00d      	beq.n	8006e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e008      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <prvInsertBlockIntoFreeList+0xb0>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e003      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d002      	beq.n	8006e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20004df8 	.word	0x20004df8
 8006e68:	20004e00 	.word	0x20004e00

08006e6c <__cvt>:
 8006e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	ec55 4b10 	vmov	r4, r5, d0
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	460e      	mov	r6, r1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	bfbb      	ittet	lt
 8006e7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e82:	461d      	movlt	r5, r3
 8006e84:	2300      	movge	r3, #0
 8006e86:	232d      	movlt	r3, #45	; 0x2d
 8006e88:	700b      	strb	r3, [r1, #0]
 8006e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e90:	4691      	mov	r9, r2
 8006e92:	f023 0820 	bic.w	r8, r3, #32
 8006e96:	bfbc      	itt	lt
 8006e98:	4622      	movlt	r2, r4
 8006e9a:	4614      	movlt	r4, r2
 8006e9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ea0:	d005      	beq.n	8006eae <__cvt+0x42>
 8006ea2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ea6:	d100      	bne.n	8006eaa <__cvt+0x3e>
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	2102      	movs	r1, #2
 8006eac:	e000      	b.n	8006eb0 <__cvt+0x44>
 8006eae:	2103      	movs	r1, #3
 8006eb0:	ab03      	add	r3, sp, #12
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	ab02      	add	r3, sp, #8
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	ec45 4b10 	vmov	d0, r4, r5
 8006ebc:	4653      	mov	r3, sl
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	f001 f8fe 	bl	80080c0 <_dtoa_r>
 8006ec4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ec8:	4607      	mov	r7, r0
 8006eca:	d102      	bne.n	8006ed2 <__cvt+0x66>
 8006ecc:	f019 0f01 	tst.w	r9, #1
 8006ed0:	d022      	beq.n	8006f18 <__cvt+0xac>
 8006ed2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ed6:	eb07 0906 	add.w	r9, r7, r6
 8006eda:	d110      	bne.n	8006efe <__cvt+0x92>
 8006edc:	783b      	ldrb	r3, [r7, #0]
 8006ede:	2b30      	cmp	r3, #48	; 0x30
 8006ee0:	d10a      	bne.n	8006ef8 <__cvt+0x8c>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8006eee:	b918      	cbnz	r0, 8006ef8 <__cvt+0x8c>
 8006ef0:	f1c6 0601 	rsb	r6, r6, #1
 8006ef4:	f8ca 6000 	str.w	r6, [sl]
 8006ef8:	f8da 3000 	ldr.w	r3, [sl]
 8006efc:	4499      	add	r9, r3
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f7f9 fdff 	bl	8000b08 <__aeabi_dcmpeq>
 8006f0a:	b108      	cbz	r0, 8006f10 <__cvt+0xa4>
 8006f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f10:	2230      	movs	r2, #48	; 0x30
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	454b      	cmp	r3, r9
 8006f16:	d307      	bcc.n	8006f28 <__cvt+0xbc>
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f1c:	1bdb      	subs	r3, r3, r7
 8006f1e:	4638      	mov	r0, r7
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	b004      	add	sp, #16
 8006f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f28:	1c59      	adds	r1, r3, #1
 8006f2a:	9103      	str	r1, [sp, #12]
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e7f0      	b.n	8006f12 <__cvt+0xa6>

08006f30 <__exponent>:
 8006f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f32:	4603      	mov	r3, r0
 8006f34:	2900      	cmp	r1, #0
 8006f36:	bfb8      	it	lt
 8006f38:	4249      	neglt	r1, r1
 8006f3a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f3e:	bfb4      	ite	lt
 8006f40:	222d      	movlt	r2, #45	; 0x2d
 8006f42:	222b      	movge	r2, #43	; 0x2b
 8006f44:	2909      	cmp	r1, #9
 8006f46:	7042      	strb	r2, [r0, #1]
 8006f48:	dd2a      	ble.n	8006fa0 <__exponent+0x70>
 8006f4a:	f10d 0207 	add.w	r2, sp, #7
 8006f4e:	4617      	mov	r7, r2
 8006f50:	260a      	movs	r6, #10
 8006f52:	4694      	mov	ip, r2
 8006f54:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f58:	fb06 1415 	mls	r4, r6, r5, r1
 8006f5c:	3430      	adds	r4, #48	; 0x30
 8006f5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f62:	460c      	mov	r4, r1
 8006f64:	2c63      	cmp	r4, #99	; 0x63
 8006f66:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	dcf1      	bgt.n	8006f52 <__exponent+0x22>
 8006f6e:	3130      	adds	r1, #48	; 0x30
 8006f70:	f1ac 0402 	sub.w	r4, ip, #2
 8006f74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f78:	1c41      	adds	r1, r0, #1
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	42ba      	cmp	r2, r7
 8006f7e:	d30a      	bcc.n	8006f96 <__exponent+0x66>
 8006f80:	f10d 0209 	add.w	r2, sp, #9
 8006f84:	eba2 020c 	sub.w	r2, r2, ip
 8006f88:	42bc      	cmp	r4, r7
 8006f8a:	bf88      	it	hi
 8006f8c:	2200      	movhi	r2, #0
 8006f8e:	4413      	add	r3, r2
 8006f90:	1a18      	subs	r0, r3, r0
 8006f92:	b003      	add	sp, #12
 8006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f9e:	e7ed      	b.n	8006f7c <__exponent+0x4c>
 8006fa0:	2330      	movs	r3, #48	; 0x30
 8006fa2:	3130      	adds	r1, #48	; 0x30
 8006fa4:	7083      	strb	r3, [r0, #2]
 8006fa6:	70c1      	strb	r1, [r0, #3]
 8006fa8:	1d03      	adds	r3, r0, #4
 8006faa:	e7f1      	b.n	8006f90 <__exponent+0x60>

08006fac <_printf_float>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	ed2d 8b02 	vpush	{d8}
 8006fb4:	b08d      	sub	sp, #52	; 0x34
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	f000 ff13 	bl	8007dec <_localeconv_r>
 8006fc6:	f8d0 a000 	ldr.w	sl, [r0]
 8006fca:	4650      	mov	r0, sl
 8006fcc:	f7f9 f970 	bl	80002b0 <strlen>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	f023 0307 	bic.w	r3, r3, #7
 8006fe6:	f103 0208 	add.w	r2, r3, #8
 8006fea:	f8c8 2000 	str.w	r2, [r8]
 8006fee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ff2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ff6:	9307      	str	r3, [sp, #28]
 8006ff8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ffc:	ee08 0a10 	vmov	s16, r0
 8007000:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007008:	4b9e      	ldr	r3, [pc, #632]	; (8007284 <_printf_float+0x2d8>)
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	f7f9 fdad 	bl	8000b6c <__aeabi_dcmpun>
 8007012:	bb88      	cbnz	r0, 8007078 <_printf_float+0xcc>
 8007014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007018:	4b9a      	ldr	r3, [pc, #616]	; (8007284 <_printf_float+0x2d8>)
 800701a:	f04f 32ff 	mov.w	r2, #4294967295
 800701e:	f7f9 fd87 	bl	8000b30 <__aeabi_dcmple>
 8007022:	bb48      	cbnz	r0, 8007078 <_printf_float+0xcc>
 8007024:	2200      	movs	r2, #0
 8007026:	2300      	movs	r3, #0
 8007028:	4640      	mov	r0, r8
 800702a:	4649      	mov	r1, r9
 800702c:	f7f9 fd76 	bl	8000b1c <__aeabi_dcmplt>
 8007030:	b110      	cbz	r0, 8007038 <_printf_float+0x8c>
 8007032:	232d      	movs	r3, #45	; 0x2d
 8007034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007038:	4a93      	ldr	r2, [pc, #588]	; (8007288 <_printf_float+0x2dc>)
 800703a:	4b94      	ldr	r3, [pc, #592]	; (800728c <_printf_float+0x2e0>)
 800703c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007040:	bf94      	ite	ls
 8007042:	4690      	movls	r8, r2
 8007044:	4698      	movhi	r8, r3
 8007046:	2303      	movs	r3, #3
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	9b05      	ldr	r3, [sp, #20]
 800704c:	f023 0304 	bic.w	r3, r3, #4
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	f04f 0900 	mov.w	r9, #0
 8007056:	9700      	str	r7, [sp, #0]
 8007058:	4633      	mov	r3, r6
 800705a:	aa0b      	add	r2, sp, #44	; 0x2c
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f9da 	bl	8007418 <_printf_common>
 8007064:	3001      	adds	r0, #1
 8007066:	f040 8090 	bne.w	800718a <_printf_float+0x1de>
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
 800706e:	b00d      	add	sp, #52	; 0x34
 8007070:	ecbd 8b02 	vpop	{d8}
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007078:	4642      	mov	r2, r8
 800707a:	464b      	mov	r3, r9
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	f7f9 fd74 	bl	8000b6c <__aeabi_dcmpun>
 8007084:	b140      	cbz	r0, 8007098 <_printf_float+0xec>
 8007086:	464b      	mov	r3, r9
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfbc      	itt	lt
 800708c:	232d      	movlt	r3, #45	; 0x2d
 800708e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007092:	4a7f      	ldr	r2, [pc, #508]	; (8007290 <_printf_float+0x2e4>)
 8007094:	4b7f      	ldr	r3, [pc, #508]	; (8007294 <_printf_float+0x2e8>)
 8007096:	e7d1      	b.n	800703c <_printf_float+0x90>
 8007098:	6863      	ldr	r3, [r4, #4]
 800709a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800709e:	9206      	str	r2, [sp, #24]
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	d13f      	bne.n	8007124 <_printf_float+0x178>
 80070a4:	2306      	movs	r3, #6
 80070a6:	6063      	str	r3, [r4, #4]
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	6861      	ldr	r1, [r4, #4]
 80070ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070b0:	2300      	movs	r3, #0
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	ab0a      	add	r3, sp, #40	; 0x28
 80070b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070ba:	ab09      	add	r3, sp, #36	; 0x24
 80070bc:	ec49 8b10 	vmov	d0, r8, r9
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	6022      	str	r2, [r4, #0]
 80070c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070c8:	4628      	mov	r0, r5
 80070ca:	f7ff fecf 	bl	8006e6c <__cvt>
 80070ce:	9b06      	ldr	r3, [sp, #24]
 80070d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070d2:	2b47      	cmp	r3, #71	; 0x47
 80070d4:	4680      	mov	r8, r0
 80070d6:	d108      	bne.n	80070ea <_printf_float+0x13e>
 80070d8:	1cc8      	adds	r0, r1, #3
 80070da:	db02      	blt.n	80070e2 <_printf_float+0x136>
 80070dc:	6863      	ldr	r3, [r4, #4]
 80070de:	4299      	cmp	r1, r3
 80070e0:	dd41      	ble.n	8007166 <_printf_float+0x1ba>
 80070e2:	f1ab 0302 	sub.w	r3, fp, #2
 80070e6:	fa5f fb83 	uxtb.w	fp, r3
 80070ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070ee:	d820      	bhi.n	8007132 <_printf_float+0x186>
 80070f0:	3901      	subs	r1, #1
 80070f2:	465a      	mov	r2, fp
 80070f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070f8:	9109      	str	r1, [sp, #36]	; 0x24
 80070fa:	f7ff ff19 	bl	8006f30 <__exponent>
 80070fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007100:	1813      	adds	r3, r2, r0
 8007102:	2a01      	cmp	r2, #1
 8007104:	4681      	mov	r9, r0
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	dc02      	bgt.n	8007110 <_printf_float+0x164>
 800710a:	6822      	ldr	r2, [r4, #0]
 800710c:	07d2      	lsls	r2, r2, #31
 800710e:	d501      	bpl.n	8007114 <_printf_float+0x168>
 8007110:	3301      	adds	r3, #1
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007118:	2b00      	cmp	r3, #0
 800711a:	d09c      	beq.n	8007056 <_printf_float+0xaa>
 800711c:	232d      	movs	r3, #45	; 0x2d
 800711e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007122:	e798      	b.n	8007056 <_printf_float+0xaa>
 8007124:	9a06      	ldr	r2, [sp, #24]
 8007126:	2a47      	cmp	r2, #71	; 0x47
 8007128:	d1be      	bne.n	80070a8 <_printf_float+0xfc>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1bc      	bne.n	80070a8 <_printf_float+0xfc>
 800712e:	2301      	movs	r3, #1
 8007130:	e7b9      	b.n	80070a6 <_printf_float+0xfa>
 8007132:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007136:	d118      	bne.n	800716a <_printf_float+0x1be>
 8007138:	2900      	cmp	r1, #0
 800713a:	6863      	ldr	r3, [r4, #4]
 800713c:	dd0b      	ble.n	8007156 <_printf_float+0x1aa>
 800713e:	6121      	str	r1, [r4, #16]
 8007140:	b913      	cbnz	r3, 8007148 <_printf_float+0x19c>
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	07d0      	lsls	r0, r2, #31
 8007146:	d502      	bpl.n	800714e <_printf_float+0x1a2>
 8007148:	3301      	adds	r3, #1
 800714a:	440b      	add	r3, r1
 800714c:	6123      	str	r3, [r4, #16]
 800714e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	e7de      	b.n	8007114 <_printf_float+0x168>
 8007156:	b913      	cbnz	r3, 800715e <_printf_float+0x1b2>
 8007158:	6822      	ldr	r2, [r4, #0]
 800715a:	07d2      	lsls	r2, r2, #31
 800715c:	d501      	bpl.n	8007162 <_printf_float+0x1b6>
 800715e:	3302      	adds	r3, #2
 8007160:	e7f4      	b.n	800714c <_printf_float+0x1a0>
 8007162:	2301      	movs	r3, #1
 8007164:	e7f2      	b.n	800714c <_printf_float+0x1a0>
 8007166:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800716a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716c:	4299      	cmp	r1, r3
 800716e:	db05      	blt.n	800717c <_printf_float+0x1d0>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	6121      	str	r1, [r4, #16]
 8007174:	07d8      	lsls	r0, r3, #31
 8007176:	d5ea      	bpl.n	800714e <_printf_float+0x1a2>
 8007178:	1c4b      	adds	r3, r1, #1
 800717a:	e7e7      	b.n	800714c <_printf_float+0x1a0>
 800717c:	2900      	cmp	r1, #0
 800717e:	bfd4      	ite	le
 8007180:	f1c1 0202 	rsble	r2, r1, #2
 8007184:	2201      	movgt	r2, #1
 8007186:	4413      	add	r3, r2
 8007188:	e7e0      	b.n	800714c <_printf_float+0x1a0>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	055a      	lsls	r2, r3, #21
 800718e:	d407      	bmi.n	80071a0 <_printf_float+0x1f4>
 8007190:	6923      	ldr	r3, [r4, #16]
 8007192:	4642      	mov	r2, r8
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	d12c      	bne.n	80071f8 <_printf_float+0x24c>
 800719e:	e764      	b.n	800706a <_printf_float+0xbe>
 80071a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071a4:	f240 80e0 	bls.w	8007368 <_printf_float+0x3bc>
 80071a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071ac:	2200      	movs	r2, #0
 80071ae:	2300      	movs	r3, #0
 80071b0:	f7f9 fcaa 	bl	8000b08 <__aeabi_dcmpeq>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d034      	beq.n	8007222 <_printf_float+0x276>
 80071b8:	4a37      	ldr	r2, [pc, #220]	; (8007298 <_printf_float+0x2ec>)
 80071ba:	2301      	movs	r3, #1
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	f43f af51 	beq.w	800706a <_printf_float+0xbe>
 80071c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071cc:	429a      	cmp	r2, r3
 80071ce:	db02      	blt.n	80071d6 <_printf_float+0x22a>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	07d8      	lsls	r0, r3, #31
 80071d4:	d510      	bpl.n	80071f8 <_printf_float+0x24c>
 80071d6:	ee18 3a10 	vmov	r3, s16
 80071da:	4652      	mov	r2, sl
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	f43f af41 	beq.w	800706a <_printf_float+0xbe>
 80071e8:	f04f 0800 	mov.w	r8, #0
 80071ec:	f104 091a 	add.w	r9, r4, #26
 80071f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4543      	cmp	r3, r8
 80071f6:	dc09      	bgt.n	800720c <_printf_float+0x260>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	079b      	lsls	r3, r3, #30
 80071fc:	f100 8107 	bmi.w	800740e <_printf_float+0x462>
 8007200:	68e0      	ldr	r0, [r4, #12]
 8007202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007204:	4298      	cmp	r0, r3
 8007206:	bfb8      	it	lt
 8007208:	4618      	movlt	r0, r3
 800720a:	e730      	b.n	800706e <_printf_float+0xc2>
 800720c:	2301      	movs	r3, #1
 800720e:	464a      	mov	r2, r9
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f43f af27 	beq.w	800706a <_printf_float+0xbe>
 800721c:	f108 0801 	add.w	r8, r8, #1
 8007220:	e7e6      	b.n	80071f0 <_printf_float+0x244>
 8007222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	dc39      	bgt.n	800729c <_printf_float+0x2f0>
 8007228:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <_printf_float+0x2ec>)
 800722a:	2301      	movs	r3, #1
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	f43f af19 	beq.w	800706a <_printf_float+0xbe>
 8007238:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800723c:	4313      	orrs	r3, r2
 800723e:	d102      	bne.n	8007246 <_printf_float+0x29a>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07d9      	lsls	r1, r3, #31
 8007244:	d5d8      	bpl.n	80071f8 <_printf_float+0x24c>
 8007246:	ee18 3a10 	vmov	r3, s16
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af09 	beq.w	800706a <_printf_float+0xbe>
 8007258:	f04f 0900 	mov.w	r9, #0
 800725c:	f104 0a1a 	add.w	sl, r4, #26
 8007260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007262:	425b      	negs	r3, r3
 8007264:	454b      	cmp	r3, r9
 8007266:	dc01      	bgt.n	800726c <_printf_float+0x2c0>
 8007268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726a:	e792      	b.n	8007192 <_printf_float+0x1e6>
 800726c:	2301      	movs	r3, #1
 800726e:	4652      	mov	r2, sl
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f aef7 	beq.w	800706a <_printf_float+0xbe>
 800727c:	f109 0901 	add.w	r9, r9, #1
 8007280:	e7ee      	b.n	8007260 <_printf_float+0x2b4>
 8007282:	bf00      	nop
 8007284:	7fefffff 	.word	0x7fefffff
 8007288:	0800c034 	.word	0x0800c034
 800728c:	0800c038 	.word	0x0800c038
 8007290:	0800c03c 	.word	0x0800c03c
 8007294:	0800c040 	.word	0x0800c040
 8007298:	0800c3d0 	.word	0x0800c3d0
 800729c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800729e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072a0:	429a      	cmp	r2, r3
 80072a2:	bfa8      	it	ge
 80072a4:	461a      	movge	r2, r3
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	4691      	mov	r9, r2
 80072aa:	dc37      	bgt.n	800731c <_printf_float+0x370>
 80072ac:	f04f 0b00 	mov.w	fp, #0
 80072b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072b4:	f104 021a 	add.w	r2, r4, #26
 80072b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ba:	9305      	str	r3, [sp, #20]
 80072bc:	eba3 0309 	sub.w	r3, r3, r9
 80072c0:	455b      	cmp	r3, fp
 80072c2:	dc33      	bgt.n	800732c <_printf_float+0x380>
 80072c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c8:	429a      	cmp	r2, r3
 80072ca:	db3b      	blt.n	8007344 <_printf_float+0x398>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	07da      	lsls	r2, r3, #31
 80072d0:	d438      	bmi.n	8007344 <_printf_float+0x398>
 80072d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072d6:	eba2 0903 	sub.w	r9, r2, r3
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	4591      	cmp	r9, r2
 80072e0:	bfa8      	it	ge
 80072e2:	4691      	movge	r9, r2
 80072e4:	f1b9 0f00 	cmp.w	r9, #0
 80072e8:	dc35      	bgt.n	8007356 <_printf_float+0x3aa>
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072f2:	f104 0a1a 	add.w	sl, r4, #26
 80072f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	eba3 0309 	sub.w	r3, r3, r9
 8007300:	4543      	cmp	r3, r8
 8007302:	f77f af79 	ble.w	80071f8 <_printf_float+0x24c>
 8007306:	2301      	movs	r3, #1
 8007308:	4652      	mov	r2, sl
 800730a:	4631      	mov	r1, r6
 800730c:	4628      	mov	r0, r5
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	f43f aeaa 	beq.w	800706a <_printf_float+0xbe>
 8007316:	f108 0801 	add.w	r8, r8, #1
 800731a:	e7ec      	b.n	80072f6 <_printf_float+0x34a>
 800731c:	4613      	mov	r3, r2
 800731e:	4631      	mov	r1, r6
 8007320:	4642      	mov	r2, r8
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	d1c0      	bne.n	80072ac <_printf_float+0x300>
 800732a:	e69e      	b.n	800706a <_printf_float+0xbe>
 800732c:	2301      	movs	r3, #1
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	9205      	str	r2, [sp, #20]
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	f43f ae97 	beq.w	800706a <_printf_float+0xbe>
 800733c:	9a05      	ldr	r2, [sp, #20]
 800733e:	f10b 0b01 	add.w	fp, fp, #1
 8007342:	e7b9      	b.n	80072b8 <_printf_float+0x30c>
 8007344:	ee18 3a10 	vmov	r3, s16
 8007348:	4652      	mov	r2, sl
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	d1be      	bne.n	80072d2 <_printf_float+0x326>
 8007354:	e689      	b.n	800706a <_printf_float+0xbe>
 8007356:	9a05      	ldr	r2, [sp, #20]
 8007358:	464b      	mov	r3, r9
 800735a:	4442      	add	r2, r8
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	d1c1      	bne.n	80072ea <_printf_float+0x33e>
 8007366:	e680      	b.n	800706a <_printf_float+0xbe>
 8007368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736a:	2a01      	cmp	r2, #1
 800736c:	dc01      	bgt.n	8007372 <_printf_float+0x3c6>
 800736e:	07db      	lsls	r3, r3, #31
 8007370:	d53a      	bpl.n	80073e8 <_printf_float+0x43c>
 8007372:	2301      	movs	r3, #1
 8007374:	4642      	mov	r2, r8
 8007376:	4631      	mov	r1, r6
 8007378:	4628      	mov	r0, r5
 800737a:	47b8      	blx	r7
 800737c:	3001      	adds	r0, #1
 800737e:	f43f ae74 	beq.w	800706a <_printf_float+0xbe>
 8007382:	ee18 3a10 	vmov	r3, s16
 8007386:	4652      	mov	r2, sl
 8007388:	4631      	mov	r1, r6
 800738a:	4628      	mov	r0, r5
 800738c:	47b8      	blx	r7
 800738e:	3001      	adds	r0, #1
 8007390:	f43f ae6b 	beq.w	800706a <_printf_float+0xbe>
 8007394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80073a0:	f7f9 fbb2 	bl	8000b08 <__aeabi_dcmpeq>
 80073a4:	b9d8      	cbnz	r0, 80073de <_printf_float+0x432>
 80073a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073aa:	f108 0201 	add.w	r2, r8, #1
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	d10e      	bne.n	80073d6 <_printf_float+0x42a>
 80073b8:	e657      	b.n	800706a <_printf_float+0xbe>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4652      	mov	r2, sl
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f ae50 	beq.w	800706a <_printf_float+0xbe>
 80073ca:	f108 0801 	add.w	r8, r8, #1
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	3b01      	subs	r3, #1
 80073d2:	4543      	cmp	r3, r8
 80073d4:	dcf1      	bgt.n	80073ba <_printf_float+0x40e>
 80073d6:	464b      	mov	r3, r9
 80073d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073dc:	e6da      	b.n	8007194 <_printf_float+0x1e8>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	f104 0a1a 	add.w	sl, r4, #26
 80073e6:	e7f2      	b.n	80073ce <_printf_float+0x422>
 80073e8:	2301      	movs	r3, #1
 80073ea:	4642      	mov	r2, r8
 80073ec:	e7df      	b.n	80073ae <_printf_float+0x402>
 80073ee:	2301      	movs	r3, #1
 80073f0:	464a      	mov	r2, r9
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f ae36 	beq.w	800706a <_printf_float+0xbe>
 80073fe:	f108 0801 	add.w	r8, r8, #1
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	4543      	cmp	r3, r8
 800740a:	dcf0      	bgt.n	80073ee <_printf_float+0x442>
 800740c:	e6f8      	b.n	8007200 <_printf_float+0x254>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f104 0919 	add.w	r9, r4, #25
 8007416:	e7f4      	b.n	8007402 <_printf_float+0x456>

08007418 <_printf_common>:
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	4616      	mov	r6, r2
 800741e:	4699      	mov	r9, r3
 8007420:	688a      	ldr	r2, [r1, #8]
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007428:	4293      	cmp	r3, r2
 800742a:	bfb8      	it	lt
 800742c:	4613      	movlt	r3, r2
 800742e:	6033      	str	r3, [r6, #0]
 8007430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007434:	4607      	mov	r7, r0
 8007436:	460c      	mov	r4, r1
 8007438:	b10a      	cbz	r2, 800743e <_printf_common+0x26>
 800743a:	3301      	adds	r3, #1
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	0699      	lsls	r1, r3, #26
 8007442:	bf42      	ittt	mi
 8007444:	6833      	ldrmi	r3, [r6, #0]
 8007446:	3302      	addmi	r3, #2
 8007448:	6033      	strmi	r3, [r6, #0]
 800744a:	6825      	ldr	r5, [r4, #0]
 800744c:	f015 0506 	ands.w	r5, r5, #6
 8007450:	d106      	bne.n	8007460 <_printf_common+0x48>
 8007452:	f104 0a19 	add.w	sl, r4, #25
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	6832      	ldr	r2, [r6, #0]
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	42ab      	cmp	r3, r5
 800745e:	dc26      	bgt.n	80074ae <_printf_common+0x96>
 8007460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007464:	1e13      	subs	r3, r2, #0
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	bf18      	it	ne
 800746a:	2301      	movne	r3, #1
 800746c:	0692      	lsls	r2, r2, #26
 800746e:	d42b      	bmi.n	80074c8 <_printf_common+0xb0>
 8007470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007474:	4649      	mov	r1, r9
 8007476:	4638      	mov	r0, r7
 8007478:	47c0      	blx	r8
 800747a:	3001      	adds	r0, #1
 800747c:	d01e      	beq.n	80074bc <_printf_common+0xa4>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	6922      	ldr	r2, [r4, #16]
 8007482:	f003 0306 	and.w	r3, r3, #6
 8007486:	2b04      	cmp	r3, #4
 8007488:	bf02      	ittt	eq
 800748a:	68e5      	ldreq	r5, [r4, #12]
 800748c:	6833      	ldreq	r3, [r6, #0]
 800748e:	1aed      	subeq	r5, r5, r3
 8007490:	68a3      	ldr	r3, [r4, #8]
 8007492:	bf0c      	ite	eq
 8007494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007498:	2500      	movne	r5, #0
 800749a:	4293      	cmp	r3, r2
 800749c:	bfc4      	itt	gt
 800749e:	1a9b      	subgt	r3, r3, r2
 80074a0:	18ed      	addgt	r5, r5, r3
 80074a2:	2600      	movs	r6, #0
 80074a4:	341a      	adds	r4, #26
 80074a6:	42b5      	cmp	r5, r6
 80074a8:	d11a      	bne.n	80074e0 <_printf_common+0xc8>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e008      	b.n	80074c0 <_printf_common+0xa8>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4652      	mov	r2, sl
 80074b2:	4649      	mov	r1, r9
 80074b4:	4638      	mov	r0, r7
 80074b6:	47c0      	blx	r8
 80074b8:	3001      	adds	r0, #1
 80074ba:	d103      	bne.n	80074c4 <_printf_common+0xac>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	3501      	adds	r5, #1
 80074c6:	e7c6      	b.n	8007456 <_printf_common+0x3e>
 80074c8:	18e1      	adds	r1, r4, r3
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	2030      	movs	r0, #48	; 0x30
 80074ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074d2:	4422      	add	r2, r4
 80074d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074dc:	3302      	adds	r3, #2
 80074de:	e7c7      	b.n	8007470 <_printf_common+0x58>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4622      	mov	r2, r4
 80074e4:	4649      	mov	r1, r9
 80074e6:	4638      	mov	r0, r7
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d0e6      	beq.n	80074bc <_printf_common+0xa4>
 80074ee:	3601      	adds	r6, #1
 80074f0:	e7d9      	b.n	80074a6 <_printf_common+0x8e>
	...

080074f4 <_printf_i>:
 80074f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	7e0f      	ldrb	r7, [r1, #24]
 80074fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074fc:	2f78      	cmp	r7, #120	; 0x78
 80074fe:	4691      	mov	r9, r2
 8007500:	4680      	mov	r8, r0
 8007502:	460c      	mov	r4, r1
 8007504:	469a      	mov	sl, r3
 8007506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800750a:	d807      	bhi.n	800751c <_printf_i+0x28>
 800750c:	2f62      	cmp	r7, #98	; 0x62
 800750e:	d80a      	bhi.n	8007526 <_printf_i+0x32>
 8007510:	2f00      	cmp	r7, #0
 8007512:	f000 80d4 	beq.w	80076be <_printf_i+0x1ca>
 8007516:	2f58      	cmp	r7, #88	; 0x58
 8007518:	f000 80c0 	beq.w	800769c <_printf_i+0x1a8>
 800751c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007524:	e03a      	b.n	800759c <_printf_i+0xa8>
 8007526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800752a:	2b15      	cmp	r3, #21
 800752c:	d8f6      	bhi.n	800751c <_printf_i+0x28>
 800752e:	a101      	add	r1, pc, #4	; (adr r1, 8007534 <_printf_i+0x40>)
 8007530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007534:	0800758d 	.word	0x0800758d
 8007538:	080075a1 	.word	0x080075a1
 800753c:	0800751d 	.word	0x0800751d
 8007540:	0800751d 	.word	0x0800751d
 8007544:	0800751d 	.word	0x0800751d
 8007548:	0800751d 	.word	0x0800751d
 800754c:	080075a1 	.word	0x080075a1
 8007550:	0800751d 	.word	0x0800751d
 8007554:	0800751d 	.word	0x0800751d
 8007558:	0800751d 	.word	0x0800751d
 800755c:	0800751d 	.word	0x0800751d
 8007560:	080076a5 	.word	0x080076a5
 8007564:	080075cd 	.word	0x080075cd
 8007568:	0800765f 	.word	0x0800765f
 800756c:	0800751d 	.word	0x0800751d
 8007570:	0800751d 	.word	0x0800751d
 8007574:	080076c7 	.word	0x080076c7
 8007578:	0800751d 	.word	0x0800751d
 800757c:	080075cd 	.word	0x080075cd
 8007580:	0800751d 	.word	0x0800751d
 8007584:	0800751d 	.word	0x0800751d
 8007588:	08007667 	.word	0x08007667
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	602a      	str	r2, [r5, #0]
 8007594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800759c:	2301      	movs	r3, #1
 800759e:	e09f      	b.n	80076e0 <_printf_i+0x1ec>
 80075a0:	6820      	ldr	r0, [r4, #0]
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	0607      	lsls	r7, r0, #24
 80075a6:	f103 0104 	add.w	r1, r3, #4
 80075aa:	6029      	str	r1, [r5, #0]
 80075ac:	d501      	bpl.n	80075b2 <_printf_i+0xbe>
 80075ae:	681e      	ldr	r6, [r3, #0]
 80075b0:	e003      	b.n	80075ba <_printf_i+0xc6>
 80075b2:	0646      	lsls	r6, r0, #25
 80075b4:	d5fb      	bpl.n	80075ae <_printf_i+0xba>
 80075b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	da03      	bge.n	80075c6 <_printf_i+0xd2>
 80075be:	232d      	movs	r3, #45	; 0x2d
 80075c0:	4276      	negs	r6, r6
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c6:	485a      	ldr	r0, [pc, #360]	; (8007730 <_printf_i+0x23c>)
 80075c8:	230a      	movs	r3, #10
 80075ca:	e012      	b.n	80075f2 <_printf_i+0xfe>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	6820      	ldr	r0, [r4, #0]
 80075d0:	1d19      	adds	r1, r3, #4
 80075d2:	6029      	str	r1, [r5, #0]
 80075d4:	0605      	lsls	r5, r0, #24
 80075d6:	d501      	bpl.n	80075dc <_printf_i+0xe8>
 80075d8:	681e      	ldr	r6, [r3, #0]
 80075da:	e002      	b.n	80075e2 <_printf_i+0xee>
 80075dc:	0641      	lsls	r1, r0, #25
 80075de:	d5fb      	bpl.n	80075d8 <_printf_i+0xe4>
 80075e0:	881e      	ldrh	r6, [r3, #0]
 80075e2:	4853      	ldr	r0, [pc, #332]	; (8007730 <_printf_i+0x23c>)
 80075e4:	2f6f      	cmp	r7, #111	; 0x6f
 80075e6:	bf0c      	ite	eq
 80075e8:	2308      	moveq	r3, #8
 80075ea:	230a      	movne	r3, #10
 80075ec:	2100      	movs	r1, #0
 80075ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075f2:	6865      	ldr	r5, [r4, #4]
 80075f4:	60a5      	str	r5, [r4, #8]
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	bfa2      	ittt	ge
 80075fa:	6821      	ldrge	r1, [r4, #0]
 80075fc:	f021 0104 	bicge.w	r1, r1, #4
 8007600:	6021      	strge	r1, [r4, #0]
 8007602:	b90e      	cbnz	r6, 8007608 <_printf_i+0x114>
 8007604:	2d00      	cmp	r5, #0
 8007606:	d04b      	beq.n	80076a0 <_printf_i+0x1ac>
 8007608:	4615      	mov	r5, r2
 800760a:	fbb6 f1f3 	udiv	r1, r6, r3
 800760e:	fb03 6711 	mls	r7, r3, r1, r6
 8007612:	5dc7      	ldrb	r7, [r0, r7]
 8007614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007618:	4637      	mov	r7, r6
 800761a:	42bb      	cmp	r3, r7
 800761c:	460e      	mov	r6, r1
 800761e:	d9f4      	bls.n	800760a <_printf_i+0x116>
 8007620:	2b08      	cmp	r3, #8
 8007622:	d10b      	bne.n	800763c <_printf_i+0x148>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	07de      	lsls	r6, r3, #31
 8007628:	d508      	bpl.n	800763c <_printf_i+0x148>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	6861      	ldr	r1, [r4, #4]
 800762e:	4299      	cmp	r1, r3
 8007630:	bfde      	ittt	le
 8007632:	2330      	movle	r3, #48	; 0x30
 8007634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007638:	f105 35ff 	addle.w	r5, r5, #4294967295
 800763c:	1b52      	subs	r2, r2, r5
 800763e:	6122      	str	r2, [r4, #16]
 8007640:	f8cd a000 	str.w	sl, [sp]
 8007644:	464b      	mov	r3, r9
 8007646:	aa03      	add	r2, sp, #12
 8007648:	4621      	mov	r1, r4
 800764a:	4640      	mov	r0, r8
 800764c:	f7ff fee4 	bl	8007418 <_printf_common>
 8007650:	3001      	adds	r0, #1
 8007652:	d14a      	bne.n	80076ea <_printf_i+0x1f6>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	b004      	add	sp, #16
 800765a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	f043 0320 	orr.w	r3, r3, #32
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	4833      	ldr	r0, [pc, #204]	; (8007734 <_printf_i+0x240>)
 8007668:	2778      	movs	r7, #120	; 0x78
 800766a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	6829      	ldr	r1, [r5, #0]
 8007672:	061f      	lsls	r7, r3, #24
 8007674:	f851 6b04 	ldr.w	r6, [r1], #4
 8007678:	d402      	bmi.n	8007680 <_printf_i+0x18c>
 800767a:	065f      	lsls	r7, r3, #25
 800767c:	bf48      	it	mi
 800767e:	b2b6      	uxthmi	r6, r6
 8007680:	07df      	lsls	r7, r3, #31
 8007682:	bf48      	it	mi
 8007684:	f043 0320 	orrmi.w	r3, r3, #32
 8007688:	6029      	str	r1, [r5, #0]
 800768a:	bf48      	it	mi
 800768c:	6023      	strmi	r3, [r4, #0]
 800768e:	b91e      	cbnz	r6, 8007698 <_printf_i+0x1a4>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	f023 0320 	bic.w	r3, r3, #32
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	2310      	movs	r3, #16
 800769a:	e7a7      	b.n	80075ec <_printf_i+0xf8>
 800769c:	4824      	ldr	r0, [pc, #144]	; (8007730 <_printf_i+0x23c>)
 800769e:	e7e4      	b.n	800766a <_printf_i+0x176>
 80076a0:	4615      	mov	r5, r2
 80076a2:	e7bd      	b.n	8007620 <_printf_i+0x12c>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6826      	ldr	r6, [r4, #0]
 80076a8:	6961      	ldr	r1, [r4, #20]
 80076aa:	1d18      	adds	r0, r3, #4
 80076ac:	6028      	str	r0, [r5, #0]
 80076ae:	0635      	lsls	r5, r6, #24
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0x1c4>
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0x1ca>
 80076b8:	0670      	lsls	r0, r6, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0x1c0>
 80076bc:	8019      	strh	r1, [r3, #0]
 80076be:	2300      	movs	r3, #0
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	4615      	mov	r5, r2
 80076c4:	e7bc      	b.n	8007640 <_printf_i+0x14c>
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	602a      	str	r2, [r5, #0]
 80076cc:	681d      	ldr	r5, [r3, #0]
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	2100      	movs	r1, #0
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7f8 fd9c 	bl	8000210 <memchr>
 80076d8:	b108      	cbz	r0, 80076de <_printf_i+0x1ea>
 80076da:	1b40      	subs	r0, r0, r5
 80076dc:	6060      	str	r0, [r4, #4]
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	2300      	movs	r3, #0
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	e7aa      	b.n	8007640 <_printf_i+0x14c>
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	462a      	mov	r2, r5
 80076ee:	4649      	mov	r1, r9
 80076f0:	4640      	mov	r0, r8
 80076f2:	47d0      	blx	sl
 80076f4:	3001      	adds	r0, #1
 80076f6:	d0ad      	beq.n	8007654 <_printf_i+0x160>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	079b      	lsls	r3, r3, #30
 80076fc:	d413      	bmi.n	8007726 <_printf_i+0x232>
 80076fe:	68e0      	ldr	r0, [r4, #12]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	4298      	cmp	r0, r3
 8007704:	bfb8      	it	lt
 8007706:	4618      	movlt	r0, r3
 8007708:	e7a6      	b.n	8007658 <_printf_i+0x164>
 800770a:	2301      	movs	r3, #1
 800770c:	4632      	mov	r2, r6
 800770e:	4649      	mov	r1, r9
 8007710:	4640      	mov	r0, r8
 8007712:	47d0      	blx	sl
 8007714:	3001      	adds	r0, #1
 8007716:	d09d      	beq.n	8007654 <_printf_i+0x160>
 8007718:	3501      	adds	r5, #1
 800771a:	68e3      	ldr	r3, [r4, #12]
 800771c:	9903      	ldr	r1, [sp, #12]
 800771e:	1a5b      	subs	r3, r3, r1
 8007720:	42ab      	cmp	r3, r5
 8007722:	dcf2      	bgt.n	800770a <_printf_i+0x216>
 8007724:	e7eb      	b.n	80076fe <_printf_i+0x20a>
 8007726:	2500      	movs	r5, #0
 8007728:	f104 0619 	add.w	r6, r4, #25
 800772c:	e7f5      	b.n	800771a <_printf_i+0x226>
 800772e:	bf00      	nop
 8007730:	0800c044 	.word	0x0800c044
 8007734:	0800c055 	.word	0x0800c055

08007738 <_scanf_float>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	b087      	sub	sp, #28
 800773e:	4617      	mov	r7, r2
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	688b      	ldr	r3, [r1, #8]
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800774a:	bf83      	ittte	hi
 800774c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007750:	195b      	addhi	r3, r3, r5
 8007752:	9302      	strhi	r3, [sp, #8]
 8007754:	2300      	movls	r3, #0
 8007756:	bf86      	itte	hi
 8007758:	f240 135d 	movwhi	r3, #349	; 0x15d
 800775c:	608b      	strhi	r3, [r1, #8]
 800775e:	9302      	strls	r3, [sp, #8]
 8007760:	680b      	ldr	r3, [r1, #0]
 8007762:	468b      	mov	fp, r1
 8007764:	2500      	movs	r5, #0
 8007766:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800776a:	f84b 3b1c 	str.w	r3, [fp], #28
 800776e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007772:	4680      	mov	r8, r0
 8007774:	460c      	mov	r4, r1
 8007776:	465e      	mov	r6, fp
 8007778:	46aa      	mov	sl, r5
 800777a:	46a9      	mov	r9, r5
 800777c:	9501      	str	r5, [sp, #4]
 800777e:	68a2      	ldr	r2, [r4, #8]
 8007780:	b152      	cbz	r2, 8007798 <_scanf_float+0x60>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b4e      	cmp	r3, #78	; 0x4e
 8007788:	d864      	bhi.n	8007854 <_scanf_float+0x11c>
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d83c      	bhi.n	8007808 <_scanf_float+0xd0>
 800778e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007792:	b2c8      	uxtb	r0, r1
 8007794:	280e      	cmp	r0, #14
 8007796:	d93a      	bls.n	800780e <_scanf_float+0xd6>
 8007798:	f1b9 0f00 	cmp.w	r9, #0
 800779c:	d003      	beq.n	80077a6 <_scanf_float+0x6e>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077aa:	f1ba 0f01 	cmp.w	sl, #1
 80077ae:	f200 8113 	bhi.w	80079d8 <_scanf_float+0x2a0>
 80077b2:	455e      	cmp	r6, fp
 80077b4:	f200 8105 	bhi.w	80079c2 <_scanf_float+0x28a>
 80077b8:	2501      	movs	r5, #1
 80077ba:	4628      	mov	r0, r5
 80077bc:	b007      	add	sp, #28
 80077be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80077c6:	2a0d      	cmp	r2, #13
 80077c8:	d8e6      	bhi.n	8007798 <_scanf_float+0x60>
 80077ca:	a101      	add	r1, pc, #4	; (adr r1, 80077d0 <_scanf_float+0x98>)
 80077cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077d0:	0800790f 	.word	0x0800790f
 80077d4:	08007799 	.word	0x08007799
 80077d8:	08007799 	.word	0x08007799
 80077dc:	08007799 	.word	0x08007799
 80077e0:	0800796f 	.word	0x0800796f
 80077e4:	08007947 	.word	0x08007947
 80077e8:	08007799 	.word	0x08007799
 80077ec:	08007799 	.word	0x08007799
 80077f0:	0800791d 	.word	0x0800791d
 80077f4:	08007799 	.word	0x08007799
 80077f8:	08007799 	.word	0x08007799
 80077fc:	08007799 	.word	0x08007799
 8007800:	08007799 	.word	0x08007799
 8007804:	080078d5 	.word	0x080078d5
 8007808:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800780c:	e7db      	b.n	80077c6 <_scanf_float+0x8e>
 800780e:	290e      	cmp	r1, #14
 8007810:	d8c2      	bhi.n	8007798 <_scanf_float+0x60>
 8007812:	a001      	add	r0, pc, #4	; (adr r0, 8007818 <_scanf_float+0xe0>)
 8007814:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007818:	080078c7 	.word	0x080078c7
 800781c:	08007799 	.word	0x08007799
 8007820:	080078c7 	.word	0x080078c7
 8007824:	0800795b 	.word	0x0800795b
 8007828:	08007799 	.word	0x08007799
 800782c:	08007875 	.word	0x08007875
 8007830:	080078b1 	.word	0x080078b1
 8007834:	080078b1 	.word	0x080078b1
 8007838:	080078b1 	.word	0x080078b1
 800783c:	080078b1 	.word	0x080078b1
 8007840:	080078b1 	.word	0x080078b1
 8007844:	080078b1 	.word	0x080078b1
 8007848:	080078b1 	.word	0x080078b1
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078b1 	.word	0x080078b1
 8007854:	2b6e      	cmp	r3, #110	; 0x6e
 8007856:	d809      	bhi.n	800786c <_scanf_float+0x134>
 8007858:	2b60      	cmp	r3, #96	; 0x60
 800785a:	d8b2      	bhi.n	80077c2 <_scanf_float+0x8a>
 800785c:	2b54      	cmp	r3, #84	; 0x54
 800785e:	d077      	beq.n	8007950 <_scanf_float+0x218>
 8007860:	2b59      	cmp	r3, #89	; 0x59
 8007862:	d199      	bne.n	8007798 <_scanf_float+0x60>
 8007864:	2d07      	cmp	r5, #7
 8007866:	d197      	bne.n	8007798 <_scanf_float+0x60>
 8007868:	2508      	movs	r5, #8
 800786a:	e029      	b.n	80078c0 <_scanf_float+0x188>
 800786c:	2b74      	cmp	r3, #116	; 0x74
 800786e:	d06f      	beq.n	8007950 <_scanf_float+0x218>
 8007870:	2b79      	cmp	r3, #121	; 0x79
 8007872:	e7f6      	b.n	8007862 <_scanf_float+0x12a>
 8007874:	6821      	ldr	r1, [r4, #0]
 8007876:	05c8      	lsls	r0, r1, #23
 8007878:	d51a      	bpl.n	80078b0 <_scanf_float+0x178>
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007880:	6021      	str	r1, [r4, #0]
 8007882:	f109 0901 	add.w	r9, r9, #1
 8007886:	b11b      	cbz	r3, 8007890 <_scanf_float+0x158>
 8007888:	3b01      	subs	r3, #1
 800788a:	3201      	adds	r2, #1
 800788c:	9302      	str	r3, [sp, #8]
 800788e:	60a2      	str	r2, [r4, #8]
 8007890:	68a3      	ldr	r3, [r4, #8]
 8007892:	3b01      	subs	r3, #1
 8007894:	60a3      	str	r3, [r4, #8]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	3301      	adds	r3, #1
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3b01      	subs	r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	f340 8084 	ble.w	80079b0 <_scanf_float+0x278>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3301      	adds	r3, #1
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	e766      	b.n	800777e <_scanf_float+0x46>
 80078b0:	eb1a 0f05 	cmn.w	sl, r5
 80078b4:	f47f af70 	bne.w	8007798 <_scanf_float+0x60>
 80078b8:	6822      	ldr	r2, [r4, #0]
 80078ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80078be:	6022      	str	r2, [r4, #0]
 80078c0:	f806 3b01 	strb.w	r3, [r6], #1
 80078c4:	e7e4      	b.n	8007890 <_scanf_float+0x158>
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	0610      	lsls	r0, r2, #24
 80078ca:	f57f af65 	bpl.w	8007798 <_scanf_float+0x60>
 80078ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d2:	e7f4      	b.n	80078be <_scanf_float+0x186>
 80078d4:	f1ba 0f00 	cmp.w	sl, #0
 80078d8:	d10e      	bne.n	80078f8 <_scanf_float+0x1c0>
 80078da:	f1b9 0f00 	cmp.w	r9, #0
 80078de:	d10e      	bne.n	80078fe <_scanf_float+0x1c6>
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80078e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078ea:	d108      	bne.n	80078fe <_scanf_float+0x1c6>
 80078ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078f0:	6022      	str	r2, [r4, #0]
 80078f2:	f04f 0a01 	mov.w	sl, #1
 80078f6:	e7e3      	b.n	80078c0 <_scanf_float+0x188>
 80078f8:	f1ba 0f02 	cmp.w	sl, #2
 80078fc:	d055      	beq.n	80079aa <_scanf_float+0x272>
 80078fe:	2d01      	cmp	r5, #1
 8007900:	d002      	beq.n	8007908 <_scanf_float+0x1d0>
 8007902:	2d04      	cmp	r5, #4
 8007904:	f47f af48 	bne.w	8007798 <_scanf_float+0x60>
 8007908:	3501      	adds	r5, #1
 800790a:	b2ed      	uxtb	r5, r5
 800790c:	e7d8      	b.n	80078c0 <_scanf_float+0x188>
 800790e:	f1ba 0f01 	cmp.w	sl, #1
 8007912:	f47f af41 	bne.w	8007798 <_scanf_float+0x60>
 8007916:	f04f 0a02 	mov.w	sl, #2
 800791a:	e7d1      	b.n	80078c0 <_scanf_float+0x188>
 800791c:	b97d      	cbnz	r5, 800793e <_scanf_float+0x206>
 800791e:	f1b9 0f00 	cmp.w	r9, #0
 8007922:	f47f af3c 	bne.w	800779e <_scanf_float+0x66>
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800792c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007930:	f47f af39 	bne.w	80077a6 <_scanf_float+0x6e>
 8007934:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	2501      	movs	r5, #1
 800793c:	e7c0      	b.n	80078c0 <_scanf_float+0x188>
 800793e:	2d03      	cmp	r5, #3
 8007940:	d0e2      	beq.n	8007908 <_scanf_float+0x1d0>
 8007942:	2d05      	cmp	r5, #5
 8007944:	e7de      	b.n	8007904 <_scanf_float+0x1cc>
 8007946:	2d02      	cmp	r5, #2
 8007948:	f47f af26 	bne.w	8007798 <_scanf_float+0x60>
 800794c:	2503      	movs	r5, #3
 800794e:	e7b7      	b.n	80078c0 <_scanf_float+0x188>
 8007950:	2d06      	cmp	r5, #6
 8007952:	f47f af21 	bne.w	8007798 <_scanf_float+0x60>
 8007956:	2507      	movs	r5, #7
 8007958:	e7b2      	b.n	80078c0 <_scanf_float+0x188>
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	0591      	lsls	r1, r2, #22
 800795e:	f57f af1b 	bpl.w	8007798 <_scanf_float+0x60>
 8007962:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007966:	6022      	str	r2, [r4, #0]
 8007968:	f8cd 9004 	str.w	r9, [sp, #4]
 800796c:	e7a8      	b.n	80078c0 <_scanf_float+0x188>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007974:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007978:	d006      	beq.n	8007988 <_scanf_float+0x250>
 800797a:	0550      	lsls	r0, r2, #21
 800797c:	f57f af0c 	bpl.w	8007798 <_scanf_float+0x60>
 8007980:	f1b9 0f00 	cmp.w	r9, #0
 8007984:	f43f af0f 	beq.w	80077a6 <_scanf_float+0x6e>
 8007988:	0591      	lsls	r1, r2, #22
 800798a:	bf58      	it	pl
 800798c:	9901      	ldrpl	r1, [sp, #4]
 800798e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007992:	bf58      	it	pl
 8007994:	eba9 0101 	subpl.w	r1, r9, r1
 8007998:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800799c:	bf58      	it	pl
 800799e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80079a2:	6022      	str	r2, [r4, #0]
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	e78a      	b.n	80078c0 <_scanf_float+0x188>
 80079aa:	f04f 0a03 	mov.w	sl, #3
 80079ae:	e787      	b.n	80078c0 <_scanf_float+0x188>
 80079b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079b4:	4639      	mov	r1, r7
 80079b6:	4640      	mov	r0, r8
 80079b8:	4798      	blx	r3
 80079ba:	2800      	cmp	r0, #0
 80079bc:	f43f aedf 	beq.w	800777e <_scanf_float+0x46>
 80079c0:	e6ea      	b.n	8007798 <_scanf_float+0x60>
 80079c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079ca:	463a      	mov	r2, r7
 80079cc:	4640      	mov	r0, r8
 80079ce:	4798      	blx	r3
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	6123      	str	r3, [r4, #16]
 80079d6:	e6ec      	b.n	80077b2 <_scanf_float+0x7a>
 80079d8:	1e6b      	subs	r3, r5, #1
 80079da:	2b06      	cmp	r3, #6
 80079dc:	d825      	bhi.n	8007a2a <_scanf_float+0x2f2>
 80079de:	2d02      	cmp	r5, #2
 80079e0:	d836      	bhi.n	8007a50 <_scanf_float+0x318>
 80079e2:	455e      	cmp	r6, fp
 80079e4:	f67f aee8 	bls.w	80077b8 <_scanf_float+0x80>
 80079e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079f0:	463a      	mov	r2, r7
 80079f2:	4640      	mov	r0, r8
 80079f4:	4798      	blx	r3
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	6123      	str	r3, [r4, #16]
 80079fc:	e7f1      	b.n	80079e2 <_scanf_float+0x2aa>
 80079fe:	9802      	ldr	r0, [sp, #8]
 8007a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a08:	9002      	str	r0, [sp, #8]
 8007a0a:	463a      	mov	r2, r7
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	4798      	blx	r3
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	6123      	str	r3, [r4, #16]
 8007a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a1a:	fa5f fa8a 	uxtb.w	sl, sl
 8007a1e:	f1ba 0f02 	cmp.w	sl, #2
 8007a22:	d1ec      	bne.n	80079fe <_scanf_float+0x2c6>
 8007a24:	3d03      	subs	r5, #3
 8007a26:	b2ed      	uxtb	r5, r5
 8007a28:	1b76      	subs	r6, r6, r5
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	05da      	lsls	r2, r3, #23
 8007a2e:	d52f      	bpl.n	8007a90 <_scanf_float+0x358>
 8007a30:	055b      	lsls	r3, r3, #21
 8007a32:	d510      	bpl.n	8007a56 <_scanf_float+0x31e>
 8007a34:	455e      	cmp	r6, fp
 8007a36:	f67f aebf 	bls.w	80077b8 <_scanf_float+0x80>
 8007a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a42:	463a      	mov	r2, r7
 8007a44:	4640      	mov	r0, r8
 8007a46:	4798      	blx	r3
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	e7f1      	b.n	8007a34 <_scanf_float+0x2fc>
 8007a50:	46aa      	mov	sl, r5
 8007a52:	9602      	str	r6, [sp, #8]
 8007a54:	e7df      	b.n	8007a16 <_scanf_float+0x2de>
 8007a56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	2965      	cmp	r1, #101	; 0x65
 8007a5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a62:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	d00c      	beq.n	8007a84 <_scanf_float+0x34c>
 8007a6a:	2945      	cmp	r1, #69	; 0x45
 8007a6c:	d00a      	beq.n	8007a84 <_scanf_float+0x34c>
 8007a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a72:	463a      	mov	r2, r7
 8007a74:	4640      	mov	r0, r8
 8007a76:	4798      	blx	r3
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	1eb5      	subs	r5, r6, #2
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a88:	463a      	mov	r2, r7
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4798      	blx	r3
 8007a8e:	462e      	mov	r6, r5
 8007a90:	6825      	ldr	r5, [r4, #0]
 8007a92:	f015 0510 	ands.w	r5, r5, #16
 8007a96:	d158      	bne.n	8007b4a <_scanf_float+0x412>
 8007a98:	7035      	strb	r5, [r6, #0]
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa4:	d11c      	bne.n	8007ae0 <_scanf_float+0x3a8>
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	454b      	cmp	r3, r9
 8007aaa:	eba3 0209 	sub.w	r2, r3, r9
 8007aae:	d124      	bne.n	8007afa <_scanf_float+0x3c2>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	f002 fcaf 	bl	800a418 <_strtod_r>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	6821      	ldr	r1, [r4, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f011 0f02 	tst.w	r1, #2
 8007ac4:	ec57 6b10 	vmov	r6, r7, d0
 8007ac8:	f103 0204 	add.w	r2, r3, #4
 8007acc:	d020      	beq.n	8007b10 <_scanf_float+0x3d8>
 8007ace:	9903      	ldr	r1, [sp, #12]
 8007ad0:	600a      	str	r2, [r1, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	e9c3 6700 	strd	r6, r7, [r3]
 8007ad8:	68e3      	ldr	r3, [r4, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60e3      	str	r3, [r4, #12]
 8007ade:	e66c      	b.n	80077ba <_scanf_float+0x82>
 8007ae0:	9b04      	ldr	r3, [sp, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0e4      	beq.n	8007ab0 <_scanf_float+0x378>
 8007ae6:	9905      	ldr	r1, [sp, #20]
 8007ae8:	230a      	movs	r3, #10
 8007aea:	462a      	mov	r2, r5
 8007aec:	3101      	adds	r1, #1
 8007aee:	4640      	mov	r0, r8
 8007af0:	f002 fd1a 	bl	800a528 <_strtol_r>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	9e05      	ldr	r6, [sp, #20]
 8007af8:	1ac2      	subs	r2, r0, r3
 8007afa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007afe:	429e      	cmp	r6, r3
 8007b00:	bf28      	it	cs
 8007b02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b06:	4912      	ldr	r1, [pc, #72]	; (8007b50 <_scanf_float+0x418>)
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f000 f8d5 	bl	8007cb8 <siprintf>
 8007b0e:	e7cf      	b.n	8007ab0 <_scanf_float+0x378>
 8007b10:	f011 0f04 	tst.w	r1, #4
 8007b14:	9903      	ldr	r1, [sp, #12]
 8007b16:	600a      	str	r2, [r1, #0]
 8007b18:	d1db      	bne.n	8007ad2 <_scanf_float+0x39a>
 8007b1a:	f8d3 8000 	ldr.w	r8, [r3]
 8007b1e:	ee10 2a10 	vmov	r2, s0
 8007b22:	ee10 0a10 	vmov	r0, s0
 8007b26:	463b      	mov	r3, r7
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f9 f81f 	bl	8000b6c <__aeabi_dcmpun>
 8007b2e:	b128      	cbz	r0, 8007b3c <_scanf_float+0x404>
 8007b30:	4808      	ldr	r0, [pc, #32]	; (8007b54 <_scanf_float+0x41c>)
 8007b32:	f000 fa35 	bl	8007fa0 <nanf>
 8007b36:	ed88 0a00 	vstr	s0, [r8]
 8007b3a:	e7cd      	b.n	8007ad8 <_scanf_float+0x3a0>
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f9 f872 	bl	8000c28 <__aeabi_d2f>
 8007b44:	f8c8 0000 	str.w	r0, [r8]
 8007b48:	e7c6      	b.n	8007ad8 <_scanf_float+0x3a0>
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	e635      	b.n	80077ba <_scanf_float+0x82>
 8007b4e:	bf00      	nop
 8007b50:	0800c066 	.word	0x0800c066
 8007b54:	0800c418 	.word	0x0800c418

08007b58 <std>:
 8007b58:	2300      	movs	r3, #0
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b66:	6083      	str	r3, [r0, #8]
 8007b68:	8181      	strh	r1, [r0, #12]
 8007b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b6c:	81c2      	strh	r2, [r0, #14]
 8007b6e:	6183      	str	r3, [r0, #24]
 8007b70:	4619      	mov	r1, r3
 8007b72:	2208      	movs	r2, #8
 8007b74:	305c      	adds	r0, #92	; 0x5c
 8007b76:	f000 f930 	bl	8007dda <memset>
 8007b7a:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <std+0x38>)
 8007b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x3c>)
 8007b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x40>)
 8007b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x44>)
 8007b88:	6224      	str	r4, [r4, #32]
 8007b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop
 8007b90:	08007d51 	.word	0x08007d51
 8007b94:	08007d77 	.word	0x08007d77
 8007b98:	08007daf 	.word	0x08007daf
 8007b9c:	08007dd3 	.word	0x08007dd3

08007ba0 <stdio_exit_handler>:
 8007ba0:	4a02      	ldr	r2, [pc, #8]	; (8007bac <stdio_exit_handler+0xc>)
 8007ba2:	4903      	ldr	r1, [pc, #12]	; (8007bb0 <stdio_exit_handler+0x10>)
 8007ba4:	4803      	ldr	r0, [pc, #12]	; (8007bb4 <stdio_exit_handler+0x14>)
 8007ba6:	f000 b869 	b.w	8007c7c <_fwalk_sglue>
 8007baa:	bf00      	nop
 8007bac:	20000014 	.word	0x20000014
 8007bb0:	0800af29 	.word	0x0800af29
 8007bb4:	20000020 	.word	0x20000020

08007bb8 <cleanup_stdio>:
 8007bb8:	6841      	ldr	r1, [r0, #4]
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <cleanup_stdio+0x34>)
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	d001      	beq.n	8007bc8 <cleanup_stdio+0x10>
 8007bc4:	f003 f9b0 	bl	800af28 <_fflush_r>
 8007bc8:	68a1      	ldr	r1, [r4, #8]
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <cleanup_stdio+0x38>)
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	d002      	beq.n	8007bd6 <cleanup_stdio+0x1e>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f003 f9a9 	bl	800af28 <_fflush_r>
 8007bd6:	68e1      	ldr	r1, [r4, #12]
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <cleanup_stdio+0x3c>)
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	d004      	beq.n	8007be8 <cleanup_stdio+0x30>
 8007bde:	4620      	mov	r0, r4
 8007be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be4:	f003 b9a0 	b.w	800af28 <_fflush_r>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	bf00      	nop
 8007bec:	20004e18 	.word	0x20004e18
 8007bf0:	20004e80 	.word	0x20004e80
 8007bf4:	20004ee8 	.word	0x20004ee8

08007bf8 <global_stdio_init.part.0>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <global_stdio_init.part.0+0x30>)
 8007bfc:	4c0b      	ldr	r4, [pc, #44]	; (8007c2c <global_stdio_init.part.0+0x34>)
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <global_stdio_init.part.0+0x38>)
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	4620      	mov	r0, r4
 8007c04:	2200      	movs	r2, #0
 8007c06:	2104      	movs	r1, #4
 8007c08:	f7ff ffa6 	bl	8007b58 <std>
 8007c0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c10:	2201      	movs	r2, #1
 8007c12:	2109      	movs	r1, #9
 8007c14:	f7ff ffa0 	bl	8007b58 <std>
 8007c18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c22:	2112      	movs	r1, #18
 8007c24:	f7ff bf98 	b.w	8007b58 <std>
 8007c28:	20004f50 	.word	0x20004f50
 8007c2c:	20004e18 	.word	0x20004e18
 8007c30:	08007ba1 	.word	0x08007ba1

08007c34 <__sfp_lock_acquire>:
 8007c34:	4801      	ldr	r0, [pc, #4]	; (8007c3c <__sfp_lock_acquire+0x8>)
 8007c36:	f000 b9a3 	b.w	8007f80 <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	20004f59 	.word	0x20004f59

08007c40 <__sfp_lock_release>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__sfp_lock_release+0x8>)
 8007c42:	f000 b99e 	b.w	8007f82 <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	20004f59 	.word	0x20004f59

08007c4c <__sinit>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4604      	mov	r4, r0
 8007c50:	f7ff fff0 	bl	8007c34 <__sfp_lock_acquire>
 8007c54:	6a23      	ldr	r3, [r4, #32]
 8007c56:	b11b      	cbz	r3, 8007c60 <__sinit+0x14>
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f7ff bff0 	b.w	8007c40 <__sfp_lock_release>
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <__sinit+0x28>)
 8007c62:	6223      	str	r3, [r4, #32]
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <__sinit+0x2c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f5      	bne.n	8007c58 <__sinit+0xc>
 8007c6c:	f7ff ffc4 	bl	8007bf8 <global_stdio_init.part.0>
 8007c70:	e7f2      	b.n	8007c58 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	08007bb9 	.word	0x08007bb9
 8007c78:	20004f50 	.word	0x20004f50

08007c7c <_fwalk_sglue>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	4607      	mov	r7, r0
 8007c82:	4688      	mov	r8, r1
 8007c84:	4614      	mov	r4, r2
 8007c86:	2600      	movs	r6, #0
 8007c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c90:	d505      	bpl.n	8007c9e <_fwalk_sglue+0x22>
 8007c92:	6824      	ldr	r4, [r4, #0]
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	d1f7      	bne.n	8007c88 <_fwalk_sglue+0xc>
 8007c98:	4630      	mov	r0, r6
 8007c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d907      	bls.n	8007cb4 <_fwalk_sglue+0x38>
 8007ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	d003      	beq.n	8007cb4 <_fwalk_sglue+0x38>
 8007cac:	4629      	mov	r1, r5
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	4306      	orrs	r6, r0
 8007cb4:	3568      	adds	r5, #104	; 0x68
 8007cb6:	e7e9      	b.n	8007c8c <_fwalk_sglue+0x10>

08007cb8 <siprintf>:
 8007cb8:	b40e      	push	{r1, r2, r3}
 8007cba:	b500      	push	{lr}
 8007cbc:	b09c      	sub	sp, #112	; 0x70
 8007cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8007cc0:	9002      	str	r0, [sp, #8]
 8007cc2:	9006      	str	r0, [sp, #24]
 8007cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cc8:	4809      	ldr	r0, [pc, #36]	; (8007cf0 <siprintf+0x38>)
 8007cca:	9107      	str	r1, [sp, #28]
 8007ccc:	9104      	str	r1, [sp, #16]
 8007cce:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <siprintf+0x3c>)
 8007cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd4:	9105      	str	r1, [sp, #20]
 8007cd6:	6800      	ldr	r0, [r0, #0]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	a902      	add	r1, sp, #8
 8007cdc:	f002 fc80 	bl	800a5e0 <_svfiprintf_r>
 8007ce0:	9b02      	ldr	r3, [sp, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	b01c      	add	sp, #112	; 0x70
 8007ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cec:	b003      	add	sp, #12
 8007cee:	4770      	bx	lr
 8007cf0:	2000006c 	.word	0x2000006c
 8007cf4:	ffff0208 	.word	0xffff0208

08007cf8 <siscanf>:
 8007cf8:	b40e      	push	{r1, r2, r3}
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	b09f      	sub	sp, #124	; 0x7c
 8007cfe:	ac21      	add	r4, sp, #132	; 0x84
 8007d00:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007d04:	f854 2b04 	ldr.w	r2, [r4], #4
 8007d08:	9201      	str	r2, [sp, #4]
 8007d0a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007d0e:	9004      	str	r0, [sp, #16]
 8007d10:	9008      	str	r0, [sp, #32]
 8007d12:	f7f8 facd 	bl	80002b0 <strlen>
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <siscanf+0x50>)
 8007d18:	9005      	str	r0, [sp, #20]
 8007d1a:	9009      	str	r0, [sp, #36]	; 0x24
 8007d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d1e:	480b      	ldr	r0, [pc, #44]	; (8007d4c <siscanf+0x54>)
 8007d20:	9a01      	ldr	r2, [sp, #4]
 8007d22:	6800      	ldr	r0, [r0, #0]
 8007d24:	9403      	str	r4, [sp, #12]
 8007d26:	2300      	movs	r3, #0
 8007d28:	9311      	str	r3, [sp, #68]	; 0x44
 8007d2a:	9316      	str	r3, [sp, #88]	; 0x58
 8007d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007d34:	a904      	add	r1, sp, #16
 8007d36:	4623      	mov	r3, r4
 8007d38:	f002 fdaa 	bl	800a890 <__ssvfiscanf_r>
 8007d3c:	b01f      	add	sp, #124	; 0x7c
 8007d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d42:	b003      	add	sp, #12
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	08007d73 	.word	0x08007d73
 8007d4c:	2000006c 	.word	0x2000006c

08007d50 <__sread>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	460c      	mov	r4, r1
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	f000 f8c4 	bl	8007ee4 <_read_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	bfab      	itete	ge
 8007d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d62:	89a3      	ldrhlt	r3, [r4, #12]
 8007d64:	181b      	addge	r3, r3, r0
 8007d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d6a:	bfac      	ite	ge
 8007d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d6e:	81a3      	strhlt	r3, [r4, #12]
 8007d70:	bd10      	pop	{r4, pc}

08007d72 <__seofread>:
 8007d72:	2000      	movs	r0, #0
 8007d74:	4770      	bx	lr

08007d76 <__swrite>:
 8007d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7a:	461f      	mov	r7, r3
 8007d7c:	898b      	ldrh	r3, [r1, #12]
 8007d7e:	05db      	lsls	r3, r3, #23
 8007d80:	4605      	mov	r5, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	4616      	mov	r6, r2
 8007d86:	d505      	bpl.n	8007d94 <__swrite+0x1e>
 8007d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f000 f896 	bl	8007ec0 <_lseek_r>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	4628      	mov	r0, r5
 8007da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007daa:	f000 b8ad 	b.w	8007f08 <_write_r>

08007dae <__sseek>:
 8007dae:	b510      	push	{r4, lr}
 8007db0:	460c      	mov	r4, r1
 8007db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db6:	f000 f883 	bl	8007ec0 <_lseek_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	bf15      	itete	ne
 8007dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dca:	81a3      	strheq	r3, [r4, #12]
 8007dcc:	bf18      	it	ne
 8007dce:	81a3      	strhne	r3, [r4, #12]
 8007dd0:	bd10      	pop	{r4, pc}

08007dd2 <__sclose>:
 8007dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd6:	f000 b80d 	b.w	8007df4 <_close_r>

08007dda <memset>:
 8007dda:	4402      	add	r2, r0
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d100      	bne.n	8007de4 <memset+0xa>
 8007de2:	4770      	bx	lr
 8007de4:	f803 1b01 	strb.w	r1, [r3], #1
 8007de8:	e7f9      	b.n	8007dde <memset+0x4>
	...

08007dec <_localeconv_r>:
 8007dec:	4800      	ldr	r0, [pc, #0]	; (8007df0 <_localeconv_r+0x4>)
 8007dee:	4770      	bx	lr
 8007df0:	20000160 	.word	0x20000160

08007df4 <_close_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	; (8007e10 <_close_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7f9 fcd7 	bl	80017b2 <_close>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_close_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_close_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20004f54 	.word	0x20004f54

08007e14 <_reclaim_reent>:
 8007e14:	4b29      	ldr	r3, [pc, #164]	; (8007ebc <_reclaim_reent+0xa8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4283      	cmp	r3, r0
 8007e1a:	b570      	push	{r4, r5, r6, lr}
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	d04b      	beq.n	8007eb8 <_reclaim_reent+0xa4>
 8007e20:	69c3      	ldr	r3, [r0, #28]
 8007e22:	b143      	cbz	r3, 8007e36 <_reclaim_reent+0x22>
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d144      	bne.n	8007eb4 <_reclaim_reent+0xa0>
 8007e2a:	69e3      	ldr	r3, [r4, #28]
 8007e2c:	6819      	ldr	r1, [r3, #0]
 8007e2e:	b111      	cbz	r1, 8007e36 <_reclaim_reent+0x22>
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 ff37 	bl	8008ca4 <_free_r>
 8007e36:	6961      	ldr	r1, [r4, #20]
 8007e38:	b111      	cbz	r1, 8007e40 <_reclaim_reent+0x2c>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 ff32 	bl	8008ca4 <_free_r>
 8007e40:	69e1      	ldr	r1, [r4, #28]
 8007e42:	b111      	cbz	r1, 8007e4a <_reclaim_reent+0x36>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 ff2d 	bl	8008ca4 <_free_r>
 8007e4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e4c:	b111      	cbz	r1, 8007e54 <_reclaim_reent+0x40>
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 ff28 	bl	8008ca4 <_free_r>
 8007e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e56:	b111      	cbz	r1, 8007e5e <_reclaim_reent+0x4a>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 ff23 	bl	8008ca4 <_free_r>
 8007e5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e60:	b111      	cbz	r1, 8007e68 <_reclaim_reent+0x54>
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 ff1e 	bl	8008ca4 <_free_r>
 8007e68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e6a:	b111      	cbz	r1, 8007e72 <_reclaim_reent+0x5e>
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 ff19 	bl	8008ca4 <_free_r>
 8007e72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e74:	b111      	cbz	r1, 8007e7c <_reclaim_reent+0x68>
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 ff14 	bl	8008ca4 <_free_r>
 8007e7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e7e:	b111      	cbz	r1, 8007e86 <_reclaim_reent+0x72>
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 ff0f 	bl	8008ca4 <_free_r>
 8007e86:	6a23      	ldr	r3, [r4, #32]
 8007e88:	b1b3      	cbz	r3, 8007eb8 <_reclaim_reent+0xa4>
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e90:	4718      	bx	r3
 8007e92:	5949      	ldr	r1, [r1, r5]
 8007e94:	b941      	cbnz	r1, 8007ea8 <_reclaim_reent+0x94>
 8007e96:	3504      	adds	r5, #4
 8007e98:	69e3      	ldr	r3, [r4, #28]
 8007e9a:	2d80      	cmp	r5, #128	; 0x80
 8007e9c:	68d9      	ldr	r1, [r3, #12]
 8007e9e:	d1f8      	bne.n	8007e92 <_reclaim_reent+0x7e>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 feff 	bl	8008ca4 <_free_r>
 8007ea6:	e7c0      	b.n	8007e2a <_reclaim_reent+0x16>
 8007ea8:	680e      	ldr	r6, [r1, #0]
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fefa 	bl	8008ca4 <_free_r>
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	e7ef      	b.n	8007e94 <_reclaim_reent+0x80>
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	e7ef      	b.n	8007e98 <_reclaim_reent+0x84>
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	bf00      	nop
 8007ebc:	2000006c 	.word	0x2000006c

08007ec0 <_lseek_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_lseek_r+0x20>)
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	602a      	str	r2, [r5, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7f9 fc96 	bl	8001800 <_lseek>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_lseek_r+0x1e>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_lseek_r+0x1e>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20004f54 	.word	0x20004f54

08007ee4 <_read_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d07      	ldr	r5, [pc, #28]	; (8007f04 <_read_r+0x20>)
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4608      	mov	r0, r1
 8007eec:	4611      	mov	r1, r2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	602a      	str	r2, [r5, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7f9 fc24 	bl	8001740 <_read>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_read_r+0x1e>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_read_r+0x1e>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	20004f54 	.word	0x20004f54

08007f08 <_write_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d07      	ldr	r5, [pc, #28]	; (8007f28 <_write_r+0x20>)
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4611      	mov	r1, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	602a      	str	r2, [r5, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f7f9 fc2f 	bl	800177a <_write>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_write_r+0x1e>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_write_r+0x1e>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	20004f54 	.word	0x20004f54

08007f2c <__errno>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <__errno+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	2000006c 	.word	0x2000006c

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4d0d      	ldr	r5, [pc, #52]	; (8007f70 <__libc_init_array+0x38>)
 8007f3c:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	2600      	movs	r6, #0
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	4d0b      	ldr	r5, [pc, #44]	; (8007f78 <__libc_init_array+0x40>)
 8007f4a:	4c0c      	ldr	r4, [pc, #48]	; (8007f7c <__libc_init_array+0x44>)
 8007f4c:	f003 ffdc 	bl	800bf08 <_init>
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	2600      	movs	r6, #0
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	0800c484 	.word	0x0800c484
 8007f74:	0800c484 	.word	0x0800c484
 8007f78:	0800c484 	.word	0x0800c484
 8007f7c:	0800c488 	.word	0x0800c488

08007f80 <__retarget_lock_acquire_recursive>:
 8007f80:	4770      	bx	lr

08007f82 <__retarget_lock_release_recursive>:
 8007f82:	4770      	bx	lr

08007f84 <memcpy>:
 8007f84:	440a      	add	r2, r1
 8007f86:	4291      	cmp	r1, r2
 8007f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f8c:	d100      	bne.n	8007f90 <memcpy+0xc>
 8007f8e:	4770      	bx	lr
 8007f90:	b510      	push	{r4, lr}
 8007f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	d1f9      	bne.n	8007f92 <memcpy+0xe>
 8007f9e:	bd10      	pop	{r4, pc}

08007fa0 <nanf>:
 8007fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fa8 <nanf+0x8>
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	7fc00000 	.word	0x7fc00000

08007fac <quorem>:
 8007fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	6903      	ldr	r3, [r0, #16]
 8007fb2:	690c      	ldr	r4, [r1, #16]
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	db7e      	blt.n	80080b8 <quorem+0x10c>
 8007fba:	3c01      	subs	r4, #1
 8007fbc:	f101 0814 	add.w	r8, r1, #20
 8007fc0:	f100 0514 	add.w	r5, r0, #20
 8007fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fde:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fe2:	d331      	bcc.n	8008048 <quorem+0x9c>
 8007fe4:	f04f 0e00 	mov.w	lr, #0
 8007fe8:	4640      	mov	r0, r8
 8007fea:	46ac      	mov	ip, r5
 8007fec:	46f2      	mov	sl, lr
 8007fee:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ff2:	b293      	uxth	r3, r2
 8007ff4:	fb06 e303 	mla	r3, r6, r3, lr
 8007ff8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ffc:	0c1a      	lsrs	r2, r3, #16
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	ebaa 0303 	sub.w	r3, sl, r3
 8008004:	f8dc a000 	ldr.w	sl, [ip]
 8008008:	fa13 f38a 	uxtah	r3, r3, sl
 800800c:	fb06 220e 	mla	r2, r6, lr, r2
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	9b00      	ldr	r3, [sp, #0]
 8008014:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008018:	b292      	uxth	r2, r2
 800801a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800801e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008022:	f8bd 3000 	ldrh.w	r3, [sp]
 8008026:	4581      	cmp	r9, r0
 8008028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800802c:	f84c 3b04 	str.w	r3, [ip], #4
 8008030:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008034:	d2db      	bcs.n	8007fee <quorem+0x42>
 8008036:	f855 300b 	ldr.w	r3, [r5, fp]
 800803a:	b92b      	cbnz	r3, 8008048 <quorem+0x9c>
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	3b04      	subs	r3, #4
 8008040:	429d      	cmp	r5, r3
 8008042:	461a      	mov	r2, r3
 8008044:	d32c      	bcc.n	80080a0 <quorem+0xf4>
 8008046:	613c      	str	r4, [r7, #16]
 8008048:	4638      	mov	r0, r7
 800804a:	f001 f9f1 	bl	8009430 <__mcmp>
 800804e:	2800      	cmp	r0, #0
 8008050:	db22      	blt.n	8008098 <quorem+0xec>
 8008052:	3601      	adds	r6, #1
 8008054:	4629      	mov	r1, r5
 8008056:	2000      	movs	r0, #0
 8008058:	f858 2b04 	ldr.w	r2, [r8], #4
 800805c:	f8d1 c000 	ldr.w	ip, [r1]
 8008060:	b293      	uxth	r3, r2
 8008062:	1ac3      	subs	r3, r0, r3
 8008064:	0c12      	lsrs	r2, r2, #16
 8008066:	fa13 f38c 	uxtah	r3, r3, ip
 800806a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800806e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008072:	b29b      	uxth	r3, r3
 8008074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008078:	45c1      	cmp	r9, r8
 800807a:	f841 3b04 	str.w	r3, [r1], #4
 800807e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008082:	d2e9      	bcs.n	8008058 <quorem+0xac>
 8008084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008088:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800808c:	b922      	cbnz	r2, 8008098 <quorem+0xec>
 800808e:	3b04      	subs	r3, #4
 8008090:	429d      	cmp	r5, r3
 8008092:	461a      	mov	r2, r3
 8008094:	d30a      	bcc.n	80080ac <quorem+0x100>
 8008096:	613c      	str	r4, [r7, #16]
 8008098:	4630      	mov	r0, r6
 800809a:	b003      	add	sp, #12
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	3b04      	subs	r3, #4
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d1ce      	bne.n	8008046 <quorem+0x9a>
 80080a8:	3c01      	subs	r4, #1
 80080aa:	e7c9      	b.n	8008040 <quorem+0x94>
 80080ac:	6812      	ldr	r2, [r2, #0]
 80080ae:	3b04      	subs	r3, #4
 80080b0:	2a00      	cmp	r2, #0
 80080b2:	d1f0      	bne.n	8008096 <quorem+0xea>
 80080b4:	3c01      	subs	r4, #1
 80080b6:	e7eb      	b.n	8008090 <quorem+0xe4>
 80080b8:	2000      	movs	r0, #0
 80080ba:	e7ee      	b.n	800809a <quorem+0xee>
 80080bc:	0000      	movs	r0, r0
	...

080080c0 <_dtoa_r>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ed2d 8b04 	vpush	{d8-d9}
 80080c8:	69c5      	ldr	r5, [r0, #28]
 80080ca:	b093      	sub	sp, #76	; 0x4c
 80080cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080d0:	ec57 6b10 	vmov	r6, r7, d0
 80080d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080d8:	9107      	str	r1, [sp, #28]
 80080da:	4604      	mov	r4, r0
 80080dc:	920a      	str	r2, [sp, #40]	; 0x28
 80080de:	930d      	str	r3, [sp, #52]	; 0x34
 80080e0:	b975      	cbnz	r5, 8008100 <_dtoa_r+0x40>
 80080e2:	2010      	movs	r0, #16
 80080e4:	f000 fe2a 	bl	8008d3c <malloc>
 80080e8:	4602      	mov	r2, r0
 80080ea:	61e0      	str	r0, [r4, #28]
 80080ec:	b920      	cbnz	r0, 80080f8 <_dtoa_r+0x38>
 80080ee:	4bae      	ldr	r3, [pc, #696]	; (80083a8 <_dtoa_r+0x2e8>)
 80080f0:	21ef      	movs	r1, #239	; 0xef
 80080f2:	48ae      	ldr	r0, [pc, #696]	; (80083ac <_dtoa_r+0x2ec>)
 80080f4:	f002 fff8 	bl	800b0e8 <__assert_func>
 80080f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080fc:	6005      	str	r5, [r0, #0]
 80080fe:	60c5      	str	r5, [r0, #12]
 8008100:	69e3      	ldr	r3, [r4, #28]
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	b151      	cbz	r1, 800811c <_dtoa_r+0x5c>
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	604a      	str	r2, [r1, #4]
 800810a:	2301      	movs	r3, #1
 800810c:	4093      	lsls	r3, r2
 800810e:	608b      	str	r3, [r1, #8]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 ff07 	bl	8008f24 <_Bfree>
 8008116:	69e3      	ldr	r3, [r4, #28]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	1e3b      	subs	r3, r7, #0
 800811e:	bfbb      	ittet	lt
 8008120:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008124:	9303      	strlt	r3, [sp, #12]
 8008126:	2300      	movge	r3, #0
 8008128:	2201      	movlt	r2, #1
 800812a:	bfac      	ite	ge
 800812c:	f8c8 3000 	strge.w	r3, [r8]
 8008130:	f8c8 2000 	strlt.w	r2, [r8]
 8008134:	4b9e      	ldr	r3, [pc, #632]	; (80083b0 <_dtoa_r+0x2f0>)
 8008136:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800813a:	ea33 0308 	bics.w	r3, r3, r8
 800813e:	d11b      	bne.n	8008178 <_dtoa_r+0xb8>
 8008140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008142:	f242 730f 	movw	r3, #9999	; 0x270f
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800814c:	4333      	orrs	r3, r6
 800814e:	f000 8593 	beq.w	8008c78 <_dtoa_r+0xbb8>
 8008152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008154:	b963      	cbnz	r3, 8008170 <_dtoa_r+0xb0>
 8008156:	4b97      	ldr	r3, [pc, #604]	; (80083b4 <_dtoa_r+0x2f4>)
 8008158:	e027      	b.n	80081aa <_dtoa_r+0xea>
 800815a:	4b97      	ldr	r3, [pc, #604]	; (80083b8 <_dtoa_r+0x2f8>)
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	3308      	adds	r3, #8
 8008160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	9800      	ldr	r0, [sp, #0]
 8008166:	b013      	add	sp, #76	; 0x4c
 8008168:	ecbd 8b04 	vpop	{d8-d9}
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	4b90      	ldr	r3, [pc, #576]	; (80083b4 <_dtoa_r+0x2f4>)
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	3303      	adds	r3, #3
 8008176:	e7f3      	b.n	8008160 <_dtoa_r+0xa0>
 8008178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	ec51 0b17 	vmov	r0, r1, d7
 8008182:	eeb0 8a47 	vmov.f32	s16, s14
 8008186:	eef0 8a67 	vmov.f32	s17, s15
 800818a:	2300      	movs	r3, #0
 800818c:	f7f8 fcbc 	bl	8000b08 <__aeabi_dcmpeq>
 8008190:	4681      	mov	r9, r0
 8008192:	b160      	cbz	r0, 80081ae <_dtoa_r+0xee>
 8008194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008196:	2301      	movs	r3, #1
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 8568 	beq.w	8008c72 <_dtoa_r+0xbb2>
 80081a2:	4b86      	ldr	r3, [pc, #536]	; (80083bc <_dtoa_r+0x2fc>)
 80081a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	e7da      	b.n	8008164 <_dtoa_r+0xa4>
 80081ae:	aa10      	add	r2, sp, #64	; 0x40
 80081b0:	a911      	add	r1, sp, #68	; 0x44
 80081b2:	4620      	mov	r0, r4
 80081b4:	eeb0 0a48 	vmov.f32	s0, s16
 80081b8:	eef0 0a68 	vmov.f32	s1, s17
 80081bc:	f001 fa4e 	bl	800965c <__d2b>
 80081c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081c4:	4682      	mov	sl, r0
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	d07f      	beq.n	80082ca <_dtoa_r+0x20a>
 80081ca:	ee18 3a90 	vmov	r3, s17
 80081ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80081d6:	ec51 0b18 	vmov	r0, r1, d8
 80081da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80081de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80081e6:	4619      	mov	r1, r3
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b75      	ldr	r3, [pc, #468]	; (80083c0 <_dtoa_r+0x300>)
 80081ec:	f7f8 f86c 	bl	80002c8 <__aeabi_dsub>
 80081f0:	a367      	add	r3, pc, #412	; (adr r3, 8008390 <_dtoa_r+0x2d0>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fa1f 	bl	8000638 <__aeabi_dmul>
 80081fa:	a367      	add	r3, pc, #412	; (adr r3, 8008398 <_dtoa_r+0x2d8>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f8 f864 	bl	80002cc <__adddf3>
 8008204:	4606      	mov	r6, r0
 8008206:	4628      	mov	r0, r5
 8008208:	460f      	mov	r7, r1
 800820a:	f7f8 f9ab 	bl	8000564 <__aeabi_i2d>
 800820e:	a364      	add	r3, pc, #400	; (adr r3, 80083a0 <_dtoa_r+0x2e0>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 fa10 	bl	8000638 <__aeabi_dmul>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f8 f854 	bl	80002cc <__adddf3>
 8008224:	4606      	mov	r6, r0
 8008226:	460f      	mov	r7, r1
 8008228:	f7f8 fcb6 	bl	8000b98 <__aeabi_d2iz>
 800822c:	2200      	movs	r2, #0
 800822e:	4683      	mov	fp, r0
 8008230:	2300      	movs	r3, #0
 8008232:	4630      	mov	r0, r6
 8008234:	4639      	mov	r1, r7
 8008236:	f7f8 fc71 	bl	8000b1c <__aeabi_dcmplt>
 800823a:	b148      	cbz	r0, 8008250 <_dtoa_r+0x190>
 800823c:	4658      	mov	r0, fp
 800823e:	f7f8 f991 	bl	8000564 <__aeabi_i2d>
 8008242:	4632      	mov	r2, r6
 8008244:	463b      	mov	r3, r7
 8008246:	f7f8 fc5f 	bl	8000b08 <__aeabi_dcmpeq>
 800824a:	b908      	cbnz	r0, 8008250 <_dtoa_r+0x190>
 800824c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008250:	f1bb 0f16 	cmp.w	fp, #22
 8008254:	d857      	bhi.n	8008306 <_dtoa_r+0x246>
 8008256:	4b5b      	ldr	r3, [pc, #364]	; (80083c4 <_dtoa_r+0x304>)
 8008258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	ec51 0b18 	vmov	r0, r1, d8
 8008264:	f7f8 fc5a 	bl	8000b1c <__aeabi_dcmplt>
 8008268:	2800      	cmp	r0, #0
 800826a:	d04e      	beq.n	800830a <_dtoa_r+0x24a>
 800826c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008270:	2300      	movs	r3, #0
 8008272:	930c      	str	r3, [sp, #48]	; 0x30
 8008274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008276:	1b5b      	subs	r3, r3, r5
 8008278:	1e5a      	subs	r2, r3, #1
 800827a:	bf45      	ittet	mi
 800827c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008280:	9305      	strmi	r3, [sp, #20]
 8008282:	2300      	movpl	r3, #0
 8008284:	2300      	movmi	r3, #0
 8008286:	9206      	str	r2, [sp, #24]
 8008288:	bf54      	ite	pl
 800828a:	9305      	strpl	r3, [sp, #20]
 800828c:	9306      	strmi	r3, [sp, #24]
 800828e:	f1bb 0f00 	cmp.w	fp, #0
 8008292:	db3c      	blt.n	800830e <_dtoa_r+0x24e>
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800829a:	445b      	add	r3, fp
 800829c:	9306      	str	r3, [sp, #24]
 800829e:	2300      	movs	r3, #0
 80082a0:	9308      	str	r3, [sp, #32]
 80082a2:	9b07      	ldr	r3, [sp, #28]
 80082a4:	2b09      	cmp	r3, #9
 80082a6:	d868      	bhi.n	800837a <_dtoa_r+0x2ba>
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	bfc4      	itt	gt
 80082ac:	3b04      	subgt	r3, #4
 80082ae:	9307      	strgt	r3, [sp, #28]
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	f1a3 0302 	sub.w	r3, r3, #2
 80082b6:	bfcc      	ite	gt
 80082b8:	2500      	movgt	r5, #0
 80082ba:	2501      	movle	r5, #1
 80082bc:	2b03      	cmp	r3, #3
 80082be:	f200 8085 	bhi.w	80083cc <_dtoa_r+0x30c>
 80082c2:	e8df f003 	tbb	[pc, r3]
 80082c6:	3b2e      	.short	0x3b2e
 80082c8:	5839      	.short	0x5839
 80082ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082ce:	441d      	add	r5, r3
 80082d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	bfc1      	itttt	gt
 80082d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80082e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80082e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80082e8:	bfd6      	itet	le
 80082ea:	f1c3 0320 	rsble	r3, r3, #32
 80082ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80082f2:	fa06 f003 	lslle.w	r0, r6, r3
 80082f6:	f7f8 f925 	bl	8000544 <__aeabi_ui2d>
 80082fa:	2201      	movs	r2, #1
 80082fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008300:	3d01      	subs	r5, #1
 8008302:	920e      	str	r2, [sp, #56]	; 0x38
 8008304:	e76f      	b.n	80081e6 <_dtoa_r+0x126>
 8008306:	2301      	movs	r3, #1
 8008308:	e7b3      	b.n	8008272 <_dtoa_r+0x1b2>
 800830a:	900c      	str	r0, [sp, #48]	; 0x30
 800830c:	e7b2      	b.n	8008274 <_dtoa_r+0x1b4>
 800830e:	9b05      	ldr	r3, [sp, #20]
 8008310:	eba3 030b 	sub.w	r3, r3, fp
 8008314:	9305      	str	r3, [sp, #20]
 8008316:	f1cb 0300 	rsb	r3, fp, #0
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	2300      	movs	r3, #0
 800831e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008320:	e7bf      	b.n	80082a2 <_dtoa_r+0x1e2>
 8008322:	2300      	movs	r3, #0
 8008324:	9309      	str	r3, [sp, #36]	; 0x24
 8008326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008328:	2b00      	cmp	r3, #0
 800832a:	dc52      	bgt.n	80083d2 <_dtoa_r+0x312>
 800832c:	2301      	movs	r3, #1
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	461a      	mov	r2, r3
 8008334:	920a      	str	r2, [sp, #40]	; 0x28
 8008336:	e00b      	b.n	8008350 <_dtoa_r+0x290>
 8008338:	2301      	movs	r3, #1
 800833a:	e7f3      	b.n	8008324 <_dtoa_r+0x264>
 800833c:	2300      	movs	r3, #0
 800833e:	9309      	str	r3, [sp, #36]	; 0x24
 8008340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008342:	445b      	add	r3, fp
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	3301      	adds	r3, #1
 8008348:	2b01      	cmp	r3, #1
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	bfb8      	it	lt
 800834e:	2301      	movlt	r3, #1
 8008350:	69e0      	ldr	r0, [r4, #28]
 8008352:	2100      	movs	r1, #0
 8008354:	2204      	movs	r2, #4
 8008356:	f102 0614 	add.w	r6, r2, #20
 800835a:	429e      	cmp	r6, r3
 800835c:	d93d      	bls.n	80083da <_dtoa_r+0x31a>
 800835e:	6041      	str	r1, [r0, #4]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fd9f 	bl	8008ea4 <_Balloc>
 8008366:	9000      	str	r0, [sp, #0]
 8008368:	2800      	cmp	r0, #0
 800836a:	d139      	bne.n	80083e0 <_dtoa_r+0x320>
 800836c:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <_dtoa_r+0x308>)
 800836e:	4602      	mov	r2, r0
 8008370:	f240 11af 	movw	r1, #431	; 0x1af
 8008374:	e6bd      	b.n	80080f2 <_dtoa_r+0x32>
 8008376:	2301      	movs	r3, #1
 8008378:	e7e1      	b.n	800833e <_dtoa_r+0x27e>
 800837a:	2501      	movs	r5, #1
 800837c:	2300      	movs	r3, #0
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	9509      	str	r5, [sp, #36]	; 0x24
 8008382:	f04f 33ff 	mov.w	r3, #4294967295
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	9304      	str	r3, [sp, #16]
 800838a:	2200      	movs	r2, #0
 800838c:	2312      	movs	r3, #18
 800838e:	e7d1      	b.n	8008334 <_dtoa_r+0x274>
 8008390:	636f4361 	.word	0x636f4361
 8008394:	3fd287a7 	.word	0x3fd287a7
 8008398:	8b60c8b3 	.word	0x8b60c8b3
 800839c:	3fc68a28 	.word	0x3fc68a28
 80083a0:	509f79fb 	.word	0x509f79fb
 80083a4:	3fd34413 	.word	0x3fd34413
 80083a8:	0800c078 	.word	0x0800c078
 80083ac:	0800c08f 	.word	0x0800c08f
 80083b0:	7ff00000 	.word	0x7ff00000
 80083b4:	0800c074 	.word	0x0800c074
 80083b8:	0800c06b 	.word	0x0800c06b
 80083bc:	0800c3d1 	.word	0x0800c3d1
 80083c0:	3ff80000 	.word	0x3ff80000
 80083c4:	0800c180 	.word	0x0800c180
 80083c8:	0800c0e7 	.word	0x0800c0e7
 80083cc:	2301      	movs	r3, #1
 80083ce:	9309      	str	r3, [sp, #36]	; 0x24
 80083d0:	e7d7      	b.n	8008382 <_dtoa_r+0x2c2>
 80083d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	e7ba      	b.n	8008350 <_dtoa_r+0x290>
 80083da:	3101      	adds	r1, #1
 80083dc:	0052      	lsls	r2, r2, #1
 80083de:	e7ba      	b.n	8008356 <_dtoa_r+0x296>
 80083e0:	69e3      	ldr	r3, [r4, #28]
 80083e2:	9a00      	ldr	r2, [sp, #0]
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	2b0e      	cmp	r3, #14
 80083ea:	f200 80a8 	bhi.w	800853e <_dtoa_r+0x47e>
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	f000 80a5 	beq.w	800853e <_dtoa_r+0x47e>
 80083f4:	f1bb 0f00 	cmp.w	fp, #0
 80083f8:	dd38      	ble.n	800846c <_dtoa_r+0x3ac>
 80083fa:	4bc0      	ldr	r3, [pc, #768]	; (80086fc <_dtoa_r+0x63c>)
 80083fc:	f00b 020f 	and.w	r2, fp, #15
 8008400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008404:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008408:	e9d3 6700 	ldrd	r6, r7, [r3]
 800840c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008410:	d019      	beq.n	8008446 <_dtoa_r+0x386>
 8008412:	4bbb      	ldr	r3, [pc, #748]	; (8008700 <_dtoa_r+0x640>)
 8008414:	ec51 0b18 	vmov	r0, r1, d8
 8008418:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800841c:	f7f8 fa36 	bl	800088c <__aeabi_ddiv>
 8008420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008424:	f008 080f 	and.w	r8, r8, #15
 8008428:	2503      	movs	r5, #3
 800842a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008700 <_dtoa_r+0x640>
 800842e:	f1b8 0f00 	cmp.w	r8, #0
 8008432:	d10a      	bne.n	800844a <_dtoa_r+0x38a>
 8008434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008438:	4632      	mov	r2, r6
 800843a:	463b      	mov	r3, r7
 800843c:	f7f8 fa26 	bl	800088c <__aeabi_ddiv>
 8008440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008444:	e02b      	b.n	800849e <_dtoa_r+0x3de>
 8008446:	2502      	movs	r5, #2
 8008448:	e7ef      	b.n	800842a <_dtoa_r+0x36a>
 800844a:	f018 0f01 	tst.w	r8, #1
 800844e:	d008      	beq.n	8008462 <_dtoa_r+0x3a2>
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008458:	f7f8 f8ee 	bl	8000638 <__aeabi_dmul>
 800845c:	3501      	adds	r5, #1
 800845e:	4606      	mov	r6, r0
 8008460:	460f      	mov	r7, r1
 8008462:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008466:	f109 0908 	add.w	r9, r9, #8
 800846a:	e7e0      	b.n	800842e <_dtoa_r+0x36e>
 800846c:	f000 809f 	beq.w	80085ae <_dtoa_r+0x4ee>
 8008470:	f1cb 0600 	rsb	r6, fp, #0
 8008474:	4ba1      	ldr	r3, [pc, #644]	; (80086fc <_dtoa_r+0x63c>)
 8008476:	4fa2      	ldr	r7, [pc, #648]	; (8008700 <_dtoa_r+0x640>)
 8008478:	f006 020f 	and.w	r2, r6, #15
 800847c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	ec51 0b18 	vmov	r0, r1, d8
 8008488:	f7f8 f8d6 	bl	8000638 <__aeabi_dmul>
 800848c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008490:	1136      	asrs	r6, r6, #4
 8008492:	2300      	movs	r3, #0
 8008494:	2502      	movs	r5, #2
 8008496:	2e00      	cmp	r6, #0
 8008498:	d17e      	bne.n	8008598 <_dtoa_r+0x4d8>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1d0      	bne.n	8008440 <_dtoa_r+0x380>
 800849e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8084 	beq.w	80085b2 <_dtoa_r+0x4f2>
 80084aa:	4b96      	ldr	r3, [pc, #600]	; (8008704 <_dtoa_r+0x644>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f8 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d07b      	beq.n	80085b2 <_dtoa_r+0x4f2>
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d078      	beq.n	80085b2 <_dtoa_r+0x4f2>
 80084c0:	9b01      	ldr	r3, [sp, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd39      	ble.n	800853a <_dtoa_r+0x47a>
 80084c6:	4b90      	ldr	r3, [pc, #576]	; (8008708 <_dtoa_r+0x648>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f8 f8b3 	bl	8000638 <__aeabi_dmul>
 80084d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d6:	9e01      	ldr	r6, [sp, #4]
 80084d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80084dc:	3501      	adds	r5, #1
 80084de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084e2:	4628      	mov	r0, r5
 80084e4:	f7f8 f83e 	bl	8000564 <__aeabi_i2d>
 80084e8:	4642      	mov	r2, r8
 80084ea:	464b      	mov	r3, r9
 80084ec:	f7f8 f8a4 	bl	8000638 <__aeabi_dmul>
 80084f0:	4b86      	ldr	r3, [pc, #536]	; (800870c <_dtoa_r+0x64c>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f7 feea 	bl	80002cc <__adddf3>
 80084f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80084fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	2e00      	cmp	r6, #0
 8008504:	d158      	bne.n	80085b8 <_dtoa_r+0x4f8>
 8008506:	4b82      	ldr	r3, [pc, #520]	; (8008710 <_dtoa_r+0x650>)
 8008508:	2200      	movs	r2, #0
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 fedb 	bl	80002c8 <__aeabi_dsub>
 8008512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008516:	4680      	mov	r8, r0
 8008518:	4689      	mov	r9, r1
 800851a:	f7f8 fb1d 	bl	8000b58 <__aeabi_dcmpgt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f040 8296 	bne.w	8008a50 <_dtoa_r+0x990>
 8008524:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008528:	4640      	mov	r0, r8
 800852a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800852e:	4649      	mov	r1, r9
 8008530:	f7f8 faf4 	bl	8000b1c <__aeabi_dcmplt>
 8008534:	2800      	cmp	r0, #0
 8008536:	f040 8289 	bne.w	8008a4c <_dtoa_r+0x98c>
 800853a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800853e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008540:	2b00      	cmp	r3, #0
 8008542:	f2c0 814e 	blt.w	80087e2 <_dtoa_r+0x722>
 8008546:	f1bb 0f0e 	cmp.w	fp, #14
 800854a:	f300 814a 	bgt.w	80087e2 <_dtoa_r+0x722>
 800854e:	4b6b      	ldr	r3, [pc, #428]	; (80086fc <_dtoa_r+0x63c>)
 8008550:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008554:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855a:	2b00      	cmp	r3, #0
 800855c:	f280 80dc 	bge.w	8008718 <_dtoa_r+0x658>
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f300 80d8 	bgt.w	8008718 <_dtoa_r+0x658>
 8008568:	f040 826f 	bne.w	8008a4a <_dtoa_r+0x98a>
 800856c:	4b68      	ldr	r3, [pc, #416]	; (8008710 <_dtoa_r+0x650>)
 800856e:	2200      	movs	r2, #0
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 f860 	bl	8000638 <__aeabi_dmul>
 8008578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800857c:	f7f8 fae2 	bl	8000b44 <__aeabi_dcmpge>
 8008580:	9e04      	ldr	r6, [sp, #16]
 8008582:	4637      	mov	r7, r6
 8008584:	2800      	cmp	r0, #0
 8008586:	f040 8245 	bne.w	8008a14 <_dtoa_r+0x954>
 800858a:	9d00      	ldr	r5, [sp, #0]
 800858c:	2331      	movs	r3, #49	; 0x31
 800858e:	f805 3b01 	strb.w	r3, [r5], #1
 8008592:	f10b 0b01 	add.w	fp, fp, #1
 8008596:	e241      	b.n	8008a1c <_dtoa_r+0x95c>
 8008598:	07f2      	lsls	r2, r6, #31
 800859a:	d505      	bpl.n	80085a8 <_dtoa_r+0x4e8>
 800859c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a0:	f7f8 f84a 	bl	8000638 <__aeabi_dmul>
 80085a4:	3501      	adds	r5, #1
 80085a6:	2301      	movs	r3, #1
 80085a8:	1076      	asrs	r6, r6, #1
 80085aa:	3708      	adds	r7, #8
 80085ac:	e773      	b.n	8008496 <_dtoa_r+0x3d6>
 80085ae:	2502      	movs	r5, #2
 80085b0:	e775      	b.n	800849e <_dtoa_r+0x3de>
 80085b2:	9e04      	ldr	r6, [sp, #16]
 80085b4:	465f      	mov	r7, fp
 80085b6:	e792      	b.n	80084de <_dtoa_r+0x41e>
 80085b8:	9900      	ldr	r1, [sp, #0]
 80085ba:	4b50      	ldr	r3, [pc, #320]	; (80086fc <_dtoa_r+0x63c>)
 80085bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085c0:	4431      	add	r1, r6
 80085c2:	9102      	str	r1, [sp, #8]
 80085c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085c6:	eeb0 9a47 	vmov.f32	s18, s14
 80085ca:	eef0 9a67 	vmov.f32	s19, s15
 80085ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d044      	beq.n	8008664 <_dtoa_r+0x5a4>
 80085da:	494e      	ldr	r1, [pc, #312]	; (8008714 <_dtoa_r+0x654>)
 80085dc:	2000      	movs	r0, #0
 80085de:	f7f8 f955 	bl	800088c <__aeabi_ddiv>
 80085e2:	ec53 2b19 	vmov	r2, r3, d9
 80085e6:	f7f7 fe6f 	bl	80002c8 <__aeabi_dsub>
 80085ea:	9d00      	ldr	r5, [sp, #0]
 80085ec:	ec41 0b19 	vmov	d9, r0, r1
 80085f0:	4649      	mov	r1, r9
 80085f2:	4640      	mov	r0, r8
 80085f4:	f7f8 fad0 	bl	8000b98 <__aeabi_d2iz>
 80085f8:	4606      	mov	r6, r0
 80085fa:	f7f7 ffb3 	bl	8000564 <__aeabi_i2d>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4640      	mov	r0, r8
 8008604:	4649      	mov	r1, r9
 8008606:	f7f7 fe5f 	bl	80002c8 <__aeabi_dsub>
 800860a:	3630      	adds	r6, #48	; 0x30
 800860c:	f805 6b01 	strb.w	r6, [r5], #1
 8008610:	ec53 2b19 	vmov	r2, r3, d9
 8008614:	4680      	mov	r8, r0
 8008616:	4689      	mov	r9, r1
 8008618:	f7f8 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800861c:	2800      	cmp	r0, #0
 800861e:	d164      	bne.n	80086ea <_dtoa_r+0x62a>
 8008620:	4642      	mov	r2, r8
 8008622:	464b      	mov	r3, r9
 8008624:	4937      	ldr	r1, [pc, #220]	; (8008704 <_dtoa_r+0x644>)
 8008626:	2000      	movs	r0, #0
 8008628:	f7f7 fe4e 	bl	80002c8 <__aeabi_dsub>
 800862c:	ec53 2b19 	vmov	r2, r3, d9
 8008630:	f7f8 fa74 	bl	8000b1c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	f040 80b6 	bne.w	80087a6 <_dtoa_r+0x6e6>
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	429d      	cmp	r5, r3
 800863e:	f43f af7c 	beq.w	800853a <_dtoa_r+0x47a>
 8008642:	4b31      	ldr	r3, [pc, #196]	; (8008708 <_dtoa_r+0x648>)
 8008644:	ec51 0b19 	vmov	r0, r1, d9
 8008648:	2200      	movs	r2, #0
 800864a:	f7f7 fff5 	bl	8000638 <__aeabi_dmul>
 800864e:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <_dtoa_r+0x648>)
 8008650:	ec41 0b19 	vmov	d9, r0, r1
 8008654:	2200      	movs	r2, #0
 8008656:	4640      	mov	r0, r8
 8008658:	4649      	mov	r1, r9
 800865a:	f7f7 ffed 	bl	8000638 <__aeabi_dmul>
 800865e:	4680      	mov	r8, r0
 8008660:	4689      	mov	r9, r1
 8008662:	e7c5      	b.n	80085f0 <_dtoa_r+0x530>
 8008664:	ec51 0b17 	vmov	r0, r1, d7
 8008668:	f7f7 ffe6 	bl	8000638 <__aeabi_dmul>
 800866c:	9b02      	ldr	r3, [sp, #8]
 800866e:	9d00      	ldr	r5, [sp, #0]
 8008670:	930f      	str	r3, [sp, #60]	; 0x3c
 8008672:	ec41 0b19 	vmov	d9, r0, r1
 8008676:	4649      	mov	r1, r9
 8008678:	4640      	mov	r0, r8
 800867a:	f7f8 fa8d 	bl	8000b98 <__aeabi_d2iz>
 800867e:	4606      	mov	r6, r0
 8008680:	f7f7 ff70 	bl	8000564 <__aeabi_i2d>
 8008684:	3630      	adds	r6, #48	; 0x30
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4640      	mov	r0, r8
 800868c:	4649      	mov	r1, r9
 800868e:	f7f7 fe1b 	bl	80002c8 <__aeabi_dsub>
 8008692:	f805 6b01 	strb.w	r6, [r5], #1
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	429d      	cmp	r5, r3
 800869a:	4680      	mov	r8, r0
 800869c:	4689      	mov	r9, r1
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	d124      	bne.n	80086ee <_dtoa_r+0x62e>
 80086a4:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <_dtoa_r+0x654>)
 80086a6:	ec51 0b19 	vmov	r0, r1, d9
 80086aa:	f7f7 fe0f 	bl	80002cc <__adddf3>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f8 fa4f 	bl	8000b58 <__aeabi_dcmpgt>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d173      	bne.n	80087a6 <_dtoa_r+0x6e6>
 80086be:	ec53 2b19 	vmov	r2, r3, d9
 80086c2:	4914      	ldr	r1, [pc, #80]	; (8008714 <_dtoa_r+0x654>)
 80086c4:	2000      	movs	r0, #0
 80086c6:	f7f7 fdff 	bl	80002c8 <__aeabi_dsub>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f8 fa23 	bl	8000b1c <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f43f af2f 	beq.w	800853a <_dtoa_r+0x47a>
 80086dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086de:	1e6b      	subs	r3, r5, #1
 80086e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086e6:	2b30      	cmp	r3, #48	; 0x30
 80086e8:	d0f8      	beq.n	80086dc <_dtoa_r+0x61c>
 80086ea:	46bb      	mov	fp, r7
 80086ec:	e04a      	b.n	8008784 <_dtoa_r+0x6c4>
 80086ee:	4b06      	ldr	r3, [pc, #24]	; (8008708 <_dtoa_r+0x648>)
 80086f0:	f7f7 ffa2 	bl	8000638 <__aeabi_dmul>
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	e7bd      	b.n	8008676 <_dtoa_r+0x5b6>
 80086fa:	bf00      	nop
 80086fc:	0800c180 	.word	0x0800c180
 8008700:	0800c158 	.word	0x0800c158
 8008704:	3ff00000 	.word	0x3ff00000
 8008708:	40240000 	.word	0x40240000
 800870c:	401c0000 	.word	0x401c0000
 8008710:	40140000 	.word	0x40140000
 8008714:	3fe00000 	.word	0x3fe00000
 8008718:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800871c:	9d00      	ldr	r5, [sp, #0]
 800871e:	4642      	mov	r2, r8
 8008720:	464b      	mov	r3, r9
 8008722:	4630      	mov	r0, r6
 8008724:	4639      	mov	r1, r7
 8008726:	f7f8 f8b1 	bl	800088c <__aeabi_ddiv>
 800872a:	f7f8 fa35 	bl	8000b98 <__aeabi_d2iz>
 800872e:	9001      	str	r0, [sp, #4]
 8008730:	f7f7 ff18 	bl	8000564 <__aeabi_i2d>
 8008734:	4642      	mov	r2, r8
 8008736:	464b      	mov	r3, r9
 8008738:	f7f7 ff7e 	bl	8000638 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 fdc0 	bl	80002c8 <__aeabi_dsub>
 8008748:	9e01      	ldr	r6, [sp, #4]
 800874a:	9f04      	ldr	r7, [sp, #16]
 800874c:	3630      	adds	r6, #48	; 0x30
 800874e:	f805 6b01 	strb.w	r6, [r5], #1
 8008752:	9e00      	ldr	r6, [sp, #0]
 8008754:	1bae      	subs	r6, r5, r6
 8008756:	42b7      	cmp	r7, r6
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	d134      	bne.n	80087c8 <_dtoa_r+0x708>
 800875e:	f7f7 fdb5 	bl	80002cc <__adddf3>
 8008762:	4642      	mov	r2, r8
 8008764:	464b      	mov	r3, r9
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	f7f8 f9f5 	bl	8000b58 <__aeabi_dcmpgt>
 800876e:	b9c8      	cbnz	r0, 80087a4 <_dtoa_r+0x6e4>
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f8 f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 800877c:	b110      	cbz	r0, 8008784 <_dtoa_r+0x6c4>
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	07db      	lsls	r3, r3, #31
 8008782:	d40f      	bmi.n	80087a4 <_dtoa_r+0x6e4>
 8008784:	4651      	mov	r1, sl
 8008786:	4620      	mov	r0, r4
 8008788:	f000 fbcc 	bl	8008f24 <_Bfree>
 800878c:	2300      	movs	r3, #0
 800878e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008790:	702b      	strb	r3, [r5, #0]
 8008792:	f10b 0301 	add.w	r3, fp, #1
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800879a:	2b00      	cmp	r3, #0
 800879c:	f43f ace2 	beq.w	8008164 <_dtoa_r+0xa4>
 80087a0:	601d      	str	r5, [r3, #0]
 80087a2:	e4df      	b.n	8008164 <_dtoa_r+0xa4>
 80087a4:	465f      	mov	r7, fp
 80087a6:	462b      	mov	r3, r5
 80087a8:	461d      	mov	r5, r3
 80087aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ae:	2a39      	cmp	r2, #57	; 0x39
 80087b0:	d106      	bne.n	80087c0 <_dtoa_r+0x700>
 80087b2:	9a00      	ldr	r2, [sp, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d1f7      	bne.n	80087a8 <_dtoa_r+0x6e8>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	2230      	movs	r2, #48	; 0x30
 80087bc:	3701      	adds	r7, #1
 80087be:	700a      	strb	r2, [r1, #0]
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	3201      	adds	r2, #1
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e790      	b.n	80086ea <_dtoa_r+0x62a>
 80087c8:	4ba3      	ldr	r3, [pc, #652]	; (8008a58 <_dtoa_r+0x998>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	f7f7 ff34 	bl	8000638 <__aeabi_dmul>
 80087d0:	2200      	movs	r2, #0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	f7f8 f996 	bl	8000b08 <__aeabi_dcmpeq>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d09e      	beq.n	800871e <_dtoa_r+0x65e>
 80087e0:	e7d0      	b.n	8008784 <_dtoa_r+0x6c4>
 80087e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	f000 80ca 	beq.w	800897e <_dtoa_r+0x8be>
 80087ea:	9a07      	ldr	r2, [sp, #28]
 80087ec:	2a01      	cmp	r2, #1
 80087ee:	f300 80ad 	bgt.w	800894c <_dtoa_r+0x88c>
 80087f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f000 80a5 	beq.w	8008944 <_dtoa_r+0x884>
 80087fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087fe:	9e08      	ldr	r6, [sp, #32]
 8008800:	9d05      	ldr	r5, [sp, #20]
 8008802:	9a05      	ldr	r2, [sp, #20]
 8008804:	441a      	add	r2, r3
 8008806:	9205      	str	r2, [sp, #20]
 8008808:	9a06      	ldr	r2, [sp, #24]
 800880a:	2101      	movs	r1, #1
 800880c:	441a      	add	r2, r3
 800880e:	4620      	mov	r0, r4
 8008810:	9206      	str	r2, [sp, #24]
 8008812:	f000 fc87 	bl	8009124 <__i2b>
 8008816:	4607      	mov	r7, r0
 8008818:	b165      	cbz	r5, 8008834 <_dtoa_r+0x774>
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd09      	ble.n	8008834 <_dtoa_r+0x774>
 8008820:	42ab      	cmp	r3, r5
 8008822:	9a05      	ldr	r2, [sp, #20]
 8008824:	bfa8      	it	ge
 8008826:	462b      	movge	r3, r5
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	9205      	str	r2, [sp, #20]
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	1aed      	subs	r5, r5, r3
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	9306      	str	r3, [sp, #24]
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	b1f3      	cbz	r3, 8008876 <_dtoa_r+0x7b6>
 8008838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a3 	beq.w	8008986 <_dtoa_r+0x8c6>
 8008840:	2e00      	cmp	r6, #0
 8008842:	dd10      	ble.n	8008866 <_dtoa_r+0x7a6>
 8008844:	4639      	mov	r1, r7
 8008846:	4632      	mov	r2, r6
 8008848:	4620      	mov	r0, r4
 800884a:	f000 fd2b 	bl	80092a4 <__pow5mult>
 800884e:	4652      	mov	r2, sl
 8008850:	4601      	mov	r1, r0
 8008852:	4607      	mov	r7, r0
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fc7b 	bl	8009150 <__multiply>
 800885a:	4651      	mov	r1, sl
 800885c:	4680      	mov	r8, r0
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fb60 	bl	8008f24 <_Bfree>
 8008864:	46c2      	mov	sl, r8
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	1b9a      	subs	r2, r3, r6
 800886a:	d004      	beq.n	8008876 <_dtoa_r+0x7b6>
 800886c:	4651      	mov	r1, sl
 800886e:	4620      	mov	r0, r4
 8008870:	f000 fd18 	bl	80092a4 <__pow5mult>
 8008874:	4682      	mov	sl, r0
 8008876:	2101      	movs	r1, #1
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fc53 	bl	8009124 <__i2b>
 800887e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	4606      	mov	r6, r0
 8008884:	f340 8081 	ble.w	800898a <_dtoa_r+0x8ca>
 8008888:	461a      	mov	r2, r3
 800888a:	4601      	mov	r1, r0
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fd09 	bl	80092a4 <__pow5mult>
 8008892:	9b07      	ldr	r3, [sp, #28]
 8008894:	2b01      	cmp	r3, #1
 8008896:	4606      	mov	r6, r0
 8008898:	dd7a      	ble.n	8008990 <_dtoa_r+0x8d0>
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	6933      	ldr	r3, [r6, #16]
 80088a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088a4:	6918      	ldr	r0, [r3, #16]
 80088a6:	f000 fbef 	bl	8009088 <__hi0bits>
 80088aa:	f1c0 0020 	rsb	r0, r0, #32
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	4418      	add	r0, r3
 80088b2:	f010 001f 	ands.w	r0, r0, #31
 80088b6:	f000 8094 	beq.w	80089e2 <_dtoa_r+0x922>
 80088ba:	f1c0 0320 	rsb	r3, r0, #32
 80088be:	2b04      	cmp	r3, #4
 80088c0:	f340 8085 	ble.w	80089ce <_dtoa_r+0x90e>
 80088c4:	9b05      	ldr	r3, [sp, #20]
 80088c6:	f1c0 001c 	rsb	r0, r0, #28
 80088ca:	4403      	add	r3, r0
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	4403      	add	r3, r0
 80088d2:	4405      	add	r5, r0
 80088d4:	9306      	str	r3, [sp, #24]
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dd05      	ble.n	80088e8 <_dtoa_r+0x828>
 80088dc:	4651      	mov	r1, sl
 80088de:	461a      	mov	r2, r3
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fd39 	bl	8009358 <__lshift>
 80088e6:	4682      	mov	sl, r0
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dd05      	ble.n	80088fa <_dtoa_r+0x83a>
 80088ee:	4631      	mov	r1, r6
 80088f0:	461a      	mov	r2, r3
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 fd30 	bl	8009358 <__lshift>
 80088f8:	4606      	mov	r6, r0
 80088fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d072      	beq.n	80089e6 <_dtoa_r+0x926>
 8008900:	4631      	mov	r1, r6
 8008902:	4650      	mov	r0, sl
 8008904:	f000 fd94 	bl	8009430 <__mcmp>
 8008908:	2800      	cmp	r0, #0
 800890a:	da6c      	bge.n	80089e6 <_dtoa_r+0x926>
 800890c:	2300      	movs	r3, #0
 800890e:	4651      	mov	r1, sl
 8008910:	220a      	movs	r2, #10
 8008912:	4620      	mov	r0, r4
 8008914:	f000 fb28 	bl	8008f68 <__multadd>
 8008918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800891e:	4682      	mov	sl, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 81b0 	beq.w	8008c86 <_dtoa_r+0xbc6>
 8008926:	2300      	movs	r3, #0
 8008928:	4639      	mov	r1, r7
 800892a:	220a      	movs	r2, #10
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fb1b 	bl	8008f68 <__multadd>
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	4607      	mov	r7, r0
 8008938:	f300 8096 	bgt.w	8008a68 <_dtoa_r+0x9a8>
 800893c:	9b07      	ldr	r3, [sp, #28]
 800893e:	2b02      	cmp	r3, #2
 8008940:	dc59      	bgt.n	80089f6 <_dtoa_r+0x936>
 8008942:	e091      	b.n	8008a68 <_dtoa_r+0x9a8>
 8008944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800894a:	e758      	b.n	80087fe <_dtoa_r+0x73e>
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	1e5e      	subs	r6, r3, #1
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	42b3      	cmp	r3, r6
 8008954:	bfbf      	itttt	lt
 8008956:	9b08      	ldrlt	r3, [sp, #32]
 8008958:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800895a:	9608      	strlt	r6, [sp, #32]
 800895c:	1af3      	sublt	r3, r6, r3
 800895e:	bfb4      	ite	lt
 8008960:	18d2      	addlt	r2, r2, r3
 8008962:	1b9e      	subge	r6, r3, r6
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	bfbc      	itt	lt
 8008968:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800896a:	2600      	movlt	r6, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfb7      	itett	lt
 8008970:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008974:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008978:	1a9d      	sublt	r5, r3, r2
 800897a:	2300      	movlt	r3, #0
 800897c:	e741      	b.n	8008802 <_dtoa_r+0x742>
 800897e:	9e08      	ldr	r6, [sp, #32]
 8008980:	9d05      	ldr	r5, [sp, #20]
 8008982:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008984:	e748      	b.n	8008818 <_dtoa_r+0x758>
 8008986:	9a08      	ldr	r2, [sp, #32]
 8008988:	e770      	b.n	800886c <_dtoa_r+0x7ac>
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	2b01      	cmp	r3, #1
 800898e:	dc19      	bgt.n	80089c4 <_dtoa_r+0x904>
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	b9bb      	cbnz	r3, 80089c4 <_dtoa_r+0x904>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800899a:	b99b      	cbnz	r3, 80089c4 <_dtoa_r+0x904>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089a2:	0d1b      	lsrs	r3, r3, #20
 80089a4:	051b      	lsls	r3, r3, #20
 80089a6:	b183      	cbz	r3, 80089ca <_dtoa_r+0x90a>
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	3301      	adds	r3, #1
 80089ac:	9305      	str	r3, [sp, #20]
 80089ae:	9b06      	ldr	r3, [sp, #24]
 80089b0:	3301      	adds	r3, #1
 80089b2:	9306      	str	r3, [sp, #24]
 80089b4:	f04f 0801 	mov.w	r8, #1
 80089b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f47f af6f 	bne.w	800889e <_dtoa_r+0x7de>
 80089c0:	2001      	movs	r0, #1
 80089c2:	e774      	b.n	80088ae <_dtoa_r+0x7ee>
 80089c4:	f04f 0800 	mov.w	r8, #0
 80089c8:	e7f6      	b.n	80089b8 <_dtoa_r+0x8f8>
 80089ca:	4698      	mov	r8, r3
 80089cc:	e7f4      	b.n	80089b8 <_dtoa_r+0x8f8>
 80089ce:	d082      	beq.n	80088d6 <_dtoa_r+0x816>
 80089d0:	9a05      	ldr	r2, [sp, #20]
 80089d2:	331c      	adds	r3, #28
 80089d4:	441a      	add	r2, r3
 80089d6:	9205      	str	r2, [sp, #20]
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	441a      	add	r2, r3
 80089dc:	441d      	add	r5, r3
 80089de:	9206      	str	r2, [sp, #24]
 80089e0:	e779      	b.n	80088d6 <_dtoa_r+0x816>
 80089e2:	4603      	mov	r3, r0
 80089e4:	e7f4      	b.n	80089d0 <_dtoa_r+0x910>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dc37      	bgt.n	8008a5c <_dtoa_r+0x99c>
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	dd34      	ble.n	8008a5c <_dtoa_r+0x99c>
 80089f2:	9b04      	ldr	r3, [sp, #16]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	b963      	cbnz	r3, 8008a14 <_dtoa_r+0x954>
 80089fa:	4631      	mov	r1, r6
 80089fc:	2205      	movs	r2, #5
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 fab2 	bl	8008f68 <__multadd>
 8008a04:	4601      	mov	r1, r0
 8008a06:	4606      	mov	r6, r0
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f000 fd11 	bl	8009430 <__mcmp>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f73f adbb 	bgt.w	800858a <_dtoa_r+0x4ca>
 8008a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a16:	9d00      	ldr	r5, [sp, #0]
 8008a18:	ea6f 0b03 	mvn.w	fp, r3
 8008a1c:	f04f 0800 	mov.w	r8, #0
 8008a20:	4631      	mov	r1, r6
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fa7e 	bl	8008f24 <_Bfree>
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	f43f aeab 	beq.w	8008784 <_dtoa_r+0x6c4>
 8008a2e:	f1b8 0f00 	cmp.w	r8, #0
 8008a32:	d005      	beq.n	8008a40 <_dtoa_r+0x980>
 8008a34:	45b8      	cmp	r8, r7
 8008a36:	d003      	beq.n	8008a40 <_dtoa_r+0x980>
 8008a38:	4641      	mov	r1, r8
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 fa72 	bl	8008f24 <_Bfree>
 8008a40:	4639      	mov	r1, r7
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 fa6e 	bl	8008f24 <_Bfree>
 8008a48:	e69c      	b.n	8008784 <_dtoa_r+0x6c4>
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	4637      	mov	r7, r6
 8008a4e:	e7e1      	b.n	8008a14 <_dtoa_r+0x954>
 8008a50:	46bb      	mov	fp, r7
 8008a52:	4637      	mov	r7, r6
 8008a54:	e599      	b.n	800858a <_dtoa_r+0x4ca>
 8008a56:	bf00      	nop
 8008a58:	40240000 	.word	0x40240000
 8008a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80c8 	beq.w	8008bf4 <_dtoa_r+0xb34>
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	dd05      	ble.n	8008a78 <_dtoa_r+0x9b8>
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fc71 	bl	8009358 <__lshift>
 8008a76:	4607      	mov	r7, r0
 8008a78:	f1b8 0f00 	cmp.w	r8, #0
 8008a7c:	d05b      	beq.n	8008b36 <_dtoa_r+0xa76>
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fa0f 	bl	8008ea4 <_Balloc>
 8008a86:	4605      	mov	r5, r0
 8008a88:	b928      	cbnz	r0, 8008a96 <_dtoa_r+0x9d6>
 8008a8a:	4b83      	ldr	r3, [pc, #524]	; (8008c98 <_dtoa_r+0xbd8>)
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a92:	f7ff bb2e 	b.w	80080f2 <_dtoa_r+0x32>
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	3202      	adds	r2, #2
 8008a9a:	0092      	lsls	r2, r2, #2
 8008a9c:	f107 010c 	add.w	r1, r7, #12
 8008aa0:	300c      	adds	r0, #12
 8008aa2:	f7ff fa6f 	bl	8007f84 <memcpy>
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fc54 	bl	8009358 <__lshift>
 8008ab0:	9b00      	ldr	r3, [sp, #0]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aba:	4413      	add	r3, r2
 8008abc:	9308      	str	r3, [sp, #32]
 8008abe:	9b02      	ldr	r3, [sp, #8]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	46b8      	mov	r8, r7
 8008ac6:	9306      	str	r3, [sp, #24]
 8008ac8:	4607      	mov	r7, r0
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	4631      	mov	r1, r6
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4650      	mov	r0, sl
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	f7ff fa6a 	bl	8007fac <quorem>
 8008ad8:	4641      	mov	r1, r8
 8008ada:	9002      	str	r0, [sp, #8]
 8008adc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ae0:	4650      	mov	r0, sl
 8008ae2:	f000 fca5 	bl	8009430 <__mcmp>
 8008ae6:	463a      	mov	r2, r7
 8008ae8:	9005      	str	r0, [sp, #20]
 8008aea:	4631      	mov	r1, r6
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 fcbb 	bl	8009468 <__mdiff>
 8008af2:	68c2      	ldr	r2, [r0, #12]
 8008af4:	4605      	mov	r5, r0
 8008af6:	bb02      	cbnz	r2, 8008b3a <_dtoa_r+0xa7a>
 8008af8:	4601      	mov	r1, r0
 8008afa:	4650      	mov	r0, sl
 8008afc:	f000 fc98 	bl	8009430 <__mcmp>
 8008b00:	4602      	mov	r2, r0
 8008b02:	4629      	mov	r1, r5
 8008b04:	4620      	mov	r0, r4
 8008b06:	9209      	str	r2, [sp, #36]	; 0x24
 8008b08:	f000 fa0c 	bl	8008f24 <_Bfree>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b10:	9d04      	ldr	r5, [sp, #16]
 8008b12:	ea43 0102 	orr.w	r1, r3, r2
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	4319      	orrs	r1, r3
 8008b1a:	d110      	bne.n	8008b3e <_dtoa_r+0xa7e>
 8008b1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b20:	d029      	beq.n	8008b76 <_dtoa_r+0xab6>
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dd02      	ble.n	8008b2e <_dtoa_r+0xa6e>
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	f883 9000 	strb.w	r9, [r3]
 8008b34:	e774      	b.n	8008a20 <_dtoa_r+0x960>
 8008b36:	4638      	mov	r0, r7
 8008b38:	e7ba      	b.n	8008ab0 <_dtoa_r+0x9f0>
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	e7e1      	b.n	8008b02 <_dtoa_r+0xa42>
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	db04      	blt.n	8008b4e <_dtoa_r+0xa8e>
 8008b44:	9907      	ldr	r1, [sp, #28]
 8008b46:	430b      	orrs	r3, r1
 8008b48:	9906      	ldr	r1, [sp, #24]
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	d120      	bne.n	8008b90 <_dtoa_r+0xad0>
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	dded      	ble.n	8008b2e <_dtoa_r+0xa6e>
 8008b52:	4651      	mov	r1, sl
 8008b54:	2201      	movs	r2, #1
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 fbfe 	bl	8009358 <__lshift>
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4682      	mov	sl, r0
 8008b60:	f000 fc66 	bl	8009430 <__mcmp>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	dc03      	bgt.n	8008b70 <_dtoa_r+0xab0>
 8008b68:	d1e1      	bne.n	8008b2e <_dtoa_r+0xa6e>
 8008b6a:	f019 0f01 	tst.w	r9, #1
 8008b6e:	d0de      	beq.n	8008b2e <_dtoa_r+0xa6e>
 8008b70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b74:	d1d8      	bne.n	8008b28 <_dtoa_r+0xa68>
 8008b76:	9a01      	ldr	r2, [sp, #4]
 8008b78:	2339      	movs	r3, #57	; 0x39
 8008b7a:	7013      	strb	r3, [r2, #0]
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	461d      	mov	r5, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b86:	2a39      	cmp	r2, #57	; 0x39
 8008b88:	d06c      	beq.n	8008c64 <_dtoa_r+0xba4>
 8008b8a:	3201      	adds	r2, #1
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e747      	b.n	8008a20 <_dtoa_r+0x960>
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	dd07      	ble.n	8008ba4 <_dtoa_r+0xae4>
 8008b94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b98:	d0ed      	beq.n	8008b76 <_dtoa_r+0xab6>
 8008b9a:	9a01      	ldr	r2, [sp, #4]
 8008b9c:	f109 0301 	add.w	r3, r9, #1
 8008ba0:	7013      	strb	r3, [r2, #0]
 8008ba2:	e73d      	b.n	8008a20 <_dtoa_r+0x960>
 8008ba4:	9b04      	ldr	r3, [sp, #16]
 8008ba6:	9a08      	ldr	r2, [sp, #32]
 8008ba8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d043      	beq.n	8008c38 <_dtoa_r+0xb78>
 8008bb0:	4651      	mov	r1, sl
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 f9d6 	bl	8008f68 <__multadd>
 8008bbc:	45b8      	cmp	r8, r7
 8008bbe:	4682      	mov	sl, r0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	f04f 020a 	mov.w	r2, #10
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4620      	mov	r0, r4
 8008bcc:	d107      	bne.n	8008bde <_dtoa_r+0xb1e>
 8008bce:	f000 f9cb 	bl	8008f68 <__multadd>
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	4607      	mov	r7, r0
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	e775      	b.n	8008aca <_dtoa_r+0xa0a>
 8008bde:	f000 f9c3 	bl	8008f68 <__multadd>
 8008be2:	4639      	mov	r1, r7
 8008be4:	4680      	mov	r8, r0
 8008be6:	2300      	movs	r3, #0
 8008be8:	220a      	movs	r2, #10
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 f9bc 	bl	8008f68 <__multadd>
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	e7f0      	b.n	8008bd6 <_dtoa_r+0xb16>
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	9d00      	ldr	r5, [sp, #0]
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	f7ff f9d5 	bl	8007fac <quorem>
 8008c02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	f805 9b01 	strb.w	r9, [r5], #1
 8008c0c:	1aea      	subs	r2, r5, r3
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	4293      	cmp	r3, r2
 8008c12:	dd07      	ble.n	8008c24 <_dtoa_r+0xb64>
 8008c14:	4651      	mov	r1, sl
 8008c16:	2300      	movs	r3, #0
 8008c18:	220a      	movs	r2, #10
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f9a4 	bl	8008f68 <__multadd>
 8008c20:	4682      	mov	sl, r0
 8008c22:	e7ea      	b.n	8008bfa <_dtoa_r+0xb3a>
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfc8      	it	gt
 8008c2a:	461d      	movgt	r5, r3
 8008c2c:	9b00      	ldr	r3, [sp, #0]
 8008c2e:	bfd8      	it	le
 8008c30:	2501      	movle	r5, #1
 8008c32:	441d      	add	r5, r3
 8008c34:	f04f 0800 	mov.w	r8, #0
 8008c38:	4651      	mov	r1, sl
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fb8b 	bl	8009358 <__lshift>
 8008c42:	4631      	mov	r1, r6
 8008c44:	4682      	mov	sl, r0
 8008c46:	f000 fbf3 	bl	8009430 <__mcmp>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	dc96      	bgt.n	8008b7c <_dtoa_r+0xabc>
 8008c4e:	d102      	bne.n	8008c56 <_dtoa_r+0xb96>
 8008c50:	f019 0f01 	tst.w	r9, #1
 8008c54:	d192      	bne.n	8008b7c <_dtoa_r+0xabc>
 8008c56:	462b      	mov	r3, r5
 8008c58:	461d      	mov	r5, r3
 8008c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c5e:	2a30      	cmp	r2, #48	; 0x30
 8008c60:	d0fa      	beq.n	8008c58 <_dtoa_r+0xb98>
 8008c62:	e6dd      	b.n	8008a20 <_dtoa_r+0x960>
 8008c64:	9a00      	ldr	r2, [sp, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d189      	bne.n	8008b7e <_dtoa_r+0xabe>
 8008c6a:	f10b 0b01 	add.w	fp, fp, #1
 8008c6e:	2331      	movs	r3, #49	; 0x31
 8008c70:	e796      	b.n	8008ba0 <_dtoa_r+0xae0>
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <_dtoa_r+0xbdc>)
 8008c74:	f7ff ba99 	b.w	80081aa <_dtoa_r+0xea>
 8008c78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f47f aa6d 	bne.w	800815a <_dtoa_r+0x9a>
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <_dtoa_r+0xbe0>)
 8008c82:	f7ff ba92 	b.w	80081aa <_dtoa_r+0xea>
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dcb5      	bgt.n	8008bf8 <_dtoa_r+0xb38>
 8008c8c:	9b07      	ldr	r3, [sp, #28]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	f73f aeb1 	bgt.w	80089f6 <_dtoa_r+0x936>
 8008c94:	e7b0      	b.n	8008bf8 <_dtoa_r+0xb38>
 8008c96:	bf00      	nop
 8008c98:	0800c0e7 	.word	0x0800c0e7
 8008c9c:	0800c3d0 	.word	0x0800c3d0
 8008ca0:	0800c06b 	.word	0x0800c06b

08008ca4 <_free_r>:
 8008ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ca6:	2900      	cmp	r1, #0
 8008ca8:	d044      	beq.n	8008d34 <_free_r+0x90>
 8008caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cae:	9001      	str	r0, [sp, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008cb6:	bfb8      	it	lt
 8008cb8:	18e4      	addlt	r4, r4, r3
 8008cba:	f000 f8e7 	bl	8008e8c <__malloc_lock>
 8008cbe:	4a1e      	ldr	r2, [pc, #120]	; (8008d38 <_free_r+0x94>)
 8008cc0:	9801      	ldr	r0, [sp, #4]
 8008cc2:	6813      	ldr	r3, [r2, #0]
 8008cc4:	b933      	cbnz	r3, 8008cd4 <_free_r+0x30>
 8008cc6:	6063      	str	r3, [r4, #4]
 8008cc8:	6014      	str	r4, [r2, #0]
 8008cca:	b003      	add	sp, #12
 8008ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cd0:	f000 b8e2 	b.w	8008e98 <__malloc_unlock>
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d908      	bls.n	8008cea <_free_r+0x46>
 8008cd8:	6825      	ldr	r5, [r4, #0]
 8008cda:	1961      	adds	r1, r4, r5
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	bf01      	itttt	eq
 8008ce0:	6819      	ldreq	r1, [r3, #0]
 8008ce2:	685b      	ldreq	r3, [r3, #4]
 8008ce4:	1949      	addeq	r1, r1, r5
 8008ce6:	6021      	streq	r1, [r4, #0]
 8008ce8:	e7ed      	b.n	8008cc6 <_free_r+0x22>
 8008cea:	461a      	mov	r2, r3
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	b10b      	cbz	r3, 8008cf4 <_free_r+0x50>
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	d9fa      	bls.n	8008cea <_free_r+0x46>
 8008cf4:	6811      	ldr	r1, [r2, #0]
 8008cf6:	1855      	adds	r5, r2, r1
 8008cf8:	42a5      	cmp	r5, r4
 8008cfa:	d10b      	bne.n	8008d14 <_free_r+0x70>
 8008cfc:	6824      	ldr	r4, [r4, #0]
 8008cfe:	4421      	add	r1, r4
 8008d00:	1854      	adds	r4, r2, r1
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	6011      	str	r1, [r2, #0]
 8008d06:	d1e0      	bne.n	8008cca <_free_r+0x26>
 8008d08:	681c      	ldr	r4, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	6053      	str	r3, [r2, #4]
 8008d0e:	440c      	add	r4, r1
 8008d10:	6014      	str	r4, [r2, #0]
 8008d12:	e7da      	b.n	8008cca <_free_r+0x26>
 8008d14:	d902      	bls.n	8008d1c <_free_r+0x78>
 8008d16:	230c      	movs	r3, #12
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	e7d6      	b.n	8008cca <_free_r+0x26>
 8008d1c:	6825      	ldr	r5, [r4, #0]
 8008d1e:	1961      	adds	r1, r4, r5
 8008d20:	428b      	cmp	r3, r1
 8008d22:	bf04      	itt	eq
 8008d24:	6819      	ldreq	r1, [r3, #0]
 8008d26:	685b      	ldreq	r3, [r3, #4]
 8008d28:	6063      	str	r3, [r4, #4]
 8008d2a:	bf04      	itt	eq
 8008d2c:	1949      	addeq	r1, r1, r5
 8008d2e:	6021      	streq	r1, [r4, #0]
 8008d30:	6054      	str	r4, [r2, #4]
 8008d32:	e7ca      	b.n	8008cca <_free_r+0x26>
 8008d34:	b003      	add	sp, #12
 8008d36:	bd30      	pop	{r4, r5, pc}
 8008d38:	20004f5c 	.word	0x20004f5c

08008d3c <malloc>:
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <malloc+0xc>)
 8008d3e:	4601      	mov	r1, r0
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f000 b823 	b.w	8008d8c <_malloc_r>
 8008d46:	bf00      	nop
 8008d48:	2000006c 	.word	0x2000006c

08008d4c <sbrk_aligned>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	4e0e      	ldr	r6, [pc, #56]	; (8008d88 <sbrk_aligned+0x3c>)
 8008d50:	460c      	mov	r4, r1
 8008d52:	6831      	ldr	r1, [r6, #0]
 8008d54:	4605      	mov	r5, r0
 8008d56:	b911      	cbnz	r1, 8008d5e <sbrk_aligned+0x12>
 8008d58:	f002 f9ae 	bl	800b0b8 <_sbrk_r>
 8008d5c:	6030      	str	r0, [r6, #0]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4628      	mov	r0, r5
 8008d62:	f002 f9a9 	bl	800b0b8 <_sbrk_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d00a      	beq.n	8008d80 <sbrk_aligned+0x34>
 8008d6a:	1cc4      	adds	r4, r0, #3
 8008d6c:	f024 0403 	bic.w	r4, r4, #3
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d007      	beq.n	8008d84 <sbrk_aligned+0x38>
 8008d74:	1a21      	subs	r1, r4, r0
 8008d76:	4628      	mov	r0, r5
 8008d78:	f002 f99e 	bl	800b0b8 <_sbrk_r>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d101      	bne.n	8008d84 <sbrk_aligned+0x38>
 8008d80:	f04f 34ff 	mov.w	r4, #4294967295
 8008d84:	4620      	mov	r0, r4
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	20004f60 	.word	0x20004f60

08008d8c <_malloc_r>:
 8008d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d90:	1ccd      	adds	r5, r1, #3
 8008d92:	f025 0503 	bic.w	r5, r5, #3
 8008d96:	3508      	adds	r5, #8
 8008d98:	2d0c      	cmp	r5, #12
 8008d9a:	bf38      	it	cc
 8008d9c:	250c      	movcc	r5, #12
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	4607      	mov	r7, r0
 8008da2:	db01      	blt.n	8008da8 <_malloc_r+0x1c>
 8008da4:	42a9      	cmp	r1, r5
 8008da6:	d905      	bls.n	8008db4 <_malloc_r+0x28>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	2600      	movs	r6, #0
 8008dae:	4630      	mov	r0, r6
 8008db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e88 <_malloc_r+0xfc>
 8008db8:	f000 f868 	bl	8008e8c <__malloc_lock>
 8008dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc0:	461c      	mov	r4, r3
 8008dc2:	bb5c      	cbnz	r4, 8008e1c <_malloc_r+0x90>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff ffc0 	bl	8008d4c <sbrk_aligned>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	4604      	mov	r4, r0
 8008dd0:	d155      	bne.n	8008e7e <_malloc_r+0xf2>
 8008dd2:	f8d8 4000 	ldr.w	r4, [r8]
 8008dd6:	4626      	mov	r6, r4
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	d145      	bne.n	8008e68 <_malloc_r+0xdc>
 8008ddc:	2c00      	cmp	r4, #0
 8008dde:	d048      	beq.n	8008e72 <_malloc_r+0xe6>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	4631      	mov	r1, r6
 8008de4:	4638      	mov	r0, r7
 8008de6:	eb04 0903 	add.w	r9, r4, r3
 8008dea:	f002 f965 	bl	800b0b8 <_sbrk_r>
 8008dee:	4581      	cmp	r9, r0
 8008df0:	d13f      	bne.n	8008e72 <_malloc_r+0xe6>
 8008df2:	6821      	ldr	r1, [r4, #0]
 8008df4:	1a6d      	subs	r5, r5, r1
 8008df6:	4629      	mov	r1, r5
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff ffa7 	bl	8008d4c <sbrk_aligned>
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d037      	beq.n	8008e72 <_malloc_r+0xe6>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	442b      	add	r3, r5
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	f8d8 3000 	ldr.w	r3, [r8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d038      	beq.n	8008e82 <_malloc_r+0xf6>
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	42a2      	cmp	r2, r4
 8008e14:	d12b      	bne.n	8008e6e <_malloc_r+0xe2>
 8008e16:	2200      	movs	r2, #0
 8008e18:	605a      	str	r2, [r3, #4]
 8008e1a:	e00f      	b.n	8008e3c <_malloc_r+0xb0>
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	1b52      	subs	r2, r2, r5
 8008e20:	d41f      	bmi.n	8008e62 <_malloc_r+0xd6>
 8008e22:	2a0b      	cmp	r2, #11
 8008e24:	d917      	bls.n	8008e56 <_malloc_r+0xca>
 8008e26:	1961      	adds	r1, r4, r5
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	6025      	str	r5, [r4, #0]
 8008e2c:	bf18      	it	ne
 8008e2e:	6059      	strne	r1, [r3, #4]
 8008e30:	6863      	ldr	r3, [r4, #4]
 8008e32:	bf08      	it	eq
 8008e34:	f8c8 1000 	streq.w	r1, [r8]
 8008e38:	5162      	str	r2, [r4, r5]
 8008e3a:	604b      	str	r3, [r1, #4]
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f104 060b 	add.w	r6, r4, #11
 8008e42:	f000 f829 	bl	8008e98 <__malloc_unlock>
 8008e46:	f026 0607 	bic.w	r6, r6, #7
 8008e4a:	1d23      	adds	r3, r4, #4
 8008e4c:	1af2      	subs	r2, r6, r3
 8008e4e:	d0ae      	beq.n	8008dae <_malloc_r+0x22>
 8008e50:	1b9b      	subs	r3, r3, r6
 8008e52:	50a3      	str	r3, [r4, r2]
 8008e54:	e7ab      	b.n	8008dae <_malloc_r+0x22>
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	6862      	ldr	r2, [r4, #4]
 8008e5a:	d1dd      	bne.n	8008e18 <_malloc_r+0x8c>
 8008e5c:	f8c8 2000 	str.w	r2, [r8]
 8008e60:	e7ec      	b.n	8008e3c <_malloc_r+0xb0>
 8008e62:	4623      	mov	r3, r4
 8008e64:	6864      	ldr	r4, [r4, #4]
 8008e66:	e7ac      	b.n	8008dc2 <_malloc_r+0x36>
 8008e68:	4634      	mov	r4, r6
 8008e6a:	6876      	ldr	r6, [r6, #4]
 8008e6c:	e7b4      	b.n	8008dd8 <_malloc_r+0x4c>
 8008e6e:	4613      	mov	r3, r2
 8008e70:	e7cc      	b.n	8008e0c <_malloc_r+0x80>
 8008e72:	230c      	movs	r3, #12
 8008e74:	603b      	str	r3, [r7, #0]
 8008e76:	4638      	mov	r0, r7
 8008e78:	f000 f80e 	bl	8008e98 <__malloc_unlock>
 8008e7c:	e797      	b.n	8008dae <_malloc_r+0x22>
 8008e7e:	6025      	str	r5, [r4, #0]
 8008e80:	e7dc      	b.n	8008e3c <_malloc_r+0xb0>
 8008e82:	605b      	str	r3, [r3, #4]
 8008e84:	deff      	udf	#255	; 0xff
 8008e86:	bf00      	nop
 8008e88:	20004f5c 	.word	0x20004f5c

08008e8c <__malloc_lock>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	; (8008e94 <__malloc_lock+0x8>)
 8008e8e:	f7ff b877 	b.w	8007f80 <__retarget_lock_acquire_recursive>
 8008e92:	bf00      	nop
 8008e94:	20004f58 	.word	0x20004f58

08008e98 <__malloc_unlock>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__malloc_unlock+0x8>)
 8008e9a:	f7ff b872 	b.w	8007f82 <__retarget_lock_release_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	20004f58 	.word	0x20004f58

08008ea4 <_Balloc>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	69c6      	ldr	r6, [r0, #28]
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	460d      	mov	r5, r1
 8008eac:	b976      	cbnz	r6, 8008ecc <_Balloc+0x28>
 8008eae:	2010      	movs	r0, #16
 8008eb0:	f7ff ff44 	bl	8008d3c <malloc>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	61e0      	str	r0, [r4, #28]
 8008eb8:	b920      	cbnz	r0, 8008ec4 <_Balloc+0x20>
 8008eba:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <_Balloc+0x78>)
 8008ebc:	4818      	ldr	r0, [pc, #96]	; (8008f20 <_Balloc+0x7c>)
 8008ebe:	216b      	movs	r1, #107	; 0x6b
 8008ec0:	f002 f912 	bl	800b0e8 <__assert_func>
 8008ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ec8:	6006      	str	r6, [r0, #0]
 8008eca:	60c6      	str	r6, [r0, #12]
 8008ecc:	69e6      	ldr	r6, [r4, #28]
 8008ece:	68f3      	ldr	r3, [r6, #12]
 8008ed0:	b183      	cbz	r3, 8008ef4 <_Balloc+0x50>
 8008ed2:	69e3      	ldr	r3, [r4, #28]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eda:	b9b8      	cbnz	r0, 8008f0c <_Balloc+0x68>
 8008edc:	2101      	movs	r1, #1
 8008ede:	fa01 f605 	lsl.w	r6, r1, r5
 8008ee2:	1d72      	adds	r2, r6, #5
 8008ee4:	0092      	lsls	r2, r2, #2
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f002 f91c 	bl	800b124 <_calloc_r>
 8008eec:	b160      	cbz	r0, 8008f08 <_Balloc+0x64>
 8008eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ef2:	e00e      	b.n	8008f12 <_Balloc+0x6e>
 8008ef4:	2221      	movs	r2, #33	; 0x21
 8008ef6:	2104      	movs	r1, #4
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f002 f913 	bl	800b124 <_calloc_r>
 8008efe:	69e3      	ldr	r3, [r4, #28]
 8008f00:	60f0      	str	r0, [r6, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e4      	bne.n	8008ed2 <_Balloc+0x2e>
 8008f08:	2000      	movs	r0, #0
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	6802      	ldr	r2, [r0, #0]
 8008f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f12:	2300      	movs	r3, #0
 8008f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f18:	e7f7      	b.n	8008f0a <_Balloc+0x66>
 8008f1a:	bf00      	nop
 8008f1c:	0800c078 	.word	0x0800c078
 8008f20:	0800c0f8 	.word	0x0800c0f8

08008f24 <_Bfree>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	69c6      	ldr	r6, [r0, #28]
 8008f28:	4605      	mov	r5, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	b976      	cbnz	r6, 8008f4c <_Bfree+0x28>
 8008f2e:	2010      	movs	r0, #16
 8008f30:	f7ff ff04 	bl	8008d3c <malloc>
 8008f34:	4602      	mov	r2, r0
 8008f36:	61e8      	str	r0, [r5, #28]
 8008f38:	b920      	cbnz	r0, 8008f44 <_Bfree+0x20>
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <_Bfree+0x3c>)
 8008f3c:	4809      	ldr	r0, [pc, #36]	; (8008f64 <_Bfree+0x40>)
 8008f3e:	218f      	movs	r1, #143	; 0x8f
 8008f40:	f002 f8d2 	bl	800b0e8 <__assert_func>
 8008f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f48:	6006      	str	r6, [r0, #0]
 8008f4a:	60c6      	str	r6, [r0, #12]
 8008f4c:	b13c      	cbz	r4, 8008f5e <_Bfree+0x3a>
 8008f4e:	69eb      	ldr	r3, [r5, #28]
 8008f50:	6862      	ldr	r2, [r4, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f58:	6021      	str	r1, [r4, #0]
 8008f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	0800c078 	.word	0x0800c078
 8008f64:	0800c0f8 	.word	0x0800c0f8

08008f68 <__multadd>:
 8008f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6c:	690d      	ldr	r5, [r1, #16]
 8008f6e:	4607      	mov	r7, r0
 8008f70:	460c      	mov	r4, r1
 8008f72:	461e      	mov	r6, r3
 8008f74:	f101 0c14 	add.w	ip, r1, #20
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f8dc 3000 	ldr.w	r3, [ip]
 8008f7e:	b299      	uxth	r1, r3
 8008f80:	fb02 6101 	mla	r1, r2, r1, r6
 8008f84:	0c1e      	lsrs	r6, r3, #16
 8008f86:	0c0b      	lsrs	r3, r1, #16
 8008f88:	fb02 3306 	mla	r3, r2, r6, r3
 8008f8c:	b289      	uxth	r1, r1
 8008f8e:	3001      	adds	r0, #1
 8008f90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f94:	4285      	cmp	r5, r0
 8008f96:	f84c 1b04 	str.w	r1, [ip], #4
 8008f9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f9e:	dcec      	bgt.n	8008f7a <__multadd+0x12>
 8008fa0:	b30e      	cbz	r6, 8008fe6 <__multadd+0x7e>
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	42ab      	cmp	r3, r5
 8008fa6:	dc19      	bgt.n	8008fdc <__multadd+0x74>
 8008fa8:	6861      	ldr	r1, [r4, #4]
 8008faa:	4638      	mov	r0, r7
 8008fac:	3101      	adds	r1, #1
 8008fae:	f7ff ff79 	bl	8008ea4 <_Balloc>
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	b928      	cbnz	r0, 8008fc2 <__multadd+0x5a>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <__multadd+0x84>)
 8008fba:	480d      	ldr	r0, [pc, #52]	; (8008ff0 <__multadd+0x88>)
 8008fbc:	21ba      	movs	r1, #186	; 0xba
 8008fbe:	f002 f893 	bl	800b0e8 <__assert_func>
 8008fc2:	6922      	ldr	r2, [r4, #16]
 8008fc4:	3202      	adds	r2, #2
 8008fc6:	f104 010c 	add.w	r1, r4, #12
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	300c      	adds	r0, #12
 8008fce:	f7fe ffd9 	bl	8007f84 <memcpy>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff ffa5 	bl	8008f24 <_Bfree>
 8008fda:	4644      	mov	r4, r8
 8008fdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fe0:	3501      	adds	r5, #1
 8008fe2:	615e      	str	r6, [r3, #20]
 8008fe4:	6125      	str	r5, [r4, #16]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fec:	0800c0e7 	.word	0x0800c0e7
 8008ff0:	0800c0f8 	.word	0x0800c0f8

08008ff4 <__s2b>:
 8008ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	4615      	mov	r5, r2
 8008ffc:	461f      	mov	r7, r3
 8008ffe:	2209      	movs	r2, #9
 8009000:	3308      	adds	r3, #8
 8009002:	4606      	mov	r6, r0
 8009004:	fb93 f3f2 	sdiv	r3, r3, r2
 8009008:	2100      	movs	r1, #0
 800900a:	2201      	movs	r2, #1
 800900c:	429a      	cmp	r2, r3
 800900e:	db09      	blt.n	8009024 <__s2b+0x30>
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ff47 	bl	8008ea4 <_Balloc>
 8009016:	b940      	cbnz	r0, 800902a <__s2b+0x36>
 8009018:	4602      	mov	r2, r0
 800901a:	4b19      	ldr	r3, [pc, #100]	; (8009080 <__s2b+0x8c>)
 800901c:	4819      	ldr	r0, [pc, #100]	; (8009084 <__s2b+0x90>)
 800901e:	21d3      	movs	r1, #211	; 0xd3
 8009020:	f002 f862 	bl	800b0e8 <__assert_func>
 8009024:	0052      	lsls	r2, r2, #1
 8009026:	3101      	adds	r1, #1
 8009028:	e7f0      	b.n	800900c <__s2b+0x18>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	6143      	str	r3, [r0, #20]
 800902e:	2d09      	cmp	r5, #9
 8009030:	f04f 0301 	mov.w	r3, #1
 8009034:	6103      	str	r3, [r0, #16]
 8009036:	dd16      	ble.n	8009066 <__s2b+0x72>
 8009038:	f104 0909 	add.w	r9, r4, #9
 800903c:	46c8      	mov	r8, r9
 800903e:	442c      	add	r4, r5
 8009040:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009044:	4601      	mov	r1, r0
 8009046:	3b30      	subs	r3, #48	; 0x30
 8009048:	220a      	movs	r2, #10
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ff8c 	bl	8008f68 <__multadd>
 8009050:	45a0      	cmp	r8, r4
 8009052:	d1f5      	bne.n	8009040 <__s2b+0x4c>
 8009054:	f1a5 0408 	sub.w	r4, r5, #8
 8009058:	444c      	add	r4, r9
 800905a:	1b2d      	subs	r5, r5, r4
 800905c:	1963      	adds	r3, r4, r5
 800905e:	42bb      	cmp	r3, r7
 8009060:	db04      	blt.n	800906c <__s2b+0x78>
 8009062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009066:	340a      	adds	r4, #10
 8009068:	2509      	movs	r5, #9
 800906a:	e7f6      	b.n	800905a <__s2b+0x66>
 800906c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009070:	4601      	mov	r1, r0
 8009072:	3b30      	subs	r3, #48	; 0x30
 8009074:	220a      	movs	r2, #10
 8009076:	4630      	mov	r0, r6
 8009078:	f7ff ff76 	bl	8008f68 <__multadd>
 800907c:	e7ee      	b.n	800905c <__s2b+0x68>
 800907e:	bf00      	nop
 8009080:	0800c0e7 	.word	0x0800c0e7
 8009084:	0800c0f8 	.word	0x0800c0f8

08009088 <__hi0bits>:
 8009088:	0c03      	lsrs	r3, r0, #16
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	b9d3      	cbnz	r3, 80090c4 <__hi0bits+0x3c>
 800908e:	0400      	lsls	r0, r0, #16
 8009090:	2310      	movs	r3, #16
 8009092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009096:	bf04      	itt	eq
 8009098:	0200      	lsleq	r0, r0, #8
 800909a:	3308      	addeq	r3, #8
 800909c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090a0:	bf04      	itt	eq
 80090a2:	0100      	lsleq	r0, r0, #4
 80090a4:	3304      	addeq	r3, #4
 80090a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090aa:	bf04      	itt	eq
 80090ac:	0080      	lsleq	r0, r0, #2
 80090ae:	3302      	addeq	r3, #2
 80090b0:	2800      	cmp	r0, #0
 80090b2:	db05      	blt.n	80090c0 <__hi0bits+0x38>
 80090b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090b8:	f103 0301 	add.w	r3, r3, #1
 80090bc:	bf08      	it	eq
 80090be:	2320      	moveq	r3, #32
 80090c0:	4618      	mov	r0, r3
 80090c2:	4770      	bx	lr
 80090c4:	2300      	movs	r3, #0
 80090c6:	e7e4      	b.n	8009092 <__hi0bits+0xa>

080090c8 <__lo0bits>:
 80090c8:	6803      	ldr	r3, [r0, #0]
 80090ca:	f013 0207 	ands.w	r2, r3, #7
 80090ce:	d00c      	beq.n	80090ea <__lo0bits+0x22>
 80090d0:	07d9      	lsls	r1, r3, #31
 80090d2:	d422      	bmi.n	800911a <__lo0bits+0x52>
 80090d4:	079a      	lsls	r2, r3, #30
 80090d6:	bf49      	itett	mi
 80090d8:	085b      	lsrmi	r3, r3, #1
 80090da:	089b      	lsrpl	r3, r3, #2
 80090dc:	6003      	strmi	r3, [r0, #0]
 80090de:	2201      	movmi	r2, #1
 80090e0:	bf5c      	itt	pl
 80090e2:	6003      	strpl	r3, [r0, #0]
 80090e4:	2202      	movpl	r2, #2
 80090e6:	4610      	mov	r0, r2
 80090e8:	4770      	bx	lr
 80090ea:	b299      	uxth	r1, r3
 80090ec:	b909      	cbnz	r1, 80090f2 <__lo0bits+0x2a>
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	2210      	movs	r2, #16
 80090f2:	b2d9      	uxtb	r1, r3
 80090f4:	b909      	cbnz	r1, 80090fa <__lo0bits+0x32>
 80090f6:	3208      	adds	r2, #8
 80090f8:	0a1b      	lsrs	r3, r3, #8
 80090fa:	0719      	lsls	r1, r3, #28
 80090fc:	bf04      	itt	eq
 80090fe:	091b      	lsreq	r3, r3, #4
 8009100:	3204      	addeq	r2, #4
 8009102:	0799      	lsls	r1, r3, #30
 8009104:	bf04      	itt	eq
 8009106:	089b      	lsreq	r3, r3, #2
 8009108:	3202      	addeq	r2, #2
 800910a:	07d9      	lsls	r1, r3, #31
 800910c:	d403      	bmi.n	8009116 <__lo0bits+0x4e>
 800910e:	085b      	lsrs	r3, r3, #1
 8009110:	f102 0201 	add.w	r2, r2, #1
 8009114:	d003      	beq.n	800911e <__lo0bits+0x56>
 8009116:	6003      	str	r3, [r0, #0]
 8009118:	e7e5      	b.n	80090e6 <__lo0bits+0x1e>
 800911a:	2200      	movs	r2, #0
 800911c:	e7e3      	b.n	80090e6 <__lo0bits+0x1e>
 800911e:	2220      	movs	r2, #32
 8009120:	e7e1      	b.n	80090e6 <__lo0bits+0x1e>
	...

08009124 <__i2b>:
 8009124:	b510      	push	{r4, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	2101      	movs	r1, #1
 800912a:	f7ff febb 	bl	8008ea4 <_Balloc>
 800912e:	4602      	mov	r2, r0
 8009130:	b928      	cbnz	r0, 800913e <__i2b+0x1a>
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <__i2b+0x24>)
 8009134:	4805      	ldr	r0, [pc, #20]	; (800914c <__i2b+0x28>)
 8009136:	f240 1145 	movw	r1, #325	; 0x145
 800913a:	f001 ffd5 	bl	800b0e8 <__assert_func>
 800913e:	2301      	movs	r3, #1
 8009140:	6144      	str	r4, [r0, #20]
 8009142:	6103      	str	r3, [r0, #16]
 8009144:	bd10      	pop	{r4, pc}
 8009146:	bf00      	nop
 8009148:	0800c0e7 	.word	0x0800c0e7
 800914c:	0800c0f8 	.word	0x0800c0f8

08009150 <__multiply>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	4691      	mov	r9, r2
 8009156:	690a      	ldr	r2, [r1, #16]
 8009158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800915c:	429a      	cmp	r2, r3
 800915e:	bfb8      	it	lt
 8009160:	460b      	movlt	r3, r1
 8009162:	460c      	mov	r4, r1
 8009164:	bfbc      	itt	lt
 8009166:	464c      	movlt	r4, r9
 8009168:	4699      	movlt	r9, r3
 800916a:	6927      	ldr	r7, [r4, #16]
 800916c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009170:	68a3      	ldr	r3, [r4, #8]
 8009172:	6861      	ldr	r1, [r4, #4]
 8009174:	eb07 060a 	add.w	r6, r7, sl
 8009178:	42b3      	cmp	r3, r6
 800917a:	b085      	sub	sp, #20
 800917c:	bfb8      	it	lt
 800917e:	3101      	addlt	r1, #1
 8009180:	f7ff fe90 	bl	8008ea4 <_Balloc>
 8009184:	b930      	cbnz	r0, 8009194 <__multiply+0x44>
 8009186:	4602      	mov	r2, r0
 8009188:	4b44      	ldr	r3, [pc, #272]	; (800929c <__multiply+0x14c>)
 800918a:	4845      	ldr	r0, [pc, #276]	; (80092a0 <__multiply+0x150>)
 800918c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009190:	f001 ffaa 	bl	800b0e8 <__assert_func>
 8009194:	f100 0514 	add.w	r5, r0, #20
 8009198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800919c:	462b      	mov	r3, r5
 800919e:	2200      	movs	r2, #0
 80091a0:	4543      	cmp	r3, r8
 80091a2:	d321      	bcc.n	80091e8 <__multiply+0x98>
 80091a4:	f104 0314 	add.w	r3, r4, #20
 80091a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091ac:	f109 0314 	add.w	r3, r9, #20
 80091b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091b4:	9202      	str	r2, [sp, #8]
 80091b6:	1b3a      	subs	r2, r7, r4
 80091b8:	3a15      	subs	r2, #21
 80091ba:	f022 0203 	bic.w	r2, r2, #3
 80091be:	3204      	adds	r2, #4
 80091c0:	f104 0115 	add.w	r1, r4, #21
 80091c4:	428f      	cmp	r7, r1
 80091c6:	bf38      	it	cc
 80091c8:	2204      	movcc	r2, #4
 80091ca:	9201      	str	r2, [sp, #4]
 80091cc:	9a02      	ldr	r2, [sp, #8]
 80091ce:	9303      	str	r3, [sp, #12]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d80c      	bhi.n	80091ee <__multiply+0x9e>
 80091d4:	2e00      	cmp	r6, #0
 80091d6:	dd03      	ble.n	80091e0 <__multiply+0x90>
 80091d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d05b      	beq.n	8009298 <__multiply+0x148>
 80091e0:	6106      	str	r6, [r0, #16]
 80091e2:	b005      	add	sp, #20
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e8:	f843 2b04 	str.w	r2, [r3], #4
 80091ec:	e7d8      	b.n	80091a0 <__multiply+0x50>
 80091ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80091f2:	f1ba 0f00 	cmp.w	sl, #0
 80091f6:	d024      	beq.n	8009242 <__multiply+0xf2>
 80091f8:	f104 0e14 	add.w	lr, r4, #20
 80091fc:	46a9      	mov	r9, r5
 80091fe:	f04f 0c00 	mov.w	ip, #0
 8009202:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009206:	f8d9 1000 	ldr.w	r1, [r9]
 800920a:	fa1f fb82 	uxth.w	fp, r2
 800920e:	b289      	uxth	r1, r1
 8009210:	fb0a 110b 	mla	r1, sl, fp, r1
 8009214:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009218:	f8d9 2000 	ldr.w	r2, [r9]
 800921c:	4461      	add	r1, ip
 800921e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009222:	fb0a c20b 	mla	r2, sl, fp, ip
 8009226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800922a:	b289      	uxth	r1, r1
 800922c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009230:	4577      	cmp	r7, lr
 8009232:	f849 1b04 	str.w	r1, [r9], #4
 8009236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800923a:	d8e2      	bhi.n	8009202 <__multiply+0xb2>
 800923c:	9a01      	ldr	r2, [sp, #4]
 800923e:	f845 c002 	str.w	ip, [r5, r2]
 8009242:	9a03      	ldr	r2, [sp, #12]
 8009244:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009248:	3304      	adds	r3, #4
 800924a:	f1b9 0f00 	cmp.w	r9, #0
 800924e:	d021      	beq.n	8009294 <__multiply+0x144>
 8009250:	6829      	ldr	r1, [r5, #0]
 8009252:	f104 0c14 	add.w	ip, r4, #20
 8009256:	46ae      	mov	lr, r5
 8009258:	f04f 0a00 	mov.w	sl, #0
 800925c:	f8bc b000 	ldrh.w	fp, [ip]
 8009260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009264:	fb09 220b 	mla	r2, r9, fp, r2
 8009268:	4452      	add	r2, sl
 800926a:	b289      	uxth	r1, r1
 800926c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009270:	f84e 1b04 	str.w	r1, [lr], #4
 8009274:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800927c:	f8be 1000 	ldrh.w	r1, [lr]
 8009280:	fb09 110a 	mla	r1, r9, sl, r1
 8009284:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009288:	4567      	cmp	r7, ip
 800928a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800928e:	d8e5      	bhi.n	800925c <__multiply+0x10c>
 8009290:	9a01      	ldr	r2, [sp, #4]
 8009292:	50a9      	str	r1, [r5, r2]
 8009294:	3504      	adds	r5, #4
 8009296:	e799      	b.n	80091cc <__multiply+0x7c>
 8009298:	3e01      	subs	r6, #1
 800929a:	e79b      	b.n	80091d4 <__multiply+0x84>
 800929c:	0800c0e7 	.word	0x0800c0e7
 80092a0:	0800c0f8 	.word	0x0800c0f8

080092a4 <__pow5mult>:
 80092a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a8:	4615      	mov	r5, r2
 80092aa:	f012 0203 	ands.w	r2, r2, #3
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	d007      	beq.n	80092c4 <__pow5mult+0x20>
 80092b4:	4c25      	ldr	r4, [pc, #148]	; (800934c <__pow5mult+0xa8>)
 80092b6:	3a01      	subs	r2, #1
 80092b8:	2300      	movs	r3, #0
 80092ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092be:	f7ff fe53 	bl	8008f68 <__multadd>
 80092c2:	4607      	mov	r7, r0
 80092c4:	10ad      	asrs	r5, r5, #2
 80092c6:	d03d      	beq.n	8009344 <__pow5mult+0xa0>
 80092c8:	69f4      	ldr	r4, [r6, #28]
 80092ca:	b97c      	cbnz	r4, 80092ec <__pow5mult+0x48>
 80092cc:	2010      	movs	r0, #16
 80092ce:	f7ff fd35 	bl	8008d3c <malloc>
 80092d2:	4602      	mov	r2, r0
 80092d4:	61f0      	str	r0, [r6, #28]
 80092d6:	b928      	cbnz	r0, 80092e4 <__pow5mult+0x40>
 80092d8:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <__pow5mult+0xac>)
 80092da:	481e      	ldr	r0, [pc, #120]	; (8009354 <__pow5mult+0xb0>)
 80092dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092e0:	f001 ff02 	bl	800b0e8 <__assert_func>
 80092e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092e8:	6004      	str	r4, [r0, #0]
 80092ea:	60c4      	str	r4, [r0, #12]
 80092ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092f4:	b94c      	cbnz	r4, 800930a <__pow5mult+0x66>
 80092f6:	f240 2171 	movw	r1, #625	; 0x271
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7ff ff12 	bl	8009124 <__i2b>
 8009300:	2300      	movs	r3, #0
 8009302:	f8c8 0008 	str.w	r0, [r8, #8]
 8009306:	4604      	mov	r4, r0
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	f04f 0900 	mov.w	r9, #0
 800930e:	07eb      	lsls	r3, r5, #31
 8009310:	d50a      	bpl.n	8009328 <__pow5mult+0x84>
 8009312:	4639      	mov	r1, r7
 8009314:	4622      	mov	r2, r4
 8009316:	4630      	mov	r0, r6
 8009318:	f7ff ff1a 	bl	8009150 <__multiply>
 800931c:	4639      	mov	r1, r7
 800931e:	4680      	mov	r8, r0
 8009320:	4630      	mov	r0, r6
 8009322:	f7ff fdff 	bl	8008f24 <_Bfree>
 8009326:	4647      	mov	r7, r8
 8009328:	106d      	asrs	r5, r5, #1
 800932a:	d00b      	beq.n	8009344 <__pow5mult+0xa0>
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	b938      	cbnz	r0, 8009340 <__pow5mult+0x9c>
 8009330:	4622      	mov	r2, r4
 8009332:	4621      	mov	r1, r4
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff ff0b 	bl	8009150 <__multiply>
 800933a:	6020      	str	r0, [r4, #0]
 800933c:	f8c0 9000 	str.w	r9, [r0]
 8009340:	4604      	mov	r4, r0
 8009342:	e7e4      	b.n	800930e <__pow5mult+0x6a>
 8009344:	4638      	mov	r0, r7
 8009346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800934a:	bf00      	nop
 800934c:	0800c248 	.word	0x0800c248
 8009350:	0800c078 	.word	0x0800c078
 8009354:	0800c0f8 	.word	0x0800c0f8

08009358 <__lshift>:
 8009358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800935c:	460c      	mov	r4, r1
 800935e:	6849      	ldr	r1, [r1, #4]
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	4607      	mov	r7, r0
 800936a:	4691      	mov	r9, r2
 800936c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009370:	f108 0601 	add.w	r6, r8, #1
 8009374:	42b3      	cmp	r3, r6
 8009376:	db0b      	blt.n	8009390 <__lshift+0x38>
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff fd93 	bl	8008ea4 <_Balloc>
 800937e:	4605      	mov	r5, r0
 8009380:	b948      	cbnz	r0, 8009396 <__lshift+0x3e>
 8009382:	4602      	mov	r2, r0
 8009384:	4b28      	ldr	r3, [pc, #160]	; (8009428 <__lshift+0xd0>)
 8009386:	4829      	ldr	r0, [pc, #164]	; (800942c <__lshift+0xd4>)
 8009388:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800938c:	f001 feac 	bl	800b0e8 <__assert_func>
 8009390:	3101      	adds	r1, #1
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	e7ee      	b.n	8009374 <__lshift+0x1c>
 8009396:	2300      	movs	r3, #0
 8009398:	f100 0114 	add.w	r1, r0, #20
 800939c:	f100 0210 	add.w	r2, r0, #16
 80093a0:	4618      	mov	r0, r3
 80093a2:	4553      	cmp	r3, sl
 80093a4:	db33      	blt.n	800940e <__lshift+0xb6>
 80093a6:	6920      	ldr	r0, [r4, #16]
 80093a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093ac:	f104 0314 	add.w	r3, r4, #20
 80093b0:	f019 091f 	ands.w	r9, r9, #31
 80093b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093bc:	d02b      	beq.n	8009416 <__lshift+0xbe>
 80093be:	f1c9 0e20 	rsb	lr, r9, #32
 80093c2:	468a      	mov	sl, r1
 80093c4:	2200      	movs	r2, #0
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	fa00 f009 	lsl.w	r0, r0, r9
 80093cc:	4310      	orrs	r0, r2
 80093ce:	f84a 0b04 	str.w	r0, [sl], #4
 80093d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d6:	459c      	cmp	ip, r3
 80093d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093dc:	d8f3      	bhi.n	80093c6 <__lshift+0x6e>
 80093de:	ebac 0304 	sub.w	r3, ip, r4
 80093e2:	3b15      	subs	r3, #21
 80093e4:	f023 0303 	bic.w	r3, r3, #3
 80093e8:	3304      	adds	r3, #4
 80093ea:	f104 0015 	add.w	r0, r4, #21
 80093ee:	4584      	cmp	ip, r0
 80093f0:	bf38      	it	cc
 80093f2:	2304      	movcc	r3, #4
 80093f4:	50ca      	str	r2, [r1, r3]
 80093f6:	b10a      	cbz	r2, 80093fc <__lshift+0xa4>
 80093f8:	f108 0602 	add.w	r6, r8, #2
 80093fc:	3e01      	subs	r6, #1
 80093fe:	4638      	mov	r0, r7
 8009400:	612e      	str	r6, [r5, #16]
 8009402:	4621      	mov	r1, r4
 8009404:	f7ff fd8e 	bl	8008f24 <_Bfree>
 8009408:	4628      	mov	r0, r5
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009412:	3301      	adds	r3, #1
 8009414:	e7c5      	b.n	80093a2 <__lshift+0x4a>
 8009416:	3904      	subs	r1, #4
 8009418:	f853 2b04 	ldr.w	r2, [r3], #4
 800941c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009420:	459c      	cmp	ip, r3
 8009422:	d8f9      	bhi.n	8009418 <__lshift+0xc0>
 8009424:	e7ea      	b.n	80093fc <__lshift+0xa4>
 8009426:	bf00      	nop
 8009428:	0800c0e7 	.word	0x0800c0e7
 800942c:	0800c0f8 	.word	0x0800c0f8

08009430 <__mcmp>:
 8009430:	b530      	push	{r4, r5, lr}
 8009432:	6902      	ldr	r2, [r0, #16]
 8009434:	690c      	ldr	r4, [r1, #16]
 8009436:	1b12      	subs	r2, r2, r4
 8009438:	d10e      	bne.n	8009458 <__mcmp+0x28>
 800943a:	f100 0314 	add.w	r3, r0, #20
 800943e:	3114      	adds	r1, #20
 8009440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800944c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009450:	42a5      	cmp	r5, r4
 8009452:	d003      	beq.n	800945c <__mcmp+0x2c>
 8009454:	d305      	bcc.n	8009462 <__mcmp+0x32>
 8009456:	2201      	movs	r2, #1
 8009458:	4610      	mov	r0, r2
 800945a:	bd30      	pop	{r4, r5, pc}
 800945c:	4283      	cmp	r3, r0
 800945e:	d3f3      	bcc.n	8009448 <__mcmp+0x18>
 8009460:	e7fa      	b.n	8009458 <__mcmp+0x28>
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	e7f7      	b.n	8009458 <__mcmp+0x28>

08009468 <__mdiff>:
 8009468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	460c      	mov	r4, r1
 800946e:	4606      	mov	r6, r0
 8009470:	4611      	mov	r1, r2
 8009472:	4620      	mov	r0, r4
 8009474:	4690      	mov	r8, r2
 8009476:	f7ff ffdb 	bl	8009430 <__mcmp>
 800947a:	1e05      	subs	r5, r0, #0
 800947c:	d110      	bne.n	80094a0 <__mdiff+0x38>
 800947e:	4629      	mov	r1, r5
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff fd0f 	bl	8008ea4 <_Balloc>
 8009486:	b930      	cbnz	r0, 8009496 <__mdiff+0x2e>
 8009488:	4b3a      	ldr	r3, [pc, #232]	; (8009574 <__mdiff+0x10c>)
 800948a:	4602      	mov	r2, r0
 800948c:	f240 2137 	movw	r1, #567	; 0x237
 8009490:	4839      	ldr	r0, [pc, #228]	; (8009578 <__mdiff+0x110>)
 8009492:	f001 fe29 	bl	800b0e8 <__assert_func>
 8009496:	2301      	movs	r3, #1
 8009498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800949c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	bfa4      	itt	ge
 80094a2:	4643      	movge	r3, r8
 80094a4:	46a0      	movge	r8, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094ac:	bfa6      	itte	ge
 80094ae:	461c      	movge	r4, r3
 80094b0:	2500      	movge	r5, #0
 80094b2:	2501      	movlt	r5, #1
 80094b4:	f7ff fcf6 	bl	8008ea4 <_Balloc>
 80094b8:	b920      	cbnz	r0, 80094c4 <__mdiff+0x5c>
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <__mdiff+0x10c>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f240 2145 	movw	r1, #581	; 0x245
 80094c2:	e7e5      	b.n	8009490 <__mdiff+0x28>
 80094c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094c8:	6926      	ldr	r6, [r4, #16]
 80094ca:	60c5      	str	r5, [r0, #12]
 80094cc:	f104 0914 	add.w	r9, r4, #20
 80094d0:	f108 0514 	add.w	r5, r8, #20
 80094d4:	f100 0e14 	add.w	lr, r0, #20
 80094d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094e0:	f108 0210 	add.w	r2, r8, #16
 80094e4:	46f2      	mov	sl, lr
 80094e6:	2100      	movs	r1, #0
 80094e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094f0:	fa11 f88b 	uxtah	r8, r1, fp
 80094f4:	b299      	uxth	r1, r3
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	eba8 0801 	sub.w	r8, r8, r1
 80094fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009500:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009504:	fa1f f888 	uxth.w	r8, r8
 8009508:	1419      	asrs	r1, r3, #16
 800950a:	454e      	cmp	r6, r9
 800950c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009510:	f84a 3b04 	str.w	r3, [sl], #4
 8009514:	d8e8      	bhi.n	80094e8 <__mdiff+0x80>
 8009516:	1b33      	subs	r3, r6, r4
 8009518:	3b15      	subs	r3, #21
 800951a:	f023 0303 	bic.w	r3, r3, #3
 800951e:	3304      	adds	r3, #4
 8009520:	3415      	adds	r4, #21
 8009522:	42a6      	cmp	r6, r4
 8009524:	bf38      	it	cc
 8009526:	2304      	movcc	r3, #4
 8009528:	441d      	add	r5, r3
 800952a:	4473      	add	r3, lr
 800952c:	469e      	mov	lr, r3
 800952e:	462e      	mov	r6, r5
 8009530:	4566      	cmp	r6, ip
 8009532:	d30e      	bcc.n	8009552 <__mdiff+0xea>
 8009534:	f10c 0203 	add.w	r2, ip, #3
 8009538:	1b52      	subs	r2, r2, r5
 800953a:	f022 0203 	bic.w	r2, r2, #3
 800953e:	3d03      	subs	r5, #3
 8009540:	45ac      	cmp	ip, r5
 8009542:	bf38      	it	cc
 8009544:	2200      	movcc	r2, #0
 8009546:	4413      	add	r3, r2
 8009548:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800954c:	b17a      	cbz	r2, 800956e <__mdiff+0x106>
 800954e:	6107      	str	r7, [r0, #16]
 8009550:	e7a4      	b.n	800949c <__mdiff+0x34>
 8009552:	f856 8b04 	ldr.w	r8, [r6], #4
 8009556:	fa11 f288 	uxtah	r2, r1, r8
 800955a:	1414      	asrs	r4, r2, #16
 800955c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009560:	b292      	uxth	r2, r2
 8009562:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009566:	f84e 2b04 	str.w	r2, [lr], #4
 800956a:	1421      	asrs	r1, r4, #16
 800956c:	e7e0      	b.n	8009530 <__mdiff+0xc8>
 800956e:	3f01      	subs	r7, #1
 8009570:	e7ea      	b.n	8009548 <__mdiff+0xe0>
 8009572:	bf00      	nop
 8009574:	0800c0e7 	.word	0x0800c0e7
 8009578:	0800c0f8 	.word	0x0800c0f8

0800957c <__ulp>:
 800957c:	b082      	sub	sp, #8
 800957e:	ed8d 0b00 	vstr	d0, [sp]
 8009582:	9a01      	ldr	r2, [sp, #4]
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <__ulp+0x48>)
 8009586:	4013      	ands	r3, r2
 8009588:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800958c:	2b00      	cmp	r3, #0
 800958e:	dc08      	bgt.n	80095a2 <__ulp+0x26>
 8009590:	425b      	negs	r3, r3
 8009592:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009596:	ea4f 5223 	mov.w	r2, r3, asr #20
 800959a:	da04      	bge.n	80095a6 <__ulp+0x2a>
 800959c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095a0:	4113      	asrs	r3, r2
 80095a2:	2200      	movs	r2, #0
 80095a4:	e008      	b.n	80095b8 <__ulp+0x3c>
 80095a6:	f1a2 0314 	sub.w	r3, r2, #20
 80095aa:	2b1e      	cmp	r3, #30
 80095ac:	bfda      	itte	le
 80095ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80095b2:	40da      	lsrle	r2, r3
 80095b4:	2201      	movgt	r2, #1
 80095b6:	2300      	movs	r3, #0
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	ec41 0b10 	vmov	d0, r0, r1
 80095c0:	b002      	add	sp, #8
 80095c2:	4770      	bx	lr
 80095c4:	7ff00000 	.word	0x7ff00000

080095c8 <__b2d>:
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	6906      	ldr	r6, [r0, #16]
 80095ce:	f100 0814 	add.w	r8, r0, #20
 80095d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80095d6:	1f37      	subs	r7, r6, #4
 80095d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095dc:	4610      	mov	r0, r2
 80095de:	f7ff fd53 	bl	8009088 <__hi0bits>
 80095e2:	f1c0 0320 	rsb	r3, r0, #32
 80095e6:	280a      	cmp	r0, #10
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	491b      	ldr	r1, [pc, #108]	; (8009658 <__b2d+0x90>)
 80095ec:	dc15      	bgt.n	800961a <__b2d+0x52>
 80095ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80095f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80095f6:	45b8      	cmp	r8, r7
 80095f8:	ea43 0501 	orr.w	r5, r3, r1
 80095fc:	bf34      	ite	cc
 80095fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009602:	2300      	movcs	r3, #0
 8009604:	3015      	adds	r0, #21
 8009606:	fa02 f000 	lsl.w	r0, r2, r0
 800960a:	fa23 f30c 	lsr.w	r3, r3, ip
 800960e:	4303      	orrs	r3, r0
 8009610:	461c      	mov	r4, r3
 8009612:	ec45 4b10 	vmov	d0, r4, r5
 8009616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961a:	45b8      	cmp	r8, r7
 800961c:	bf3a      	itte	cc
 800961e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009622:	f1a6 0708 	subcc.w	r7, r6, #8
 8009626:	2300      	movcs	r3, #0
 8009628:	380b      	subs	r0, #11
 800962a:	d012      	beq.n	8009652 <__b2d+0x8a>
 800962c:	f1c0 0120 	rsb	r1, r0, #32
 8009630:	fa23 f401 	lsr.w	r4, r3, r1
 8009634:	4082      	lsls	r2, r0
 8009636:	4322      	orrs	r2, r4
 8009638:	4547      	cmp	r7, r8
 800963a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800963e:	bf8c      	ite	hi
 8009640:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009644:	2200      	movls	r2, #0
 8009646:	4083      	lsls	r3, r0
 8009648:	40ca      	lsrs	r2, r1
 800964a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800964e:	4313      	orrs	r3, r2
 8009650:	e7de      	b.n	8009610 <__b2d+0x48>
 8009652:	ea42 0501 	orr.w	r5, r2, r1
 8009656:	e7db      	b.n	8009610 <__b2d+0x48>
 8009658:	3ff00000 	.word	0x3ff00000

0800965c <__d2b>:
 800965c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009660:	460f      	mov	r7, r1
 8009662:	2101      	movs	r1, #1
 8009664:	ec59 8b10 	vmov	r8, r9, d0
 8009668:	4616      	mov	r6, r2
 800966a:	f7ff fc1b 	bl	8008ea4 <_Balloc>
 800966e:	4604      	mov	r4, r0
 8009670:	b930      	cbnz	r0, 8009680 <__d2b+0x24>
 8009672:	4602      	mov	r2, r0
 8009674:	4b24      	ldr	r3, [pc, #144]	; (8009708 <__d2b+0xac>)
 8009676:	4825      	ldr	r0, [pc, #148]	; (800970c <__d2b+0xb0>)
 8009678:	f240 310f 	movw	r1, #783	; 0x30f
 800967c:	f001 fd34 	bl	800b0e8 <__assert_func>
 8009680:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009688:	bb2d      	cbnz	r5, 80096d6 <__d2b+0x7a>
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	f1b8 0300 	subs.w	r3, r8, #0
 8009690:	d026      	beq.n	80096e0 <__d2b+0x84>
 8009692:	4668      	mov	r0, sp
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	f7ff fd17 	bl	80090c8 <__lo0bits>
 800969a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800969e:	b1e8      	cbz	r0, 80096dc <__d2b+0x80>
 80096a0:	f1c0 0320 	rsb	r3, r0, #32
 80096a4:	fa02 f303 	lsl.w	r3, r2, r3
 80096a8:	430b      	orrs	r3, r1
 80096aa:	40c2      	lsrs	r2, r0
 80096ac:	6163      	str	r3, [r4, #20]
 80096ae:	9201      	str	r2, [sp, #4]
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	61a3      	str	r3, [r4, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bf14      	ite	ne
 80096b8:	2202      	movne	r2, #2
 80096ba:	2201      	moveq	r2, #1
 80096bc:	6122      	str	r2, [r4, #16]
 80096be:	b1bd      	cbz	r5, 80096f0 <__d2b+0x94>
 80096c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096c4:	4405      	add	r5, r0
 80096c6:	603d      	str	r5, [r7, #0]
 80096c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096cc:	6030      	str	r0, [r6, #0]
 80096ce:	4620      	mov	r0, r4
 80096d0:	b003      	add	sp, #12
 80096d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096da:	e7d6      	b.n	800968a <__d2b+0x2e>
 80096dc:	6161      	str	r1, [r4, #20]
 80096de:	e7e7      	b.n	80096b0 <__d2b+0x54>
 80096e0:	a801      	add	r0, sp, #4
 80096e2:	f7ff fcf1 	bl	80090c8 <__lo0bits>
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	6163      	str	r3, [r4, #20]
 80096ea:	3020      	adds	r0, #32
 80096ec:	2201      	movs	r2, #1
 80096ee:	e7e5      	b.n	80096bc <__d2b+0x60>
 80096f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096f8:	6038      	str	r0, [r7, #0]
 80096fa:	6918      	ldr	r0, [r3, #16]
 80096fc:	f7ff fcc4 	bl	8009088 <__hi0bits>
 8009700:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009704:	e7e2      	b.n	80096cc <__d2b+0x70>
 8009706:	bf00      	nop
 8009708:	0800c0e7 	.word	0x0800c0e7
 800970c:	0800c0f8 	.word	0x0800c0f8

08009710 <__ratio>:
 8009710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	4688      	mov	r8, r1
 8009716:	4669      	mov	r1, sp
 8009718:	4681      	mov	r9, r0
 800971a:	f7ff ff55 	bl	80095c8 <__b2d>
 800971e:	a901      	add	r1, sp, #4
 8009720:	4640      	mov	r0, r8
 8009722:	ec55 4b10 	vmov	r4, r5, d0
 8009726:	f7ff ff4f 	bl	80095c8 <__b2d>
 800972a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800972e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009732:	eba3 0c02 	sub.w	ip, r3, r2
 8009736:	e9dd 3200 	ldrd	r3, r2, [sp]
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009740:	ec51 0b10 	vmov	r0, r1, d0
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfd6      	itet	le
 8009748:	460a      	movle	r2, r1
 800974a:	462a      	movgt	r2, r5
 800974c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009750:	468b      	mov	fp, r1
 8009752:	462f      	mov	r7, r5
 8009754:	bfd4      	ite	le
 8009756:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800975a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800975e:	4620      	mov	r0, r4
 8009760:	ee10 2a10 	vmov	r2, s0
 8009764:	465b      	mov	r3, fp
 8009766:	4639      	mov	r1, r7
 8009768:	f7f7 f890 	bl	800088c <__aeabi_ddiv>
 800976c:	ec41 0b10 	vmov	d0, r0, r1
 8009770:	b003      	add	sp, #12
 8009772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009776 <__copybits>:
 8009776:	3901      	subs	r1, #1
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	1149      	asrs	r1, r1, #5
 800977c:	6914      	ldr	r4, [r2, #16]
 800977e:	3101      	adds	r1, #1
 8009780:	f102 0314 	add.w	r3, r2, #20
 8009784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009788:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800978c:	1f05      	subs	r5, r0, #4
 800978e:	42a3      	cmp	r3, r4
 8009790:	d30c      	bcc.n	80097ac <__copybits+0x36>
 8009792:	1aa3      	subs	r3, r4, r2
 8009794:	3b11      	subs	r3, #17
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	3211      	adds	r2, #17
 800979c:	42a2      	cmp	r2, r4
 800979e:	bf88      	it	hi
 80097a0:	2300      	movhi	r3, #0
 80097a2:	4418      	add	r0, r3
 80097a4:	2300      	movs	r3, #0
 80097a6:	4288      	cmp	r0, r1
 80097a8:	d305      	bcc.n	80097b6 <__copybits+0x40>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80097b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80097b4:	e7eb      	b.n	800978e <__copybits+0x18>
 80097b6:	f840 3b04 	str.w	r3, [r0], #4
 80097ba:	e7f4      	b.n	80097a6 <__copybits+0x30>

080097bc <__any_on>:
 80097bc:	f100 0214 	add.w	r2, r0, #20
 80097c0:	6900      	ldr	r0, [r0, #16]
 80097c2:	114b      	asrs	r3, r1, #5
 80097c4:	4298      	cmp	r0, r3
 80097c6:	b510      	push	{r4, lr}
 80097c8:	db11      	blt.n	80097ee <__any_on+0x32>
 80097ca:	dd0a      	ble.n	80097e2 <__any_on+0x26>
 80097cc:	f011 011f 	ands.w	r1, r1, #31
 80097d0:	d007      	beq.n	80097e2 <__any_on+0x26>
 80097d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097d6:	fa24 f001 	lsr.w	r0, r4, r1
 80097da:	fa00 f101 	lsl.w	r1, r0, r1
 80097de:	428c      	cmp	r4, r1
 80097e0:	d10b      	bne.n	80097fa <__any_on+0x3e>
 80097e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d803      	bhi.n	80097f2 <__any_on+0x36>
 80097ea:	2000      	movs	r0, #0
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	4603      	mov	r3, r0
 80097f0:	e7f7      	b.n	80097e2 <__any_on+0x26>
 80097f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d0f5      	beq.n	80097e6 <__any_on+0x2a>
 80097fa:	2001      	movs	r0, #1
 80097fc:	e7f6      	b.n	80097ec <__any_on+0x30>

080097fe <sulp>:
 80097fe:	b570      	push	{r4, r5, r6, lr}
 8009800:	4604      	mov	r4, r0
 8009802:	460d      	mov	r5, r1
 8009804:	ec45 4b10 	vmov	d0, r4, r5
 8009808:	4616      	mov	r6, r2
 800980a:	f7ff feb7 	bl	800957c <__ulp>
 800980e:	ec51 0b10 	vmov	r0, r1, d0
 8009812:	b17e      	cbz	r6, 8009834 <sulp+0x36>
 8009814:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd09      	ble.n	8009834 <sulp+0x36>
 8009820:	051b      	lsls	r3, r3, #20
 8009822:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009826:	2400      	movs	r4, #0
 8009828:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800982c:	4622      	mov	r2, r4
 800982e:	462b      	mov	r3, r5
 8009830:	f7f6 ff02 	bl	8000638 <__aeabi_dmul>
 8009834:	bd70      	pop	{r4, r5, r6, pc}
	...

08009838 <_strtod_l>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	ed2d 8b02 	vpush	{d8}
 8009840:	b09b      	sub	sp, #108	; 0x6c
 8009842:	4604      	mov	r4, r0
 8009844:	9213      	str	r2, [sp, #76]	; 0x4c
 8009846:	2200      	movs	r2, #0
 8009848:	9216      	str	r2, [sp, #88]	; 0x58
 800984a:	460d      	mov	r5, r1
 800984c:	f04f 0800 	mov.w	r8, #0
 8009850:	f04f 0900 	mov.w	r9, #0
 8009854:	460a      	mov	r2, r1
 8009856:	9215      	str	r2, [sp, #84]	; 0x54
 8009858:	7811      	ldrb	r1, [r2, #0]
 800985a:	292b      	cmp	r1, #43	; 0x2b
 800985c:	d04c      	beq.n	80098f8 <_strtod_l+0xc0>
 800985e:	d83a      	bhi.n	80098d6 <_strtod_l+0x9e>
 8009860:	290d      	cmp	r1, #13
 8009862:	d834      	bhi.n	80098ce <_strtod_l+0x96>
 8009864:	2908      	cmp	r1, #8
 8009866:	d834      	bhi.n	80098d2 <_strtod_l+0x9a>
 8009868:	2900      	cmp	r1, #0
 800986a:	d03d      	beq.n	80098e8 <_strtod_l+0xb0>
 800986c:	2200      	movs	r2, #0
 800986e:	920a      	str	r2, [sp, #40]	; 0x28
 8009870:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009872:	7832      	ldrb	r2, [r6, #0]
 8009874:	2a30      	cmp	r2, #48	; 0x30
 8009876:	f040 80b4 	bne.w	80099e2 <_strtod_l+0x1aa>
 800987a:	7872      	ldrb	r2, [r6, #1]
 800987c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009880:	2a58      	cmp	r2, #88	; 0x58
 8009882:	d170      	bne.n	8009966 <_strtod_l+0x12e>
 8009884:	9302      	str	r3, [sp, #8]
 8009886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	ab16      	add	r3, sp, #88	; 0x58
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4a8e      	ldr	r2, [pc, #568]	; (8009ac8 <_strtod_l+0x290>)
 8009890:	ab17      	add	r3, sp, #92	; 0x5c
 8009892:	a915      	add	r1, sp, #84	; 0x54
 8009894:	4620      	mov	r0, r4
 8009896:	f001 fcc3 	bl	800b220 <__gethex>
 800989a:	f010 070f 	ands.w	r7, r0, #15
 800989e:	4605      	mov	r5, r0
 80098a0:	d005      	beq.n	80098ae <_strtod_l+0x76>
 80098a2:	2f06      	cmp	r7, #6
 80098a4:	d12a      	bne.n	80098fc <_strtod_l+0xc4>
 80098a6:	3601      	adds	r6, #1
 80098a8:	2300      	movs	r3, #0
 80098aa:	9615      	str	r6, [sp, #84]	; 0x54
 80098ac:	930a      	str	r3, [sp, #40]	; 0x28
 80098ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f040 857f 	bne.w	800a3b4 <_strtod_l+0xb7c>
 80098b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b8:	b1db      	cbz	r3, 80098f2 <_strtod_l+0xba>
 80098ba:	4642      	mov	r2, r8
 80098bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80098c0:	ec43 2b10 	vmov	d0, r2, r3
 80098c4:	b01b      	add	sp, #108	; 0x6c
 80098c6:	ecbd 8b02 	vpop	{d8}
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	2920      	cmp	r1, #32
 80098d0:	d1cc      	bne.n	800986c <_strtod_l+0x34>
 80098d2:	3201      	adds	r2, #1
 80098d4:	e7bf      	b.n	8009856 <_strtod_l+0x1e>
 80098d6:	292d      	cmp	r1, #45	; 0x2d
 80098d8:	d1c8      	bne.n	800986c <_strtod_l+0x34>
 80098da:	2101      	movs	r1, #1
 80098dc:	910a      	str	r1, [sp, #40]	; 0x28
 80098de:	1c51      	adds	r1, r2, #1
 80098e0:	9115      	str	r1, [sp, #84]	; 0x54
 80098e2:	7852      	ldrb	r2, [r2, #1]
 80098e4:	2a00      	cmp	r2, #0
 80098e6:	d1c3      	bne.n	8009870 <_strtod_l+0x38>
 80098e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098ea:	9515      	str	r5, [sp, #84]	; 0x54
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 855f 	bne.w	800a3b0 <_strtod_l+0xb78>
 80098f2:	4642      	mov	r2, r8
 80098f4:	464b      	mov	r3, r9
 80098f6:	e7e3      	b.n	80098c0 <_strtod_l+0x88>
 80098f8:	2100      	movs	r1, #0
 80098fa:	e7ef      	b.n	80098dc <_strtod_l+0xa4>
 80098fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098fe:	b13a      	cbz	r2, 8009910 <_strtod_l+0xd8>
 8009900:	2135      	movs	r1, #53	; 0x35
 8009902:	a818      	add	r0, sp, #96	; 0x60
 8009904:	f7ff ff37 	bl	8009776 <__copybits>
 8009908:	9916      	ldr	r1, [sp, #88]	; 0x58
 800990a:	4620      	mov	r0, r4
 800990c:	f7ff fb0a 	bl	8008f24 <_Bfree>
 8009910:	3f01      	subs	r7, #1
 8009912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009914:	2f04      	cmp	r7, #4
 8009916:	d806      	bhi.n	8009926 <_strtod_l+0xee>
 8009918:	e8df f007 	tbb	[pc, r7]
 800991c:	201d0314 	.word	0x201d0314
 8009920:	14          	.byte	0x14
 8009921:	00          	.byte	0x00
 8009922:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009926:	05e9      	lsls	r1, r5, #23
 8009928:	bf48      	it	mi
 800992a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800992e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009932:	0d1b      	lsrs	r3, r3, #20
 8009934:	051b      	lsls	r3, r3, #20
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1b9      	bne.n	80098ae <_strtod_l+0x76>
 800993a:	f7fe faf7 	bl	8007f2c <__errno>
 800993e:	2322      	movs	r3, #34	; 0x22
 8009940:	6003      	str	r3, [r0, #0]
 8009942:	e7b4      	b.n	80098ae <_strtod_l+0x76>
 8009944:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009948:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800994c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009950:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009954:	e7e7      	b.n	8009926 <_strtod_l+0xee>
 8009956:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ad0 <_strtod_l+0x298>
 800995a:	e7e4      	b.n	8009926 <_strtod_l+0xee>
 800995c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009960:	f04f 38ff 	mov.w	r8, #4294967295
 8009964:	e7df      	b.n	8009926 <_strtod_l+0xee>
 8009966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	9215      	str	r2, [sp, #84]	; 0x54
 800996c:	785b      	ldrb	r3, [r3, #1]
 800996e:	2b30      	cmp	r3, #48	; 0x30
 8009970:	d0f9      	beq.n	8009966 <_strtod_l+0x12e>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d09b      	beq.n	80098ae <_strtod_l+0x76>
 8009976:	2301      	movs	r3, #1
 8009978:	f04f 0a00 	mov.w	sl, #0
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009980:	930b      	str	r3, [sp, #44]	; 0x2c
 8009982:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009986:	46d3      	mov	fp, sl
 8009988:	220a      	movs	r2, #10
 800998a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800998c:	7806      	ldrb	r6, [r0, #0]
 800998e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009992:	b2d9      	uxtb	r1, r3
 8009994:	2909      	cmp	r1, #9
 8009996:	d926      	bls.n	80099e6 <_strtod_l+0x1ae>
 8009998:	494c      	ldr	r1, [pc, #304]	; (8009acc <_strtod_l+0x294>)
 800999a:	2201      	movs	r2, #1
 800999c:	f001 fb79 	bl	800b092 <strncmp>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d030      	beq.n	8009a06 <_strtod_l+0x1ce>
 80099a4:	2000      	movs	r0, #0
 80099a6:	4632      	mov	r2, r6
 80099a8:	9005      	str	r0, [sp, #20]
 80099aa:	465e      	mov	r6, fp
 80099ac:	4603      	mov	r3, r0
 80099ae:	2a65      	cmp	r2, #101	; 0x65
 80099b0:	d001      	beq.n	80099b6 <_strtod_l+0x17e>
 80099b2:	2a45      	cmp	r2, #69	; 0x45
 80099b4:	d113      	bne.n	80099de <_strtod_l+0x1a6>
 80099b6:	b91e      	cbnz	r6, 80099c0 <_strtod_l+0x188>
 80099b8:	9a04      	ldr	r2, [sp, #16]
 80099ba:	4302      	orrs	r2, r0
 80099bc:	d094      	beq.n	80098e8 <_strtod_l+0xb0>
 80099be:	2600      	movs	r6, #0
 80099c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80099c2:	1c6a      	adds	r2, r5, #1
 80099c4:	9215      	str	r2, [sp, #84]	; 0x54
 80099c6:	786a      	ldrb	r2, [r5, #1]
 80099c8:	2a2b      	cmp	r2, #43	; 0x2b
 80099ca:	d074      	beq.n	8009ab6 <_strtod_l+0x27e>
 80099cc:	2a2d      	cmp	r2, #45	; 0x2d
 80099ce:	d078      	beq.n	8009ac2 <_strtod_l+0x28a>
 80099d0:	f04f 0c00 	mov.w	ip, #0
 80099d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80099d8:	2909      	cmp	r1, #9
 80099da:	d97f      	bls.n	8009adc <_strtod_l+0x2a4>
 80099dc:	9515      	str	r5, [sp, #84]	; 0x54
 80099de:	2700      	movs	r7, #0
 80099e0:	e09e      	b.n	8009b20 <_strtod_l+0x2e8>
 80099e2:	2300      	movs	r3, #0
 80099e4:	e7c8      	b.n	8009978 <_strtod_l+0x140>
 80099e6:	f1bb 0f08 	cmp.w	fp, #8
 80099ea:	bfd8      	it	le
 80099ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80099ee:	f100 0001 	add.w	r0, r0, #1
 80099f2:	bfda      	itte	le
 80099f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80099f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80099fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80099fe:	f10b 0b01 	add.w	fp, fp, #1
 8009a02:	9015      	str	r0, [sp, #84]	; 0x54
 8009a04:	e7c1      	b.n	800998a <_strtod_l+0x152>
 8009a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	9215      	str	r2, [sp, #84]	; 0x54
 8009a0c:	785a      	ldrb	r2, [r3, #1]
 8009a0e:	f1bb 0f00 	cmp.w	fp, #0
 8009a12:	d037      	beq.n	8009a84 <_strtod_l+0x24c>
 8009a14:	9005      	str	r0, [sp, #20]
 8009a16:	465e      	mov	r6, fp
 8009a18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	d912      	bls.n	8009a46 <_strtod_l+0x20e>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7c4      	b.n	80099ae <_strtod_l+0x176>
 8009a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	9215      	str	r2, [sp, #84]	; 0x54
 8009a2a:	785a      	ldrb	r2, [r3, #1]
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	2a30      	cmp	r2, #48	; 0x30
 8009a30:	d0f8      	beq.n	8009a24 <_strtod_l+0x1ec>
 8009a32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	f200 84c1 	bhi.w	800a3be <_strtod_l+0xb86>
 8009a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a3e:	9005      	str	r0, [sp, #20]
 8009a40:	2000      	movs	r0, #0
 8009a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a44:	4606      	mov	r6, r0
 8009a46:	3a30      	subs	r2, #48	; 0x30
 8009a48:	f100 0301 	add.w	r3, r0, #1
 8009a4c:	d014      	beq.n	8009a78 <_strtod_l+0x240>
 8009a4e:	9905      	ldr	r1, [sp, #20]
 8009a50:	4419      	add	r1, r3
 8009a52:	9105      	str	r1, [sp, #20]
 8009a54:	4633      	mov	r3, r6
 8009a56:	eb00 0c06 	add.w	ip, r0, r6
 8009a5a:	210a      	movs	r1, #10
 8009a5c:	4563      	cmp	r3, ip
 8009a5e:	d113      	bne.n	8009a88 <_strtod_l+0x250>
 8009a60:	1833      	adds	r3, r6, r0
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	f106 0601 	add.w	r6, r6, #1
 8009a68:	4406      	add	r6, r0
 8009a6a:	dc1a      	bgt.n	8009aa2 <_strtod_l+0x26a>
 8009a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6e:	230a      	movs	r3, #10
 8009a70:	fb03 2301 	mla	r3, r3, r1, r2
 8009a74:	9309      	str	r3, [sp, #36]	; 0x24
 8009a76:	2300      	movs	r3, #0
 8009a78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a7a:	1c51      	adds	r1, r2, #1
 8009a7c:	9115      	str	r1, [sp, #84]	; 0x54
 8009a7e:	7852      	ldrb	r2, [r2, #1]
 8009a80:	4618      	mov	r0, r3
 8009a82:	e7c9      	b.n	8009a18 <_strtod_l+0x1e0>
 8009a84:	4658      	mov	r0, fp
 8009a86:	e7d2      	b.n	8009a2e <_strtod_l+0x1f6>
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	f103 0301 	add.w	r3, r3, #1
 8009a8e:	dc03      	bgt.n	8009a98 <_strtod_l+0x260>
 8009a90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a92:	434f      	muls	r7, r1
 8009a94:	9709      	str	r7, [sp, #36]	; 0x24
 8009a96:	e7e1      	b.n	8009a5c <_strtod_l+0x224>
 8009a98:	2b10      	cmp	r3, #16
 8009a9a:	bfd8      	it	le
 8009a9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009aa0:	e7dc      	b.n	8009a5c <_strtod_l+0x224>
 8009aa2:	2e10      	cmp	r6, #16
 8009aa4:	bfdc      	itt	le
 8009aa6:	230a      	movle	r3, #10
 8009aa8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009aac:	e7e3      	b.n	8009a76 <_strtod_l+0x23e>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9305      	str	r3, [sp, #20]
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e780      	b.n	80099b8 <_strtod_l+0x180>
 8009ab6:	f04f 0c00 	mov.w	ip, #0
 8009aba:	1caa      	adds	r2, r5, #2
 8009abc:	9215      	str	r2, [sp, #84]	; 0x54
 8009abe:	78aa      	ldrb	r2, [r5, #2]
 8009ac0:	e788      	b.n	80099d4 <_strtod_l+0x19c>
 8009ac2:	f04f 0c01 	mov.w	ip, #1
 8009ac6:	e7f8      	b.n	8009aba <_strtod_l+0x282>
 8009ac8:	0800c258 	.word	0x0800c258
 8009acc:	0800c254 	.word	0x0800c254
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ad6:	1c51      	adds	r1, r2, #1
 8009ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8009ada:	7852      	ldrb	r2, [r2, #1]
 8009adc:	2a30      	cmp	r2, #48	; 0x30
 8009ade:	d0f9      	beq.n	8009ad4 <_strtod_l+0x29c>
 8009ae0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ae4:	2908      	cmp	r1, #8
 8009ae6:	f63f af7a 	bhi.w	80099de <_strtod_l+0x1a6>
 8009aea:	3a30      	subs	r2, #48	; 0x30
 8009aec:	9208      	str	r2, [sp, #32]
 8009aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009af0:	920c      	str	r2, [sp, #48]	; 0x30
 8009af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009af4:	1c57      	adds	r7, r2, #1
 8009af6:	9715      	str	r7, [sp, #84]	; 0x54
 8009af8:	7852      	ldrb	r2, [r2, #1]
 8009afa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009afe:	f1be 0f09 	cmp.w	lr, #9
 8009b02:	d938      	bls.n	8009b76 <_strtod_l+0x33e>
 8009b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b06:	1a7f      	subs	r7, r7, r1
 8009b08:	2f08      	cmp	r7, #8
 8009b0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009b0e:	dc03      	bgt.n	8009b18 <_strtod_l+0x2e0>
 8009b10:	9908      	ldr	r1, [sp, #32]
 8009b12:	428f      	cmp	r7, r1
 8009b14:	bfa8      	it	ge
 8009b16:	460f      	movge	r7, r1
 8009b18:	f1bc 0f00 	cmp.w	ip, #0
 8009b1c:	d000      	beq.n	8009b20 <_strtod_l+0x2e8>
 8009b1e:	427f      	negs	r7, r7
 8009b20:	2e00      	cmp	r6, #0
 8009b22:	d14f      	bne.n	8009bc4 <_strtod_l+0x38c>
 8009b24:	9904      	ldr	r1, [sp, #16]
 8009b26:	4301      	orrs	r1, r0
 8009b28:	f47f aec1 	bne.w	80098ae <_strtod_l+0x76>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f47f aedb 	bne.w	80098e8 <_strtod_l+0xb0>
 8009b32:	2a69      	cmp	r2, #105	; 0x69
 8009b34:	d029      	beq.n	8009b8a <_strtod_l+0x352>
 8009b36:	dc26      	bgt.n	8009b86 <_strtod_l+0x34e>
 8009b38:	2a49      	cmp	r2, #73	; 0x49
 8009b3a:	d026      	beq.n	8009b8a <_strtod_l+0x352>
 8009b3c:	2a4e      	cmp	r2, #78	; 0x4e
 8009b3e:	f47f aed3 	bne.w	80098e8 <_strtod_l+0xb0>
 8009b42:	499b      	ldr	r1, [pc, #620]	; (8009db0 <_strtod_l+0x578>)
 8009b44:	a815      	add	r0, sp, #84	; 0x54
 8009b46:	f001 fdab 	bl	800b6a0 <__match>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f43f aecc 	beq.w	80098e8 <_strtod_l+0xb0>
 8009b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b28      	cmp	r3, #40	; 0x28
 8009b56:	d12f      	bne.n	8009bb8 <_strtod_l+0x380>
 8009b58:	4996      	ldr	r1, [pc, #600]	; (8009db4 <_strtod_l+0x57c>)
 8009b5a:	aa18      	add	r2, sp, #96	; 0x60
 8009b5c:	a815      	add	r0, sp, #84	; 0x54
 8009b5e:	f001 fdb3 	bl	800b6c8 <__hexnan>
 8009b62:	2805      	cmp	r0, #5
 8009b64:	d128      	bne.n	8009bb8 <_strtod_l+0x380>
 8009b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b74:	e69b      	b.n	80098ae <_strtod_l+0x76>
 8009b76:	9f08      	ldr	r7, [sp, #32]
 8009b78:	210a      	movs	r1, #10
 8009b7a:	fb01 2107 	mla	r1, r1, r7, r2
 8009b7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009b82:	9208      	str	r2, [sp, #32]
 8009b84:	e7b5      	b.n	8009af2 <_strtod_l+0x2ba>
 8009b86:	2a6e      	cmp	r2, #110	; 0x6e
 8009b88:	e7d9      	b.n	8009b3e <_strtod_l+0x306>
 8009b8a:	498b      	ldr	r1, [pc, #556]	; (8009db8 <_strtod_l+0x580>)
 8009b8c:	a815      	add	r0, sp, #84	; 0x54
 8009b8e:	f001 fd87 	bl	800b6a0 <__match>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f43f aea8 	beq.w	80098e8 <_strtod_l+0xb0>
 8009b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b9a:	4988      	ldr	r1, [pc, #544]	; (8009dbc <_strtod_l+0x584>)
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	a815      	add	r0, sp, #84	; 0x54
 8009ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8009ba2:	f001 fd7d 	bl	800b6a0 <__match>
 8009ba6:	b910      	cbnz	r0, 8009bae <_strtod_l+0x376>
 8009ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009baa:	3301      	adds	r3, #1
 8009bac:	9315      	str	r3, [sp, #84]	; 0x54
 8009bae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009dcc <_strtod_l+0x594>
 8009bb2:	f04f 0800 	mov.w	r8, #0
 8009bb6:	e67a      	b.n	80098ae <_strtod_l+0x76>
 8009bb8:	4881      	ldr	r0, [pc, #516]	; (8009dc0 <_strtod_l+0x588>)
 8009bba:	f001 fa8d 	bl	800b0d8 <nan>
 8009bbe:	ec59 8b10 	vmov	r8, r9, d0
 8009bc2:	e674      	b.n	80098ae <_strtod_l+0x76>
 8009bc4:	9b05      	ldr	r3, [sp, #20]
 8009bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc8:	1afb      	subs	r3, r7, r3
 8009bca:	f1bb 0f00 	cmp.w	fp, #0
 8009bce:	bf08      	it	eq
 8009bd0:	46b3      	moveq	fp, r6
 8009bd2:	2e10      	cmp	r6, #16
 8009bd4:	9308      	str	r3, [sp, #32]
 8009bd6:	4635      	mov	r5, r6
 8009bd8:	bfa8      	it	ge
 8009bda:	2510      	movge	r5, #16
 8009bdc:	f7f6 fcb2 	bl	8000544 <__aeabi_ui2d>
 8009be0:	2e09      	cmp	r6, #9
 8009be2:	4680      	mov	r8, r0
 8009be4:	4689      	mov	r9, r1
 8009be6:	dd13      	ble.n	8009c10 <_strtod_l+0x3d8>
 8009be8:	4b76      	ldr	r3, [pc, #472]	; (8009dc4 <_strtod_l+0x58c>)
 8009bea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009bee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009bf2:	f7f6 fd21 	bl	8000638 <__aeabi_dmul>
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4689      	mov	r9, r1
 8009bfc:	f7f6 fca2 	bl	8000544 <__aeabi_ui2d>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4640      	mov	r0, r8
 8009c06:	4649      	mov	r1, r9
 8009c08:	f7f6 fb60 	bl	80002cc <__adddf3>
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	4689      	mov	r9, r1
 8009c10:	2e0f      	cmp	r6, #15
 8009c12:	dc38      	bgt.n	8009c86 <_strtod_l+0x44e>
 8009c14:	9b08      	ldr	r3, [sp, #32]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f43f ae49 	beq.w	80098ae <_strtod_l+0x76>
 8009c1c:	dd24      	ble.n	8009c68 <_strtod_l+0x430>
 8009c1e:	2b16      	cmp	r3, #22
 8009c20:	dc0b      	bgt.n	8009c3a <_strtod_l+0x402>
 8009c22:	4968      	ldr	r1, [pc, #416]	; (8009dc4 <_strtod_l+0x58c>)
 8009c24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2c:	4642      	mov	r2, r8
 8009c2e:	464b      	mov	r3, r9
 8009c30:	f7f6 fd02 	bl	8000638 <__aeabi_dmul>
 8009c34:	4680      	mov	r8, r0
 8009c36:	4689      	mov	r9, r1
 8009c38:	e639      	b.n	80098ae <_strtod_l+0x76>
 8009c3a:	9a08      	ldr	r2, [sp, #32]
 8009c3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009c40:	4293      	cmp	r3, r2
 8009c42:	db20      	blt.n	8009c86 <_strtod_l+0x44e>
 8009c44:	4c5f      	ldr	r4, [pc, #380]	; (8009dc4 <_strtod_l+0x58c>)
 8009c46:	f1c6 060f 	rsb	r6, r6, #15
 8009c4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009c4e:	4642      	mov	r2, r8
 8009c50:	464b      	mov	r3, r9
 8009c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c56:	f7f6 fcef 	bl	8000638 <__aeabi_dmul>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	1b9e      	subs	r6, r3, r6
 8009c5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009c62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c66:	e7e3      	b.n	8009c30 <_strtod_l+0x3f8>
 8009c68:	9b08      	ldr	r3, [sp, #32]
 8009c6a:	3316      	adds	r3, #22
 8009c6c:	db0b      	blt.n	8009c86 <_strtod_l+0x44e>
 8009c6e:	9b05      	ldr	r3, [sp, #20]
 8009c70:	1bdf      	subs	r7, r3, r7
 8009c72:	4b54      	ldr	r3, [pc, #336]	; (8009dc4 <_strtod_l+0x58c>)
 8009c74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 fe04 	bl	800088c <__aeabi_ddiv>
 8009c84:	e7d6      	b.n	8009c34 <_strtod_l+0x3fc>
 8009c86:	9b08      	ldr	r3, [sp, #32]
 8009c88:	1b75      	subs	r5, r6, r5
 8009c8a:	441d      	add	r5, r3
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	dd70      	ble.n	8009d72 <_strtod_l+0x53a>
 8009c90:	f015 030f 	ands.w	r3, r5, #15
 8009c94:	d00a      	beq.n	8009cac <_strtod_l+0x474>
 8009c96:	494b      	ldr	r1, [pc, #300]	; (8009dc4 <_strtod_l+0x58c>)
 8009c98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca4:	f7f6 fcc8 	bl	8000638 <__aeabi_dmul>
 8009ca8:	4680      	mov	r8, r0
 8009caa:	4689      	mov	r9, r1
 8009cac:	f035 050f 	bics.w	r5, r5, #15
 8009cb0:	d04d      	beq.n	8009d4e <_strtod_l+0x516>
 8009cb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009cb6:	dd22      	ble.n	8009cfe <_strtod_l+0x4c6>
 8009cb8:	2500      	movs	r5, #0
 8009cba:	46ab      	mov	fp, r5
 8009cbc:	9509      	str	r5, [sp, #36]	; 0x24
 8009cbe:	9505      	str	r5, [sp, #20]
 8009cc0:	2322      	movs	r3, #34	; 0x22
 8009cc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009dcc <_strtod_l+0x594>
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	f04f 0800 	mov.w	r8, #0
 8009ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f43f aded 	beq.w	80098ae <_strtod_l+0x76>
 8009cd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff f924 	bl	8008f24 <_Bfree>
 8009cdc:	9905      	ldr	r1, [sp, #20]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff f920 	bl	8008f24 <_Bfree>
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f7ff f91c 	bl	8008f24 <_Bfree>
 8009cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7ff f918 	bl	8008f24 <_Bfree>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7ff f914 	bl	8008f24 <_Bfree>
 8009cfc:	e5d7      	b.n	80098ae <_strtod_l+0x76>
 8009cfe:	4b32      	ldr	r3, [pc, #200]	; (8009dc8 <_strtod_l+0x590>)
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	2300      	movs	r3, #0
 8009d04:	112d      	asrs	r5, r5, #4
 8009d06:	4640      	mov	r0, r8
 8009d08:	4649      	mov	r1, r9
 8009d0a:	469a      	mov	sl, r3
 8009d0c:	2d01      	cmp	r5, #1
 8009d0e:	dc21      	bgt.n	8009d54 <_strtod_l+0x51c>
 8009d10:	b10b      	cbz	r3, 8009d16 <_strtod_l+0x4de>
 8009d12:	4680      	mov	r8, r0
 8009d14:	4689      	mov	r9, r1
 8009d16:	492c      	ldr	r1, [pc, #176]	; (8009dc8 <_strtod_l+0x590>)
 8009d18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009d1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d28:	f7f6 fc86 	bl	8000638 <__aeabi_dmul>
 8009d2c:	4b27      	ldr	r3, [pc, #156]	; (8009dcc <_strtod_l+0x594>)
 8009d2e:	460a      	mov	r2, r1
 8009d30:	400b      	ands	r3, r1
 8009d32:	4927      	ldr	r1, [pc, #156]	; (8009dd0 <_strtod_l+0x598>)
 8009d34:	428b      	cmp	r3, r1
 8009d36:	4680      	mov	r8, r0
 8009d38:	d8be      	bhi.n	8009cb8 <_strtod_l+0x480>
 8009d3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d3e:	428b      	cmp	r3, r1
 8009d40:	bf86      	itte	hi
 8009d42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009dd4 <_strtod_l+0x59c>
 8009d46:	f04f 38ff 	movhi.w	r8, #4294967295
 8009d4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009d4e:	2300      	movs	r3, #0
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	e07b      	b.n	8009e4c <_strtod_l+0x614>
 8009d54:	07ea      	lsls	r2, r5, #31
 8009d56:	d505      	bpl.n	8009d64 <_strtod_l+0x52c>
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fc6b 	bl	8000638 <__aeabi_dmul>
 8009d62:	2301      	movs	r3, #1
 8009d64:	9a04      	ldr	r2, [sp, #16]
 8009d66:	3208      	adds	r2, #8
 8009d68:	f10a 0a01 	add.w	sl, sl, #1
 8009d6c:	106d      	asrs	r5, r5, #1
 8009d6e:	9204      	str	r2, [sp, #16]
 8009d70:	e7cc      	b.n	8009d0c <_strtod_l+0x4d4>
 8009d72:	d0ec      	beq.n	8009d4e <_strtod_l+0x516>
 8009d74:	426d      	negs	r5, r5
 8009d76:	f015 020f 	ands.w	r2, r5, #15
 8009d7a:	d00a      	beq.n	8009d92 <_strtod_l+0x55a>
 8009d7c:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <_strtod_l+0x58c>)
 8009d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fd7f 	bl	800088c <__aeabi_ddiv>
 8009d8e:	4680      	mov	r8, r0
 8009d90:	4689      	mov	r9, r1
 8009d92:	112d      	asrs	r5, r5, #4
 8009d94:	d0db      	beq.n	8009d4e <_strtod_l+0x516>
 8009d96:	2d1f      	cmp	r5, #31
 8009d98:	dd1e      	ble.n	8009dd8 <_strtod_l+0x5a0>
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	46ab      	mov	fp, r5
 8009d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8009da0:	9505      	str	r5, [sp, #20]
 8009da2:	2322      	movs	r3, #34	; 0x22
 8009da4:	f04f 0800 	mov.w	r8, #0
 8009da8:	f04f 0900 	mov.w	r9, #0
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	e78d      	b.n	8009ccc <_strtod_l+0x494>
 8009db0:	0800c041 	.word	0x0800c041
 8009db4:	0800c26c 	.word	0x0800c26c
 8009db8:	0800c039 	.word	0x0800c039
 8009dbc:	0800c06e 	.word	0x0800c06e
 8009dc0:	0800c418 	.word	0x0800c418
 8009dc4:	0800c180 	.word	0x0800c180
 8009dc8:	0800c158 	.word	0x0800c158
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	7ca00000 	.word	0x7ca00000
 8009dd4:	7fefffff 	.word	0x7fefffff
 8009dd8:	f015 0310 	ands.w	r3, r5, #16
 8009ddc:	bf18      	it	ne
 8009dde:	236a      	movne	r3, #106	; 0x6a
 8009de0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a184 <_strtod_l+0x94c>
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	2300      	movs	r3, #0
 8009dec:	07ea      	lsls	r2, r5, #31
 8009dee:	d504      	bpl.n	8009dfa <_strtod_l+0x5c2>
 8009df0:	e9da 2300 	ldrd	r2, r3, [sl]
 8009df4:	f7f6 fc20 	bl	8000638 <__aeabi_dmul>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	106d      	asrs	r5, r5, #1
 8009dfc:	f10a 0a08 	add.w	sl, sl, #8
 8009e00:	d1f4      	bne.n	8009dec <_strtod_l+0x5b4>
 8009e02:	b10b      	cbz	r3, 8009e08 <_strtod_l+0x5d0>
 8009e04:	4680      	mov	r8, r0
 8009e06:	4689      	mov	r9, r1
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	b1bb      	cbz	r3, 8009e3c <_strtod_l+0x604>
 8009e0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009e10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	4649      	mov	r1, r9
 8009e18:	dd10      	ble.n	8009e3c <_strtod_l+0x604>
 8009e1a:	2b1f      	cmp	r3, #31
 8009e1c:	f340 811e 	ble.w	800a05c <_strtod_l+0x824>
 8009e20:	2b34      	cmp	r3, #52	; 0x34
 8009e22:	bfde      	ittt	le
 8009e24:	f04f 33ff 	movle.w	r3, #4294967295
 8009e28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009e2c:	4093      	lslle	r3, r2
 8009e2e:	f04f 0800 	mov.w	r8, #0
 8009e32:	bfcc      	ite	gt
 8009e34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009e38:	ea03 0901 	andle.w	r9, r3, r1
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fe60 	bl	8000b08 <__aeabi_dcmpeq>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1a6      	bne.n	8009d9a <_strtod_l+0x562>
 8009e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e52:	4633      	mov	r3, r6
 8009e54:	465a      	mov	r2, fp
 8009e56:	4620      	mov	r0, r4
 8009e58:	f7ff f8cc 	bl	8008ff4 <__s2b>
 8009e5c:	9009      	str	r0, [sp, #36]	; 0x24
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	f43f af2a 	beq.w	8009cb8 <_strtod_l+0x480>
 8009e64:	9a08      	ldr	r2, [sp, #32]
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	2a00      	cmp	r2, #0
 8009e6a:	eba3 0307 	sub.w	r3, r3, r7
 8009e6e:	bfa8      	it	ge
 8009e70:	2300      	movge	r3, #0
 8009e72:	930c      	str	r3, [sp, #48]	; 0x30
 8009e74:	2500      	movs	r5, #0
 8009e76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e7c:	46ab      	mov	fp, r5
 8009e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e80:	4620      	mov	r0, r4
 8009e82:	6859      	ldr	r1, [r3, #4]
 8009e84:	f7ff f80e 	bl	8008ea4 <_Balloc>
 8009e88:	9005      	str	r0, [sp, #20]
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	f43f af18 	beq.w	8009cc0 <_strtod_l+0x488>
 8009e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	3202      	adds	r2, #2
 8009e96:	f103 010c 	add.w	r1, r3, #12
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	300c      	adds	r0, #12
 8009e9e:	f7fe f871 	bl	8007f84 <memcpy>
 8009ea2:	ec49 8b10 	vmov	d0, r8, r9
 8009ea6:	aa18      	add	r2, sp, #96	; 0x60
 8009ea8:	a917      	add	r1, sp, #92	; 0x5c
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f7ff fbd6 	bl	800965c <__d2b>
 8009eb0:	ec49 8b18 	vmov	d8, r8, r9
 8009eb4:	9016      	str	r0, [sp, #88]	; 0x58
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f af02 	beq.w	8009cc0 <_strtod_l+0x488>
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f7ff f930 	bl	8009124 <__i2b>
 8009ec4:	4683      	mov	fp, r0
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f43f aefa 	beq.w	8009cc0 <_strtod_l+0x488>
 8009ecc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009ece:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	bfab      	itete	ge
 8009ed4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009ed6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009ed8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009eda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009ede:	bfac      	ite	ge
 8009ee0:	eb06 0a03 	addge.w	sl, r6, r3
 8009ee4:	1b9f      	sublt	r7, r3, r6
 8009ee6:	9b04      	ldr	r3, [sp, #16]
 8009ee8:	1af6      	subs	r6, r6, r3
 8009eea:	4416      	add	r6, r2
 8009eec:	4ba0      	ldr	r3, [pc, #640]	; (800a170 <_strtod_l+0x938>)
 8009eee:	3e01      	subs	r6, #1
 8009ef0:	429e      	cmp	r6, r3
 8009ef2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ef6:	f280 80c4 	bge.w	800a082 <_strtod_l+0x84a>
 8009efa:	1b9b      	subs	r3, r3, r6
 8009efc:	2b1f      	cmp	r3, #31
 8009efe:	eba2 0203 	sub.w	r2, r2, r3
 8009f02:	f04f 0101 	mov.w	r1, #1
 8009f06:	f300 80b0 	bgt.w	800a06a <_strtod_l+0x832>
 8009f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8009f10:	2300      	movs	r3, #0
 8009f12:	930d      	str	r3, [sp, #52]	; 0x34
 8009f14:	eb0a 0602 	add.w	r6, sl, r2
 8009f18:	9b04      	ldr	r3, [sp, #16]
 8009f1a:	45b2      	cmp	sl, r6
 8009f1c:	4417      	add	r7, r2
 8009f1e:	441f      	add	r7, r3
 8009f20:	4653      	mov	r3, sl
 8009f22:	bfa8      	it	ge
 8009f24:	4633      	movge	r3, r6
 8009f26:	42bb      	cmp	r3, r7
 8009f28:	bfa8      	it	ge
 8009f2a:	463b      	movge	r3, r7
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfc2      	ittt	gt
 8009f30:	1af6      	subgt	r6, r6, r3
 8009f32:	1aff      	subgt	r7, r7, r3
 8009f34:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dd17      	ble.n	8009f6e <_strtod_l+0x736>
 8009f3e:	4659      	mov	r1, fp
 8009f40:	461a      	mov	r2, r3
 8009f42:	4620      	mov	r0, r4
 8009f44:	f7ff f9ae 	bl	80092a4 <__pow5mult>
 8009f48:	4683      	mov	fp, r0
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	f43f aeb8 	beq.w	8009cc0 <_strtod_l+0x488>
 8009f50:	4601      	mov	r1, r0
 8009f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7ff f8fb 	bl	8009150 <__multiply>
 8009f5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f43f aeaf 	beq.w	8009cc0 <_strtod_l+0x488>
 8009f62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7fe ffdd 	bl	8008f24 <_Bfree>
 8009f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6c:	9316      	str	r3, [sp, #88]	; 0x58
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	f300 808c 	bgt.w	800a08c <_strtod_l+0x854>
 8009f74:	9b08      	ldr	r3, [sp, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dd08      	ble.n	8009f8c <_strtod_l+0x754>
 8009f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f7c:	9905      	ldr	r1, [sp, #20]
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff f990 	bl	80092a4 <__pow5mult>
 8009f84:	9005      	str	r0, [sp, #20]
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f43f ae9a 	beq.w	8009cc0 <_strtod_l+0x488>
 8009f8c:	2f00      	cmp	r7, #0
 8009f8e:	dd08      	ble.n	8009fa2 <_strtod_l+0x76a>
 8009f90:	9905      	ldr	r1, [sp, #20]
 8009f92:	463a      	mov	r2, r7
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7ff f9df 	bl	8009358 <__lshift>
 8009f9a:	9005      	str	r0, [sp, #20]
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f43f ae8f 	beq.w	8009cc0 <_strtod_l+0x488>
 8009fa2:	f1ba 0f00 	cmp.w	sl, #0
 8009fa6:	dd08      	ble.n	8009fba <_strtod_l+0x782>
 8009fa8:	4659      	mov	r1, fp
 8009faa:	4652      	mov	r2, sl
 8009fac:	4620      	mov	r0, r4
 8009fae:	f7ff f9d3 	bl	8009358 <__lshift>
 8009fb2:	4683      	mov	fp, r0
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f43f ae83 	beq.w	8009cc0 <_strtod_l+0x488>
 8009fba:	9a05      	ldr	r2, [sp, #20]
 8009fbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7ff fa52 	bl	8009468 <__mdiff>
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f43f ae7a 	beq.w	8009cc0 <_strtod_l+0x488>
 8009fcc:	68c3      	ldr	r3, [r0, #12]
 8009fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60c3      	str	r3, [r0, #12]
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	f7ff fa2b 	bl	8009430 <__mcmp>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	da60      	bge.n	800a0a0 <_strtod_l+0x868>
 8009fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe0:	ea53 0308 	orrs.w	r3, r3, r8
 8009fe4:	f040 8084 	bne.w	800a0f0 <_strtod_l+0x8b8>
 8009fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d17f      	bne.n	800a0f0 <_strtod_l+0x8b8>
 8009ff0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ff4:	0d1b      	lsrs	r3, r3, #20
 8009ff6:	051b      	lsls	r3, r3, #20
 8009ff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ffc:	d978      	bls.n	800a0f0 <_strtod_l+0x8b8>
 8009ffe:	696b      	ldr	r3, [r5, #20]
 800a000:	b913      	cbnz	r3, 800a008 <_strtod_l+0x7d0>
 800a002:	692b      	ldr	r3, [r5, #16]
 800a004:	2b01      	cmp	r3, #1
 800a006:	dd73      	ble.n	800a0f0 <_strtod_l+0x8b8>
 800a008:	4629      	mov	r1, r5
 800a00a:	2201      	movs	r2, #1
 800a00c:	4620      	mov	r0, r4
 800a00e:	f7ff f9a3 	bl	8009358 <__lshift>
 800a012:	4659      	mov	r1, fp
 800a014:	4605      	mov	r5, r0
 800a016:	f7ff fa0b 	bl	8009430 <__mcmp>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	dd68      	ble.n	800a0f0 <_strtod_l+0x8b8>
 800a01e:	9904      	ldr	r1, [sp, #16]
 800a020:	4a54      	ldr	r2, [pc, #336]	; (800a174 <_strtod_l+0x93c>)
 800a022:	464b      	mov	r3, r9
 800a024:	2900      	cmp	r1, #0
 800a026:	f000 8084 	beq.w	800a132 <_strtod_l+0x8fa>
 800a02a:	ea02 0109 	and.w	r1, r2, r9
 800a02e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a032:	dc7e      	bgt.n	800a132 <_strtod_l+0x8fa>
 800a034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a038:	f77f aeb3 	ble.w	8009da2 <_strtod_l+0x56a>
 800a03c:	4b4e      	ldr	r3, [pc, #312]	; (800a178 <_strtod_l+0x940>)
 800a03e:	4640      	mov	r0, r8
 800a040:	4649      	mov	r1, r9
 800a042:	2200      	movs	r2, #0
 800a044:	f7f6 faf8 	bl	8000638 <__aeabi_dmul>
 800a048:	4b4a      	ldr	r3, [pc, #296]	; (800a174 <_strtod_l+0x93c>)
 800a04a:	400b      	ands	r3, r1
 800a04c:	4680      	mov	r8, r0
 800a04e:	4689      	mov	r9, r1
 800a050:	2b00      	cmp	r3, #0
 800a052:	f47f ae3f 	bne.w	8009cd4 <_strtod_l+0x49c>
 800a056:	2322      	movs	r3, #34	; 0x22
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	e63b      	b.n	8009cd4 <_strtod_l+0x49c>
 800a05c:	f04f 32ff 	mov.w	r2, #4294967295
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	ea03 0808 	and.w	r8, r3, r8
 800a068:	e6e8      	b.n	8009e3c <_strtod_l+0x604>
 800a06a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a06e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a072:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a076:	36e2      	adds	r6, #226	; 0xe2
 800a078:	fa01 f306 	lsl.w	r3, r1, r6
 800a07c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a080:	e748      	b.n	8009f14 <_strtod_l+0x6dc>
 800a082:	2100      	movs	r1, #0
 800a084:	2301      	movs	r3, #1
 800a086:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a08a:	e743      	b.n	8009f14 <_strtod_l+0x6dc>
 800a08c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a08e:	4632      	mov	r2, r6
 800a090:	4620      	mov	r0, r4
 800a092:	f7ff f961 	bl	8009358 <__lshift>
 800a096:	9016      	str	r0, [sp, #88]	; 0x58
 800a098:	2800      	cmp	r0, #0
 800a09a:	f47f af6b 	bne.w	8009f74 <_strtod_l+0x73c>
 800a09e:	e60f      	b.n	8009cc0 <_strtod_l+0x488>
 800a0a0:	46ca      	mov	sl, r9
 800a0a2:	d171      	bne.n	800a188 <_strtod_l+0x950>
 800a0a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0aa:	b352      	cbz	r2, 800a102 <_strtod_l+0x8ca>
 800a0ac:	4a33      	ldr	r2, [pc, #204]	; (800a17c <_strtod_l+0x944>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d12a      	bne.n	800a108 <_strtod_l+0x8d0>
 800a0b2:	9b04      	ldr	r3, [sp, #16]
 800a0b4:	4641      	mov	r1, r8
 800a0b6:	b1fb      	cbz	r3, 800a0f8 <_strtod_l+0x8c0>
 800a0b8:	4b2e      	ldr	r3, [pc, #184]	; (800a174 <_strtod_l+0x93c>)
 800a0ba:	ea09 0303 	and.w	r3, r9, r3
 800a0be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c6:	d81a      	bhi.n	800a0fe <_strtod_l+0x8c6>
 800a0c8:	0d1b      	lsrs	r3, r3, #20
 800a0ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d2:	4299      	cmp	r1, r3
 800a0d4:	d118      	bne.n	800a108 <_strtod_l+0x8d0>
 800a0d6:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <_strtod_l+0x948>)
 800a0d8:	459a      	cmp	sl, r3
 800a0da:	d102      	bne.n	800a0e2 <_strtod_l+0x8aa>
 800a0dc:	3101      	adds	r1, #1
 800a0de:	f43f adef 	beq.w	8009cc0 <_strtod_l+0x488>
 800a0e2:	4b24      	ldr	r3, [pc, #144]	; (800a174 <_strtod_l+0x93c>)
 800a0e4:	ea0a 0303 	and.w	r3, sl, r3
 800a0e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a0ec:	f04f 0800 	mov.w	r8, #0
 800a0f0:	9b04      	ldr	r3, [sp, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1a2      	bne.n	800a03c <_strtod_l+0x804>
 800a0f6:	e5ed      	b.n	8009cd4 <_strtod_l+0x49c>
 800a0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fc:	e7e9      	b.n	800a0d2 <_strtod_l+0x89a>
 800a0fe:	4613      	mov	r3, r2
 800a100:	e7e7      	b.n	800a0d2 <_strtod_l+0x89a>
 800a102:	ea53 0308 	orrs.w	r3, r3, r8
 800a106:	d08a      	beq.n	800a01e <_strtod_l+0x7e6>
 800a108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a10a:	b1e3      	cbz	r3, 800a146 <_strtod_l+0x90e>
 800a10c:	ea13 0f0a 	tst.w	r3, sl
 800a110:	d0ee      	beq.n	800a0f0 <_strtod_l+0x8b8>
 800a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a114:	9a04      	ldr	r2, [sp, #16]
 800a116:	4640      	mov	r0, r8
 800a118:	4649      	mov	r1, r9
 800a11a:	b1c3      	cbz	r3, 800a14e <_strtod_l+0x916>
 800a11c:	f7ff fb6f 	bl	80097fe <sulp>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	ec51 0b18 	vmov	r0, r1, d8
 800a128:	f7f6 f8d0 	bl	80002cc <__adddf3>
 800a12c:	4680      	mov	r8, r0
 800a12e:	4689      	mov	r9, r1
 800a130:	e7de      	b.n	800a0f0 <_strtod_l+0x8b8>
 800a132:	4013      	ands	r3, r2
 800a134:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a138:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a13c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a140:	f04f 38ff 	mov.w	r8, #4294967295
 800a144:	e7d4      	b.n	800a0f0 <_strtod_l+0x8b8>
 800a146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a148:	ea13 0f08 	tst.w	r3, r8
 800a14c:	e7e0      	b.n	800a110 <_strtod_l+0x8d8>
 800a14e:	f7ff fb56 	bl	80097fe <sulp>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	ec51 0b18 	vmov	r0, r1, d8
 800a15a:	f7f6 f8b5 	bl	80002c8 <__aeabi_dsub>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	4680      	mov	r8, r0
 800a164:	4689      	mov	r9, r1
 800a166:	f7f6 fccf 	bl	8000b08 <__aeabi_dcmpeq>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d0c0      	beq.n	800a0f0 <_strtod_l+0x8b8>
 800a16e:	e618      	b.n	8009da2 <_strtod_l+0x56a>
 800a170:	fffffc02 	.word	0xfffffc02
 800a174:	7ff00000 	.word	0x7ff00000
 800a178:	39500000 	.word	0x39500000
 800a17c:	000fffff 	.word	0x000fffff
 800a180:	7fefffff 	.word	0x7fefffff
 800a184:	0800c280 	.word	0x0800c280
 800a188:	4659      	mov	r1, fp
 800a18a:	4628      	mov	r0, r5
 800a18c:	f7ff fac0 	bl	8009710 <__ratio>
 800a190:	ec57 6b10 	vmov	r6, r7, d0
 800a194:	ee10 0a10 	vmov	r0, s0
 800a198:	2200      	movs	r2, #0
 800a19a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fcc6 	bl	8000b30 <__aeabi_dcmple>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d071      	beq.n	800a28c <_strtod_l+0xa54>
 800a1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d17c      	bne.n	800a2a8 <_strtod_l+0xa70>
 800a1ae:	f1b8 0f00 	cmp.w	r8, #0
 800a1b2:	d15a      	bne.n	800a26a <_strtod_l+0xa32>
 800a1b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d15d      	bne.n	800a278 <_strtod_l+0xa40>
 800a1bc:	4b90      	ldr	r3, [pc, #576]	; (800a400 <_strtod_l+0xbc8>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 fcaa 	bl	8000b1c <__aeabi_dcmplt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d15c      	bne.n	800a286 <_strtod_l+0xa4e>
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	4b8c      	ldr	r3, [pc, #560]	; (800a404 <_strtod_l+0xbcc>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f7f6 fa30 	bl	8000638 <__aeabi_dmul>
 800a1d8:	4606      	mov	r6, r0
 800a1da:	460f      	mov	r7, r1
 800a1dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a1e0:	9606      	str	r6, [sp, #24]
 800a1e2:	9307      	str	r3, [sp, #28]
 800a1e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a1ec:	4b86      	ldr	r3, [pc, #536]	; (800a408 <_strtod_l+0xbd0>)
 800a1ee:	ea0a 0303 	and.w	r3, sl, r3
 800a1f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1f6:	4b85      	ldr	r3, [pc, #532]	; (800a40c <_strtod_l+0xbd4>)
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	f040 8090 	bne.w	800a31e <_strtod_l+0xae6>
 800a1fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a202:	ec49 8b10 	vmov	d0, r8, r9
 800a206:	f7ff f9b9 	bl	800957c <__ulp>
 800a20a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a20e:	ec51 0b10 	vmov	r0, r1, d0
 800a212:	f7f6 fa11 	bl	8000638 <__aeabi_dmul>
 800a216:	4642      	mov	r2, r8
 800a218:	464b      	mov	r3, r9
 800a21a:	f7f6 f857 	bl	80002cc <__adddf3>
 800a21e:	460b      	mov	r3, r1
 800a220:	4979      	ldr	r1, [pc, #484]	; (800a408 <_strtod_l+0xbd0>)
 800a222:	4a7b      	ldr	r2, [pc, #492]	; (800a410 <_strtod_l+0xbd8>)
 800a224:	4019      	ands	r1, r3
 800a226:	4291      	cmp	r1, r2
 800a228:	4680      	mov	r8, r0
 800a22a:	d944      	bls.n	800a2b6 <_strtod_l+0xa7e>
 800a22c:	ee18 2a90 	vmov	r2, s17
 800a230:	4b78      	ldr	r3, [pc, #480]	; (800a414 <_strtod_l+0xbdc>)
 800a232:	429a      	cmp	r2, r3
 800a234:	d104      	bne.n	800a240 <_strtod_l+0xa08>
 800a236:	ee18 3a10 	vmov	r3, s16
 800a23a:	3301      	adds	r3, #1
 800a23c:	f43f ad40 	beq.w	8009cc0 <_strtod_l+0x488>
 800a240:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a414 <_strtod_l+0xbdc>
 800a244:	f04f 38ff 	mov.w	r8, #4294967295
 800a248:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a24a:	4620      	mov	r0, r4
 800a24c:	f7fe fe6a 	bl	8008f24 <_Bfree>
 800a250:	9905      	ldr	r1, [sp, #20]
 800a252:	4620      	mov	r0, r4
 800a254:	f7fe fe66 	bl	8008f24 <_Bfree>
 800a258:	4659      	mov	r1, fp
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7fe fe62 	bl	8008f24 <_Bfree>
 800a260:	4629      	mov	r1, r5
 800a262:	4620      	mov	r0, r4
 800a264:	f7fe fe5e 	bl	8008f24 <_Bfree>
 800a268:	e609      	b.n	8009e7e <_strtod_l+0x646>
 800a26a:	f1b8 0f01 	cmp.w	r8, #1
 800a26e:	d103      	bne.n	800a278 <_strtod_l+0xa40>
 800a270:	f1b9 0f00 	cmp.w	r9, #0
 800a274:	f43f ad95 	beq.w	8009da2 <_strtod_l+0x56a>
 800a278:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a3d0 <_strtod_l+0xb98>
 800a27c:	4f60      	ldr	r7, [pc, #384]	; (800a400 <_strtod_l+0xbc8>)
 800a27e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a282:	2600      	movs	r6, #0
 800a284:	e7ae      	b.n	800a1e4 <_strtod_l+0x9ac>
 800a286:	4f5f      	ldr	r7, [pc, #380]	; (800a404 <_strtod_l+0xbcc>)
 800a288:	2600      	movs	r6, #0
 800a28a:	e7a7      	b.n	800a1dc <_strtod_l+0x9a4>
 800a28c:	4b5d      	ldr	r3, [pc, #372]	; (800a404 <_strtod_l+0xbcc>)
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	2200      	movs	r2, #0
 800a294:	f7f6 f9d0 	bl	8000638 <__aeabi_dmul>
 800a298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d09c      	beq.n	800a1dc <_strtod_l+0x9a4>
 800a2a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a2a6:	e79d      	b.n	800a1e4 <_strtod_l+0x9ac>
 800a2a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a3d8 <_strtod_l+0xba0>
 800a2ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2b0:	ec57 6b17 	vmov	r6, r7, d7
 800a2b4:	e796      	b.n	800a1e4 <_strtod_l+0x9ac>
 800a2b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a2ba:	9b04      	ldr	r3, [sp, #16]
 800a2bc:	46ca      	mov	sl, r9
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1c2      	bne.n	800a248 <_strtod_l+0xa10>
 800a2c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2c8:	0d1b      	lsrs	r3, r3, #20
 800a2ca:	051b      	lsls	r3, r3, #20
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d1bb      	bne.n	800a248 <_strtod_l+0xa10>
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 fd10 	bl	8000cf8 <__aeabi_d2lz>
 800a2d8:	f7f6 f980 	bl	80005dc <__aeabi_l2d>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f5 fff0 	bl	80002c8 <__aeabi_dsub>
 800a2e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2ee:	ea43 0308 	orr.w	r3, r3, r8
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	d054      	beq.n	800a3a4 <_strtod_l+0xb6c>
 800a2fa:	a339      	add	r3, pc, #228	; (adr r3, 800a3e0 <_strtod_l+0xba8>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f7f6 fc0c 	bl	8000b1c <__aeabi_dcmplt>
 800a304:	2800      	cmp	r0, #0
 800a306:	f47f ace5 	bne.w	8009cd4 <_strtod_l+0x49c>
 800a30a:	a337      	add	r3, pc, #220	; (adr r3, 800a3e8 <_strtod_l+0xbb0>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f6 fc20 	bl	8000b58 <__aeabi_dcmpgt>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d095      	beq.n	800a248 <_strtod_l+0xa10>
 800a31c:	e4da      	b.n	8009cd4 <_strtod_l+0x49c>
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	b333      	cbz	r3, 800a370 <_strtod_l+0xb38>
 800a322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a324:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a328:	d822      	bhi.n	800a370 <_strtod_l+0xb38>
 800a32a:	a331      	add	r3, pc, #196	; (adr r3, 800a3f0 <_strtod_l+0xbb8>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 fbfc 	bl	8000b30 <__aeabi_dcmple>
 800a338:	b1a0      	cbz	r0, 800a364 <_strtod_l+0xb2c>
 800a33a:	4639      	mov	r1, r7
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7f6 fc53 	bl	8000be8 <__aeabi_d2uiz>
 800a342:	2801      	cmp	r0, #1
 800a344:	bf38      	it	cc
 800a346:	2001      	movcc	r0, #1
 800a348:	f7f6 f8fc 	bl	8000544 <__aeabi_ui2d>
 800a34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	bb23      	cbnz	r3, 800a39e <_strtod_l+0xb66>
 800a354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a358:	9010      	str	r0, [sp, #64]	; 0x40
 800a35a:	9311      	str	r3, [sp, #68]	; 0x44
 800a35c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a360:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a368:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a36c:	1a9b      	subs	r3, r3, r2
 800a36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a374:	eeb0 0a48 	vmov.f32	s0, s16
 800a378:	eef0 0a68 	vmov.f32	s1, s17
 800a37c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a380:	f7ff f8fc 	bl	800957c <__ulp>
 800a384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a388:	ec53 2b10 	vmov	r2, r3, d0
 800a38c:	f7f6 f954 	bl	8000638 <__aeabi_dmul>
 800a390:	ec53 2b18 	vmov	r2, r3, d8
 800a394:	f7f5 ff9a 	bl	80002cc <__adddf3>
 800a398:	4680      	mov	r8, r0
 800a39a:	4689      	mov	r9, r1
 800a39c:	e78d      	b.n	800a2ba <_strtod_l+0xa82>
 800a39e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a3a2:	e7db      	b.n	800a35c <_strtod_l+0xb24>
 800a3a4:	a314      	add	r3, pc, #80	; (adr r3, 800a3f8 <_strtod_l+0xbc0>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f6 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 800a3ae:	e7b3      	b.n	800a318 <_strtod_l+0xae0>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	f7ff ba7c 	b.w	80098b6 <_strtod_l+0x7e>
 800a3be:	2a65      	cmp	r2, #101	; 0x65
 800a3c0:	f43f ab75 	beq.w	8009aae <_strtod_l+0x276>
 800a3c4:	2a45      	cmp	r2, #69	; 0x45
 800a3c6:	f43f ab72 	beq.w	8009aae <_strtod_l+0x276>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f7ff bbaa 	b.w	8009b24 <_strtod_l+0x2ec>
 800a3d0:	00000000 	.word	0x00000000
 800a3d4:	bff00000 	.word	0xbff00000
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	3ff00000 	.word	0x3ff00000
 800a3e0:	94a03595 	.word	0x94a03595
 800a3e4:	3fdfffff 	.word	0x3fdfffff
 800a3e8:	35afe535 	.word	0x35afe535
 800a3ec:	3fe00000 	.word	0x3fe00000
 800a3f0:	ffc00000 	.word	0xffc00000
 800a3f4:	41dfffff 	.word	0x41dfffff
 800a3f8:	94a03595 	.word	0x94a03595
 800a3fc:	3fcfffff 	.word	0x3fcfffff
 800a400:	3ff00000 	.word	0x3ff00000
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	7ff00000 	.word	0x7ff00000
 800a40c:	7fe00000 	.word	0x7fe00000
 800a410:	7c9fffff 	.word	0x7c9fffff
 800a414:	7fefffff 	.word	0x7fefffff

0800a418 <_strtod_r>:
 800a418:	4b01      	ldr	r3, [pc, #4]	; (800a420 <_strtod_r+0x8>)
 800a41a:	f7ff ba0d 	b.w	8009838 <_strtod_l>
 800a41e:	bf00      	nop
 800a420:	20000070 	.word	0x20000070

0800a424 <_strtol_l.constprop.0>:
 800a424:	2b01      	cmp	r3, #1
 800a426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42a:	d001      	beq.n	800a430 <_strtol_l.constprop.0+0xc>
 800a42c:	2b24      	cmp	r3, #36	; 0x24
 800a42e:	d906      	bls.n	800a43e <_strtol_l.constprop.0+0x1a>
 800a430:	f7fd fd7c 	bl	8007f2c <__errno>
 800a434:	2316      	movs	r3, #22
 800a436:	6003      	str	r3, [r0, #0]
 800a438:	2000      	movs	r0, #0
 800a43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a524 <_strtol_l.constprop.0+0x100>
 800a442:	460d      	mov	r5, r1
 800a444:	462e      	mov	r6, r5
 800a446:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a44a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a44e:	f017 0708 	ands.w	r7, r7, #8
 800a452:	d1f7      	bne.n	800a444 <_strtol_l.constprop.0+0x20>
 800a454:	2c2d      	cmp	r4, #45	; 0x2d
 800a456:	d132      	bne.n	800a4be <_strtol_l.constprop.0+0x9a>
 800a458:	782c      	ldrb	r4, [r5, #0]
 800a45a:	2701      	movs	r7, #1
 800a45c:	1cb5      	adds	r5, r6, #2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d05b      	beq.n	800a51a <_strtol_l.constprop.0+0xf6>
 800a462:	2b10      	cmp	r3, #16
 800a464:	d109      	bne.n	800a47a <_strtol_l.constprop.0+0x56>
 800a466:	2c30      	cmp	r4, #48	; 0x30
 800a468:	d107      	bne.n	800a47a <_strtol_l.constprop.0+0x56>
 800a46a:	782c      	ldrb	r4, [r5, #0]
 800a46c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a470:	2c58      	cmp	r4, #88	; 0x58
 800a472:	d14d      	bne.n	800a510 <_strtol_l.constprop.0+0xec>
 800a474:	786c      	ldrb	r4, [r5, #1]
 800a476:	2310      	movs	r3, #16
 800a478:	3502      	adds	r5, #2
 800a47a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a47e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a482:	f04f 0e00 	mov.w	lr, #0
 800a486:	fbb8 f9f3 	udiv	r9, r8, r3
 800a48a:	4676      	mov	r6, lr
 800a48c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a490:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a494:	f1bc 0f09 	cmp.w	ip, #9
 800a498:	d816      	bhi.n	800a4c8 <_strtol_l.constprop.0+0xa4>
 800a49a:	4664      	mov	r4, ip
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	dd24      	ble.n	800a4ea <_strtol_l.constprop.0+0xc6>
 800a4a0:	f1be 3fff 	cmp.w	lr, #4294967295
 800a4a4:	d008      	beq.n	800a4b8 <_strtol_l.constprop.0+0x94>
 800a4a6:	45b1      	cmp	r9, r6
 800a4a8:	d31c      	bcc.n	800a4e4 <_strtol_l.constprop.0+0xc0>
 800a4aa:	d101      	bne.n	800a4b0 <_strtol_l.constprop.0+0x8c>
 800a4ac:	45a2      	cmp	sl, r4
 800a4ae:	db19      	blt.n	800a4e4 <_strtol_l.constprop.0+0xc0>
 800a4b0:	fb06 4603 	mla	r6, r6, r3, r4
 800a4b4:	f04f 0e01 	mov.w	lr, #1
 800a4b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4bc:	e7e8      	b.n	800a490 <_strtol_l.constprop.0+0x6c>
 800a4be:	2c2b      	cmp	r4, #43	; 0x2b
 800a4c0:	bf04      	itt	eq
 800a4c2:	782c      	ldrbeq	r4, [r5, #0]
 800a4c4:	1cb5      	addeq	r5, r6, #2
 800a4c6:	e7ca      	b.n	800a45e <_strtol_l.constprop.0+0x3a>
 800a4c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4cc:	f1bc 0f19 	cmp.w	ip, #25
 800a4d0:	d801      	bhi.n	800a4d6 <_strtol_l.constprop.0+0xb2>
 800a4d2:	3c37      	subs	r4, #55	; 0x37
 800a4d4:	e7e2      	b.n	800a49c <_strtol_l.constprop.0+0x78>
 800a4d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a4da:	f1bc 0f19 	cmp.w	ip, #25
 800a4de:	d804      	bhi.n	800a4ea <_strtol_l.constprop.0+0xc6>
 800a4e0:	3c57      	subs	r4, #87	; 0x57
 800a4e2:	e7db      	b.n	800a49c <_strtol_l.constprop.0+0x78>
 800a4e4:	f04f 3eff 	mov.w	lr, #4294967295
 800a4e8:	e7e6      	b.n	800a4b8 <_strtol_l.constprop.0+0x94>
 800a4ea:	f1be 3fff 	cmp.w	lr, #4294967295
 800a4ee:	d105      	bne.n	800a4fc <_strtol_l.constprop.0+0xd8>
 800a4f0:	2322      	movs	r3, #34	; 0x22
 800a4f2:	6003      	str	r3, [r0, #0]
 800a4f4:	4646      	mov	r6, r8
 800a4f6:	b942      	cbnz	r2, 800a50a <_strtol_l.constprop.0+0xe6>
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	e79e      	b.n	800a43a <_strtol_l.constprop.0+0x16>
 800a4fc:	b107      	cbz	r7, 800a500 <_strtol_l.constprop.0+0xdc>
 800a4fe:	4276      	negs	r6, r6
 800a500:	2a00      	cmp	r2, #0
 800a502:	d0f9      	beq.n	800a4f8 <_strtol_l.constprop.0+0xd4>
 800a504:	f1be 0f00 	cmp.w	lr, #0
 800a508:	d000      	beq.n	800a50c <_strtol_l.constprop.0+0xe8>
 800a50a:	1e69      	subs	r1, r5, #1
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	e7f3      	b.n	800a4f8 <_strtol_l.constprop.0+0xd4>
 800a510:	2430      	movs	r4, #48	; 0x30
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1b1      	bne.n	800a47a <_strtol_l.constprop.0+0x56>
 800a516:	2308      	movs	r3, #8
 800a518:	e7af      	b.n	800a47a <_strtol_l.constprop.0+0x56>
 800a51a:	2c30      	cmp	r4, #48	; 0x30
 800a51c:	d0a5      	beq.n	800a46a <_strtol_l.constprop.0+0x46>
 800a51e:	230a      	movs	r3, #10
 800a520:	e7ab      	b.n	800a47a <_strtol_l.constprop.0+0x56>
 800a522:	bf00      	nop
 800a524:	0800c2a9 	.word	0x0800c2a9

0800a528 <_strtol_r>:
 800a528:	f7ff bf7c 	b.w	800a424 <_strtol_l.constprop.0>

0800a52c <__ssputs_r>:
 800a52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	688e      	ldr	r6, [r1, #8]
 800a532:	461f      	mov	r7, r3
 800a534:	42be      	cmp	r6, r7
 800a536:	680b      	ldr	r3, [r1, #0]
 800a538:	4682      	mov	sl, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	4690      	mov	r8, r2
 800a53e:	d82c      	bhi.n	800a59a <__ssputs_r+0x6e>
 800a540:	898a      	ldrh	r2, [r1, #12]
 800a542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a546:	d026      	beq.n	800a596 <__ssputs_r+0x6a>
 800a548:	6965      	ldr	r5, [r4, #20]
 800a54a:	6909      	ldr	r1, [r1, #16]
 800a54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a550:	eba3 0901 	sub.w	r9, r3, r1
 800a554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a558:	1c7b      	adds	r3, r7, #1
 800a55a:	444b      	add	r3, r9
 800a55c:	106d      	asrs	r5, r5, #1
 800a55e:	429d      	cmp	r5, r3
 800a560:	bf38      	it	cc
 800a562:	461d      	movcc	r5, r3
 800a564:	0553      	lsls	r3, r2, #21
 800a566:	d527      	bpl.n	800a5b8 <__ssputs_r+0x8c>
 800a568:	4629      	mov	r1, r5
 800a56a:	f7fe fc0f 	bl	8008d8c <_malloc_r>
 800a56e:	4606      	mov	r6, r0
 800a570:	b360      	cbz	r0, 800a5cc <__ssputs_r+0xa0>
 800a572:	6921      	ldr	r1, [r4, #16]
 800a574:	464a      	mov	r2, r9
 800a576:	f7fd fd05 	bl	8007f84 <memcpy>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	6126      	str	r6, [r4, #16]
 800a588:	6165      	str	r5, [r4, #20]
 800a58a:	444e      	add	r6, r9
 800a58c:	eba5 0509 	sub.w	r5, r5, r9
 800a590:	6026      	str	r6, [r4, #0]
 800a592:	60a5      	str	r5, [r4, #8]
 800a594:	463e      	mov	r6, r7
 800a596:	42be      	cmp	r6, r7
 800a598:	d900      	bls.n	800a59c <__ssputs_r+0x70>
 800a59a:	463e      	mov	r6, r7
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	f000 fd5c 	bl	800b05e <memmove>
 800a5a6:	68a3      	ldr	r3, [r4, #8]
 800a5a8:	1b9b      	subs	r3, r3, r6
 800a5aa:	60a3      	str	r3, [r4, #8]
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	4433      	add	r3, r6
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	f001 f932 	bl	800b822 <_realloc_r>
 800a5be:	4606      	mov	r6, r0
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d1e0      	bne.n	800a586 <__ssputs_r+0x5a>
 800a5c4:	6921      	ldr	r1, [r4, #16]
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	f7fe fb6c 	bl	8008ca4 <_free_r>
 800a5cc:	230c      	movs	r3, #12
 800a5ce:	f8ca 3000 	str.w	r3, [sl]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d8:	81a3      	strh	r3, [r4, #12]
 800a5da:	f04f 30ff 	mov.w	r0, #4294967295
 800a5de:	e7e9      	b.n	800a5b4 <__ssputs_r+0x88>

0800a5e0 <_svfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	4698      	mov	r8, r3
 800a5e6:	898b      	ldrh	r3, [r1, #12]
 800a5e8:	061b      	lsls	r3, r3, #24
 800a5ea:	b09d      	sub	sp, #116	; 0x74
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	460d      	mov	r5, r1
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	d50e      	bpl.n	800a612 <_svfiprintf_r+0x32>
 800a5f4:	690b      	ldr	r3, [r1, #16]
 800a5f6:	b963      	cbnz	r3, 800a612 <_svfiprintf_r+0x32>
 800a5f8:	2140      	movs	r1, #64	; 0x40
 800a5fa:	f7fe fbc7 	bl	8008d8c <_malloc_r>
 800a5fe:	6028      	str	r0, [r5, #0]
 800a600:	6128      	str	r0, [r5, #16]
 800a602:	b920      	cbnz	r0, 800a60e <_svfiprintf_r+0x2e>
 800a604:	230c      	movs	r3, #12
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	f04f 30ff 	mov.w	r0, #4294967295
 800a60c:	e0d0      	b.n	800a7b0 <_svfiprintf_r+0x1d0>
 800a60e:	2340      	movs	r3, #64	; 0x40
 800a610:	616b      	str	r3, [r5, #20]
 800a612:	2300      	movs	r3, #0
 800a614:	9309      	str	r3, [sp, #36]	; 0x24
 800a616:	2320      	movs	r3, #32
 800a618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a61c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a620:	2330      	movs	r3, #48	; 0x30
 800a622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a7c8 <_svfiprintf_r+0x1e8>
 800a626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a62a:	f04f 0901 	mov.w	r9, #1
 800a62e:	4623      	mov	r3, r4
 800a630:	469a      	mov	sl, r3
 800a632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a636:	b10a      	cbz	r2, 800a63c <_svfiprintf_r+0x5c>
 800a638:	2a25      	cmp	r2, #37	; 0x25
 800a63a:	d1f9      	bne.n	800a630 <_svfiprintf_r+0x50>
 800a63c:	ebba 0b04 	subs.w	fp, sl, r4
 800a640:	d00b      	beq.n	800a65a <_svfiprintf_r+0x7a>
 800a642:	465b      	mov	r3, fp
 800a644:	4622      	mov	r2, r4
 800a646:	4629      	mov	r1, r5
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ff6f 	bl	800a52c <__ssputs_r>
 800a64e:	3001      	adds	r0, #1
 800a650:	f000 80a9 	beq.w	800a7a6 <_svfiprintf_r+0x1c6>
 800a654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a656:	445a      	add	r2, fp
 800a658:	9209      	str	r2, [sp, #36]	; 0x24
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 80a1 	beq.w	800a7a6 <_svfiprintf_r+0x1c6>
 800a664:	2300      	movs	r3, #0
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66e:	f10a 0a01 	add.w	sl, sl, #1
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	9307      	str	r3, [sp, #28]
 800a676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a67a:	931a      	str	r3, [sp, #104]	; 0x68
 800a67c:	4654      	mov	r4, sl
 800a67e:	2205      	movs	r2, #5
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	4850      	ldr	r0, [pc, #320]	; (800a7c8 <_svfiprintf_r+0x1e8>)
 800a686:	f7f5 fdc3 	bl	8000210 <memchr>
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	b9d8      	cbnz	r0, 800a6c6 <_svfiprintf_r+0xe6>
 800a68e:	06d0      	lsls	r0, r2, #27
 800a690:	bf44      	itt	mi
 800a692:	2320      	movmi	r3, #32
 800a694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a698:	0711      	lsls	r1, r2, #28
 800a69a:	bf44      	itt	mi
 800a69c:	232b      	movmi	r3, #43	; 0x2b
 800a69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a8:	d015      	beq.n	800a6d6 <_svfiprintf_r+0xf6>
 800a6aa:	9a07      	ldr	r2, [sp, #28]
 800a6ac:	4654      	mov	r4, sl
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f04f 0c0a 	mov.w	ip, #10
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ba:	3b30      	subs	r3, #48	; 0x30
 800a6bc:	2b09      	cmp	r3, #9
 800a6be:	d94d      	bls.n	800a75c <_svfiprintf_r+0x17c>
 800a6c0:	b1b0      	cbz	r0, 800a6f0 <_svfiprintf_r+0x110>
 800a6c2:	9207      	str	r2, [sp, #28]
 800a6c4:	e014      	b.n	800a6f0 <_svfiprintf_r+0x110>
 800a6c6:	eba0 0308 	sub.w	r3, r0, r8
 800a6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	46a2      	mov	sl, r4
 800a6d4:	e7d2      	b.n	800a67c <_svfiprintf_r+0x9c>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1d19      	adds	r1, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9103      	str	r1, [sp, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfbb      	ittet	lt
 800a6e2:	425b      	neglt	r3, r3
 800a6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e8:	9307      	strge	r3, [sp, #28]
 800a6ea:	9307      	strlt	r3, [sp, #28]
 800a6ec:	bfb8      	it	lt
 800a6ee:	9204      	strlt	r2, [sp, #16]
 800a6f0:	7823      	ldrb	r3, [r4, #0]
 800a6f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6f4:	d10c      	bne.n	800a710 <_svfiprintf_r+0x130>
 800a6f6:	7863      	ldrb	r3, [r4, #1]
 800a6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6fa:	d134      	bne.n	800a766 <_svfiprintf_r+0x186>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	9203      	str	r2, [sp, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfb8      	it	lt
 800a708:	f04f 33ff 	movlt.w	r3, #4294967295
 800a70c:	3402      	adds	r4, #2
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a7d8 <_svfiprintf_r+0x1f8>
 800a714:	7821      	ldrb	r1, [r4, #0]
 800a716:	2203      	movs	r2, #3
 800a718:	4650      	mov	r0, sl
 800a71a:	f7f5 fd79 	bl	8000210 <memchr>
 800a71e:	b138      	cbz	r0, 800a730 <_svfiprintf_r+0x150>
 800a720:	9b04      	ldr	r3, [sp, #16]
 800a722:	eba0 000a 	sub.w	r0, r0, sl
 800a726:	2240      	movs	r2, #64	; 0x40
 800a728:	4082      	lsls	r2, r0
 800a72a:	4313      	orrs	r3, r2
 800a72c:	3401      	adds	r4, #1
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a734:	4825      	ldr	r0, [pc, #148]	; (800a7cc <_svfiprintf_r+0x1ec>)
 800a736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a73a:	2206      	movs	r2, #6
 800a73c:	f7f5 fd68 	bl	8000210 <memchr>
 800a740:	2800      	cmp	r0, #0
 800a742:	d038      	beq.n	800a7b6 <_svfiprintf_r+0x1d6>
 800a744:	4b22      	ldr	r3, [pc, #136]	; (800a7d0 <_svfiprintf_r+0x1f0>)
 800a746:	bb1b      	cbnz	r3, 800a790 <_svfiprintf_r+0x1b0>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	3307      	adds	r3, #7
 800a74c:	f023 0307 	bic.w	r3, r3, #7
 800a750:	3308      	adds	r3, #8
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a756:	4433      	add	r3, r6
 800a758:	9309      	str	r3, [sp, #36]	; 0x24
 800a75a:	e768      	b.n	800a62e <_svfiprintf_r+0x4e>
 800a75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a760:	460c      	mov	r4, r1
 800a762:	2001      	movs	r0, #1
 800a764:	e7a6      	b.n	800a6b4 <_svfiprintf_r+0xd4>
 800a766:	2300      	movs	r3, #0
 800a768:	3401      	adds	r4, #1
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	4619      	mov	r1, r3
 800a76e:	f04f 0c0a 	mov.w	ip, #10
 800a772:	4620      	mov	r0, r4
 800a774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a778:	3a30      	subs	r2, #48	; 0x30
 800a77a:	2a09      	cmp	r2, #9
 800a77c:	d903      	bls.n	800a786 <_svfiprintf_r+0x1a6>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0c6      	beq.n	800a710 <_svfiprintf_r+0x130>
 800a782:	9105      	str	r1, [sp, #20]
 800a784:	e7c4      	b.n	800a710 <_svfiprintf_r+0x130>
 800a786:	fb0c 2101 	mla	r1, ip, r1, r2
 800a78a:	4604      	mov	r4, r0
 800a78c:	2301      	movs	r3, #1
 800a78e:	e7f0      	b.n	800a772 <_svfiprintf_r+0x192>
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	462a      	mov	r2, r5
 800a796:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <_svfiprintf_r+0x1f4>)
 800a798:	a904      	add	r1, sp, #16
 800a79a:	4638      	mov	r0, r7
 800a79c:	f7fc fc06 	bl	8006fac <_printf_float>
 800a7a0:	1c42      	adds	r2, r0, #1
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	d1d6      	bne.n	800a754 <_svfiprintf_r+0x174>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	065b      	lsls	r3, r3, #25
 800a7aa:	f53f af2d 	bmi.w	800a608 <_svfiprintf_r+0x28>
 800a7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7b0:	b01d      	add	sp, #116	; 0x74
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	ab03      	add	r3, sp, #12
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <_svfiprintf_r+0x1f4>)
 800a7be:	a904      	add	r1, sp, #16
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7fc fe97 	bl	80074f4 <_printf_i>
 800a7c6:	e7eb      	b.n	800a7a0 <_svfiprintf_r+0x1c0>
 800a7c8:	0800c3a9 	.word	0x0800c3a9
 800a7cc:	0800c3b3 	.word	0x0800c3b3
 800a7d0:	08006fad 	.word	0x08006fad
 800a7d4:	0800a52d 	.word	0x0800a52d
 800a7d8:	0800c3af 	.word	0x0800c3af

0800a7dc <_sungetc_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	1c4b      	adds	r3, r1, #1
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	d103      	bne.n	800a7ec <_sungetc_r+0x10>
 800a7e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	8993      	ldrh	r3, [r2, #12]
 800a7ee:	f023 0320 	bic.w	r3, r3, #32
 800a7f2:	8193      	strh	r3, [r2, #12]
 800a7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7f6:	6852      	ldr	r2, [r2, #4]
 800a7f8:	b2cd      	uxtb	r5, r1
 800a7fa:	b18b      	cbz	r3, 800a820 <_sungetc_r+0x44>
 800a7fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7fe:	4293      	cmp	r3, r2
 800a800:	dd08      	ble.n	800a814 <_sungetc_r+0x38>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a80c:	6863      	ldr	r3, [r4, #4]
 800a80e:	3301      	adds	r3, #1
 800a810:	6063      	str	r3, [r4, #4]
 800a812:	e7e9      	b.n	800a7e8 <_sungetc_r+0xc>
 800a814:	4621      	mov	r1, r4
 800a816:	f000 fbe8 	bl	800afea <__submore>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0f1      	beq.n	800a802 <_sungetc_r+0x26>
 800a81e:	e7e1      	b.n	800a7e4 <_sungetc_r+0x8>
 800a820:	6921      	ldr	r1, [r4, #16]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	b151      	cbz	r1, 800a83c <_sungetc_r+0x60>
 800a826:	4299      	cmp	r1, r3
 800a828:	d208      	bcs.n	800a83c <_sungetc_r+0x60>
 800a82a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a82e:	42a9      	cmp	r1, r5
 800a830:	d104      	bne.n	800a83c <_sungetc_r+0x60>
 800a832:	3b01      	subs	r3, #1
 800a834:	3201      	adds	r2, #1
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	6062      	str	r2, [r4, #4]
 800a83a:	e7d5      	b.n	800a7e8 <_sungetc_r+0xc>
 800a83c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a844:	6363      	str	r3, [r4, #52]	; 0x34
 800a846:	2303      	movs	r3, #3
 800a848:	63a3      	str	r3, [r4, #56]	; 0x38
 800a84a:	4623      	mov	r3, r4
 800a84c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	2301      	movs	r3, #1
 800a854:	e7dc      	b.n	800a810 <_sungetc_r+0x34>

0800a856 <__ssrefill_r>:
 800a856:	b510      	push	{r4, lr}
 800a858:	460c      	mov	r4, r1
 800a85a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a85c:	b169      	cbz	r1, 800a87a <__ssrefill_r+0x24>
 800a85e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a862:	4299      	cmp	r1, r3
 800a864:	d001      	beq.n	800a86a <__ssrefill_r+0x14>
 800a866:	f7fe fa1d 	bl	8008ca4 <_free_r>
 800a86a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	2000      	movs	r0, #0
 800a870:	6360      	str	r0, [r4, #52]	; 0x34
 800a872:	b113      	cbz	r3, 800a87a <__ssrefill_r+0x24>
 800a874:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	2300      	movs	r3, #0
 800a880:	6063      	str	r3, [r4, #4]
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0320 	orr.w	r3, r3, #32
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	f04f 30ff 	mov.w	r0, #4294967295
 800a88e:	e7f3      	b.n	800a878 <__ssrefill_r+0x22>

0800a890 <__ssvfiscanf_r>:
 800a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a894:	460c      	mov	r4, r1
 800a896:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a89a:	2100      	movs	r1, #0
 800a89c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a8a0:	49a6      	ldr	r1, [pc, #664]	; (800ab3c <__ssvfiscanf_r+0x2ac>)
 800a8a2:	91a0      	str	r1, [sp, #640]	; 0x280
 800a8a4:	f10d 0804 	add.w	r8, sp, #4
 800a8a8:	49a5      	ldr	r1, [pc, #660]	; (800ab40 <__ssvfiscanf_r+0x2b0>)
 800a8aa:	4fa6      	ldr	r7, [pc, #664]	; (800ab44 <__ssvfiscanf_r+0x2b4>)
 800a8ac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ab48 <__ssvfiscanf_r+0x2b8>
 800a8b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	91a1      	str	r1, [sp, #644]	; 0x284
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	7813      	ldrb	r3, [r2, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 815a 	beq.w	800ab76 <__ssvfiscanf_r+0x2e6>
 800a8c2:	5cf9      	ldrb	r1, [r7, r3]
 800a8c4:	f011 0108 	ands.w	r1, r1, #8
 800a8c8:	f102 0501 	add.w	r5, r2, #1
 800a8cc:	d019      	beq.n	800a902 <__ssvfiscanf_r+0x72>
 800a8ce:	6863      	ldr	r3, [r4, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dd0f      	ble.n	800a8f4 <__ssvfiscanf_r+0x64>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	5cba      	ldrb	r2, [r7, r2]
 800a8da:	0712      	lsls	r2, r2, #28
 800a8dc:	d401      	bmi.n	800a8e2 <__ssvfiscanf_r+0x52>
 800a8de:	462a      	mov	r2, r5
 800a8e0:	e7eb      	b.n	800a8ba <__ssvfiscanf_r+0x2a>
 800a8e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8e4:	3201      	adds	r2, #1
 800a8e6:	9245      	str	r2, [sp, #276]	; 0x114
 800a8e8:	6862      	ldr	r2, [r4, #4]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	3a01      	subs	r2, #1
 800a8ee:	6062      	str	r2, [r4, #4]
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	e7ec      	b.n	800a8ce <__ssvfiscanf_r+0x3e>
 800a8f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	4798      	blx	r3
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d0e9      	beq.n	800a8d4 <__ssvfiscanf_r+0x44>
 800a900:	e7ed      	b.n	800a8de <__ssvfiscanf_r+0x4e>
 800a902:	2b25      	cmp	r3, #37	; 0x25
 800a904:	d012      	beq.n	800a92c <__ssvfiscanf_r+0x9c>
 800a906:	469a      	mov	sl, r3
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f340 8091 	ble.w	800aa32 <__ssvfiscanf_r+0x1a2>
 800a910:	6822      	ldr	r2, [r4, #0]
 800a912:	7813      	ldrb	r3, [r2, #0]
 800a914:	4553      	cmp	r3, sl
 800a916:	f040 812e 	bne.w	800ab76 <__ssvfiscanf_r+0x2e6>
 800a91a:	6863      	ldr	r3, [r4, #4]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	6063      	str	r3, [r4, #4]
 800a920:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a922:	3201      	adds	r2, #1
 800a924:	3301      	adds	r3, #1
 800a926:	6022      	str	r2, [r4, #0]
 800a928:	9345      	str	r3, [sp, #276]	; 0x114
 800a92a:	e7d8      	b.n	800a8de <__ssvfiscanf_r+0x4e>
 800a92c:	9141      	str	r1, [sp, #260]	; 0x104
 800a92e:	9143      	str	r1, [sp, #268]	; 0x10c
 800a930:	7853      	ldrb	r3, [r2, #1]
 800a932:	2b2a      	cmp	r3, #42	; 0x2a
 800a934:	bf02      	ittt	eq
 800a936:	2310      	moveq	r3, #16
 800a938:	1c95      	addeq	r5, r2, #2
 800a93a:	9341      	streq	r3, [sp, #260]	; 0x104
 800a93c:	220a      	movs	r2, #10
 800a93e:	46aa      	mov	sl, r5
 800a940:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a944:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a948:	2b09      	cmp	r3, #9
 800a94a:	d91c      	bls.n	800a986 <__ssvfiscanf_r+0xf6>
 800a94c:	487e      	ldr	r0, [pc, #504]	; (800ab48 <__ssvfiscanf_r+0x2b8>)
 800a94e:	2203      	movs	r2, #3
 800a950:	f7f5 fc5e 	bl	8000210 <memchr>
 800a954:	b138      	cbz	r0, 800a966 <__ssvfiscanf_r+0xd6>
 800a956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a958:	eba0 0009 	sub.w	r0, r0, r9
 800a95c:	2301      	movs	r3, #1
 800a95e:	4083      	lsls	r3, r0
 800a960:	4313      	orrs	r3, r2
 800a962:	9341      	str	r3, [sp, #260]	; 0x104
 800a964:	4655      	mov	r5, sl
 800a966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a96a:	2b78      	cmp	r3, #120	; 0x78
 800a96c:	d806      	bhi.n	800a97c <__ssvfiscanf_r+0xec>
 800a96e:	2b57      	cmp	r3, #87	; 0x57
 800a970:	d810      	bhi.n	800a994 <__ssvfiscanf_r+0x104>
 800a972:	2b25      	cmp	r3, #37	; 0x25
 800a974:	d0c7      	beq.n	800a906 <__ssvfiscanf_r+0x76>
 800a976:	d857      	bhi.n	800aa28 <__ssvfiscanf_r+0x198>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d065      	beq.n	800aa48 <__ssvfiscanf_r+0x1b8>
 800a97c:	2303      	movs	r3, #3
 800a97e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a980:	230a      	movs	r3, #10
 800a982:	9342      	str	r3, [sp, #264]	; 0x108
 800a984:	e076      	b.n	800aa74 <__ssvfiscanf_r+0x1e4>
 800a986:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a988:	fb02 1103 	mla	r1, r2, r3, r1
 800a98c:	3930      	subs	r1, #48	; 0x30
 800a98e:	9143      	str	r1, [sp, #268]	; 0x10c
 800a990:	4655      	mov	r5, sl
 800a992:	e7d4      	b.n	800a93e <__ssvfiscanf_r+0xae>
 800a994:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a998:	2a20      	cmp	r2, #32
 800a99a:	d8ef      	bhi.n	800a97c <__ssvfiscanf_r+0xec>
 800a99c:	a101      	add	r1, pc, #4	; (adr r1, 800a9a4 <__ssvfiscanf_r+0x114>)
 800a99e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800aa57 	.word	0x0800aa57
 800a9a8:	0800a97d 	.word	0x0800a97d
 800a9ac:	0800a97d 	.word	0x0800a97d
 800a9b0:	0800aab5 	.word	0x0800aab5
 800a9b4:	0800a97d 	.word	0x0800a97d
 800a9b8:	0800a97d 	.word	0x0800a97d
 800a9bc:	0800a97d 	.word	0x0800a97d
 800a9c0:	0800a97d 	.word	0x0800a97d
 800a9c4:	0800a97d 	.word	0x0800a97d
 800a9c8:	0800a97d 	.word	0x0800a97d
 800a9cc:	0800a97d 	.word	0x0800a97d
 800a9d0:	0800aacb 	.word	0x0800aacb
 800a9d4:	0800aab1 	.word	0x0800aab1
 800a9d8:	0800aa2f 	.word	0x0800aa2f
 800a9dc:	0800aa2f 	.word	0x0800aa2f
 800a9e0:	0800aa2f 	.word	0x0800aa2f
 800a9e4:	0800a97d 	.word	0x0800a97d
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800a97d 	.word	0x0800a97d
 800a9f0:	0800a97d 	.word	0x0800a97d
 800a9f4:	0800a97d 	.word	0x0800a97d
 800a9f8:	0800a97d 	.word	0x0800a97d
 800a9fc:	0800aadb 	.word	0x0800aadb
 800aa00:	0800aaa9 	.word	0x0800aaa9
 800aa04:	0800aa4f 	.word	0x0800aa4f
 800aa08:	0800a97d 	.word	0x0800a97d
 800aa0c:	0800a97d 	.word	0x0800a97d
 800aa10:	0800aad7 	.word	0x0800aad7
 800aa14:	0800a97d 	.word	0x0800a97d
 800aa18:	0800aab1 	.word	0x0800aab1
 800aa1c:	0800a97d 	.word	0x0800a97d
 800aa20:	0800a97d 	.word	0x0800a97d
 800aa24:	0800aa57 	.word	0x0800aa57
 800aa28:	3b45      	subs	r3, #69	; 0x45
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d8a6      	bhi.n	800a97c <__ssvfiscanf_r+0xec>
 800aa2e:	2305      	movs	r3, #5
 800aa30:	e01f      	b.n	800aa72 <__ssvfiscanf_r+0x1e2>
 800aa32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa34:	4621      	mov	r1, r4
 800aa36:	4630      	mov	r0, r6
 800aa38:	4798      	blx	r3
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f af68 	beq.w	800a910 <__ssvfiscanf_r+0x80>
 800aa40:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f040 808d 	bne.w	800ab62 <__ssvfiscanf_r+0x2d2>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4c:	e08f      	b.n	800ab6e <__ssvfiscanf_r+0x2de>
 800aa4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa50:	f042 0220 	orr.w	r2, r2, #32
 800aa54:	9241      	str	r2, [sp, #260]	; 0x104
 800aa56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa5c:	9241      	str	r2, [sp, #260]	; 0x104
 800aa5e:	2210      	movs	r2, #16
 800aa60:	2b6f      	cmp	r3, #111	; 0x6f
 800aa62:	9242      	str	r2, [sp, #264]	; 0x108
 800aa64:	bf34      	ite	cc
 800aa66:	2303      	movcc	r3, #3
 800aa68:	2304      	movcs	r3, #4
 800aa6a:	e002      	b.n	800aa72 <__ssvfiscanf_r+0x1e2>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9342      	str	r3, [sp, #264]	; 0x108
 800aa70:	2303      	movs	r3, #3
 800aa72:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dd3d      	ble.n	800aaf6 <__ssvfiscanf_r+0x266>
 800aa7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa7c:	0659      	lsls	r1, r3, #25
 800aa7e:	d404      	bmi.n	800aa8a <__ssvfiscanf_r+0x1fa>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	5cba      	ldrb	r2, [r7, r2]
 800aa86:	0712      	lsls	r2, r2, #28
 800aa88:	d43c      	bmi.n	800ab04 <__ssvfiscanf_r+0x274>
 800aa8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	dc4b      	bgt.n	800ab28 <__ssvfiscanf_r+0x298>
 800aa90:	466b      	mov	r3, sp
 800aa92:	4622      	mov	r2, r4
 800aa94:	a941      	add	r1, sp, #260	; 0x104
 800aa96:	4630      	mov	r0, r6
 800aa98:	f000 f872 	bl	800ab80 <_scanf_chars>
 800aa9c:	2801      	cmp	r0, #1
 800aa9e:	d06a      	beq.n	800ab76 <__ssvfiscanf_r+0x2e6>
 800aaa0:	2802      	cmp	r0, #2
 800aaa2:	f47f af1c 	bne.w	800a8de <__ssvfiscanf_r+0x4e>
 800aaa6:	e7cb      	b.n	800aa40 <__ssvfiscanf_r+0x1b0>
 800aaa8:	2308      	movs	r3, #8
 800aaaa:	9342      	str	r3, [sp, #264]	; 0x108
 800aaac:	2304      	movs	r3, #4
 800aaae:	e7e0      	b.n	800aa72 <__ssvfiscanf_r+0x1e2>
 800aab0:	220a      	movs	r2, #10
 800aab2:	e7d5      	b.n	800aa60 <__ssvfiscanf_r+0x1d0>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4640      	mov	r0, r8
 800aab8:	f000 fa5e 	bl	800af78 <__sccl>
 800aabc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac2:	9341      	str	r3, [sp, #260]	; 0x104
 800aac4:	4605      	mov	r5, r0
 800aac6:	2301      	movs	r3, #1
 800aac8:	e7d3      	b.n	800aa72 <__ssvfiscanf_r+0x1e2>
 800aaca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad0:	9341      	str	r3, [sp, #260]	; 0x104
 800aad2:	2300      	movs	r3, #0
 800aad4:	e7cd      	b.n	800aa72 <__ssvfiscanf_r+0x1e2>
 800aad6:	2302      	movs	r3, #2
 800aad8:	e7cb      	b.n	800aa72 <__ssvfiscanf_r+0x1e2>
 800aada:	9841      	ldr	r0, [sp, #260]	; 0x104
 800aadc:	06c3      	lsls	r3, r0, #27
 800aade:	f53f aefe 	bmi.w	800a8de <__ssvfiscanf_r+0x4e>
 800aae2:	9b00      	ldr	r3, [sp, #0]
 800aae4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aae6:	1d19      	adds	r1, r3, #4
 800aae8:	9100      	str	r1, [sp, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	07c0      	lsls	r0, r0, #31
 800aaee:	bf4c      	ite	mi
 800aaf0:	801a      	strhmi	r2, [r3, #0]
 800aaf2:	601a      	strpl	r2, [r3, #0]
 800aaf4:	e6f3      	b.n	800a8de <__ssvfiscanf_r+0x4e>
 800aaf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aaf8:	4621      	mov	r1, r4
 800aafa:	4630      	mov	r0, r6
 800aafc:	4798      	blx	r3
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d0bb      	beq.n	800aa7a <__ssvfiscanf_r+0x1ea>
 800ab02:	e79d      	b.n	800aa40 <__ssvfiscanf_r+0x1b0>
 800ab04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab06:	3201      	adds	r2, #1
 800ab08:	9245      	str	r2, [sp, #276]	; 0x114
 800ab0a:	6862      	ldr	r2, [r4, #4]
 800ab0c:	3a01      	subs	r2, #1
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	6062      	str	r2, [r4, #4]
 800ab12:	dd02      	ble.n	800ab1a <__ssvfiscanf_r+0x28a>
 800ab14:	3301      	adds	r3, #1
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	e7b2      	b.n	800aa80 <__ssvfiscanf_r+0x1f0>
 800ab1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4630      	mov	r0, r6
 800ab20:	4798      	blx	r3
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0ac      	beq.n	800aa80 <__ssvfiscanf_r+0x1f0>
 800ab26:	e78b      	b.n	800aa40 <__ssvfiscanf_r+0x1b0>
 800ab28:	2b04      	cmp	r3, #4
 800ab2a:	dc0f      	bgt.n	800ab4c <__ssvfiscanf_r+0x2bc>
 800ab2c:	466b      	mov	r3, sp
 800ab2e:	4622      	mov	r2, r4
 800ab30:	a941      	add	r1, sp, #260	; 0x104
 800ab32:	4630      	mov	r0, r6
 800ab34:	f000 f87e 	bl	800ac34 <_scanf_i>
 800ab38:	e7b0      	b.n	800aa9c <__ssvfiscanf_r+0x20c>
 800ab3a:	bf00      	nop
 800ab3c:	0800a7dd 	.word	0x0800a7dd
 800ab40:	0800a857 	.word	0x0800a857
 800ab44:	0800c2a9 	.word	0x0800c2a9
 800ab48:	0800c3af 	.word	0x0800c3af
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <__ssvfiscanf_r+0x2ec>)
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f43f aec5 	beq.w	800a8de <__ssvfiscanf_r+0x4e>
 800ab54:	466b      	mov	r3, sp
 800ab56:	4622      	mov	r2, r4
 800ab58:	a941      	add	r1, sp, #260	; 0x104
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7fc fdec 	bl	8007738 <_scanf_float>
 800ab60:	e79c      	b.n	800aa9c <__ssvfiscanf_r+0x20c>
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab68:	bf18      	it	ne
 800ab6a:	f04f 30ff 	movne.w	r0, #4294967295
 800ab6e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ab78:	e7f9      	b.n	800ab6e <__ssvfiscanf_r+0x2de>
 800ab7a:	bf00      	nop
 800ab7c:	08007739 	.word	0x08007739

0800ab80 <_scanf_chars>:
 800ab80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab84:	4615      	mov	r5, r2
 800ab86:	688a      	ldr	r2, [r1, #8]
 800ab88:	4680      	mov	r8, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	b932      	cbnz	r2, 800ab9c <_scanf_chars+0x1c>
 800ab8e:	698a      	ldr	r2, [r1, #24]
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	bf0c      	ite	eq
 800ab94:	2201      	moveq	r2, #1
 800ab96:	f04f 32ff 	movne.w	r2, #4294967295
 800ab9a:	608a      	str	r2, [r1, #8]
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ac30 <_scanf_chars+0xb0>
 800aba2:	06d1      	lsls	r1, r2, #27
 800aba4:	bf5f      	itttt	pl
 800aba6:	681a      	ldrpl	r2, [r3, #0]
 800aba8:	1d11      	addpl	r1, r2, #4
 800abaa:	6019      	strpl	r1, [r3, #0]
 800abac:	6816      	ldrpl	r6, [r2, #0]
 800abae:	2700      	movs	r7, #0
 800abb0:	69a0      	ldr	r0, [r4, #24]
 800abb2:	b188      	cbz	r0, 800abd8 <_scanf_chars+0x58>
 800abb4:	2801      	cmp	r0, #1
 800abb6:	d107      	bne.n	800abc8 <_scanf_chars+0x48>
 800abb8:	682a      	ldr	r2, [r5, #0]
 800abba:	7811      	ldrb	r1, [r2, #0]
 800abbc:	6962      	ldr	r2, [r4, #20]
 800abbe:	5c52      	ldrb	r2, [r2, r1]
 800abc0:	b952      	cbnz	r2, 800abd8 <_scanf_chars+0x58>
 800abc2:	2f00      	cmp	r7, #0
 800abc4:	d031      	beq.n	800ac2a <_scanf_chars+0xaa>
 800abc6:	e022      	b.n	800ac0e <_scanf_chars+0x8e>
 800abc8:	2802      	cmp	r0, #2
 800abca:	d120      	bne.n	800ac0e <_scanf_chars+0x8e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800abd4:	071b      	lsls	r3, r3, #28
 800abd6:	d41a      	bmi.n	800ac0e <_scanf_chars+0x8e>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	06da      	lsls	r2, r3, #27
 800abdc:	bf5e      	ittt	pl
 800abde:	682b      	ldrpl	r3, [r5, #0]
 800abe0:	781b      	ldrbpl	r3, [r3, #0]
 800abe2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800abe6:	682a      	ldr	r2, [r5, #0]
 800abe8:	686b      	ldr	r3, [r5, #4]
 800abea:	3201      	adds	r2, #1
 800abec:	602a      	str	r2, [r5, #0]
 800abee:	68a2      	ldr	r2, [r4, #8]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	3a01      	subs	r2, #1
 800abf4:	606b      	str	r3, [r5, #4]
 800abf6:	3701      	adds	r7, #1
 800abf8:	60a2      	str	r2, [r4, #8]
 800abfa:	b142      	cbz	r2, 800ac0e <_scanf_chars+0x8e>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dcd7      	bgt.n	800abb0 <_scanf_chars+0x30>
 800ac00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac04:	4629      	mov	r1, r5
 800ac06:	4640      	mov	r0, r8
 800ac08:	4798      	blx	r3
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d0d0      	beq.n	800abb0 <_scanf_chars+0x30>
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	f013 0310 	ands.w	r3, r3, #16
 800ac14:	d105      	bne.n	800ac22 <_scanf_chars+0xa2>
 800ac16:	68e2      	ldr	r2, [r4, #12]
 800ac18:	3201      	adds	r2, #1
 800ac1a:	60e2      	str	r2, [r4, #12]
 800ac1c:	69a2      	ldr	r2, [r4, #24]
 800ac1e:	b102      	cbz	r2, 800ac22 <_scanf_chars+0xa2>
 800ac20:	7033      	strb	r3, [r6, #0]
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	443b      	add	r3, r7
 800ac26:	6123      	str	r3, [r4, #16]
 800ac28:	2000      	movs	r0, #0
 800ac2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac2e:	bf00      	nop
 800ac30:	0800c2a9 	.word	0x0800c2a9

0800ac34 <_scanf_i>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	4698      	mov	r8, r3
 800ac3a:	4b74      	ldr	r3, [pc, #464]	; (800ae0c <_scanf_i+0x1d8>)
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	4682      	mov	sl, r0
 800ac40:	4616      	mov	r6, r2
 800ac42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac46:	b087      	sub	sp, #28
 800ac48:	ab03      	add	r3, sp, #12
 800ac4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ac4e:	4b70      	ldr	r3, [pc, #448]	; (800ae10 <_scanf_i+0x1dc>)
 800ac50:	69a1      	ldr	r1, [r4, #24]
 800ac52:	4a70      	ldr	r2, [pc, #448]	; (800ae14 <_scanf_i+0x1e0>)
 800ac54:	2903      	cmp	r1, #3
 800ac56:	bf18      	it	ne
 800ac58:	461a      	movne	r2, r3
 800ac5a:	68a3      	ldr	r3, [r4, #8]
 800ac5c:	9201      	str	r2, [sp, #4]
 800ac5e:	1e5a      	subs	r2, r3, #1
 800ac60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac64:	bf88      	it	hi
 800ac66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac6a:	4627      	mov	r7, r4
 800ac6c:	bf82      	ittt	hi
 800ac6e:	eb03 0905 	addhi.w	r9, r3, r5
 800ac72:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac76:	60a3      	strhi	r3, [r4, #8]
 800ac78:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ac7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ac80:	bf98      	it	ls
 800ac82:	f04f 0900 	movls.w	r9, #0
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	463d      	mov	r5, r7
 800ac8a:	f04f 0b00 	mov.w	fp, #0
 800ac8e:	6831      	ldr	r1, [r6, #0]
 800ac90:	ab03      	add	r3, sp, #12
 800ac92:	7809      	ldrb	r1, [r1, #0]
 800ac94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ac98:	2202      	movs	r2, #2
 800ac9a:	f7f5 fab9 	bl	8000210 <memchr>
 800ac9e:	b328      	cbz	r0, 800acec <_scanf_i+0xb8>
 800aca0:	f1bb 0f01 	cmp.w	fp, #1
 800aca4:	d159      	bne.n	800ad5a <_scanf_i+0x126>
 800aca6:	6862      	ldr	r2, [r4, #4]
 800aca8:	b92a      	cbnz	r2, 800acb6 <_scanf_i+0x82>
 800acaa:	6822      	ldr	r2, [r4, #0]
 800acac:	2308      	movs	r3, #8
 800acae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acb2:	6063      	str	r3, [r4, #4]
 800acb4:	6022      	str	r2, [r4, #0]
 800acb6:	6822      	ldr	r2, [r4, #0]
 800acb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800acbc:	6022      	str	r2, [r4, #0]
 800acbe:	68a2      	ldr	r2, [r4, #8]
 800acc0:	1e51      	subs	r1, r2, #1
 800acc2:	60a1      	str	r1, [r4, #8]
 800acc4:	b192      	cbz	r2, 800acec <_scanf_i+0xb8>
 800acc6:	6832      	ldr	r2, [r6, #0]
 800acc8:	1c51      	adds	r1, r2, #1
 800acca:	6031      	str	r1, [r6, #0]
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	f805 2b01 	strb.w	r2, [r5], #1
 800acd2:	6872      	ldr	r2, [r6, #4]
 800acd4:	3a01      	subs	r2, #1
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	6072      	str	r2, [r6, #4]
 800acda:	dc07      	bgt.n	800acec <_scanf_i+0xb8>
 800acdc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ace0:	4631      	mov	r1, r6
 800ace2:	4650      	mov	r0, sl
 800ace4:	4790      	blx	r2
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f040 8085 	bne.w	800adf6 <_scanf_i+0x1c2>
 800acec:	f10b 0b01 	add.w	fp, fp, #1
 800acf0:	f1bb 0f03 	cmp.w	fp, #3
 800acf4:	d1cb      	bne.n	800ac8e <_scanf_i+0x5a>
 800acf6:	6863      	ldr	r3, [r4, #4]
 800acf8:	b90b      	cbnz	r3, 800acfe <_scanf_i+0xca>
 800acfa:	230a      	movs	r3, #10
 800acfc:	6063      	str	r3, [r4, #4]
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	4945      	ldr	r1, [pc, #276]	; (800ae18 <_scanf_i+0x1e4>)
 800ad02:	6960      	ldr	r0, [r4, #20]
 800ad04:	1ac9      	subs	r1, r1, r3
 800ad06:	f000 f937 	bl	800af78 <__sccl>
 800ad0a:	f04f 0b00 	mov.w	fp, #0
 800ad0e:	68a3      	ldr	r3, [r4, #8]
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d03d      	beq.n	800ad92 <_scanf_i+0x15e>
 800ad16:	6831      	ldr	r1, [r6, #0]
 800ad18:	6960      	ldr	r0, [r4, #20]
 800ad1a:	f891 c000 	ldrb.w	ip, [r1]
 800ad1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d035      	beq.n	800ad92 <_scanf_i+0x15e>
 800ad26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ad2a:	d124      	bne.n	800ad76 <_scanf_i+0x142>
 800ad2c:	0510      	lsls	r0, r2, #20
 800ad2e:	d522      	bpl.n	800ad76 <_scanf_i+0x142>
 800ad30:	f10b 0b01 	add.w	fp, fp, #1
 800ad34:	f1b9 0f00 	cmp.w	r9, #0
 800ad38:	d003      	beq.n	800ad42 <_scanf_i+0x10e>
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	6873      	ldr	r3, [r6, #4]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	6073      	str	r3, [r6, #4]
 800ad4a:	dd1b      	ble.n	800ad84 <_scanf_i+0x150>
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	e7d9      	b.n	800ad0e <_scanf_i+0xda>
 800ad5a:	f1bb 0f02 	cmp.w	fp, #2
 800ad5e:	d1ae      	bne.n	800acbe <_scanf_i+0x8a>
 800ad60:	6822      	ldr	r2, [r4, #0]
 800ad62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ad66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ad6a:	d1bf      	bne.n	800acec <_scanf_i+0xb8>
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	6063      	str	r3, [r4, #4]
 800ad70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad74:	e7a2      	b.n	800acbc <_scanf_i+0x88>
 800ad76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ad7a:	6022      	str	r2, [r4, #0]
 800ad7c:	780b      	ldrb	r3, [r1, #0]
 800ad7e:	f805 3b01 	strb.w	r3, [r5], #1
 800ad82:	e7de      	b.n	800ad42 <_scanf_i+0x10e>
 800ad84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	4798      	blx	r3
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0df      	beq.n	800ad52 <_scanf_i+0x11e>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	05d9      	lsls	r1, r3, #23
 800ad96:	d50d      	bpl.n	800adb4 <_scanf_i+0x180>
 800ad98:	42bd      	cmp	r5, r7
 800ad9a:	d909      	bls.n	800adb0 <_scanf_i+0x17c>
 800ad9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ada0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ada4:	4632      	mov	r2, r6
 800ada6:	4650      	mov	r0, sl
 800ada8:	4798      	blx	r3
 800adaa:	f105 39ff 	add.w	r9, r5, #4294967295
 800adae:	464d      	mov	r5, r9
 800adb0:	42bd      	cmp	r5, r7
 800adb2:	d028      	beq.n	800ae06 <_scanf_i+0x1d2>
 800adb4:	6822      	ldr	r2, [r4, #0]
 800adb6:	f012 0210 	ands.w	r2, r2, #16
 800adba:	d113      	bne.n	800ade4 <_scanf_i+0x1b0>
 800adbc:	702a      	strb	r2, [r5, #0]
 800adbe:	6863      	ldr	r3, [r4, #4]
 800adc0:	9e01      	ldr	r6, [sp, #4]
 800adc2:	4639      	mov	r1, r7
 800adc4:	4650      	mov	r0, sl
 800adc6:	47b0      	blx	r6
 800adc8:	f8d8 3000 	ldr.w	r3, [r8]
 800adcc:	6821      	ldr	r1, [r4, #0]
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	f8c8 2000 	str.w	r2, [r8]
 800add4:	f011 0f20 	tst.w	r1, #32
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	d00f      	beq.n	800adfc <_scanf_i+0x1c8>
 800addc:	6018      	str	r0, [r3, #0]
 800adde:	68e3      	ldr	r3, [r4, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	60e3      	str	r3, [r4, #12]
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	1bed      	subs	r5, r5, r7
 800ade8:	445d      	add	r5, fp
 800adea:	442b      	add	r3, r5
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	2000      	movs	r0, #0
 800adf0:	b007      	add	sp, #28
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	f04f 0b00 	mov.w	fp, #0
 800adfa:	e7ca      	b.n	800ad92 <_scanf_i+0x15e>
 800adfc:	07ca      	lsls	r2, r1, #31
 800adfe:	bf4c      	ite	mi
 800ae00:	8018      	strhmi	r0, [r3, #0]
 800ae02:	6018      	strpl	r0, [r3, #0]
 800ae04:	e7eb      	b.n	800adde <_scanf_i+0x1aa>
 800ae06:	2001      	movs	r0, #1
 800ae08:	e7f2      	b.n	800adf0 <_scanf_i+0x1bc>
 800ae0a:	bf00      	nop
 800ae0c:	0800bfa4 	.word	0x0800bfa4
 800ae10:	0800b965 	.word	0x0800b965
 800ae14:	0800a529 	.word	0x0800a529
 800ae18:	0800c3ca 	.word	0x0800c3ca

0800ae1c <__sflush_r>:
 800ae1c:	898a      	ldrh	r2, [r1, #12]
 800ae1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae22:	4605      	mov	r5, r0
 800ae24:	0710      	lsls	r0, r2, #28
 800ae26:	460c      	mov	r4, r1
 800ae28:	d458      	bmi.n	800aedc <__sflush_r+0xc0>
 800ae2a:	684b      	ldr	r3, [r1, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dc05      	bgt.n	800ae3c <__sflush_r+0x20>
 800ae30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dc02      	bgt.n	800ae3c <__sflush_r+0x20>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	d0f9      	beq.n	800ae36 <__sflush_r+0x1a>
 800ae42:	2300      	movs	r3, #0
 800ae44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae48:	682f      	ldr	r7, [r5, #0]
 800ae4a:	6a21      	ldr	r1, [r4, #32]
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	d032      	beq.n	800aeb6 <__sflush_r+0x9a>
 800ae50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	075a      	lsls	r2, r3, #29
 800ae56:	d505      	bpl.n	800ae64 <__sflush_r+0x48>
 800ae58:	6863      	ldr	r3, [r4, #4]
 800ae5a:	1ac0      	subs	r0, r0, r3
 800ae5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae5e:	b10b      	cbz	r3, 800ae64 <__sflush_r+0x48>
 800ae60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae62:	1ac0      	subs	r0, r0, r3
 800ae64:	2300      	movs	r3, #0
 800ae66:	4602      	mov	r2, r0
 800ae68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae6a:	6a21      	ldr	r1, [r4, #32]
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b0      	blx	r6
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	d106      	bne.n	800ae84 <__sflush_r+0x68>
 800ae76:	6829      	ldr	r1, [r5, #0]
 800ae78:	291d      	cmp	r1, #29
 800ae7a:	d82b      	bhi.n	800aed4 <__sflush_r+0xb8>
 800ae7c:	4a29      	ldr	r2, [pc, #164]	; (800af24 <__sflush_r+0x108>)
 800ae7e:	410a      	asrs	r2, r1
 800ae80:	07d6      	lsls	r6, r2, #31
 800ae82:	d427      	bmi.n	800aed4 <__sflush_r+0xb8>
 800ae84:	2200      	movs	r2, #0
 800ae86:	6062      	str	r2, [r4, #4]
 800ae88:	04d9      	lsls	r1, r3, #19
 800ae8a:	6922      	ldr	r2, [r4, #16]
 800ae8c:	6022      	str	r2, [r4, #0]
 800ae8e:	d504      	bpl.n	800ae9a <__sflush_r+0x7e>
 800ae90:	1c42      	adds	r2, r0, #1
 800ae92:	d101      	bne.n	800ae98 <__sflush_r+0x7c>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b903      	cbnz	r3, 800ae9a <__sflush_r+0x7e>
 800ae98:	6560      	str	r0, [r4, #84]	; 0x54
 800ae9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae9c:	602f      	str	r7, [r5, #0]
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	d0c9      	beq.n	800ae36 <__sflush_r+0x1a>
 800aea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea6:	4299      	cmp	r1, r3
 800aea8:	d002      	beq.n	800aeb0 <__sflush_r+0x94>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7fd fefa 	bl	8008ca4 <_free_r>
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	6360      	str	r0, [r4, #52]	; 0x34
 800aeb4:	e7c0      	b.n	800ae38 <__sflush_r+0x1c>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b0      	blx	r6
 800aebc:	1c41      	adds	r1, r0, #1
 800aebe:	d1c8      	bne.n	800ae52 <__sflush_r+0x36>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c5      	beq.n	800ae52 <__sflush_r+0x36>
 800aec6:	2b1d      	cmp	r3, #29
 800aec8:	d001      	beq.n	800aece <__sflush_r+0xb2>
 800aeca:	2b16      	cmp	r3, #22
 800aecc:	d101      	bne.n	800aed2 <__sflush_r+0xb6>
 800aece:	602f      	str	r7, [r5, #0]
 800aed0:	e7b1      	b.n	800ae36 <__sflush_r+0x1a>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	e7ad      	b.n	800ae38 <__sflush_r+0x1c>
 800aedc:	690f      	ldr	r7, [r1, #16]
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d0a9      	beq.n	800ae36 <__sflush_r+0x1a>
 800aee2:	0793      	lsls	r3, r2, #30
 800aee4:	680e      	ldr	r6, [r1, #0]
 800aee6:	bf08      	it	eq
 800aee8:	694b      	ldreq	r3, [r1, #20]
 800aeea:	600f      	str	r7, [r1, #0]
 800aeec:	bf18      	it	ne
 800aeee:	2300      	movne	r3, #0
 800aef0:	eba6 0807 	sub.w	r8, r6, r7
 800aef4:	608b      	str	r3, [r1, #8]
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	dd9c      	ble.n	800ae36 <__sflush_r+0x1a>
 800aefc:	6a21      	ldr	r1, [r4, #32]
 800aefe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af00:	4643      	mov	r3, r8
 800af02:	463a      	mov	r2, r7
 800af04:	4628      	mov	r0, r5
 800af06:	47b0      	blx	r6
 800af08:	2800      	cmp	r0, #0
 800af0a:	dc06      	bgt.n	800af1a <__sflush_r+0xfe>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	e78e      	b.n	800ae38 <__sflush_r+0x1c>
 800af1a:	4407      	add	r7, r0
 800af1c:	eba8 0800 	sub.w	r8, r8, r0
 800af20:	e7e9      	b.n	800aef6 <__sflush_r+0xda>
 800af22:	bf00      	nop
 800af24:	dfbffffe 	.word	0xdfbffffe

0800af28 <_fflush_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	690b      	ldr	r3, [r1, #16]
 800af2c:	4605      	mov	r5, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	b913      	cbnz	r3, 800af38 <_fflush_r+0x10>
 800af32:	2500      	movs	r5, #0
 800af34:	4628      	mov	r0, r5
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	b118      	cbz	r0, 800af42 <_fflush_r+0x1a>
 800af3a:	6a03      	ldr	r3, [r0, #32]
 800af3c:	b90b      	cbnz	r3, 800af42 <_fflush_r+0x1a>
 800af3e:	f7fc fe85 	bl	8007c4c <__sinit>
 800af42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0f3      	beq.n	800af32 <_fflush_r+0xa>
 800af4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af4c:	07d0      	lsls	r0, r2, #31
 800af4e:	d404      	bmi.n	800af5a <_fflush_r+0x32>
 800af50:	0599      	lsls	r1, r3, #22
 800af52:	d402      	bmi.n	800af5a <_fflush_r+0x32>
 800af54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af56:	f7fd f813 	bl	8007f80 <__retarget_lock_acquire_recursive>
 800af5a:	4628      	mov	r0, r5
 800af5c:	4621      	mov	r1, r4
 800af5e:	f7ff ff5d 	bl	800ae1c <__sflush_r>
 800af62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af64:	07da      	lsls	r2, r3, #31
 800af66:	4605      	mov	r5, r0
 800af68:	d4e4      	bmi.n	800af34 <_fflush_r+0xc>
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	059b      	lsls	r3, r3, #22
 800af6e:	d4e1      	bmi.n	800af34 <_fflush_r+0xc>
 800af70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af72:	f7fd f806 	bl	8007f82 <__retarget_lock_release_recursive>
 800af76:	e7dd      	b.n	800af34 <_fflush_r+0xc>

0800af78 <__sccl>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	780b      	ldrb	r3, [r1, #0]
 800af7c:	4604      	mov	r4, r0
 800af7e:	2b5e      	cmp	r3, #94	; 0x5e
 800af80:	bf0b      	itete	eq
 800af82:	784b      	ldrbeq	r3, [r1, #1]
 800af84:	1c4a      	addne	r2, r1, #1
 800af86:	1c8a      	addeq	r2, r1, #2
 800af88:	2100      	movne	r1, #0
 800af8a:	bf08      	it	eq
 800af8c:	2101      	moveq	r1, #1
 800af8e:	3801      	subs	r0, #1
 800af90:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800af94:	f800 1f01 	strb.w	r1, [r0, #1]!
 800af98:	42a8      	cmp	r0, r5
 800af9a:	d1fb      	bne.n	800af94 <__sccl+0x1c>
 800af9c:	b90b      	cbnz	r3, 800afa2 <__sccl+0x2a>
 800af9e:	1e50      	subs	r0, r2, #1
 800afa0:	bd70      	pop	{r4, r5, r6, pc}
 800afa2:	f081 0101 	eor.w	r1, r1, #1
 800afa6:	54e1      	strb	r1, [r4, r3]
 800afa8:	4610      	mov	r0, r2
 800afaa:	4602      	mov	r2, r0
 800afac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afb0:	2d2d      	cmp	r5, #45	; 0x2d
 800afb2:	d005      	beq.n	800afc0 <__sccl+0x48>
 800afb4:	2d5d      	cmp	r5, #93	; 0x5d
 800afb6:	d016      	beq.n	800afe6 <__sccl+0x6e>
 800afb8:	2d00      	cmp	r5, #0
 800afba:	d0f1      	beq.n	800afa0 <__sccl+0x28>
 800afbc:	462b      	mov	r3, r5
 800afbe:	e7f2      	b.n	800afa6 <__sccl+0x2e>
 800afc0:	7846      	ldrb	r6, [r0, #1]
 800afc2:	2e5d      	cmp	r6, #93	; 0x5d
 800afc4:	d0fa      	beq.n	800afbc <__sccl+0x44>
 800afc6:	42b3      	cmp	r3, r6
 800afc8:	dcf8      	bgt.n	800afbc <__sccl+0x44>
 800afca:	3002      	adds	r0, #2
 800afcc:	461a      	mov	r2, r3
 800afce:	3201      	adds	r2, #1
 800afd0:	4296      	cmp	r6, r2
 800afd2:	54a1      	strb	r1, [r4, r2]
 800afd4:	dcfb      	bgt.n	800afce <__sccl+0x56>
 800afd6:	1af2      	subs	r2, r6, r3
 800afd8:	3a01      	subs	r2, #1
 800afda:	1c5d      	adds	r5, r3, #1
 800afdc:	42b3      	cmp	r3, r6
 800afde:	bfa8      	it	ge
 800afe0:	2200      	movge	r2, #0
 800afe2:	18ab      	adds	r3, r5, r2
 800afe4:	e7e1      	b.n	800afaa <__sccl+0x32>
 800afe6:	4610      	mov	r0, r2
 800afe8:	e7da      	b.n	800afa0 <__sccl+0x28>

0800afea <__submore>:
 800afea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afee:	460c      	mov	r4, r1
 800aff0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aff6:	4299      	cmp	r1, r3
 800aff8:	d11d      	bne.n	800b036 <__submore+0x4c>
 800affa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800affe:	f7fd fec5 	bl	8008d8c <_malloc_r>
 800b002:	b918      	cbnz	r0, 800b00c <__submore+0x22>
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b00c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b010:	63a3      	str	r3, [r4, #56]	; 0x38
 800b012:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b016:	6360      	str	r0, [r4, #52]	; 0x34
 800b018:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b01c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b020:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b024:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b028:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b02c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b030:	6020      	str	r0, [r4, #0]
 800b032:	2000      	movs	r0, #0
 800b034:	e7e8      	b.n	800b008 <__submore+0x1e>
 800b036:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b038:	0077      	lsls	r7, r6, #1
 800b03a:	463a      	mov	r2, r7
 800b03c:	f000 fbf1 	bl	800b822 <_realloc_r>
 800b040:	4605      	mov	r5, r0
 800b042:	2800      	cmp	r0, #0
 800b044:	d0de      	beq.n	800b004 <__submore+0x1a>
 800b046:	eb00 0806 	add.w	r8, r0, r6
 800b04a:	4601      	mov	r1, r0
 800b04c:	4632      	mov	r2, r6
 800b04e:	4640      	mov	r0, r8
 800b050:	f7fc ff98 	bl	8007f84 <memcpy>
 800b054:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b058:	f8c4 8000 	str.w	r8, [r4]
 800b05c:	e7e9      	b.n	800b032 <__submore+0x48>

0800b05e <memmove>:
 800b05e:	4288      	cmp	r0, r1
 800b060:	b510      	push	{r4, lr}
 800b062:	eb01 0402 	add.w	r4, r1, r2
 800b066:	d902      	bls.n	800b06e <memmove+0x10>
 800b068:	4284      	cmp	r4, r0
 800b06a:	4623      	mov	r3, r4
 800b06c:	d807      	bhi.n	800b07e <memmove+0x20>
 800b06e:	1e43      	subs	r3, r0, #1
 800b070:	42a1      	cmp	r1, r4
 800b072:	d008      	beq.n	800b086 <memmove+0x28>
 800b074:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b078:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07c:	e7f8      	b.n	800b070 <memmove+0x12>
 800b07e:	4402      	add	r2, r0
 800b080:	4601      	mov	r1, r0
 800b082:	428a      	cmp	r2, r1
 800b084:	d100      	bne.n	800b088 <memmove+0x2a>
 800b086:	bd10      	pop	{r4, pc}
 800b088:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b090:	e7f7      	b.n	800b082 <memmove+0x24>

0800b092 <strncmp>:
 800b092:	b510      	push	{r4, lr}
 800b094:	b16a      	cbz	r2, 800b0b2 <strncmp+0x20>
 800b096:	3901      	subs	r1, #1
 800b098:	1884      	adds	r4, r0, r2
 800b09a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b09e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d103      	bne.n	800b0ae <strncmp+0x1c>
 800b0a6:	42a0      	cmp	r0, r4
 800b0a8:	d001      	beq.n	800b0ae <strncmp+0x1c>
 800b0aa:	2a00      	cmp	r2, #0
 800b0ac:	d1f5      	bne.n	800b09a <strncmp+0x8>
 800b0ae:	1ad0      	subs	r0, r2, r3
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	e7fc      	b.n	800b0b0 <strncmp+0x1e>
	...

0800b0b8 <_sbrk_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4d06      	ldr	r5, [pc, #24]	; (800b0d4 <_sbrk_r+0x1c>)
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4604      	mov	r4, r0
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	602b      	str	r3, [r5, #0]
 800b0c4:	f7f6 fbaa 	bl	800181c <_sbrk>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_sbrk_r+0x1a>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_sbrk_r+0x1a>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	20004f54 	.word	0x20004f54

0800b0d8 <nan>:
 800b0d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b0e0 <nan+0x8>
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	00000000 	.word	0x00000000
 800b0e4:	7ff80000 	.word	0x7ff80000

0800b0e8 <__assert_func>:
 800b0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0ea:	4614      	mov	r4, r2
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <__assert_func+0x2c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	68d8      	ldr	r0, [r3, #12]
 800b0f6:	b14c      	cbz	r4, 800b10c <__assert_func+0x24>
 800b0f8:	4b07      	ldr	r3, [pc, #28]	; (800b118 <__assert_func+0x30>)
 800b0fa:	9100      	str	r1, [sp, #0]
 800b0fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b100:	4906      	ldr	r1, [pc, #24]	; (800b11c <__assert_func+0x34>)
 800b102:	462b      	mov	r3, r5
 800b104:	f000 fc3e 	bl	800b984 <fiprintf>
 800b108:	f000 fc4e 	bl	800b9a8 <abort>
 800b10c:	4b04      	ldr	r3, [pc, #16]	; (800b120 <__assert_func+0x38>)
 800b10e:	461c      	mov	r4, r3
 800b110:	e7f3      	b.n	800b0fa <__assert_func+0x12>
 800b112:	bf00      	nop
 800b114:	2000006c 	.word	0x2000006c
 800b118:	0800c3dd 	.word	0x0800c3dd
 800b11c:	0800c3ea 	.word	0x0800c3ea
 800b120:	0800c418 	.word	0x0800c418

0800b124 <_calloc_r>:
 800b124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b126:	fba1 2402 	umull	r2, r4, r1, r2
 800b12a:	b94c      	cbnz	r4, 800b140 <_calloc_r+0x1c>
 800b12c:	4611      	mov	r1, r2
 800b12e:	9201      	str	r2, [sp, #4]
 800b130:	f7fd fe2c 	bl	8008d8c <_malloc_r>
 800b134:	9a01      	ldr	r2, [sp, #4]
 800b136:	4605      	mov	r5, r0
 800b138:	b930      	cbnz	r0, 800b148 <_calloc_r+0x24>
 800b13a:	4628      	mov	r0, r5
 800b13c:	b003      	add	sp, #12
 800b13e:	bd30      	pop	{r4, r5, pc}
 800b140:	220c      	movs	r2, #12
 800b142:	6002      	str	r2, [r0, #0]
 800b144:	2500      	movs	r5, #0
 800b146:	e7f8      	b.n	800b13a <_calloc_r+0x16>
 800b148:	4621      	mov	r1, r4
 800b14a:	f7fc fe46 	bl	8007dda <memset>
 800b14e:	e7f4      	b.n	800b13a <_calloc_r+0x16>

0800b150 <rshift>:
 800b150:	6903      	ldr	r3, [r0, #16]
 800b152:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b15a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b15e:	f100 0414 	add.w	r4, r0, #20
 800b162:	dd45      	ble.n	800b1f0 <rshift+0xa0>
 800b164:	f011 011f 	ands.w	r1, r1, #31
 800b168:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b16c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b170:	d10c      	bne.n	800b18c <rshift+0x3c>
 800b172:	f100 0710 	add.w	r7, r0, #16
 800b176:	4629      	mov	r1, r5
 800b178:	42b1      	cmp	r1, r6
 800b17a:	d334      	bcc.n	800b1e6 <rshift+0x96>
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	1eea      	subs	r2, r5, #3
 800b182:	4296      	cmp	r6, r2
 800b184:	bf38      	it	cc
 800b186:	2300      	movcc	r3, #0
 800b188:	4423      	add	r3, r4
 800b18a:	e015      	b.n	800b1b8 <rshift+0x68>
 800b18c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b190:	f1c1 0820 	rsb	r8, r1, #32
 800b194:	40cf      	lsrs	r7, r1
 800b196:	f105 0e04 	add.w	lr, r5, #4
 800b19a:	46a1      	mov	r9, r4
 800b19c:	4576      	cmp	r6, lr
 800b19e:	46f4      	mov	ip, lr
 800b1a0:	d815      	bhi.n	800b1ce <rshift+0x7e>
 800b1a2:	1a9a      	subs	r2, r3, r2
 800b1a4:	0092      	lsls	r2, r2, #2
 800b1a6:	3a04      	subs	r2, #4
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	42ae      	cmp	r6, r5
 800b1ac:	bf38      	it	cc
 800b1ae:	2200      	movcc	r2, #0
 800b1b0:	18a3      	adds	r3, r4, r2
 800b1b2:	50a7      	str	r7, [r4, r2]
 800b1b4:	b107      	cbz	r7, 800b1b8 <rshift+0x68>
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	1b1a      	subs	r2, r3, r4
 800b1ba:	42a3      	cmp	r3, r4
 800b1bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1c0:	bf08      	it	eq
 800b1c2:	2300      	moveq	r3, #0
 800b1c4:	6102      	str	r2, [r0, #16]
 800b1c6:	bf08      	it	eq
 800b1c8:	6143      	streq	r3, [r0, #20]
 800b1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ce:	f8dc c000 	ldr.w	ip, [ip]
 800b1d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1d6:	ea4c 0707 	orr.w	r7, ip, r7
 800b1da:	f849 7b04 	str.w	r7, [r9], #4
 800b1de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1e2:	40cf      	lsrs	r7, r1
 800b1e4:	e7da      	b.n	800b19c <rshift+0x4c>
 800b1e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1ee:	e7c3      	b.n	800b178 <rshift+0x28>
 800b1f0:	4623      	mov	r3, r4
 800b1f2:	e7e1      	b.n	800b1b8 <rshift+0x68>

0800b1f4 <__hexdig_fun>:
 800b1f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1f8:	2b09      	cmp	r3, #9
 800b1fa:	d802      	bhi.n	800b202 <__hexdig_fun+0xe>
 800b1fc:	3820      	subs	r0, #32
 800b1fe:	b2c0      	uxtb	r0, r0
 800b200:	4770      	bx	lr
 800b202:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b206:	2b05      	cmp	r3, #5
 800b208:	d801      	bhi.n	800b20e <__hexdig_fun+0x1a>
 800b20a:	3847      	subs	r0, #71	; 0x47
 800b20c:	e7f7      	b.n	800b1fe <__hexdig_fun+0xa>
 800b20e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b212:	2b05      	cmp	r3, #5
 800b214:	d801      	bhi.n	800b21a <__hexdig_fun+0x26>
 800b216:	3827      	subs	r0, #39	; 0x27
 800b218:	e7f1      	b.n	800b1fe <__hexdig_fun+0xa>
 800b21a:	2000      	movs	r0, #0
 800b21c:	4770      	bx	lr
	...

0800b220 <__gethex>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	4617      	mov	r7, r2
 800b226:	680a      	ldr	r2, [r1, #0]
 800b228:	b085      	sub	sp, #20
 800b22a:	f102 0b02 	add.w	fp, r2, #2
 800b22e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b232:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b236:	4681      	mov	r9, r0
 800b238:	468a      	mov	sl, r1
 800b23a:	9302      	str	r3, [sp, #8]
 800b23c:	32fe      	adds	r2, #254	; 0xfe
 800b23e:	eb02 030b 	add.w	r3, r2, fp
 800b242:	46d8      	mov	r8, fp
 800b244:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	2830      	cmp	r0, #48	; 0x30
 800b24c:	d0f7      	beq.n	800b23e <__gethex+0x1e>
 800b24e:	f7ff ffd1 	bl	800b1f4 <__hexdig_fun>
 800b252:	4604      	mov	r4, r0
 800b254:	2800      	cmp	r0, #0
 800b256:	d138      	bne.n	800b2ca <__gethex+0xaa>
 800b258:	49a7      	ldr	r1, [pc, #668]	; (800b4f8 <__gethex+0x2d8>)
 800b25a:	2201      	movs	r2, #1
 800b25c:	4640      	mov	r0, r8
 800b25e:	f7ff ff18 	bl	800b092 <strncmp>
 800b262:	4606      	mov	r6, r0
 800b264:	2800      	cmp	r0, #0
 800b266:	d169      	bne.n	800b33c <__gethex+0x11c>
 800b268:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b26c:	465d      	mov	r5, fp
 800b26e:	f7ff ffc1 	bl	800b1f4 <__hexdig_fun>
 800b272:	2800      	cmp	r0, #0
 800b274:	d064      	beq.n	800b340 <__gethex+0x120>
 800b276:	465a      	mov	r2, fp
 800b278:	7810      	ldrb	r0, [r2, #0]
 800b27a:	2830      	cmp	r0, #48	; 0x30
 800b27c:	4690      	mov	r8, r2
 800b27e:	f102 0201 	add.w	r2, r2, #1
 800b282:	d0f9      	beq.n	800b278 <__gethex+0x58>
 800b284:	f7ff ffb6 	bl	800b1f4 <__hexdig_fun>
 800b288:	2301      	movs	r3, #1
 800b28a:	fab0 f480 	clz	r4, r0
 800b28e:	0964      	lsrs	r4, r4, #5
 800b290:	465e      	mov	r6, fp
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	4642      	mov	r2, r8
 800b296:	4615      	mov	r5, r2
 800b298:	3201      	adds	r2, #1
 800b29a:	7828      	ldrb	r0, [r5, #0]
 800b29c:	f7ff ffaa 	bl	800b1f4 <__hexdig_fun>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d1f8      	bne.n	800b296 <__gethex+0x76>
 800b2a4:	4994      	ldr	r1, [pc, #592]	; (800b4f8 <__gethex+0x2d8>)
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f7ff fef2 	bl	800b092 <strncmp>
 800b2ae:	b978      	cbnz	r0, 800b2d0 <__gethex+0xb0>
 800b2b0:	b946      	cbnz	r6, 800b2c4 <__gethex+0xa4>
 800b2b2:	1c6e      	adds	r6, r5, #1
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	7828      	ldrb	r0, [r5, #0]
 800b2bc:	f7ff ff9a 	bl	800b1f4 <__hexdig_fun>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d1f8      	bne.n	800b2b6 <__gethex+0x96>
 800b2c4:	1b73      	subs	r3, r6, r5
 800b2c6:	009e      	lsls	r6, r3, #2
 800b2c8:	e004      	b.n	800b2d4 <__gethex+0xb4>
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	4626      	mov	r6, r4
 800b2ce:	e7e1      	b.n	800b294 <__gethex+0x74>
 800b2d0:	2e00      	cmp	r6, #0
 800b2d2:	d1f7      	bne.n	800b2c4 <__gethex+0xa4>
 800b2d4:	782b      	ldrb	r3, [r5, #0]
 800b2d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2da:	2b50      	cmp	r3, #80	; 0x50
 800b2dc:	d13d      	bne.n	800b35a <__gethex+0x13a>
 800b2de:	786b      	ldrb	r3, [r5, #1]
 800b2e0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2e2:	d02f      	beq.n	800b344 <__gethex+0x124>
 800b2e4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2e6:	d031      	beq.n	800b34c <__gethex+0x12c>
 800b2e8:	1c69      	adds	r1, r5, #1
 800b2ea:	f04f 0b00 	mov.w	fp, #0
 800b2ee:	7808      	ldrb	r0, [r1, #0]
 800b2f0:	f7ff ff80 	bl	800b1f4 <__hexdig_fun>
 800b2f4:	1e42      	subs	r2, r0, #1
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	2a18      	cmp	r2, #24
 800b2fa:	d82e      	bhi.n	800b35a <__gethex+0x13a>
 800b2fc:	f1a0 0210 	sub.w	r2, r0, #16
 800b300:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b304:	f7ff ff76 	bl	800b1f4 <__hexdig_fun>
 800b308:	f100 3cff 	add.w	ip, r0, #4294967295
 800b30c:	fa5f fc8c 	uxtb.w	ip, ip
 800b310:	f1bc 0f18 	cmp.w	ip, #24
 800b314:	d91d      	bls.n	800b352 <__gethex+0x132>
 800b316:	f1bb 0f00 	cmp.w	fp, #0
 800b31a:	d000      	beq.n	800b31e <__gethex+0xfe>
 800b31c:	4252      	negs	r2, r2
 800b31e:	4416      	add	r6, r2
 800b320:	f8ca 1000 	str.w	r1, [sl]
 800b324:	b1dc      	cbz	r4, 800b35e <__gethex+0x13e>
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bf14      	ite	ne
 800b32c:	f04f 0800 	movne.w	r8, #0
 800b330:	f04f 0806 	moveq.w	r8, #6
 800b334:	4640      	mov	r0, r8
 800b336:	b005      	add	sp, #20
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	4645      	mov	r5, r8
 800b33e:	4626      	mov	r6, r4
 800b340:	2401      	movs	r4, #1
 800b342:	e7c7      	b.n	800b2d4 <__gethex+0xb4>
 800b344:	f04f 0b00 	mov.w	fp, #0
 800b348:	1ca9      	adds	r1, r5, #2
 800b34a:	e7d0      	b.n	800b2ee <__gethex+0xce>
 800b34c:	f04f 0b01 	mov.w	fp, #1
 800b350:	e7fa      	b.n	800b348 <__gethex+0x128>
 800b352:	230a      	movs	r3, #10
 800b354:	fb03 0002 	mla	r0, r3, r2, r0
 800b358:	e7d0      	b.n	800b2fc <__gethex+0xdc>
 800b35a:	4629      	mov	r1, r5
 800b35c:	e7e0      	b.n	800b320 <__gethex+0x100>
 800b35e:	eba5 0308 	sub.w	r3, r5, r8
 800b362:	3b01      	subs	r3, #1
 800b364:	4621      	mov	r1, r4
 800b366:	2b07      	cmp	r3, #7
 800b368:	dc0a      	bgt.n	800b380 <__gethex+0x160>
 800b36a:	4648      	mov	r0, r9
 800b36c:	f7fd fd9a 	bl	8008ea4 <_Balloc>
 800b370:	4604      	mov	r4, r0
 800b372:	b940      	cbnz	r0, 800b386 <__gethex+0x166>
 800b374:	4b61      	ldr	r3, [pc, #388]	; (800b4fc <__gethex+0x2dc>)
 800b376:	4602      	mov	r2, r0
 800b378:	21e4      	movs	r1, #228	; 0xe4
 800b37a:	4861      	ldr	r0, [pc, #388]	; (800b500 <__gethex+0x2e0>)
 800b37c:	f7ff feb4 	bl	800b0e8 <__assert_func>
 800b380:	3101      	adds	r1, #1
 800b382:	105b      	asrs	r3, r3, #1
 800b384:	e7ef      	b.n	800b366 <__gethex+0x146>
 800b386:	f100 0a14 	add.w	sl, r0, #20
 800b38a:	2300      	movs	r3, #0
 800b38c:	495a      	ldr	r1, [pc, #360]	; (800b4f8 <__gethex+0x2d8>)
 800b38e:	f8cd a004 	str.w	sl, [sp, #4]
 800b392:	469b      	mov	fp, r3
 800b394:	45a8      	cmp	r8, r5
 800b396:	d342      	bcc.n	800b41e <__gethex+0x1fe>
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	f840 bb04 	str.w	fp, [r0], #4
 800b39e:	eba0 000a 	sub.w	r0, r0, sl
 800b3a2:	1080      	asrs	r0, r0, #2
 800b3a4:	6120      	str	r0, [r4, #16]
 800b3a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f7fd fe6c 	bl	8009088 <__hi0bits>
 800b3b0:	683d      	ldr	r5, [r7, #0]
 800b3b2:	eba8 0000 	sub.w	r0, r8, r0
 800b3b6:	42a8      	cmp	r0, r5
 800b3b8:	dd59      	ble.n	800b46e <__gethex+0x24e>
 800b3ba:	eba0 0805 	sub.w	r8, r0, r5
 800b3be:	4641      	mov	r1, r8
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f7fe f9fb 	bl	80097bc <__any_on>
 800b3c6:	4683      	mov	fp, r0
 800b3c8:	b1b8      	cbz	r0, 800b3fa <__gethex+0x1da>
 800b3ca:	f108 33ff 	add.w	r3, r8, #4294967295
 800b3ce:	1159      	asrs	r1, r3, #5
 800b3d0:	f003 021f 	and.w	r2, r3, #31
 800b3d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b3d8:	f04f 0b01 	mov.w	fp, #1
 800b3dc:	fa0b f202 	lsl.w	r2, fp, r2
 800b3e0:	420a      	tst	r2, r1
 800b3e2:	d00a      	beq.n	800b3fa <__gethex+0x1da>
 800b3e4:	455b      	cmp	r3, fp
 800b3e6:	dd06      	ble.n	800b3f6 <__gethex+0x1d6>
 800b3e8:	f1a8 0102 	sub.w	r1, r8, #2
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7fe f9e5 	bl	80097bc <__any_on>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d138      	bne.n	800b468 <__gethex+0x248>
 800b3f6:	f04f 0b02 	mov.w	fp, #2
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f7ff fea7 	bl	800b150 <rshift>
 800b402:	4446      	add	r6, r8
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	42b3      	cmp	r3, r6
 800b408:	da41      	bge.n	800b48e <__gethex+0x26e>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4648      	mov	r0, r9
 800b40e:	f7fd fd89 	bl	8008f24 <_Bfree>
 800b412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b414:	2300      	movs	r3, #0
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b41c:	e78a      	b.n	800b334 <__gethex+0x114>
 800b41e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b422:	2a2e      	cmp	r2, #46	; 0x2e
 800b424:	d014      	beq.n	800b450 <__gethex+0x230>
 800b426:	2b20      	cmp	r3, #32
 800b428:	d106      	bne.n	800b438 <__gethex+0x218>
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	f843 bb04 	str.w	fp, [r3], #4
 800b430:	f04f 0b00 	mov.w	fp, #0
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	465b      	mov	r3, fp
 800b438:	7828      	ldrb	r0, [r5, #0]
 800b43a:	9303      	str	r3, [sp, #12]
 800b43c:	f7ff feda 	bl	800b1f4 <__hexdig_fun>
 800b440:	9b03      	ldr	r3, [sp, #12]
 800b442:	f000 000f 	and.w	r0, r0, #15
 800b446:	4098      	lsls	r0, r3
 800b448:	ea4b 0b00 	orr.w	fp, fp, r0
 800b44c:	3304      	adds	r3, #4
 800b44e:	e7a1      	b.n	800b394 <__gethex+0x174>
 800b450:	45a8      	cmp	r8, r5
 800b452:	d8e8      	bhi.n	800b426 <__gethex+0x206>
 800b454:	2201      	movs	r2, #1
 800b456:	4628      	mov	r0, r5
 800b458:	9303      	str	r3, [sp, #12]
 800b45a:	f7ff fe1a 	bl	800b092 <strncmp>
 800b45e:	4926      	ldr	r1, [pc, #152]	; (800b4f8 <__gethex+0x2d8>)
 800b460:	9b03      	ldr	r3, [sp, #12]
 800b462:	2800      	cmp	r0, #0
 800b464:	d1df      	bne.n	800b426 <__gethex+0x206>
 800b466:	e795      	b.n	800b394 <__gethex+0x174>
 800b468:	f04f 0b03 	mov.w	fp, #3
 800b46c:	e7c5      	b.n	800b3fa <__gethex+0x1da>
 800b46e:	da0b      	bge.n	800b488 <__gethex+0x268>
 800b470:	eba5 0800 	sub.w	r8, r5, r0
 800b474:	4621      	mov	r1, r4
 800b476:	4642      	mov	r2, r8
 800b478:	4648      	mov	r0, r9
 800b47a:	f7fd ff6d 	bl	8009358 <__lshift>
 800b47e:	eba6 0608 	sub.w	r6, r6, r8
 800b482:	4604      	mov	r4, r0
 800b484:	f100 0a14 	add.w	sl, r0, #20
 800b488:	f04f 0b00 	mov.w	fp, #0
 800b48c:	e7ba      	b.n	800b404 <__gethex+0x1e4>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	42b3      	cmp	r3, r6
 800b492:	dd73      	ble.n	800b57c <__gethex+0x35c>
 800b494:	1b9e      	subs	r6, r3, r6
 800b496:	42b5      	cmp	r5, r6
 800b498:	dc34      	bgt.n	800b504 <__gethex+0x2e4>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d023      	beq.n	800b4e8 <__gethex+0x2c8>
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d025      	beq.n	800b4f0 <__gethex+0x2d0>
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d115      	bne.n	800b4d4 <__gethex+0x2b4>
 800b4a8:	42b5      	cmp	r5, r6
 800b4aa:	d113      	bne.n	800b4d4 <__gethex+0x2b4>
 800b4ac:	2d01      	cmp	r5, #1
 800b4ae:	d10b      	bne.n	800b4c8 <__gethex+0x2a8>
 800b4b0:	9a02      	ldr	r2, [sp, #8]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	6123      	str	r3, [r4, #16]
 800b4ba:	f8ca 3000 	str.w	r3, [sl]
 800b4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b4c4:	601c      	str	r4, [r3, #0]
 800b4c6:	e735      	b.n	800b334 <__gethex+0x114>
 800b4c8:	1e69      	subs	r1, r5, #1
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f7fe f976 	bl	80097bc <__any_on>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1ed      	bne.n	800b4b0 <__gethex+0x290>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	f7fd fd24 	bl	8008f24 <_Bfree>
 800b4dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b4e6:	e725      	b.n	800b334 <__gethex+0x114>
 800b4e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1f2      	bne.n	800b4d4 <__gethex+0x2b4>
 800b4ee:	e7df      	b.n	800b4b0 <__gethex+0x290>
 800b4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1dc      	bne.n	800b4b0 <__gethex+0x290>
 800b4f6:	e7ed      	b.n	800b4d4 <__gethex+0x2b4>
 800b4f8:	0800c254 	.word	0x0800c254
 800b4fc:	0800c0e7 	.word	0x0800c0e7
 800b500:	0800c419 	.word	0x0800c419
 800b504:	f106 38ff 	add.w	r8, r6, #4294967295
 800b508:	f1bb 0f00 	cmp.w	fp, #0
 800b50c:	d133      	bne.n	800b576 <__gethex+0x356>
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	d004      	beq.n	800b51e <__gethex+0x2fe>
 800b514:	4641      	mov	r1, r8
 800b516:	4620      	mov	r0, r4
 800b518:	f7fe f950 	bl	80097bc <__any_on>
 800b51c:	4683      	mov	fp, r0
 800b51e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b522:	2301      	movs	r3, #1
 800b524:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b528:	f008 081f 	and.w	r8, r8, #31
 800b52c:	fa03 f308 	lsl.w	r3, r3, r8
 800b530:	4213      	tst	r3, r2
 800b532:	4631      	mov	r1, r6
 800b534:	4620      	mov	r0, r4
 800b536:	bf18      	it	ne
 800b538:	f04b 0b02 	orrne.w	fp, fp, #2
 800b53c:	1bad      	subs	r5, r5, r6
 800b53e:	f7ff fe07 	bl	800b150 <rshift>
 800b542:	687e      	ldr	r6, [r7, #4]
 800b544:	f04f 0802 	mov.w	r8, #2
 800b548:	f1bb 0f00 	cmp.w	fp, #0
 800b54c:	d04a      	beq.n	800b5e4 <__gethex+0x3c4>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d016      	beq.n	800b582 <__gethex+0x362>
 800b554:	2b03      	cmp	r3, #3
 800b556:	d018      	beq.n	800b58a <__gethex+0x36a>
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d109      	bne.n	800b570 <__gethex+0x350>
 800b55c:	f01b 0f02 	tst.w	fp, #2
 800b560:	d006      	beq.n	800b570 <__gethex+0x350>
 800b562:	f8da 3000 	ldr.w	r3, [sl]
 800b566:	ea4b 0b03 	orr.w	fp, fp, r3
 800b56a:	f01b 0f01 	tst.w	fp, #1
 800b56e:	d10f      	bne.n	800b590 <__gethex+0x370>
 800b570:	f048 0810 	orr.w	r8, r8, #16
 800b574:	e036      	b.n	800b5e4 <__gethex+0x3c4>
 800b576:	f04f 0b01 	mov.w	fp, #1
 800b57a:	e7d0      	b.n	800b51e <__gethex+0x2fe>
 800b57c:	f04f 0801 	mov.w	r8, #1
 800b580:	e7e2      	b.n	800b548 <__gethex+0x328>
 800b582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b584:	f1c3 0301 	rsb	r3, r3, #1
 800b588:	930f      	str	r3, [sp, #60]	; 0x3c
 800b58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0ef      	beq.n	800b570 <__gethex+0x350>
 800b590:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b594:	f104 0214 	add.w	r2, r4, #20
 800b598:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4694      	mov	ip, r2
 800b5a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b5aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b5ae:	d01e      	beq.n	800b5ee <__gethex+0x3ce>
 800b5b0:	3101      	adds	r1, #1
 800b5b2:	f8cc 1000 	str.w	r1, [ip]
 800b5b6:	f1b8 0f02 	cmp.w	r8, #2
 800b5ba:	f104 0214 	add.w	r2, r4, #20
 800b5be:	d13d      	bne.n	800b63c <__gethex+0x41c>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	d10b      	bne.n	800b5e0 <__gethex+0x3c0>
 800b5c8:	1169      	asrs	r1, r5, #5
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f005 051f 	and.w	r5, r5, #31
 800b5d0:	fa03 f505 	lsl.w	r5, r3, r5
 800b5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5d8:	421d      	tst	r5, r3
 800b5da:	bf18      	it	ne
 800b5dc:	f04f 0801 	movne.w	r8, #1
 800b5e0:	f048 0820 	orr.w	r8, r8, #32
 800b5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5e6:	601c      	str	r4, [r3, #0]
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	601e      	str	r6, [r3, #0]
 800b5ec:	e6a2      	b.n	800b334 <__gethex+0x114>
 800b5ee:	4290      	cmp	r0, r2
 800b5f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800b5f4:	d8d6      	bhi.n	800b5a4 <__gethex+0x384>
 800b5f6:	68a2      	ldr	r2, [r4, #8]
 800b5f8:	4593      	cmp	fp, r2
 800b5fa:	db17      	blt.n	800b62c <__gethex+0x40c>
 800b5fc:	6861      	ldr	r1, [r4, #4]
 800b5fe:	4648      	mov	r0, r9
 800b600:	3101      	adds	r1, #1
 800b602:	f7fd fc4f 	bl	8008ea4 <_Balloc>
 800b606:	4682      	mov	sl, r0
 800b608:	b918      	cbnz	r0, 800b612 <__gethex+0x3f2>
 800b60a:	4b1b      	ldr	r3, [pc, #108]	; (800b678 <__gethex+0x458>)
 800b60c:	4602      	mov	r2, r0
 800b60e:	2184      	movs	r1, #132	; 0x84
 800b610:	e6b3      	b.n	800b37a <__gethex+0x15a>
 800b612:	6922      	ldr	r2, [r4, #16]
 800b614:	3202      	adds	r2, #2
 800b616:	f104 010c 	add.w	r1, r4, #12
 800b61a:	0092      	lsls	r2, r2, #2
 800b61c:	300c      	adds	r0, #12
 800b61e:	f7fc fcb1 	bl	8007f84 <memcpy>
 800b622:	4621      	mov	r1, r4
 800b624:	4648      	mov	r0, r9
 800b626:	f7fd fc7d 	bl	8008f24 <_Bfree>
 800b62a:	4654      	mov	r4, sl
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	1c51      	adds	r1, r2, #1
 800b630:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b634:	6121      	str	r1, [r4, #16]
 800b636:	2101      	movs	r1, #1
 800b638:	6151      	str	r1, [r2, #20]
 800b63a:	e7bc      	b.n	800b5b6 <__gethex+0x396>
 800b63c:	6921      	ldr	r1, [r4, #16]
 800b63e:	4559      	cmp	r1, fp
 800b640:	dd0b      	ble.n	800b65a <__gethex+0x43a>
 800b642:	2101      	movs	r1, #1
 800b644:	4620      	mov	r0, r4
 800b646:	f7ff fd83 	bl	800b150 <rshift>
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	3601      	adds	r6, #1
 800b64e:	42b3      	cmp	r3, r6
 800b650:	f6ff aedb 	blt.w	800b40a <__gethex+0x1ea>
 800b654:	f04f 0801 	mov.w	r8, #1
 800b658:	e7c2      	b.n	800b5e0 <__gethex+0x3c0>
 800b65a:	f015 051f 	ands.w	r5, r5, #31
 800b65e:	d0f9      	beq.n	800b654 <__gethex+0x434>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	441a      	add	r2, r3
 800b664:	f1c5 0520 	rsb	r5, r5, #32
 800b668:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b66c:	f7fd fd0c 	bl	8009088 <__hi0bits>
 800b670:	42a8      	cmp	r0, r5
 800b672:	dbe6      	blt.n	800b642 <__gethex+0x422>
 800b674:	e7ee      	b.n	800b654 <__gethex+0x434>
 800b676:	bf00      	nop
 800b678:	0800c0e7 	.word	0x0800c0e7

0800b67c <L_shift>:
 800b67c:	f1c2 0208 	rsb	r2, r2, #8
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	b570      	push	{r4, r5, r6, lr}
 800b684:	f1c2 0620 	rsb	r6, r2, #32
 800b688:	6843      	ldr	r3, [r0, #4]
 800b68a:	6804      	ldr	r4, [r0, #0]
 800b68c:	fa03 f506 	lsl.w	r5, r3, r6
 800b690:	432c      	orrs	r4, r5
 800b692:	40d3      	lsrs	r3, r2
 800b694:	6004      	str	r4, [r0, #0]
 800b696:	f840 3f04 	str.w	r3, [r0, #4]!
 800b69a:	4288      	cmp	r0, r1
 800b69c:	d3f4      	bcc.n	800b688 <L_shift+0xc>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}

0800b6a0 <__match>:
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	6803      	ldr	r3, [r0, #0]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6aa:	b914      	cbnz	r4, 800b6b2 <__match+0x12>
 800b6ac:	6003      	str	r3, [r0, #0]
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	bd30      	pop	{r4, r5, pc}
 800b6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6ba:	2d19      	cmp	r5, #25
 800b6bc:	bf98      	it	ls
 800b6be:	3220      	addls	r2, #32
 800b6c0:	42a2      	cmp	r2, r4
 800b6c2:	d0f0      	beq.n	800b6a6 <__match+0x6>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	e7f3      	b.n	800b6b0 <__match+0x10>

0800b6c8 <__hexnan>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	680b      	ldr	r3, [r1, #0]
 800b6ce:	6801      	ldr	r1, [r0, #0]
 800b6d0:	115e      	asrs	r6, r3, #5
 800b6d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6d6:	f013 031f 	ands.w	r3, r3, #31
 800b6da:	b087      	sub	sp, #28
 800b6dc:	bf18      	it	ne
 800b6de:	3604      	addne	r6, #4
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	1f37      	subs	r7, r6, #4
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	4690      	mov	r8, r2
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6ee:	46b9      	mov	r9, r7
 800b6f0:	463c      	mov	r4, r7
 800b6f2:	9502      	str	r5, [sp, #8]
 800b6f4:	46ab      	mov	fp, r5
 800b6f6:	784a      	ldrb	r2, [r1, #1]
 800b6f8:	1c4b      	adds	r3, r1, #1
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	b342      	cbz	r2, 800b750 <__hexnan+0x88>
 800b6fe:	4610      	mov	r0, r2
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	9204      	str	r2, [sp, #16]
 800b704:	f7ff fd76 	bl	800b1f4 <__hexdig_fun>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d14f      	bne.n	800b7ac <__hexnan+0xe4>
 800b70c:	9a04      	ldr	r2, [sp, #16]
 800b70e:	9905      	ldr	r1, [sp, #20]
 800b710:	2a20      	cmp	r2, #32
 800b712:	d818      	bhi.n	800b746 <__hexnan+0x7e>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	459b      	cmp	fp, r3
 800b718:	dd13      	ble.n	800b742 <__hexnan+0x7a>
 800b71a:	454c      	cmp	r4, r9
 800b71c:	d206      	bcs.n	800b72c <__hexnan+0x64>
 800b71e:	2d07      	cmp	r5, #7
 800b720:	dc04      	bgt.n	800b72c <__hexnan+0x64>
 800b722:	462a      	mov	r2, r5
 800b724:	4649      	mov	r1, r9
 800b726:	4620      	mov	r0, r4
 800b728:	f7ff ffa8 	bl	800b67c <L_shift>
 800b72c:	4544      	cmp	r4, r8
 800b72e:	d950      	bls.n	800b7d2 <__hexnan+0x10a>
 800b730:	2300      	movs	r3, #0
 800b732:	f1a4 0904 	sub.w	r9, r4, #4
 800b736:	f844 3c04 	str.w	r3, [r4, #-4]
 800b73a:	f8cd b008 	str.w	fp, [sp, #8]
 800b73e:	464c      	mov	r4, r9
 800b740:	461d      	mov	r5, r3
 800b742:	9903      	ldr	r1, [sp, #12]
 800b744:	e7d7      	b.n	800b6f6 <__hexnan+0x2e>
 800b746:	2a29      	cmp	r2, #41	; 0x29
 800b748:	d155      	bne.n	800b7f6 <__hexnan+0x12e>
 800b74a:	3102      	adds	r1, #2
 800b74c:	f8ca 1000 	str.w	r1, [sl]
 800b750:	f1bb 0f00 	cmp.w	fp, #0
 800b754:	d04f      	beq.n	800b7f6 <__hexnan+0x12e>
 800b756:	454c      	cmp	r4, r9
 800b758:	d206      	bcs.n	800b768 <__hexnan+0xa0>
 800b75a:	2d07      	cmp	r5, #7
 800b75c:	dc04      	bgt.n	800b768 <__hexnan+0xa0>
 800b75e:	462a      	mov	r2, r5
 800b760:	4649      	mov	r1, r9
 800b762:	4620      	mov	r0, r4
 800b764:	f7ff ff8a 	bl	800b67c <L_shift>
 800b768:	4544      	cmp	r4, r8
 800b76a:	d934      	bls.n	800b7d6 <__hexnan+0x10e>
 800b76c:	f1a8 0204 	sub.w	r2, r8, #4
 800b770:	4623      	mov	r3, r4
 800b772:	f853 1b04 	ldr.w	r1, [r3], #4
 800b776:	f842 1f04 	str.w	r1, [r2, #4]!
 800b77a:	429f      	cmp	r7, r3
 800b77c:	d2f9      	bcs.n	800b772 <__hexnan+0xaa>
 800b77e:	1b3b      	subs	r3, r7, r4
 800b780:	f023 0303 	bic.w	r3, r3, #3
 800b784:	3304      	adds	r3, #4
 800b786:	3e03      	subs	r6, #3
 800b788:	3401      	adds	r4, #1
 800b78a:	42a6      	cmp	r6, r4
 800b78c:	bf38      	it	cc
 800b78e:	2304      	movcc	r3, #4
 800b790:	4443      	add	r3, r8
 800b792:	2200      	movs	r2, #0
 800b794:	f843 2b04 	str.w	r2, [r3], #4
 800b798:	429f      	cmp	r7, r3
 800b79a:	d2fb      	bcs.n	800b794 <__hexnan+0xcc>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	b91b      	cbnz	r3, 800b7a8 <__hexnan+0xe0>
 800b7a0:	4547      	cmp	r7, r8
 800b7a2:	d126      	bne.n	800b7f2 <__hexnan+0x12a>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	603b      	str	r3, [r7, #0]
 800b7a8:	2005      	movs	r0, #5
 800b7aa:	e025      	b.n	800b7f8 <__hexnan+0x130>
 800b7ac:	3501      	adds	r5, #1
 800b7ae:	2d08      	cmp	r5, #8
 800b7b0:	f10b 0b01 	add.w	fp, fp, #1
 800b7b4:	dd06      	ble.n	800b7c4 <__hexnan+0xfc>
 800b7b6:	4544      	cmp	r4, r8
 800b7b8:	d9c3      	bls.n	800b742 <__hexnan+0x7a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7c0:	2501      	movs	r5, #1
 800b7c2:	3c04      	subs	r4, #4
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	f000 000f 	and.w	r0, r0, #15
 800b7ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	e7b7      	b.n	800b742 <__hexnan+0x7a>
 800b7d2:	2508      	movs	r5, #8
 800b7d4:	e7b5      	b.n	800b742 <__hexnan+0x7a>
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0df      	beq.n	800b79c <__hexnan+0xd4>
 800b7dc:	f1c3 0320 	rsb	r3, r3, #32
 800b7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e4:	40da      	lsrs	r2, r3
 800b7e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800b7f0:	e7d4      	b.n	800b79c <__hexnan+0xd4>
 800b7f2:	3f04      	subs	r7, #4
 800b7f4:	e7d2      	b.n	800b79c <__hexnan+0xd4>
 800b7f6:	2004      	movs	r0, #4
 800b7f8:	b007      	add	sp, #28
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7fe <__ascii_mbtowc>:
 800b7fe:	b082      	sub	sp, #8
 800b800:	b901      	cbnz	r1, 800b804 <__ascii_mbtowc+0x6>
 800b802:	a901      	add	r1, sp, #4
 800b804:	b142      	cbz	r2, 800b818 <__ascii_mbtowc+0x1a>
 800b806:	b14b      	cbz	r3, 800b81c <__ascii_mbtowc+0x1e>
 800b808:	7813      	ldrb	r3, [r2, #0]
 800b80a:	600b      	str	r3, [r1, #0]
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	1e10      	subs	r0, r2, #0
 800b810:	bf18      	it	ne
 800b812:	2001      	movne	r0, #1
 800b814:	b002      	add	sp, #8
 800b816:	4770      	bx	lr
 800b818:	4610      	mov	r0, r2
 800b81a:	e7fb      	b.n	800b814 <__ascii_mbtowc+0x16>
 800b81c:	f06f 0001 	mvn.w	r0, #1
 800b820:	e7f8      	b.n	800b814 <__ascii_mbtowc+0x16>

0800b822 <_realloc_r>:
 800b822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b826:	4680      	mov	r8, r0
 800b828:	4614      	mov	r4, r2
 800b82a:	460e      	mov	r6, r1
 800b82c:	b921      	cbnz	r1, 800b838 <_realloc_r+0x16>
 800b82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	4611      	mov	r1, r2
 800b834:	f7fd baaa 	b.w	8008d8c <_malloc_r>
 800b838:	b92a      	cbnz	r2, 800b846 <_realloc_r+0x24>
 800b83a:	f7fd fa33 	bl	8008ca4 <_free_r>
 800b83e:	4625      	mov	r5, r4
 800b840:	4628      	mov	r0, r5
 800b842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b846:	f000 f8b6 	bl	800b9b6 <_malloc_usable_size_r>
 800b84a:	4284      	cmp	r4, r0
 800b84c:	4607      	mov	r7, r0
 800b84e:	d802      	bhi.n	800b856 <_realloc_r+0x34>
 800b850:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b854:	d812      	bhi.n	800b87c <_realloc_r+0x5a>
 800b856:	4621      	mov	r1, r4
 800b858:	4640      	mov	r0, r8
 800b85a:	f7fd fa97 	bl	8008d8c <_malloc_r>
 800b85e:	4605      	mov	r5, r0
 800b860:	2800      	cmp	r0, #0
 800b862:	d0ed      	beq.n	800b840 <_realloc_r+0x1e>
 800b864:	42bc      	cmp	r4, r7
 800b866:	4622      	mov	r2, r4
 800b868:	4631      	mov	r1, r6
 800b86a:	bf28      	it	cs
 800b86c:	463a      	movcs	r2, r7
 800b86e:	f7fc fb89 	bl	8007f84 <memcpy>
 800b872:	4631      	mov	r1, r6
 800b874:	4640      	mov	r0, r8
 800b876:	f7fd fa15 	bl	8008ca4 <_free_r>
 800b87a:	e7e1      	b.n	800b840 <_realloc_r+0x1e>
 800b87c:	4635      	mov	r5, r6
 800b87e:	e7df      	b.n	800b840 <_realloc_r+0x1e>

0800b880 <_strtoul_l.constprop.0>:
 800b880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b884:	4f36      	ldr	r7, [pc, #216]	; (800b960 <_strtoul_l.constprop.0+0xe0>)
 800b886:	4686      	mov	lr, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	4628      	mov	r0, r5
 800b88c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b890:	5d3e      	ldrb	r6, [r7, r4]
 800b892:	f016 0608 	ands.w	r6, r6, #8
 800b896:	d1f8      	bne.n	800b88a <_strtoul_l.constprop.0+0xa>
 800b898:	2c2d      	cmp	r4, #45	; 0x2d
 800b89a:	d130      	bne.n	800b8fe <_strtoul_l.constprop.0+0x7e>
 800b89c:	782c      	ldrb	r4, [r5, #0]
 800b89e:	2601      	movs	r6, #1
 800b8a0:	1c85      	adds	r5, r0, #2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d057      	beq.n	800b956 <_strtoul_l.constprop.0+0xd6>
 800b8a6:	2b10      	cmp	r3, #16
 800b8a8:	d109      	bne.n	800b8be <_strtoul_l.constprop.0+0x3e>
 800b8aa:	2c30      	cmp	r4, #48	; 0x30
 800b8ac:	d107      	bne.n	800b8be <_strtoul_l.constprop.0+0x3e>
 800b8ae:	7828      	ldrb	r0, [r5, #0]
 800b8b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b8b4:	2858      	cmp	r0, #88	; 0x58
 800b8b6:	d149      	bne.n	800b94c <_strtoul_l.constprop.0+0xcc>
 800b8b8:	786c      	ldrb	r4, [r5, #1]
 800b8ba:	2310      	movs	r3, #16
 800b8bc:	3502      	adds	r5, #2
 800b8be:	f04f 38ff 	mov.w	r8, #4294967295
 800b8c2:	2700      	movs	r7, #0
 800b8c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800b8c8:	fb03 f908 	mul.w	r9, r3, r8
 800b8cc:	ea6f 0909 	mvn.w	r9, r9
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b8d6:	f1bc 0f09 	cmp.w	ip, #9
 800b8da:	d815      	bhi.n	800b908 <_strtoul_l.constprop.0+0x88>
 800b8dc:	4664      	mov	r4, ip
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	dd23      	ble.n	800b92a <_strtoul_l.constprop.0+0xaa>
 800b8e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b8e6:	d007      	beq.n	800b8f8 <_strtoul_l.constprop.0+0x78>
 800b8e8:	4580      	cmp	r8, r0
 800b8ea:	d31b      	bcc.n	800b924 <_strtoul_l.constprop.0+0xa4>
 800b8ec:	d101      	bne.n	800b8f2 <_strtoul_l.constprop.0+0x72>
 800b8ee:	45a1      	cmp	r9, r4
 800b8f0:	db18      	blt.n	800b924 <_strtoul_l.constprop.0+0xa4>
 800b8f2:	fb00 4003 	mla	r0, r0, r3, r4
 800b8f6:	2701      	movs	r7, #1
 800b8f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8fc:	e7e9      	b.n	800b8d2 <_strtoul_l.constprop.0+0x52>
 800b8fe:	2c2b      	cmp	r4, #43	; 0x2b
 800b900:	bf04      	itt	eq
 800b902:	782c      	ldrbeq	r4, [r5, #0]
 800b904:	1c85      	addeq	r5, r0, #2
 800b906:	e7cc      	b.n	800b8a2 <_strtoul_l.constprop.0+0x22>
 800b908:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b90c:	f1bc 0f19 	cmp.w	ip, #25
 800b910:	d801      	bhi.n	800b916 <_strtoul_l.constprop.0+0x96>
 800b912:	3c37      	subs	r4, #55	; 0x37
 800b914:	e7e3      	b.n	800b8de <_strtoul_l.constprop.0+0x5e>
 800b916:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b91a:	f1bc 0f19 	cmp.w	ip, #25
 800b91e:	d804      	bhi.n	800b92a <_strtoul_l.constprop.0+0xaa>
 800b920:	3c57      	subs	r4, #87	; 0x57
 800b922:	e7dc      	b.n	800b8de <_strtoul_l.constprop.0+0x5e>
 800b924:	f04f 37ff 	mov.w	r7, #4294967295
 800b928:	e7e6      	b.n	800b8f8 <_strtoul_l.constprop.0+0x78>
 800b92a:	1c7b      	adds	r3, r7, #1
 800b92c:	d106      	bne.n	800b93c <_strtoul_l.constprop.0+0xbc>
 800b92e:	2322      	movs	r3, #34	; 0x22
 800b930:	f8ce 3000 	str.w	r3, [lr]
 800b934:	4638      	mov	r0, r7
 800b936:	b932      	cbnz	r2, 800b946 <_strtoul_l.constprop.0+0xc6>
 800b938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b93c:	b106      	cbz	r6, 800b940 <_strtoul_l.constprop.0+0xc0>
 800b93e:	4240      	negs	r0, r0
 800b940:	2a00      	cmp	r2, #0
 800b942:	d0f9      	beq.n	800b938 <_strtoul_l.constprop.0+0xb8>
 800b944:	b107      	cbz	r7, 800b948 <_strtoul_l.constprop.0+0xc8>
 800b946:	1e69      	subs	r1, r5, #1
 800b948:	6011      	str	r1, [r2, #0]
 800b94a:	e7f5      	b.n	800b938 <_strtoul_l.constprop.0+0xb8>
 800b94c:	2430      	movs	r4, #48	; 0x30
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1b5      	bne.n	800b8be <_strtoul_l.constprop.0+0x3e>
 800b952:	2308      	movs	r3, #8
 800b954:	e7b3      	b.n	800b8be <_strtoul_l.constprop.0+0x3e>
 800b956:	2c30      	cmp	r4, #48	; 0x30
 800b958:	d0a9      	beq.n	800b8ae <_strtoul_l.constprop.0+0x2e>
 800b95a:	230a      	movs	r3, #10
 800b95c:	e7af      	b.n	800b8be <_strtoul_l.constprop.0+0x3e>
 800b95e:	bf00      	nop
 800b960:	0800c2a9 	.word	0x0800c2a9

0800b964 <_strtoul_r>:
 800b964:	f7ff bf8c 	b.w	800b880 <_strtoul_l.constprop.0>

0800b968 <__ascii_wctomb>:
 800b968:	b149      	cbz	r1, 800b97e <__ascii_wctomb+0x16>
 800b96a:	2aff      	cmp	r2, #255	; 0xff
 800b96c:	bf85      	ittet	hi
 800b96e:	238a      	movhi	r3, #138	; 0x8a
 800b970:	6003      	strhi	r3, [r0, #0]
 800b972:	700a      	strbls	r2, [r1, #0]
 800b974:	f04f 30ff 	movhi.w	r0, #4294967295
 800b978:	bf98      	it	ls
 800b97a:	2001      	movls	r0, #1
 800b97c:	4770      	bx	lr
 800b97e:	4608      	mov	r0, r1
 800b980:	4770      	bx	lr
	...

0800b984 <fiprintf>:
 800b984:	b40e      	push	{r1, r2, r3}
 800b986:	b503      	push	{r0, r1, lr}
 800b988:	4601      	mov	r1, r0
 800b98a:	ab03      	add	r3, sp, #12
 800b98c:	4805      	ldr	r0, [pc, #20]	; (800b9a4 <fiprintf+0x20>)
 800b98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b992:	6800      	ldr	r0, [r0, #0]
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	f000 f83f 	bl	800ba18 <_vfiprintf_r>
 800b99a:	b002      	add	sp, #8
 800b99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9a0:	b003      	add	sp, #12
 800b9a2:	4770      	bx	lr
 800b9a4:	2000006c 	.word	0x2000006c

0800b9a8 <abort>:
 800b9a8:	b508      	push	{r3, lr}
 800b9aa:	2006      	movs	r0, #6
 800b9ac:	f000 fa0c 	bl	800bdc8 <raise>
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	f7f5 febb 	bl	800172c <_exit>

0800b9b6 <_malloc_usable_size_r>:
 800b9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ba:	1f18      	subs	r0, r3, #4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfbc      	itt	lt
 800b9c0:	580b      	ldrlt	r3, [r1, r0]
 800b9c2:	18c0      	addlt	r0, r0, r3
 800b9c4:	4770      	bx	lr

0800b9c6 <__sfputc_r>:
 800b9c6:	6893      	ldr	r3, [r2, #8]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	b410      	push	{r4}
 800b9ce:	6093      	str	r3, [r2, #8]
 800b9d0:	da08      	bge.n	800b9e4 <__sfputc_r+0x1e>
 800b9d2:	6994      	ldr	r4, [r2, #24]
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	db01      	blt.n	800b9dc <__sfputc_r+0x16>
 800b9d8:	290a      	cmp	r1, #10
 800b9da:	d103      	bne.n	800b9e4 <__sfputc_r+0x1e>
 800b9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e0:	f000 b934 	b.w	800bc4c <__swbuf_r>
 800b9e4:	6813      	ldr	r3, [r2, #0]
 800b9e6:	1c58      	adds	r0, r3, #1
 800b9e8:	6010      	str	r0, [r2, #0]
 800b9ea:	7019      	strb	r1, [r3, #0]
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <__sfputs_r>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	4614      	mov	r4, r2
 800b9fc:	18d5      	adds	r5, r2, r3
 800b9fe:	42ac      	cmp	r4, r5
 800ba00:	d101      	bne.n	800ba06 <__sfputs_r+0x12>
 800ba02:	2000      	movs	r0, #0
 800ba04:	e007      	b.n	800ba16 <__sfputs_r+0x22>
 800ba06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff ffda 	bl	800b9c6 <__sfputc_r>
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	d1f3      	bne.n	800b9fe <__sfputs_r+0xa>
 800ba16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba18 <_vfiprintf_r>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	b09d      	sub	sp, #116	; 0x74
 800ba20:	4614      	mov	r4, r2
 800ba22:	4698      	mov	r8, r3
 800ba24:	4606      	mov	r6, r0
 800ba26:	b118      	cbz	r0, 800ba30 <_vfiprintf_r+0x18>
 800ba28:	6a03      	ldr	r3, [r0, #32]
 800ba2a:	b90b      	cbnz	r3, 800ba30 <_vfiprintf_r+0x18>
 800ba2c:	f7fc f90e 	bl	8007c4c <__sinit>
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x2a>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x2a>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f7fc fa9f 	bl	8007f80 <__retarget_lock_acquire_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	071b      	lsls	r3, r3, #28
 800ba46:	d501      	bpl.n	800ba4c <_vfiprintf_r+0x34>
 800ba48:	692b      	ldr	r3, [r5, #16]
 800ba4a:	b99b      	cbnz	r3, 800ba74 <_vfiprintf_r+0x5c>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f000 f93a 	bl	800bcc8 <__swsetup_r>
 800ba54:	b170      	cbz	r0, 800ba74 <_vfiprintf_r+0x5c>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07dc      	lsls	r4, r3, #31
 800ba5a:	d504      	bpl.n	800ba66 <_vfiprintf_r+0x4e>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	0598      	lsls	r0, r3, #22
 800ba6a:	d4f7      	bmi.n	800ba5c <_vfiprintf_r+0x44>
 800ba6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba6e:	f7fc fa88 	bl	8007f82 <__retarget_lock_release_recursive>
 800ba72:	e7f3      	b.n	800ba5c <_vfiprintf_r+0x44>
 800ba74:	2300      	movs	r3, #0
 800ba76:	9309      	str	r3, [sp, #36]	; 0x24
 800ba78:	2320      	movs	r3, #32
 800ba7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba82:	2330      	movs	r3, #48	; 0x30
 800ba84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc38 <_vfiprintf_r+0x220>
 800ba88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba8c:	f04f 0901 	mov.w	r9, #1
 800ba90:	4623      	mov	r3, r4
 800ba92:	469a      	mov	sl, r3
 800ba94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba98:	b10a      	cbz	r2, 800ba9e <_vfiprintf_r+0x86>
 800ba9a:	2a25      	cmp	r2, #37	; 0x25
 800ba9c:	d1f9      	bne.n	800ba92 <_vfiprintf_r+0x7a>
 800ba9e:	ebba 0b04 	subs.w	fp, sl, r4
 800baa2:	d00b      	beq.n	800babc <_vfiprintf_r+0xa4>
 800baa4:	465b      	mov	r3, fp
 800baa6:	4622      	mov	r2, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff ffa2 	bl	800b9f4 <__sfputs_r>
 800bab0:	3001      	adds	r0, #1
 800bab2:	f000 80a9 	beq.w	800bc08 <_vfiprintf_r+0x1f0>
 800bab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab8:	445a      	add	r2, fp
 800baba:	9209      	str	r2, [sp, #36]	; 0x24
 800babc:	f89a 3000 	ldrb.w	r3, [sl]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80a1 	beq.w	800bc08 <_vfiprintf_r+0x1f0>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f04f 32ff 	mov.w	r2, #4294967295
 800bacc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad0:	f10a 0a01 	add.w	sl, sl, #1
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	9307      	str	r3, [sp, #28]
 800bad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800badc:	931a      	str	r3, [sp, #104]	; 0x68
 800bade:	4654      	mov	r4, sl
 800bae0:	2205      	movs	r2, #5
 800bae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae6:	4854      	ldr	r0, [pc, #336]	; (800bc38 <_vfiprintf_r+0x220>)
 800bae8:	f7f4 fb92 	bl	8000210 <memchr>
 800baec:	9a04      	ldr	r2, [sp, #16]
 800baee:	b9d8      	cbnz	r0, 800bb28 <_vfiprintf_r+0x110>
 800baf0:	06d1      	lsls	r1, r2, #27
 800baf2:	bf44      	itt	mi
 800baf4:	2320      	movmi	r3, #32
 800baf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bafa:	0713      	lsls	r3, r2, #28
 800bafc:	bf44      	itt	mi
 800bafe:	232b      	movmi	r3, #43	; 0x2b
 800bb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb04:	f89a 3000 	ldrb.w	r3, [sl]
 800bb08:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0a:	d015      	beq.n	800bb38 <_vfiprintf_r+0x120>
 800bb0c:	9a07      	ldr	r2, [sp, #28]
 800bb0e:	4654      	mov	r4, sl
 800bb10:	2000      	movs	r0, #0
 800bb12:	f04f 0c0a 	mov.w	ip, #10
 800bb16:	4621      	mov	r1, r4
 800bb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb1c:	3b30      	subs	r3, #48	; 0x30
 800bb1e:	2b09      	cmp	r3, #9
 800bb20:	d94d      	bls.n	800bbbe <_vfiprintf_r+0x1a6>
 800bb22:	b1b0      	cbz	r0, 800bb52 <_vfiprintf_r+0x13a>
 800bb24:	9207      	str	r2, [sp, #28]
 800bb26:	e014      	b.n	800bb52 <_vfiprintf_r+0x13a>
 800bb28:	eba0 0308 	sub.w	r3, r0, r8
 800bb2c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb30:	4313      	orrs	r3, r2
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	46a2      	mov	sl, r4
 800bb36:	e7d2      	b.n	800bade <_vfiprintf_r+0xc6>
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	1d19      	adds	r1, r3, #4
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	9103      	str	r1, [sp, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bfbb      	ittet	lt
 800bb44:	425b      	neglt	r3, r3
 800bb46:	f042 0202 	orrlt.w	r2, r2, #2
 800bb4a:	9307      	strge	r3, [sp, #28]
 800bb4c:	9307      	strlt	r3, [sp, #28]
 800bb4e:	bfb8      	it	lt
 800bb50:	9204      	strlt	r2, [sp, #16]
 800bb52:	7823      	ldrb	r3, [r4, #0]
 800bb54:	2b2e      	cmp	r3, #46	; 0x2e
 800bb56:	d10c      	bne.n	800bb72 <_vfiprintf_r+0x15a>
 800bb58:	7863      	ldrb	r3, [r4, #1]
 800bb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb5c:	d134      	bne.n	800bbc8 <_vfiprintf_r+0x1b0>
 800bb5e:	9b03      	ldr	r3, [sp, #12]
 800bb60:	1d1a      	adds	r2, r3, #4
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	9203      	str	r2, [sp, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bfb8      	it	lt
 800bb6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb6e:	3402      	adds	r4, #2
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc48 <_vfiprintf_r+0x230>
 800bb76:	7821      	ldrb	r1, [r4, #0]
 800bb78:	2203      	movs	r2, #3
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	f7f4 fb48 	bl	8000210 <memchr>
 800bb80:	b138      	cbz	r0, 800bb92 <_vfiprintf_r+0x17a>
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	eba0 000a 	sub.w	r0, r0, sl
 800bb88:	2240      	movs	r2, #64	; 0x40
 800bb8a:	4082      	lsls	r2, r0
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb96:	4829      	ldr	r0, [pc, #164]	; (800bc3c <_vfiprintf_r+0x224>)
 800bb98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb9c:	2206      	movs	r2, #6
 800bb9e:	f7f4 fb37 	bl	8000210 <memchr>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d03f      	beq.n	800bc26 <_vfiprintf_r+0x20e>
 800bba6:	4b26      	ldr	r3, [pc, #152]	; (800bc40 <_vfiprintf_r+0x228>)
 800bba8:	bb1b      	cbnz	r3, 800bbf2 <_vfiprintf_r+0x1da>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	3307      	adds	r3, #7
 800bbae:	f023 0307 	bic.w	r3, r3, #7
 800bbb2:	3308      	adds	r3, #8
 800bbb4:	9303      	str	r3, [sp, #12]
 800bbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb8:	443b      	add	r3, r7
 800bbba:	9309      	str	r3, [sp, #36]	; 0x24
 800bbbc:	e768      	b.n	800ba90 <_vfiprintf_r+0x78>
 800bbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	e7a6      	b.n	800bb16 <_vfiprintf_r+0xfe>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	3401      	adds	r4, #1
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f04f 0c0a 	mov.w	ip, #10
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbda:	3a30      	subs	r2, #48	; 0x30
 800bbdc:	2a09      	cmp	r2, #9
 800bbde:	d903      	bls.n	800bbe8 <_vfiprintf_r+0x1d0>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c6      	beq.n	800bb72 <_vfiprintf_r+0x15a>
 800bbe4:	9105      	str	r1, [sp, #20]
 800bbe6:	e7c4      	b.n	800bb72 <_vfiprintf_r+0x15a>
 800bbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbec:	4604      	mov	r4, r0
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e7f0      	b.n	800bbd4 <_vfiprintf_r+0x1bc>
 800bbf2:	ab03      	add	r3, sp, #12
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	462a      	mov	r2, r5
 800bbf8:	4b12      	ldr	r3, [pc, #72]	; (800bc44 <_vfiprintf_r+0x22c>)
 800bbfa:	a904      	add	r1, sp, #16
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7fb f9d5 	bl	8006fac <_printf_float>
 800bc02:	4607      	mov	r7, r0
 800bc04:	1c78      	adds	r0, r7, #1
 800bc06:	d1d6      	bne.n	800bbb6 <_vfiprintf_r+0x19e>
 800bc08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc0a:	07d9      	lsls	r1, r3, #31
 800bc0c:	d405      	bmi.n	800bc1a <_vfiprintf_r+0x202>
 800bc0e:	89ab      	ldrh	r3, [r5, #12]
 800bc10:	059a      	lsls	r2, r3, #22
 800bc12:	d402      	bmi.n	800bc1a <_vfiprintf_r+0x202>
 800bc14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc16:	f7fc f9b4 	bl	8007f82 <__retarget_lock_release_recursive>
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	065b      	lsls	r3, r3, #25
 800bc1e:	f53f af1d 	bmi.w	800ba5c <_vfiprintf_r+0x44>
 800bc22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc24:	e71c      	b.n	800ba60 <_vfiprintf_r+0x48>
 800bc26:	ab03      	add	r3, sp, #12
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <_vfiprintf_r+0x22c>)
 800bc2e:	a904      	add	r1, sp, #16
 800bc30:	4630      	mov	r0, r6
 800bc32:	f7fb fc5f 	bl	80074f4 <_printf_i>
 800bc36:	e7e4      	b.n	800bc02 <_vfiprintf_r+0x1ea>
 800bc38:	0800c3a9 	.word	0x0800c3a9
 800bc3c:	0800c3b3 	.word	0x0800c3b3
 800bc40:	08006fad 	.word	0x08006fad
 800bc44:	0800b9f5 	.word	0x0800b9f5
 800bc48:	0800c3af 	.word	0x0800c3af

0800bc4c <__swbuf_r>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	460e      	mov	r6, r1
 800bc50:	4614      	mov	r4, r2
 800bc52:	4605      	mov	r5, r0
 800bc54:	b118      	cbz	r0, 800bc5e <__swbuf_r+0x12>
 800bc56:	6a03      	ldr	r3, [r0, #32]
 800bc58:	b90b      	cbnz	r3, 800bc5e <__swbuf_r+0x12>
 800bc5a:	f7fb fff7 	bl	8007c4c <__sinit>
 800bc5e:	69a3      	ldr	r3, [r4, #24]
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	071a      	lsls	r2, r3, #28
 800bc66:	d525      	bpl.n	800bcb4 <__swbuf_r+0x68>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	b31b      	cbz	r3, 800bcb4 <__swbuf_r+0x68>
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	6922      	ldr	r2, [r4, #16]
 800bc70:	1a98      	subs	r0, r3, r2
 800bc72:	6963      	ldr	r3, [r4, #20]
 800bc74:	b2f6      	uxtb	r6, r6
 800bc76:	4283      	cmp	r3, r0
 800bc78:	4637      	mov	r7, r6
 800bc7a:	dc04      	bgt.n	800bc86 <__swbuf_r+0x3a>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f7ff f952 	bl	800af28 <_fflush_r>
 800bc84:	b9e0      	cbnz	r0, 800bcc0 <__swbuf_r+0x74>
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	701e      	strb	r6, [r3, #0]
 800bc94:	6962      	ldr	r2, [r4, #20]
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d004      	beq.n	800bca6 <__swbuf_r+0x5a>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	07db      	lsls	r3, r3, #31
 800bca0:	d506      	bpl.n	800bcb0 <__swbuf_r+0x64>
 800bca2:	2e0a      	cmp	r6, #10
 800bca4:	d104      	bne.n	800bcb0 <__swbuf_r+0x64>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f7ff f93d 	bl	800af28 <_fflush_r>
 800bcae:	b938      	cbnz	r0, 800bcc0 <__swbuf_r+0x74>
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f000 f806 	bl	800bcc8 <__swsetup_r>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d0d5      	beq.n	800bc6c <__swbuf_r+0x20>
 800bcc0:	f04f 37ff 	mov.w	r7, #4294967295
 800bcc4:	e7f4      	b.n	800bcb0 <__swbuf_r+0x64>
	...

0800bcc8 <__swsetup_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4b2a      	ldr	r3, [pc, #168]	; (800bd74 <__swsetup_r+0xac>)
 800bccc:	4605      	mov	r5, r0
 800bcce:	6818      	ldr	r0, [r3, #0]
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	b118      	cbz	r0, 800bcdc <__swsetup_r+0x14>
 800bcd4:	6a03      	ldr	r3, [r0, #32]
 800bcd6:	b90b      	cbnz	r3, 800bcdc <__swsetup_r+0x14>
 800bcd8:	f7fb ffb8 	bl	8007c4c <__sinit>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bce2:	0718      	lsls	r0, r3, #28
 800bce4:	d422      	bmi.n	800bd2c <__swsetup_r+0x64>
 800bce6:	06d9      	lsls	r1, r3, #27
 800bce8:	d407      	bmi.n	800bcfa <__swsetup_r+0x32>
 800bcea:	2309      	movs	r3, #9
 800bcec:	602b      	str	r3, [r5, #0]
 800bcee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	e034      	b.n	800bd64 <__swsetup_r+0x9c>
 800bcfa:	0758      	lsls	r0, r3, #29
 800bcfc:	d512      	bpl.n	800bd24 <__swsetup_r+0x5c>
 800bcfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd00:	b141      	cbz	r1, 800bd14 <__swsetup_r+0x4c>
 800bd02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd06:	4299      	cmp	r1, r3
 800bd08:	d002      	beq.n	800bd10 <__swsetup_r+0x48>
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f7fc ffca 	bl	8008ca4 <_free_r>
 800bd10:	2300      	movs	r3, #0
 800bd12:	6363      	str	r3, [r4, #52]	; 0x34
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	6063      	str	r3, [r4, #4]
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	6023      	str	r3, [r4, #0]
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f043 0308 	orr.w	r3, r3, #8
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	b94b      	cbnz	r3, 800bd44 <__swsetup_r+0x7c>
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd3a:	d003      	beq.n	800bd44 <__swsetup_r+0x7c>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 f884 	bl	800be4c <__smakebuf_r>
 800bd44:	89a0      	ldrh	r0, [r4, #12]
 800bd46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd4a:	f010 0301 	ands.w	r3, r0, #1
 800bd4e:	d00a      	beq.n	800bd66 <__swsetup_r+0x9e>
 800bd50:	2300      	movs	r3, #0
 800bd52:	60a3      	str	r3, [r4, #8]
 800bd54:	6963      	ldr	r3, [r4, #20]
 800bd56:	425b      	negs	r3, r3
 800bd58:	61a3      	str	r3, [r4, #24]
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	b943      	cbnz	r3, 800bd70 <__swsetup_r+0xa8>
 800bd5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd62:	d1c4      	bne.n	800bcee <__swsetup_r+0x26>
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	0781      	lsls	r1, r0, #30
 800bd68:	bf58      	it	pl
 800bd6a:	6963      	ldrpl	r3, [r4, #20]
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	e7f4      	b.n	800bd5a <__swsetup_r+0x92>
 800bd70:	2000      	movs	r0, #0
 800bd72:	e7f7      	b.n	800bd64 <__swsetup_r+0x9c>
 800bd74:	2000006c 	.word	0x2000006c

0800bd78 <_raise_r>:
 800bd78:	291f      	cmp	r1, #31
 800bd7a:	b538      	push	{r3, r4, r5, lr}
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	d904      	bls.n	800bd8c <_raise_r+0x14>
 800bd82:	2316      	movs	r3, #22
 800bd84:	6003      	str	r3, [r0, #0]
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bd8e:	b112      	cbz	r2, 800bd96 <_raise_r+0x1e>
 800bd90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd94:	b94b      	cbnz	r3, 800bdaa <_raise_r+0x32>
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 f830 	bl	800bdfc <_getpid_r>
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	4601      	mov	r1, r0
 800bda0:	4620      	mov	r0, r4
 800bda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bda6:	f000 b817 	b.w	800bdd8 <_kill_r>
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d00a      	beq.n	800bdc4 <_raise_r+0x4c>
 800bdae:	1c59      	adds	r1, r3, #1
 800bdb0:	d103      	bne.n	800bdba <_raise_r+0x42>
 800bdb2:	2316      	movs	r3, #22
 800bdb4:	6003      	str	r3, [r0, #0]
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	e7e7      	b.n	800bd8a <_raise_r+0x12>
 800bdba:	2400      	movs	r4, #0
 800bdbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	4798      	blx	r3
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	e7e0      	b.n	800bd8a <_raise_r+0x12>

0800bdc8 <raise>:
 800bdc8:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <raise+0xc>)
 800bdca:	4601      	mov	r1, r0
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	f7ff bfd3 	b.w	800bd78 <_raise_r>
 800bdd2:	bf00      	nop
 800bdd4:	2000006c 	.word	0x2000006c

0800bdd8 <_kill_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d07      	ldr	r5, [pc, #28]	; (800bdf8 <_kill_r+0x20>)
 800bddc:	2300      	movs	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	4611      	mov	r1, r2
 800bde4:	602b      	str	r3, [r5, #0]
 800bde6:	f7f5 fc91 	bl	800170c <_kill>
 800bdea:	1c43      	adds	r3, r0, #1
 800bdec:	d102      	bne.n	800bdf4 <_kill_r+0x1c>
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	b103      	cbz	r3, 800bdf4 <_kill_r+0x1c>
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20004f54 	.word	0x20004f54

0800bdfc <_getpid_r>:
 800bdfc:	f7f5 bc7e 	b.w	80016fc <_getpid>

0800be00 <__swhatbuf_r>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be08:	2900      	cmp	r1, #0
 800be0a:	b096      	sub	sp, #88	; 0x58
 800be0c:	4615      	mov	r5, r2
 800be0e:	461e      	mov	r6, r3
 800be10:	da0d      	bge.n	800be2e <__swhatbuf_r+0x2e>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be18:	f04f 0100 	mov.w	r1, #0
 800be1c:	bf0c      	ite	eq
 800be1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be22:	2340      	movne	r3, #64	; 0x40
 800be24:	2000      	movs	r0, #0
 800be26:	6031      	str	r1, [r6, #0]
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	b016      	add	sp, #88	; 0x58
 800be2c:	bd70      	pop	{r4, r5, r6, pc}
 800be2e:	466a      	mov	r2, sp
 800be30:	f000 f848 	bl	800bec4 <_fstat_r>
 800be34:	2800      	cmp	r0, #0
 800be36:	dbec      	blt.n	800be12 <__swhatbuf_r+0x12>
 800be38:	9901      	ldr	r1, [sp, #4]
 800be3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800be3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800be42:	4259      	negs	r1, r3
 800be44:	4159      	adcs	r1, r3
 800be46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be4a:	e7eb      	b.n	800be24 <__swhatbuf_r+0x24>

0800be4c <__smakebuf_r>:
 800be4c:	898b      	ldrh	r3, [r1, #12]
 800be4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be50:	079d      	lsls	r5, r3, #30
 800be52:	4606      	mov	r6, r0
 800be54:	460c      	mov	r4, r1
 800be56:	d507      	bpl.n	800be68 <__smakebuf_r+0x1c>
 800be58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	6123      	str	r3, [r4, #16]
 800be60:	2301      	movs	r3, #1
 800be62:	6163      	str	r3, [r4, #20]
 800be64:	b002      	add	sp, #8
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	ab01      	add	r3, sp, #4
 800be6a:	466a      	mov	r2, sp
 800be6c:	f7ff ffc8 	bl	800be00 <__swhatbuf_r>
 800be70:	9900      	ldr	r1, [sp, #0]
 800be72:	4605      	mov	r5, r0
 800be74:	4630      	mov	r0, r6
 800be76:	f7fc ff89 	bl	8008d8c <_malloc_r>
 800be7a:	b948      	cbnz	r0, 800be90 <__smakebuf_r+0x44>
 800be7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be80:	059a      	lsls	r2, r3, #22
 800be82:	d4ef      	bmi.n	800be64 <__smakebuf_r+0x18>
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	f043 0302 	orr.w	r3, r3, #2
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	e7e3      	b.n	800be58 <__smakebuf_r+0xc>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	6020      	str	r0, [r4, #0]
 800be94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	9b00      	ldr	r3, [sp, #0]
 800be9c:	6163      	str	r3, [r4, #20]
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	6120      	str	r0, [r4, #16]
 800bea2:	b15b      	cbz	r3, 800bebc <__smakebuf_r+0x70>
 800bea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea8:	4630      	mov	r0, r6
 800beaa:	f000 f81d 	bl	800bee8 <_isatty_r>
 800beae:	b128      	cbz	r0, 800bebc <__smakebuf_r+0x70>
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	f023 0303 	bic.w	r3, r3, #3
 800beb6:	f043 0301 	orr.w	r3, r3, #1
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	431d      	orrs	r5, r3
 800bec0:	81a5      	strh	r5, [r4, #12]
 800bec2:	e7cf      	b.n	800be64 <__smakebuf_r+0x18>

0800bec4 <_fstat_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	4d07      	ldr	r5, [pc, #28]	; (800bee4 <_fstat_r+0x20>)
 800bec8:	2300      	movs	r3, #0
 800beca:	4604      	mov	r4, r0
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	f7f5 fc7a 	bl	80017ca <_fstat>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d102      	bne.n	800bee0 <_fstat_r+0x1c>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	b103      	cbz	r3, 800bee0 <_fstat_r+0x1c>
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	bd38      	pop	{r3, r4, r5, pc}
 800bee2:	bf00      	nop
 800bee4:	20004f54 	.word	0x20004f54

0800bee8 <_isatty_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d06      	ldr	r5, [pc, #24]	; (800bf04 <_isatty_r+0x1c>)
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f5 fc79 	bl	80017ea <_isatty>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_isatty_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_isatty_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20004f54 	.word	0x20004f54

0800bf08 <_init>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr

0800bf14 <_fini>:
 800bf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf16:	bf00      	nop
 800bf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1a:	bc08      	pop	{r3}
 800bf1c:	469e      	mov	lr, r3
 800bf1e:	4770      	bx	lr
