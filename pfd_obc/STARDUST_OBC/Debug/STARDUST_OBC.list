
STARDUST_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08013cf8  08013cf8  00023cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014528  08014528  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014528  08014528  00024528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014530  08014530  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014530  08014530  00024530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014534  08014534  00024534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014538  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006fb0  200001f0  08014728  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200071a0  08014728  000371a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000299f3  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006209  00000000  00000000  00059c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002160  00000000  00000000  0005fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019af  00000000  00000000  00061fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000097ea  00000000  00000000  0006396f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b084  00000000  00000000  0006d159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaa2a  00000000  00000000  000981dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a35c  00000000  00000000  00182c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018cf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013cdc 	.word	0x08013cdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08013cdc 	.word	0x08013cdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <checkLiftoff>:
#include "checking.h"

#include "system.h"

uint8_t checkLiftoff()
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    if (fabs((double)accel.absG) > LIFTOFF_ACCELERATION &&
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <checkLiftoff+0x40>)
 8001036:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800103a:	eef0 7ae7 	vabs.f32	s15, s15
 800103e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd0b      	ble.n	8001064 <checkLiftoff+0x34>
        altitude.altitude > LIFTOFF_ALTITUDE)
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <checkLiftoff+0x44>)
 800104e:	edd3 7a03 	vldr	s15, [r3, #12]
    if (fabs((double)accel.absG) > LIFTOFF_ACCELERATION &&
 8001052:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001078 <checkLiftoff+0x48>
 8001056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd01      	ble.n	8001064 <checkLiftoff+0x34>
    {
        return 1;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <checkLiftoff+0x36>
    }
    else
        return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000854 	.word	0x20000854
 8001074:	20000918 	.word	0x20000918
 8001078:	43870000 	.word	0x43870000

0800107c <checkBurnout>:

uint8_t checkBurnout()
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
    if (fabs((double)accel.absG) < BURNOUT_ACCELERATION &&
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <checkBurnout+0x40>)
 8001082:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001086:	eef0 7ae7 	vabs.f32	s15, s15
 800108a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800108e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d50b      	bpl.n	80010b0 <checkBurnout+0x34>
        altitude.altitude > BURNOUT_ALTITUDE)
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <checkBurnout+0x44>)
 800109a:	edd3 7a03 	vldr	s15, [r3, #12]
    if (fabs((double)accel.absG) < BURNOUT_ACCELERATION &&
 800109e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010c4 <checkBurnout+0x48>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd01      	ble.n	80010b0 <checkBurnout+0x34>
    {
        return 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <checkBurnout+0x36>
    }
    else
        return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000854 	.word	0x20000854
 80010c0:	20000918 	.word	0x20000918
 80010c4:	44480000 	.word	0x44480000

080010c8 <checkApogee>:

uint8_t checkApogee()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    if (altitude.altitude > APOGEE_ALTITUDE &&
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <checkApogee+0x80>)
 80010ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800114c <checkApogee+0x84>
 80010d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dd2d      	ble.n	800113c <checkApogee+0x74>
        velocity.verticalVelocity < APOGEE_VERTICAL_VELOCITY &&
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <checkApogee+0x88>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
    if (altitude.altitude > APOGEE_ALTITUDE &&
 80010e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d523      	bpl.n	800113c <checkApogee+0x74>
        accel.x < 0.5 && (fabs(accel.y) > 0.5 || fabs(accel.z) > 0.5))
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <checkApogee+0x8c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
        velocity.verticalVelocity < APOGEE_VERTICAL_VELOCITY &&
 80010fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d519      	bpl.n	800113c <checkApogee+0x74>
        accel.x < 0.5 && (fabs(accel.y) > 0.5 || fabs(accel.z) > 0.5))
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <checkApogee+0x8c>)
 800110a:	edd3 7a01 	vldr	s15, [r3, #4]
 800110e:	eef0 7ae7 	vabs.f32	s15, s15
 8001112:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dc0b      	bgt.n	8001138 <checkApogee+0x70>
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <checkApogee+0x8c>)
 8001122:	edd3 7a02 	vldr	s15, [r3, #8]
 8001126:	eef0 7ae7 	vabs.f32	s15, s15
 800112a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	dd01      	ble.n	800113c <checkApogee+0x74>
    {
        return 1;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <checkApogee+0x76>
    }
    else
        return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20000918 	.word	0x20000918
 800114c:	4541c000 	.word	0x4541c000
 8001150:	200008d0 	.word	0x200008d0
 8001154:	20000854 	.word	0x20000854

08001158 <checkMainParachute>:

uint8_t checkMainParachute()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
    if (altitude.altitude < MAIN_PARACHUTE_ALTITUDE)
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <checkMainParachute+0x28>)
 800115e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001162:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001184 <checkMainParachute+0x2c>
 8001166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d501      	bpl.n	8001174 <checkMainParachute+0x1c>
    {
        return 1;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <checkMainParachute+0x1e>
    }
    else
        return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000918 	.word	0x20000918
 8001184:	447a0000 	.word	0x447a0000

08001188 <checkLanding>:

uint8_t checkLanding()
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    if (velocity.verticalVelocity > -1 && velocity.verticalVelocity < 1 &&
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <checkLanding+0x50>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	dd15      	ble.n	80011cc <checkLanding+0x44>
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <checkLanding+0x50>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d50b      	bpl.n	80011cc <checkLanding+0x44>
        altitude.altitude < 100)
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <checkLanding+0x54>)
 80011b6:	edd3 7a03 	vldr	s15, [r3, #12]
    if (velocity.verticalVelocity > -1 && velocity.verticalVelocity < 1 &&
 80011ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011e0 <checkLanding+0x58>
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d501      	bpl.n	80011cc <checkLanding+0x44>
    {
        return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <checkLanding+0x46>
    }
    else
        return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200008d0 	.word	0x200008d0
 80011dc:	20000918 	.word	0x20000918
 80011e0:	42c80000 	.word	0x42c80000

080011e4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <BSP_I2C2_Init+0x58>)
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <BSP_I2C2_Init+0x5c>)
 80011f2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <BSP_I2C2_Init+0x60>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	4912      	ldr	r1, [pc, #72]	; (8001244 <BSP_I2C2_Init+0x60>)
 80011fc:	600a      	str	r2, [r1, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d117      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <BSP_I2C2_Init+0x58>)
 8001204:	f003 fcaf 	bl	8004b66 <HAL_I2C_GetState>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d111      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <BSP_I2C2_Init+0x58>)
 8001210:	f000 f84e 	bl	80012b0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <BSP_I2C2_Init+0x58>)
 800121c:	f000 f814 	bl	8001248 <MX_I2C2_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001226:	f06f 0307 	mvn.w	r3, #7
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <BSP_I2C2_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000020c 	.word	0x2000020c
 8001240:	40005800 	.word	0x40005800
 8001244:	20000260 	.word	0x20000260

08001248 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <MX_I2C2_Init+0x60>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C2_Init+0x64>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f002 fe21 	bl	8003ed4 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005800 	.word	0x40005800
 80012ac:	00061a80 	.word	0x00061a80

080012b0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <I2C2_MspInit+0xb8>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a29      	ldr	r2, [pc, #164]	; (8001368 <I2C2_MspInit+0xb8>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <I2C2_MspInit+0xb8>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <I2C2_MspInit+0xb8>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <I2C2_MspInit+0xb8>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <I2C2_MspInit+0xb8>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001302:	2304      	movs	r3, #4
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <I2C2_MspInit+0xbc>)
 800130e:	f002 fbf7 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001324:	2304      	movs	r3, #4
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <I2C2_MspInit+0xc0>)
 8001330:	f002 fbe6 	bl	8003b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <I2C2_MspInit+0xb8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <I2C2_MspInit+0xb8>)
 800133e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <I2C2_MspInit+0xb8>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2021      	movs	r0, #33	; 0x21
 8001356:	f001 ff8d 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800135a:	2021      	movs	r0, #33	; 0x21
 800135c:	f001 ffa6 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800

08001374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_DMA_Init+0x4c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_DMA_Init+0x4c>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_DMA_Init+0x4c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	203b      	movs	r0, #59	; 0x3b
 800139c:	f001 ff6a 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013a0:	203b      	movs	r0, #59	; 0x3b
 80013a2:	f001 ff83 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	2045      	movs	r0, #69	; 0x45
 80013ac:	f001 ff62 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013b0:	2045      	movs	r0, #69	; 0x45
 80013b2:	f001 ff7b 	bl	80032ac <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle =
        osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <MX_FREERTOS_Init+0x78>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_FREERTOS_Init+0x7c>)
 80013ce:	f009 fdaa 	bl	800af26 <osThreadNew>
 80013d2:	4603      	mov	r3, r0
    defaultTaskHandle =
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_FREERTOS_Init+0x80>)
 80013d6:	6013      	str	r3, [r2, #0]

    /* creation of runCommand */
    runCommandHandle =
        osThreadNew(runCommandEntry, NULL, &runCommand_attributes);
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_FREERTOS_Init+0x84>)
 80013da:	2100      	movs	r1, #0
 80013dc:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_FREERTOS_Init+0x88>)
 80013de:	f009 fda2 	bl	800af26 <osThreadNew>
 80013e2:	4603      	mov	r3, r0
    runCommandHandle =
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <MX_FREERTOS_Init+0x8c>)
 80013e6:	6013      	str	r3, [r2, #0]

    /* creation of sendTelemetry */
    sendTelemetryHandle =
        osThreadNew(sendTelemetryEntry, NULL, &sendTelemetry_attributes);
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <MX_FREERTOS_Init+0x90>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_FREERTOS_Init+0x94>)
 80013ee:	f009 fd9a 	bl	800af26 <osThreadNew>
 80013f2:	4603      	mov	r3, r0
    sendTelemetryHandle =
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <MX_FREERTOS_Init+0x98>)
 80013f6:	6013      	str	r3, [r2, #0]

    /* creation of checkState */
    checkStateHandle =
        osThreadNew(checkStateEntry, NULL, &checkState_attributes);
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <MX_FREERTOS_Init+0x9c>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4819      	ldr	r0, [pc, #100]	; (8001464 <MX_FREERTOS_Init+0xa0>)
 80013fe:	f009 fd92 	bl	800af26 <osThreadNew>
 8001402:	4603      	mov	r3, r0
    checkStateHandle =
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <MX_FREERTOS_Init+0xa4>)
 8001406:	6013      	str	r3, [r2, #0]

    /* creation of someLoop */
    someLoopHandle = osThreadNew(someLoopEntry, NULL, &someLoop_attributes);
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_FREERTOS_Init+0xa8>)
 800140a:	2100      	movs	r1, #0
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <MX_FREERTOS_Init+0xac>)
 800140e:	f009 fd8a 	bl	800af26 <osThreadNew>
 8001412:	4603      	mov	r3, r0
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_FREERTOS_Init+0xb0>)
 8001416:	6013      	str	r3, [r2, #0]

    /* creation of sdLog */
    sdLogHandle = osThreadNew(sdLogEnrty, NULL, &sdLog_attributes);
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <MX_FREERTOS_Init+0xb4>)
 800141a:	2100      	movs	r1, #0
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <MX_FREERTOS_Init+0xb8>)
 800141e:	f009 fd82 	bl	800af26 <osThreadNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a16      	ldr	r2, [pc, #88]	; (8001480 <MX_FREERTOS_Init+0xbc>)
 8001426:	6013      	str	r3, [r2, #0]

    /* creation of dataTask */
    dataTaskHandle = osThreadNew(dataTaskEntry, NULL, &dataTask_attributes);
 8001428:	4a16      	ldr	r2, [pc, #88]	; (8001484 <MX_FREERTOS_Init+0xc0>)
 800142a:	2100      	movs	r1, #0
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <MX_FREERTOS_Init+0xc4>)
 800142e:	f009 fd7a 	bl	800af26 <osThreadNew>
 8001432:	4603      	mov	r3, r0
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_FREERTOS_Init+0xc8>)
 8001436:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_THREADS */

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08013f80 	.word	0x08013f80
 8001440:	08001491 	.word	0x08001491
 8001444:	20000268 	.word	0x20000268
 8001448:	08013fa4 	.word	0x08013fa4
 800144c:	080014a1 	.word	0x080014a1
 8001450:	2000026c 	.word	0x2000026c
 8001454:	08013fc8 	.word	0x08013fc8
 8001458:	080014b1 	.word	0x080014b1
 800145c:	20000270 	.word	0x20000270
 8001460:	08013fec 	.word	0x08013fec
 8001464:	080014c1 	.word	0x080014c1
 8001468:	20000274 	.word	0x20000274
 800146c:	08014010 	.word	0x08014010
 8001470:	08001625 	.word	0x08001625
 8001474:	20000278 	.word	0x20000278
 8001478:	08014034 	.word	0x08014034
 800147c:	08001635 	.word	0x08001635
 8001480:	2000027c 	.word	0x2000027c
 8001484:	08014058 	.word	0x08014058
 8001488:	08001679 	.word	0x08001679
 800148c:	20000280 	.word	0x20000280

08001490 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f009 fdd6 	bl	800b04a <osDelay>
 800149e:	e7fb      	b.n	8001498 <StartDefaultTask+0x8>

080014a0 <runCommandEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCommandEntry */
void runCommandEntry(void *argument)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
        //            HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin,
        //            GPIO_PIN_SET); HAL_GPIO_WritePin(MAINP_GPIO_Port,
        //            MAINP_Pin, GPIO_PIN_SET);
        //        }

        osDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f009 fdce 	bl	800b04a <osDelay>
 80014ae:	e7fb      	b.n	80014a8 <runCommandEntry+0x8>

080014b0 <sendTelemetryEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sendTelemetryEntry */
void sendTelemetryEntry(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
        //        createTxString();
        //        HAL_UART_Transmit(&huart2, (uint8_t *)tlcTxString, strlen(tlcTxString),
        //                          100);
        //        HAL_UART_Transmit(&huart4, (uint8_t *)tlcTxString, strlen(tlcTxString),
        //                          100);
        osDelay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f009 fdc6 	bl	800b04a <osDelay>
 80014be:	e7fb      	b.n	80014b8 <sendTelemetryEntry+0x8>

080014c0 <checkStateEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_checkStateEntry */
void checkStateEntry(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN checkStateEntry */
    /* Infinite loop */
    for (;;)
    {
        if (time.current != time.prevTime)
 80014c8:	4b51      	ldr	r3, [pc, #324]	; (8001610 <checkStateEntry+0x150>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4b50      	ldr	r3, [pc, #320]	; (8001610 <checkStateEntry+0x150>)
 80014d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d00f      	beq.n	80014fe <checkStateEntry+0x3e>
        {
            sprintf(flightStateData, "%d\n", flightState);
 80014de:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <checkStateEntry+0x154>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	494c      	ldr	r1, [pc, #304]	; (8001618 <checkStateEntry+0x158>)
 80014e6:	484d      	ldr	r0, [pc, #308]	; (800161c <checkStateEntry+0x15c>)
 80014e8:	f00d fc30 	bl	800ed4c <siprintf>
            HAL_UART_Transmit_IT(&huart2, flightStateData, sizeof(flightStateData));
 80014ec:	2202      	movs	r2, #2
 80014ee:	494b      	ldr	r1, [pc, #300]	; (800161c <checkStateEntry+0x15c>)
 80014f0:	484b      	ldr	r0, [pc, #300]	; (8001620 <checkStateEntry+0x160>)
 80014f2:	f007 fcf2 	bl	8008eda <HAL_UART_Transmit_IT>
            time.prevTime = time.current;
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <checkStateEntry+0x150>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a45      	ldr	r2, [pc, #276]	; (8001610 <checkStateEntry+0x150>)
 80014fc:	6053      	str	r3, [r2, #4]
        }

        switch (flightState)
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <checkStateEntry+0x154>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3b01      	subs	r3, #1
 8001504:	2b08      	cmp	r3, #8
 8001506:	d872      	bhi.n	80015ee <checkStateEntry+0x12e>
 8001508:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <checkStateEntry+0x50>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001535 	.word	0x08001535
 8001514:	080015ef 	.word	0x080015ef
 8001518:	080015ef 	.word	0x080015ef
 800151c:	0800154f 	.word	0x0800154f
 8001520:	08001569 	.word	0x08001569
 8001524:	08001589 	.word	0x08001589
 8001528:	080015a9 	.word	0x080015a9
 800152c:	080015c3 	.word	0x080015c3
 8001530:	080015e5 	.word	0x080015e5
        {
        case START:
            if (checkLiftoff() == 1)
 8001534:	f7ff fd7c 	bl	8001030 <checkLiftoff>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d15b      	bne.n	80015f6 <checkStateEntry+0x136>
            {
                time.liftoffTime = time.current;
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <checkStateEntry+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <checkStateEntry+0x150>)
 8001544:	6093      	str	r3, [r2, #8]
                flightState = AFTER_LIFTOFF;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <checkStateEntry+0x154>)
 8001548:	2204      	movs	r2, #4
 800154a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800154c:	e053      	b.n	80015f6 <checkStateEntry+0x136>

        case AFTER_LIFTOFF:
            if (checkBurnout() == 1)
 800154e:	f7ff fd95 	bl	800107c <checkBurnout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d150      	bne.n	80015fa <checkStateEntry+0x13a>
            {
                time.burnoutTime = time.current;
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <checkStateEntry+0x150>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <checkStateEntry+0x150>)
 800155e:	60d3      	str	r3, [r2, #12]
                flightState = AFTER_BURNOUT;
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <checkStateEntry+0x154>)
 8001562:	2205      	movs	r2, #5
 8001564:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001566:	e048      	b.n	80015fa <checkStateEntry+0x13a>

        case AFTER_BURNOUT:
            if (checkApogee() == 1)
 8001568:	f7ff fdae 	bl	80010c8 <checkApogee>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d145      	bne.n	80015fe <checkStateEntry+0x13e>
            {
                time.apogeeTime = time.current;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <checkStateEntry+0x150>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a26      	ldr	r2, [pc, #152]	; (8001610 <checkStateEntry+0x150>)
 8001578:	6113      	str	r3, [r2, #16]
                flightState = AFTER_APOGEE;
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <checkStateEntry+0x154>)
 800157c:	2206      	movs	r2, #6
 800157e:	701a      	strb	r2, [r3, #0]
                dragSchute(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f001 fb2b 	bl	8002bdc <dragSchute>
            }
            break;
 8001586:	e03a      	b.n	80015fe <checkStateEntry+0x13e>

        case AFTER_APOGEE:
            if (checkMainParachute() == 1)
 8001588:	f7ff fde6 	bl	8001158 <checkMainParachute>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d137      	bne.n	8001602 <checkStateEntry+0x142>
            {
                time.mainParachuteTime = time.current;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <checkStateEntry+0x150>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <checkStateEntry+0x150>)
 8001598:	6153      	str	r3, [r2, #20]
                flightState = AFTER_MAIN_PAR;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <checkStateEntry+0x154>)
 800159c:	2207      	movs	r2, #7
 800159e:	701a      	strb	r2, [r3, #0]
                mainSchute(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f001 fb35 	bl	8002c10 <mainSchute>
            }
            break;
 80015a6:	e02c      	b.n	8001602 <checkStateEntry+0x142>

        case AFTER_MAIN_PAR:
            if (checkLanding() == 1)
 80015a8:	f7ff fdee 	bl	8001188 <checkLanding>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d129      	bne.n	8001606 <checkStateEntry+0x146>
            {
                time.landingTime = time.current;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <checkStateEntry+0x150>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <checkStateEntry+0x150>)
 80015b8:	6213      	str	r3, [r2, #32]
                flightState = LANDED;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <checkStateEntry+0x154>)
 80015bc:	2208      	movs	r2, #8
 80015be:	701a      	strb	r2, [r3, #0]
            }
            break;
 80015c0:	e021      	b.n	8001606 <checkStateEntry+0x146>

        case LANDED:
            if (time.landingTime == 0.0f)
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <checkStateEntry+0x150>)
 80015c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80015c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d103      	bne.n	80015da <checkStateEntry+0x11a>
            {
                time.landingTime = time.current;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <checkStateEntry+0x150>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <checkStateEntry+0x150>)
 80015d8:	6213      	str	r3, [r2, #32]
            }
            osDelay(10000); /* TODO: Something for saving power*/
 80015da:	f242 7010 	movw	r0, #10000	; 0x2710
 80015de:	f009 fd34 	bl	800b04a <osDelay>
            break;
 80015e2:	e011      	b.n	8001608 <checkStateEntry+0x148>

        case FLIGHT_FAILURE:
            osDelay(10000); /* TODO: Something for saving power*/
 80015e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80015e8:	f009 fd2f 	bl	800b04a <osDelay>
            break;
 80015ec:	e00c      	b.n	8001608 <checkStateEntry+0x148>

        default:
        	flightState = START;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <checkStateEntry+0x154>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
            break;
 80015f4:	e008      	b.n	8001608 <checkStateEntry+0x148>
            break;
 80015f6:	bf00      	nop
 80015f8:	e006      	b.n	8001608 <checkStateEntry+0x148>
            break;
 80015fa:	bf00      	nop
 80015fc:	e004      	b.n	8001608 <checkStateEntry+0x148>
            break;
 80015fe:	bf00      	nop
 8001600:	e002      	b.n	8001608 <checkStateEntry+0x148>
            break;
 8001602:	bf00      	nop
 8001604:	e000      	b.n	8001608 <checkStateEntry+0x148>
            break;
 8001606:	bf00      	nop
        }
        osDelay(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f009 fd1e 	bl	800b04a <osDelay>
        if (time.current != time.prevTime)
 800160e:	e75b      	b.n	80014c8 <checkStateEntry+0x8>
 8001610:	20000830 	.word	0x20000830
 8001614:	20000000 	.word	0x20000000
 8001618:	08013d4c 	.word	0x08013d4c
 800161c:	20000264 	.word	0x20000264
 8001620:	20000ab4 	.word	0x20000ab4

08001624 <someLoopEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_someLoopEntry */
void someLoopEntry(void *argument)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
        //        strlen(tlcTxString),
        //                          100);
        //        HAL_UART_Transmit(&huart2, (uint8_t *)tlcTxString,
        //        strlen(tlcTxString),
        //                          100);
        osDelay(10);
 800162c:	200a      	movs	r0, #10
 800162e:	f009 fd0c 	bl	800b04a <osDelay>
 8001632:	e7fb      	b.n	800162c <someLoopEntry+0x8>

08001634 <sdLogEnrty>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sdLogEnrty */
void sdLogEnrty(void *argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN sdLogEnrty */
    // initSD();
    // fram_init();

    int fram_flight_state = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
    fram_flight_state = fram_read8(FRAM_FLIGHT_STATE_ADDR);
 8001640:	2050      	movs	r0, #80	; 0x50
 8001642:	f001 fc13 	bl	8002e6c <fram_read8>
 8001646:	4603      	mov	r3, r0
 8001648:	617b      	str	r3, [r7, #20]
    if (fram_flight_state == LANDED)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d101      	bne.n	8001654 <sdLogEnrty+0x20>
    {
        fram_flight_state = START;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
    }
    if (fram_flight_state != START)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d003      	beq.n	8001662 <sdLogEnrty+0x2e>
    {
        flightState = fram_flight_state;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <sdLogEnrty+0x40>)
 8001660:	701a      	strb	r2, [r3, #0]
    }

    float test_float = 0.0f;
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
    int tick_t = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
        // fram_write8(FRAM_SYS_TICK_ADDR, fram_test8);
        // osDelay(10);

        // fram_debug_data = fram_read8(FRAM_SYS_TICK_ADDR);

        osDelay(1);
 800166c:	2001      	movs	r0, #1
 800166e:	f009 fcec 	bl	800b04a <osDelay>
 8001672:	e7fb      	b.n	800166c <sdLogEnrty+0x38>
 8001674:	20000000 	.word	0x20000000

08001678 <dataTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_dataTaskEntry */
void dataTaskEntry(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN dataTaskEntry */
    // int temp;
    // temp = HAL_GetTick();
    initFilter();
 8001680:	f001 fa06 	bl	8002a90 <initFilter>

    // initBarometer();
    // initIMU();
    // initMagnetometer();,
    // readData();
    basePressure(); // init fonk. base pressure değeri için bir fonk.
 8001684:	f000 ffb0 	bl	80025e8 <basePressure>
    /* Infinite loop */
    for (;;)
    {
        // temp = HAL_GetTick();
        //
        readTime();
 8001688:	f000 ff26 	bl	80024d8 <readTime>
        readAltitude();
 800168c:	f000 ffd8 	bl	8002640 <readAltitude>
        readIMU();
 8001690:	f001 f87a 	bl	8002788 <readIMU>
        // readMagnetometer();
        //  HAL_GPIO_TogglePin(USERL_GPIO_Port, USERL_Pin);

        // velocityCalculated();
        //  dataCollectingTime = HAL_GetTick() - temp;
        osDelay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f009 fcd8 	bl	800b04a <osDelay>
        readTime();
 800169a:	e7f5      	b.n	8001688 <dataTaskEntry+0x10>

0800169c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <MX_GPIO_Init+0x120>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <MX_GPIO_Init+0x120>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <MX_GPIO_Init+0x120>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <MX_GPIO_Init+0x120>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a39      	ldr	r2, [pc, #228]	; (80017bc <MX_GPIO_Init+0x120>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <MX_GPIO_Init+0x120>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <MX_GPIO_Init+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <MX_GPIO_Init+0x120>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <MX_GPIO_Init+0x120>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <MX_GPIO_Init+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a2b      	ldr	r2, [pc, #172]	; (80017bc <MX_GPIO_Init+0x120>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <MX_GPIO_Init+0x120>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAINP_Pin|DRAGP_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2103      	movs	r1, #3
 8001726:	4826      	ldr	r0, [pc, #152]	; (80017c0 <MX_GPIO_Init+0x124>)
 8001728:	f002 fb96 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USERL_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2118      	movs	r1, #24
 8001730:	4824      	ldr	r0, [pc, #144]	; (80017c4 <MX_GPIO_Init+0x128>)
 8001732:	f002 fb91 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USERB_Pin;
 8001736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USERB_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <MX_GPIO_Init+0x124>)
 800174e:	f002 f9d7 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <MX_GPIO_Init+0x124>)
 8001768:	f002 f9ca 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAINP_Pin|DRAGP_Pin;
 800176c:	2303      	movs	r3, #3
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480f      	ldr	r0, [pc, #60]	; (80017c0 <MX_GPIO_Init+0x124>)
 8001784:	f002 f9bc 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USERL_Pin|BUZZER_Pin;
 8001788:	2318      	movs	r3, #24
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_GPIO_Init+0x128>)
 80017a0:	f002 f9ae 	bl	8003b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2105      	movs	r1, #5
 80017a8:	2028      	movs	r0, #40	; 0x28
 80017aa:	f001 fd63 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ae:	2028      	movs	r0, #40	; 0x28
 80017b0:	f001 fd7c 	bl	80032ac <HAL_NVIC_EnableIRQ>

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020400 	.word	0x40020400

080017c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_I2C1_Init+0x50>)
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <MX_I2C1_Init+0x54>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_I2C1_Init+0x50>)
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_I2C1_Init+0x58>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_I2C1_Init+0x50>)
 80017e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_I2C1_Init+0x50>)
 8001806:	f002 fb65 	bl	8003ed4 <HAL_I2C_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001810:	f000 fa67 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000284 	.word	0x20000284
 800181c:	40005400 	.word	0x40005400
 8001820:	00061a80 	.word	0x00061a80

08001824 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_I2C3_Init+0x50>)
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <MX_I2C3_Init+0x54>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_I2C3_Init+0x50>)
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_I2C3_Init+0x58>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_I2C3_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_I2C3_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_I2C3_Init+0x50>)
 8001842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001846:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <MX_I2C3_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_I2C3_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <MX_I2C3_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_I2C3_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_I2C3_Init+0x50>)
 8001862:	f002 fb37 	bl	8003ed4 <HAL_I2C_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 fa39 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200002d8 	.word	0x200002d8
 8001878:	40005c00 	.word	0x40005c00
 800187c:	000186a0 	.word	0x000186a0

08001880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <HAL_I2C_MspInit+0x148>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d134      	bne.n	800190c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c2:	2312      	movs	r3, #18
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ce:	2304      	movs	r3, #4
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	483d      	ldr	r0, [pc, #244]	; (80019d0 <HAL_I2C_MspInit+0x150>)
 80018da:	f002 f911 	bl	8003b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a39      	ldr	r2, [pc, #228]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2105      	movs	r1, #5
 80018fe:	201f      	movs	r0, #31
 8001900:	f001 fcb8 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001904:	201f      	movs	r0, #31
 8001906:	f001 fcd1 	bl	80032ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800190a:	e058      	b.n	80019be <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_I2C_MspInit+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d153      	bne.n	80019be <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a2b      	ldr	r2, [pc, #172]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a24      	ldr	r2, [pc, #144]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800194e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001960:	2304      	movs	r3, #4
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	481b      	ldr	r0, [pc, #108]	; (80019d8 <HAL_I2C_MspInit+0x158>)
 800196c:	f002 f8c8 	bl	8003b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001976:	2312      	movs	r3, #18
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001982:	2304      	movs	r3, #4
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <HAL_I2C_MspInit+0x15c>)
 800198e:	f002 f8b7 	bl	8003b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 800199c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2048      	movs	r0, #72	; 0x48
 80019b4:	f001 fc5e 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80019b8:	2048      	movs	r0, #72	; 0x48
 80019ba:	f001 fc77 	bl	80032ac <HAL_NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40005400 	.word	0x40005400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40005c00 	.word	0x40005c00
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020000 	.word	0x40020000

080019e0 <HAL_I2C_MemRxCpltCallback>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_I2C_MemRxCpltCallback+0x2c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d004      	beq.n	80019fe <HAL_I2C_MemRxCpltCallback+0x1e>
    {
        /* BMP280 IT*/
    }
    else if (hi2c->Instance == hi2c2.Instance)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_I2C_MemRxCpltCallback+0x30>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	429a      	cmp	r2, r3
    }
    else if (hi2c->Instance == hi2c3.Instance)
    {
        /* LIS & MB85R  IT*/
    }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000284 	.word	0x20000284
 8001a10:	2000020c 	.word	0x2000020c

08001a14 <HAL_UART_RxCpltCallback>:
uint8_t rxBuffer[2];
uint8_t rxIndex = 0;
uint8_t rxStr[270];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart4.Instance)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <HAL_UART_RxCpltCallback+0x118>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d14b      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0xac>
    {
        // receive telemetry strong that ends with '\n' then parse
        if (tlcRxByte == '\n')
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_UART_RxCpltCallback+0x11c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0a      	cmp	r3, #10
 8001a2e:	d11f      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0x5c>
        {
            tlcRxString[tlcRxIndex] = '\n';
 8001a30:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a40      	ldr	r2, [pc, #256]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a36:	210a      	movs	r1, #10
 8001a38:	54d1      	strb	r1, [r2, r3]
            tlcRxIndex++;
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a42:	6013      	str	r3, [r2, #0]
            // parse telemetry string
            parseTlcString(tlcRxString);
 8001a44:	483c      	ldr	r0, [pc, #240]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a46:	f000 ffff 	bl	8002a48 <parseTlcString>
            tlcRxIndex = 0;
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
            // clear telemetry string
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e007      	b.n	8001a66 <HAL_UART_RxCpltCallback+0x52>
            {
                tlcRxString[i] = '\0';
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a6c:	d3f3      	bcc.n	8001a56 <HAL_UART_RxCpltCallback+0x42>
 8001a6e:	e00a      	b.n	8001a86 <HAL_UART_RxCpltCallback+0x72>
            }
        }
        else
        {
            tlcRxString[tlcRxIndex] = tlcRxByte;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <HAL_UART_RxCpltCallback+0x11c>)
 8001a76:	7811      	ldrb	r1, [r2, #0]
 8001a78:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a7a:	54d1      	strb	r1, [r2, r3]
            tlcRxIndex++;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a84:	6013      	str	r3, [r2, #0]
        }

        if (tlcRxIndex > STRING_BUFFER_SIZE)
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a8e:	dd11      	ble.n	8001ab4 <HAL_UART_RxCpltCallback+0xa0>
        {
            tlcRxIndex = 0;
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e007      	b.n	8001aac <HAL_UART_RxCpltCallback+0x98>
            {
                tlcRxString[i] = '\0';
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ab2:	d3f3      	bcc.n	8001a9c <HAL_UART_RxCpltCallback+0x88>
            }
        }
        HAL_UART_Receive_IT(&huart4, &tlcRxByte, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	491e      	ldr	r1, [pc, #120]	; (8001b30 <HAL_UART_RxCpltCallback+0x11c>)
 8001ab8:	481c      	ldr	r0, [pc, #112]	; (8001b2c <HAL_UART_RxCpltCallback+0x118>)
 8001aba:	f007 fa53 	bl	8008f64 <HAL_UART_Receive_IT>
 8001abe:	e02c      	b.n	8001b1a <HAL_UART_RxCpltCallback+0x106>
    }
    else if (huart->Instance == huart2.Instance)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_UART_RxCpltCallback+0x128>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d126      	bne.n	8001b1a <HAL_UART_RxCpltCallback+0x106>
    {
        if (rxBuffer[0] != '\n')
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_UART_RxCpltCallback+0x12c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b0a      	cmp	r3, #10
 8001ad2:	d00d      	beq.n	8001af0 <HAL_UART_RxCpltCallback+0xdc>
        {
            rxStr[rxIndex] = rxBuffer[0];
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_UART_RxCpltCallback+0x12c>)
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_UART_RxCpltCallback+0x134>)
 8001ae0:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e014      	b.n	8001b1a <HAL_UART_RxCpltCallback+0x106>
        }
        else
        {
            //parseData(rxStr);
            //parseKongrulData(rxStr);
            parseIllinoisData(rxStr);
 8001af0:	4815      	ldr	r0, [pc, #84]	; (8001b48 <HAL_UART_RxCpltCallback+0x134>)
 8001af2:	f000 fc91 	bl	8002418 <parseIllinoisData>
            rxIndex = 0;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(rxStr); i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e007      	b.n	8001b12 <HAL_UART_RxCpltCallback+0xfe>
            {
                rxStr[i] = '\0';
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_UART_RxCpltCallback+0x134>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(rxStr); i++)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001b18:	d3f3      	bcc.n	8001b02 <HAL_UART_RxCpltCallback+0xee>
            }
        }
    }
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4908      	ldr	r1, [pc, #32]	; (8001b40 <HAL_UART_RxCpltCallback+0x12c>)
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <HAL_UART_RxCpltCallback+0x128>)
 8001b20:	f007 fa20 	bl	8008f64 <HAL_UART_Receive_IT>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000a70 	.word	0x20000a70
 8001b30:	2000032c 	.word	0x2000032c
 8001b34:	20000330 	.word	0x20000330
 8001b38:	200005d8 	.word	0x200005d8
 8001b3c:	20000ab4 	.word	0x20000ab4
 8001b40:	20000334 	.word	0x20000334
 8001b44:	20000336 	.word	0x20000336
 8001b48:	20000338 	.word	0x20000338

08001b4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001b52:	f001 fa71 	bl	8003038 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001b56:	f000 f843 	bl	8001be0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001b5a:	f7ff fd9f 	bl	800169c <MX_GPIO_Init>
    MX_DMA_Init();
 8001b5e:	f7ff fc09 	bl	8001374 <MX_DMA_Init>
    MX_I2C1_Init();
 8001b62:	f7ff fe31 	bl	80017c8 <MX_I2C1_Init>
    MX_SDIO_SD_Init();
 8001b66:	f000 f8c5 	bl	8001cf4 <MX_SDIO_SD_Init>
    MX_UART4_Init();
 8001b6a:	f001 f87d 	bl	8002c68 <MX_UART4_Init>
    MX_USART2_UART_Init();
 8001b6e:	f001 f8a5 	bl	8002cbc <MX_USART2_UART_Init>
    MX_FATFS_Init();
 8001b72:	f008 fe53 	bl	800a81c <MX_FATFS_Init>
    MX_I2C3_Init();
 8001b76:	f7ff fe55 	bl	8001824 <MX_I2C3_Init>
    /* USER CODE BEGIN 2 */
    led(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f001 f814 	bl	8002ba8 <led>
    BSP_I2C2_Init();
 8001b80:	f7ff fb30 	bl	80011e4 <BSP_I2C2_Init>

    openingThemeSong(400);
 8001b84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b88:	f000 fbf6 	bl	8002378 <openingThemeSong>

    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4911      	ldr	r1, [pc, #68]	; (8001bd4 <main+0x88>)
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <main+0x8c>)
 8001b92:	f007 f9e7 	bl	8008f64 <HAL_UART_Receive_IT>

    //     i2c address scan
    for (int i = 0; i < 0xFF + 1; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e011      	b.n	8001bc0 <main+0x74>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c3, i, 2, 10) == HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <main+0x90>)
 8001ba6:	f002 fcff 	bl	80045a8 <HAL_I2C_IsDeviceReady>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d104      	bne.n	8001bba <main+0x6e>
        {
            int a = i >> 1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	105b      	asrs	r3, r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
            a = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 0xFF + 1; i++)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	ddea      	ble.n	8001b9c <main+0x50>
    }

    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize(); /* Call init function for freertos objects (in
 8001bc6:	f009 f92d 	bl	800ae24 <osKernelInitialize>
                             freertos.c) */
    MX_FREERTOS_Init();
 8001bca:	f7ff fbfb 	bl	80013c4 <MX_FREERTOS_Init>

    /* Start scheduler */
    osKernelStart();
 8001bce:	f009 f96f 	bl	800aeb0 <osKernelStart>
    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <main+0x86>
 8001bd4:	20000334 	.word	0x20000334
 8001bd8:	20000ab4 	.word	0x20000ab4
 8001bdc:	200002d8 	.word	0x200002d8

08001be0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	2234      	movs	r2, #52	; 0x34
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00d f93d 	bl	800ee6e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <SystemClock_Config+0xe0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <SystemClock_Config+0xe0>)
 8001c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <SystemClock_Config+0xe0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c44:	2310      	movs	r3, #16
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001c50:	2308      	movs	r3, #8
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 180;
 8001c54:	23b4      	movs	r3, #180	; 0xb4
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fa83 	bl	8007174 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x98>
    {
        Error_Handler();
 8001c74:	f000 f835 	bl	8001ce2 <Error_Handler>
    }

    /** Activate the Over-Drive mode
     */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c78:	f004 fc0c 	bl	8006494 <HAL_PWREx_EnableOverDrive>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0xa6>
    {
        Error_Handler();
 8001c82:	f000 f82e 	bl	8001ce2 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001c86:	230f      	movs	r3, #15
 8001c88:	60bb      	str	r3, [r7, #8]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c96:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	2105      	movs	r1, #5
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 fc45 	bl	8006534 <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xd4>
    {
        Error_Handler();
 8001cb0:	f000 f817 	bl	8001ce2 <Error_Handler>
    }
}
 8001cb4:	bf00      	nop
 8001cb6:	3750      	adds	r7, #80	; 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8001cd6:	f001 f9d1 	bl	800307c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce6:	b672      	cpsid	i
}
 8001ce8:	bf00      	nop
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
    {
        led(0);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 ff5c 	bl	8002ba8 <led>
 8001cf0:	e7fb      	b.n	8001cea <Error_Handler+0x8>
	...

08001cf4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <MX_SDIO_SD_Init+0x3c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d1e:	2204      	movs	r2, #4
 8001d20:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	20000448 	.word	0x20000448
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0a2      	sub	sp, #136	; 0x88
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	225c      	movs	r2, #92	; 0x5c
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00d f88a 	bl	800ee6e <memset>
  if(sdHandle->Instance==SDIO)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a83      	ldr	r2, [pc, #524]	; (8001f6c <HAL_SD_MspInit+0x238>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f040 80fe 	bne.w	8001f62 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001d70:	2300      	movs	r3, #0
 8001d72:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 fd27 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001d84:	f7ff ffad 	bl	8001ce2 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d96:	6453      	str	r3, [r2, #68]	; 0x44
 8001d98:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	4b71      	ldr	r3, [pc, #452]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e14:	4619      	mov	r1, r3
 8001e16:	4857      	ldr	r0, [pc, #348]	; (8001f74 <HAL_SD_MspInit+0x240>)
 8001e18:	f001 fe72 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e20:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e30:	230c      	movs	r3, #12
 8001e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	484e      	ldr	r0, [pc, #312]	; (8001f78 <HAL_SD_MspInit+0x244>)
 8001e3e:	f001 fe5f 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e42:	2304      	movs	r3, #4
 8001e44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e54:	230c      	movs	r3, #12
 8001e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4846      	ldr	r0, [pc, #280]	; (8001f7c <HAL_SD_MspInit+0x248>)
 8001e62:	f001 fe4d 	bl	8003b00 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e68:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_SD_MspInit+0x250>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001e6c:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e86:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e88:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e96:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001eba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001ec0:	482f      	ldr	r0, [pc, #188]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ec2:	f001 fa01 	bl	80032c8 <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001ecc:	f7ff ff09 	bl	8001ce2 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_SD_MspInit+0x258>)
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f10:	2220      	movs	r2, #32
 8001f12:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f22:	2203      	movs	r2, #3
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f36:	4814      	ldr	r0, [pc, #80]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f38:	f001 f9c6 	bl	80032c8 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8001f42:	f7ff fece 	bl	8001ce2 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2105      	movs	r1, #5
 8001f56:	2031      	movs	r0, #49	; 0x31
 8001f58:	f001 f98c 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001f5c:	2031      	movs	r0, #49	; 0x31
 8001f5e:	f001 f9a5 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3788      	adds	r7, #136	; 0x88
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	200004cc 	.word	0x200004cc
 8001f84:	40026458 	.word	0x40026458
 8001f88:	2000052c 	.word	0x2000052c
 8001f8c:	400264a0 	.word	0x400264a0

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_MspInit+0x64>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	f06f 0001 	mvn.w	r0, #1
 8001fd6:	f001 f94d 	bl	8003274 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f001 f948 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f001 f961 	bl	80032ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_InitTick+0xe8>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a33      	ldr	r2, [pc, #204]	; (80020e0 <HAL_InitTick+0xe8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_InitTick+0xe8>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002024:	f107 0210 	add.w	r2, r7, #16
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fb9a 	bl	8006768 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800203e:	f004 fb6b 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 8002042:	6378      	str	r0, [r7, #52]	; 0x34
 8002044:	e004      	b.n	8002050 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002046:	f004 fb67 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 800204a:	4603      	mov	r3, r0
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_InitTick+0xec>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9b      	lsrs	r3, r3, #18
 800205a:	3b01      	subs	r3, #1
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_InitTick+0xf0>)
 8002060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_InitTick+0xf0>)
 8002068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800206c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_InitTick+0xf0>)
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_InitTick+0xf0>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_InitTick+0xf0>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_InitTick+0xf0>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002086:	4818      	ldr	r0, [pc, #96]	; (80020e8 <HAL_InitTick+0xf0>)
 8002088:	f006 fc2c 	bl	80088e4 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11b      	bne.n	80020d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800209a:	4813      	ldr	r0, [pc, #76]	; (80020e8 <HAL_InitTick+0xf0>)
 800209c:	f006 fc7c 	bl	8008998 <HAL_TIM_Base_Start_IT>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d111      	bne.n	80020d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ae:	201c      	movs	r0, #28
 80020b0:	f001 f8fc 	bl	80032ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	d808      	bhi.n	80020cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80020ba:	2200      	movs	r2, #0
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	201c      	movs	r0, #28
 80020c0:	f001 f8d8 	bl	8003274 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c4:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_InitTick+0xf4>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e002      	b.n	80020d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3738      	adds	r7, #56	; 0x38
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	2000058c 	.word	0x2000058c
 80020ec:	20000008 	.word	0x20000008

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002120:	f004 f99e 	bl	8006460 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM2_IRQHandler+0x10>)
 800212e:	f006 fca3 	bl	8008a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000058c 	.word	0x2000058c

0800213c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <I2C1_EV_IRQHandler+0x10>)
 8002142:	f002 fb5f 	bl	8004804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000284 	.word	0x20000284

08002150 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <I2C2_EV_IRQHandler+0x10>)
 8002156:	f002 fb55 	bl	8004804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000020c 	.word	0x2000020c

08002164 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <USART2_IRQHandler+0x10>)
 800216a:	f006 ff2b 	bl	8008fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000ab4 	.word	0x20000ab4

08002178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USERB_Pin);
 800217c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002180:	f001 fe84 	bl	8003e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <SDIO_IRQHandler+0x10>)
 800218e:	f005 fd01 	bl	8007b94 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000448 	.word	0x20000448

0800219c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <UART4_IRQHandler+0x10>)
 80021a2:	f006 ff0f 	bl	8008fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000a70 	.word	0x20000a70

080021b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <DMA2_Stream3_IRQHandler+0x10>)
 80021b6:	f001 fa1f 	bl	80035f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200004cc 	.word	0x200004cc

080021c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA2_Stream6_IRQHandler+0x10>)
 80021ca:	f001 fa15 	bl	80035f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000052c 	.word	0x2000052c

080021d8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <I2C3_EV_IRQHandler+0x10>)
 80021de:	f002 fb11 	bl	8004804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200002d8 	.word	0x200002d8

080021ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_kill>:

int _kill(int pid, int sig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002206:	f00c feeb 	bl	800efe0 <__errno>
 800220a:	4603      	mov	r3, r0
 800220c:	2216      	movs	r2, #22
 800220e:	601a      	str	r2, [r3, #0]
  return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_exit>:

void _exit (int status)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffe7 	bl	80021fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800222e:	e7fe      	b.n	800222e <_exit+0x12>

08002230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e00a      	b.n	8002258 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002242:	f3af 8000 	nop.w
 8002246:	4601      	mov	r1, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	b2ca      	uxtb	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf0      	blt.n	8002242 <_read+0x12>
  }

  return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e009      	b.n	8002290 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf1      	blt.n	800227c <_write+0x12>
  }
  return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_close>:

int _close(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ca:	605a      	str	r2, [r3, #4]
  return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f00c fe50 	bl	800efe0 <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20020000 	.word	0x20020000
 800236c:	00000800 	.word	0x00000800
 8002370:	200005d4 	.word	0x200005d4
 8002374:	200071a0 	.word	0x200071a0

08002378 <openingThemeSong>:
uint32_t byteswritten, bytesread;             /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[512];                           /* File read buffer */

void openingThemeSong(uint32_t time)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    buzzer(1);
 8002380:	2001      	movs	r0, #1
 8002382:	f000 fbf7 	bl	8002b74 <buzzer>
    led(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fc0e 	bl	8002ba8 <led>
    HAL_Delay(time / 5);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <openingThemeSong+0x98>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fe90 	bl	80030bc <HAL_Delay>
    buzzer(0);
 800239c:	2000      	movs	r0, #0
 800239e:	f000 fbe9 	bl	8002b74 <buzzer>
    led(0);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 fc00 	bl	8002ba8 <led>
    HAL_Delay(time / 6);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <openingThemeSong+0x9c>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fe82 	bl	80030bc <HAL_Delay>
    buzzer(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f000 fbdb 	bl	8002b74 <buzzer>
    led(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 fbf2 	bl	8002ba8 <led>
    HAL_Delay(time / 4);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fe77 	bl	80030bc <HAL_Delay>
    buzzer(0);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 fbd0 	bl	8002b74 <buzzer>
    led(0);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 fbe7 	bl	8002ba8 <led>
    HAL_Delay(time / 2);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fe6c 	bl	80030bc <HAL_Delay>
    buzzer(1);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 fbc5 	bl	8002b74 <buzzer>
    led(1);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f000 fbdc 	bl	8002ba8 <led>
    HAL_Delay(time / 4);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fe61 	bl	80030bc <HAL_Delay>
    buzzer(0);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f000 fbba 	bl	8002b74 <buzzer>
    led(0);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 fbd1 	bl	8002ba8 <led>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	aaaaaaab 	.word	0xaaaaaaab

08002418 <parseIllinoisData>:
           &altitude.temperature, &altitude.humidity,
           &gps.latitude, &gps.longtitude, &time.current);
}

void parseIllinoisData(uint8_t *data)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b096      	sub	sp, #88	; 0x58
 800241c:	af14      	add	r7, sp, #80	; 0x50
 800241e:	6078      	str	r0, [r7, #4]
    sscanf(data, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%d,%d,%f,%f,%f,%d,%f,%f", &time.current,
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <parseIllinoisData+0x68>)
 8002422:	9312      	str	r3, [sp, #72]	; 0x48
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <parseIllinoisData+0x6c>)
 8002426:	9311      	str	r3, [sp, #68]	; 0x44
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <parseIllinoisData+0x70>)
 800242a:	9310      	str	r3, [sp, #64]	; 0x40
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <parseIllinoisData+0x74>)
 800242e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <parseIllinoisData+0x78>)
 8002432:	930e      	str	r3, [sp, #56]	; 0x38
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <parseIllinoisData+0x7c>)
 8002436:	930d      	str	r3, [sp, #52]	; 0x34
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <parseIllinoisData+0x80>)
 800243a:	930c      	str	r3, [sp, #48]	; 0x30
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <parseIllinoisData+0x84>)
 800243e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <parseIllinoisData+0x88>)
 8002442:	930a      	str	r3, [sp, #40]	; 0x28
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <parseIllinoisData+0x8c>)
 8002446:	9309      	str	r3, [sp, #36]	; 0x24
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <parseIllinoisData+0x90>)
 800244a:	9308      	str	r3, [sp, #32]
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <parseIllinoisData+0x94>)
 800244e:	9307      	str	r3, [sp, #28]
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <parseIllinoisData+0x98>)
 8002452:	9306      	str	r3, [sp, #24]
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <parseIllinoisData+0x9c>)
 8002456:	9305      	str	r3, [sp, #20]
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <parseIllinoisData+0xa0>)
 800245a:	9304      	str	r3, [sp, #16]
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <parseIllinoisData+0xa4>)
 800245e:	9303      	str	r3, [sp, #12]
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <parseIllinoisData+0xa8>)
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <parseIllinoisData+0xac>)
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <parseIllinoisData+0xb0>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <parseIllinoisData+0xb4>)
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <parseIllinoisData+0xb8>)
 8002470:	4918      	ldr	r1, [pc, #96]	; (80024d4 <parseIllinoisData+0xbc>)
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f00c fc8a 	bl	800ed8c <siscanf>
           &mag.x, &mag.y, &mag.z,
           &gps.latitude, &gps.longtitude, &gps.altitude, &gps.sat,
           &illinois.positionLock,
           &altitude.temperature, &altitude.pressure, &illinois.altitude,
           &illinois.rocketState, &illinois.l1_ext, &illinois.l2_ext);
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000096c 	.word	0x2000096c
 8002484:	20000968 	.word	0x20000968
 8002488:	20000965 	.word	0x20000965
 800248c:	20000960 	.word	0x20000960
 8002490:	20000918 	.word	0x20000918
 8002494:	20000920 	.word	0x20000920
 8002498:	20000964 	.word	0x20000964
 800249c:	2000090c 	.word	0x2000090c
 80024a0:	20000908 	.word	0x20000908
 80024a4:	20000904 	.word	0x20000904
 80024a8:	20000900 	.word	0x20000900
 80024ac:	200008b0 	.word	0x200008b0
 80024b0:	200008ac 	.word	0x200008ac
 80024b4:	200008a8 	.word	0x200008a8
 80024b8:	2000088c 	.word	0x2000088c
 80024bc:	20000888 	.word	0x20000888
 80024c0:	20000884 	.word	0x20000884
 80024c4:	2000085c 	.word	0x2000085c
 80024c8:	20000858 	.word	0x20000858
 80024cc:	20000854 	.word	0x20000854
 80024d0:	20000830 	.word	0x20000830
 80024d4:	08013d6c 	.word	0x08013d6c

080024d8 <readTime>:

    return 0;
}

void readTime()
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
    time.timeDifference = (time.current - time.prevTime);
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <readTime+0x54>)
 80024de:	ed93 7a00 	vldr	s14, [r3]
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <readTime+0x54>)
 80024e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <readTime+0x54>)
 80024ee:	edc3 7a06 	vstr	s15, [r3, #24]
    time.prevTime = time.current;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <readTime+0x54>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <readTime+0x54>)
 80024f8:	6053      	str	r3, [r2, #4]

    if (flightState > AFTER_LIFTOFF)
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <readTime+0x58>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d90e      	bls.n	8002520 <readTime+0x48>
    {
        time.flightTime = (time.current - time.liftoffTime) / 1000.0;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <readTime+0x54>)
 8002504:	ed93 7a00 	vldr	s14, [r3]
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <readTime+0x54>)
 800250a:	edd3 7a02 	vldr	s15, [r3, #8]
 800250e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002512:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002534 <readTime+0x5c>
 8002516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <readTime+0x54>)
 800251c:	edc3 7a07 	vstr	s15, [r3, #28]
    }
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000830 	.word	0x20000830
 8002530:	20000000 	.word	0x20000000
 8002534:	447a0000 	.word	0x447a0000

08002538 <calculateAltitude>:

static float calculateAltitude(float p, float pi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002542:	edc7 0a00 	vstr	s1, [r7]
    p = p / 100;
 8002546:	ed97 7a01 	vldr	s14, [r7, #4]
 800254a:	eddf 6a25 	vldr	s13, [pc, #148]	; 80025e0 <calculateAltitude+0xa8>
 800254e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002552:	edc7 7a01 	vstr	s15, [r7, #4]
    pi = pi / 100;
 8002556:	ed97 7a00 	vldr	s14, [r7]
 800255a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80025e0 <calculateAltitude+0xa8>
 800255e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002562:	edc7 7a00 	vstr	s15, [r7]
    float alt = (44330 * (1.0 - pow(p / pi, 0.1903)));
 8002566:	ed97 7a01 	vldr	s14, [r7, #4]
 800256a:	edd7 7a00 	vldr	s15, [r7]
 800256e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002572:	ee16 0a90 	vmov	r0, s13
 8002576:	f7fe f807 	bl	8000588 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80025d0 <calculateAltitude+0x98>
 8002582:	ec43 2b10 	vmov	d0, r2, r3
 8002586:	f010 fc45 	bl	8012e14 <pow>
 800258a:	ec53 2b10 	vmov	r2, r3, d0
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	4914      	ldr	r1, [pc, #80]	; (80025e4 <calculateAltitude+0xac>)
 8002594:	f7fd fe98 	bl	80002c8 <__aeabi_dsub>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	a30d      	add	r3, pc, #52	; (adr r3, 80025d8 <calculateAltitude+0xa0>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f847 	bl	8000638 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7fe fb39 	bl	8000c28 <__aeabi_d2f>
 80025b6:	4603      	mov	r3, r0
 80025b8:	60fb      	str	r3, [r7, #12]
    return alt;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	ee07 3a90 	vmov	s15, r3
}
 80025c0:	eeb0 0a67 	vmov.f32	s0, s15
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	f3af 8000 	nop.w
 80025d0:	1a36e2eb 	.word	0x1a36e2eb
 80025d4:	3fc85bc0 	.word	0x3fc85bc0
 80025d8:	00000000 	.word	0x00000000
 80025dc:	40e5a540 	.word	0x40e5a540
 80025e0:	42c80000 	.word	0x42c80000
 80025e4:	3ff00000 	.word	0x3ff00000

080025e8 <basePressure>:

    return 1;
}

void basePressure()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < 100; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	e010      	b.n	8002616 <basePressure+0x2e>
    {
        altitude.basePressure += altitude.pressure;
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <basePressure+0x50>)
 80025f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <basePressure+0x50>)
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <basePressure+0x50>)
 8002606:	edc3 7a01 	vstr	s15, [r3, #4]
        HAL_Delay(2);
 800260a:	2002      	movs	r0, #2
 800260c:	f000 fd56 	bl	80030bc <HAL_Delay>
    for (int i = 0; i < 100; i++)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3301      	adds	r3, #1
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b63      	cmp	r3, #99	; 0x63
 800261a:	ddeb      	ble.n	80025f4 <basePressure+0xc>
    }

    altitude.basePressure /= 100;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <basePressure+0x50>)
 800261e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002622:	eddf 6a06 	vldr	s13, [pc, #24]	; 800263c <basePressure+0x54>
 8002626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <basePressure+0x50>)
 800262c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000918 	.word	0x20000918
 800263c:	42c80000 	.word	0x42c80000

08002640 <readAltitude>:

    return 1;
}

int readAltitude()
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
    // readBarometer();

    altitude.altitude =
        calculateAltitude(altitude.pressure, altitude.basePressure) + 274.279;
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <readAltitude+0x130>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	4b49      	ldr	r3, [pc, #292]	; (8002770 <readAltitude+0x130>)
 800264c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002650:	eef0 0a47 	vmov.f32	s1, s14
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f7ff ff6e 	bl	8002538 <calculateAltitude>
 800265c:	ee10 3a10 	vmov	r3, s0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	a33e      	add	r3, pc, #248	; (adr r3, 8002760 <readAltitude+0x120>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fe2e 	bl	80002cc <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fad6 	bl	8000c28 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
    altitude.altitude =
 800267e:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <readAltitude+0x130>)
 8002680:	60d3      	str	r3, [r2, #12]

    altitude.altitude =
        yrt_simpleKalman_updateEstimate(&barometerKalman, altitude.altitude);
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <readAltitude+0x130>)
 8002684:	edd3 7a03 	vldr	s15, [r3, #12]
 8002688:	eeb0 0a67 	vmov.f32	s0, s15
 800268c:	4839      	ldr	r0, [pc, #228]	; (8002774 <readAltitude+0x134>)
 800268e:	f000 fc25 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 8002692:	eef0 7a40 	vmov.f32	s15, s0
    altitude.altitude =
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <readAltitude+0x130>)
 8002698:	edc3 7a03 	vstr	s15, [r3, #12]

    /* diif (-) ise cikiyorsun (+) ise iniyorsun  */
    altitude.diffToMax = altitude.maxAltitude - altitude.altitude;
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <readAltitude+0x130>)
 800269e:	ed93 7a06 	vldr	s14, [r3, #24]
 80026a2:	4b33      	ldr	r3, [pc, #204]	; (8002770 <readAltitude+0x130>)
 80026a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <readAltitude+0x130>)
 80026ae:	edc3 7a07 	vstr	s15, [r3, #28]

    if (altitude.altitude > altitude.maxAltitude)
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <readAltitude+0x130>)
 80026b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <readAltitude+0x130>)
 80026ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80026be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	dd03      	ble.n	80026d0 <readAltitude+0x90>
    {
        altitude.maxAltitude = altitude.altitude;
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <readAltitude+0x130>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a28      	ldr	r2, [pc, #160]	; (8002770 <readAltitude+0x130>)
 80026ce:	6193      	str	r3, [r2, #24]
    }

    // calculate vertical velocity m/s
    velocity.timeDiffVertical =
        ((time.current) - velocity.prevTimeVertical) / 1000.0f;
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <readAltitude+0x138>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <readAltitude+0x13c>)
 80026d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80026dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026e0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002780 <readAltitude+0x140>
 80026e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
    velocity.timeDiffVertical =
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <readAltitude+0x13c>)
 80026ea:	edc3 7a02 	vstr	s15, [r3, #8]

    // time diff must be greater than 0.3 sec
    if (velocity.timeDiffVertical > 0.3)
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <readAltitude+0x13c>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff48 	bl	8000588 <__aeabi_f2d>
 80026f8:	a31b      	add	r3, pc, #108	; (adr r3, 8002768 <readAltitude+0x128>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fe fa2b 	bl	8000b58 <__aeabi_dcmpgt>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <readAltitude+0xf8>
    {
        velocity.verticalVelocity =
            (altitude.altitude - altitude.prevAltitude) /
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <readAltitude+0x130>)
 800270a:	ed93 7a03 	vldr	s14, [r3, #12]
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <readAltitude+0x130>)
 8002710:	edd3 7a04 	vldr	s15, [r3, #16]
 8002714:	ee77 6a67 	vsub.f32	s13, s14, s15
            velocity.timeDiffVertical;
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <readAltitude+0x13c>)
 800271a:	ed93 7a02 	vldr	s14, [r3, #8]
            (altitude.altitude - altitude.prevAltitude) /
 800271e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        velocity.verticalVelocity =
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <readAltitude+0x13c>)
 8002724:	edc3 7a00 	vstr	s15, [r3]
        velocity.prevTimeVertical = time.current;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <readAltitude+0x138>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <readAltitude+0x13c>)
 800272e:	60d3      	str	r3, [r2, #12]
        altitude.prevAltitude = altitude.altitude;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <readAltitude+0x130>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <readAltitude+0x130>)
 8002736:	6113      	str	r3, [r2, #16]
    }

    if (velocity.verticalVelocity > velocity.maxVerticalVelocity)
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <readAltitude+0x13c>)
 800273a:	ed93 7a00 	vldr	s14, [r3]
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <readAltitude+0x13c>)
 8002740:	edd3 7a04 	vldr	s15, [r3, #16]
 8002744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	dd03      	ble.n	8002756 <readAltitude+0x116>
    {
        velocity.maxVerticalVelocity = velocity.verticalVelocity;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <readAltitude+0x13c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <readAltitude+0x13c>)
 8002754:	6113      	str	r3, [r2, #16]
    }

    return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	f3af 8000 	nop.w
 8002760:	c8b43958 	.word	0xc8b43958
 8002764:	40712476 	.word	0x40712476
 8002768:	33333333 	.word	0x33333333
 800276c:	3fd33333 	.word	0x3fd33333
 8002770:	20000918 	.word	0x20000918
 8002774:	20000a4c 	.word	0x20000a4c
 8002778:	20000830 	.word	0x20000830
 800277c:	200008d0 	.word	0x200008d0
 8002780:	447a0000 	.word	0x447a0000
 8002784:	00000000 	.word	0x00000000

08002788 <readIMU>:

    return ret;
}

int readIMU()
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	af00      	add	r7, sp, #0

    // accel.x = (float)user_accel_bmi088.x / 1000;
    // accel.y = (float)user_accel_bmi088.y / 1000;
    // accel.z = (float)user_accel_bmi088.z / 1000;
    //
    gyro.x = (float)user_gyro_bmi088.x / 1000;
 800278c:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <readIMU+0x288>)
 800278e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279a:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8002a14 <readIMU+0x28c>
 800279e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a2:	4b9d      	ldr	r3, [pc, #628]	; (8002a18 <readIMU+0x290>)
 80027a4:	edc3 7a00 	vstr	s15, [r3]
    gyro.y = (float)user_gyro_bmi088.y / 1000;
 80027a8:	4b99      	ldr	r3, [pc, #612]	; (8002a10 <readIMU+0x288>)
 80027aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002a14 <readIMU+0x28c>
 80027ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027be:	4b96      	ldr	r3, [pc, #600]	; (8002a18 <readIMU+0x290>)
 80027c0:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro.z = (float)user_gyro_bmi088.z / 1000;
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <readIMU+0x288>)
 80027c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d2:	eddf 6a90 	vldr	s13, [pc, #576]	; 8002a14 <readIMU+0x28c>
 80027d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027da:	4b8f      	ldr	r3, [pc, #572]	; (8002a18 <readIMU+0x290>)
 80027dc:	edc3 7a02 	vstr	s15, [r3, #8]

    accel.x = yrt_simpleKalman_updateEstimate(&accelXKalman, accel.x);
 80027e0:	4b8e      	ldr	r3, [pc, #568]	; (8002a1c <readIMU+0x294>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ea:	488d      	ldr	r0, [pc, #564]	; (8002a20 <readIMU+0x298>)
 80027ec:	f000 fb76 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 80027f0:	eef0 7a40 	vmov.f32	s15, s0
 80027f4:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <readIMU+0x294>)
 80027f6:	edc3 7a00 	vstr	s15, [r3]
    accel.y = yrt_simpleKalman_updateEstimate(&accelYKalman, accel.y);
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <readIMU+0x294>)
 80027fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002800:	eeb0 0a67 	vmov.f32	s0, s15
 8002804:	4887      	ldr	r0, [pc, #540]	; (8002a24 <readIMU+0x29c>)
 8002806:	f000 fb69 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 800280a:	eef0 7a40 	vmov.f32	s15, s0
 800280e:	4b83      	ldr	r3, [pc, #524]	; (8002a1c <readIMU+0x294>)
 8002810:	edc3 7a01 	vstr	s15, [r3, #4]
    accel.z = yrt_simpleKalman_updateEstimate(&accelZKalman, accel.z);
 8002814:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <readIMU+0x294>)
 8002816:	edd3 7a02 	vldr	s15, [r3, #8]
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	4882      	ldr	r0, [pc, #520]	; (8002a28 <readIMU+0x2a0>)
 8002820:	f000 fb5c 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 8002824:	eef0 7a40 	vmov.f32	s15, s0
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <readIMU+0x294>)
 800282a:	edc3 7a02 	vstr	s15, [r3, #8]

    gyro.x = yrt_simpleKalman_updateEstimate(&gyroXKalman, gyro.x);
 800282e:	4b7a      	ldr	r3, [pc, #488]	; (8002a18 <readIMU+0x290>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	eeb0 0a67 	vmov.f32	s0, s15
 8002838:	487c      	ldr	r0, [pc, #496]	; (8002a2c <readIMU+0x2a4>)
 800283a:	f000 fb4f 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 800283e:	eef0 7a40 	vmov.f32	s15, s0
 8002842:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <readIMU+0x290>)
 8002844:	edc3 7a00 	vstr	s15, [r3]
    gyro.y = yrt_simpleKalman_updateEstimate(&gyroYKalman, gyro.y);
 8002848:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <readIMU+0x290>)
 800284a:	edd3 7a01 	vldr	s15, [r3, #4]
 800284e:	eeb0 0a67 	vmov.f32	s0, s15
 8002852:	4877      	ldr	r0, [pc, #476]	; (8002a30 <readIMU+0x2a8>)
 8002854:	f000 fb42 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 8002858:	eef0 7a40 	vmov.f32	s15, s0
 800285c:	4b6e      	ldr	r3, [pc, #440]	; (8002a18 <readIMU+0x290>)
 800285e:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro.z = yrt_simpleKalman_updateEstimate(&gyroZKalman, gyro.z);
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <readIMU+0x290>)
 8002864:	edd3 7a02 	vldr	s15, [r3, #8]
 8002868:	eeb0 0a67 	vmov.f32	s0, s15
 800286c:	4871      	ldr	r0, [pc, #452]	; (8002a34 <readIMU+0x2ac>)
 800286e:	f000 fb35 	bl	8002edc <yrt_simpleKalman_updateEstimate>
 8002872:	eef0 7a40 	vmov.f32	s15, s0
 8002876:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <readIMU+0x290>)
 8002878:	edc3 7a02 	vstr	s15, [r3, #8]

    accel.absG = sqrt(pow(accel.x, 2) + pow(accel.y, 2) + pow(accel.z, 2));
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <readIMU+0x294>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe81 	bl	8000588 <__aeabi_f2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002a08 <readIMU+0x280>
 800288e:	ec43 2b10 	vmov	d0, r2, r3
 8002892:	f010 fabf 	bl	8012e14 <pow>
 8002896:	ec55 4b10 	vmov	r4, r5, d0
 800289a:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <readIMU+0x294>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe72 	bl	8000588 <__aeabi_f2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8002a08 <readIMU+0x280>
 80028ac:	ec43 2b10 	vmov	d0, r2, r3
 80028b0:	f010 fab0 	bl	8012e14 <pow>
 80028b4:	ec53 2b10 	vmov	r2, r3, d0
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd fd06 	bl	80002cc <__adddf3>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <readIMU+0x294>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fe5b 	bl	8000588 <__aeabi_f2d>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8002a08 <readIMU+0x280>
 80028da:	ec43 2b10 	vmov	d0, r2, r3
 80028de:	f010 fa99 	bl	8012e14 <pow>
 80028e2:	ec53 2b10 	vmov	r2, r3, d0
 80028e6:	4620      	mov	r0, r4
 80028e8:	4629      	mov	r1, r5
 80028ea:	f7fd fcef 	bl	80002cc <__adddf3>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	ec43 2b17 	vmov	d7, r2, r3
 80028f6:	eeb0 0a47 	vmov.f32	s0, s14
 80028fa:	eef0 0a67 	vmov.f32	s1, s15
 80028fe:	f010 faf9 	bl	8012ef4 <sqrt>
 8002902:	ec53 2b10 	vmov	r2, r3, d0
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f98d 	bl	8000c28 <__aeabi_d2f>
 800290e:	4603      	mov	r3, r0
 8002910:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <readIMU+0x294>)
 8002912:	6253      	str	r3, [r2, #36]	; 0x24
    if (accel.absG > accel.maxG)
 8002914:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <readIMU+0x294>)
 8002916:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800291a:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <readIMU+0x294>)
 800291c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	dd03      	ble.n	8002932 <readIMU+0x1aa>
    {
        accel.maxG = accel.absG;
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <readIMU+0x294>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <readIMU+0x294>)
 8002930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    // calculate true velocity m/s from accelerometer
    velocity.timeDiffTrue = (time.current - velocity.prevTimeTrue) / 1000.0f;
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <readIMU+0x2b0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe26 	bl	8000588 <__aeabi_f2d>
 800293c:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <readIMU+0x2b4>)
 800293e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002942:	f7fd fcc1 	bl	80002c8 <__aeabi_dsub>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <readIMU+0x2b8>)
 8002954:	f7fd ff9a 	bl	800088c <__aeabi_ddiv>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4937      	ldr	r1, [pc, #220]	; (8002a3c <readIMU+0x2b4>)
 800295e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // time diff must be greater than 0.3 sec
    velocity.trueVelocity =
        (accel.absG - accel.prevAbsG) / velocity.timeDiffTrue;
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <readIMU+0x294>)
 8002964:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <readIMU+0x294>)
 800296a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	ee17 0a90 	vmov	r0, s15
 8002976:	f7fd fe07 	bl	8000588 <__aeabi_f2d>
 800297a:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <readIMU+0x2b4>)
 800297c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002980:	f7fd ff84 	bl	800088c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f94c 	bl	8000c28 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
    velocity.trueVelocity =
 8002992:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <readIMU+0x2b4>)
 8002994:	6153      	str	r3, [r2, #20]
    velocity.prevTimeTrue = time.current;
 8002996:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <readIMU+0x2b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdf4 	bl	8000588 <__aeabi_f2d>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4925      	ldr	r1, [pc, #148]	; (8002a3c <readIMU+0x2b4>)
 80029a6:	e9c1 2308 	strd	r2, r3, [r1, #32]

    if (velocity.trueVelocity > velocity.maxTrueVelocity)
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <readIMU+0x2b4>)
 80029ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <readIMU+0x2b4>)
 80029b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	dd03      	ble.n	80029c8 <readIMU+0x240>
    {
        velocity.maxTrueVelocity = velocity.trueVelocity;
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <readIMU+0x2b4>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <readIMU+0x2b4>)
 80029c6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    accel.prevAbsG = accel.absG;
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <readIMU+0x294>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <readIMU+0x294>)
 80029ce:	6293      	str	r3, [r2, #40]	; 0x28

    accel.prev_x = accel.x;
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <readIMU+0x294>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <readIMU+0x294>)
 80029d6:	60d3      	str	r3, [r2, #12]
    accel.prev_y = accel.y;
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <readIMU+0x294>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <readIMU+0x294>)
 80029de:	6113      	str	r3, [r2, #16]
    accel.prev_z = accel.z;
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <readIMU+0x294>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <readIMU+0x294>)
 80029e6:	6153      	str	r3, [r2, #20]

    gyro.prev_x = gyro.x;
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <readIMU+0x290>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <readIMU+0x290>)
 80029ee:	60d3      	str	r3, [r2, #12]
    gyro.prev_y = gyro.y;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <readIMU+0x290>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <readIMU+0x290>)
 80029f6:	6113      	str	r3, [r2, #16]
    gyro.prev_z = gyro.z;
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <readIMU+0x290>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <readIMU+0x290>)
 80029fe:	6153      	str	r3, [r2, #20]

    return ret;
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <readIMU+0x2bc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bdb0      	pop	{r4, r5, r7, pc}
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	40000000 	.word	0x40000000
 8002a10:	20000a64 	.word	0x20000a64
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	20000884 	.word	0x20000884
 8002a1c:	20000854 	.word	0x20000854
 8002a20:	20000974 	.word	0x20000974
 8002a24:	2000098c 	.word	0x2000098c
 8002a28:	200009a4 	.word	0x200009a4
 8002a2c:	200009bc 	.word	0x200009bc
 8002a30:	200009d4 	.word	0x200009d4
 8002a34:	200009ec 	.word	0x200009ec
 8002a38:	20000830 	.word	0x20000830
 8002a3c:	200008d0 	.word	0x200008d0
 8002a40:	408f4000 	.word	0x408f4000
 8002a44:	20000a6c 	.word	0x20000a6c

08002a48 <parseTlcString>:
    res = f_close(&SDFile);
    return;
}

void parseTlcString(char *data)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	6078      	str	r0, [r7, #4]
    // parse string with sscanf
    // time(float), tlcStatus, bpcStatus, latitude, longitude, gps.altitude
    sscanf(data, "%f,%d,%d,%f,%f,%f\n", &tlcTime, &tlcStatus, &bpcStatus,
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <parseTlcString+0x2c>)
 8002a52:	9303      	str	r3, [sp, #12]
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <parseTlcString+0x30>)
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <parseTlcString+0x34>)
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <parseTlcString+0x38>)
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <parseTlcString+0x3c>)
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <parseTlcString+0x40>)
 8002a64:	4909      	ldr	r1, [pc, #36]	; (8002a8c <parseTlcString+0x44>)
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f00c f990 	bl	800ed8c <siscanf>
           &gps.latitude, &gps.longtitude, &gps.altitude);
    return;
 8002a6c:	bf00      	nop
}
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000908 	.word	0x20000908
 8002a78:	20000904 	.word	0x20000904
 8002a7c:	20000900 	.word	0x20000900
 8002a80:	20000971 	.word	0x20000971
 8002a84:	20000970 	.word	0x20000970
 8002a88:	2000093c 	.word	0x2000093c
 8002a8c:	08013f3c 	.word	0x08013f3c

08002a90 <initFilter>:
    sscanf(data, "%d,%f,%f", &pccTime, &pccTemp, &pccVoltage);
    return;
}

void initFilter()
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
    yrt_simpleKalman_init(&accelXKalman, 1, 1, 0.25);
 8002a94:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002a98:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002aa0:	482a      	ldr	r0, [pc, #168]	; (8002b4c <initFilter+0xbc>)
 8002aa2:	f000 f9f6 	bl	8002e92 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&accelYKalman, 1, 1, 0.25);
 8002aa6:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002aaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002aae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ab2:	4827      	ldr	r0, [pc, #156]	; (8002b50 <initFilter+0xc0>)
 8002ab4:	f000 f9ed 	bl	8002e92 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&accelZKalman, 1, 1, 0.25);
 8002ab8:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002abc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ac0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ac4:	4823      	ldr	r0, [pc, #140]	; (8002b54 <initFilter+0xc4>)
 8002ac6:	f000 f9e4 	bl	8002e92 <yrt_simpleKalman_init>

    yrt_simpleKalman_init(&gyroXKalman, 1, 1, 0.25);
 8002aca:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002ace:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ad2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ad6:	4820      	ldr	r0, [pc, #128]	; (8002b58 <initFilter+0xc8>)
 8002ad8:	f000 f9db 	bl	8002e92 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&gyroYKalman, 1, 1, 0.25);
 8002adc:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002ae0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ae4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ae8:	481c      	ldr	r0, [pc, #112]	; (8002b5c <initFilter+0xcc>)
 8002aea:	f000 f9d2 	bl	8002e92 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&gyroZKalman, 1, 1, 0.25);
 8002aee:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002af2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002af6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002afa:	4819      	ldr	r0, [pc, #100]	; (8002b60 <initFilter+0xd0>)
 8002afc:	f000 f9c9 	bl	8002e92 <yrt_simpleKalman_init>

    yrt_simpleKalman_init(&magXKalman, 1, 1, 0.5);
 8002b00:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002b04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002b08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b0c:	4815      	ldr	r0, [pc, #84]	; (8002b64 <initFilter+0xd4>)
 8002b0e:	f000 f9c0 	bl	8002e92 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&magYKalman, 1, 1, 0.5);
 8002b12:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002b16:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002b1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b1e:	4812      	ldr	r0, [pc, #72]	; (8002b68 <initFilter+0xd8>)
 8002b20:	f000 f9b7 	bl	8002e92 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&magZKalman, 1, 1, 0.5);
 8002b24:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002b28:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002b2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b30:	480e      	ldr	r0, [pc, #56]	; (8002b6c <initFilter+0xdc>)
 8002b32:	f000 f9ae 	bl	8002e92 <yrt_simpleKalman_init>

    yrt_simpleKalman_init(&barometerKalman, 1, 1, 0.25);
 8002b36:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002b3a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002b3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b42:	480b      	ldr	r0, [pc, #44]	; (8002b70 <initFilter+0xe0>)
 8002b44:	f000 f9a5 	bl	8002e92 <yrt_simpleKalman_init>
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000974 	.word	0x20000974
 8002b50:	2000098c 	.word	0x2000098c
 8002b54:	200009a4 	.word	0x200009a4
 8002b58:	200009bc 	.word	0x200009bc
 8002b5c:	200009d4 	.word	0x200009d4
 8002b60:	200009ec 	.word	0x200009ec
 8002b64:	20000a04 	.word	0x20000a04
 8002b68:	20000a1c 	.word	0x20000a1c
 8002b6c:	20000a34 	.word	0x20000a34
 8002b70:	20000a4c 	.word	0x20000a4c

08002b74 <buzzer>:

void buzzer(uint8_t state)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
    if (state)
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <buzzer+0x1c>
    {
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
 8002b86:	2110      	movs	r1, #16
 8002b88:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <buzzer+0x30>)
 8002b8a:	f001 f965 	bl	8003e58 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
    }
}
 8002b8e:	e004      	b.n	8002b9a <buzzer+0x26>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2110      	movs	r1, #16
 8002b94:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <buzzer+0x30>)
 8002b96:	f001 f95f 	bl	8003e58 <HAL_GPIO_WritePin>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40020400 	.word	0x40020400

08002ba8 <led>:

void led(uint8_t state)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
    if (state)
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <led+0x1c>
    {
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <led+0x30>)
 8002bbe:	f001 f94b 	bl	8003e58 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_RESET);
    }
}
 8002bc2:	e004      	b.n	8002bce <led+0x26>
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2108      	movs	r1, #8
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <led+0x30>)
 8002bca:	f001 f945 	bl	8003e58 <HAL_GPIO_WritePin>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40020400 	.word	0x40020400

08002bdc <dragSchute>:

void dragSchute(uint8_t state)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
    if (state == 1)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <dragSchute+0x1c>
    {
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_SET);
 8002bec:	2201      	movs	r2, #1
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4806      	ldr	r0, [pc, #24]	; (8002c0c <dragSchute+0x30>)
 8002bf2:	f001 f931 	bl	8003e58 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_RESET);
    }
}
 8002bf6:	e004      	b.n	8002c02 <dragSchute+0x26>
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_RESET);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <dragSchute+0x30>)
 8002bfe:	f001 f92b 	bl	8003e58 <HAL_GPIO_WritePin>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40020800 	.word	0x40020800

08002c10 <mainSchute>:

void mainSchute(uint8_t state)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
    if (state == 1)
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <mainSchute+0x1c>
    {
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	2101      	movs	r1, #1
 8002c24:	4806      	ldr	r0, [pc, #24]	; (8002c40 <mainSchute+0x30>)
 8002c26:	f001 f917 	bl	8003e58 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_RESET);
    }
}
 8002c2a:	e004      	b.n	8002c36 <mainSchute+0x26>
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_RESET);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <mainSchute+0x30>)
 8002c32:	f001 f911 	bl	8003e58 <HAL_GPIO_WritePin>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40020800 	.word	0x40020800

08002c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <SystemInit+0x20>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <SystemInit+0x20>)
 8002c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <MX_UART4_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_UART4_Init+0x4c>)
 8002ca0:	f006 f8ce 	bl	8008e40 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002caa:	f7ff f81a 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000a70 	.word	0x20000a70
 8002cb8:	40004c00 	.word	0x40004c00

08002cbc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <MX_USART2_UART_Init+0x50>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	f006 f8a4 	bl	8008e40 <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfe:	f7fe fff0 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000ab4 	.word	0x20000ab4
 8002d0c:	40004400 	.word	0x40004400

08002d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <HAL_UART_MspInit+0x108>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d134      	bne.n	8002d9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	f107 031c 	add.w	r3, r7, #28
 8002d82:	4619      	mov	r1, r3
 8002d84:	4826      	ldr	r0, [pc, #152]	; (8002e20 <HAL_UART_MspInit+0x110>)
 8002d86:	f000 febb 	bl	8003b00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2105      	movs	r1, #5
 8002d8e:	2034      	movs	r0, #52	; 0x34
 8002d90:	f000 fa70 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d94:	2034      	movs	r0, #52	; 0x34
 8002d96:	f000 fa89 	bl	80032ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d9a:	e038      	b.n	8002e0e <HAL_UART_MspInit+0xfe>
  else if(uartHandle->Instance==USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_UART_MspInit+0x114>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d133      	bne.n	8002e0e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dde:	230c      	movs	r3, #12
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dee:	2307      	movs	r3, #7
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4619      	mov	r1, r3
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <HAL_UART_MspInit+0x110>)
 8002dfa:	f000 fe81 	bl	8003b00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	2026      	movs	r0, #38	; 0x26
 8002e04:	f000 fa36 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e08:	2026      	movs	r0, #38	; 0x26
 8002e0a:	f000 fa4f 	bl	80032ac <HAL_NVIC_EnableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3730      	adds	r7, #48	; 0x30
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40004c00 	.word	0x40004c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40004400 	.word	0x40004400

08002e28 <ms5611_i2c_read_byte>:
    } else {
        return 0;
    }
}

static uint8_t ms5611_i2c_read_byte(uint16_t reg, uint8_t *data){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Mem_Read(FRAM_I2C, FRAM_ADDRESS_READ, reg, I2C_MEMADD_SIZE_16BIT,
 8002e34:	88fa      	ldrh	r2, [r7, #6]
 8002e36:	2364      	movs	r3, #100	; 0x64
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2310      	movs	r3, #16
 8002e44:	21a1      	movs	r1, #161	; 0xa1
 8002e46:	4808      	ldr	r0, [pc, #32]	; (8002e68 <ms5611_i2c_read_byte+0x40>)
 8002e48:	f001 f988 	bl	800415c <HAL_I2C_Mem_Read>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
                     data, 1, 100);

    // return data if success
    if (res == HAL_OK) {
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <ms5611_i2c_read_byte+0x34>
        return *data;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	e000      	b.n	8002e5e <ms5611_i2c_read_byte+0x36>
    } else {
        return 0;
 8002e5c:	2300      	movs	r3, #0
    }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000020c 	.word	0x2000020c

08002e6c <fram_read8>:
    }
    return data;

}

uint8_t fram_read8(uint16_t framAddr){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
    uint8_t data = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
    ms5611_i2c_read_byte(framAddr, &data);
 8002e7a:	f107 020f 	add.w	r2, r7, #15
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ffd0 	bl	8002e28 <ms5611_i2c_read_byte>
    return data;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <yrt_simpleKalman_init>:
0.01. Should be tunned to your needs.
*/

void yrt_simpleKalman_init(yrt_simpleKalman_t *kalman, float mea_e, float est_e,
                           float q)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e9e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002ea2:	ed87 1a00 	vstr	s2, [r7]
    kalman->err_measure = mea_e;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	601a      	str	r2, [r3, #0]
    kalman->err_estimate = est_e;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	605a      	str	r2, [r3, #4]
    kalman->q = q;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	609a      	str	r2, [r3, #8]

    kalman->current_estimate = 0;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
    kalman->last_estimate = 0;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
    kalman->kalman_gain = 0;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <yrt_simpleKalman_updateEstimate>:
float yrt_simpleKalman_updateEstimate(yrt_simpleKalman_t *kalman, float mea)
{
 8002edc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	ed87 0a00 	vstr	s0, [r7]
    kalman->kalman_gain =
        kalman->err_estimate / (kalman->err_estimate + kalman->err_measure);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
    kalman->kalman_gain =
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->current_estimate =
        kalman->last_estimate +
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	ed93 7a04 	vldr	s14, [r3, #16]
        kalman->kalman_gain * (mea - kalman->last_estimate);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f1c:	ed97 6a00 	vldr	s12, [r7]
 8002f20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
        kalman->last_estimate +
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
    kalman->current_estimate =
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->err_estimate =
        (1.0 - kalman->kalman_gain) * kalman->err_estimate +
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fb26 	bl	8000588 <__aeabi_f2d>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	4926      	ldr	r1, [pc, #152]	; (8002fe0 <yrt_simpleKalman_updateEstimate+0x104>)
 8002f46:	f7fd f9bf 	bl	80002c8 <__aeabi_dsub>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4614      	mov	r4, r2
 8002f50:	461d      	mov	r5, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fb16 	bl	8000588 <__aeabi_f2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd fb68 	bl	8000638 <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4690      	mov	r8, r2
 8002f6e:	4699      	mov	r9, r3
        fabs(kalman->last_estimate - kalman->current_estimate) * kalman->q;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f80:	eef0 7ae7 	vabs.f32	s15, s15
 8002f84:	ee17 0a90 	vmov	r0, s15
 8002f88:	f7fd fafe 	bl	8000588 <__aeabi_f2d>
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	460d      	mov	r5, r1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd faf7 	bl	8000588 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f7fd fb49 	bl	8000638 <__aeabi_dmul>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
        (1.0 - kalman->kalman_gain) * kalman->err_estimate +
 8002faa:	4640      	mov	r0, r8
 8002fac:	4649      	mov	r1, r9
 8002fae:	f7fd f98d 	bl	80002cc <__adddf3>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f7fd fe35 	bl	8000c28 <__aeabi_d2f>
 8002fbe:	4602      	mov	r2, r0
    kalman->err_estimate =
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	605a      	str	r2, [r3, #4]
    kalman->last_estimate = kalman->current_estimate;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	611a      	str	r2, [r3, #16]

    return kalman->current_estimate;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	ee07 3a90 	vmov	s15, r3
}
 8002fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fe0:	3ff00000 	.word	0x3ff00000

08002fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe8:	480d      	ldr	r0, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003000:	4c0b      	ldr	r4, [pc, #44]	; (8003030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800300e:	f7ff fe19 	bl	8002c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f00b ffeb 	bl	800efec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003016:	f7fe fd99 	bl	8001b4c <main>
  bx  lr    
 800301a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800301c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003024:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003028:	08014538 	.word	0x08014538
  ldr r2, =_sbss
 800302c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003030:	200071a0 	.word	0x200071a0

08003034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC_IRQHandler>
	...

08003038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_Init+0x40>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_Init+0x40>)
 800304e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_Init+0x40>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003060:	2003      	movs	r0, #3
 8003062:	f000 f8fc 	bl	800325e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fe ffc6 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800306c:	f7fe ff90 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00

0800307c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_IncTick+0x20>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x24>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4413      	add	r3, r2
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_IncTick+0x24>)
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000000c 	.word	0x2000000c
 80030a0:	20000af8 	.word	0x20000af8

080030a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return uwTick;
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_GetTick+0x14>)
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000af8 	.word	0x20000af8

080030bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff ffee 	bl	80030a4 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d005      	beq.n	80030e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_Delay+0x44>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030e2:	bf00      	nop
 80030e4:	f7ff ffde 	bl	80030a4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d8f7      	bhi.n	80030e4 <HAL_Delay+0x28>
  {
  }
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000000c 	.word	0x2000000c

08003104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800312c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <__NVIC_GetPriorityGrouping+0x18>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0307 	and.w	r3, r3, #7
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db0b      	blt.n	8003192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4907      	ldr	r1, [pc, #28]	; (80031a0 <__NVIC_EnableIRQ+0x38>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000e100 	.word	0xe000e100

080031a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db0a      	blt.n	80031ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	490c      	ldr	r1, [pc, #48]	; (80031f0 <__NVIC_SetPriority+0x4c>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	440b      	add	r3, r1
 80031c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031cc:	e00a      	b.n	80031e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <__NVIC_SetPriority+0x50>)
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	3b04      	subs	r3, #4
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	440b      	add	r3, r1
 80031e2:	761a      	strb	r2, [r3, #24]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f1c3 0307 	rsb	r3, r3, #7
 8003212:	2b04      	cmp	r3, #4
 8003214:	bf28      	it	cs
 8003216:	2304      	movcs	r3, #4
 8003218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3304      	adds	r3, #4
 800321e:	2b06      	cmp	r3, #6
 8003220:	d902      	bls.n	8003228 <NVIC_EncodePriority+0x30>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3b03      	subs	r3, #3
 8003226:	e000      	b.n	800322a <NVIC_EncodePriority+0x32>
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	f04f 32ff 	mov.w	r2, #4294967295
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	401a      	ands	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	43d9      	mvns	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	4313      	orrs	r3, r2
         );
}
 8003252:	4618      	mov	r0, r3
 8003254:	3724      	adds	r7, #36	; 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ff4c 	bl	8003104 <__NVIC_SetPriorityGrouping>
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003286:	f7ff ff61 	bl	800314c <__NVIC_GetPriorityGrouping>
 800328a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	6978      	ldr	r0, [r7, #20]
 8003292:	f7ff ffb1 	bl	80031f8 <NVIC_EncodePriority>
 8003296:	4602      	mov	r2, r0
 8003298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff80 	bl	80031a4 <__NVIC_SetPriority>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff54 	bl	8003168 <__NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff fee6 	bl	80030a4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e099      	b.n	8003418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003304:	e00f      	b.n	8003326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003306:	f7ff fecd 	bl	80030a4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b05      	cmp	r3, #5
 8003312:	d908      	bls.n	8003326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e078      	b.n	8003418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e8      	bne.n	8003306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_DMA_Init+0x158>)
 8003340:	4013      	ands	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	4313      	orrs	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d117      	bne.n	80033ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb1b 	bl	8003a08 <DMA_CheckFifoParam>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033e6:	2301      	movs	r3, #1
 80033e8:	e016      	b.n	8003418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fad2 	bl	800399c <DMA_CalcBaseAndBitshift>
 80033f8:	4603      	mov	r3, r0
 80033fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	223f      	movs	r2, #63	; 0x3f
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	f010803f 	.word	0xf010803f

08003424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_DMA_Start_IT+0x26>
 8003446:	2302      	movs	r3, #2
 8003448:	e040      	b.n	80034cc <HAL_DMA_Start_IT+0xa8>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d12f      	bne.n	80034be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa64 	bl	8003940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0216 	orr.w	r2, r2, #22
 8003492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e005      	b.n	80034ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034e2:	f7ff fddf 	bl	80030a4 <HAL_GetTick>
 80034e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d008      	beq.n	8003506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e052      	b.n	80035ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0216 	bic.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_DMA_Abort+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0208 	bic.w	r2, r2, #8
 8003544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003556:	e013      	b.n	8003580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003558:	f7ff fda4 	bl	80030a4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b05      	cmp	r3, #5
 8003564:	d90c      	bls.n	8003580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2203      	movs	r2, #3
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e015      	b.n	80035ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e4      	bne.n	8003558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	223f      	movs	r2, #63	; 0x3f
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00c      	b.n	80035ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2205      	movs	r2, #5
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003604:	4b8e      	ldr	r3, [pc, #568]	; (8003840 <HAL_DMA_IRQHandler+0x248>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a8e      	ldr	r2, [pc, #568]	; (8003844 <HAL_DMA_IRQHandler+0x24c>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0a9b      	lsrs	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2208      	movs	r2, #8
 8003624:	409a      	lsls	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01a      	beq.n	8003664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	2208      	movs	r2, #8
 8003652:	409a      	lsls	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	2201      	movs	r2, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2201      	movs	r2, #1
 8003688:	409a      	lsls	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	2204      	movs	r2, #4
 80036a0:	409a      	lsls	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2204      	movs	r2, #4
 80036be:	409a      	lsls	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2210      	movs	r2, #16
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d043      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d03c      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	2210      	movs	r2, #16
 80036f4:	409a      	lsls	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d018      	beq.n	800373a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d024      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
 8003726:	e01f      	b.n	8003768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e016      	b.n	8003768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0208 	bic.w	r2, r2, #8
 8003756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	2220      	movs	r2, #32
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 808f 	beq.w	8003898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8087 	beq.w	8003898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2220      	movs	r2, #32
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d136      	bne.n	8003810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0216 	bic.w	r2, r2, #22
 80037b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x1da>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0208 	bic.w	r2, r2, #8
 80037e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	223f      	movs	r2, #63	; 0x3f
 80037e8:	409a      	lsls	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07e      	beq.n	8003904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
        }
        return;
 800380e:	e079      	b.n	8003904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01d      	beq.n	800385a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	2b00      	cmp	r3, #0
 8003832:	d031      	beq.n	8003898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	e02c      	b.n	8003898 <HAL_DMA_IRQHandler+0x2a0>
 800383e:	bf00      	nop
 8003840:	20000004 	.word	0x20000004
 8003844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
 8003858:	e01e      	b.n	8003898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10f      	bne.n	8003888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0210 	bic.w	r2, r2, #16
 8003876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	2b00      	cmp	r3, #0
 800389e:	d032      	beq.n	8003906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2205      	movs	r2, #5
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3301      	adds	r3, #1
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d307      	bcc.n	80038e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f2      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x2cc>
 80038de:	e000      	b.n	80038e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
 8003902:	e000      	b.n	8003906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003904:	bf00      	nop
    }
  }
}
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391a:	b2db      	uxtb	r3, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800395c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b10      	subs	r3, #16
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <DMA_CalcBaseAndBitshift+0x64>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <DMA_CalcBaseAndBitshift+0x68>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d909      	bls.n	80039de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
 80039dc:	e007      	b.n	80039ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	aaaaaaab 	.word	0xaaaaaaab
 8003a04:	08014094 	.word	0x08014094

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d856      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xce>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <DMA_CheckFifoParam+0x28>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003ad7 	.word	0x08003ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e043      	b.n	8003ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5a:	d140      	bne.n	8003ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e03d      	b.n	8003ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d121      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d837      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xda>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e030      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d025      	beq.n	8003ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e022      	b.n	8003ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aae:	e01c      	b.n	8003aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d903      	bls.n	8003abe <DMA_CheckFifoParam+0xb6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003abc:	e018      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac2:	e015      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e00b      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e00a      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e008      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
    }
  } 
  
  return status; 
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e165      	b.n	8003de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 8154 	bne.w	8003de2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d130      	bne.n	8003bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d017      	beq.n	8003bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d123      	bne.n	8003c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08da      	lsrs	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3208      	adds	r2, #8
 8003c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0203 	and.w	r2, r3, #3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80ae 	beq.w	8003de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b5d      	ldr	r3, [pc, #372]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	4a5c      	ldr	r2, [pc, #368]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c94:	6453      	str	r3, [r2, #68]	; 0x44
 8003c96:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <HAL_GPIO_Init+0x308>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d025      	beq.n	8003d1a <HAL_GPIO_Init+0x21a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4e      	ldr	r2, [pc, #312]	; (8003e0c <HAL_GPIO_Init+0x30c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01f      	beq.n	8003d16 <HAL_GPIO_Init+0x216>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a4d      	ldr	r2, [pc, #308]	; (8003e10 <HAL_GPIO_Init+0x310>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d019      	beq.n	8003d12 <HAL_GPIO_Init+0x212>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_GPIO_Init+0x314>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_GPIO_Init+0x20e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4b      	ldr	r2, [pc, #300]	; (8003e18 <HAL_GPIO_Init+0x318>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00d      	beq.n	8003d0a <HAL_GPIO_Init+0x20a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <HAL_GPIO_Init+0x31c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <HAL_GPIO_Init+0x206>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a49      	ldr	r2, [pc, #292]	; (8003e20 <HAL_GPIO_Init+0x320>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <HAL_GPIO_Init+0x202>
 8003cfe:	2306      	movs	r3, #6
 8003d00:	e00c      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d02:	2307      	movs	r3, #7
 8003d04:	e00a      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d06:	2305      	movs	r3, #5
 8003d08:	e008      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e004      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_GPIO_Init+0x21c>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4093      	lsls	r3, r2
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d2c:	4935      	ldr	r1, [pc, #212]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5e:	4a31      	ldr	r2, [pc, #196]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d64:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d8e:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db2:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <HAL_GPIO_Init+0x324>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	f67f ae96 	bls.w	8003b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40020400 	.word	0x40020400
 8003e10:	40020800 	.word	0x40020800
 8003e14:	40020c00 	.word	0x40020c00
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40021400 	.word	0x40021400
 8003e20:	40021800 	.word	0x40021800
 8003e24:	40013c00 	.word	0x40013c00

08003e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e001      	b.n	8003e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e68:	787b      	ldrb	r3, [r7, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e74:	e003      	b.n	8003e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ea2:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f806 	bl	8003ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40013c00 	.word	0x40013c00

08003ebc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e12b      	b.n	800413e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fcc0 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	; 0x24
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f38:	f002 fbee 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a81      	ldr	r2, [pc, #516]	; (8004148 <HAL_I2C_Init+0x274>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d807      	bhi.n	8003f58 <HAL_I2C_Init+0x84>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a80      	ldr	r2, [pc, #512]	; (800414c <HAL_I2C_Init+0x278>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bf94      	ite	ls
 8003f50:	2301      	movls	r3, #1
 8003f52:	2300      	movhi	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e006      	b.n	8003f66 <HAL_I2C_Init+0x92>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a7d      	ldr	r2, [pc, #500]	; (8004150 <HAL_I2C_Init+0x27c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bf94      	ite	ls
 8003f60:	2301      	movls	r3, #1
 8003f62:	2300      	movhi	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0e7      	b.n	800413e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a78      	ldr	r2, [pc, #480]	; (8004154 <HAL_I2C_Init+0x280>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0c9b      	lsrs	r3, r3, #18
 8003f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a6a      	ldr	r2, [pc, #424]	; (8004148 <HAL_I2C_Init+0x274>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d802      	bhi.n	8003fa8 <HAL_I2C_Init+0xd4>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	e009      	b.n	8003fbc <HAL_I2C_Init+0xe8>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	4a69      	ldr	r2, [pc, #420]	; (8004158 <HAL_I2C_Init+0x284>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	3301      	adds	r3, #1
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	495c      	ldr	r1, [pc, #368]	; (8004148 <HAL_I2C_Init+0x274>)
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d819      	bhi.n	8004010 <HAL_I2C_Init+0x13c>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e59      	subs	r1, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_I2C_Init+0x138>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1e59      	subs	r1, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fbb1 f3f3 	udiv	r3, r1, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400a:	e051      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 800400c:	2304      	movs	r3, #4
 800400e:	e04f      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d111      	bne.n	800403c <HAL_I2C_Init+0x168>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1e58      	subs	r0, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	440b      	add	r3, r1
 8004026:	fbb0 f3f3 	udiv	r3, r0, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	2b00      	cmp	r3, #0
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e012      	b.n	8004062 <HAL_I2C_Init+0x18e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e58      	subs	r0, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	0099      	lsls	r1, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Init+0x196>
 8004066:	2301      	movs	r3, #1
 8004068:	e022      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10e      	bne.n	8004090 <HAL_I2C_Init+0x1bc>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e58      	subs	r0, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	440b      	add	r3, r1
 8004080:	fbb0 f3f3 	udiv	r3, r0, r3
 8004084:	3301      	adds	r3, #1
 8004086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408e:	e00f      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1e58      	subs	r0, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	0099      	lsls	r1, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	6809      	ldr	r1, [r1, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6911      	ldr	r1, [r2, #16]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	000186a0 	.word	0x000186a0
 800414c:	001e847f 	.word	0x001e847f
 8004150:	003d08ff 	.word	0x003d08ff
 8004154:	431bde83 	.word	0x431bde83
 8004158:	10624dd3 	.word	0x10624dd3

0800415c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	817b      	strh	r3, [r7, #10]
 800416e:	460b      	mov	r3, r1
 8004170:	813b      	strh	r3, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004176:	f7fe ff95 	bl	80030a4 <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	f040 8208 	bne.w	800459a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2319      	movs	r3, #25
 8004190:	2201      	movs	r2, #1
 8004192:	497b      	ldr	r1, [pc, #492]	; (8004380 <HAL_I2C_Mem_Read+0x224>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f001 ff79 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	e1fb      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x56>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e1f4      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d007      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	; 0x22
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_I2C_Mem_Read+0x228>)
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800421a:	88f8      	ldrh	r0, [r7, #6]
 800421c:	893a      	ldrh	r2, [r7, #8]
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f001 fd9e 	bl	8005d6c <I2C_RequestMemoryRead>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1b0      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d113      	bne.n	800426a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e184      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11b      	bne.n	80042aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e164      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d11b      	bne.n	80042ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	e144      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004300:	e138      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b03      	cmp	r3, #3
 8004308:	f200 80f1 	bhi.w	80044ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b01      	cmp	r3, #1
 8004312:	d123      	bne.n	800435c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f002 f801 	bl	8006320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e139      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435a:	e10b      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b02      	cmp	r3, #2
 8004362:	d14e      	bne.n	8004402 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2200      	movs	r2, #0
 800436c:	4906      	ldr	r1, [pc, #24]	; (8004388 <HAL_I2C_Mem_Read+0x22c>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f001 fe8c 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e10e      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000
 8004388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	e0b8      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2200      	movs	r2, #0
 800440a:	4966      	ldr	r1, [pc, #408]	; (80045a4 <HAL_I2C_Mem_Read+0x448>)
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f001 fe3d 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0bf      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2200      	movs	r2, #0
 8004466:	494f      	ldr	r1, [pc, #316]	; (80045a4 <HAL_I2C_Mem_Read+0x448>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f001 fe0f 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e091      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ec:	e042      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 ff14 	bl	8006320 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e04c      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d118      	bne.n	8004574 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f aec2 	bne.w	8004302 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	00010004 	.word	0x00010004

080045a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	460b      	mov	r3, r1
 80045b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80045b8:	f7fe fd74 	bl	80030a4 <HAL_GetTick>
 80045bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f040 8111 	bne.w	80047f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2319      	movs	r3, #25
 80045d6:	2201      	movs	r2, #1
 80045d8:	4988      	ldr	r1, [pc, #544]	; (80047fc <HAL_I2C_IsDeviceReady+0x254>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f001 fd56 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	e104      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_I2C_IsDeviceReady+0x50>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0fd      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2224      	movs	r2, #36	; 0x24
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a70      	ldr	r2, [pc, #448]	; (8004800 <HAL_I2C_IsDeviceReady+0x258>)
 8004640:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004650:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f001 fd14 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004678:	d103      	bne.n	8004682 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0b6      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004694:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004696:	f7fe fd05 	bl	80030a4 <HAL_GetTick>
 800469a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	bf0c      	ite	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2300      	movne	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046ca:	e025      	b.n	8004718 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046cc:	f7fe fcea 	bl	80030a4 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <HAL_I2C_IsDeviceReady+0x13a>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	22a0      	movs	r2, #160	; 0xa0
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2ba0      	cmp	r3, #160	; 0xa0
 8004722:	d005      	beq.n	8004730 <HAL_I2C_IsDeviceReady+0x188>
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <HAL_I2C_IsDeviceReady+0x188>
 800472a:	7dbb      	ldrb	r3, [r7, #22]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0cd      	beq.n	80046cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d129      	bne.n	800479a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2319      	movs	r3, #25
 8004772:	2201      	movs	r2, #1
 8004774:	4921      	ldr	r1, [pc, #132]	; (80047fc <HAL_I2C_IsDeviceReady+0x254>)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f001 fc88 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e036      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e02c      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2319      	movs	r3, #25
 80047ba:	2201      	movs	r2, #1
 80047bc:	490f      	ldr	r1, [pc, #60]	; (80047fc <HAL_I2C_IsDeviceReady+0x254>)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f001 fc64 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e012      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	3301      	adds	r3, #1
 80047d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	f4ff af32 	bcc.w	8004642 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00100002 	.word	0x00100002
 8004800:	ffff0000 	.word	0xffff0000

08004804 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004824:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d003      	beq.n	800483c <HAL_I2C_EV_IRQHandler+0x38>
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	f040 80b1 	bne.w	800499e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <HAL_I2C_EV_IRQHandler+0x6e>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800485c:	d003      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x62>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004864:	d101      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x66>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x68>
 800486a:	2300      	movs	r3, #0
 800486c:	2b01      	cmp	r3, #1
 800486e:	f000 8114 	beq.w	8004a9a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x90>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 fdcf 	bl	800642a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fcc3 	bl	8005218 <I2C_Master_SB>
 8004892:	e083      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_I2C_EV_IRQHandler+0xac>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fd3b 	bl	8005324 <I2C_Master_ADD10>
 80048ae:	e075      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <HAL_I2C_EV_IRQHandler+0xc8>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fd57 	bl	8005378 <I2C_Master_ADDR>
 80048ca:	e067      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d036      	beq.n	8004944 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	f000 80db 	beq.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x10a>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x10a>
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f93b 	bl	8004b82 <I2C_MasterTransmit_TXE>
 800490c:	e046      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80c2 	beq.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80bc 	beq.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	2b21      	cmp	r3, #33	; 0x21
 800492a:	d103      	bne.n	8004934 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9c4 	bl	8004cba <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004932:	e0b4      	b.n	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	f040 80b1 	bne.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa32 	bl	8004da6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	e0ac      	b.n	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004952:	f000 80a4 	beq.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00d      	beq.n	800497c <HAL_I2C_EV_IRQHandler+0x178>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_I2C_EV_IRQHandler+0x178>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 faaa 	bl	8004ece <I2C_MasterReceive_RXNE>
 800497a:	e00f      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 808b 	beq.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8085 	beq.w	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fb55 	bl	8005044 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499a:	e080      	b.n	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
 800499c:	e07f      	b.n	8004a9e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d004      	beq.n	80049b0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	e007      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x1ea>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00c      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 ff15 	bl	8005816 <I2C_Slave_ADDR>
 80049ec:	e05a      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_I2C_EV_IRQHandler+0x206>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ff50 	bl	80058a8 <I2C_Slave_STOPF>
 8004a08:	e04c      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a0a:	7bbb      	ldrb	r3, [r7, #14]
 8004a0c:	2b21      	cmp	r3, #33	; 0x21
 8004a0e:	d002      	beq.n	8004a16 <HAL_I2C_EV_IRQHandler+0x212>
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	2b29      	cmp	r3, #41	; 0x29
 8004a14:	d120      	bne.n	8004a58 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_I2C_EV_IRQHandler+0x238>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_I2C_EV_IRQHandler+0x238>
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fe30 	bl	800569a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a3a:	e032      	b.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02d      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x29e>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d028      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fe5f 	bl	8005714 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a56:	e024      	b.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <HAL_I2C_EV_IRQHandler+0x27a>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_I2C_EV_IRQHandler+0x27a>
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fe6d 	bl	8005756 <I2C_SlaveReceive_RXNE>
 8004a7c:	e012      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fe9d 	bl	80057d2 <I2C_SlaveReceive_BTF>
 8004a98:	e004      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aa2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70fb      	strb	r3, [r7, #3]
 8004b06:	4613      	mov	r3, r2
 8004b08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b98:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d150      	bne.n	8004c4a <I2C_MasterTransmit_TXE+0xc8>
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b21      	cmp	r3, #33	; 0x21
 8004bac:	d14d      	bne.n	8004c4a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d01d      	beq.n	8004bf0 <I2C_MasterTransmit_TXE+0x6e>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d01a      	beq.n	8004bf0 <I2C_MasterTransmit_TXE+0x6e>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc0:	d016      	beq.n	8004bf0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2211      	movs	r2, #17
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff ff5e 	bl	8004aaa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bee:	e060      	b.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bfe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d107      	bne.n	8004c3a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ff79 	bl	8004b2a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c38:	e03b      	b.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ff31 	bl	8004aaa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c48:	e033      	b.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b21      	cmp	r3, #33	; 0x21
 8004c4e:	d005      	beq.n	8004c5c <I2C_MasterTransmit_TXE+0xda>
 8004c50:	7bbb      	ldrb	r3, [r7, #14]
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d12d      	bne.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	2b22      	cmp	r3, #34	; 0x22
 8004c5a:	d12a      	bne.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c76:	e01c      	b.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d103      	bne.n	8004c8c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f88e 	bl	8004da6 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c8a:	e012      	b.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cb0:	e7ff      	b.n	8004cb2 <I2C_MasterTransmit_TXE+0x130>
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b21      	cmp	r3, #33	; 0x21
 8004cd2:	d164      	bne.n	8004d9e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d02:	e04c      	b.n	8004d9e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d01d      	beq.n	8004d46 <I2C_MasterTransmit_BTF+0x8c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d01a      	beq.n	8004d46 <I2C_MasterTransmit_BTF+0x8c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d16:	d016      	beq.n	8004d46 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d26:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2211      	movs	r2, #17
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff feb3 	bl	8004aaa <HAL_I2C_MasterTxCpltCallback>
}
 8004d44:	e02b      	b.n	8004d9e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d54:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d64:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d107      	bne.n	8004d90 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff fece 	bl	8004b2a <HAL_I2C_MemTxCpltCallback>
}
 8004d8e:	e006      	b.n	8004d9e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff fe86 	bl	8004aaa <HAL_I2C_MasterTxCpltCallback>
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11d      	bne.n	8004dfa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10b      	bne.n	8004dde <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ddc:	e073      	b.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	121b      	asrs	r3, r3, #8
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004df8:	e065      	b.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d10b      	bne.n	8004e1a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e18:	e055      	b.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d151      	bne.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b22      	cmp	r3, #34	; 0x22
 8004e26:	d10d      	bne.n	8004e44 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e36:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e42:	e040      	b.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b21      	cmp	r3, #33	; 0x21
 8004e52:	d112      	bne.n	8004e7a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e78:	e025      	b.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d120      	bne.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b21      	cmp	r3, #33	; 0x21
 8004e88:	d11d      	bne.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e98:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff fe32 	bl	8004b2a <HAL_I2C_MemTxCpltCallback>
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b22      	cmp	r3, #34	; 0x22
 8004ee0:	f040 80ac 	bne.w	800503c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d921      	bls.n	8004f36 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	f040 808c 	bne.w	800503c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f32:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f34:	e082      	b.n	800503c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d075      	beq.n	800502a <I2C_MasterReceive_RXNE+0x15c>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d002      	beq.n	8004f4a <I2C_MasterReceive_RXNE+0x7c>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d16f      	bne.n	800502a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 f9b6 	bl	80062bc <I2C_WaitOnSTOPRequestThroughIT>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d142      	bne.n	8004fdc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f64:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f74:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d10a      	bne.n	8004fc6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fd0e 	bl	80019e0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fc4:	e03a      	b.n	800503c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2212      	movs	r2, #18
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fd72 	bl	8004abe <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fda:	e02f      	b.n	800503c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fd8b 	bl	8004b3e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005028:	e008      	b.n	800503c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005038:	605a      	str	r2, [r3, #4]
}
 800503a:	e7ff      	b.n	800503c <I2C_MasterReceive_RXNE+0x16e>
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b04      	cmp	r3, #4
 800505a:	d11b      	bne.n	8005094 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005092:	e0bd      	b.n	8005210 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b03      	cmp	r3, #3
 800509c:	d129      	bne.n	80050f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d00a      	beq.n	80050ca <I2C_MasterReceive_BTF+0x86>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d007      	beq.n	80050ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050f0:	e08e      	b.n	8005210 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d176      	bne.n	80051ea <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d002      	beq.n	8005108 <I2C_MasterReceive_BTF+0xc4>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b10      	cmp	r3, #16
 8005106:	d108      	bne.n	800511a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e019      	b.n	800514e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d002      	beq.n	8005126 <I2C_MasterReceive_BTF+0xe2>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d108      	bne.n	8005138 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e00a      	b.n	800514e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b10      	cmp	r3, #16
 800513c:	d007      	beq.n	800514e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d10a      	bne.n	80051d4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fc fc07 	bl	80019e0 <HAL_I2C_MemRxCpltCallback>
}
 80051d2:	e01d      	b.n	8005210 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2212      	movs	r2, #18
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fc6b 	bl	8004abe <HAL_I2C_MasterRxCpltCallback>
}
 80051e8:	e012      	b.n	8005210 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d117      	bne.n	800525c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	b2db      	uxtb	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005244:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005246:	e067      	b.n	8005318 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	611a      	str	r2, [r3, #16]
}
 800525a:	e05d      	b.n	8005318 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005264:	d133      	bne.n	80052ce <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b21      	cmp	r3, #33	; 0x21
 8005270:	d109      	bne.n	8005286 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005282:	611a      	str	r2, [r3, #16]
 8005284:	e008      	b.n	8005298 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <I2C_Master_SB+0x92>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d108      	bne.n	80052bc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d032      	beq.n	8005318 <I2C_Master_SB+0x100>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02d      	beq.n	8005318 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ca:	605a      	str	r2, [r3, #4]
}
 80052cc:	e024      	b.n	8005318 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10e      	bne.n	80052f4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	b29b      	uxth	r3, r3
 80052dc:	11db      	asrs	r3, r3, #7
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0306 	and.w	r3, r3, #6
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f063 030f 	orn	r3, r3, #15
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	611a      	str	r2, [r3, #16]
}
 80052f2:	e011      	b.n	8005318 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d10d      	bne.n	8005318 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	b29b      	uxth	r3, r3
 8005302:	11db      	asrs	r3, r3, #7
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0306 	and.w	r3, r3, #6
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f063 030e 	orn	r3, r3, #14
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	b2da      	uxtb	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <I2C_Master_ADD10+0x26>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <I2C_Master_ADD10+0x48>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536a:	605a      	str	r2, [r3, #4]
  }
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005378:	b480      	push	{r7}
 800537a:	b091      	sub	sp, #68	; 0x44
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005386:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b22      	cmp	r3, #34	; 0x22
 80053a0:	f040 8169 	bne.w	8005676 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <I2C_Master_ADDR+0x54>
 80053ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d10b      	bne.n	80053cc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b4:	2300      	movs	r3, #0
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	e160      	b.n	800568e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11d      	bne.n	8005410 <I2C_Master_ADDR+0x98>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053dc:	d118      	bne.n	8005410 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053de:	2300      	movs	r3, #0
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005402:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	651a      	str	r2, [r3, #80]	; 0x50
 800540e:	e13e      	b.n	800568e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d113      	bne.n	8005442 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541a:	2300      	movs	r3, #0
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e115      	b.n	800566e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 808a 	bne.w	8005562 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005454:	d137      	bne.n	80054c6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005474:	d113      	bne.n	800549e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	e0e7      	b.n	800566e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e0d3      	b.n	800566e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d02e      	beq.n	800552a <I2C_Master_ADDR+0x1b2>
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d02b      	beq.n	800552a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	2b12      	cmp	r3, #18
 80054d6:	d102      	bne.n	80054de <I2C_Master_ADDR+0x166>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d125      	bne.n	800552a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d00e      	beq.n	8005502 <I2C_Master_ADDR+0x18a>
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d00b      	beq.n	8005502 <I2C_Master_ADDR+0x18a>
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d008      	beq.n	8005502 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e007      	b.n	8005512 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005510:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	e0a1      	b.n	800566e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005538:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553a:	2300      	movs	r3, #0
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e085      	b.n	800566e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d14d      	bne.n	8005608 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b04      	cmp	r3, #4
 8005570:	d016      	beq.n	80055a0 <I2C_Master_ADDR+0x228>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b02      	cmp	r3, #2
 8005576:	d013      	beq.n	80055a0 <I2C_Master_ADDR+0x228>
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b10      	cmp	r3, #16
 800557c:	d010      	beq.n	80055a0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	e007      	b.n	80055b0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ae:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055be:	d117      	bne.n	80055f0 <I2C_Master_ADDR+0x278>
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055c6:	d00b      	beq.n	80055e0 <I2C_Master_ADDR+0x268>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d008      	beq.n	80055e0 <I2C_Master_ADDR+0x268>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d005      	beq.n	80055e0 <I2C_Master_ADDR+0x268>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d002      	beq.n	80055e0 <I2C_Master_ADDR+0x268>
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d107      	bne.n	80055f0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ee:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e032      	b.n	800566e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005616:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005626:	d117      	bne.n	8005658 <I2C_Master_ADDR+0x2e0>
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800562e:	d00b      	beq.n	8005648 <I2C_Master_ADDR+0x2d0>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	2b01      	cmp	r3, #1
 8005634:	d008      	beq.n	8005648 <I2C_Master_ADDR+0x2d0>
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	2b08      	cmp	r3, #8
 800563a:	d005      	beq.n	8005648 <I2C_Master_ADDR+0x2d0>
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	2b10      	cmp	r3, #16
 8005640:	d002      	beq.n	8005648 <I2C_Master_ADDR+0x2d0>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b20      	cmp	r3, #32
 8005646:	d107      	bne.n	8005658 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005656:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005674:	e00b      	b.n	800568e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	e7ff      	b.n	800568e <I2C_Master_ADDR+0x316>
 800568e:	bf00      	nop
 8005690:	3744      	adds	r7, #68	; 0x44
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02b      	beq.n	800570c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d114      	bne.n	800570c <I2C_SlaveTransmit_TXE+0x72>
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b29      	cmp	r3, #41	; 0x29
 80056e6:	d111      	bne.n	800570c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2221      	movs	r2, #33	; 0x21
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2228      	movs	r2, #40	; 0x28
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff f9e3 	bl	8004ad2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d011      	beq.n	800574a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02c      	beq.n	80057ca <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d114      	bne.n	80057ca <I2C_SlaveReceive_RXNE+0x74>
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b2a      	cmp	r3, #42	; 0x2a
 80057a4:	d111      	bne.n	80057ca <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2222      	movs	r2, #34	; 0x22
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2228      	movs	r2, #40	; 0x28
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff f98e 	bl	8004ae6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005830:	2b28      	cmp	r3, #40	; 0x28
 8005832:	d125      	bne.n	8005880 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005842:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	81bb      	strh	r3, [r7, #12]
 8005862:	e002      	b.n	800586a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005872:	89ba      	ldrh	r2, [r7, #12]
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff f93e 	bl	8004afa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800587e:	e00e      	b.n	800589e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005904:	d172      	bne.n	80059ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b22      	cmp	r3, #34	; 0x22
 800590a:	d002      	beq.n	8005912 <I2C_Slave_STOPF+0x6a>
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b2a      	cmp	r3, #42	; 0x2a
 8005910:	d135      	bne.n	800597e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0204 	orr.w	r2, r3, #4
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005944:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd ffde 	bl	800390c <HAL_DMA_GetState>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d049      	beq.n	80059ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <I2C_Slave_STOPF+0x258>)
 800595c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	4618      	mov	r0, r3
 8005964:	f7fd fe26 	bl	80035b4 <HAL_DMA_Abort_IT>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d03d      	beq.n	80059ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005978:	4610      	mov	r0, r2
 800597a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800597c:	e035      	b.n	80059ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0204 	orr.w	r2, r3, #4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd ffa8 	bl	800390c <HAL_DMA_GetState>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d014      	beq.n	80059ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	4a4e      	ldr	r2, [pc, #312]	; (8005b00 <I2C_Slave_STOPF+0x258>)
 80059c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fd fdf0 	bl	80035b4 <HAL_DMA_Abort_IT>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
 80059e8:	e000      	b.n	80059ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d03e      	beq.n	8005a74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d112      	bne.n	8005a2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d112      	bne.n	8005a5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f843 	bl	8005b08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a82:	e039      	b.n	8005af8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b2a      	cmp	r3, #42	; 0x2a
 8005a88:	d109      	bne.n	8005a9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2228      	movs	r2, #40	; 0x28
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff f824 	bl	8004ae6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b28      	cmp	r3, #40	; 0x28
 8005aa8:	d111      	bne.n	8005ace <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <I2C_Slave_STOPF+0x25c>)
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff f825 	bl	8004b16 <HAL_I2C_ListenCpltCallback>
}
 8005acc:	e014      	b.n	8005af8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	2b22      	cmp	r3, #34	; 0x22
 8005ad4:	d002      	beq.n	8005adc <I2C_Slave_STOPF+0x234>
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b22      	cmp	r3, #34	; 0x22
 8005ada:	d10d      	bne.n	8005af8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fe fff7 	bl	8004ae6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	08005f3d 	.word	0x08005f3d
 8005b04:	ffff0000 	.word	0xffff0000

08005b08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d002      	beq.n	8005b2c <I2C_ITError+0x24>
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d10a      	bne.n	8005b42 <I2C_ITError+0x3a>
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b22      	cmp	r3, #34	; 0x22
 8005b30:	d107      	bne.n	8005b42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b48:	2b28      	cmp	r3, #40	; 0x28
 8005b4a:	d107      	bne.n	8005b5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2228      	movs	r2, #40	; 0x28
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b5a:	e015      	b.n	8005b88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6a:	d00a      	beq.n	8005b82 <I2C_ITError+0x7a>
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b60      	cmp	r3, #96	; 0x60
 8005b70:	d007      	beq.n	8005b82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b96:	d162      	bne.n	8005c5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d020      	beq.n	8005bf8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	4a6a      	ldr	r2, [pc, #424]	; (8005d64 <I2C_ITError+0x25c>)
 8005bbc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fd fcf6 	bl	80035b4 <HAL_DMA_Abort_IT>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8089 	beq.w	8005ce2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4798      	blx	r3
 8005bf6:	e074      	b.n	8005ce2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	4a59      	ldr	r2, [pc, #356]	; (8005d64 <I2C_ITError+0x25c>)
 8005bfe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fcd5 	bl	80035b4 <HAL_DMA_Abort_IT>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d068      	beq.n	8005ce2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d10b      	bne.n	8005c36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
 8005c5c:	e041      	b.n	8005ce2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b60      	cmp	r3, #96	; 0x60
 8005c68:	d125      	bne.n	8005cb6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d10b      	bne.n	8005c9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fe ff4f 	bl	8004b52 <HAL_I2C_AbortCpltCallback>
 8005cb4:	e015      	b.n	8005ce2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d10b      	bne.n	8005cdc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fe ff2e 	bl	8004b3e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10e      	bne.n	8005d10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d113      	bne.n	8005d5c <I2C_ITError+0x254>
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b28      	cmp	r3, #40	; 0x28
 8005d38:	d110      	bne.n	8005d5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <I2C_ITError+0x260>)
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fe fedd 	bl	8004b16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	08005f3d 	.word	0x08005f3d
 8005d68:	ffff0000 	.word	0xffff0000

08005d6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	813b      	strh	r3, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f96a 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dcc:	d103      	bne.n	8005dd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e0aa      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	4952      	ldr	r1, [pc, #328]	; (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f9a2 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e097      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fa0c 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d107      	bne.n	8005e3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e076      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	e021      	b.n	8005e98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e64:	6a39      	ldr	r1, [r7, #32]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f9e6 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e050      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e8e:	893b      	ldrh	r3, [r7, #8]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	6a39      	ldr	r1, [r7, #32]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9cb 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d107      	bne.n	8005ec0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e035      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f8d3 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efa:	d103      	bne.n	8005f04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e013      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f08:	897b      	ldrh	r3, [r7, #10]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	4906      	ldr	r1, [pc, #24]	; (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f90b 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	00010002 	.word	0x00010002

08005f3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f56:	4b4b      	ldr	r3, [pc, #300]	; (8006084 <I2C_DMAAbort+0x148>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <I2C_DMAAbort+0x14c>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	0a1a      	lsrs	r2, r3, #8
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f82:	e00a      	b.n	8005f9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f98:	d0ea      	beq.n	8005f70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	2200      	movs	r2, #0
 8005fde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	2200      	movs	r2, #0
 8005fee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b60      	cmp	r3, #96	; 0x60
 800600a:	d10e      	bne.n	800602a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006022:	6978      	ldr	r0, [r7, #20]
 8006024:	f7fe fd95 	bl	8004b52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006028:	e027      	b.n	800607a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006030:	2b28      	cmp	r3, #40	; 0x28
 8006032:	d117      	bne.n	8006064 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006052:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2228      	movs	r2, #40	; 0x28
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006062:	e007      	b.n	8006074 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006074:	6978      	ldr	r0, [r7, #20]
 8006076:	f7fe fd62 	bl	8004b3e <HAL_I2C_ErrorCallback>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000004 	.word	0x20000004
 8006088:	14f8b589 	.word	0x14f8b589

0800608c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609c:	e025      	b.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d021      	beq.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fc fffd 	bl	80030a4 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d116      	bne.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e023      	b.n	8006132 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10d      	bne.n	8006110 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4013      	ands	r3, r2
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	e00c      	b.n	800612a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	429a      	cmp	r2, r3
 800612e:	d0b6      	beq.n	800609e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006148:	e051      	b.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d123      	bne.n	80061a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006168:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006172:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0204 	orr.w	r2, r3, #4
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e046      	b.n	8006230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d021      	beq.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fc ff7b 	bl	80030a4 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d116      	bne.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0220 	orr.w	r2, r3, #32
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e020      	b.n	8006230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d10c      	bne.n	8006212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	43da      	mvns	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e00b      	b.n	800622a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	43da      	mvns	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d18d      	bne.n	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006244:	e02d      	b.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8c0 	bl	80063cc <I2C_IsAcknowledgeFailed>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e02d      	b.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d021      	beq.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625e:	f7fc ff21 	bl	80030a4 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d116      	bne.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e007      	b.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d1ca      	bne.n	8006246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062c8:	4b13      	ldr	r3, [pc, #76]	; (8006318 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	0a1a      	lsrs	r2, r3, #8
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d107      	bne.n	80062fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e008      	b.n	800630c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006308:	d0e9      	beq.n	80062de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	20000004 	.word	0x20000004
 800631c:	14f8b589 	.word	0x14f8b589

08006320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800632c:	e042      	b.n	80063b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b10      	cmp	r3, #16
 800633a:	d119      	bne.n	8006370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0210 	mvn.w	r2, #16
 8006344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e029      	b.n	80063c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006370:	f7fc fe98 	bl	80030a4 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d116      	bne.n	80063b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	f043 0220 	orr.w	r2, r3, #32
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e007      	b.n	80063c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d1b5      	bne.n	800632e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e2:	d11b      	bne.n	800641c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006436:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800643a:	d103      	bne.n	8006444 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006442:	e007      	b.n	8006454 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800644c:	d102      	bne.n	8006454 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2208      	movs	r2, #8
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006464:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006470:	f000 f808 	bl	8006484 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006476:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800647a:	615a      	str	r2, [r3, #20]
  }
}
 800647c:	bf00      	nop
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40013c00 	.word	0x40013c00

08006484 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	4b20      	ldr	r3, [pc, #128]	; (8006524 <HAL_PWREx_EnableOverDrive+0x90>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_PWREx_EnableOverDrive+0x90>)
 80064a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ac:	6413      	str	r3, [r2, #64]	; 0x40
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_PWREx_EnableOverDrive+0x90>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <HAL_PWREx_EnableOverDrive+0x94>)
 80064bc:	2201      	movs	r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064c0:	f7fc fdf0 	bl	80030a4 <HAL_GetTick>
 80064c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064c6:	e009      	b.n	80064dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064c8:	f7fc fdec 	bl	80030a4 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d6:	d901      	bls.n	80064dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e01f      	b.n	800651c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_PWREx_EnableOverDrive+0x98>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d1ee      	bne.n	80064c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064f0:	f7fc fdd8 	bl	80030a4 <HAL_GetTick>
 80064f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064f6:	e009      	b.n	800650c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064f8:	f7fc fdd4 	bl	80030a4 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006506:	d901      	bls.n	800650c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e007      	b.n	800651c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800650c:	4b07      	ldr	r3, [pc, #28]	; (800652c <HAL_PWREx_EnableOverDrive+0x98>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006518:	d1ee      	bne.n	80064f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40023800 	.word	0x40023800
 8006528:	420e0040 	.word	0x420e0040
 800652c:	40007000 	.word	0x40007000
 8006530:	420e0044 	.word	0x420e0044

08006534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0cc      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006548:	4b68      	ldr	r3, [pc, #416]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d90c      	bls.n	8006570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006556:	4b65      	ldr	r3, [pc, #404]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b63      	ldr	r3, [pc, #396]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0b8      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d020      	beq.n	80065be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006588:	4b59      	ldr	r3, [pc, #356]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4a58      	ldr	r2, [pc, #352]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 800658e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a0:	4b53      	ldr	r3, [pc, #332]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a52      	ldr	r2, [pc, #328]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ac:	4b50      	ldr	r3, [pc, #320]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	494d      	ldr	r1, [pc, #308]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d044      	beq.n	8006654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d107      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d2:	4b47      	ldr	r3, [pc, #284]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d119      	bne.n	8006612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e07f      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d003      	beq.n	80065f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d107      	bne.n	8006602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f2:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e06f      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006602:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e067      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006612:	4b37      	ldr	r3, [pc, #220]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f023 0203 	bic.w	r2, r3, #3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4934      	ldr	r1, [pc, #208]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006620:	4313      	orrs	r3, r2
 8006622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006624:	f7fc fd3e 	bl	80030a4 <HAL_GetTick>
 8006628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662a:	e00a      	b.n	8006642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800662c:	f7fc fd3a 	bl	80030a4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e04f      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006642:	4b2b      	ldr	r3, [pc, #172]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 020c 	and.w	r2, r3, #12
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	429a      	cmp	r2, r3
 8006652:	d1eb      	bne.n	800662c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006654:	4b25      	ldr	r3, [pc, #148]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d20c      	bcs.n	800667c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b22      	ldr	r3, [pc, #136]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800666a:	4b20      	ldr	r3, [pc, #128]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d001      	beq.n	800667c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e032      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006688:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4916      	ldr	r1, [pc, #88]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	4313      	orrs	r3, r2
 8006698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d009      	beq.n	80066ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066a6:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	490e      	ldr	r1, [pc, #56]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ba:	f000 fbb1 	bl	8006e20 <HAL_RCC_GetSysClockFreq>
 80066be:	4602      	mov	r2, r0
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	490a      	ldr	r1, [pc, #40]	; (80066f4 <HAL_RCC_ClockConfig+0x1c0>)
 80066cc:	5ccb      	ldrb	r3, [r1, r3]
 80066ce:	fa22 f303 	lsr.w	r3, r2, r3
 80066d2:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <HAL_RCC_ClockConfig+0x1c4>)
 80066d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066d6:	4b09      	ldr	r3, [pc, #36]	; (80066fc <HAL_RCC_ClockConfig+0x1c8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fb fc8c 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023c00 	.word	0x40023c00
 80066f0:	40023800 	.word	0x40023800
 80066f4:	0801407c 	.word	0x0801407c
 80066f8:	20000004 	.word	0x20000004
 80066fc:	20000008 	.word	0x20000008

08006700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006704:	4b03      	ldr	r3, [pc, #12]	; (8006714 <HAL_RCC_GetHCLKFreq+0x14>)
 8006706:	681b      	ldr	r3, [r3, #0]
}
 8006708:	4618      	mov	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000004 	.word	0x20000004

08006718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800671c:	f7ff fff0 	bl	8006700 <HAL_RCC_GetHCLKFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	0a9b      	lsrs	r3, r3, #10
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	4903      	ldr	r1, [pc, #12]	; (800673c <HAL_RCC_GetPCLK1Freq+0x24>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006734:	4618      	mov	r0, r3
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40023800 	.word	0x40023800
 800673c:	0801408c 	.word	0x0801408c

08006740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006744:	f7ff ffdc 	bl	8006700 <HAL_RCC_GetHCLKFreq>
 8006748:	4602      	mov	r2, r0
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	0b5b      	lsrs	r3, r3, #13
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	4903      	ldr	r1, [pc, #12]	; (8006764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006756:	5ccb      	ldrb	r3, [r1, r3]
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40023800 	.word	0x40023800
 8006764:	0801408c 	.word	0x0801408c

08006768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	220f      	movs	r2, #15
 8006776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006778:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 0203 	and.w	r2, r3, #3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067aa:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <HAL_RCC_GetClockConfig+0x60>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	40023c00 	.word	0x40023c00

080067cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	; 0x30
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d010      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006804:	4b6f      	ldr	r3, [pc, #444]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	496c      	ldr	r1, [pc, #432]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006822:	2301      	movs	r3, #1
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d010      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006832:	4b64      	ldr	r3, [pc, #400]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006838:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	4960      	ldr	r1, [pc, #384]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006850:	2301      	movs	r3, #1
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d017      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006860:	4b58      	ldr	r3, [pc, #352]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	4955      	ldr	r1, [pc, #340]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800687e:	d101      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006880:	2301      	movs	r3, #1
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800688c:	2301      	movs	r3, #1
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d017      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800689c:	4b49      	ldr	r3, [pc, #292]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800689e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	4946      	ldr	r1, [pc, #280]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ba:	d101      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80068bc:	2301      	movs	r3, #1
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80068c8:	2301      	movs	r3, #1
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 808a 	beq.w	80069ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	4a38      	ldr	r2, [pc, #224]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e8:	6413      	str	r3, [r2, #64]	; 0x40
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f2:	60bb      	str	r3, [r7, #8]
 80068f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068f6:	4b34      	ldr	r3, [pc, #208]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a33      	ldr	r2, [pc, #204]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006900:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006902:	f7fc fbcf 	bl	80030a4 <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800690a:	f7fc fbcb 	bl	80030a4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e278      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006928:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006930:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d02f      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	429a      	cmp	r2, r3
 8006944:	d028      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006946:	4b1f      	ldr	r3, [pc, #124]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006962:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b01      	cmp	r3, #1
 800696c:	d114      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800696e:	f7fc fb99 	bl	80030a4 <HAL_GetTick>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006974:	e00a      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006976:	f7fc fb95 	bl	80030a4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	f241 3288 	movw	r2, #5000	; 0x1388
 8006984:	4293      	cmp	r3, r2
 8006986:	d901      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e240      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ee      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a4:	d114      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ba:	4902      	ldr	r1, [pc, #8]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	608b      	str	r3, [r1, #8]
 80069c0:	e00c      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80069c2:	bf00      	nop
 80069c4:	40023800 	.word	0x40023800
 80069c8:	40007000 	.word	0x40007000
 80069cc:	42470e40 	.word	0x42470e40
 80069d0:	4b4a      	ldr	r3, [pc, #296]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4a49      	ldr	r2, [pc, #292]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069da:	6093      	str	r3, [r2, #8]
 80069dc:	4b47      	ldr	r3, [pc, #284]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e8:	4944      	ldr	r1, [pc, #272]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006a00:	4b3f      	ldr	r3, [pc, #252]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006a02:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006a10:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1e:	4937      	ldr	r1, [pc, #220]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a32:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a38:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a40:	492e      	ldr	r1, [pc, #184]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d011      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a54:	4b29      	ldr	r3, [pc, #164]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a5a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	4926      	ldr	r1, [pc, #152]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d101      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006a74:	2301      	movs	r3, #1
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	491a      	ldr	r1, [pc, #104]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d011      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	4911      	ldr	r1, [pc, #68]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac4:	d101      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d005      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad8:	f040 80ff 	bne.w	8006cda <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006adc:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ae2:	f7fc fadf 	bl	80030a4 <HAL_GetTick>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ae8:	e00e      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aea:	f7fc fadb 	bl	80030a4 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d907      	bls.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e188      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006afc:	40023800 	.word	0x40023800
 8006b00:	424711e0 	.word	0x424711e0
 8006b04:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b08:	4b7e      	ldr	r3, [pc, #504]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ea      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d028      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d124      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b3c:	4b71      	ldr	r3, [pc, #452]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	0c1b      	lsrs	r3, r3, #16
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	3301      	adds	r3, #1
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b54:	0e1b      	lsrs	r3, r3, #24
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	019b      	lsls	r3, r3, #6
 8006b66:	431a      	orrs	r2, r3
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	071b      	lsls	r3, r3, #28
 8006b7e:	4961      	ldr	r1, [pc, #388]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9a:	d00a      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d035      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb0:	d130      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006bb2:	4b54      	ldr	r3, [pc, #336]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bc4:	4b4f      	ldr	r3, [pc, #316]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bca:	0f1b      	lsrs	r3, r3, #28
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	019b      	lsls	r3, r3, #6
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	3b01      	subs	r3, #1
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	071b      	lsls	r3, r3, #28
 8006bf4:	4943      	ldr	r1, [pc, #268]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bfc:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c02:	f023 021f 	bic.w	r2, r3, #31
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	493d      	ldr	r1, [pc, #244]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d029      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c28:	d124      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006c2a:	4b36      	ldr	r3, [pc, #216]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	3301      	adds	r3, #1
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c3c:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c42:	0f1b      	lsrs	r3, r3, #28
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	019b      	lsls	r3, r3, #6
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	041b      	lsls	r3, r3, #16
 8006c60:	431a      	orrs	r2, r3
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	061b      	lsls	r3, r3, #24
 8006c66:	431a      	orrs	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	071b      	lsls	r3, r3, #28
 8006c6c:	4925      	ldr	r1, [pc, #148]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d016      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	3b01      	subs	r3, #1
 8006c94:	041b      	lsls	r3, r3, #16
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	071b      	lsls	r3, r3, #28
 8006ca6:	4917      	ldr	r1, [pc, #92]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cae:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cb4:	f7fc f9f6 	bl	80030a4 <HAL_GetTick>
 8006cb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cbc:	f7fc f9f2 	bl	80030a4 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e09f      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cce:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	f040 8095 	bne.w	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ce8:	f7fc f9dc 	bl	80030a4 <HAL_GetTick>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cee:	e00f      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cf0:	f7fc f9d8 	bl	80030a4 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d908      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e085      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800
 8006d08:	42470068 	.word	0x42470068
 8006d0c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d10:	4b41      	ldr	r3, [pc, #260]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1c:	d0e8      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d02b      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d127      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006d46:	4b34      	ldr	r3, [pc, #208]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	3301      	adds	r3, #1
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	431a      	orrs	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	061b      	lsls	r3, r3, #24
 8006d74:	4928      	ldr	r1, [pc, #160]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d7c:	4b26      	ldr	r3, [pc, #152]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	4922      	ldr	r1, [pc, #136]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01d      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006daa:	d118      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db2:	0e1b      	lsrs	r3, r3, #24
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	019b      	lsls	r3, r3, #6
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	061b      	lsls	r3, r3, #24
 8006dd6:	4910      	ldr	r1, [pc, #64]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006de4:	f7fc f95e 	bl	80030a4 <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006dec:	f7fc f95a 	bl	80030a4 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e007      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dfe:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0a:	d1ef      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3730      	adds	r7, #48	; 0x30
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	42470070 	.word	0x42470070

08006e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e24:	b0a6      	sub	sp, #152	; 0x98
 8006e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e46:	4bc8      	ldr	r3, [pc, #800]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
 8006e4e:	2b0c      	cmp	r3, #12
 8006e50:	f200 817e 	bhi.w	8007150 <HAL_RCC_GetSysClockFreq+0x330>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e91 	.word	0x08006e91
 8006e60:	08007151 	.word	0x08007151
 8006e64:	08007151 	.word	0x08007151
 8006e68:	08007151 	.word	0x08007151
 8006e6c:	08006e99 	.word	0x08006e99
 8006e70:	08007151 	.word	0x08007151
 8006e74:	08007151 	.word	0x08007151
 8006e78:	08007151 	.word	0x08007151
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08007151 	.word	0x08007151
 8006e84:	08007151 	.word	0x08007151
 8006e88:	08007151 	.word	0x08007151
 8006e8c:	0800700b 	.word	0x0800700b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4bb6      	ldr	r3, [pc, #728]	; (800716c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006e96:	e15f      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e98:	4bb5      	ldr	r3, [pc, #724]	; (8007170 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006e9e:	e15b      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ea0:	4bb1      	ldr	r3, [pc, #708]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eac:	4bae      	ldr	r3, [pc, #696]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d031      	beq.n	8006f1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb8:	4bab      	ldr	r3, [pc, #684]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	099b      	lsrs	r3, r3, #6
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	663b      	str	r3, [r7, #96]	; 0x60
 8006ecc:	2300      	movs	r3, #0
 8006ece:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed0:	4ba7      	ldr	r3, [pc, #668]	; (8007170 <HAL_RCC_GetSysClockFreq+0x350>)
 8006ed2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006ed6:	462a      	mov	r2, r5
 8006ed8:	fb03 f202 	mul.w	r2, r3, r2
 8006edc:	2300      	movs	r3, #0
 8006ede:	4621      	mov	r1, r4
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4aa2      	ldr	r2, [pc, #648]	; (8007170 <HAL_RCC_GetSysClockFreq+0x350>)
 8006ee8:	4621      	mov	r1, r4
 8006eea:	fba1 1202 	umull	r1, r2, r1, r2
 8006eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	67ba      	str	r2, [r7, #120]	; 0x78
 8006ef4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ef6:	4413      	add	r3, r2
 8006ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006efe:	2200      	movs	r2, #0
 8006f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006f04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006f0c:	f7f9 fedc 	bl	8000cc8 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4613      	mov	r3, r2
 8006f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f1a:	e064      	b.n	8006fe6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1c:	4b92      	ldr	r3, [pc, #584]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	099b      	lsrs	r3, r3, #6
 8006f22:	2200      	movs	r2, #0
 8006f24:	653b      	str	r3, [r7, #80]	; 0x50
 8006f26:	657a      	str	r2, [r7, #84]	; 0x54
 8006f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f30:	2300      	movs	r3, #0
 8006f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006f38:	4622      	mov	r2, r4
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	f04f 0000 	mov.w	r0, #0
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	0159      	lsls	r1, r3, #5
 8006f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f4a:	0150      	lsls	r0, r2, #5
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4621      	mov	r1, r4
 8006f52:	1a51      	subs	r1, r2, r1
 8006f54:	6139      	str	r1, [r7, #16]
 8006f56:	4629      	mov	r1, r5
 8006f58:	eb63 0301 	sbc.w	r3, r3, r1
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	018b      	lsls	r3, r1, #6
 8006f6e:	4651      	mov	r1, sl
 8006f70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f74:	4651      	mov	r1, sl
 8006f76:	018a      	lsls	r2, r1, #6
 8006f78:	4651      	mov	r1, sl
 8006f7a:	ebb2 0801 	subs.w	r8, r2, r1
 8006f7e:	4659      	mov	r1, fp
 8006f80:	eb63 0901 	sbc.w	r9, r3, r1
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f98:	4690      	mov	r8, r2
 8006f9a:	4699      	mov	r9, r3
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	eb18 0303 	adds.w	r3, r8, r3
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	eb49 0303 	adc.w	r3, r9, r3
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fb8:	4629      	mov	r1, r5
 8006fba:	028b      	lsls	r3, r1, #10
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	028a      	lsls	r2, r1, #10
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fce:	2200      	movs	r2, #0
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8006fd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fd8:	f7f9 fe76 	bl	8000cc8 <__aeabi_uldivmod>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fe6:	4b60      	ldr	r3, [pc, #384]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006ff8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007008:	e0a6      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800700a:	4b57      	ldr	r3, [pc, #348]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007016:	4b54      	ldr	r3, [pc, #336]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d02a      	beq.n	8007078 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007022:	4b51      	ldr	r3, [pc, #324]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	099b      	lsrs	r3, r3, #6
 8007028:	2200      	movs	r2, #0
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
 800702c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007034:	2100      	movs	r1, #0
 8007036:	4b4e      	ldr	r3, [pc, #312]	; (8007170 <HAL_RCC_GetSysClockFreq+0x350>)
 8007038:	fb03 f201 	mul.w	r2, r3, r1
 800703c:	2300      	movs	r3, #0
 800703e:	fb00 f303 	mul.w	r3, r0, r3
 8007042:	4413      	add	r3, r2
 8007044:	4a4a      	ldr	r2, [pc, #296]	; (8007170 <HAL_RCC_GetSysClockFreq+0x350>)
 8007046:	fba0 1202 	umull	r1, r2, r0, r2
 800704a:	677a      	str	r2, [r7, #116]	; 0x74
 800704c:	460a      	mov	r2, r1
 800704e:	673a      	str	r2, [r7, #112]	; 0x70
 8007050:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007052:	4413      	add	r3, r2
 8007054:	677b      	str	r3, [r7, #116]	; 0x74
 8007056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800705a:	2200      	movs	r2, #0
 800705c:	633b      	str	r3, [r7, #48]	; 0x30
 800705e:	637a      	str	r2, [r7, #52]	; 0x34
 8007060:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007064:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007068:	f7f9 fe2e 	bl	8000cc8 <__aeabi_uldivmod>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4613      	mov	r3, r2
 8007072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007076:	e05b      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007078:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	099b      	lsrs	r3, r3, #6
 800707e:	2200      	movs	r2, #0
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
 8007082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	623b      	str	r3, [r7, #32]
 800708c:	2300      	movs	r3, #0
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
 8007090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	f04f 0000 	mov.w	r0, #0
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	0159      	lsls	r1, r3, #5
 80070a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070a6:	0150      	lsls	r0, r2, #5
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4641      	mov	r1, r8
 80070ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80070b2:	4649      	mov	r1, r9
 80070b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070cc:	ebb2 040a 	subs.w	r4, r2, sl
 80070d0:	eb63 050b 	sbc.w	r5, r3, fp
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	00eb      	lsls	r3, r5, #3
 80070de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070e2:	00e2      	lsls	r2, r4, #3
 80070e4:	4614      	mov	r4, r2
 80070e6:	461d      	mov	r5, r3
 80070e8:	4643      	mov	r3, r8
 80070ea:	18e3      	adds	r3, r4, r3
 80070ec:	603b      	str	r3, [r7, #0]
 80070ee:	464b      	mov	r3, r9
 80070f0:	eb45 0303 	adc.w	r3, r5, r3
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007102:	4629      	mov	r1, r5
 8007104:	028b      	lsls	r3, r1, #10
 8007106:	4621      	mov	r1, r4
 8007108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800710c:	4621      	mov	r1, r4
 800710e:	028a      	lsls	r2, r1, #10
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007118:	2200      	movs	r2, #0
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	61fa      	str	r2, [r7, #28]
 800711e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007122:	f7f9 fdd1 	bl	8000cc8 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4613      	mov	r3, r2
 800712c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <HAL_RCC_GetSysClockFreq+0x348>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	0f1b      	lsrs	r3, r3, #28
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800713e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007146:	fbb2 f3f3 	udiv	r3, r2, r3
 800714a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800714e:	e003      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <HAL_RCC_GetSysClockFreq+0x34c>)
 8007152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007156:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800715c:	4618      	mov	r0, r3
 800715e:	3798      	adds	r7, #152	; 0x98
 8007160:	46bd      	mov	sp, r7
 8007162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800
 800716c:	00f42400 	.word	0x00f42400
 8007170:	017d7840 	.word	0x017d7840

08007174 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e28d      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 8083 	beq.w	800729a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007194:	4b94      	ldr	r3, [pc, #592]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 030c 	and.w	r3, r3, #12
 800719c:	2b04      	cmp	r3, #4
 800719e:	d019      	beq.n	80071d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071a0:	4b91      	ldr	r3, [pc, #580]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d106      	bne.n	80071ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071ac:	4b8e      	ldr	r3, [pc, #568]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b8:	d00c      	beq.n	80071d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ba:	4b8b      	ldr	r3, [pc, #556]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d112      	bne.n	80071ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071c6:	4b88      	ldr	r3, [pc, #544]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071d2:	d10b      	bne.n	80071ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d4:	4b84      	ldr	r3, [pc, #528]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d05b      	beq.n	8007298 <HAL_RCC_OscConfig+0x124>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d157      	bne.n	8007298 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e25a      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f4:	d106      	bne.n	8007204 <HAL_RCC_OscConfig+0x90>
 80071f6:	4b7c      	ldr	r3, [pc, #496]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7b      	ldr	r2, [pc, #492]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80071fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e01d      	b.n	8007240 <HAL_RCC_OscConfig+0xcc>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800720c:	d10c      	bne.n	8007228 <HAL_RCC_OscConfig+0xb4>
 800720e:	4b76      	ldr	r3, [pc, #472]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a75      	ldr	r2, [pc, #468]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4b73      	ldr	r3, [pc, #460]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a72      	ldr	r2, [pc, #456]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e00b      	b.n	8007240 <HAL_RCC_OscConfig+0xcc>
 8007228:	4b6f      	ldr	r3, [pc, #444]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a6e      	ldr	r2, [pc, #440]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800722e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b6c      	ldr	r3, [pc, #432]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a6b      	ldr	r2, [pc, #428]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800723a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800723e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fb ff2c 	bl	80030a4 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007250:	f7fb ff28 	bl	80030a4 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	; 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e21f      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007262:	4b61      	ldr	r3, [pc, #388]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0xdc>
 800726e:	e014      	b.n	800729a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fb ff18 	bl	80030a4 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007278:	f7fb ff14 	bl	80030a4 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	; 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e20b      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800728a:	4b57      	ldr	r3, [pc, #348]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x104>
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d06f      	beq.n	8007386 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072a6:	4b50      	ldr	r3, [pc, #320]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072b2:	4b4d      	ldr	r3, [pc, #308]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d105      	bne.n	80072ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072be:	4b4a      	ldr	r3, [pc, #296]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ca:	4b47      	ldr	r3, [pc, #284]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072d2:	2b0c      	cmp	r3, #12
 80072d4:	d11c      	bne.n	8007310 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072d6:	4b44      	ldr	r3, [pc, #272]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d116      	bne.n	8007310 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e2:	4b41      	ldr	r3, [pc, #260]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_RCC_OscConfig+0x186>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d001      	beq.n	80072fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e1d3      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072fa:	4b3b      	ldr	r3, [pc, #236]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4937      	ldr	r1, [pc, #220]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800730a:	4313      	orrs	r3, r2
 800730c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800730e:	e03a      	b.n	8007386 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d020      	beq.n	800735a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007318:	4b34      	ldr	r3, [pc, #208]	; (80073ec <HAL_RCC_OscConfig+0x278>)
 800731a:	2201      	movs	r2, #1
 800731c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731e:	f7fb fec1 	bl	80030a4 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007326:	f7fb febd 	bl	80030a4 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e1b4      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007338:	4b2b      	ldr	r3, [pc, #172]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f0      	beq.n	8007326 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007344:	4b28      	ldr	r3, [pc, #160]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4925      	ldr	r1, [pc, #148]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 8007354:	4313      	orrs	r3, r2
 8007356:	600b      	str	r3, [r1, #0]
 8007358:	e015      	b.n	8007386 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800735a:	4b24      	ldr	r3, [pc, #144]	; (80073ec <HAL_RCC_OscConfig+0x278>)
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fb fea0 	bl	80030a4 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007368:	f7fb fe9c 	bl	80030a4 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e193      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800737a:	4b1b      	ldr	r3, [pc, #108]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f0      	bne.n	8007368 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d036      	beq.n	8007400 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d016      	beq.n	80073c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <HAL_RCC_OscConfig+0x27c>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a0:	f7fb fe80 	bl	80030a4 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073a8:	f7fb fe7c 	bl	80030a4 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e173      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <HAL_RCC_OscConfig+0x274>)
 80073bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x234>
 80073c6:	e01b      	b.n	8007400 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <HAL_RCC_OscConfig+0x27c>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ce:	f7fb fe69 	bl	80030a4 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073d4:	e00e      	b.n	80073f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d6:	f7fb fe65 	bl	80030a4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d907      	bls.n	80073f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e15c      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
 80073e8:	40023800 	.word	0x40023800
 80073ec:	42470000 	.word	0x42470000
 80073f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073f4:	4b8a      	ldr	r3, [pc, #552]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80073f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ea      	bne.n	80073d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8097 	beq.w	800753c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007412:	4b83      	ldr	r3, [pc, #524]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10f      	bne.n	800743e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	4b7f      	ldr	r3, [pc, #508]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	4a7e      	ldr	r2, [pc, #504]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742c:	6413      	str	r3, [r2, #64]	; 0x40
 800742e:	4b7c      	ldr	r3, [pc, #496]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800743e:	4b79      	ldr	r3, [pc, #484]	; (8007624 <HAL_RCC_OscConfig+0x4b0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d118      	bne.n	800747c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800744a:	4b76      	ldr	r3, [pc, #472]	; (8007624 <HAL_RCC_OscConfig+0x4b0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a75      	ldr	r2, [pc, #468]	; (8007624 <HAL_RCC_OscConfig+0x4b0>)
 8007450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007456:	f7fb fe25 	bl	80030a4 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800745e:	f7fb fe21 	bl	80030a4 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e118      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007470:	4b6c      	ldr	r3, [pc, #432]	; (8007624 <HAL_RCC_OscConfig+0x4b0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d106      	bne.n	8007492 <HAL_RCC_OscConfig+0x31e>
 8007484:	4b66      	ldr	r3, [pc, #408]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	4a65      	ldr	r2, [pc, #404]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 800748a:	f043 0301 	orr.w	r3, r3, #1
 800748e:	6713      	str	r3, [r2, #112]	; 0x70
 8007490:	e01c      	b.n	80074cc <HAL_RCC_OscConfig+0x358>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b05      	cmp	r3, #5
 8007498:	d10c      	bne.n	80074b4 <HAL_RCC_OscConfig+0x340>
 800749a:	4b61      	ldr	r3, [pc, #388]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	4a60      	ldr	r2, [pc, #384]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074a0:	f043 0304 	orr.w	r3, r3, #4
 80074a4:	6713      	str	r3, [r2, #112]	; 0x70
 80074a6:	4b5e      	ldr	r3, [pc, #376]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	4a5d      	ldr	r2, [pc, #372]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	6713      	str	r3, [r2, #112]	; 0x70
 80074b2:	e00b      	b.n	80074cc <HAL_RCC_OscConfig+0x358>
 80074b4:	4b5a      	ldr	r3, [pc, #360]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	4a59      	ldr	r2, [pc, #356]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	6713      	str	r3, [r2, #112]	; 0x70
 80074c0:	4b57      	ldr	r3, [pc, #348]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c4:	4a56      	ldr	r2, [pc, #344]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074c6:	f023 0304 	bic.w	r3, r3, #4
 80074ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d015      	beq.n	8007500 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d4:	f7fb fde6 	bl	80030a4 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074da:	e00a      	b.n	80074f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074dc:	f7fb fde2 	bl	80030a4 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e0d7      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f2:	4b4b      	ldr	r3, [pc, #300]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0ee      	beq.n	80074dc <HAL_RCC_OscConfig+0x368>
 80074fe:	e014      	b.n	800752a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007500:	f7fb fdd0 	bl	80030a4 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007506:	e00a      	b.n	800751e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007508:	f7fb fdcc 	bl	80030a4 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	; 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e0c1      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800751e:	4b40      	ldr	r3, [pc, #256]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1ee      	bne.n	8007508 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d105      	bne.n	800753c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007530:	4b3b      	ldr	r3, [pc, #236]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	4a3a      	ldr	r2, [pc, #232]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800753a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80ad 	beq.w	80076a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007546:	4b36      	ldr	r3, [pc, #216]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 030c 	and.w	r3, r3, #12
 800754e:	2b08      	cmp	r3, #8
 8007550:	d060      	beq.n	8007614 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d145      	bne.n	80075e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755a:	4b33      	ldr	r3, [pc, #204]	; (8007628 <HAL_RCC_OscConfig+0x4b4>)
 800755c:	2200      	movs	r2, #0
 800755e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007560:	f7fb fda0 	bl	80030a4 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007568:	f7fb fd9c 	bl	80030a4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e093      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757a:	4b29      	ldr	r3, [pc, #164]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f0      	bne.n	8007568 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	019b      	lsls	r3, r3, #6
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	3b01      	subs	r3, #1
 80075a0:	041b      	lsls	r3, r3, #16
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	061b      	lsls	r3, r3, #24
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	071b      	lsls	r3, r3, #28
 80075b2:	491b      	ldr	r1, [pc, #108]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075b8:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <HAL_RCC_OscConfig+0x4b4>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075be:	f7fb fd71 	bl	80030a4 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c6:	f7fb fd6d 	bl	80030a4 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e064      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d8:	4b11      	ldr	r3, [pc, #68]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <HAL_RCC_OscConfig+0x452>
 80075e4:	e05c      	b.n	80076a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <HAL_RCC_OscConfig+0x4b4>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fb fd5a 	bl	80030a4 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fb fd56 	bl	80030a4 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e04d      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b06      	ldr	r3, [pc, #24]	; (8007620 <HAL_RCC_OscConfig+0x4ac>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x480>
 8007612:	e045      	b.n	80076a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d107      	bne.n	800762c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e040      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000
 8007628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800762c:	4b1f      	ldr	r3, [pc, #124]	; (80076ac <HAL_RCC_OscConfig+0x538>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d030      	beq.n	800769c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007644:	429a      	cmp	r2, r3
 8007646:	d129      	bne.n	800769c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007652:	429a      	cmp	r2, r3
 8007654:	d122      	bne.n	800769c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007664:	4293      	cmp	r3, r2
 8007666:	d119      	bne.n	800769c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	3b01      	subs	r3, #1
 8007676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007678:	429a      	cmp	r2, r3
 800767a:	d10f      	bne.n	800769c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d107      	bne.n	800769c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40023800 	.word	0x40023800

080076b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e022      	b.n	8007708 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fa fb2d 	bl	8001d34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2203      	movs	r2, #3
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f814 	bl	8007710 <HAL_SD_InitCard>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e00a      	b.n	8007708 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007710:	b5b0      	push	{r4, r5, r7, lr}
 8007712:	b08e      	sub	sp, #56	; 0x38
 8007714:	af04      	add	r7, sp, #16
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007718:	2300      	movs	r3, #0
 800771a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800772c:	2376      	movs	r3, #118	; 0x76
 800772e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681d      	ldr	r5, [r3, #0]
 8007734:	466c      	mov	r4, sp
 8007736:	f107 0314 	add.w	r3, r7, #20
 800773a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800773e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007742:	f107 0308 	add.w	r3, r7, #8
 8007746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007748:	4628      	mov	r0, r5
 800774a:	f002 fb35 	bl	8009db8 <SDIO_Init>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e04f      	b.n	8007800 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <HAL_SD_InitCard+0xf8>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f002 fb6d 	bl	8009e4a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <HAL_SD_InitCard+0xf8>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007776:	2002      	movs	r0, #2
 8007778:	f7fb fca0 	bl	80030bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 ff55 	bl	800862c <SD_PowerON>
 8007782:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00b      	beq.n	80077a2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e02e      	b.n	8007800 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fe74 	bl	8008490 <SD_InitCard>
 80077a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e01b      	b.n	8007800 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 fbcc 	bl	8009f6e <SDMMC_CmdBlockLength>
 80077d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00f      	beq.n	80077fe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a0a      	ldr	r2, [pc, #40]	; (800780c <HAL_SD_InitCard+0xfc>)
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bdb0      	pop	{r4, r5, r7, pc}
 8007808:	422580a0 	.word	0x422580a0
 800780c:	004005ff 	.word	0x004005ff

08007810 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08c      	sub	sp, #48	; 0x30
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e0be      	b.n	80079b6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	f040 80b7 	bne.w	80079b4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800784c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007856:	429a      	cmp	r2, r3
 8007858:	d907      	bls.n	800786a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e0a5      	b.n	80079b6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2203      	movs	r2, #3
 800786e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007888:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	4a4c      	ldr	r2, [pc, #304]	; (80079c0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	4a4b      	ldr	r2, [pc, #300]	; (80079c4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007898:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	2200      	movs	r2, #0
 80078a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3380      	adds	r3, #128	; 0x80
 80078d0:	4619      	mov	r1, r3
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	025b      	lsls	r3, r3, #9
 80078d8:	089b      	lsrs	r3, r3, #2
 80078da:	f7fb fda3 	bl	8003424 <HAL_DMA_Start_IT>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d017      	beq.n	8007914 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80078f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a33      	ldr	r2, [pc, #204]	; (80079c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e050      	b.n	80079b6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007914:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	2b01      	cmp	r3, #1
 8007920:	d002      	beq.n	8007928 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	025b      	lsls	r3, r3, #9
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	025b      	lsls	r3, r3, #9
 8007932:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007934:	2390      	movs	r3, #144	; 0x90
 8007936:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007938:	2302      	movs	r3, #2
 800793a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007940:	2301      	movs	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f107 0210 	add.w	r2, r7, #16
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f002 fae1 	bl	8009f16 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d90a      	bls.n	8007970 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2282      	movs	r2, #130	; 0x82
 800795e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007966:	4618      	mov	r0, r3
 8007968:	f002 fb45 	bl	8009ff6 <SDMMC_CmdReadMultiBlock>
 800796c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800796e:	e009      	b.n	8007984 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2281      	movs	r2, #129	; 0x81
 8007974:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797c:	4618      	mov	r0, r3
 800797e:	f002 fb18 	bl	8009fb2 <SDMMC_CmdReadSingleBlock>
 8007982:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d012      	beq.n	80079b0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a0e      	ldr	r2, [pc, #56]	; (80079c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	431a      	orrs	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e002      	b.n	80079b6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	e000      	b.n	80079b6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80079b4:	2302      	movs	r3, #2
  }
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3730      	adds	r7, #48	; 0x30
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	0800829f 	.word	0x0800829f
 80079c4:	08008311 	.word	0x08008311
 80079c8:	004005ff 	.word	0x004005ff
 80079cc:	4225858c 	.word	0x4225858c

080079d0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08c      	sub	sp, #48	; 0x30
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d107      	bne.n	80079f8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0c1      	b.n	8007b7c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f040 80ba 	bne.w	8007b7a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d907      	bls.n	8007a2a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e0a8      	b.n	8007b7c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 021a 	orr.w	r2, r2, #26
 8007a48:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	4a4d      	ldr	r2, [pc, #308]	; (8007b84 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	4a4c      	ldr	r2, [pc, #304]	; (8007b88 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007a58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	2200      	movs	r2, #0
 8007a60:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d002      	beq.n	8007a70 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	025b      	lsls	r3, r3, #9
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d90a      	bls.n	8007a8c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	22a0      	movs	r2, #160	; 0xa0
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a82:	4618      	mov	r0, r3
 8007a84:	f002 fafb 	bl	800a07e <SDMMC_CmdWriteMultiBlock>
 8007a88:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a8a:	e009      	b.n	8007aa0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2290      	movs	r2, #144	; 0x90
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f002 face 	bl	800a03a <SDMMC_CmdWriteSingleBlock>
 8007a9e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d012      	beq.n	8007acc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a38      	ldr	r2, [pc, #224]	; (8007b8c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e057      	b.n	8007b7c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007acc:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad6:	2240      	movs	r2, #64	; 0x40
 8007ad8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3380      	adds	r3, #128	; 0x80
 8007b02:	461a      	mov	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	025b      	lsls	r3, r3, #9
 8007b08:	089b      	lsrs	r3, r3, #2
 8007b0a:	f7fb fc8b 	bl	8003424 <HAL_DMA_Start_IT>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01a      	beq.n	8007b4a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 021a 	bic.w	r2, r2, #26
 8007b22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e018      	b.n	8007b7c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	025b      	lsls	r3, r3, #9
 8007b54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007b56:	2390      	movs	r3, #144	; 0x90
 8007b58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f107 0210 	add.w	r2, r7, #16
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 f9d0 	bl	8009f16 <SDIO_ConfigData>

      return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	; 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	08008275 	.word	0x08008275
 8007b88:	08008311 	.word	0x08008311
 8007b8c:	004005ff 	.word	0x004005ff
 8007b90:	4225858c 	.word	0x4225858c

08007b94 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_SD_IRQHandler+0x2e>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fdec 	bl	8008798 <SD_Read_IT>
 8007bc0:	e155      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 808f 	beq.w	8007cf0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007bea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007bee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0201 	bic.w	r2, r2, #1
 8007bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d039      	beq.n	8007c7e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <HAL_SD_IRQHandler+0x8a>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d011      	beq.n	8007c42 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 fa4e 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 8007c28:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f91f 	bl	8007e80 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <HAL_SD_IRQHandler+0xda>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f002 fe64 	bl	800a93c <HAL_SD_RxCpltCallback>
 8007c74:	e0fb      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f002 fe56 	bl	800a928 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c7c:	e0f7      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 80f2 	beq.w	8007e6e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d011      	beq.n	8007cb8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f002 fa13 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 8007c9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8e4 	bl	8007e80 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f040 80d5 	bne.w	8007e6e <HAL_SD_IRQHandler+0x2da>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f040 80cf 	bne.w	8007e6e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0208 	bic.w	r2, r2, #8
 8007cde:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f002 fe1d 	bl	800a928 <HAL_SD_TxCpltCallback>
}
 8007cee:	e0be      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d008      	beq.n	8007d10 <HAL_SD_IRQHandler+0x17c>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fd96 	bl	800883a <SD_Write_IT>
 8007d0e:	e0ae      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80a7 	beq.w	8007e6e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f043 0202 	orr.w	r2, r3, #2
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	f043 0208 	orr.w	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d66:	f043 0220 	orr.w	r2, r3, #32
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	f043 0210 	orr.w	r2, r3, #16
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007da0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f002 f98c 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 8007dac:	4602      	mov	r2, r0
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f855 	bl	8007e80 <HAL_SD_ErrorCallback>
}
 8007dd6:	e04a      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d045      	beq.n	8007e6e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <HAL_SD_IRQHandler+0x262>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfa:	4a1f      	ldr	r2, [pc, #124]	; (8007e78 <HAL_SD_IRQHandler+0x2e4>)
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fb fbd6 	bl	80035b4 <HAL_DMA_Abort_IT>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d02f      	beq.n	8007e6e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 face 	bl	80083b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007e18:	e029      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <HAL_SD_IRQHandler+0x29a>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d011      	beq.n	8007e52 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <HAL_SD_IRQHandler+0x2e8>)
 8007e34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fb fbba 	bl	80035b4 <HAL_DMA_Abort_IT>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d013      	beq.n	8007e6e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fae9 	bl	8008422 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007e50:	e00d      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f002 fd54 	bl	800a914 <HAL_SD_AbortCallback>
}
 8007e6c:	e7ff      	b.n	8007e6e <HAL_SD_IRQHandler+0x2da>
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	080083b5 	.word	0x080083b5
 8007e7c:	08008423 	.word	0x08008423

08007e80 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea2:	0f9b      	lsrs	r3, r3, #30
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eae:	0e9b      	lsrs	r3, r3, #26
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec0:	0e1b      	lsrs	r3, r3, #24
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed2:	0c1b      	lsrs	r3, r3, #16
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef4:	0d1b      	lsrs	r3, r3, #20
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f12:	0bdb      	lsrs	r3, r3, #15
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f24:	0b9b      	lsrs	r3, r3, #14
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f36:	0b5b      	lsrs	r3, r3, #13
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f48:	0b1b      	lsrs	r3, r3, #12
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d163      	bne.n	800802c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f68:	009a      	lsls	r2, r3, #2
 8007f6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f6e:	4013      	ands	r3, r2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f74:	0f92      	lsrs	r2, r2, #30
 8007f76:	431a      	orrs	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f80:	0edb      	lsrs	r3, r3, #27
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f92:	0e1b      	lsrs	r3, r3, #24
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa4:	0d5b      	lsrs	r3, r3, #21
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb6:	0c9b      	lsrs	r3, r3, #18
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	0bdb      	lsrs	r3, r3, #15
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	7e1b      	ldrb	r3, [r3, #24]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	3302      	adds	r3, #2
 8007fec:	2201      	movs	r2, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ff6:	fb03 f202 	mul.w	r2, r3, r2
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	7a1b      	ldrb	r3, [r3, #8]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	2201      	movs	r2, #1
 800800a:	409a      	lsls	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008018:	0a52      	lsrs	r2, r2, #9
 800801a:	fb03 f202 	mul.w	r2, r3, r2
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008028:	661a      	str	r2, [r3, #96]	; 0x60
 800802a:	e031      	b.n	8008090 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008030:	2b01      	cmp	r3, #1
 8008032:	d11d      	bne.n	8008070 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	431a      	orrs	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	3301      	adds	r3, #1
 8008050:	029a      	lsls	r2, r3, #10
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008064:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	661a      	str	r2, [r3, #96]	; 0x60
 800806e:	e00f      	b.n	8008090 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a58      	ldr	r2, [pc, #352]	; (80081d8 <HAL_SD_GetCardCSD+0x344>)
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e09d      	b.n	80081cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008094:	0b9b      	lsrs	r3, r3, #14
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	b2da      	uxtb	r2, r3
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a6:	09db      	lsrs	r3, r3, #7
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c8:	0fdb      	lsrs	r3, r3, #31
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	0f5b      	lsrs	r3, r3, #29
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	0e9b      	lsrs	r3, r3, #26
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f8:	0d9b      	lsrs	r3, r3, #22
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	b2da      	uxtb	r2, r3
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810a:	0d5b      	lsrs	r3, r3, #21
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	b2da      	uxtb	r2, r3
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	0c1b      	lsrs	r3, r3, #16
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	0bdb      	lsrs	r3, r3, #15
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	0b9b      	lsrs	r3, r3, #14
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	0b5b      	lsrs	r3, r3, #13
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	0b1b      	lsrs	r3, r3, #12
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	b2da      	uxtb	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	0a9b      	lsrs	r3, r3, #10
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	b2da      	uxtb	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	004005ff 	.word	0x004005ff

080081dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa7e 	bl	8008748 <SD_SendStatus>
 800824c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	0a5b      	lsrs	r3, r3, #9
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800826a:	693b      	ldr	r3, [r7, #16]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008290:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	2b82      	cmp	r3, #130	; 0x82
 80082b2:	d111      	bne.n	80082d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 ff03 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 80082be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d008      	beq.n	80082d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fdd4 	bl	8007e80 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0208 	bic.w	r2, r2, #8
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f002 fb1b 	bl	800a93c <HAL_SD_RxCpltCallback>
#endif
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fb fb02 	bl	8003928 <HAL_DMA_GetError>
 8008324:	4603      	mov	r3, r0
 8008326:	2b02      	cmp	r3, #2
 8008328:	d03e      	beq.n	80083a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008330:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008338:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d002      	beq.n	8008346 <SD_DMAError+0x36>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d12d      	bne.n	80083a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a19      	ldr	r2, [pc, #100]	; (80083b0 <SD_DMAError+0xa0>)
 800834c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800835c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800836a:	6978      	ldr	r0, [r7, #20]
 800836c:	f7ff ff62 	bl	8008234 <HAL_SD_GetCardState>
 8008370:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b06      	cmp	r3, #6
 8008376:	d002      	beq.n	800837e <SD_DMAError+0x6e>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b05      	cmp	r3, #5
 800837c:	d10a      	bne.n	8008394 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f001 fe9e 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 8008388:	4602      	mov	r2, r0
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	431a      	orrs	r2, r3
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2200      	movs	r2, #0
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80083a2:	6978      	ldr	r0, [r7, #20]
 80083a4:	f7ff fd6c 	bl	8007e80 <HAL_SD_ErrorCallback>
#endif
  }
}
 80083a8:	bf00      	nop
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	004005ff 	.word	0x004005ff

080083b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff ff31 	bl	8008234 <HAL_SD_GetCardState>
 80083d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b06      	cmp	r3, #6
 80083e6:	d002      	beq.n	80083ee <SD_DMATxAbort+0x3a>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d10a      	bne.n	8008404 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fe66 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 80083f8:	4602      	mov	r2, r0
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	431a      	orrs	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f002 fa81 	bl	800a914 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008412:	e002      	b.n	800841a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff fd33 	bl	8007e80 <HAL_SD_ErrorCallback>
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f240 523a 	movw	r2, #1338	; 0x53a
 8008438:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fefa 	bl	8008234 <HAL_SD_GetCardState>
 8008440:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b06      	cmp	r3, #6
 8008454:	d002      	beq.n	800845c <SD_DMARxAbort+0x3a>
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b05      	cmp	r3, #5
 800845a:	d10a      	bne.n	8008472 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f001 fe2f 	bl	800a0c4 <SDMMC_CmdStopTransfer>
 8008466:	4602      	mov	r2, r0
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	431a      	orrs	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d103      	bne.n	8008482 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f002 fa4a 	bl	800a914 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008480:	e002      	b.n	8008488 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f7ff fcfc 	bl	8007e80 <HAL_SD_ErrorCallback>
}
 8008488:	bf00      	nop
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008490:	b5b0      	push	{r4, r5, r7, lr}
 8008492:	b094      	sub	sp, #80	; 0x50
 8008494:	af04      	add	r7, sp, #16
 8008496:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008498:	2301      	movs	r3, #1
 800849a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fce0 	bl	8009e66 <SDIO_GetPowerState>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084b0:	e0b8      	b.n	8008624 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d02f      	beq.n	800851a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 fec7 	bl	800a252 <SDMMC_CmdSendCID>
 80084c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	e0a9      	b.n	8008624 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fd0a 	bl	8009ef0 <SDIO_GetResponse>
 80084dc:	4602      	mov	r2, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2104      	movs	r1, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fd01 	bl	8009ef0 <SDIO_GetResponse>
 80084ee:	4602      	mov	r2, r0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2108      	movs	r1, #8
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fcf8 	bl	8009ef0 <SDIO_GetResponse>
 8008500:	4602      	mov	r2, r0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	210c      	movs	r1, #12
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fcef 	bl	8009ef0 <SDIO_GetResponse>
 8008512:	4602      	mov	r2, r0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851e:	2b03      	cmp	r3, #3
 8008520:	d00d      	beq.n	800853e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f107 020e 	add.w	r2, r7, #14
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f001 fecd 	bl	800a2cc <SDMMC_CmdSetRelAdd>
 8008532:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <SD_InitCard+0xae>
    {
      return errorstate;
 800853a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853c:	e072      	b.n	8008624 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008542:	2b03      	cmp	r3, #3
 8008544:	d036      	beq.n	80085b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008546:	89fb      	ldrh	r3, [r7, #14]
 8008548:	461a      	mov	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008556:	041b      	lsls	r3, r3, #16
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f001 fe97 	bl	800a28e <SDMMC_CmdSendCSD>
 8008560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856a:	e05b      	b.n	8008624 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fcbc 	bl	8009ef0 <SDIO_GetResponse>
 8008578:	4602      	mov	r2, r0
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2104      	movs	r1, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f001 fcb3 	bl	8009ef0 <SDIO_GetResponse>
 800858a:	4602      	mov	r2, r0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2108      	movs	r1, #8
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fcaa 	bl	8009ef0 <SDIO_GetResponse>
 800859c:	4602      	mov	r2, r0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	210c      	movs	r1, #12
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fca1 	bl	8009ef0 <SDIO_GetResponse>
 80085ae:	4602      	mov	r2, r0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2104      	movs	r1, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fc98 	bl	8009ef0 <SDIO_GetResponse>
 80085c0:	4603      	mov	r3, r0
 80085c2:	0d1a      	lsrs	r2, r3, #20
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fc60 	bl	8007e94 <HAL_SD_GetCardCSD>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085de:	e021      	b.n	8008624 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	2200      	movs	r2, #0
 80085ec:	461c      	mov	r4, r3
 80085ee:	4615      	mov	r5, r2
 80085f0:	4622      	mov	r2, r4
 80085f2:	462b      	mov	r3, r5
 80085f4:	4608      	mov	r0, r1
 80085f6:	f001 fd87 	bl	800a108 <SDMMC_CmdSelDesel>
 80085fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <SD_InitCard+0x176>
  {
    return errorstate;
 8008602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008604:	e00e      	b.n	8008624 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681d      	ldr	r5, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	466c      	mov	r4, sp
 800860e:	f103 0210 	add.w	r2, r3, #16
 8008612:	ca07      	ldmia	r2, {r0, r1, r2}
 8008614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008618:	3304      	adds	r3, #4
 800861a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800861c:	4628      	mov	r0, r5
 800861e:	f001 fbcb 	bl	8009db8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3740      	adds	r7, #64	; 0x40
 8008628:	46bd      	mov	sp, r7
 800862a:	bdb0      	pop	{r4, r5, r7, pc}

0800862c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	2300      	movs	r3, #0
 800863e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f001 fd82 	bl	800a14e <SDMMC_CmdGoIdleState>
 800864a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	e072      	b.n	800873c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fd95 	bl	800a18a <SDMMC_CmdOperCond>
 8008660:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00d      	beq.n	8008684 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f001 fd6b 	bl	800a14e <SDMMC_CmdGoIdleState>
 8008678:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	e05b      	b.n	800873c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868e:	2b01      	cmp	r3, #1
 8008690:	d137      	bne.n	8008702 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f001 fd95 	bl	800a1c8 <SDMMC_CmdAppCommand>
 800869e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d02d      	beq.n	8008702 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086aa:	e047      	b.n	800873c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 fd88 	bl	800a1c8 <SDMMC_CmdAppCommand>
 80086b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	e03b      	b.n	800873c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	491e      	ldr	r1, [pc, #120]	; (8008744 <SD_PowerON+0x118>)
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fd9e 	bl	800a20c <SDMMC_CmdAppOperCommand>
 80086d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086dc:	e02e      	b.n	800873c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2100      	movs	r1, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 fc03 	bl	8009ef0 <SDIO_GetResponse>
 80086ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	0fdb      	lsrs	r3, r3, #31
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <SD_PowerON+0xcc>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <SD_PowerON+0xce>
 80086f8:	2300      	movs	r3, #0
 80086fa:	613b      	str	r3, [r7, #16]

    count++;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	3301      	adds	r3, #1
 8008700:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008708:	4293      	cmp	r3, r2
 800870a:	d802      	bhi.n	8008712 <SD_PowerON+0xe6>
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0cc      	beq.n	80086ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008718:	4293      	cmp	r3, r2
 800871a:	d902      	bls.n	8008722 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800871c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008720:	e00c      	b.n	800873c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	645a      	str	r2, [r3, #68]	; 0x44
 8008732:	e002      	b.n	800873a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	c1100000 	.word	0xc1100000

08008748 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800875c:	e018      	b.n	8008790 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f001 fdcf 	bl	800a30e <SDMMC_CmdSendStatus>
 8008770:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	e009      	b.n	8008790 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2100      	movs	r1, #0
 8008782:	4618      	mov	r0, r3
 8008784:	f001 fbb4 	bl	8009ef0 <SDIO_GetResponse>
 8008788:	4602      	mov	r2, r0
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d03f      	beq.n	8008832 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	e033      	b.n	8008820 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fb26 	bl	8009e0e <SDIO_ReadFIFO>
 80087c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	0c1b      	lsrs	r3, r3, #16
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	3b01      	subs	r3, #1
 8008802:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	0e1b      	lsrs	r3, r3, #24
 8008808:	b2da      	uxtb	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	3b01      	subs	r3, #1
 8008818:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	3301      	adds	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2b07      	cmp	r3, #7
 8008824:	d9c8      	bls.n	80087b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008832:	bf00      	nop
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d043      	beq.n	80088dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e037      	b.n	80088ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	3b01      	subs	r3, #1
 800886a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	021a      	lsls	r2, r3, #8
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	4313      	orrs	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3b01      	subs	r3, #1
 8008882:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	041a      	lsls	r2, r3, #16
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4313      	orrs	r3, r2
 800888e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	3b01      	subs	r3, #1
 800889a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	061a      	lsls	r2, r3, #24
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f107 0208 	add.w	r2, r7, #8
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fab2 	bl	8009e28 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	3301      	adds	r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b07      	cmp	r3, #7
 80088ce:	d9c4      	bls.n	800885a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e041      	b.n	800897a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f839 	bl	8008982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f000 f9d8 	bl	8008cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d001      	beq.n	80089b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e04e      	b.n	8008a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a23      	ldr	r2, [pc, #140]	; (8008a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d022      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089da:	d01d      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d018      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a1e      	ldr	r2, [pc, #120]	; (8008a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d013      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1c      	ldr	r2, [pc, #112]	; (8008a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00e      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d009      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a19      	ldr	r2, [pc, #100]	; (8008a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x80>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a18      	ldr	r2, [pc, #96]	; (8008a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d111      	bne.n	8008a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b06      	cmp	r3, #6
 8008a28:	d010      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0201 	orr.w	r2, r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3a:	e007      	b.n	8008a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40000400 	.word	0x40000400
 8008a64:	40000800 	.word	0x40000800
 8008a68:	40000c00 	.word	0x40000c00
 8008a6c:	40010400 	.word	0x40010400
 8008a70:	40014000 	.word	0x40014000
 8008a74:	40001800 	.word	0x40001800

08008a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0202 	mvn.w	r2, #2
 8008aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f8ee 	bl	8008c9c <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f8e0 	bl	8008c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f8f1 	bl	8008cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0204 	mvn.w	r2, #4
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f8c4 	bl	8008c9c <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f8b6 	bl	8008c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8c7 	bl	8008cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	d122      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d11b      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0208 	mvn.w	r2, #8
 8008b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2204      	movs	r2, #4
 8008b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f89a 	bl	8008c9c <HAL_TIM_IC_CaptureCallback>
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f88c 	bl	8008c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f89d 	bl	8008cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d122      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d11b      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0210 	mvn.w	r2, #16
 8008ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f870 	bl	8008c9c <HAL_TIM_IC_CaptureCallback>
 8008bbc:	e005      	b.n	8008bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f862 	bl	8008c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f873 	bl	8008cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d10e      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d107      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f06f 0201 	mvn.w	r2, #1
 8008bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7f9 f864 	bl	8001cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d10e      	bne.n	8008c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c14:	2b80      	cmp	r3, #128	; 0x80
 8008c16:	d107      	bne.n	8008c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f902 	bl	8008e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d10e      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c40:	2b40      	cmp	r3, #64	; 0x40
 8008c42:	d107      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f838 	bl	8008cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d10e      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	d107      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0220 	mvn.w	r2, #32
 8008c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8cc 	bl	8008e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a40      	ldr	r2, [pc, #256]	; (8008dec <TIM_Base_SetConfig+0x114>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf6:	d00f      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a3d      	ldr	r2, [pc, #244]	; (8008df0 <TIM_Base_SetConfig+0x118>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00b      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a3c      	ldr	r2, [pc, #240]	; (8008df4 <TIM_Base_SetConfig+0x11c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d007      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a3b      	ldr	r2, [pc, #236]	; (8008df8 <TIM_Base_SetConfig+0x120>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d003      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a3a      	ldr	r2, [pc, #232]	; (8008dfc <TIM_Base_SetConfig+0x124>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d108      	bne.n	8008d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2f      	ldr	r2, [pc, #188]	; (8008dec <TIM_Base_SetConfig+0x114>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d02b      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d38:	d027      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a2c      	ldr	r2, [pc, #176]	; (8008df0 <TIM_Base_SetConfig+0x118>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d023      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a2b      	ldr	r2, [pc, #172]	; (8008df4 <TIM_Base_SetConfig+0x11c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d01f      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <TIM_Base_SetConfig+0x120>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d01b      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a29      	ldr	r2, [pc, #164]	; (8008dfc <TIM_Base_SetConfig+0x124>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d017      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a28      	ldr	r2, [pc, #160]	; (8008e00 <TIM_Base_SetConfig+0x128>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a27      	ldr	r2, [pc, #156]	; (8008e04 <TIM_Base_SetConfig+0x12c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00f      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a26      	ldr	r2, [pc, #152]	; (8008e08 <TIM_Base_SetConfig+0x130>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d00b      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a25      	ldr	r2, [pc, #148]	; (8008e0c <TIM_Base_SetConfig+0x134>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d007      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a24      	ldr	r2, [pc, #144]	; (8008e10 <TIM_Base_SetConfig+0x138>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d003      	beq.n	8008d8a <TIM_Base_SetConfig+0xb2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a23      	ldr	r2, [pc, #140]	; (8008e14 <TIM_Base_SetConfig+0x13c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d108      	bne.n	8008d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <TIM_Base_SetConfig+0x114>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_Base_SetConfig+0xf8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <TIM_Base_SetConfig+0x124>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d103      	bne.n	8008dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	615a      	str	r2, [r3, #20]
}
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800
 8008e0c:	40001800 	.word	0x40001800
 8008e10:	40001c00 	.word	0x40001c00
 8008e14:	40002000 	.word	0x40002000

08008e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e03f      	b.n	8008ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7f9 ff52 	bl	8002d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2224      	movs	r2, #36	; 0x24
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68da      	ldr	r2, [r3, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fd23 	bl	80098d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	691a      	ldr	r2, [r3, #16]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695a      	ldr	r2, [r3, #20]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d130      	bne.n	8008f56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <HAL_UART_Transmit_IT+0x26>
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e029      	b.n	8008f58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_UART_Transmit_IT+0x38>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e022      	b.n	8008f58 <HAL_UART_Transmit_IT+0x7e>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	88fa      	ldrh	r2, [r7, #6]
 8008f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	88fa      	ldrh	r2, [r7, #6]
 8008f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2221      	movs	r2, #33	; 0x21
 8008f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e000      	b.n	8008f58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008f56:	2302      	movs	r3, #2
  }
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d11d      	bne.n	8008fba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <HAL_UART_Receive_IT+0x26>
 8008f84:	88fb      	ldrh	r3, [r7, #6]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e016      	b.n	8008fbc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_UART_Receive_IT+0x38>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e00f      	b.n	8008fbc <HAL_UART_Receive_IT+0x58>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	461a      	mov	r2, r3
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 fab5 	bl	8009520 <UART_Start_Receive_IT>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	e000      	b.n	8008fbc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b0ba      	sub	sp, #232	; 0xe8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10f      	bne.n	800902a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <HAL_UART_IRQHandler+0x66>
 8009016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fb99 	bl	800975a <UART_Receive_IT>
      return;
 8009028:	e256      	b.n	80094d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800902a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 80de 	beq.w	80091f0 <HAL_UART_IRQHandler+0x22c>
 8009034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b00      	cmp	r3, #0
 800903e:	d106      	bne.n	800904e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009044:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80d1 	beq.w	80091f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800904e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <HAL_UART_IRQHandler+0xae>
 800905a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	f043 0201 	orr.w	r2, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <HAL_UART_IRQHandler+0xd2>
 800907e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f043 0202 	orr.w	r2, r3, #2
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <HAL_UART_IRQHandler+0xf6>
 80090a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f043 0204 	orr.w	r2, r3, #4
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d011      	beq.n	80090ea <HAL_UART_IRQHandler+0x126>
 80090c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	f043 0208 	orr.w	r2, r3, #8
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 81ed 	beq.w	80094ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <HAL_UART_IRQHandler+0x14e>
 8009100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fb24 	bl	800975a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b40      	cmp	r3, #64	; 0x40
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d103      	bne.n	800913e <HAL_UART_IRQHandler+0x17a>
 8009136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d04f      	beq.n	80091de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa2c 	bl	800959c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d141      	bne.n	80091d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3314      	adds	r3, #20
 8009158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800916c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3314      	adds	r3, #20
 800917a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800917e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800918a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1d9      	bne.n	8009152 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d013      	beq.n	80091ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	4a7d      	ldr	r2, [pc, #500]	; (80093a0 <HAL_UART_IRQHandler+0x3dc>)
 80091ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fa f9fe 	bl	80035b4 <HAL_DMA_Abort_IT>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d016      	beq.n	80091ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091cc:	e00e      	b.n	80091ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f990 	bl	80094f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d4:	e00a      	b.n	80091ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f98c 	bl	80094f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	e006      	b.n	80091ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f988 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80091ea:	e170      	b.n	80094ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ec:	bf00      	nop
    return;
 80091ee:	e16e      	b.n	80094ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	f040 814a 	bne.w	800948e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fe:	f003 0310 	and.w	r3, r3, #16
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8143 	beq.w	800948e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 813c 	beq.w	800948e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60bb      	str	r3, [r7, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	60bb      	str	r3, [r7, #8]
 800922a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	f040 80b4 	bne.w	80093a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 8140 	beq.w	80094d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800925a:	429a      	cmp	r2, r3
 800925c:	f080 8139 	bcs.w	80094d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009266:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009272:	f000 8088 	beq.w	8009386 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	330c      	adds	r3, #12
 800927c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800928c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	330c      	adds	r3, #12
 800929e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1d9      	bne.n	8009276 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3314      	adds	r3, #20
 80092c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3314      	adds	r3, #20
 80092e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80092e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80092ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e1      	bne.n	80092c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3314      	adds	r3, #20
 8009304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800930e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3314      	adds	r3, #20
 800931e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e3      	bne.n	80092fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	330c      	adds	r3, #12
 800934a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009356:	f023 0310 	bic.w	r3, r3, #16
 800935a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	330c      	adds	r3, #12
 8009364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009368:	65ba      	str	r2, [r7, #88]	; 0x58
 800936a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800936e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e3      	bne.n	8009344 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	4618      	mov	r0, r3
 8009382:	f7fa f8a7 	bl	80034d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800938e:	b29b      	uxth	r3, r3
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	b29b      	uxth	r3, r3
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8b6 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800939c:	e099      	b.n	80094d2 <HAL_UART_IRQHandler+0x50e>
 800939e:	bf00      	nop
 80093a0:	08009663 	.word	0x08009663
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 808b 	beq.w	80094d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80093c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8086 	beq.w	80094d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	330c      	adds	r3, #12
 80093d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	330c      	adds	r3, #12
 80093ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80093ee:	647a      	str	r2, [r7, #68]	; 0x44
 80093f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e3      	bne.n	80093ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3314      	adds	r3, #20
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	623b      	str	r3, [r7, #32]
   return(result);
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	f023 0301 	bic.w	r3, r3, #1
 8009418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3314      	adds	r3, #20
 8009422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009426:	633a      	str	r2, [r7, #48]	; 0x30
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800942c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e3      	bne.n	8009402 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	330c      	adds	r3, #12
 800944e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	60fb      	str	r3, [r7, #12]
   return(result);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0310 	bic.w	r3, r3, #16
 800945e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800946c:	61fa      	str	r2, [r7, #28]
 800946e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	69b9      	ldr	r1, [r7, #24]
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	617b      	str	r3, [r7, #20]
   return(result);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e3      	bne.n	8009448 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f83e 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800948c:	e023      	b.n	80094d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <HAL_UART_IRQHandler+0x4ea>
 800949a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f8ef 	bl	800968a <UART_Transmit_IT>
    return;
 80094ac:	e014      	b.n	80094d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00e      	beq.n	80094d8 <HAL_UART_IRQHandler+0x514>
 80094ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d008      	beq.n	80094d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f92f 	bl	800972a <UART_EndTransmit_IT>
    return;
 80094cc:	e004      	b.n	80094d8 <HAL_UART_IRQHandler+0x514>
    return;
 80094ce:	bf00      	nop
 80094d0:	e002      	b.n	80094d8 <HAL_UART_IRQHandler+0x514>
      return;
 80094d2:	bf00      	nop
 80094d4:	e000      	b.n	80094d8 <HAL_UART_IRQHandler+0x514>
      return;
 80094d6:	bf00      	nop
  }
}
 80094d8:	37e8      	adds	r7, #232	; 0xe8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop

080094e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	88fa      	ldrh	r2, [r7, #6]
 800953e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2222      	movs	r2, #34	; 0x22
 800954a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800956c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695a      	ldr	r2, [r3, #20]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f042 0201 	orr.w	r2, r2, #1
 800957c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f042 0220 	orr.w	r2, r2, #32
 800958c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b095      	sub	sp, #84	; 0x54
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	330c      	adds	r3, #12
 80095c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c4:	643a      	str	r2, [r7, #64]	; 0x40
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e5      	bne.n	80095a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3314      	adds	r3, #20
 80095de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	f023 0301 	bic.w	r3, r3, #1
 80095ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3314      	adds	r3, #20
 80095f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e5      	bne.n	80095d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009610:	2b01      	cmp	r3, #1
 8009612:	d119      	bne.n	8009648 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	330c      	adds	r3, #12
 800961a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	60bb      	str	r3, [r7, #8]
   return(result);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f023 0310 	bic.w	r3, r3, #16
 800962a:	647b      	str	r3, [r7, #68]	; 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	330c      	adds	r3, #12
 8009632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009634:	61ba      	str	r2, [r7, #24]
 8009636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6979      	ldr	r1, [r7, #20]
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	613b      	str	r3, [r7, #16]
   return(result);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e5      	bne.n	8009614 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009656:	bf00      	nop
 8009658:	3754      	adds	r7, #84	; 0x54
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff ff39 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b21      	cmp	r3, #33	; 0x21
 800969c:	d13e      	bne.n	800971c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a6:	d114      	bne.n	80096d2 <UART_Transmit_IT+0x48>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d110      	bne.n	80096d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	1c9a      	adds	r2, r3, #2
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	621a      	str	r2, [r3, #32]
 80096d0:	e008      	b.n	80096e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	1c59      	adds	r1, r3, #1
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6211      	str	r1, [r2, #32]
 80096dc:	781a      	ldrb	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4619      	mov	r1, r3
 80096f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10f      	bne.n	8009718 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009706:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009716:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	e000      	b.n	800971e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800971c:	2302      	movs	r3, #2
  }
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009740:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fec8 	bl	80094e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b08c      	sub	sp, #48	; 0x30
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b22      	cmp	r3, #34	; 0x22
 800976c:	f040 80ab 	bne.w	80098c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009778:	d117      	bne.n	80097aa <UART_Receive_IT+0x50>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d113      	bne.n	80097aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009798:	b29a      	uxth	r2, r3
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	1c9a      	adds	r2, r3, #2
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	629a      	str	r2, [r3, #40]	; 0x28
 80097a8:	e026      	b.n	80097f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097bc:	d007      	beq.n	80097ce <UART_Receive_IT+0x74>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10a      	bne.n	80097dc <UART_Receive_IT+0x82>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e008      	b.n	80097ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4619      	mov	r1, r3
 8009806:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009808:	2b00      	cmp	r3, #0
 800980a:	d15a      	bne.n	80098c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0220 	bic.w	r2, r2, #32
 800981a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800982a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695a      	ldr	r2, [r3, #20]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	2b01      	cmp	r3, #1
 800984a:	d135      	bne.n	80098b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	613b      	str	r3, [r7, #16]
   return(result);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f023 0310 	bic.w	r3, r3, #16
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	330c      	adds	r3, #12
 8009870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009872:	623a      	str	r2, [r7, #32]
 8009874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	69f9      	ldr	r1, [r7, #28]
 8009878:	6a3a      	ldr	r2, [r7, #32]
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b10      	cmp	r3, #16
 8009892:	d10a      	bne.n	80098aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fe29 	bl	8009508 <HAL_UARTEx_RxEventCallback>
 80098b6:	e002      	b.n	80098be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7f8 f8ab 	bl	8001a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e002      	b.n	80098c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e000      	b.n	80098c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
  }
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3730      	adds	r7, #48	; 0x30
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d4:	b0c0      	sub	sp, #256	; 0x100
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ec:	68d9      	ldr	r1, [r3, #12]
 80098ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	ea40 0301 	orr.w	r3, r0, r1
 80098f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	431a      	orrs	r2, r3
 8009908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	431a      	orrs	r2, r3
 8009910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	4313      	orrs	r3, r2
 8009918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800991c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009928:	f021 010c 	bic.w	r1, r1, #12
 800992c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009936:	430b      	orrs	r3, r1
 8009938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800993a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800994a:	6999      	ldr	r1, [r3, #24]
 800994c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	ea40 0301 	orr.w	r3, r0, r1
 8009956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b8f      	ldr	r3, [pc, #572]	; (8009b9c <UART_SetConfig+0x2cc>)
 8009960:	429a      	cmp	r2, r3
 8009962:	d005      	beq.n	8009970 <UART_SetConfig+0xa0>
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b8d      	ldr	r3, [pc, #564]	; (8009ba0 <UART_SetConfig+0x2d0>)
 800996c:	429a      	cmp	r2, r3
 800996e:	d104      	bne.n	800997a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009970:	f7fc fee6 	bl	8006740 <HAL_RCC_GetPCLK2Freq>
 8009974:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009978:	e003      	b.n	8009982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800997a:	f7fc fecd 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 800997e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800998c:	f040 810c 	bne.w	8009ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009994:	2200      	movs	r2, #0
 8009996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800999a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800999e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099a2:	4622      	mov	r2, r4
 80099a4:	462b      	mov	r3, r5
 80099a6:	1891      	adds	r1, r2, r2
 80099a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80099aa:	415b      	adcs	r3, r3
 80099ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099b2:	4621      	mov	r1, r4
 80099b4:	eb12 0801 	adds.w	r8, r2, r1
 80099b8:	4629      	mov	r1, r5
 80099ba:	eb43 0901 	adc.w	r9, r3, r1
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	f04f 0300 	mov.w	r3, #0
 80099c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099d2:	4690      	mov	r8, r2
 80099d4:	4699      	mov	r9, r3
 80099d6:	4623      	mov	r3, r4
 80099d8:	eb18 0303 	adds.w	r3, r8, r3
 80099dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099e0:	462b      	mov	r3, r5
 80099e2:	eb49 0303 	adc.w	r3, r9, r3
 80099e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80099fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80099fe:	460b      	mov	r3, r1
 8009a00:	18db      	adds	r3, r3, r3
 8009a02:	653b      	str	r3, [r7, #80]	; 0x50
 8009a04:	4613      	mov	r3, r2
 8009a06:	eb42 0303 	adc.w	r3, r2, r3
 8009a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a14:	f7f7 f958 	bl	8000cc8 <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4b61      	ldr	r3, [pc, #388]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a22:	095b      	lsrs	r3, r3, #5
 8009a24:	011c      	lsls	r4, r3, #4
 8009a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a38:	4642      	mov	r2, r8
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	1891      	adds	r1, r2, r2
 8009a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a40:	415b      	adcs	r3, r3
 8009a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a48:	4641      	mov	r1, r8
 8009a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8009a4e:	4649      	mov	r1, r9
 8009a50:	eb43 0b01 	adc.w	fp, r3, r1
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a68:	4692      	mov	sl, r2
 8009a6a:	469b      	mov	fp, r3
 8009a6c:	4643      	mov	r3, r8
 8009a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8009a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a76:	464b      	mov	r3, r9
 8009a78:	eb4b 0303 	adc.w	r3, fp, r3
 8009a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a94:	460b      	mov	r3, r1
 8009a96:	18db      	adds	r3, r3, r3
 8009a98:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	eb42 0303 	adc.w	r3, r2, r3
 8009aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009aaa:	f7f7 f90d 	bl	8000cc8 <__aeabi_uldivmod>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4b3b      	ldr	r3, [pc, #236]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	2264      	movs	r2, #100	; 0x64
 8009abe:	fb02 f303 	mul.w	r3, r2, r3
 8009ac2:	1acb      	subs	r3, r1, r3
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009aca:	4b36      	ldr	r3, [pc, #216]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009acc:	fba3 2302 	umull	r2, r3, r3, r2
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ad8:	441c      	add	r4, r3
 8009ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009aec:	4642      	mov	r2, r8
 8009aee:	464b      	mov	r3, r9
 8009af0:	1891      	adds	r1, r2, r2
 8009af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009af4:	415b      	adcs	r3, r3
 8009af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009afc:	4641      	mov	r1, r8
 8009afe:	1851      	adds	r1, r2, r1
 8009b00:	6339      	str	r1, [r7, #48]	; 0x30
 8009b02:	4649      	mov	r1, r9
 8009b04:	414b      	adcs	r3, r1
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b14:	4659      	mov	r1, fp
 8009b16:	00cb      	lsls	r3, r1, #3
 8009b18:	4651      	mov	r1, sl
 8009b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b1e:	4651      	mov	r1, sl
 8009b20:	00ca      	lsls	r2, r1, #3
 8009b22:	4610      	mov	r0, r2
 8009b24:	4619      	mov	r1, r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	4642      	mov	r2, r8
 8009b2a:	189b      	adds	r3, r3, r2
 8009b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b30:	464b      	mov	r3, r9
 8009b32:	460a      	mov	r2, r1
 8009b34:	eb42 0303 	adc.w	r3, r2, r3
 8009b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b50:	460b      	mov	r3, r1
 8009b52:	18db      	adds	r3, r3, r3
 8009b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b56:	4613      	mov	r3, r2
 8009b58:	eb42 0303 	adc.w	r3, r2, r3
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009b66:	f7f7 f8af 	bl	8000cc8 <__aeabi_uldivmod>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009b70:	fba3 1302 	umull	r1, r3, r3, r2
 8009b74:	095b      	lsrs	r3, r3, #5
 8009b76:	2164      	movs	r1, #100	; 0x64
 8009b78:	fb01 f303 	mul.w	r3, r1, r3
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	3332      	adds	r3, #50	; 0x32
 8009b82:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009b84:	fba2 2303 	umull	r2, r3, r2, r3
 8009b88:	095b      	lsrs	r3, r3, #5
 8009b8a:	f003 0207 	and.w	r2, r3, #7
 8009b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4422      	add	r2, r4
 8009b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b98:	e106      	b.n	8009da8 <UART_SetConfig+0x4d8>
 8009b9a:	bf00      	nop
 8009b9c:	40011000 	.word	0x40011000
 8009ba0:	40011400 	.word	0x40011400
 8009ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009bba:	4642      	mov	r2, r8
 8009bbc:	464b      	mov	r3, r9
 8009bbe:	1891      	adds	r1, r2, r2
 8009bc0:	6239      	str	r1, [r7, #32]
 8009bc2:	415b      	adcs	r3, r3
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bca:	4641      	mov	r1, r8
 8009bcc:	1854      	adds	r4, r2, r1
 8009bce:	4649      	mov	r1, r9
 8009bd0:	eb43 0501 	adc.w	r5, r3, r1
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	00eb      	lsls	r3, r5, #3
 8009bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009be2:	00e2      	lsls	r2, r4, #3
 8009be4:	4614      	mov	r4, r2
 8009be6:	461d      	mov	r5, r3
 8009be8:	4643      	mov	r3, r8
 8009bea:	18e3      	adds	r3, r4, r3
 8009bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	eb45 0303 	adc.w	r3, r5, r3
 8009bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c0a:	f04f 0200 	mov.w	r2, #0
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c16:	4629      	mov	r1, r5
 8009c18:	008b      	lsls	r3, r1, #2
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c20:	4621      	mov	r1, r4
 8009c22:	008a      	lsls	r2, r1, #2
 8009c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c28:	f7f7 f84e 	bl	8000cc8 <__aeabi_uldivmod>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4b60      	ldr	r3, [pc, #384]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009c32:	fba3 2302 	umull	r2, r3, r3, r2
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	011c      	lsls	r4, r3, #4
 8009c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	464b      	mov	r3, r9
 8009c50:	1891      	adds	r1, r2, r2
 8009c52:	61b9      	str	r1, [r7, #24]
 8009c54:	415b      	adcs	r3, r3
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	1851      	adds	r1, r2, r1
 8009c60:	6139      	str	r1, [r7, #16]
 8009c62:	4649      	mov	r1, r9
 8009c64:	414b      	adcs	r3, r1
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	f04f 0200 	mov.w	r2, #0
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c74:	4659      	mov	r1, fp
 8009c76:	00cb      	lsls	r3, r1, #3
 8009c78:	4651      	mov	r1, sl
 8009c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c7e:	4651      	mov	r1, sl
 8009c80:	00ca      	lsls	r2, r1, #3
 8009c82:	4610      	mov	r0, r2
 8009c84:	4619      	mov	r1, r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	4642      	mov	r2, r8
 8009c8a:	189b      	adds	r3, r3, r2
 8009c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c90:	464b      	mov	r3, r9
 8009c92:	460a      	mov	r2, r1
 8009c94:	eb42 0303 	adc.w	r3, r2, r3
 8009c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ca8:	f04f 0200 	mov.w	r2, #0
 8009cac:	f04f 0300 	mov.w	r3, #0
 8009cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	008b      	lsls	r3, r1, #2
 8009cb8:	4641      	mov	r1, r8
 8009cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	008a      	lsls	r2, r1, #2
 8009cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009cc6:	f7f6 ffff 	bl	8000cc8 <__aeabi_uldivmod>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4b38      	ldr	r3, [pc, #224]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	2264      	movs	r2, #100	; 0x64
 8009cda:	fb02 f303 	mul.w	r3, r2, r3
 8009cde:	1acb      	subs	r3, r1, r3
 8009ce0:	011b      	lsls	r3, r3, #4
 8009ce2:	3332      	adds	r3, #50	; 0x32
 8009ce4:	4a33      	ldr	r2, [pc, #204]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cea:	095b      	lsrs	r3, r3, #5
 8009cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf0:	441c      	add	r4, r3
 8009cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	673b      	str	r3, [r7, #112]	; 0x70
 8009cfa:	677a      	str	r2, [r7, #116]	; 0x74
 8009cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d00:	4642      	mov	r2, r8
 8009d02:	464b      	mov	r3, r9
 8009d04:	1891      	adds	r1, r2, r2
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	415b      	adcs	r3, r3
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d10:	4641      	mov	r1, r8
 8009d12:	1851      	adds	r1, r2, r1
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	4649      	mov	r1, r9
 8009d18:	414b      	adcs	r3, r1
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	f04f 0200 	mov.w	r2, #0
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d28:	4659      	mov	r1, fp
 8009d2a:	00cb      	lsls	r3, r1, #3
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d32:	4651      	mov	r1, sl
 8009d34:	00ca      	lsls	r2, r1, #3
 8009d36:	4610      	mov	r0, r2
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	4642      	mov	r2, r8
 8009d3e:	189b      	adds	r3, r3, r2
 8009d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d42:	464b      	mov	r3, r9
 8009d44:	460a      	mov	r2, r1
 8009d46:	eb42 0303 	adc.w	r3, r2, r3
 8009d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	663b      	str	r3, [r7, #96]	; 0x60
 8009d56:	667a      	str	r2, [r7, #100]	; 0x64
 8009d58:	f04f 0200 	mov.w	r2, #0
 8009d5c:	f04f 0300 	mov.w	r3, #0
 8009d60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009d64:	4649      	mov	r1, r9
 8009d66:	008b      	lsls	r3, r1, #2
 8009d68:	4641      	mov	r1, r8
 8009d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d6e:	4641      	mov	r1, r8
 8009d70:	008a      	lsls	r2, r1, #2
 8009d72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009d76:	f7f6 ffa7 	bl	8000cc8 <__aeabi_uldivmod>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009d80:	fba3 1302 	umull	r1, r3, r3, r2
 8009d84:	095b      	lsrs	r3, r3, #5
 8009d86:	2164      	movs	r1, #100	; 0x64
 8009d88:	fb01 f303 	mul.w	r3, r1, r3
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	3332      	adds	r3, #50	; 0x32
 8009d92:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009d94:	fba2 2303 	umull	r2, r3, r2, r3
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	f003 020f 	and.w	r2, r3, #15
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4422      	add	r2, r4
 8009da6:	609a      	str	r2, [r3, #8]
}
 8009da8:	bf00      	nop
 8009daa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009dae:	46bd      	mov	sp, r7
 8009db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009db4:	51eb851f 	.word	0x51eb851f

08009db8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009db8:	b084      	sub	sp, #16
 8009dba:	b480      	push	{r7}
 8009dbc:	b085      	sub	sp, #20
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	f107 001c 	add.w	r0, r7, #28
 8009dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009dce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009dd2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009dd6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009dda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009dde:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009de2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009df2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	b004      	add	sp, #16
 8009e0c:	4770      	bx	lr

08009e0e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2203      	movs	r2, #3
 8009e56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0303 	and.w	r3, r3, #3
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ea0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009ea6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009eac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009ebc:	f023 030f 	bic.w	r3, r3, #15
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	b2db      	uxtb	r3, r3
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3314      	adds	r3, #20
 8009efe:	461a      	mov	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	4413      	add	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
}  
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b085      	sub	sp, #20
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f3c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009f42:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0

}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b088      	sub	sp, #32
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f80:	2340      	movs	r3, #64	; 0x40
 8009f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f8e:	f107 0308 	add.w	r3, r7, #8
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff74 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9e:	2110      	movs	r1, #16
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9d7 	bl	800a354 <SDMMC_GetCmdResp1>
 8009fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b088      	sub	sp, #32
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009fc0:	2311      	movs	r3, #17
 8009fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff ff52 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe2:	2111      	movs	r1, #17
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9b5 	bl	800a354 <SDMMC_GetCmdResp1>
 8009fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fec:	69fb      	ldr	r3, [r7, #28]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3720      	adds	r7, #32
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b088      	sub	sp, #32
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a004:	2312      	movs	r3, #18
 800a006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a008:	2340      	movs	r3, #64	; 0x40
 800a00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a016:	f107 0308 	add.w	r3, r7, #8
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff30 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a022:	f241 3288 	movw	r2, #5000	; 0x1388
 800a026:	2112      	movs	r1, #18
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f993 	bl	800a354 <SDMMC_GetCmdResp1>
 800a02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a030:	69fb      	ldr	r3, [r7, #28]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3720      	adds	r7, #32
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b088      	sub	sp, #32
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a048:	2318      	movs	r3, #24
 800a04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a050:	2300      	movs	r3, #0
 800a052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff ff0e 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a066:	f241 3288 	movw	r2, #5000	; 0x1388
 800a06a:	2118      	movs	r1, #24
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f971 	bl	800a354 <SDMMC_GetCmdResp1>
 800a072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a074:	69fb      	ldr	r3, [r7, #28]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b088      	sub	sp, #32
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a08c:	2319      	movs	r3, #25
 800a08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff feec 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a0aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ae:	2119      	movs	r1, #25
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f94f 	bl	800a354 <SDMMC_GetCmdResp1>
 800a0b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3720      	adds	r7, #32
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff feca 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a0ee:	4a05      	ldr	r2, [pc, #20]	; (800a104 <SDMMC_CmdStopTransfer+0x40>)
 800a0f0:	210c      	movs	r1, #12
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f92e 	bl	800a354 <SDMMC_GetCmdResp1>
 800a0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	05f5e100 	.word	0x05f5e100

0800a108 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a118:	2307      	movs	r3, #7
 800a11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a11c:	2340      	movs	r3, #64	; 0x40
 800a11e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a120:	2300      	movs	r3, #0
 800a122:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a128:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a12a:	f107 0310 	add.w	r3, r7, #16
 800a12e:	4619      	mov	r1, r3
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f7ff fea6 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a136:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13a:	2107      	movs	r1, #7
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f909 	bl	800a354 <SDMMC_GetCmdResp1>
 800a142:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a146:	4618      	mov	r0, r3
 800a148:	3728      	adds	r7, #40	; 0x28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b088      	sub	sp, #32
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a15e:	2300      	movs	r3, #0
 800a160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a162:	2300      	movs	r3, #0
 800a164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a16a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a16c:	f107 0308 	add.w	r3, r7, #8
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff fe85 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fb23 	bl	800a7c4 <SDMMC_GetCmdError>
 800a17e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a180:	69fb      	ldr	r3, [r7, #28]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b088      	sub	sp, #32
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a192:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a198:	2308      	movs	r3, #8
 800a19a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1aa:	f107 0308 	add.w	r3, r7, #8
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fe66 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fab6 	bl	800a728 <SDMMC_GetCmdResp7>
 800a1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1be:	69fb      	ldr	r3, [r7, #28]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a1d6:	2337      	movs	r3, #55	; 0x37
 800a1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e8:	f107 0308 	add.w	r3, r7, #8
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fe47 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f8:	2137      	movs	r1, #55	; 0x37
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f8aa 	bl	800a354 <SDMMC_GetCmdResp1>
 800a200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a202:	69fb      	ldr	r3, [r7, #28]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a21c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a222:	2329      	movs	r3, #41	; 0x29
 800a224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a226:	2340      	movs	r3, #64	; 0x40
 800a228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fe21 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f9bd 	bl	800a5c0 <SDMMC_GetCmdResp3>
 800a246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a248:	69fb      	ldr	r3, [r7, #28]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b088      	sub	sp, #32
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a25e:	2302      	movs	r3, #2
 800a260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a262:	23c0      	movs	r3, #192	; 0xc0
 800a264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a270:	f107 0308 	add.w	r3, r7, #8
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff fe03 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f957 	bl	800a530 <SDMMC_GetCmdResp2>
 800a282:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a284:	69fb      	ldr	r3, [r7, #28]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b088      	sub	sp, #32
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a29c:	2309      	movs	r3, #9
 800a29e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2a0:	23c0      	movs	r3, #192	; 0xc0
 800a2a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2ae:	f107 0308 	add.w	r3, r7, #8
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff fde4 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f938 	bl	800a530 <SDMMC_GetCmdResp2>
 800a2c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3720      	adds	r7, #32
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fdc5 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	2103      	movs	r1, #3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f99d 	bl	800a63c <SDMMC_GetCmdResp6>
 800a302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a304:	69fb      	ldr	r3, [r7, #28]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a31c:	230d      	movs	r3, #13
 800a31e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a32c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fda4 	bl	8009e82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a33a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a33e:	210d      	movs	r1, #13
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f807 	bl	800a354 <SDMMC_GetCmdResp1>
 800a346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a348:	69fb      	ldr	r3, [r7, #28]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3720      	adds	r7, #32
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	460b      	mov	r3, r1
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a362:	4b70      	ldr	r3, [pc, #448]	; (800a524 <SDMMC_GetCmdResp1+0x1d0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a70      	ldr	r2, [pc, #448]	; (800a528 <SDMMC_GetCmdResp1+0x1d4>)
 800a368:	fba2 2303 	umull	r2, r3, r2, r3
 800a36c:	0a5a      	lsrs	r2, r3, #9
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	fb02 f303 	mul.w	r3, r2, r3
 800a374:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	1e5a      	subs	r2, r3, #1
 800a37a:	61fa      	str	r2, [r7, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a384:	e0c9      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0ef      	beq.n	800a376 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1ea      	bne.n	800a376 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2204      	movs	r2, #4
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3b2:	2304      	movs	r3, #4
 800a3b4:	e0b1      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d004      	beq.n	800a3cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0a6      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	22c5      	movs	r2, #197	; 0xc5
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff fd7f 	bl	8009ed6 <SDIO_GetCommandResponse>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	7afb      	ldrb	r3, [r7, #11]
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d001      	beq.n	800a3e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e099      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7ff fd81 	bl	8009ef0 <SDIO_GetResponse>
 800a3ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4b4e      	ldr	r3, [pc, #312]	; (800a52c <SDMMC_GetCmdResp1+0x1d8>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e08d      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	da02      	bge.n	800a40a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a408:	e087      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	e080      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a422:	2380      	movs	r3, #128	; 0x80
 800a424:	e079      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a430:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a434:	e071      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a440:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a444:	e069      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a454:	e061      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a464:	e059      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a474:	e051      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a484:	e049      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a494:	e041      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a4a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4a4:	e039      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4b4:	e031      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4c4:	e029      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4d4:	e021      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a4e4:	e019      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4f4:	e011      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a500:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a504:	e009      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a510:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a514:	e001      	b.n	800a51a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3720      	adds	r7, #32
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000004 	.word	0x20000004
 800a528:	10624dd3 	.word	0x10624dd3
 800a52c:	fdffe008 	.word	0xfdffe008

0800a530 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a538:	4b1f      	ldr	r3, [pc, #124]	; (800a5b8 <SDMMC_GetCmdResp2+0x88>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1f      	ldr	r2, [pc, #124]	; (800a5bc <SDMMC_GetCmdResp2+0x8c>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	f241 3288 	movw	r2, #5000	; 0x1388
 800a548:	fb02 f303 	mul.w	r3, r2, r3
 800a54c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	60fa      	str	r2, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a55c:	e026      	b.n	800a5ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a562:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0ef      	beq.n	800a54e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1ea      	bne.n	800a54e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2204      	movs	r2, #4
 800a588:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a58a:	2304      	movs	r3, #4
 800a58c:	e00e      	b.n	800a5ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d004      	beq.n	800a5a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e003      	b.n	800a5ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	22c5      	movs	r2, #197	; 0xc5
 800a5a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	20000004 	.word	0x20000004
 800a5bc:	10624dd3 	.word	0x10624dd3

0800a5c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5c8:	4b1a      	ldr	r3, [pc, #104]	; (800a634 <SDMMC_GetCmdResp3+0x74>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1a      	ldr	r2, [pc, #104]	; (800a638 <SDMMC_GetCmdResp3+0x78>)
 800a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d2:	0a5b      	lsrs	r3, r3, #9
 800a5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d8:	fb02 f303 	mul.w	r3, r2, r3
 800a5dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	1e5a      	subs	r2, r3, #1
 800a5e2:	60fa      	str	r2, [r7, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5ec:	e01b      	b.n	800a626 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0ef      	beq.n	800a5de <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1ea      	bne.n	800a5de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2204      	movs	r2, #4
 800a618:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a61a:	2304      	movs	r3, #4
 800a61c:	e003      	b.n	800a626 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	22c5      	movs	r2, #197	; 0xc5
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000004 	.word	0x20000004
 800a638:	10624dd3 	.word	0x10624dd3

0800a63c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	460b      	mov	r3, r1
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a64a:	4b35      	ldr	r3, [pc, #212]	; (800a720 <SDMMC_GetCmdResp6+0xe4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a35      	ldr	r2, [pc, #212]	; (800a724 <SDMMC_GetCmdResp6+0xe8>)
 800a650:	fba2 2303 	umull	r2, r3, r2, r3
 800a654:	0a5b      	lsrs	r3, r3, #9
 800a656:	f241 3288 	movw	r2, #5000	; 0x1388
 800a65a:	fb02 f303 	mul.w	r3, r2, r3
 800a65e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	1e5a      	subs	r2, r3, #1
 800a664:	61fa      	str	r2, [r7, #28]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d102      	bne.n	800a670 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a66a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a66e:	e052      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a674:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0ef      	beq.n	800a660 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1ea      	bne.n	800a660 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68e:	f003 0304 	and.w	r3, r3, #4
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2204      	movs	r2, #4
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a69c:	2304      	movs	r3, #4
 800a69e:	e03a      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e02f      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fc0d 	bl	8009ed6 <SDIO_GetCommandResponse>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	461a      	mov	r2, r3
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d001      	beq.n	800a6ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e025      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	22c5      	movs	r2, #197	; 0xc5
 800a6ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fc0c 	bl	8009ef0 <SDIO_GetResponse>
 800a6d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d106      	bne.n	800a6f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	0c1b      	lsrs	r3, r3, #16
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e011      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a700:	e009      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a70c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a710:	e001      	b.n	800a716 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	20000004 	.word	0x20000004
 800a724:	10624dd3 	.word	0x10624dd3

0800a728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a730:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <SDMMC_GetCmdResp7+0x94>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a22      	ldr	r2, [pc, #136]	; (800a7c0 <SDMMC_GetCmdResp7+0x98>)
 800a736:	fba2 2303 	umull	r2, r3, r2, r3
 800a73a:	0a5b      	lsrs	r3, r3, #9
 800a73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	1e5a      	subs	r2, r3, #1
 800a74a:	60fa      	str	r2, [r7, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a754:	e02c      	b.n	800a7b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0ef      	beq.n	800a746 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1ea      	bne.n	800a746 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2204      	movs	r2, #4
 800a780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a782:	2304      	movs	r3, #4
 800a784:	e014      	b.n	800a7b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a798:	2301      	movs	r3, #1
 800a79a:	e009      	b.n	800a7b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2240      	movs	r2, #64	; 0x40
 800a7ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7ae:	2300      	movs	r3, #0
  
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	20000004 	.word	0x20000004
 800a7c0:	10624dd3 	.word	0x10624dd3

0800a7c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7cc:	4b11      	ldr	r3, [pc, #68]	; (800a814 <SDMMC_GetCmdError+0x50>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a11      	ldr	r2, [pc, #68]	; (800a818 <SDMMC_GetCmdError+0x54>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	0a5b      	lsrs	r3, r3, #9
 800a7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1e5a      	subs	r2, r3, #1
 800a7e6:	60fa      	str	r2, [r7, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7f0:	e009      	b.n	800a806 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f1      	beq.n	800a7e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	22c5      	movs	r2, #197	; 0xc5
 800a802:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000004 	.word	0x20000004
 800a818:	10624dd3 	.word	0x10624dd3

0800a81c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a820:	4904      	ldr	r1, [pc, #16]	; (800a834 <MX_FATFS_Init+0x18>)
 800a822:	4805      	ldr	r0, [pc, #20]	; (800a838 <MX_FATFS_Init+0x1c>)
 800a824:	f000 faaa 	bl	800ad7c <FATFS_LinkDriver>
 800a828:	4603      	mov	r3, r0
 800a82a:	461a      	mov	r2, r3
 800a82c:	4b03      	ldr	r3, [pc, #12]	; (800a83c <MX_FATFS_Init+0x20>)
 800a82e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a830:	bf00      	nop
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20000b00 	.word	0x20000b00
 800a838:	0801409c 	.word	0x0801409c
 800a83c:	20000afc 	.word	0x20000afc

0800a840 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a84a:	f000 f888 	bl	800a95e <BSP_SD_IsDetected>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b01      	cmp	r3, #1
 800a852:	d001      	beq.n	800a858 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e005      	b.n	800a864 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a858:	4804      	ldr	r0, [pc, #16]	; (800a86c <BSP_SD_Init+0x2c>)
 800a85a:	f7fc ff29 	bl	80076b0 <HAL_SD_Init>
 800a85e:	4603      	mov	r3, r0
 800a860:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a862:	79fb      	ldrb	r3, [r7, #7]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000448 	.word	0x20000448

0800a870 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	4806      	ldr	r0, [pc, #24]	; (800a8a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a888:	f7fc ffc2 	bl	8007810 <HAL_SD_ReadBlocks_DMA>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	20000448 	.word	0x20000448

0800a8a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	68f9      	ldr	r1, [r7, #12]
 800a8ba:	4806      	ldr	r0, [pc, #24]	; (800a8d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a8bc:	f7fd f888 	bl	80079d0 <HAL_SD_WriteBlocks_DMA>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20000448 	.word	0x20000448

0800a8d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a8dc:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <BSP_SD_GetCardState+0x1c>)
 800a8de:	f7fd fca9 	bl	8008234 <HAL_SD_GetCardState>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	bf14      	ite	ne
 800a8e8:	2301      	movne	r3, #1
 800a8ea:	2300      	moveq	r3, #0
 800a8ec:	b2db      	uxtb	r3, r3
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000448 	.word	0x20000448

0800a8f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	4803      	ldr	r0, [pc, #12]	; (800a910 <BSP_SD_GetCardInfo+0x18>)
 800a904:	f7fd fc6a 	bl	80081dc <HAL_SD_GetCardInfo>
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	20000448 	.word	0x20000448

0800a914 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a91c:	f000 f818 	bl	800a950 <BSP_SD_AbortCallback>
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a930:	f000 f9b4 	bl	800ac9c <BSP_SD_WriteCpltCallback>
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a944:	f000 f9bc 	bl	800acc0 <BSP_SD_ReadCpltCallback>
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a950:	b480      	push	{r7}
 800a952:	af00      	add	r7, sp, #0

}
 800a954:	bf00      	nop
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a964:	2301      	movs	r3, #1
 800a966:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a968:	f000 f80c 	bl	800a984 <BSP_PlatformIsDetected>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a972:	2300      	movs	r3, #0
 800a974:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	b2db      	uxtb	r3, r3
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a98a:	2301      	movs	r3, #1
 800a98c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a98e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a992:	4806      	ldr	r0, [pc, #24]	; (800a9ac <BSP_PlatformIsDetected+0x28>)
 800a994:	f7f9 fa48 	bl	8003e28 <HAL_GPIO_ReadPin>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40020800 	.word	0x40020800

0800a9b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a9b8:	f000 faa0 	bl	800aefc <osKernelGetTickCount>
 800a9bc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a9be:	e006      	b.n	800a9ce <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9c0:	f7ff ff8a 	bl	800a8d8 <BSP_SD_GetCardState>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e009      	b.n	800a9e2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a9ce:	f000 fa95 	bl	800aefc <osKernelGetTickCount>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d8f0      	bhi.n	800a9c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <SD_CheckStatus+0x38>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9fc:	f7ff ff6c 	bl	800a8d8 <BSP_SD_GetCardState>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d107      	bne.n	800aa16 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aa06:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <SD_CheckStatus+0x38>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f023 0301 	bic.w	r3, r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <SD_CheckStatus+0x38>)
 800aa14:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aa16:	4b03      	ldr	r3, [pc, #12]	; (800aa24 <SD_CheckStatus+0x38>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	b2db      	uxtb	r3, r3
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	2000000d 	.word	0x2000000d

0800aa28 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800aa32:	4b1c      	ldr	r3, [pc, #112]	; (800aaa4 <SD_initialize+0x7c>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800aa38:	f000 fa18 	bl	800ae6c <osKernelGetState>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d129      	bne.n	800aa96 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800aa42:	f7ff fefd 	bl	800a840 <BSP_SD_Init>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d107      	bne.n	800aa5c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff ffcc 	bl	800a9ec <SD_CheckStatus>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <SD_initialize+0x7c>)
 800aa5a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800aa5c:	4b11      	ldr	r3, [pc, #68]	; (800aaa4 <SD_initialize+0x7c>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d017      	beq.n	800aa96 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800aa66:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <SD_initialize+0x80>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d107      	bne.n	800aa7e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2102      	movs	r1, #2
 800aa72:	200a      	movs	r0, #10
 800aa74:	f000 fb04 	bl	800b080 <osMessageQueueNew>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	4a0b      	ldr	r2, [pc, #44]	; (800aaa8 <SD_initialize+0x80>)
 800aa7c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <SD_initialize+0x80>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d107      	bne.n	800aa96 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <SD_initialize+0x7c>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	f043 0301 	orr.w	r3, r3, #1
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <SD_initialize+0x7c>)
 800aa94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800aa96:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <SD_initialize+0x7c>)
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	b2db      	uxtb	r3, r3
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	2000000d 	.word	0x2000000d
 800aaa8:	20000b04 	.word	0x20000b04

0800aaac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff ff97 	bl	800a9ec <SD_CheckStatus>
 800aabe:	4603      	mov	r3, r0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	607a      	str	r2, [r7, #4]
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	4603      	mov	r3, r0
 800aad6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aadc:	f247 5030 	movw	r0, #30000	; 0x7530
 800aae0:	f7ff ff66 	bl	800a9b0 <SD_CheckStatusWithTimeout>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da01      	bge.n	800aaee <SD_read+0x26>
  {
    return res;
 800aaea:	7ffb      	ldrb	r3, [r7, #31]
 800aaec:	e02f      	b.n	800ab4e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	68b8      	ldr	r0, [r7, #8]
 800aaf4:	f7ff febc 	bl	800a870 <BSP_SD_ReadBlocks_DMA>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800aafc:	7fbb      	ldrb	r3, [r7, #30]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d124      	bne.n	800ab4c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ab02:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <SD_read+0x90>)
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	f107 0112 	add.w	r1, r7, #18
 800ab0a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f000 fb8a 	bl	800b228 <osMessageQueueGet>
 800ab14:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d117      	bne.n	800ab4c <SD_read+0x84>
 800ab1c:	8a7b      	ldrh	r3, [r7, #18]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d114      	bne.n	800ab4c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800ab22:	f000 f9eb 	bl	800aefc <osKernelGetTickCount>
 800ab26:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ab28:	e007      	b.n	800ab3a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab2a:	f7ff fed5 	bl	800a8d8 <BSP_SD_GetCardState>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <SD_read+0x72>
              {
                res = RES_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ab38:	e008      	b.n	800ab4c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ab3a:	f000 f9df 	bl	800aefc <osKernelGetTickCount>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d9ee      	bls.n	800ab2a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ab4c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3720      	adds	r7, #32
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000b04 	.word	0x20000b04

0800ab5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b088      	sub	sp, #32
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	607a      	str	r2, [r7, #4]
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ab70:	f247 5030 	movw	r0, #30000	; 0x7530
 800ab74:	f7ff ff1c 	bl	800a9b0 <SD_CheckStatusWithTimeout>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da01      	bge.n	800ab82 <SD_write+0x26>
  {
    return res;
 800ab7e:	7ffb      	ldrb	r3, [r7, #31]
 800ab80:	e02d      	b.n	800abde <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	68b8      	ldr	r0, [r7, #8]
 800ab88:	f7ff fe8c 	bl	800a8a4 <BSP_SD_WriteBlocks_DMA>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d124      	bne.n	800abdc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <SD_write+0x8c>)
 800ab94:	6818      	ldr	r0, [r3, #0]
 800ab96:	f107 0112 	add.w	r1, r7, #18
 800ab9a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f000 fb42 	bl	800b228 <osMessageQueueGet>
 800aba4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d117      	bne.n	800abdc <SD_write+0x80>
 800abac:	8a7b      	ldrh	r3, [r7, #18]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d114      	bne.n	800abdc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800abb2:	f000 f9a3 	bl	800aefc <osKernelGetTickCount>
 800abb6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800abb8:	e007      	b.n	800abca <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800abba:	f7ff fe8d 	bl	800a8d8 <BSP_SD_GetCardState>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <SD_write+0x6e>
          {
            res = RES_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	77fb      	strb	r3, [r7, #31]
            break;
 800abc8:	e008      	b.n	800abdc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800abca:	f000 f997 	bl	800aefc <osKernelGetTickCount>
 800abce:	4602      	mov	r2, r0
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	f247 522f 	movw	r2, #29999	; 0x752f
 800abd8:	4293      	cmp	r3, r2
 800abda:	d9ee      	bls.n	800abba <SD_write+0x5e>
    }

  }
#endif

  return res;
 800abdc:	7ffb      	ldrb	r3, [r7, #31]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3720      	adds	r7, #32
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000b04 	.word	0x20000b04

0800abec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08c      	sub	sp, #48	; 0x30
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	603a      	str	r2, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
 800abf8:	460b      	mov	r3, r1
 800abfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac02:	4b25      	ldr	r3, [pc, #148]	; (800ac98 <SD_ioctl+0xac>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <SD_ioctl+0x28>
 800ac10:	2303      	movs	r3, #3
 800ac12:	e03c      	b.n	800ac8e <SD_ioctl+0xa2>

  switch (cmd)
 800ac14:	79bb      	ldrb	r3, [r7, #6]
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d834      	bhi.n	800ac84 <SD_ioctl+0x98>
 800ac1a:	a201      	add	r2, pc, #4	; (adr r2, 800ac20 <SD_ioctl+0x34>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac31 	.word	0x0800ac31
 800ac24:	0800ac39 	.word	0x0800ac39
 800ac28:	0800ac51 	.word	0x0800ac51
 800ac2c:	0800ac6b 	.word	0x0800ac6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac36:	e028      	b.n	800ac8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7ff fe5b 	bl	800a8f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac4e:	e01c      	b.n	800ac8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff fe4f 	bl	800a8f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac68:	e00f      	b.n	800ac8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac6a:	f107 030c 	add.w	r3, r7, #12
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff fe42 	bl	800a8f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	0a5a      	lsrs	r2, r3, #9
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac82:	e002      	b.n	800ac8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ac84:	2304      	movs	r3, #4
 800ac86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ac8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3730      	adds	r7, #48	; 0x30
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	2000000d 	.word	0x2000000d

0800ac9c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800aca2:	2302      	movs	r3, #2
 800aca4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <BSP_SD_WriteCpltCallback+0x20>)
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	1db9      	adds	r1, r7, #6
 800acac:	2300      	movs	r3, #0
 800acae:	2200      	movs	r2, #0
 800acb0:	f000 fa5a 	bl	800b168 <osMessageQueuePut>
#endif
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20000b04 	.word	0x20000b04

0800acc0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800acc6:	2301      	movs	r3, #1
 800acc8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <BSP_SD_ReadCpltCallback+0x20>)
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	1db9      	adds	r1, r7, #6
 800acd0:	2300      	movs	r3, #0
 800acd2:	2200      	movs	r2, #0
 800acd4:	f000 fa48 	bl	800b168 <osMessageQueuePut>
#endif
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20000b04 	.word	0x20000b04

0800ace4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acf2:	2301      	movs	r3, #1
 800acf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acfa:	4b1f      	ldr	r3, [pc, #124]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800acfc:	7a5b      	ldrb	r3, [r3, #9]
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d131      	bne.n	800ad68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad06:	7a5b      	ldrb	r3, [r3, #9]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad0e:	2100      	movs	r1, #0
 800ad10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad12:	4b19      	ldr	r3, [pc, #100]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad14:	7a5b      	ldrb	r3, [r3, #9]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	4a17      	ldr	r2, [pc, #92]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad22:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad24:	7a5b      	ldrb	r3, [r3, #9]
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad2c:	4413      	add	r3, r2
 800ad2e:	79fa      	ldrb	r2, [r7, #7]
 800ad30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad34:	7a5b      	ldrb	r3, [r3, #9]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	b2d1      	uxtb	r1, r2
 800ad3c:	4a0e      	ldr	r2, [pc, #56]	; (800ad78 <FATFS_LinkDriverEx+0x94>)
 800ad3e:	7251      	strb	r1, [r2, #9]
 800ad40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad42:	7dbb      	ldrb	r3, [r7, #22]
 800ad44:	3330      	adds	r3, #48	; 0x30
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	223a      	movs	r2, #58	; 0x3a
 800ad52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	3302      	adds	r3, #2
 800ad58:	222f      	movs	r2, #47	; 0x2f
 800ad5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	3303      	adds	r3, #3
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	20000b08 	.word	0x20000b08

0800ad7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad86:	2200      	movs	r2, #0
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff ffaa 	bl	800ace4 <FATFS_LinkDriverEx>
 800ad90:	4603      	mov	r3, r0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <__NVIC_SetPriority>:
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6039      	str	r1, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ada8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adac:	2b00      	cmp	r3, #0
 800adae:	db0a      	blt.n	800adc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	490c      	ldr	r1, [pc, #48]	; (800ade8 <__NVIC_SetPriority+0x4c>)
 800adb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adba:	0112      	lsls	r2, r2, #4
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	440b      	add	r3, r1
 800adc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800adc4:	e00a      	b.n	800addc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	4908      	ldr	r1, [pc, #32]	; (800adec <__NVIC_SetPriority+0x50>)
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	f003 030f 	and.w	r3, r3, #15
 800add2:	3b04      	subs	r3, #4
 800add4:	0112      	lsls	r2, r2, #4
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	440b      	add	r3, r1
 800adda:	761a      	strb	r2, [r3, #24]
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	e000e100 	.word	0xe000e100
 800adec:	e000ed00 	.word	0xe000ed00

0800adf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800adf4:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <SysTick_Handler+0x1c>)
 800adf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800adf8:	f001 ff5c 	bl	800ccb4 <xTaskGetSchedulerState>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d001      	beq.n	800ae06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae02:	f002 fd41 	bl	800d888 <xPortSysTickHandler>
  }
}
 800ae06:	bf00      	nop
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	e000e010 	.word	0xe000e010

0800ae10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae10:	b580      	push	{r7, lr}
 800ae12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae14:	2100      	movs	r1, #0
 800ae16:	f06f 0004 	mvn.w	r0, #4
 800ae1a:	f7ff ffbf 	bl	800ad9c <__NVIC_SetPriority>
#endif
}
 800ae1e:	bf00      	nop
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae2a:	f3ef 8305 	mrs	r3, IPSR
 800ae2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ae30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae36:	f06f 0305 	mvn.w	r3, #5
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	e00c      	b.n	800ae58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <osKernelInitialize+0x44>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d105      	bne.n	800ae52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae46:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <osKernelInitialize+0x44>)
 800ae48:	2201      	movs	r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	607b      	str	r3, [r7, #4]
 800ae50:	e002      	b.n	800ae58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
 800ae56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae58:	687b      	ldr	r3, [r7, #4]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20000b14 	.word	0x20000b14

0800ae6c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ae72:	f001 ff1f 	bl	800ccb4 <xTaskGetSchedulerState>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d004      	beq.n	800ae86 <osKernelGetState+0x1a>
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d105      	bne.n	800ae8c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ae80:	2302      	movs	r3, #2
 800ae82:	607b      	str	r3, [r7, #4]
      break;
 800ae84:	e00c      	b.n	800aea0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ae86:	2303      	movs	r3, #3
 800ae88:	607b      	str	r3, [r7, #4]
      break;
 800ae8a:	e009      	b.n	800aea0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ae8c:	4b07      	ldr	r3, [pc, #28]	; (800aeac <osKernelGetState+0x40>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d102      	bne.n	800ae9a <osKernelGetState+0x2e>
        state = osKernelReady;
 800ae94:	2301      	movs	r3, #1
 800ae96:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ae98:	e001      	b.n	800ae9e <osKernelGetState+0x32>
        state = osKernelInactive;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	607b      	str	r3, [r7, #4]
      break;
 800ae9e:	bf00      	nop
  }

  return (state);
 800aea0:	687b      	ldr	r3, [r7, #4]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000b14 	.word	0x20000b14

0800aeb0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeb6:	f3ef 8305 	mrs	r3, IPSR
 800aeba:	603b      	str	r3, [r7, #0]
  return(result);
 800aebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <osKernelStart+0x1a>
    stat = osErrorISR;
 800aec2:	f06f 0305 	mvn.w	r3, #5
 800aec6:	607b      	str	r3, [r7, #4]
 800aec8:	e010      	b.n	800aeec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aeca:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <osKernelStart+0x48>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d109      	bne.n	800aee6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aed2:	f7ff ff9d 	bl	800ae10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <osKernelStart+0x48>)
 800aed8:	2202      	movs	r2, #2
 800aeda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aedc:	f001 fa7c 	bl	800c3d8 <vTaskStartScheduler>
      stat = osOK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	e002      	b.n	800aeec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aee6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aeec:	687b      	ldr	r3, [r7, #4]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20000b14 	.word	0x20000b14

0800aefc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af02:	f3ef 8305 	mrs	r3, IPSR
 800af06:	603b      	str	r3, [r7, #0]
  return(result);
 800af08:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800af0e:	f001 fb8f 	bl	800c630 <xTaskGetTickCountFromISR>
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	e002      	b.n	800af1c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800af16:	f001 fb7b 	bl	800c610 <xTaskGetTickCount>
 800af1a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800af1c:	687b      	ldr	r3, [r7, #4]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af26:	b580      	push	{r7, lr}
 800af28:	b08e      	sub	sp, #56	; 0x38
 800af2a:	af04      	add	r7, sp, #16
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af36:	f3ef 8305 	mrs	r3, IPSR
 800af3a:	617b      	str	r3, [r7, #20]
  return(result);
 800af3c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d17e      	bne.n	800b040 <osThreadNew+0x11a>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d07b      	beq.n	800b040 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800af48:	2380      	movs	r3, #128	; 0x80
 800af4a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af4c:	2318      	movs	r3, #24
 800af4e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af50:	2300      	movs	r3, #0
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af54:	f04f 33ff 	mov.w	r3, #4294967295
 800af58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d045      	beq.n	800afec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <osThreadNew+0x48>
        name = attr->name;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <osThreadNew+0x6e>
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	2b38      	cmp	r3, #56	; 0x38
 800af86:	d805      	bhi.n	800af94 <osThreadNew+0x6e>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <osThreadNew+0x72>
        return (NULL);
 800af94:	2300      	movs	r3, #0
 800af96:	e054      	b.n	800b042 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	089b      	lsrs	r3, r3, #2
 800afa6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00e      	beq.n	800afce <osThreadNew+0xa8>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	2ba7      	cmp	r3, #167	; 0xa7
 800afb6:	d90a      	bls.n	800afce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d006      	beq.n	800afce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <osThreadNew+0xa8>
        mem = 1;
 800afc8:	2301      	movs	r3, #1
 800afca:	61bb      	str	r3, [r7, #24]
 800afcc:	e010      	b.n	800aff0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10c      	bne.n	800aff0 <osThreadNew+0xca>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d108      	bne.n	800aff0 <osThreadNew+0xca>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d104      	bne.n	800aff0 <osThreadNew+0xca>
          mem = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	61bb      	str	r3, [r7, #24]
 800afea:	e001      	b.n	800aff0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d110      	bne.n	800b018 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800affe:	9202      	str	r2, [sp, #8]
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	6a3a      	ldr	r2, [r7, #32]
 800b00a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 fff7 	bl	800c000 <xTaskCreateStatic>
 800b012:	4603      	mov	r3, r0
 800b014:	613b      	str	r3, [r7, #16]
 800b016:	e013      	b.n	800b040 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d110      	bne.n	800b040 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	b29a      	uxth	r2, r3
 800b022:	f107 0310 	add.w	r3, r7, #16
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f001 f842 	bl	800c0ba <xTaskCreate>
 800b036:	4603      	mov	r3, r0
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d001      	beq.n	800b040 <osThreadNew+0x11a>
            hTask = NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b040:	693b      	ldr	r3, [r7, #16]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3728      	adds	r7, #40	; 0x28
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b052:	f3ef 8305 	mrs	r3, IPSR
 800b056:	60bb      	str	r3, [r7, #8]
  return(result);
 800b058:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <osDelay+0x1c>
    stat = osErrorISR;
 800b05e:	f06f 0305 	mvn.w	r3, #5
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	e007      	b.n	800b076 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f001 f97d 	bl	800c370 <vTaskDelay>
    }
  }

  return (stat);
 800b076:	68fb      	ldr	r3, [r7, #12]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b08a      	sub	sp, #40	; 0x28
 800b084:	af02      	add	r7, sp, #8
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b090:	f3ef 8305 	mrs	r3, IPSR
 800b094:	613b      	str	r3, [r7, #16]
  return(result);
 800b096:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d15f      	bne.n	800b15c <osMessageQueueNew+0xdc>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d05c      	beq.n	800b15c <osMessageQueueNew+0xdc>
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d059      	beq.n	800b15c <osMessageQueueNew+0xdc>
    mem = -1;
 800b0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d029      	beq.n	800b108 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d012      	beq.n	800b0e2 <osMessageQueueNew+0x62>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	2b4f      	cmp	r3, #79	; 0x4f
 800b0c2:	d90e      	bls.n	800b0e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	695a      	ldr	r2, [r3, #20]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	fb01 f303 	mul.w	r3, r1, r3
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d302      	bcc.n	800b0e2 <osMessageQueueNew+0x62>
        mem = 1;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	61bb      	str	r3, [r7, #24]
 800b0e0:	e014      	b.n	800b10c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d110      	bne.n	800b10c <osMessageQueueNew+0x8c>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10c      	bne.n	800b10c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d108      	bne.n	800b10c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d104      	bne.n	800b10c <osMessageQueueNew+0x8c>
          mem = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	61bb      	str	r3, [r7, #24]
 800b106:	e001      	b.n	800b10c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d10b      	bne.n	800b12a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	691a      	ldr	r2, [r3, #16]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	2100      	movs	r1, #0
 800b11c:	9100      	str	r1, [sp, #0]
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fa2f 	bl	800b584 <xQueueGenericCreateStatic>
 800b126:	61f8      	str	r0, [r7, #28]
 800b128:	e008      	b.n	800b13c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d105      	bne.n	800b13c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b130:	2200      	movs	r2, #0
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fa9d 	bl	800b674 <xQueueGenericCreate>
 800b13a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00c      	beq.n	800b15c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d003      	beq.n	800b150 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	e001      	b.n	800b154 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b154:	6979      	ldr	r1, [r7, #20]
 800b156:	69f8      	ldr	r0, [r7, #28]
 800b158:	f000 fef4 	bl	800bf44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b15c:	69fb      	ldr	r3, [r7, #28]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	4613      	mov	r3, r2
 800b176:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b180:	f3ef 8305 	mrs	r3, IPSR
 800b184:	617b      	str	r3, [r7, #20]
  return(result);
 800b186:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d028      	beq.n	800b1de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d005      	beq.n	800b19e <osMessageQueuePut+0x36>
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <osMessageQueuePut+0x36>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b19e:	f06f 0303 	mvn.w	r3, #3
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	e038      	b.n	800b218 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b1aa:	f107 0210 	add.w	r2, r7, #16
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	68b9      	ldr	r1, [r7, #8]
 800b1b2:	69b8      	ldr	r0, [r7, #24]
 800b1b4:	f000 fbba 	bl	800b92c <xQueueGenericSendFromISR>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d003      	beq.n	800b1c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b1be:	f06f 0302 	mvn.w	r3, #2
 800b1c2:	61fb      	str	r3, [r7, #28]
 800b1c4:	e028      	b.n	800b218 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d025      	beq.n	800b218 <osMessageQueuePut+0xb0>
 800b1cc:	4b15      	ldr	r3, [pc, #84]	; (800b224 <osMessageQueuePut+0xbc>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	e01c      	b.n	800b218 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <osMessageQueuePut+0x82>
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b1ea:	f06f 0303 	mvn.w	r3, #3
 800b1ee:	61fb      	str	r3, [r7, #28]
 800b1f0:	e012      	b.n	800b218 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	69b8      	ldr	r0, [r7, #24]
 800b1fa:	f000 fa99 	bl	800b730 <xQueueGenericSend>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d009      	beq.n	800b218 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b20a:	f06f 0301 	mvn.w	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e002      	b.n	800b218 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b212:	f06f 0302 	mvn.w	r3, #2
 800b216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b218:	69fb      	ldr	r3, [r7, #28]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b23e:	f3ef 8305 	mrs	r3, IPSR
 800b242:	617b      	str	r3, [r7, #20]
  return(result);
 800b244:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b246:	2b00      	cmp	r3, #0
 800b248:	d028      	beq.n	800b29c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <osMessageQueueGet+0x34>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <osMessageQueueGet+0x34>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b25c:	f06f 0303 	mvn.w	r3, #3
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	e037      	b.n	800b2d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b264:	2300      	movs	r3, #0
 800b266:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b268:	f107 0310 	add.w	r3, r7, #16
 800b26c:	461a      	mov	r2, r3
 800b26e:	68b9      	ldr	r1, [r7, #8]
 800b270:	69b8      	ldr	r0, [r7, #24]
 800b272:	f000 fcd7 	bl	800bc24 <xQueueReceiveFromISR>
 800b276:	4603      	mov	r3, r0
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d003      	beq.n	800b284 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b27c:	f06f 0302 	mvn.w	r3, #2
 800b280:	61fb      	str	r3, [r7, #28]
 800b282:	e027      	b.n	800b2d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d024      	beq.n	800b2d4 <osMessageQueueGet+0xac>
 800b28a:	4b15      	ldr	r3, [pc, #84]	; (800b2e0 <osMessageQueueGet+0xb8>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	e01b      	b.n	800b2d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <osMessageQueueGet+0x80>
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d103      	bne.n	800b2b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b2a8:	f06f 0303 	mvn.w	r3, #3
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e011      	b.n	800b2d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	69b8      	ldr	r0, [r7, #24]
 800b2b6:	f000 fbd5 	bl	800ba64 <xQueueReceive>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d009      	beq.n	800b2d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b2c6:	f06f 0301 	mvn.w	r3, #1
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	e002      	b.n	800b2d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b2ce:	f06f 0302 	mvn.w	r3, #2
 800b2d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2d4:	69fb      	ldr	r3, [r7, #28]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3720      	adds	r7, #32
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	e000ed04 	.word	0xe000ed04

0800b2e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <vApplicationGetIdleTaskMemory+0x2c>)
 800b2f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	4a06      	ldr	r2, [pc, #24]	; (800b314 <vApplicationGetIdleTaskMemory+0x30>)
 800b2fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2280      	movs	r2, #128	; 0x80
 800b300:	601a      	str	r2, [r3, #0]
}
 800b302:	bf00      	nop
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	20000b18 	.word	0x20000b18
 800b314:	20000bc0 	.word	0x20000bc0

0800b318 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4a07      	ldr	r2, [pc, #28]	; (800b344 <vApplicationGetTimerTaskMemory+0x2c>)
 800b328:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	4a06      	ldr	r2, [pc, #24]	; (800b348 <vApplicationGetTimerTaskMemory+0x30>)
 800b32e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b336:	601a      	str	r2, [r3, #0]
}
 800b338:	bf00      	nop
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	20000dc0 	.word	0x20000dc0
 800b348:	20000e68 	.word	0x20000e68

0800b34c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f103 0208 	add.w	r2, r3, #8
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f04f 32ff 	mov.w	r2, #4294967295
 800b364:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f103 0208 	add.w	r2, r3, #8
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f103 0208 	add.w	r2, r3, #8
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	601a      	str	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b404:	d103      	bne.n	800b40e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	e00c      	b.n	800b428 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3308      	adds	r3, #8
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	e002      	b.n	800b41c <vListInsert+0x2e>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	429a      	cmp	r2, r3
 800b426:	d2f6      	bcs.n	800b416 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	601a      	str	r2, [r3, #0]
}
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	6892      	ldr	r2, [r2, #8]
 800b476:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	6852      	ldr	r2, [r2, #4]
 800b480:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d103      	bne.n	800b494 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689a      	ldr	r2, [r3, #8]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	1e5a      	subs	r2, r3, #1
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4de:	f002 f941 	bl	800d764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ea:	68f9      	ldr	r1, [r7, #12]
 800b4ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4ee:	fb01 f303 	mul.w	r3, r1, r3
 800b4f2:	441a      	add	r2, r3
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b50e:	3b01      	subs	r3, #1
 800b510:	68f9      	ldr	r1, [r7, #12]
 800b512:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b514:	fb01 f303 	mul.w	r3, r1, r3
 800b518:	441a      	add	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	22ff      	movs	r2, #255	; 0xff
 800b522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	22ff      	movs	r2, #255	; 0xff
 800b52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d114      	bne.n	800b55e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d01a      	beq.n	800b572 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3310      	adds	r3, #16
 800b540:	4618      	mov	r0, r3
 800b542:	f001 f9f5 	bl	800c930 <xTaskRemoveFromEventList>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d012      	beq.n	800b572 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b54c:	4b0c      	ldr	r3, [pc, #48]	; (800b580 <xQueueGenericReset+0xcc>)
 800b54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	e009      	b.n	800b572 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3310      	adds	r3, #16
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff fef2 	bl	800b34c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3324      	adds	r3, #36	; 0x24
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7ff feed 	bl	800b34c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b572:	f002 f927 	bl	800d7c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b576:	2301      	movs	r3, #1
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08e      	sub	sp, #56	; 0x38
 800b588:	af02      	add	r7, sp, #8
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
 800b590:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <xQueueGenericCreateStatic+0x52>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <xQueueGenericCreateStatic+0x56>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e000      	b.n	800b5dc <xQueueGenericCreateStatic+0x58>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10a      	bne.n	800b5f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	623b      	str	r3, [r7, #32]
}
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d102      	bne.n	800b602 <xQueueGenericCreateStatic+0x7e>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <xQueueGenericCreateStatic+0x82>
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <xQueueGenericCreateStatic+0x84>
 800b606:	2300      	movs	r3, #0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	61fb      	str	r3, [r7, #28]
}
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b622:	2350      	movs	r3, #80	; 0x50
 800b624:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2b50      	cmp	r3, #80	; 0x50
 800b62a:	d00a      	beq.n	800b642 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	61bb      	str	r3, [r7, #24]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b642:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00d      	beq.n	800b66a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b656:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	4613      	mov	r3, r2
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f83f 	bl	800b6e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3730      	adds	r7, #48	; 0x30
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	; 0x28
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	613b      	str	r3, [r7, #16]
}
 800b69a:	bf00      	nop
 800b69c:	e7fe      	b.n	800b69c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	3350      	adds	r3, #80	; 0x50
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f002 f97b 	bl	800d9a8 <pvPortMalloc>
 800b6b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d011      	beq.n	800b6de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	3350      	adds	r3, #80	; 0x50
 800b6c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6cc:	79fa      	ldrb	r2, [r7, #7]
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	68b9      	ldr	r1, [r7, #8]
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 f805 	bl	800b6e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6de:	69bb      	ldr	r3, [r7, #24]
	}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
 800b6f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d103      	bne.n	800b704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	e002      	b.n	800b70a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b716:	2101      	movs	r1, #1
 800b718:	69b8      	ldr	r0, [r7, #24]
 800b71a:	f7ff fecb 	bl	800b4b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	78fa      	ldrb	r2, [r7, #3]
 800b722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b726:	bf00      	nop
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08e      	sub	sp, #56	; 0x38
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b73e:	2300      	movs	r3, #0
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10a      	bne.n	800b762 <xQueueGenericSend+0x32>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <xQueueGenericSend+0x40>
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <xQueueGenericSend+0x44>
 800b770:	2301      	movs	r3, #1
 800b772:	e000      	b.n	800b776 <xQueueGenericSend+0x46>
 800b774:	2300      	movs	r3, #0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <xQueueGenericSend+0x60>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d103      	bne.n	800b79e <xQueueGenericSend+0x6e>
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <xQueueGenericSend+0x72>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <xQueueGenericSend+0x74>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <xQueueGenericSend+0x8e>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	623b      	str	r3, [r7, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	e7fe      	b.n	800b7bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7be:	f001 fa79 	bl	800ccb4 <xTaskGetSchedulerState>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <xQueueGenericSend+0x9e>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <xQueueGenericSend+0xa2>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueGenericSend+0xa4>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <xQueueGenericSend+0xbe>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	61fb      	str	r3, [r7, #28]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7ee:	f001 ffb9 	bl	800d764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d302      	bcc.n	800b804 <xQueueGenericSend+0xd4>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d129      	bne.n	800b858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b80a:	f000 fa8b 	bl	800bd24 <prvCopyDataToQueue>
 800b80e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d010      	beq.n	800b83a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	3324      	adds	r3, #36	; 0x24
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 f887 	bl	800c930 <xTaskRemoveFromEventList>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d013      	beq.n	800b850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b828:	4b3f      	ldr	r3, [pc, #252]	; (800b928 <xQueueGenericSend+0x1f8>)
 800b82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	e00a      	b.n	800b850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d007      	beq.n	800b850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b840:	4b39      	ldr	r3, [pc, #228]	; (800b928 <xQueueGenericSend+0x1f8>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b850:	f001 ffb8 	bl	800d7c4 <vPortExitCritical>
				return pdPASS;
 800b854:	2301      	movs	r3, #1
 800b856:	e063      	b.n	800b920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d103      	bne.n	800b866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b85e:	f001 ffb1 	bl	800d7c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b862:	2300      	movs	r3, #0
 800b864:	e05c      	b.n	800b920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b86c:	f107 0314 	add.w	r3, r7, #20
 800b870:	4618      	mov	r0, r3
 800b872:	f001 f8c1 	bl	800c9f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b876:	2301      	movs	r3, #1
 800b878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b87a:	f001 ffa3 	bl	800d7c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b87e:	f000 fe1b 	bl	800c4b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b882:	f001 ff6f 	bl	800d764 <vPortEnterCritical>
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b88c:	b25b      	sxtb	r3, r3
 800b88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b892:	d103      	bne.n	800b89c <xQueueGenericSend+0x16c>
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a2:	b25b      	sxtb	r3, r3
 800b8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a8:	d103      	bne.n	800b8b2 <xQueueGenericSend+0x182>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8b2:	f001 ff87 	bl	800d7c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8b6:	1d3a      	adds	r2, r7, #4
 800b8b8:	f107 0314 	add.w	r3, r7, #20
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f001 f8b0 	bl	800ca24 <xTaskCheckForTimeOut>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d124      	bne.n	800b914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8cc:	f000 fb22 	bl	800bf14 <prvIsQueueFull>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d018      	beq.n	800b908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	3310      	adds	r3, #16
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 ffd6 	bl	800c890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e6:	f000 faad 	bl	800be44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8ea:	f000 fdf3 	bl	800c4d4 <xTaskResumeAll>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f47f af7c 	bne.w	800b7ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <xQueueGenericSend+0x1f8>)
 800b8f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	e772      	b.n	800b7ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b90a:	f000 fa9b 	bl	800be44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b90e:	f000 fde1 	bl	800c4d4 <xTaskResumeAll>
 800b912:	e76c      	b.n	800b7ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b916:	f000 fa95 	bl	800be44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b91a:	f000 fddb 	bl	800c4d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b91e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b920:	4618      	mov	r0, r3
 800b922:	3738      	adds	r7, #56	; 0x38
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	e000ed04 	.word	0xe000ed04

0800b92c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b090      	sub	sp, #64	; 0x40
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d103      	bne.n	800b968 <xQueueGenericSendFromISR+0x3c>
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <xQueueGenericSendFromISR+0x40>
 800b968:	2301      	movs	r3, #1
 800b96a:	e000      	b.n	800b96e <xQueueGenericSendFromISR+0x42>
 800b96c:	2300      	movs	r3, #0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d103      	bne.n	800b996 <xQueueGenericSendFromISR+0x6a>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <xQueueGenericSendFromISR+0x6e>
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <xQueueGenericSendFromISR+0x70>
 800b99a:	2300      	movs	r3, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	623b      	str	r3, [r7, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9b6:	f001 ffb7 	bl	800d928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	61fa      	str	r2, [r7, #28]
 800b9d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d302      	bcc.n	800b9e8 <xQueueGenericSendFromISR+0xbc>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d12f      	bne.n	800ba48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9fe:	f000 f991 	bl	800bd24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d112      	bne.n	800ba32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d016      	beq.n	800ba42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	3324      	adds	r3, #36	; 0x24
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 ff89 	bl	800c930 <xTaskRemoveFromEventList>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00e      	beq.n	800ba42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00b      	beq.n	800ba42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	e007      	b.n	800ba42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba36:	3301      	adds	r3, #1
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	b25a      	sxtb	r2, r3
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba42:	2301      	movs	r3, #1
 800ba44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba46:	e001      	b.n	800ba4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3740      	adds	r7, #64	; 0x40
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08c      	sub	sp, #48	; 0x30
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <xQueueReceive+0x30>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	623b      	str	r3, [r7, #32]
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <xQueueReceive+0x3e>
 800ba9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <xQueueReceive+0x42>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <xQueueReceive+0x44>
 800baa6:	2300      	movs	r3, #0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <xQueueReceive+0x5e>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	61fb      	str	r3, [r7, #28]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bac2:	f001 f8f7 	bl	800ccb4 <xTaskGetSchedulerState>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <xQueueReceive+0x6e>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <xQueueReceive+0x72>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e000      	b.n	800bad8 <xQueueReceive+0x74>
 800bad6:	2300      	movs	r3, #0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10a      	bne.n	800baf2 <xQueueReceive+0x8e>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	61bb      	str	r3, [r7, #24]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baf2:	f001 fe37 	bl	800d764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d01f      	beq.n	800bb42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb02:	68b9      	ldr	r1, [r7, #8]
 800bb04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb06:	f000 f977 	bl	800bdf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	1e5a      	subs	r2, r3, #1
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00f      	beq.n	800bb3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	3310      	adds	r3, #16
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 ff06 	bl	800c930 <xTaskRemoveFromEventList>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb2a:	4b3d      	ldr	r3, [pc, #244]	; (800bc20 <xQueueReceive+0x1bc>)
 800bb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb3a:	f001 fe43 	bl	800d7c4 <vPortExitCritical>
				return pdPASS;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e069      	b.n	800bc16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d103      	bne.n	800bb50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb48:	f001 fe3c 	bl	800d7c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e062      	b.n	800bc16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb56:	f107 0310 	add.w	r3, r7, #16
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 ff4c 	bl	800c9f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb60:	2301      	movs	r3, #1
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb64:	f001 fe2e 	bl	800d7c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb68:	f000 fca6 	bl	800c4b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb6c:	f001 fdfa 	bl	800d764 <vPortEnterCritical>
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb76:	b25b      	sxtb	r3, r3
 800bb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7c:	d103      	bne.n	800bb86 <xQueueReceive+0x122>
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb8c:	b25b      	sxtb	r3, r3
 800bb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb92:	d103      	bne.n	800bb9c <xQueueReceive+0x138>
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb9c:	f001 fe12 	bl	800d7c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bba0:	1d3a      	adds	r2, r7, #4
 800bba2:	f107 0310 	add.w	r3, r7, #16
 800bba6:	4611      	mov	r1, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 ff3b 	bl	800ca24 <xTaskCheckForTimeOut>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d123      	bne.n	800bbfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb6:	f000 f997 	bl	800bee8 <prvIsQueueEmpty>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d017      	beq.n	800bbf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	3324      	adds	r3, #36	; 0x24
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 fe61 	bl	800c890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbd0:	f000 f938 	bl	800be44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbd4:	f000 fc7e 	bl	800c4d4 <xTaskResumeAll>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d189      	bne.n	800baf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbde:	4b10      	ldr	r3, [pc, #64]	; (800bc20 <xQueueReceive+0x1bc>)
 800bbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	e780      	b.n	800baf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf2:	f000 f927 	bl	800be44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbf6:	f000 fc6d 	bl	800c4d4 <xTaskResumeAll>
 800bbfa:	e77a      	b.n	800baf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfe:	f000 f921 	bl	800be44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc02:	f000 fc67 	bl	800c4d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc08:	f000 f96e 	bl	800bee8 <prvIsQueueEmpty>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f43f af6f 	beq.w	800baf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08e      	sub	sp, #56	; 0x38
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10a      	bne.n	800bc50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	623b      	str	r3, [r7, #32]
}
 800bc4c:	bf00      	nop
 800bc4e:	e7fe      	b.n	800bc4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d103      	bne.n	800bc5e <xQueueReceiveFromISR+0x3a>
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <xQueueReceiveFromISR+0x3e>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <xQueueReceiveFromISR+0x40>
 800bc62:	2300      	movs	r3, #0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	61fb      	str	r3, [r7, #28]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc7e:	f001 fe53 	bl	800d928 <vPortValidateInterruptPriority>
	__asm volatile
 800bc82:	f3ef 8211 	mrs	r2, BASEPRI
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	61ba      	str	r2, [r7, #24]
 800bc98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bc9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d02f      	beq.n	800bd0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcb8:	f000 f89e 	bl	800bdf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bcc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bccc:	d112      	bne.n	800bcf4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d016      	beq.n	800bd04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	3310      	adds	r3, #16
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fe28 	bl	800c930 <xTaskRemoveFromEventList>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00e      	beq.n	800bd04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e007      	b.n	800bd04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	b25a      	sxtb	r2, r3
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd04:	2301      	movs	r3, #1
 800bd06:	637b      	str	r3, [r7, #52]	; 0x34
 800bd08:	e001      	b.n	800bd0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f383 8811 	msr	BASEPRI, r3
}
 800bd18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3738      	adds	r7, #56	; 0x38
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10d      	bne.n	800bd5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d14d      	bne.n	800bde6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 ffce 	bl	800ccf0 <xTaskPriorityDisinherit>
 800bd54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	609a      	str	r2, [r3, #8]
 800bd5c:	e043      	b.n	800bde6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d119      	bne.n	800bd98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6858      	ldr	r0, [r3, #4]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	f003 f962 	bl	800f038 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7c:	441a      	add	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d32b      	bcc.n	800bde6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	605a      	str	r2, [r3, #4]
 800bd96:	e026      	b.n	800bde6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	68d8      	ldr	r0, [r3, #12]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda0:	461a      	mov	r2, r3
 800bda2:	68b9      	ldr	r1, [r7, #8]
 800bda4:	f003 f948 	bl	800f038 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb0:	425b      	negs	r3, r3
 800bdb2:	441a      	add	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d207      	bcs.n	800bdd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdcc:	425b      	negs	r3, r3
 800bdce:	441a      	add	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d105      	bne.n	800bde6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	1c5a      	adds	r2, r3, #1
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdee:	697b      	ldr	r3, [r7, #20]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	d018      	beq.n	800be3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be12:	441a      	add	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	429a      	cmp	r2, r3
 800be22:	d303      	bcc.n	800be2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68d9      	ldr	r1, [r3, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be34:	461a      	mov	r2, r3
 800be36:	6838      	ldr	r0, [r7, #0]
 800be38:	f003 f8fe 	bl	800f038 <memcpy>
	}
}
 800be3c:	bf00      	nop
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be4c:	f001 fc8a 	bl	800d764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be58:	e011      	b.n	800be7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d012      	beq.n	800be88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3324      	adds	r3, #36	; 0x24
 800be66:	4618      	mov	r0, r3
 800be68:	f000 fd62 	bl	800c930 <xTaskRemoveFromEventList>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be72:	f000 fe39 	bl	800cae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	3b01      	subs	r3, #1
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	dce9      	bgt.n	800be5a <prvUnlockQueue+0x16>
 800be86:	e000      	b.n	800be8a <prvUnlockQueue+0x46>
					break;
 800be88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	22ff      	movs	r2, #255	; 0xff
 800be8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be92:	f001 fc97 	bl	800d7c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be96:	f001 fc65 	bl	800d764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bea0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bea2:	e011      	b.n	800bec8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d012      	beq.n	800bed2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	3310      	adds	r3, #16
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 fd3d 	bl	800c930 <xTaskRemoveFromEventList>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bebc:	f000 fe14 	bl	800cae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	3b01      	subs	r3, #1
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dce9      	bgt.n	800bea4 <prvUnlockQueue+0x60>
 800bed0:	e000      	b.n	800bed4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bed2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	22ff      	movs	r2, #255	; 0xff
 800bed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bedc:	f001 fc72 	bl	800d7c4 <vPortExitCritical>
}
 800bee0:	bf00      	nop
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bef0:	f001 fc38 	bl	800d764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800befc:	2301      	movs	r3, #1
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	e001      	b.n	800bf06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf06:	f001 fc5d 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf1c:	f001 fc22 	bl	800d764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d102      	bne.n	800bf32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e001      	b.n	800bf36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf36:	f001 fc45 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e014      	b.n	800bf7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf54:	4a0f      	ldr	r2, [pc, #60]	; (800bf94 <vQueueAddToRegistry+0x50>)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10b      	bne.n	800bf78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf60:	490c      	ldr	r1, [pc, #48]	; (800bf94 <vQueueAddToRegistry+0x50>)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf6a:	4a0a      	ldr	r2, [pc, #40]	; (800bf94 <vQueueAddToRegistry+0x50>)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	4413      	add	r3, r2
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf76:	e006      	b.n	800bf86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b07      	cmp	r3, #7
 800bf82:	d9e7      	bls.n	800bf54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf84:	bf00      	nop
 800bf86:	bf00      	nop
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20001268 	.word	0x20001268

0800bf98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bfa8:	f001 fbdc 	bl	800d764 <vPortEnterCritical>
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfb2:	b25b      	sxtb	r3, r3
 800bfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb8:	d103      	bne.n	800bfc2 <vQueueWaitForMessageRestricted+0x2a>
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfc8:	b25b      	sxtb	r3, r3
 800bfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfce:	d103      	bne.n	800bfd8 <vQueueWaitForMessageRestricted+0x40>
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfd8:	f001 fbf4 	bl	800d7c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d106      	bne.n	800bff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	3324      	adds	r3, #36	; 0x24
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	68b9      	ldr	r1, [r7, #8]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fc73 	bl	800c8d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bff2:	6978      	ldr	r0, [r7, #20]
 800bff4:	f7ff ff26 	bl	800be44 <prvUnlockQueue>
	}
 800bff8:	bf00      	nop
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08e      	sub	sp, #56	; 0x38
 800c004:	af04      	add	r7, sp, #16
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	623b      	str	r3, [r7, #32]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10a      	bne.n	800c046 <xTaskCreateStatic+0x46>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	61fb      	str	r3, [r7, #28]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c046:	23a8      	movs	r3, #168	; 0xa8
 800c048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2ba8      	cmp	r3, #168	; 0xa8
 800c04e:	d00a      	beq.n	800c066 <xTaskCreateStatic+0x66>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	61bb      	str	r3, [r7, #24]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c066:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d01e      	beq.n	800c0ac <xTaskCreateStatic+0xac>
 800c06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c070:	2b00      	cmp	r3, #0
 800c072:	d01b      	beq.n	800c0ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c07c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c080:	2202      	movs	r2, #2
 800c082:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c086:	2300      	movs	r3, #0
 800c088:	9303      	str	r3, [sp, #12]
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	f107 0314 	add.w	r3, r7, #20
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 f850 	bl	800c144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0a6:	f000 f8f3 	bl	800c290 <prvAddNewTaskToReadyList>
 800c0aa:	e001      	b.n	800c0b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0b0:	697b      	ldr	r3, [r7, #20]
	}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3728      	adds	r7, #40	; 0x28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b08c      	sub	sp, #48	; 0x30
 800c0be:	af04      	add	r7, sp, #16
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	603b      	str	r3, [r7, #0]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f001 fc6a 	bl	800d9a8 <pvPortMalloc>
 800c0d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00e      	beq.n	800c0fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0dc:	20a8      	movs	r0, #168	; 0xa8
 800c0de:	f001 fc63 	bl	800d9a8 <pvPortMalloc>
 800c0e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	697a      	ldr	r2, [r7, #20]
 800c0ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c0f0:	e005      	b.n	800c0fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0f2:	6978      	ldr	r0, [r7, #20]
 800c0f4:	f001 fd24 	bl	800db40 <vPortFree>
 800c0f8:	e001      	b.n	800c0fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d017      	beq.n	800c134 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c10c:	88fa      	ldrh	r2, [r7, #6]
 800c10e:	2300      	movs	r3, #0
 800c110:	9303      	str	r3, [sp, #12]
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	9302      	str	r3, [sp, #8]
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 f80e 	bl	800c144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c128:	69f8      	ldr	r0, [r7, #28]
 800c12a:	f000 f8b1 	bl	800c290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c12e:	2301      	movs	r3, #1
 800c130:	61bb      	str	r3, [r7, #24]
 800c132:	e002      	b.n	800c13a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c134:	f04f 33ff 	mov.w	r3, #4294967295
 800c138:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c13a:	69bb      	ldr	r3, [r7, #24]
	}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	461a      	mov	r2, r3
 800c15c:	21a5      	movs	r1, #165	; 0xa5
 800c15e:	f002 fe86 	bl	800ee6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c16c:	3b01      	subs	r3, #1
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f023 0307 	bic.w	r3, r3, #7
 800c17a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	f003 0307 	and.w	r3, r3, #7
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00a      	beq.n	800c19c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	617b      	str	r3, [r7, #20]
}
 800c198:	bf00      	nop
 800c19a:	e7fe      	b.n	800c19a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d01f      	beq.n	800c1e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	e012      	b.n	800c1ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	7819      	ldrb	r1, [r3, #0]
 800c1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	3334      	adds	r3, #52	; 0x34
 800c1b8:	460a      	mov	r2, r1
 800c1ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	61fb      	str	r3, [r7, #28]
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	d9e9      	bls.n	800c1a8 <prvInitialiseNewTask+0x64>
 800c1d4:	e000      	b.n	800c1d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c1d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1e0:	e003      	b.n	800c1ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	2b37      	cmp	r3, #55	; 0x37
 800c1ee:	d901      	bls.n	800c1f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1f0:	2337      	movs	r3, #55	; 0x37
 800c1f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	2200      	movs	r2, #0
 800c204:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	3304      	adds	r3, #4
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff f8be 	bl	800b38c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	3318      	adds	r3, #24
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff f8b9 	bl	800b38c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	3354      	adds	r3, #84	; 0x54
 800c244:	224c      	movs	r2, #76	; 0x4c
 800c246:	2100      	movs	r1, #0
 800c248:	4618      	mov	r0, r3
 800c24a:	f002 fe10 	bl	800ee6e <memset>
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	4a0c      	ldr	r2, [pc, #48]	; (800c284 <prvInitialiseNewTask+0x140>)
 800c252:	659a      	str	r2, [r3, #88]	; 0x58
 800c254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c256:	4a0c      	ldr	r2, [pc, #48]	; (800c288 <prvInitialiseNewTask+0x144>)
 800c258:	65da      	str	r2, [r3, #92]	; 0x5c
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	4a0b      	ldr	r2, [pc, #44]	; (800c28c <prvInitialiseNewTask+0x148>)
 800c25e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	68f9      	ldr	r1, [r7, #12]
 800c264:	69b8      	ldr	r0, [r7, #24]
 800c266:	f001 f953 	bl	800d510 <pxPortInitialiseStack>
 800c26a:	4602      	mov	r2, r0
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c27a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c27c:	bf00      	nop
 800c27e:	3720      	adds	r7, #32
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	2000705c 	.word	0x2000705c
 800c288:	200070c4 	.word	0x200070c4
 800c28c:	2000712c 	.word	0x2000712c

0800c290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c298:	f001 fa64 	bl	800d764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c29c:	4b2d      	ldr	r3, [pc, #180]	; (800c354 <prvAddNewTaskToReadyList+0xc4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	4a2c      	ldr	r2, [pc, #176]	; (800c354 <prvAddNewTaskToReadyList+0xc4>)
 800c2a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c2a6:	4b2c      	ldr	r3, [pc, #176]	; (800c358 <prvAddNewTaskToReadyList+0xc8>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c2ae:	4a2a      	ldr	r2, [pc, #168]	; (800c358 <prvAddNewTaskToReadyList+0xc8>)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c2b4:	4b27      	ldr	r3, [pc, #156]	; (800c354 <prvAddNewTaskToReadyList+0xc4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d110      	bne.n	800c2de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c2bc:	f000 fc38 	bl	800cb30 <prvInitialiseTaskLists>
 800c2c0:	e00d      	b.n	800c2de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c2c2:	4b26      	ldr	r3, [pc, #152]	; (800c35c <prvAddNewTaskToReadyList+0xcc>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d109      	bne.n	800c2de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2ca:	4b23      	ldr	r3, [pc, #140]	; (800c358 <prvAddNewTaskToReadyList+0xc8>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d802      	bhi.n	800c2de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2d8:	4a1f      	ldr	r2, [pc, #124]	; (800c358 <prvAddNewTaskToReadyList+0xc8>)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2de:	4b20      	ldr	r3, [pc, #128]	; (800c360 <prvAddNewTaskToReadyList+0xd0>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	4a1e      	ldr	r2, [pc, #120]	; (800c360 <prvAddNewTaskToReadyList+0xd0>)
 800c2e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2e8:	4b1d      	ldr	r3, [pc, #116]	; (800c360 <prvAddNewTaskToReadyList+0xd0>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f4:	4b1b      	ldr	r3, [pc, #108]	; (800c364 <prvAddNewTaskToReadyList+0xd4>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d903      	bls.n	800c304 <prvAddNewTaskToReadyList+0x74>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	4a18      	ldr	r2, [pc, #96]	; (800c364 <prvAddNewTaskToReadyList+0xd4>)
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4a15      	ldr	r2, [pc, #84]	; (800c368 <prvAddNewTaskToReadyList+0xd8>)
 800c312:	441a      	add	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	3304      	adds	r3, #4
 800c318:	4619      	mov	r1, r3
 800c31a:	4610      	mov	r0, r2
 800c31c:	f7ff f843 	bl	800b3a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c320:	f001 fa50 	bl	800d7c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c324:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <prvAddNewTaskToReadyList+0xcc>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00e      	beq.n	800c34a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c32c:	4b0a      	ldr	r3, [pc, #40]	; (800c358 <prvAddNewTaskToReadyList+0xc8>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	429a      	cmp	r2, r3
 800c338:	d207      	bcs.n	800c34a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <prvAddNewTaskToReadyList+0xdc>)
 800c33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c340:	601a      	str	r2, [r3, #0]
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	2000177c 	.word	0x2000177c
 800c358:	200012a8 	.word	0x200012a8
 800c35c:	20001788 	.word	0x20001788
 800c360:	20001798 	.word	0x20001798
 800c364:	20001784 	.word	0x20001784
 800c368:	200012ac 	.word	0x200012ac
 800c36c:	e000ed04 	.word	0xe000ed04

0800c370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c378:	2300      	movs	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d017      	beq.n	800c3b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c382:	4b13      	ldr	r3, [pc, #76]	; (800c3d0 <vTaskDelay+0x60>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <vTaskDelay+0x30>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	60bb      	str	r3, [r7, #8]
}
 800c39c:	bf00      	nop
 800c39e:	e7fe      	b.n	800c39e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c3a0:	f000 f88a 	bl	800c4b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fd10 	bl	800cdcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3ac:	f000 f892 	bl	800c4d4 <xTaskResumeAll>
 800c3b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d107      	bne.n	800c3c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c3b8:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <vTaskDelay+0x64>)
 800c3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3c8:	bf00      	nop
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	200017a4 	.word	0x200017a4
 800c3d4:	e000ed04 	.word	0xe000ed04

0800c3d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3e6:	463a      	mov	r2, r7
 800c3e8:	1d39      	adds	r1, r7, #4
 800c3ea:	f107 0308 	add.w	r3, r7, #8
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe ff78 	bl	800b2e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	9202      	str	r2, [sp, #8]
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	2300      	movs	r3, #0
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	2300      	movs	r3, #0
 800c404:	460a      	mov	r2, r1
 800c406:	4924      	ldr	r1, [pc, #144]	; (800c498 <vTaskStartScheduler+0xc0>)
 800c408:	4824      	ldr	r0, [pc, #144]	; (800c49c <vTaskStartScheduler+0xc4>)
 800c40a:	f7ff fdf9 	bl	800c000 <xTaskCreateStatic>
 800c40e:	4603      	mov	r3, r0
 800c410:	4a23      	ldr	r2, [pc, #140]	; (800c4a0 <vTaskStartScheduler+0xc8>)
 800c412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c414:	4b22      	ldr	r3, [pc, #136]	; (800c4a0 <vTaskStartScheduler+0xc8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c41c:	2301      	movs	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	e001      	b.n	800c426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c422:	2300      	movs	r3, #0
 800c424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d102      	bne.n	800c432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c42c:	f000 fd22 	bl	800ce74 <xTimerCreateTimerTask>
 800c430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d11b      	bne.n	800c470 <vTaskStartScheduler+0x98>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	613b      	str	r3, [r7, #16]
}
 800c44a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c44c:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <vTaskStartScheduler+0xcc>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3354      	adds	r3, #84	; 0x54
 800c452:	4a15      	ldr	r2, [pc, #84]	; (800c4a8 <vTaskStartScheduler+0xd0>)
 800c454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c456:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <vTaskStartScheduler+0xd4>)
 800c458:	f04f 32ff 	mov.w	r2, #4294967295
 800c45c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c45e:	4b14      	ldr	r3, [pc, #80]	; (800c4b0 <vTaskStartScheduler+0xd8>)
 800c460:	2201      	movs	r2, #1
 800c462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c464:	4b13      	ldr	r3, [pc, #76]	; (800c4b4 <vTaskStartScheduler+0xdc>)
 800c466:	2200      	movs	r2, #0
 800c468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c46a:	f001 f8d9 	bl	800d620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c46e:	e00e      	b.n	800c48e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c476:	d10a      	bne.n	800c48e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	60fb      	str	r3, [r7, #12]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <vTaskStartScheduler+0xb4>
}
 800c48e:	bf00      	nop
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	08013f5c 	.word	0x08013f5c
 800c49c:	0800cb01 	.word	0x0800cb01
 800c4a0:	200017a0 	.word	0x200017a0
 800c4a4:	200012a8 	.word	0x200012a8
 800c4a8:	2000006c 	.word	0x2000006c
 800c4ac:	2000179c 	.word	0x2000179c
 800c4b0:	20001788 	.word	0x20001788
 800c4b4:	20001780 	.word	0x20001780

0800c4b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c4bc:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <vTaskSuspendAll+0x18>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	4a03      	ldr	r2, [pc, #12]	; (800c4d0 <vTaskSuspendAll+0x18>)
 800c4c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c4c6:	bf00      	nop
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	200017a4 	.word	0x200017a4

0800c4d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4e2:	4b42      	ldr	r3, [pc, #264]	; (800c5ec <xTaskResumeAll+0x118>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10a      	bne.n	800c500 <xTaskResumeAll+0x2c>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	603b      	str	r3, [r7, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c500:	f001 f930 	bl	800d764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c504:	4b39      	ldr	r3, [pc, #228]	; (800c5ec <xTaskResumeAll+0x118>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	3b01      	subs	r3, #1
 800c50a:	4a38      	ldr	r2, [pc, #224]	; (800c5ec <xTaskResumeAll+0x118>)
 800c50c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c50e:	4b37      	ldr	r3, [pc, #220]	; (800c5ec <xTaskResumeAll+0x118>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d162      	bne.n	800c5dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c516:	4b36      	ldr	r3, [pc, #216]	; (800c5f0 <xTaskResumeAll+0x11c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d05e      	beq.n	800c5dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c51e:	e02f      	b.n	800c580 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c520:	4b34      	ldr	r3, [pc, #208]	; (800c5f4 <xTaskResumeAll+0x120>)
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	3318      	adds	r3, #24
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe ff97 	bl	800b460 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3304      	adds	r3, #4
 800c536:	4618      	mov	r0, r3
 800c538:	f7fe ff92 	bl	800b460 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c540:	4b2d      	ldr	r3, [pc, #180]	; (800c5f8 <xTaskResumeAll+0x124>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d903      	bls.n	800c550 <xTaskResumeAll+0x7c>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54c:	4a2a      	ldr	r2, [pc, #168]	; (800c5f8 <xTaskResumeAll+0x124>)
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c554:	4613      	mov	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4a27      	ldr	r2, [pc, #156]	; (800c5fc <xTaskResumeAll+0x128>)
 800c55e:	441a      	add	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f7fe ff1d 	bl	800b3a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c570:	4b23      	ldr	r3, [pc, #140]	; (800c600 <xTaskResumeAll+0x12c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	429a      	cmp	r2, r3
 800c578:	d302      	bcc.n	800c580 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c57a:	4b22      	ldr	r3, [pc, #136]	; (800c604 <xTaskResumeAll+0x130>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c580:	4b1c      	ldr	r3, [pc, #112]	; (800c5f4 <xTaskResumeAll+0x120>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1cb      	bne.n	800c520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c58e:	f000 fb71 	bl	800cc74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c592:	4b1d      	ldr	r3, [pc, #116]	; (800c608 <xTaskResumeAll+0x134>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d010      	beq.n	800c5c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c59e:	f000 f859 	bl	800c654 <xTaskIncrementTick>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c5a8:	4b16      	ldr	r3, [pc, #88]	; (800c604 <xTaskResumeAll+0x130>)
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1f1      	bne.n	800c59e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c5ba:	4b13      	ldr	r3, [pc, #76]	; (800c608 <xTaskResumeAll+0x134>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5c0:	4b10      	ldr	r3, [pc, #64]	; (800c604 <xTaskResumeAll+0x130>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d009      	beq.n	800c5dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5cc:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <xTaskResumeAll+0x138>)
 800c5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5dc:	f001 f8f2 	bl	800d7c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200017a4 	.word	0x200017a4
 800c5f0:	2000177c 	.word	0x2000177c
 800c5f4:	2000173c 	.word	0x2000173c
 800c5f8:	20001784 	.word	0x20001784
 800c5fc:	200012ac 	.word	0x200012ac
 800c600:	200012a8 	.word	0x200012a8
 800c604:	20001790 	.word	0x20001790
 800c608:	2000178c 	.word	0x2000178c
 800c60c:	e000ed04 	.word	0xe000ed04

0800c610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c616:	4b05      	ldr	r3, [pc, #20]	; (800c62c <xTaskGetTickCount+0x1c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c61c:	687b      	ldr	r3, [r7, #4]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	20001780 	.word	0x20001780

0800c630 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c636:	f001 f977 	bl	800d928 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c63a:	2300      	movs	r3, #0
 800c63c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c63e:	4b04      	ldr	r3, [pc, #16]	; (800c650 <xTaskGetTickCountFromISR+0x20>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c644:	683b      	ldr	r3, [r7, #0]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20001780 	.word	0x20001780

0800c654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c65e:	4b4f      	ldr	r3, [pc, #316]	; (800c79c <xTaskIncrementTick+0x148>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 808f 	bne.w	800c786 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c668:	4b4d      	ldr	r3, [pc, #308]	; (800c7a0 <xTaskIncrementTick+0x14c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3301      	adds	r3, #1
 800c66e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c670:	4a4b      	ldr	r2, [pc, #300]	; (800c7a0 <xTaskIncrementTick+0x14c>)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d120      	bne.n	800c6be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c67c:	4b49      	ldr	r3, [pc, #292]	; (800c7a4 <xTaskIncrementTick+0x150>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00a      	beq.n	800c69c <xTaskIncrementTick+0x48>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	603b      	str	r3, [r7, #0]
}
 800c698:	bf00      	nop
 800c69a:	e7fe      	b.n	800c69a <xTaskIncrementTick+0x46>
 800c69c:	4b41      	ldr	r3, [pc, #260]	; (800c7a4 <xTaskIncrementTick+0x150>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	4b41      	ldr	r3, [pc, #260]	; (800c7a8 <xTaskIncrementTick+0x154>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a3f      	ldr	r2, [pc, #252]	; (800c7a4 <xTaskIncrementTick+0x150>)
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	4a3f      	ldr	r2, [pc, #252]	; (800c7a8 <xTaskIncrementTick+0x154>)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6013      	str	r3, [r2, #0]
 800c6b0:	4b3e      	ldr	r3, [pc, #248]	; (800c7ac <xTaskIncrementTick+0x158>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	4a3d      	ldr	r2, [pc, #244]	; (800c7ac <xTaskIncrementTick+0x158>)
 800c6b8:	6013      	str	r3, [r2, #0]
 800c6ba:	f000 fadb 	bl	800cc74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6be:	4b3c      	ldr	r3, [pc, #240]	; (800c7b0 <xTaskIncrementTick+0x15c>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	693a      	ldr	r2, [r7, #16]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d349      	bcc.n	800c75c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6c8:	4b36      	ldr	r3, [pc, #216]	; (800c7a4 <xTaskIncrementTick+0x150>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d104      	bne.n	800c6dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6d2:	4b37      	ldr	r3, [pc, #220]	; (800c7b0 <xTaskIncrementTick+0x15c>)
 800c6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d8:	601a      	str	r2, [r3, #0]
					break;
 800c6da:	e03f      	b.n	800c75c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6dc:	4b31      	ldr	r3, [pc, #196]	; (800c7a4 <xTaskIncrementTick+0x150>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d203      	bcs.n	800c6fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6f4:	4a2e      	ldr	r2, [pc, #184]	; (800c7b0 <xTaskIncrementTick+0x15c>)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6fa:	e02f      	b.n	800c75c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	3304      	adds	r3, #4
 800c700:	4618      	mov	r0, r3
 800c702:	f7fe fead 	bl	800b460 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d004      	beq.n	800c718 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	3318      	adds	r3, #24
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe fea4 	bl	800b460 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c71c:	4b25      	ldr	r3, [pc, #148]	; (800c7b4 <xTaskIncrementTick+0x160>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d903      	bls.n	800c72c <xTaskIncrementTick+0xd8>
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	4a22      	ldr	r2, [pc, #136]	; (800c7b4 <xTaskIncrementTick+0x160>)
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c730:	4613      	mov	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <xTaskIncrementTick+0x164>)
 800c73a:	441a      	add	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	3304      	adds	r3, #4
 800c740:	4619      	mov	r1, r3
 800c742:	4610      	mov	r0, r2
 800c744:	f7fe fe2f 	bl	800b3a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74c:	4b1b      	ldr	r3, [pc, #108]	; (800c7bc <xTaskIncrementTick+0x168>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	429a      	cmp	r2, r3
 800c754:	d3b8      	bcc.n	800c6c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c756:	2301      	movs	r3, #1
 800c758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c75a:	e7b5      	b.n	800c6c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c75c:	4b17      	ldr	r3, [pc, #92]	; (800c7bc <xTaskIncrementTick+0x168>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c762:	4915      	ldr	r1, [pc, #84]	; (800c7b8 <xTaskIncrementTick+0x164>)
 800c764:	4613      	mov	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	440b      	add	r3, r1
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d901      	bls.n	800c778 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c778:	4b11      	ldr	r3, [pc, #68]	; (800c7c0 <xTaskIncrementTick+0x16c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d007      	beq.n	800c790 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e004      	b.n	800c790 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c786:	4b0f      	ldr	r3, [pc, #60]	; (800c7c4 <xTaskIncrementTick+0x170>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3301      	adds	r3, #1
 800c78c:	4a0d      	ldr	r2, [pc, #52]	; (800c7c4 <xTaskIncrementTick+0x170>)
 800c78e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c790:	697b      	ldr	r3, [r7, #20]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	200017a4 	.word	0x200017a4
 800c7a0:	20001780 	.word	0x20001780
 800c7a4:	20001734 	.word	0x20001734
 800c7a8:	20001738 	.word	0x20001738
 800c7ac:	20001794 	.word	0x20001794
 800c7b0:	2000179c 	.word	0x2000179c
 800c7b4:	20001784 	.word	0x20001784
 800c7b8:	200012ac 	.word	0x200012ac
 800c7bc:	200012a8 	.word	0x200012a8
 800c7c0:	20001790 	.word	0x20001790
 800c7c4:	2000178c 	.word	0x2000178c

0800c7c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7ce:	4b2a      	ldr	r3, [pc, #168]	; (800c878 <vTaskSwitchContext+0xb0>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7d6:	4b29      	ldr	r3, [pc, #164]	; (800c87c <vTaskSwitchContext+0xb4>)
 800c7d8:	2201      	movs	r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7dc:	e046      	b.n	800c86c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c7de:	4b27      	ldr	r3, [pc, #156]	; (800c87c <vTaskSwitchContext+0xb4>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e4:	4b26      	ldr	r3, [pc, #152]	; (800c880 <vTaskSwitchContext+0xb8>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e010      	b.n	800c80e <vTaskSwitchContext+0x46>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <vTaskSwitchContext+0x40>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	607b      	str	r3, [r7, #4]
}
 800c804:	bf00      	nop
 800c806:	e7fe      	b.n	800c806 <vTaskSwitchContext+0x3e>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3b01      	subs	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	491d      	ldr	r1, [pc, #116]	; (800c884 <vTaskSwitchContext+0xbc>)
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	440b      	add	r3, r1
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0e4      	beq.n	800c7ec <vTaskSwitchContext+0x24>
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	4613      	mov	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4a15      	ldr	r2, [pc, #84]	; (800c884 <vTaskSwitchContext+0xbc>)
 800c82e:	4413      	add	r3, r2
 800c830:	60bb      	str	r3, [r7, #8]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	605a      	str	r2, [r3, #4]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	3308      	adds	r3, #8
 800c844:	429a      	cmp	r2, r3
 800c846:	d104      	bne.n	800c852 <vTaskSwitchContext+0x8a>
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	605a      	str	r2, [r3, #4]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	4a0b      	ldr	r2, [pc, #44]	; (800c888 <vTaskSwitchContext+0xc0>)
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	4a08      	ldr	r2, [pc, #32]	; (800c880 <vTaskSwitchContext+0xb8>)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c862:	4b09      	ldr	r3, [pc, #36]	; (800c888 <vTaskSwitchContext+0xc0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3354      	adds	r3, #84	; 0x54
 800c868:	4a08      	ldr	r2, [pc, #32]	; (800c88c <vTaskSwitchContext+0xc4>)
 800c86a:	6013      	str	r3, [r2, #0]
}
 800c86c:	bf00      	nop
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	200017a4 	.word	0x200017a4
 800c87c:	20001790 	.word	0x20001790
 800c880:	20001784 	.word	0x20001784
 800c884:	200012ac 	.word	0x200012ac
 800c888:	200012a8 	.word	0x200012a8
 800c88c:	2000006c 	.word	0x2000006c

0800c890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10a      	bne.n	800c8b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	60fb      	str	r3, [r7, #12]
}
 800c8b2:	bf00      	nop
 800c8b4:	e7fe      	b.n	800c8b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8b6:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <vTaskPlaceOnEventList+0x44>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3318      	adds	r3, #24
 800c8bc:	4619      	mov	r1, r3
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7fe fd95 	bl	800b3ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	6838      	ldr	r0, [r7, #0]
 800c8c8:	f000 fa80 	bl	800cdcc <prvAddCurrentTaskToDelayedList>
}
 800c8cc:	bf00      	nop
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	200012a8 	.word	0x200012a8

0800c8d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10a      	bne.n	800c900 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	617b      	str	r3, [r7, #20]
}
 800c8fc:	bf00      	nop
 800c8fe:	e7fe      	b.n	800c8fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c900:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <vTaskPlaceOnEventListRestricted+0x54>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3318      	adds	r3, #24
 800c906:	4619      	mov	r1, r3
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f7fe fd4c 	bl	800b3a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c914:	f04f 33ff 	mov.w	r3, #4294967295
 800c918:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c91a:	6879      	ldr	r1, [r7, #4]
 800c91c:	68b8      	ldr	r0, [r7, #8]
 800c91e:	f000 fa55 	bl	800cdcc <prvAddCurrentTaskToDelayedList>
	}
 800c922:	bf00      	nop
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	200012a8 	.word	0x200012a8

0800c930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60fb      	str	r3, [r7, #12]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	3318      	adds	r3, #24
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe fd7d 	bl	800b460 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c966:	4b1e      	ldr	r3, [pc, #120]	; (800c9e0 <xTaskRemoveFromEventList+0xb0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d11d      	bne.n	800c9aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	3304      	adds	r3, #4
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fd74 	bl	800b460 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97c:	4b19      	ldr	r3, [pc, #100]	; (800c9e4 <xTaskRemoveFromEventList+0xb4>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	429a      	cmp	r2, r3
 800c982:	d903      	bls.n	800c98c <xTaskRemoveFromEventList+0x5c>
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c988:	4a16      	ldr	r2, [pc, #88]	; (800c9e4 <xTaskRemoveFromEventList+0xb4>)
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c990:	4613      	mov	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4a13      	ldr	r2, [pc, #76]	; (800c9e8 <xTaskRemoveFromEventList+0xb8>)
 800c99a:	441a      	add	r2, r3
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f7fe fcff 	bl	800b3a6 <vListInsertEnd>
 800c9a8:	e005      	b.n	800c9b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	3318      	adds	r3, #24
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	480e      	ldr	r0, [pc, #56]	; (800c9ec <xTaskRemoveFromEventList+0xbc>)
 800c9b2:	f7fe fcf8 	bl	800b3a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ba:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <xTaskRemoveFromEventList+0xc0>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d905      	bls.n	800c9d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9c8:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <xTaskRemoveFromEventList+0xc4>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	e001      	b.n	800c9d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9d4:	697b      	ldr	r3, [r7, #20]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	200017a4 	.word	0x200017a4
 800c9e4:	20001784 	.word	0x20001784
 800c9e8:	200012ac 	.word	0x200012ac
 800c9ec:	2000173c 	.word	0x2000173c
 800c9f0:	200012a8 	.word	0x200012a8
 800c9f4:	20001790 	.word	0x20001790

0800c9f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca00:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <vTaskInternalSetTimeOutState+0x24>)
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca08:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <vTaskInternalSetTimeOutState+0x28>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	605a      	str	r2, [r3, #4]
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	20001794 	.word	0x20001794
 800ca20:	20001780 	.word	0x20001780

0800ca24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b088      	sub	sp, #32
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10a      	bne.n	800ca4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	613b      	str	r3, [r7, #16]
}
 800ca46:	bf00      	nop
 800ca48:	e7fe      	b.n	800ca48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	60fb      	str	r3, [r7, #12]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca66:	f000 fe7d 	bl	800d764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca6a:	4b1d      	ldr	r3, [pc, #116]	; (800cae0 <xTaskCheckForTimeOut+0xbc>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca82:	d102      	bne.n	800ca8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	61fb      	str	r3, [r7, #28]
 800ca88:	e023      	b.n	800cad2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	4b15      	ldr	r3, [pc, #84]	; (800cae4 <xTaskCheckForTimeOut+0xc0>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d007      	beq.n	800caa6 <xTaskCheckForTimeOut+0x82>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	69ba      	ldr	r2, [r7, #24]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d302      	bcc.n	800caa6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800caa0:	2301      	movs	r3, #1
 800caa2:	61fb      	str	r3, [r7, #28]
 800caa4:	e015      	b.n	800cad2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	429a      	cmp	r2, r3
 800caae:	d20b      	bcs.n	800cac8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	1ad2      	subs	r2, r2, r3
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7ff ff9b 	bl	800c9f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cac2:	2300      	movs	r3, #0
 800cac4:	61fb      	str	r3, [r7, #28]
 800cac6:	e004      	b.n	800cad2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cace:	2301      	movs	r3, #1
 800cad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cad2:	f000 fe77 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800cad6:	69fb      	ldr	r3, [r7, #28]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3720      	adds	r7, #32
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20001780 	.word	0x20001780
 800cae4:	20001794 	.word	0x20001794

0800cae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cae8:	b480      	push	{r7}
 800caea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800caec:	4b03      	ldr	r3, [pc, #12]	; (800cafc <vTaskMissedYield+0x14>)
 800caee:	2201      	movs	r2, #1
 800caf0:	601a      	str	r2, [r3, #0]
}
 800caf2:	bf00      	nop
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	20001790 	.word	0x20001790

0800cb00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb08:	f000 f852 	bl	800cbb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb0c:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <prvIdleTask+0x28>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d9f9      	bls.n	800cb08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb14:	4b05      	ldr	r3, [pc, #20]	; (800cb2c <prvIdleTask+0x2c>)
 800cb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb24:	e7f0      	b.n	800cb08 <prvIdleTask+0x8>
 800cb26:	bf00      	nop
 800cb28:	200012ac 	.word	0x200012ac
 800cb2c:	e000ed04 	.word	0xe000ed04

0800cb30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb36:	2300      	movs	r3, #0
 800cb38:	607b      	str	r3, [r7, #4]
 800cb3a:	e00c      	b.n	800cb56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4a12      	ldr	r2, [pc, #72]	; (800cb90 <prvInitialiseTaskLists+0x60>)
 800cb48:	4413      	add	r3, r2
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fbfe 	bl	800b34c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	3301      	adds	r3, #1
 800cb54:	607b      	str	r3, [r7, #4]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b37      	cmp	r3, #55	; 0x37
 800cb5a:	d9ef      	bls.n	800cb3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb5c:	480d      	ldr	r0, [pc, #52]	; (800cb94 <prvInitialiseTaskLists+0x64>)
 800cb5e:	f7fe fbf5 	bl	800b34c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb62:	480d      	ldr	r0, [pc, #52]	; (800cb98 <prvInitialiseTaskLists+0x68>)
 800cb64:	f7fe fbf2 	bl	800b34c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb68:	480c      	ldr	r0, [pc, #48]	; (800cb9c <prvInitialiseTaskLists+0x6c>)
 800cb6a:	f7fe fbef 	bl	800b34c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb6e:	480c      	ldr	r0, [pc, #48]	; (800cba0 <prvInitialiseTaskLists+0x70>)
 800cb70:	f7fe fbec 	bl	800b34c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb74:	480b      	ldr	r0, [pc, #44]	; (800cba4 <prvInitialiseTaskLists+0x74>)
 800cb76:	f7fe fbe9 	bl	800b34c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb7a:	4b0b      	ldr	r3, [pc, #44]	; (800cba8 <prvInitialiseTaskLists+0x78>)
 800cb7c:	4a05      	ldr	r2, [pc, #20]	; (800cb94 <prvInitialiseTaskLists+0x64>)
 800cb7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <prvInitialiseTaskLists+0x7c>)
 800cb82:	4a05      	ldr	r2, [pc, #20]	; (800cb98 <prvInitialiseTaskLists+0x68>)
 800cb84:	601a      	str	r2, [r3, #0]
}
 800cb86:	bf00      	nop
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	200012ac 	.word	0x200012ac
 800cb94:	2000170c 	.word	0x2000170c
 800cb98:	20001720 	.word	0x20001720
 800cb9c:	2000173c 	.word	0x2000173c
 800cba0:	20001750 	.word	0x20001750
 800cba4:	20001768 	.word	0x20001768
 800cba8:	20001734 	.word	0x20001734
 800cbac:	20001738 	.word	0x20001738

0800cbb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbb6:	e019      	b.n	800cbec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbb8:	f000 fdd4 	bl	800d764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbbc:	4b10      	ldr	r3, [pc, #64]	; (800cc00 <prvCheckTasksWaitingTermination+0x50>)
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fc49 	bl	800b460 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbce:	4b0d      	ldr	r3, [pc, #52]	; (800cc04 <prvCheckTasksWaitingTermination+0x54>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	4a0b      	ldr	r2, [pc, #44]	; (800cc04 <prvCheckTasksWaitingTermination+0x54>)
 800cbd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbd8:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <prvCheckTasksWaitingTermination+0x58>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	4a0a      	ldr	r2, [pc, #40]	; (800cc08 <prvCheckTasksWaitingTermination+0x58>)
 800cbe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbe2:	f000 fdef 	bl	800d7c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 f810 	bl	800cc0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbec:	4b06      	ldr	r3, [pc, #24]	; (800cc08 <prvCheckTasksWaitingTermination+0x58>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e1      	bne.n	800cbb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20001750 	.word	0x20001750
 800cc04:	2000177c 	.word	0x2000177c
 800cc08:	20001764 	.word	0x20001764

0800cc0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	3354      	adds	r3, #84	; 0x54
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f002 f945 	bl	800eea8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d108      	bne.n	800cc3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 ff87 	bl	800db40 <vPortFree>
				vPortFree( pxTCB );
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 ff84 	bl	800db40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc38:	e018      	b.n	800cc6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d103      	bne.n	800cc4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 ff7b 	bl	800db40 <vPortFree>
	}
 800cc4a:	e00f      	b.n	800cc6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d00a      	beq.n	800cc6c <prvDeleteTCB+0x60>
	__asm volatile
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	f383 8811 	msr	BASEPRI, r3
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	60fb      	str	r3, [r7, #12]
}
 800cc68:	bf00      	nop
 800cc6a:	e7fe      	b.n	800cc6a <prvDeleteTCB+0x5e>
	}
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <prvResetNextTaskUnblockTime+0x38>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d104      	bne.n	800cc8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc84:	4b0a      	ldr	r3, [pc, #40]	; (800ccb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cc86:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc8c:	e008      	b.n	800cca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8e:	4b07      	ldr	r3, [pc, #28]	; (800ccac <prvResetNextTaskUnblockTime+0x38>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	4a04      	ldr	r2, [pc, #16]	; (800ccb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cc9e:	6013      	str	r3, [r2, #0]
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	20001734 	.word	0x20001734
 800ccb0:	2000179c 	.word	0x2000179c

0800ccb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccba:	4b0b      	ldr	r3, [pc, #44]	; (800cce8 <xTaskGetSchedulerState+0x34>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d102      	bne.n	800ccc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	607b      	str	r3, [r7, #4]
 800ccc6:	e008      	b.n	800ccda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccc8:	4b08      	ldr	r3, [pc, #32]	; (800ccec <xTaskGetSchedulerState+0x38>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	607b      	str	r3, [r7, #4]
 800ccd4:	e001      	b.n	800ccda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccda:	687b      	ldr	r3, [r7, #4]
	}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	20001788 	.word	0x20001788
 800ccec:	200017a4 	.word	0x200017a4

0800ccf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d056      	beq.n	800cdb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd06:	4b2e      	ldr	r3, [pc, #184]	; (800cdc0 <xTaskPriorityDisinherit+0xd0>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d00a      	beq.n	800cd26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60fb      	str	r3, [r7, #12]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10a      	bne.n	800cd44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	60bb      	str	r3, [r7, #8]
}
 800cd40:	bf00      	nop
 800cd42:	e7fe      	b.n	800cd42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd48:	1e5a      	subs	r2, r3, #1
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d02c      	beq.n	800cdb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d128      	bne.n	800cdb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	3304      	adds	r3, #4
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe fb7a 	bl	800b460 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd84:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <xTaskPriorityDisinherit+0xd4>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d903      	bls.n	800cd94 <xTaskPriorityDisinherit+0xa4>
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	4a0c      	ldr	r2, [pc, #48]	; (800cdc4 <xTaskPriorityDisinherit+0xd4>)
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd98:	4613      	mov	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4a09      	ldr	r2, [pc, #36]	; (800cdc8 <xTaskPriorityDisinherit+0xd8>)
 800cda2:	441a      	add	r2, r3
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	3304      	adds	r3, #4
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fe fafb 	bl	800b3a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdb4:	697b      	ldr	r3, [r7, #20]
	}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3718      	adds	r7, #24
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	200012a8 	.word	0x200012a8
 800cdc4:	20001784 	.word	0x20001784
 800cdc8:	200012ac 	.word	0x200012ac

0800cdcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdd6:	4b21      	ldr	r3, [pc, #132]	; (800ce5c <prvAddCurrentTaskToDelayedList+0x90>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cddc:	4b20      	ldr	r3, [pc, #128]	; (800ce60 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3304      	adds	r3, #4
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fe fb3c 	bl	800b460 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdee:	d10a      	bne.n	800ce06 <prvAddCurrentTaskToDelayedList+0x3a>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d007      	beq.n	800ce06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdf6:	4b1a      	ldr	r3, [pc, #104]	; (800ce60 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4819      	ldr	r0, [pc, #100]	; (800ce64 <prvAddCurrentTaskToDelayedList+0x98>)
 800ce00:	f7fe fad1 	bl	800b3a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce04:	e026      	b.n	800ce54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce0e:	4b14      	ldr	r3, [pc, #80]	; (800ce60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d209      	bcs.n	800ce32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce1e:	4b12      	ldr	r3, [pc, #72]	; (800ce68 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	4b0f      	ldr	r3, [pc, #60]	; (800ce60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3304      	adds	r3, #4
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	f7fe fadf 	bl	800b3ee <vListInsert>
}
 800ce30:	e010      	b.n	800ce54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce32:	4b0e      	ldr	r3, [pc, #56]	; (800ce6c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	f7fe fad5 	bl	800b3ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d202      	bcs.n	800ce54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce4e:	4a08      	ldr	r2, [pc, #32]	; (800ce70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	6013      	str	r3, [r2, #0]
}
 800ce54:	bf00      	nop
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20001780 	.word	0x20001780
 800ce60:	200012a8 	.word	0x200012a8
 800ce64:	20001768 	.word	0x20001768
 800ce68:	20001738 	.word	0x20001738
 800ce6c:	20001734 	.word	0x20001734
 800ce70:	2000179c 	.word	0x2000179c

0800ce74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08a      	sub	sp, #40	; 0x28
 800ce78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce7e:	f000 fb07 	bl	800d490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce82:	4b1c      	ldr	r3, [pc, #112]	; (800cef4 <xTimerCreateTimerTask+0x80>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d021      	beq.n	800cece <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce92:	1d3a      	adds	r2, r7, #4
 800ce94:	f107 0108 	add.w	r1, r7, #8
 800ce98:	f107 030c 	add.w	r3, r7, #12
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fa3b 	bl	800b318 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cea2:	6879      	ldr	r1, [r7, #4]
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	9202      	str	r2, [sp, #8]
 800ceaa:	9301      	str	r3, [sp, #4]
 800ceac:	2302      	movs	r3, #2
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	460a      	mov	r2, r1
 800ceb4:	4910      	ldr	r1, [pc, #64]	; (800cef8 <xTimerCreateTimerTask+0x84>)
 800ceb6:	4811      	ldr	r0, [pc, #68]	; (800cefc <xTimerCreateTimerTask+0x88>)
 800ceb8:	f7ff f8a2 	bl	800c000 <xTaskCreateStatic>
 800cebc:	4603      	mov	r3, r0
 800cebe:	4a10      	ldr	r2, [pc, #64]	; (800cf00 <xTimerCreateTimerTask+0x8c>)
 800cec0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cec2:	4b0f      	ldr	r3, [pc, #60]	; (800cf00 <xTimerCreateTimerTask+0x8c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ceca:	2301      	movs	r3, #1
 800cecc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	613b      	str	r3, [r7, #16]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ceea:	697b      	ldr	r3, [r7, #20]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	200017d8 	.word	0x200017d8
 800cef8:	08013f64 	.word	0x08013f64
 800cefc:	0800d039 	.word	0x0800d039
 800cf00:	200017dc 	.word	0x200017dc

0800cf04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08a      	sub	sp, #40	; 0x28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10a      	bne.n	800cf32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	623b      	str	r3, [r7, #32]
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf32:	4b1a      	ldr	r3, [pc, #104]	; (800cf9c <xTimerGenericCommand+0x98>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d02a      	beq.n	800cf90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b05      	cmp	r3, #5
 800cf4a:	dc18      	bgt.n	800cf7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf4c:	f7ff feb2 	bl	800ccb4 <xTaskGetSchedulerState>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d109      	bne.n	800cf6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf56:	4b11      	ldr	r3, [pc, #68]	; (800cf9c <xTimerGenericCommand+0x98>)
 800cf58:	6818      	ldr	r0, [r3, #0]
 800cf5a:	f107 0110 	add.w	r1, r7, #16
 800cf5e:	2300      	movs	r3, #0
 800cf60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf62:	f7fe fbe5 	bl	800b730 <xQueueGenericSend>
 800cf66:	6278      	str	r0, [r7, #36]	; 0x24
 800cf68:	e012      	b.n	800cf90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf6a:	4b0c      	ldr	r3, [pc, #48]	; (800cf9c <xTimerGenericCommand+0x98>)
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f107 0110 	add.w	r1, r7, #16
 800cf72:	2300      	movs	r3, #0
 800cf74:	2200      	movs	r2, #0
 800cf76:	f7fe fbdb 	bl	800b730 <xQueueGenericSend>
 800cf7a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf7c:	e008      	b.n	800cf90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf7e:	4b07      	ldr	r3, [pc, #28]	; (800cf9c <xTimerGenericCommand+0x98>)
 800cf80:	6818      	ldr	r0, [r3, #0]
 800cf82:	f107 0110 	add.w	r1, r7, #16
 800cf86:	2300      	movs	r3, #0
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	f7fe fccf 	bl	800b92c <xQueueGenericSendFromISR>
 800cf8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3728      	adds	r7, #40	; 0x28
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	200017d8 	.word	0x200017d8

0800cfa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af02      	add	r7, sp, #8
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfaa:	4b22      	ldr	r3, [pc, #136]	; (800d034 <prvProcessExpiredTimer+0x94>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fa51 	bl	800b460 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d022      	beq.n	800d012 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	699a      	ldr	r2, [r3, #24]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	18d1      	adds	r1, r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	6978      	ldr	r0, [r7, #20]
 800cfda:	f000 f8d1 	bl	800d180 <prvInsertTimerInActiveList>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d01f      	beq.n	800d024 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	2100      	movs	r1, #0
 800cfee:	6978      	ldr	r0, [r7, #20]
 800cff0:	f7ff ff88 	bl	800cf04 <xTimerGenericCommand>
 800cff4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d113      	bne.n	800d024 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	60fb      	str	r3, [r7, #12]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d018:	f023 0301 	bic.w	r3, r3, #1
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	6a1b      	ldr	r3, [r3, #32]
 800d028:	6978      	ldr	r0, [r7, #20]
 800d02a:	4798      	blx	r3
}
 800d02c:	bf00      	nop
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	200017d0 	.word	0x200017d0

0800d038 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d040:	f107 0308 	add.w	r3, r7, #8
 800d044:	4618      	mov	r0, r3
 800d046:	f000 f857 	bl	800d0f8 <prvGetNextExpireTime>
 800d04a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	4619      	mov	r1, r3
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 f803 	bl	800d05c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d056:	f000 f8d5 	bl	800d204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d05a:	e7f1      	b.n	800d040 <prvTimerTask+0x8>

0800d05c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d066:	f7ff fa27 	bl	800c4b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 f866 	bl	800d140 <prvSampleTimeNow>
 800d074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d130      	bne.n	800d0de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10a      	bne.n	800d098 <prvProcessTimerOrBlockTask+0x3c>
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	429a      	cmp	r2, r3
 800d088:	d806      	bhi.n	800d098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d08a:	f7ff fa23 	bl	800c4d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d08e:	68f9      	ldr	r1, [r7, #12]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ff85 	bl	800cfa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d096:	e024      	b.n	800d0e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d008      	beq.n	800d0b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d09e:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <prvProcessTimerOrBlockTask+0x90>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <prvProcessTimerOrBlockTask+0x50>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e000      	b.n	800d0ae <prvProcessTimerOrBlockTask+0x52>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0b0:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <prvProcessTimerOrBlockTask+0x94>)
 800d0b2:	6818      	ldr	r0, [r3, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f7fe ff6b 	bl	800bf98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0c2:	f7ff fa07 	bl	800c4d4 <xTaskResumeAll>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10a      	bne.n	800d0e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0cc:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <prvProcessTimerOrBlockTask+0x98>)
 800d0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	f3bf 8f6f 	isb	sy
}
 800d0dc:	e001      	b.n	800d0e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0de:	f7ff f9f9 	bl	800c4d4 <xTaskResumeAll>
}
 800d0e2:	bf00      	nop
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	200017d4 	.word	0x200017d4
 800d0f0:	200017d8 	.word	0x200017d8
 800d0f4:	e000ed04 	.word	0xe000ed04

0800d0f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d100:	4b0e      	ldr	r3, [pc, #56]	; (800d13c <prvGetNextExpireTime+0x44>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <prvGetNextExpireTime+0x16>
 800d10a:	2201      	movs	r2, #1
 800d10c:	e000      	b.n	800d110 <prvGetNextExpireTime+0x18>
 800d10e:	2200      	movs	r2, #0
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d105      	bne.n	800d128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d11c:	4b07      	ldr	r3, [pc, #28]	; (800d13c <prvGetNextExpireTime+0x44>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	e001      	b.n	800d12c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d128:	2300      	movs	r3, #0
 800d12a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d12c:	68fb      	ldr	r3, [r7, #12]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	200017d0 	.word	0x200017d0

0800d140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d148:	f7ff fa62 	bl	800c610 <xTaskGetTickCount>
 800d14c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d14e:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <prvSampleTimeNow+0x3c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	429a      	cmp	r2, r3
 800d156:	d205      	bcs.n	800d164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d158:	f000 f936 	bl	800d3c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	e002      	b.n	800d16a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d16a:	4a04      	ldr	r2, [pc, #16]	; (800d17c <prvSampleTimeNow+0x3c>)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d170:	68fb      	ldr	r3, [r7, #12]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	200017e0 	.word	0x200017e0

0800d180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d812      	bhi.n	800d1cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	1ad2      	subs	r2, r2, r3
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d302      	bcc.n	800d1ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	e01b      	b.n	800d1f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1ba:	4b10      	ldr	r3, [pc, #64]	; (800d1fc <prvInsertTimerInActiveList+0x7c>)
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	f7fe f912 	bl	800b3ee <vListInsert>
 800d1ca:	e012      	b.n	800d1f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d206      	bcs.n	800d1e2 <prvInsertTimerInActiveList+0x62>
 800d1d4:	68ba      	ldr	r2, [r7, #8]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d302      	bcc.n	800d1e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	617b      	str	r3, [r7, #20]
 800d1e0:	e007      	b.n	800d1f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1e2:	4b07      	ldr	r3, [pc, #28]	; (800d200 <prvInsertTimerInActiveList+0x80>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	f7fe f8fe 	bl	800b3ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d1f2:	697b      	ldr	r3, [r7, #20]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3718      	adds	r7, #24
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	200017d4 	.word	0x200017d4
 800d200:	200017d0 	.word	0x200017d0

0800d204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08e      	sub	sp, #56	; 0x38
 800d208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d20a:	e0ca      	b.n	800d3a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	da18      	bge.n	800d244 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d212:	1d3b      	adds	r3, r7, #4
 800d214:	3304      	adds	r3, #4
 800d216:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10a      	bne.n	800d234 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	61fb      	str	r3, [r7, #28]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d23a:	6850      	ldr	r0, [r2, #4]
 800d23c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d23e:	6892      	ldr	r2, [r2, #8]
 800d240:	4611      	mov	r1, r2
 800d242:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	f2c0 80ab 	blt.w	800d3a2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d004      	beq.n	800d262 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	3304      	adds	r3, #4
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe f8ff 	bl	800b460 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d262:	463b      	mov	r3, r7
 800d264:	4618      	mov	r0, r3
 800d266:	f7ff ff6b 	bl	800d140 <prvSampleTimeNow>
 800d26a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b09      	cmp	r3, #9
 800d270:	f200 8096 	bhi.w	800d3a0 <prvProcessReceivedCommands+0x19c>
 800d274:	a201      	add	r2, pc, #4	; (adr r2, 800d27c <prvProcessReceivedCommands+0x78>)
 800d276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27a:	bf00      	nop
 800d27c:	0800d2a5 	.word	0x0800d2a5
 800d280:	0800d2a5 	.word	0x0800d2a5
 800d284:	0800d2a5 	.word	0x0800d2a5
 800d288:	0800d319 	.word	0x0800d319
 800d28c:	0800d32d 	.word	0x0800d32d
 800d290:	0800d377 	.word	0x0800d377
 800d294:	0800d2a5 	.word	0x0800d2a5
 800d298:	0800d2a5 	.word	0x0800d2a5
 800d29c:	0800d319 	.word	0x0800d319
 800d2a0:	0800d32d 	.word	0x0800d32d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2aa:	f043 0301 	orr.w	r3, r3, #1
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2b6:	68ba      	ldr	r2, [r7, #8]
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	18d1      	adds	r1, r2, r3
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c4:	f7ff ff5c 	bl	800d180 <prvInsertTimerInActiveList>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d069      	beq.n	800d3a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d05e      	beq.n	800d3a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	441a      	add	r2, r3
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f6:	f7ff fe05 	bl	800cf04 <xTimerGenericCommand>
 800d2fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d14f      	bne.n	800d3a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	61bb      	str	r3, [r7, #24]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d31e:	f023 0301 	bic.w	r3, r3, #1
 800d322:	b2da      	uxtb	r2, r3
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d32a:	e03a      	b.n	800d3a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d332:	f043 0301 	orr.w	r3, r3, #1
 800d336:	b2da      	uxtb	r2, r3
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	617b      	str	r3, [r7, #20]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	699a      	ldr	r2, [r3, #24]
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	18d1      	adds	r1, r2, r3
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d36e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d370:	f7ff ff06 	bl	800d180 <prvInsertTimerInActiveList>
					break;
 800d374:	e015      	b.n	800d3a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d37c:	f003 0302 	and.w	r3, r3, #2
 800d380:	2b00      	cmp	r3, #0
 800d382:	d103      	bne.n	800d38c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d386:	f000 fbdb 	bl	800db40 <vPortFree>
 800d38a:	e00a      	b.n	800d3a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d392:	f023 0301 	bic.w	r3, r3, #1
 800d396:	b2da      	uxtb	r2, r3
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d39e:	e000      	b.n	800d3a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d3a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3a2:	4b08      	ldr	r3, [pc, #32]	; (800d3c4 <prvProcessReceivedCommands+0x1c0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	1d39      	adds	r1, r7, #4
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fb5a 	bl	800ba64 <xQueueReceive>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f47f af2a 	bne.w	800d20c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d3b8:	bf00      	nop
 800d3ba:	bf00      	nop
 800d3bc:	3730      	adds	r7, #48	; 0x30
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	200017d8 	.word	0x200017d8

0800d3c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b088      	sub	sp, #32
 800d3cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ce:	e048      	b.n	800d462 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3d0:	4b2d      	ldr	r3, [pc, #180]	; (800d488 <prvSwitchTimerLists+0xc0>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3da:	4b2b      	ldr	r3, [pc, #172]	; (800d488 <prvSwitchTimerLists+0xc0>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe f839 	bl	800b460 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3fc:	f003 0304 	and.w	r3, r3, #4
 800d400:	2b00      	cmp	r3, #0
 800d402:	d02e      	beq.n	800d462 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	4413      	add	r3, r2
 800d40c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	429a      	cmp	r2, r3
 800d414:	d90e      	bls.n	800d434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d422:	4b19      	ldr	r3, [pc, #100]	; (800d488 <prvSwitchTimerLists+0xc0>)
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3304      	adds	r3, #4
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7fd ffde 	bl	800b3ee <vListInsert>
 800d432:	e016      	b.n	800d462 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d434:	2300      	movs	r3, #0
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	2300      	movs	r3, #0
 800d43a:	693a      	ldr	r2, [r7, #16]
 800d43c:	2100      	movs	r1, #0
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff fd60 	bl	800cf04 <xTimerGenericCommand>
 800d444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	603b      	str	r3, [r7, #0]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d462:	4b09      	ldr	r3, [pc, #36]	; (800d488 <prvSwitchTimerLists+0xc0>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1b1      	bne.n	800d3d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d46c:	4b06      	ldr	r3, [pc, #24]	; (800d488 <prvSwitchTimerLists+0xc0>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d472:	4b06      	ldr	r3, [pc, #24]	; (800d48c <prvSwitchTimerLists+0xc4>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a04      	ldr	r2, [pc, #16]	; (800d488 <prvSwitchTimerLists+0xc0>)
 800d478:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d47a:	4a04      	ldr	r2, [pc, #16]	; (800d48c <prvSwitchTimerLists+0xc4>)
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	6013      	str	r3, [r2, #0]
}
 800d480:	bf00      	nop
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	200017d0 	.word	0x200017d0
 800d48c:	200017d4 	.word	0x200017d4

0800d490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d496:	f000 f965 	bl	800d764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d49a:	4b15      	ldr	r3, [pc, #84]	; (800d4f0 <prvCheckForValidListAndQueue+0x60>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d120      	bne.n	800d4e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d4a2:	4814      	ldr	r0, [pc, #80]	; (800d4f4 <prvCheckForValidListAndQueue+0x64>)
 800d4a4:	f7fd ff52 	bl	800b34c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d4a8:	4813      	ldr	r0, [pc, #76]	; (800d4f8 <prvCheckForValidListAndQueue+0x68>)
 800d4aa:	f7fd ff4f 	bl	800b34c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4ae:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <prvCheckForValidListAndQueue+0x6c>)
 800d4b0:	4a10      	ldr	r2, [pc, #64]	; (800d4f4 <prvCheckForValidListAndQueue+0x64>)
 800d4b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4b4:	4b12      	ldr	r3, [pc, #72]	; (800d500 <prvCheckForValidListAndQueue+0x70>)
 800d4b6:	4a10      	ldr	r2, [pc, #64]	; (800d4f8 <prvCheckForValidListAndQueue+0x68>)
 800d4b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	4b11      	ldr	r3, [pc, #68]	; (800d504 <prvCheckForValidListAndQueue+0x74>)
 800d4c0:	4a11      	ldr	r2, [pc, #68]	; (800d508 <prvCheckForValidListAndQueue+0x78>)
 800d4c2:	2110      	movs	r1, #16
 800d4c4:	200a      	movs	r0, #10
 800d4c6:	f7fe f85d 	bl	800b584 <xQueueGenericCreateStatic>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4a08      	ldr	r2, [pc, #32]	; (800d4f0 <prvCheckForValidListAndQueue+0x60>)
 800d4ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <prvCheckForValidListAndQueue+0x60>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d005      	beq.n	800d4e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4d8:	4b05      	ldr	r3, [pc, #20]	; (800d4f0 <prvCheckForValidListAndQueue+0x60>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	490b      	ldr	r1, [pc, #44]	; (800d50c <prvCheckForValidListAndQueue+0x7c>)
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fd30 	bl	800bf44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4e4:	f000 f96e 	bl	800d7c4 <vPortExitCritical>
}
 800d4e8:	bf00      	nop
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	200017d8 	.word	0x200017d8
 800d4f4:	200017a8 	.word	0x200017a8
 800d4f8:	200017bc 	.word	0x200017bc
 800d4fc:	200017d0 	.word	0x200017d0
 800d500:	200017d4 	.word	0x200017d4
 800d504:	20001884 	.word	0x20001884
 800d508:	200017e4 	.word	0x200017e4
 800d50c:	08013f6c 	.word	0x08013f6c

0800d510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	3b04      	subs	r3, #4
 800d520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	3b04      	subs	r3, #4
 800d52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f023 0201 	bic.w	r2, r3, #1
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3b04      	subs	r3, #4
 800d53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d540:	4a0c      	ldr	r2, [pc, #48]	; (800d574 <pxPortInitialiseStack+0x64>)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3b14      	subs	r3, #20
 800d54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3b04      	subs	r3, #4
 800d556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f06f 0202 	mvn.w	r2, #2
 800d55e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3b20      	subs	r3, #32
 800d564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d566:	68fb      	ldr	r3, [r7, #12]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	0800d579 	.word	0x0800d579

0800d578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d582:	4b12      	ldr	r3, [pc, #72]	; (800d5cc <prvTaskExitError+0x54>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58a:	d00a      	beq.n	800d5a2 <prvTaskExitError+0x2a>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	60fb      	str	r3, [r7, #12]
}
 800d59e:	bf00      	nop
 800d5a0:	e7fe      	b.n	800d5a0 <prvTaskExitError+0x28>
	__asm volatile
 800d5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	60bb      	str	r3, [r7, #8]
}
 800d5b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5b6:	bf00      	nop
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0fc      	beq.n	800d5b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5be:	bf00      	nop
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	20000010 	.word	0x20000010

0800d5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <pxCurrentTCBConst2>)
 800d5d2:	6819      	ldr	r1, [r3, #0]
 800d5d4:	6808      	ldr	r0, [r1, #0]
 800d5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5da:	f380 8809 	msr	PSP, r0
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f04f 0000 	mov.w	r0, #0
 800d5e6:	f380 8811 	msr	BASEPRI, r0
 800d5ea:	4770      	bx	lr
 800d5ec:	f3af 8000 	nop.w

0800d5f0 <pxCurrentTCBConst2>:
 800d5f0:	200012a8 	.word	0x200012a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop

0800d5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5f8:	4808      	ldr	r0, [pc, #32]	; (800d61c <prvPortStartFirstTask+0x24>)
 800d5fa:	6800      	ldr	r0, [r0, #0]
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	f380 8808 	msr	MSP, r0
 800d602:	f04f 0000 	mov.w	r0, #0
 800d606:	f380 8814 	msr	CONTROL, r0
 800d60a:	b662      	cpsie	i
 800d60c:	b661      	cpsie	f
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	df00      	svc	0
 800d618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d61a:	bf00      	nop
 800d61c:	e000ed08 	.word	0xe000ed08

0800d620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d626:	4b46      	ldr	r3, [pc, #280]	; (800d740 <xPortStartScheduler+0x120>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a46      	ldr	r2, [pc, #280]	; (800d744 <xPortStartScheduler+0x124>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d10a      	bne.n	800d646 <xPortStartScheduler+0x26>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d646:	4b3e      	ldr	r3, [pc, #248]	; (800d740 <xPortStartScheduler+0x120>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a3f      	ldr	r2, [pc, #252]	; (800d748 <xPortStartScheduler+0x128>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d10a      	bne.n	800d666 <xPortStartScheduler+0x46>
	__asm volatile
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	60fb      	str	r3, [r7, #12]
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d666:	4b39      	ldr	r3, [pc, #228]	; (800d74c <xPortStartScheduler+0x12c>)
 800d668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	22ff      	movs	r2, #255	; 0xff
 800d676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	4b31      	ldr	r3, [pc, #196]	; (800d750 <xPortStartScheduler+0x130>)
 800d68c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d68e:	4b31      	ldr	r3, [pc, #196]	; (800d754 <xPortStartScheduler+0x134>)
 800d690:	2207      	movs	r2, #7
 800d692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d694:	e009      	b.n	800d6aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d696:	4b2f      	ldr	r3, [pc, #188]	; (800d754 <xPortStartScheduler+0x134>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	4a2d      	ldr	r2, [pc, #180]	; (800d754 <xPortStartScheduler+0x134>)
 800d69e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6a0:	78fb      	ldrb	r3, [r7, #3]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b2:	2b80      	cmp	r3, #128	; 0x80
 800d6b4:	d0ef      	beq.n	800d696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6b6:	4b27      	ldr	r3, [pc, #156]	; (800d754 <xPortStartScheduler+0x134>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f1c3 0307 	rsb	r3, r3, #7
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d00a      	beq.n	800d6d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	60bb      	str	r3, [r7, #8]
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6d8:	4b1e      	ldr	r3, [pc, #120]	; (800d754 <xPortStartScheduler+0x134>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	4a1d      	ldr	r2, [pc, #116]	; (800d754 <xPortStartScheduler+0x134>)
 800d6e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6e2:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <xPortStartScheduler+0x134>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6ea:	4a1a      	ldr	r2, [pc, #104]	; (800d754 <xPortStartScheduler+0x134>)
 800d6ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <xPortStartScheduler+0x138>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a17      	ldr	r2, [pc, #92]	; (800d758 <xPortStartScheduler+0x138>)
 800d6fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d702:	4b15      	ldr	r3, [pc, #84]	; (800d758 <xPortStartScheduler+0x138>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a14      	ldr	r2, [pc, #80]	; (800d758 <xPortStartScheduler+0x138>)
 800d708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d70c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d70e:	f000 f8dd 	bl	800d8cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d712:	4b12      	ldr	r3, [pc, #72]	; (800d75c <xPortStartScheduler+0x13c>)
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d718:	f000 f8fc 	bl	800d914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d71c:	4b10      	ldr	r3, [pc, #64]	; (800d760 <xPortStartScheduler+0x140>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a0f      	ldr	r2, [pc, #60]	; (800d760 <xPortStartScheduler+0x140>)
 800d722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d728:	f7ff ff66 	bl	800d5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d72c:	f7ff f84c 	bl	800c7c8 <vTaskSwitchContext>
	prvTaskExitError();
 800d730:	f7ff ff22 	bl	800d578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	e000ed00 	.word	0xe000ed00
 800d744:	410fc271 	.word	0x410fc271
 800d748:	410fc270 	.word	0x410fc270
 800d74c:	e000e400 	.word	0xe000e400
 800d750:	200018d4 	.word	0x200018d4
 800d754:	200018d8 	.word	0x200018d8
 800d758:	e000ed20 	.word	0xe000ed20
 800d75c:	20000010 	.word	0x20000010
 800d760:	e000ef34 	.word	0xe000ef34

0800d764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	607b      	str	r3, [r7, #4]
}
 800d77c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <vPortEnterCritical+0x58>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3301      	adds	r3, #1
 800d784:	4a0d      	ldr	r2, [pc, #52]	; (800d7bc <vPortEnterCritical+0x58>)
 800d786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d788:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <vPortEnterCritical+0x58>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d10f      	bne.n	800d7b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d790:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <vPortEnterCritical+0x5c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	603b      	str	r3, [r7, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <vPortEnterCritical+0x4a>
	}
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20000010 	.word	0x20000010
 800d7c0:	e000ed04 	.word	0xe000ed04

0800d7c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7ca:	4b12      	ldr	r3, [pc, #72]	; (800d814 <vPortExitCritical+0x50>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d10a      	bne.n	800d7e8 <vPortExitCritical+0x24>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	607b      	str	r3, [r7, #4]
}
 800d7e4:	bf00      	nop
 800d7e6:	e7fe      	b.n	800d7e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7e8:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <vPortExitCritical+0x50>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4a09      	ldr	r2, [pc, #36]	; (800d814 <vPortExitCritical+0x50>)
 800d7f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7f2:	4b08      	ldr	r3, [pc, #32]	; (800d814 <vPortExitCritical+0x50>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d105      	bne.n	800d806 <vPortExitCritical+0x42>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	f383 8811 	msr	BASEPRI, r3
}
 800d804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d806:	bf00      	nop
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	20000010 	.word	0x20000010
	...

0800d820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d820:	f3ef 8009 	mrs	r0, PSP
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	4b15      	ldr	r3, [pc, #84]	; (800d880 <pxCurrentTCBConst>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	f01e 0f10 	tst.w	lr, #16
 800d830:	bf08      	it	eq
 800d832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83a:	6010      	str	r0, [r2, #0]
 800d83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d840:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d844:	f380 8811 	msr	BASEPRI, r0
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f7fe ffba 	bl	800c7c8 <vTaskSwitchContext>
 800d854:	f04f 0000 	mov.w	r0, #0
 800d858:	f380 8811 	msr	BASEPRI, r0
 800d85c:	bc09      	pop	{r0, r3}
 800d85e:	6819      	ldr	r1, [r3, #0]
 800d860:	6808      	ldr	r0, [r1, #0]
 800d862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d866:	f01e 0f10 	tst.w	lr, #16
 800d86a:	bf08      	it	eq
 800d86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d870:	f380 8809 	msr	PSP, r0
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	f3af 8000 	nop.w

0800d880 <pxCurrentTCBConst>:
 800d880:	200012a8 	.word	0x200012a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop

0800d888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	607b      	str	r3, [r7, #4]
}
 800d8a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8a2:	f7fe fed7 	bl	800c654 <xTaskIncrementTick>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d003      	beq.n	800d8b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8ac:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <xPortSysTickHandler+0x40>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f383 8811 	msr	BASEPRI, r3
}
 800d8be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8d0:	4b0b      	ldr	r3, [pc, #44]	; (800d900 <vPortSetupTimerInterrupt+0x34>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <vPortSetupTimerInterrupt+0x38>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <vPortSetupTimerInterrupt+0x3c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a0a      	ldr	r2, [pc, #40]	; (800d90c <vPortSetupTimerInterrupt+0x40>)
 800d8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e6:	099b      	lsrs	r3, r3, #6
 800d8e8:	4a09      	ldr	r2, [pc, #36]	; (800d910 <vPortSetupTimerInterrupt+0x44>)
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8ee:	4b04      	ldr	r3, [pc, #16]	; (800d900 <vPortSetupTimerInterrupt+0x34>)
 800d8f0:	2207      	movs	r2, #7
 800d8f2:	601a      	str	r2, [r3, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	e000e010 	.word	0xe000e010
 800d904:	e000e018 	.word	0xe000e018
 800d908:	20000004 	.word	0x20000004
 800d90c:	10624dd3 	.word	0x10624dd3
 800d910:	e000e014 	.word	0xe000e014

0800d914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d924 <vPortEnableVFP+0x10>
 800d918:	6801      	ldr	r1, [r0, #0]
 800d91a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d91e:	6001      	str	r1, [r0, #0]
 800d920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d922:	bf00      	nop
 800d924:	e000ed88 	.word	0xe000ed88

0800d928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d92e:	f3ef 8305 	mrs	r3, IPSR
 800d932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b0f      	cmp	r3, #15
 800d938:	d914      	bls.n	800d964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <vPortValidateInterruptPriority+0x70>)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	4413      	add	r3, r2
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d944:	4b15      	ldr	r3, [pc, #84]	; (800d99c <vPortValidateInterruptPriority+0x74>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	7afa      	ldrb	r2, [r7, #11]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d20a      	bcs.n	800d964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	607b      	str	r3, [r7, #4]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <vPortValidateInterruptPriority+0x78>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d96c:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <vPortValidateInterruptPriority+0x7c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d90a      	bls.n	800d98a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	603b      	str	r3, [r7, #0]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <vPortValidateInterruptPriority+0x60>
	}
 800d98a:	bf00      	nop
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	e000e3f0 	.word	0xe000e3f0
 800d99c:	200018d4 	.word	0x200018d4
 800d9a0:	e000ed0c 	.word	0xe000ed0c
 800d9a4:	200018d8 	.word	0x200018d8

0800d9a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	; 0x28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9b4:	f7fe fd80 	bl	800c4b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9b8:	4b5b      	ldr	r3, [pc, #364]	; (800db28 <pvPortMalloc+0x180>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9c0:	f000 f920 	bl	800dc04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9c4:	4b59      	ldr	r3, [pc, #356]	; (800db2c <pvPortMalloc+0x184>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f040 8093 	bne.w	800daf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01d      	beq.n	800da14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9d8:	2208      	movs	r2, #8
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4413      	add	r3, r2
 800d9de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d014      	beq.n	800da14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f023 0307 	bic.w	r3, r3, #7
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00a      	beq.n	800da14 <pvPortMalloc+0x6c>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	617b      	str	r3, [r7, #20]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d06e      	beq.n	800daf8 <pvPortMalloc+0x150>
 800da1a:	4b45      	ldr	r3, [pc, #276]	; (800db30 <pvPortMalloc+0x188>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d869      	bhi.n	800daf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da24:	4b43      	ldr	r3, [pc, #268]	; (800db34 <pvPortMalloc+0x18c>)
 800da26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da28:	4b42      	ldr	r3, [pc, #264]	; (800db34 <pvPortMalloc+0x18c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da2e:	e004      	b.n	800da3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d903      	bls.n	800da4c <pvPortMalloc+0xa4>
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1f1      	bne.n	800da30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da4c:	4b36      	ldr	r3, [pc, #216]	; (800db28 <pvPortMalloc+0x180>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da52:	429a      	cmp	r2, r3
 800da54:	d050      	beq.n	800daf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2208      	movs	r2, #8
 800da5c:	4413      	add	r3, r2
 800da5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	1ad2      	subs	r2, r2, r3
 800da70:	2308      	movs	r3, #8
 800da72:	005b      	lsls	r3, r3, #1
 800da74:	429a      	cmp	r2, r3
 800da76:	d91f      	bls.n	800dab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4413      	add	r3, r2
 800da7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00a      	beq.n	800daa0 <pvPortMalloc+0xf8>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	613b      	str	r3, [r7, #16]
}
 800da9c:	bf00      	nop
 800da9e:	e7fe      	b.n	800da9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	1ad2      	subs	r2, r2, r3
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dab2:	69b8      	ldr	r0, [r7, #24]
 800dab4:	f000 f908 	bl	800dcc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dab8:	4b1d      	ldr	r3, [pc, #116]	; (800db30 <pvPortMalloc+0x188>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	4a1b      	ldr	r2, [pc, #108]	; (800db30 <pvPortMalloc+0x188>)
 800dac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dac6:	4b1a      	ldr	r3, [pc, #104]	; (800db30 <pvPortMalloc+0x188>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <pvPortMalloc+0x190>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d203      	bcs.n	800dada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <pvPortMalloc+0x188>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a18      	ldr	r2, [pc, #96]	; (800db38 <pvPortMalloc+0x190>)
 800dad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	685a      	ldr	r2, [r3, #4]
 800dade:	4b13      	ldr	r3, [pc, #76]	; (800db2c <pvPortMalloc+0x184>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	431a      	orrs	r2, r3
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800daee:	4b13      	ldr	r3, [pc, #76]	; (800db3c <pvPortMalloc+0x194>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3301      	adds	r3, #1
 800daf4:	4a11      	ldr	r2, [pc, #68]	; (800db3c <pvPortMalloc+0x194>)
 800daf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800daf8:	f7fe fcec 	bl	800c4d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	f003 0307 	and.w	r3, r3, #7
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <pvPortMalloc+0x174>
	__asm volatile
 800db06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	60fb      	str	r3, [r7, #12]
}
 800db18:	bf00      	nop
 800db1a:	e7fe      	b.n	800db1a <pvPortMalloc+0x172>
	return pvReturn;
 800db1c:	69fb      	ldr	r3, [r7, #28]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3728      	adds	r7, #40	; 0x28
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	2000703c 	.word	0x2000703c
 800db2c:	20007050 	.word	0x20007050
 800db30:	20007040 	.word	0x20007040
 800db34:	20007034 	.word	0x20007034
 800db38:	20007044 	.word	0x20007044
 800db3c:	20007048 	.word	0x20007048

0800db40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d04d      	beq.n	800dbee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db52:	2308      	movs	r3, #8
 800db54:	425b      	negs	r3, r3
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4413      	add	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <vPortFree+0xb8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4013      	ands	r3, r2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <vPortFree+0x44>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	60fb      	str	r3, [r7, #12]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00a      	beq.n	800dba2 <vPortFree+0x62>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	60bb      	str	r3, [r7, #8]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	4b14      	ldr	r3, [pc, #80]	; (800dbf8 <vPortFree+0xb8>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d01e      	beq.n	800dbee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11a      	bne.n	800dbee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4b0e      	ldr	r3, [pc, #56]	; (800dbf8 <vPortFree+0xb8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	401a      	ands	r2, r3
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbc8:	f7fe fc76 	bl	800c4b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <vPortFree+0xbc>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	4a09      	ldr	r2, [pc, #36]	; (800dbfc <vPortFree+0xbc>)
 800dbd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbda:	6938      	ldr	r0, [r7, #16]
 800dbdc:	f000 f874 	bl	800dcc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbe0:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <vPortFree+0xc0>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a06      	ldr	r2, [pc, #24]	; (800dc00 <vPortFree+0xc0>)
 800dbe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbea:	f7fe fc73 	bl	800c4d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbee:	bf00      	nop
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20007050 	.word	0x20007050
 800dbfc:	20007040 	.word	0x20007040
 800dc00:	2000704c 	.word	0x2000704c

0800dc04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc0a:	f245 7358 	movw	r3, #22360	; 0x5758
 800dc0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc10:	4b27      	ldr	r3, [pc, #156]	; (800dcb0 <prvHeapInit+0xac>)
 800dc12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00c      	beq.n	800dc38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3307      	adds	r3, #7
 800dc22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f023 0307 	bic.w	r3, r3, #7
 800dc2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	4a1f      	ldr	r2, [pc, #124]	; (800dcb0 <prvHeapInit+0xac>)
 800dc34:	4413      	add	r3, r2
 800dc36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc3c:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <prvHeapInit+0xb0>)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc42:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <prvHeapInit+0xb0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc50:	2208      	movs	r2, #8
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f023 0307 	bic.w	r3, r3, #7
 800dc5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	4a15      	ldr	r2, [pc, #84]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc66:	4b14      	ldr	r3, [pc, #80]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc6e:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc84:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	4a0a      	ldr	r2, [pc, #40]	; (800dcbc <prvHeapInit+0xb8>)
 800dc92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	4a09      	ldr	r2, [pc, #36]	; (800dcc0 <prvHeapInit+0xbc>)
 800dc9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc9c:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <prvHeapInit+0xc0>)
 800dc9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dca2:	601a      	str	r2, [r3, #0]
}
 800dca4:	bf00      	nop
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	200018dc 	.word	0x200018dc
 800dcb4:	20007034 	.word	0x20007034
 800dcb8:	2000703c 	.word	0x2000703c
 800dcbc:	20007044 	.word	0x20007044
 800dcc0:	20007040 	.word	0x20007040
 800dcc4:	20007050 	.word	0x20007050

0800dcc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcd0:	4b28      	ldr	r3, [pc, #160]	; (800dd74 <prvInsertBlockIntoFreeList+0xac>)
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e002      	b.n	800dcdc <prvInsertBlockIntoFreeList+0x14>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d8f7      	bhi.n	800dcd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d108      	bne.n	800dd0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	441a      	add	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	441a      	add	r2, r3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d118      	bne.n	800dd50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b15      	ldr	r3, [pc, #84]	; (800dd78 <prvInsertBlockIntoFreeList+0xb0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d00d      	beq.n	800dd46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	441a      	add	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
 800dd44:	e008      	b.n	800dd58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <prvInsertBlockIntoFreeList+0xb0>)
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	e003      	b.n	800dd58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d002      	beq.n	800dd66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20007034 	.word	0x20007034
 800dd78:	2000703c 	.word	0x2000703c

0800dd7c <_calloc_r>:
 800dd7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd7e:	fba1 2402 	umull	r2, r4, r1, r2
 800dd82:	b94c      	cbnz	r4, 800dd98 <_calloc_r+0x1c>
 800dd84:	4611      	mov	r1, r2
 800dd86:	9201      	str	r2, [sp, #4]
 800dd88:	f000 f82e 	bl	800dde8 <_malloc_r>
 800dd8c:	9a01      	ldr	r2, [sp, #4]
 800dd8e:	4605      	mov	r5, r0
 800dd90:	b930      	cbnz	r0, 800dda0 <_calloc_r+0x24>
 800dd92:	4628      	mov	r0, r5
 800dd94:	b003      	add	sp, #12
 800dd96:	bd30      	pop	{r4, r5, pc}
 800dd98:	220c      	movs	r2, #12
 800dd9a:	6002      	str	r2, [r0, #0]
 800dd9c:	2500      	movs	r5, #0
 800dd9e:	e7f8      	b.n	800dd92 <_calloc_r+0x16>
 800dda0:	4621      	mov	r1, r4
 800dda2:	f001 f864 	bl	800ee6e <memset>
 800dda6:	e7f4      	b.n	800dd92 <_calloc_r+0x16>

0800dda8 <sbrk_aligned>:
 800dda8:	b570      	push	{r4, r5, r6, lr}
 800ddaa:	4e0e      	ldr	r6, [pc, #56]	; (800dde4 <sbrk_aligned+0x3c>)
 800ddac:	460c      	mov	r4, r1
 800ddae:	6831      	ldr	r1, [r6, #0]
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	b911      	cbnz	r1, 800ddba <sbrk_aligned+0x12>
 800ddb4:	f001 f8f2 	bl	800ef9c <_sbrk_r>
 800ddb8:	6030      	str	r0, [r6, #0]
 800ddba:	4621      	mov	r1, r4
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f001 f8ed 	bl	800ef9c <_sbrk_r>
 800ddc2:	1c43      	adds	r3, r0, #1
 800ddc4:	d00a      	beq.n	800dddc <sbrk_aligned+0x34>
 800ddc6:	1cc4      	adds	r4, r0, #3
 800ddc8:	f024 0403 	bic.w	r4, r4, #3
 800ddcc:	42a0      	cmp	r0, r4
 800ddce:	d007      	beq.n	800dde0 <sbrk_aligned+0x38>
 800ddd0:	1a21      	subs	r1, r4, r0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f001 f8e2 	bl	800ef9c <_sbrk_r>
 800ddd8:	3001      	adds	r0, #1
 800ddda:	d101      	bne.n	800dde0 <sbrk_aligned+0x38>
 800dddc:	f04f 34ff 	mov.w	r4, #4294967295
 800dde0:	4620      	mov	r0, r4
 800dde2:	bd70      	pop	{r4, r5, r6, pc}
 800dde4:	20007058 	.word	0x20007058

0800dde8 <_malloc_r>:
 800dde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddec:	1ccd      	adds	r5, r1, #3
 800ddee:	f025 0503 	bic.w	r5, r5, #3
 800ddf2:	3508      	adds	r5, #8
 800ddf4:	2d0c      	cmp	r5, #12
 800ddf6:	bf38      	it	cc
 800ddf8:	250c      	movcc	r5, #12
 800ddfa:	2d00      	cmp	r5, #0
 800ddfc:	4607      	mov	r7, r0
 800ddfe:	db01      	blt.n	800de04 <_malloc_r+0x1c>
 800de00:	42a9      	cmp	r1, r5
 800de02:	d905      	bls.n	800de10 <_malloc_r+0x28>
 800de04:	230c      	movs	r3, #12
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	2600      	movs	r6, #0
 800de0a:	4630      	mov	r0, r6
 800de0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dee4 <_malloc_r+0xfc>
 800de14:	f000 f868 	bl	800dee8 <__malloc_lock>
 800de18:	f8d8 3000 	ldr.w	r3, [r8]
 800de1c:	461c      	mov	r4, r3
 800de1e:	bb5c      	cbnz	r4, 800de78 <_malloc_r+0x90>
 800de20:	4629      	mov	r1, r5
 800de22:	4638      	mov	r0, r7
 800de24:	f7ff ffc0 	bl	800dda8 <sbrk_aligned>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	4604      	mov	r4, r0
 800de2c:	d155      	bne.n	800deda <_malloc_r+0xf2>
 800de2e:	f8d8 4000 	ldr.w	r4, [r8]
 800de32:	4626      	mov	r6, r4
 800de34:	2e00      	cmp	r6, #0
 800de36:	d145      	bne.n	800dec4 <_malloc_r+0xdc>
 800de38:	2c00      	cmp	r4, #0
 800de3a:	d048      	beq.n	800dece <_malloc_r+0xe6>
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	4631      	mov	r1, r6
 800de40:	4638      	mov	r0, r7
 800de42:	eb04 0903 	add.w	r9, r4, r3
 800de46:	f001 f8a9 	bl	800ef9c <_sbrk_r>
 800de4a:	4581      	cmp	r9, r0
 800de4c:	d13f      	bne.n	800dece <_malloc_r+0xe6>
 800de4e:	6821      	ldr	r1, [r4, #0]
 800de50:	1a6d      	subs	r5, r5, r1
 800de52:	4629      	mov	r1, r5
 800de54:	4638      	mov	r0, r7
 800de56:	f7ff ffa7 	bl	800dda8 <sbrk_aligned>
 800de5a:	3001      	adds	r0, #1
 800de5c:	d037      	beq.n	800dece <_malloc_r+0xe6>
 800de5e:	6823      	ldr	r3, [r4, #0]
 800de60:	442b      	add	r3, r5
 800de62:	6023      	str	r3, [r4, #0]
 800de64:	f8d8 3000 	ldr.w	r3, [r8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d038      	beq.n	800dede <_malloc_r+0xf6>
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	42a2      	cmp	r2, r4
 800de70:	d12b      	bne.n	800deca <_malloc_r+0xe2>
 800de72:	2200      	movs	r2, #0
 800de74:	605a      	str	r2, [r3, #4]
 800de76:	e00f      	b.n	800de98 <_malloc_r+0xb0>
 800de78:	6822      	ldr	r2, [r4, #0]
 800de7a:	1b52      	subs	r2, r2, r5
 800de7c:	d41f      	bmi.n	800debe <_malloc_r+0xd6>
 800de7e:	2a0b      	cmp	r2, #11
 800de80:	d917      	bls.n	800deb2 <_malloc_r+0xca>
 800de82:	1961      	adds	r1, r4, r5
 800de84:	42a3      	cmp	r3, r4
 800de86:	6025      	str	r5, [r4, #0]
 800de88:	bf18      	it	ne
 800de8a:	6059      	strne	r1, [r3, #4]
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	bf08      	it	eq
 800de90:	f8c8 1000 	streq.w	r1, [r8]
 800de94:	5162      	str	r2, [r4, r5]
 800de96:	604b      	str	r3, [r1, #4]
 800de98:	4638      	mov	r0, r7
 800de9a:	f104 060b 	add.w	r6, r4, #11
 800de9e:	f000 f829 	bl	800def4 <__malloc_unlock>
 800dea2:	f026 0607 	bic.w	r6, r6, #7
 800dea6:	1d23      	adds	r3, r4, #4
 800dea8:	1af2      	subs	r2, r6, r3
 800deaa:	d0ae      	beq.n	800de0a <_malloc_r+0x22>
 800deac:	1b9b      	subs	r3, r3, r6
 800deae:	50a3      	str	r3, [r4, r2]
 800deb0:	e7ab      	b.n	800de0a <_malloc_r+0x22>
 800deb2:	42a3      	cmp	r3, r4
 800deb4:	6862      	ldr	r2, [r4, #4]
 800deb6:	d1dd      	bne.n	800de74 <_malloc_r+0x8c>
 800deb8:	f8c8 2000 	str.w	r2, [r8]
 800debc:	e7ec      	b.n	800de98 <_malloc_r+0xb0>
 800debe:	4623      	mov	r3, r4
 800dec0:	6864      	ldr	r4, [r4, #4]
 800dec2:	e7ac      	b.n	800de1e <_malloc_r+0x36>
 800dec4:	4634      	mov	r4, r6
 800dec6:	6876      	ldr	r6, [r6, #4]
 800dec8:	e7b4      	b.n	800de34 <_malloc_r+0x4c>
 800deca:	4613      	mov	r3, r2
 800decc:	e7cc      	b.n	800de68 <_malloc_r+0x80>
 800dece:	230c      	movs	r3, #12
 800ded0:	603b      	str	r3, [r7, #0]
 800ded2:	4638      	mov	r0, r7
 800ded4:	f000 f80e 	bl	800def4 <__malloc_unlock>
 800ded8:	e797      	b.n	800de0a <_malloc_r+0x22>
 800deda:	6025      	str	r5, [r4, #0]
 800dedc:	e7dc      	b.n	800de98 <_malloc_r+0xb0>
 800dede:	605b      	str	r3, [r3, #4]
 800dee0:	deff      	udf	#255	; 0xff
 800dee2:	bf00      	nop
 800dee4:	20007054 	.word	0x20007054

0800dee8 <__malloc_lock>:
 800dee8:	4801      	ldr	r0, [pc, #4]	; (800def0 <__malloc_lock+0x8>)
 800deea:	f001 b8a3 	b.w	800f034 <__retarget_lock_acquire_recursive>
 800deee:	bf00      	nop
 800def0:	2000719c 	.word	0x2000719c

0800def4 <__malloc_unlock>:
 800def4:	4801      	ldr	r0, [pc, #4]	; (800defc <__malloc_unlock+0x8>)
 800def6:	f001 b89e 	b.w	800f036 <__retarget_lock_release_recursive>
 800defa:	bf00      	nop
 800defc:	2000719c 	.word	0x2000719c

0800df00 <__cvt>:
 800df00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df04:	ec55 4b10 	vmov	r4, r5, d0
 800df08:	2d00      	cmp	r5, #0
 800df0a:	460e      	mov	r6, r1
 800df0c:	4619      	mov	r1, r3
 800df0e:	462b      	mov	r3, r5
 800df10:	bfbb      	ittet	lt
 800df12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df16:	461d      	movlt	r5, r3
 800df18:	2300      	movge	r3, #0
 800df1a:	232d      	movlt	r3, #45	; 0x2d
 800df1c:	700b      	strb	r3, [r1, #0]
 800df1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df24:	4691      	mov	r9, r2
 800df26:	f023 0820 	bic.w	r8, r3, #32
 800df2a:	bfbc      	itt	lt
 800df2c:	4622      	movlt	r2, r4
 800df2e:	4614      	movlt	r4, r2
 800df30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df34:	d005      	beq.n	800df42 <__cvt+0x42>
 800df36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df3a:	d100      	bne.n	800df3e <__cvt+0x3e>
 800df3c:	3601      	adds	r6, #1
 800df3e:	2102      	movs	r1, #2
 800df40:	e000      	b.n	800df44 <__cvt+0x44>
 800df42:	2103      	movs	r1, #3
 800df44:	ab03      	add	r3, sp, #12
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	ab02      	add	r3, sp, #8
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	ec45 4b10 	vmov	d0, r4, r5
 800df50:	4653      	mov	r3, sl
 800df52:	4632      	mov	r2, r6
 800df54:	f001 f90c 	bl	800f170 <_dtoa_r>
 800df58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df5c:	4607      	mov	r7, r0
 800df5e:	d102      	bne.n	800df66 <__cvt+0x66>
 800df60:	f019 0f01 	tst.w	r9, #1
 800df64:	d022      	beq.n	800dfac <__cvt+0xac>
 800df66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df6a:	eb07 0906 	add.w	r9, r7, r6
 800df6e:	d110      	bne.n	800df92 <__cvt+0x92>
 800df70:	783b      	ldrb	r3, [r7, #0]
 800df72:	2b30      	cmp	r3, #48	; 0x30
 800df74:	d10a      	bne.n	800df8c <__cvt+0x8c>
 800df76:	2200      	movs	r2, #0
 800df78:	2300      	movs	r3, #0
 800df7a:	4620      	mov	r0, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	f7f2 fdc3 	bl	8000b08 <__aeabi_dcmpeq>
 800df82:	b918      	cbnz	r0, 800df8c <__cvt+0x8c>
 800df84:	f1c6 0601 	rsb	r6, r6, #1
 800df88:	f8ca 6000 	str.w	r6, [sl]
 800df8c:	f8da 3000 	ldr.w	r3, [sl]
 800df90:	4499      	add	r9, r3
 800df92:	2200      	movs	r2, #0
 800df94:	2300      	movs	r3, #0
 800df96:	4620      	mov	r0, r4
 800df98:	4629      	mov	r1, r5
 800df9a:	f7f2 fdb5 	bl	8000b08 <__aeabi_dcmpeq>
 800df9e:	b108      	cbz	r0, 800dfa4 <__cvt+0xa4>
 800dfa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfa4:	2230      	movs	r2, #48	; 0x30
 800dfa6:	9b03      	ldr	r3, [sp, #12]
 800dfa8:	454b      	cmp	r3, r9
 800dfaa:	d307      	bcc.n	800dfbc <__cvt+0xbc>
 800dfac:	9b03      	ldr	r3, [sp, #12]
 800dfae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfb0:	1bdb      	subs	r3, r3, r7
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	6013      	str	r3, [r2, #0]
 800dfb6:	b004      	add	sp, #16
 800dfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbc:	1c59      	adds	r1, r3, #1
 800dfbe:	9103      	str	r1, [sp, #12]
 800dfc0:	701a      	strb	r2, [r3, #0]
 800dfc2:	e7f0      	b.n	800dfa6 <__cvt+0xa6>

0800dfc4 <__exponent>:
 800dfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	bfb8      	it	lt
 800dfcc:	4249      	neglt	r1, r1
 800dfce:	f803 2b02 	strb.w	r2, [r3], #2
 800dfd2:	bfb4      	ite	lt
 800dfd4:	222d      	movlt	r2, #45	; 0x2d
 800dfd6:	222b      	movge	r2, #43	; 0x2b
 800dfd8:	2909      	cmp	r1, #9
 800dfda:	7042      	strb	r2, [r0, #1]
 800dfdc:	dd2a      	ble.n	800e034 <__exponent+0x70>
 800dfde:	f10d 0207 	add.w	r2, sp, #7
 800dfe2:	4617      	mov	r7, r2
 800dfe4:	260a      	movs	r6, #10
 800dfe6:	4694      	mov	ip, r2
 800dfe8:	fb91 f5f6 	sdiv	r5, r1, r6
 800dfec:	fb06 1415 	mls	r4, r6, r5, r1
 800dff0:	3430      	adds	r4, #48	; 0x30
 800dff2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dff6:	460c      	mov	r4, r1
 800dff8:	2c63      	cmp	r4, #99	; 0x63
 800dffa:	f102 32ff 	add.w	r2, r2, #4294967295
 800dffe:	4629      	mov	r1, r5
 800e000:	dcf1      	bgt.n	800dfe6 <__exponent+0x22>
 800e002:	3130      	adds	r1, #48	; 0x30
 800e004:	f1ac 0402 	sub.w	r4, ip, #2
 800e008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e00c:	1c41      	adds	r1, r0, #1
 800e00e:	4622      	mov	r2, r4
 800e010:	42ba      	cmp	r2, r7
 800e012:	d30a      	bcc.n	800e02a <__exponent+0x66>
 800e014:	f10d 0209 	add.w	r2, sp, #9
 800e018:	eba2 020c 	sub.w	r2, r2, ip
 800e01c:	42bc      	cmp	r4, r7
 800e01e:	bf88      	it	hi
 800e020:	2200      	movhi	r2, #0
 800e022:	4413      	add	r3, r2
 800e024:	1a18      	subs	r0, r3, r0
 800e026:	b003      	add	sp, #12
 800e028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e02a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e02e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e032:	e7ed      	b.n	800e010 <__exponent+0x4c>
 800e034:	2330      	movs	r3, #48	; 0x30
 800e036:	3130      	adds	r1, #48	; 0x30
 800e038:	7083      	strb	r3, [r0, #2]
 800e03a:	70c1      	strb	r1, [r0, #3]
 800e03c:	1d03      	adds	r3, r0, #4
 800e03e:	e7f1      	b.n	800e024 <__exponent+0x60>

0800e040 <_printf_float>:
 800e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	ed2d 8b02 	vpush	{d8}
 800e048:	b08d      	sub	sp, #52	; 0x34
 800e04a:	460c      	mov	r4, r1
 800e04c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e050:	4616      	mov	r6, r2
 800e052:	461f      	mov	r7, r3
 800e054:	4605      	mov	r5, r0
 800e056:	f000 ff13 	bl	800ee80 <_localeconv_r>
 800e05a:	f8d0 a000 	ldr.w	sl, [r0]
 800e05e:	4650      	mov	r0, sl
 800e060:	f7f2 f926 	bl	80002b0 <strlen>
 800e064:	2300      	movs	r3, #0
 800e066:	930a      	str	r3, [sp, #40]	; 0x28
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	9305      	str	r3, [sp, #20]
 800e06c:	f8d8 3000 	ldr.w	r3, [r8]
 800e070:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e074:	3307      	adds	r3, #7
 800e076:	f023 0307 	bic.w	r3, r3, #7
 800e07a:	f103 0208 	add.w	r2, r3, #8
 800e07e:	f8c8 2000 	str.w	r2, [r8]
 800e082:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e08a:	9307      	str	r3, [sp, #28]
 800e08c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e090:	ee08 0a10 	vmov	s16, r0
 800e094:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e09c:	4b9e      	ldr	r3, [pc, #632]	; (800e318 <_printf_float+0x2d8>)
 800e09e:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a2:	f7f2 fd63 	bl	8000b6c <__aeabi_dcmpun>
 800e0a6:	bb88      	cbnz	r0, 800e10c <_printf_float+0xcc>
 800e0a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0ac:	4b9a      	ldr	r3, [pc, #616]	; (800e318 <_printf_float+0x2d8>)
 800e0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b2:	f7f2 fd3d 	bl	8000b30 <__aeabi_dcmple>
 800e0b6:	bb48      	cbnz	r0, 800e10c <_printf_float+0xcc>
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	4640      	mov	r0, r8
 800e0be:	4649      	mov	r1, r9
 800e0c0:	f7f2 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 800e0c4:	b110      	cbz	r0, 800e0cc <_printf_float+0x8c>
 800e0c6:	232d      	movs	r3, #45	; 0x2d
 800e0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0cc:	4a93      	ldr	r2, [pc, #588]	; (800e31c <_printf_float+0x2dc>)
 800e0ce:	4b94      	ldr	r3, [pc, #592]	; (800e320 <_printf_float+0x2e0>)
 800e0d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e0d4:	bf94      	ite	ls
 800e0d6:	4690      	movls	r8, r2
 800e0d8:	4698      	movhi	r8, r3
 800e0da:	2303      	movs	r3, #3
 800e0dc:	6123      	str	r3, [r4, #16]
 800e0de:	9b05      	ldr	r3, [sp, #20]
 800e0e0:	f023 0304 	bic.w	r3, r3, #4
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	f04f 0900 	mov.w	r9, #0
 800e0ea:	9700      	str	r7, [sp, #0]
 800e0ec:	4633      	mov	r3, r6
 800e0ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f000 f9da 	bl	800e4ac <_printf_common>
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	f040 8090 	bne.w	800e21e <_printf_float+0x1de>
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	b00d      	add	sp, #52	; 0x34
 800e104:	ecbd 8b02 	vpop	{d8}
 800e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10c:	4642      	mov	r2, r8
 800e10e:	464b      	mov	r3, r9
 800e110:	4640      	mov	r0, r8
 800e112:	4649      	mov	r1, r9
 800e114:	f7f2 fd2a 	bl	8000b6c <__aeabi_dcmpun>
 800e118:	b140      	cbz	r0, 800e12c <_printf_float+0xec>
 800e11a:	464b      	mov	r3, r9
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	bfbc      	itt	lt
 800e120:	232d      	movlt	r3, #45	; 0x2d
 800e122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e126:	4a7f      	ldr	r2, [pc, #508]	; (800e324 <_printf_float+0x2e4>)
 800e128:	4b7f      	ldr	r3, [pc, #508]	; (800e328 <_printf_float+0x2e8>)
 800e12a:	e7d1      	b.n	800e0d0 <_printf_float+0x90>
 800e12c:	6863      	ldr	r3, [r4, #4]
 800e12e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e132:	9206      	str	r2, [sp, #24]
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	d13f      	bne.n	800e1b8 <_printf_float+0x178>
 800e138:	2306      	movs	r3, #6
 800e13a:	6063      	str	r3, [r4, #4]
 800e13c:	9b05      	ldr	r3, [sp, #20]
 800e13e:	6861      	ldr	r1, [r4, #4]
 800e140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e144:	2300      	movs	r3, #0
 800e146:	9303      	str	r3, [sp, #12]
 800e148:	ab0a      	add	r3, sp, #40	; 0x28
 800e14a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e14e:	ab09      	add	r3, sp, #36	; 0x24
 800e150:	ec49 8b10 	vmov	d0, r8, r9
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	6022      	str	r2, [r4, #0]
 800e158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e15c:	4628      	mov	r0, r5
 800e15e:	f7ff fecf 	bl	800df00 <__cvt>
 800e162:	9b06      	ldr	r3, [sp, #24]
 800e164:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e166:	2b47      	cmp	r3, #71	; 0x47
 800e168:	4680      	mov	r8, r0
 800e16a:	d108      	bne.n	800e17e <_printf_float+0x13e>
 800e16c:	1cc8      	adds	r0, r1, #3
 800e16e:	db02      	blt.n	800e176 <_printf_float+0x136>
 800e170:	6863      	ldr	r3, [r4, #4]
 800e172:	4299      	cmp	r1, r3
 800e174:	dd41      	ble.n	800e1fa <_printf_float+0x1ba>
 800e176:	f1ab 0302 	sub.w	r3, fp, #2
 800e17a:	fa5f fb83 	uxtb.w	fp, r3
 800e17e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e182:	d820      	bhi.n	800e1c6 <_printf_float+0x186>
 800e184:	3901      	subs	r1, #1
 800e186:	465a      	mov	r2, fp
 800e188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e18c:	9109      	str	r1, [sp, #36]	; 0x24
 800e18e:	f7ff ff19 	bl	800dfc4 <__exponent>
 800e192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e194:	1813      	adds	r3, r2, r0
 800e196:	2a01      	cmp	r2, #1
 800e198:	4681      	mov	r9, r0
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	dc02      	bgt.n	800e1a4 <_printf_float+0x164>
 800e19e:	6822      	ldr	r2, [r4, #0]
 800e1a0:	07d2      	lsls	r2, r2, #31
 800e1a2:	d501      	bpl.n	800e1a8 <_printf_float+0x168>
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	6123      	str	r3, [r4, #16]
 800e1a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d09c      	beq.n	800e0ea <_printf_float+0xaa>
 800e1b0:	232d      	movs	r3, #45	; 0x2d
 800e1b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b6:	e798      	b.n	800e0ea <_printf_float+0xaa>
 800e1b8:	9a06      	ldr	r2, [sp, #24]
 800e1ba:	2a47      	cmp	r2, #71	; 0x47
 800e1bc:	d1be      	bne.n	800e13c <_printf_float+0xfc>
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1bc      	bne.n	800e13c <_printf_float+0xfc>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e7b9      	b.n	800e13a <_printf_float+0xfa>
 800e1c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e1ca:	d118      	bne.n	800e1fe <_printf_float+0x1be>
 800e1cc:	2900      	cmp	r1, #0
 800e1ce:	6863      	ldr	r3, [r4, #4]
 800e1d0:	dd0b      	ble.n	800e1ea <_printf_float+0x1aa>
 800e1d2:	6121      	str	r1, [r4, #16]
 800e1d4:	b913      	cbnz	r3, 800e1dc <_printf_float+0x19c>
 800e1d6:	6822      	ldr	r2, [r4, #0]
 800e1d8:	07d0      	lsls	r0, r2, #31
 800e1da:	d502      	bpl.n	800e1e2 <_printf_float+0x1a2>
 800e1dc:	3301      	adds	r3, #1
 800e1de:	440b      	add	r3, r1
 800e1e0:	6123      	str	r3, [r4, #16]
 800e1e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e1e4:	f04f 0900 	mov.w	r9, #0
 800e1e8:	e7de      	b.n	800e1a8 <_printf_float+0x168>
 800e1ea:	b913      	cbnz	r3, 800e1f2 <_printf_float+0x1b2>
 800e1ec:	6822      	ldr	r2, [r4, #0]
 800e1ee:	07d2      	lsls	r2, r2, #31
 800e1f0:	d501      	bpl.n	800e1f6 <_printf_float+0x1b6>
 800e1f2:	3302      	adds	r3, #2
 800e1f4:	e7f4      	b.n	800e1e0 <_printf_float+0x1a0>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e7f2      	b.n	800e1e0 <_printf_float+0x1a0>
 800e1fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e200:	4299      	cmp	r1, r3
 800e202:	db05      	blt.n	800e210 <_printf_float+0x1d0>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	6121      	str	r1, [r4, #16]
 800e208:	07d8      	lsls	r0, r3, #31
 800e20a:	d5ea      	bpl.n	800e1e2 <_printf_float+0x1a2>
 800e20c:	1c4b      	adds	r3, r1, #1
 800e20e:	e7e7      	b.n	800e1e0 <_printf_float+0x1a0>
 800e210:	2900      	cmp	r1, #0
 800e212:	bfd4      	ite	le
 800e214:	f1c1 0202 	rsble	r2, r1, #2
 800e218:	2201      	movgt	r2, #1
 800e21a:	4413      	add	r3, r2
 800e21c:	e7e0      	b.n	800e1e0 <_printf_float+0x1a0>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	055a      	lsls	r2, r3, #21
 800e222:	d407      	bmi.n	800e234 <_printf_float+0x1f4>
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	4642      	mov	r2, r8
 800e228:	4631      	mov	r1, r6
 800e22a:	4628      	mov	r0, r5
 800e22c:	47b8      	blx	r7
 800e22e:	3001      	adds	r0, #1
 800e230:	d12c      	bne.n	800e28c <_printf_float+0x24c>
 800e232:	e764      	b.n	800e0fe <_printf_float+0xbe>
 800e234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e238:	f240 80e0 	bls.w	800e3fc <_printf_float+0x3bc>
 800e23c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e240:	2200      	movs	r2, #0
 800e242:	2300      	movs	r3, #0
 800e244:	f7f2 fc60 	bl	8000b08 <__aeabi_dcmpeq>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d034      	beq.n	800e2b6 <_printf_float+0x276>
 800e24c:	4a37      	ldr	r2, [pc, #220]	; (800e32c <_printf_float+0x2ec>)
 800e24e:	2301      	movs	r3, #1
 800e250:	4631      	mov	r1, r6
 800e252:	4628      	mov	r0, r5
 800e254:	47b8      	blx	r7
 800e256:	3001      	adds	r0, #1
 800e258:	f43f af51 	beq.w	800e0fe <_printf_float+0xbe>
 800e25c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e260:	429a      	cmp	r2, r3
 800e262:	db02      	blt.n	800e26a <_printf_float+0x22a>
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	07d8      	lsls	r0, r3, #31
 800e268:	d510      	bpl.n	800e28c <_printf_float+0x24c>
 800e26a:	ee18 3a10 	vmov	r3, s16
 800e26e:	4652      	mov	r2, sl
 800e270:	4631      	mov	r1, r6
 800e272:	4628      	mov	r0, r5
 800e274:	47b8      	blx	r7
 800e276:	3001      	adds	r0, #1
 800e278:	f43f af41 	beq.w	800e0fe <_printf_float+0xbe>
 800e27c:	f04f 0800 	mov.w	r8, #0
 800e280:	f104 091a 	add.w	r9, r4, #26
 800e284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e286:	3b01      	subs	r3, #1
 800e288:	4543      	cmp	r3, r8
 800e28a:	dc09      	bgt.n	800e2a0 <_printf_float+0x260>
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	079b      	lsls	r3, r3, #30
 800e290:	f100 8107 	bmi.w	800e4a2 <_printf_float+0x462>
 800e294:	68e0      	ldr	r0, [r4, #12]
 800e296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e298:	4298      	cmp	r0, r3
 800e29a:	bfb8      	it	lt
 800e29c:	4618      	movlt	r0, r3
 800e29e:	e730      	b.n	800e102 <_printf_float+0xc2>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	464a      	mov	r2, r9
 800e2a4:	4631      	mov	r1, r6
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	47b8      	blx	r7
 800e2aa:	3001      	adds	r0, #1
 800e2ac:	f43f af27 	beq.w	800e0fe <_printf_float+0xbe>
 800e2b0:	f108 0801 	add.w	r8, r8, #1
 800e2b4:	e7e6      	b.n	800e284 <_printf_float+0x244>
 800e2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	dc39      	bgt.n	800e330 <_printf_float+0x2f0>
 800e2bc:	4a1b      	ldr	r2, [pc, #108]	; (800e32c <_printf_float+0x2ec>)
 800e2be:	2301      	movs	r3, #1
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	47b8      	blx	r7
 800e2c6:	3001      	adds	r0, #1
 800e2c8:	f43f af19 	beq.w	800e0fe <_printf_float+0xbe>
 800e2cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	d102      	bne.n	800e2da <_printf_float+0x29a>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	07d9      	lsls	r1, r3, #31
 800e2d8:	d5d8      	bpl.n	800e28c <_printf_float+0x24c>
 800e2da:	ee18 3a10 	vmov	r3, s16
 800e2de:	4652      	mov	r2, sl
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47b8      	blx	r7
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	f43f af09 	beq.w	800e0fe <_printf_float+0xbe>
 800e2ec:	f04f 0900 	mov.w	r9, #0
 800e2f0:	f104 0a1a 	add.w	sl, r4, #26
 800e2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f6:	425b      	negs	r3, r3
 800e2f8:	454b      	cmp	r3, r9
 800e2fa:	dc01      	bgt.n	800e300 <_printf_float+0x2c0>
 800e2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2fe:	e792      	b.n	800e226 <_printf_float+0x1e6>
 800e300:	2301      	movs	r3, #1
 800e302:	4652      	mov	r2, sl
 800e304:	4631      	mov	r1, r6
 800e306:	4628      	mov	r0, r5
 800e308:	47b8      	blx	r7
 800e30a:	3001      	adds	r0, #1
 800e30c:	f43f aef7 	beq.w	800e0fe <_printf_float+0xbe>
 800e310:	f109 0901 	add.w	r9, r9, #1
 800e314:	e7ee      	b.n	800e2f4 <_printf_float+0x2b4>
 800e316:	bf00      	nop
 800e318:	7fefffff 	.word	0x7fefffff
 800e31c:	080140b0 	.word	0x080140b0
 800e320:	080140b4 	.word	0x080140b4
 800e324:	080140b8 	.word	0x080140b8
 800e328:	080140bc 	.word	0x080140bc
 800e32c:	08014448 	.word	0x08014448
 800e330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e334:	429a      	cmp	r2, r3
 800e336:	bfa8      	it	ge
 800e338:	461a      	movge	r2, r3
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	4691      	mov	r9, r2
 800e33e:	dc37      	bgt.n	800e3b0 <_printf_float+0x370>
 800e340:	f04f 0b00 	mov.w	fp, #0
 800e344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e348:	f104 021a 	add.w	r2, r4, #26
 800e34c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e34e:	9305      	str	r3, [sp, #20]
 800e350:	eba3 0309 	sub.w	r3, r3, r9
 800e354:	455b      	cmp	r3, fp
 800e356:	dc33      	bgt.n	800e3c0 <_printf_float+0x380>
 800e358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e35c:	429a      	cmp	r2, r3
 800e35e:	db3b      	blt.n	800e3d8 <_printf_float+0x398>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	07da      	lsls	r2, r3, #31
 800e364:	d438      	bmi.n	800e3d8 <_printf_float+0x398>
 800e366:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e36a:	eba2 0903 	sub.w	r9, r2, r3
 800e36e:	9b05      	ldr	r3, [sp, #20]
 800e370:	1ad2      	subs	r2, r2, r3
 800e372:	4591      	cmp	r9, r2
 800e374:	bfa8      	it	ge
 800e376:	4691      	movge	r9, r2
 800e378:	f1b9 0f00 	cmp.w	r9, #0
 800e37c:	dc35      	bgt.n	800e3ea <_printf_float+0x3aa>
 800e37e:	f04f 0800 	mov.w	r8, #0
 800e382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e386:	f104 0a1a 	add.w	sl, r4, #26
 800e38a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e38e:	1a9b      	subs	r3, r3, r2
 800e390:	eba3 0309 	sub.w	r3, r3, r9
 800e394:	4543      	cmp	r3, r8
 800e396:	f77f af79 	ble.w	800e28c <_printf_float+0x24c>
 800e39a:	2301      	movs	r3, #1
 800e39c:	4652      	mov	r2, sl
 800e39e:	4631      	mov	r1, r6
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b8      	blx	r7
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	f43f aeaa 	beq.w	800e0fe <_printf_float+0xbe>
 800e3aa:	f108 0801 	add.w	r8, r8, #1
 800e3ae:	e7ec      	b.n	800e38a <_printf_float+0x34a>
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4642      	mov	r2, r8
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	47b8      	blx	r7
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	d1c0      	bne.n	800e340 <_printf_float+0x300>
 800e3be:	e69e      	b.n	800e0fe <_printf_float+0xbe>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	9205      	str	r2, [sp, #20]
 800e3c8:	47b8      	blx	r7
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	f43f ae97 	beq.w	800e0fe <_printf_float+0xbe>
 800e3d0:	9a05      	ldr	r2, [sp, #20]
 800e3d2:	f10b 0b01 	add.w	fp, fp, #1
 800e3d6:	e7b9      	b.n	800e34c <_printf_float+0x30c>
 800e3d8:	ee18 3a10 	vmov	r3, s16
 800e3dc:	4652      	mov	r2, sl
 800e3de:	4631      	mov	r1, r6
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	47b8      	blx	r7
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	d1be      	bne.n	800e366 <_printf_float+0x326>
 800e3e8:	e689      	b.n	800e0fe <_printf_float+0xbe>
 800e3ea:	9a05      	ldr	r2, [sp, #20]
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	4442      	add	r2, r8
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	d1c1      	bne.n	800e37e <_printf_float+0x33e>
 800e3fa:	e680      	b.n	800e0fe <_printf_float+0xbe>
 800e3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3fe:	2a01      	cmp	r2, #1
 800e400:	dc01      	bgt.n	800e406 <_printf_float+0x3c6>
 800e402:	07db      	lsls	r3, r3, #31
 800e404:	d53a      	bpl.n	800e47c <_printf_float+0x43c>
 800e406:	2301      	movs	r3, #1
 800e408:	4642      	mov	r2, r8
 800e40a:	4631      	mov	r1, r6
 800e40c:	4628      	mov	r0, r5
 800e40e:	47b8      	blx	r7
 800e410:	3001      	adds	r0, #1
 800e412:	f43f ae74 	beq.w	800e0fe <_printf_float+0xbe>
 800e416:	ee18 3a10 	vmov	r3, s16
 800e41a:	4652      	mov	r2, sl
 800e41c:	4631      	mov	r1, r6
 800e41e:	4628      	mov	r0, r5
 800e420:	47b8      	blx	r7
 800e422:	3001      	adds	r0, #1
 800e424:	f43f ae6b 	beq.w	800e0fe <_printf_float+0xbe>
 800e428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e42c:	2200      	movs	r2, #0
 800e42e:	2300      	movs	r3, #0
 800e430:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e434:	f7f2 fb68 	bl	8000b08 <__aeabi_dcmpeq>
 800e438:	b9d8      	cbnz	r0, 800e472 <_printf_float+0x432>
 800e43a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e43e:	f108 0201 	add.w	r2, r8, #1
 800e442:	4631      	mov	r1, r6
 800e444:	4628      	mov	r0, r5
 800e446:	47b8      	blx	r7
 800e448:	3001      	adds	r0, #1
 800e44a:	d10e      	bne.n	800e46a <_printf_float+0x42a>
 800e44c:	e657      	b.n	800e0fe <_printf_float+0xbe>
 800e44e:	2301      	movs	r3, #1
 800e450:	4652      	mov	r2, sl
 800e452:	4631      	mov	r1, r6
 800e454:	4628      	mov	r0, r5
 800e456:	47b8      	blx	r7
 800e458:	3001      	adds	r0, #1
 800e45a:	f43f ae50 	beq.w	800e0fe <_printf_float+0xbe>
 800e45e:	f108 0801 	add.w	r8, r8, #1
 800e462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e464:	3b01      	subs	r3, #1
 800e466:	4543      	cmp	r3, r8
 800e468:	dcf1      	bgt.n	800e44e <_printf_float+0x40e>
 800e46a:	464b      	mov	r3, r9
 800e46c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e470:	e6da      	b.n	800e228 <_printf_float+0x1e8>
 800e472:	f04f 0800 	mov.w	r8, #0
 800e476:	f104 0a1a 	add.w	sl, r4, #26
 800e47a:	e7f2      	b.n	800e462 <_printf_float+0x422>
 800e47c:	2301      	movs	r3, #1
 800e47e:	4642      	mov	r2, r8
 800e480:	e7df      	b.n	800e442 <_printf_float+0x402>
 800e482:	2301      	movs	r3, #1
 800e484:	464a      	mov	r2, r9
 800e486:	4631      	mov	r1, r6
 800e488:	4628      	mov	r0, r5
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	f43f ae36 	beq.w	800e0fe <_printf_float+0xbe>
 800e492:	f108 0801 	add.w	r8, r8, #1
 800e496:	68e3      	ldr	r3, [r4, #12]
 800e498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e49a:	1a5b      	subs	r3, r3, r1
 800e49c:	4543      	cmp	r3, r8
 800e49e:	dcf0      	bgt.n	800e482 <_printf_float+0x442>
 800e4a0:	e6f8      	b.n	800e294 <_printf_float+0x254>
 800e4a2:	f04f 0800 	mov.w	r8, #0
 800e4a6:	f104 0919 	add.w	r9, r4, #25
 800e4aa:	e7f4      	b.n	800e496 <_printf_float+0x456>

0800e4ac <_printf_common>:
 800e4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4b0:	4616      	mov	r6, r2
 800e4b2:	4699      	mov	r9, r3
 800e4b4:	688a      	ldr	r2, [r1, #8]
 800e4b6:	690b      	ldr	r3, [r1, #16]
 800e4b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	bfb8      	it	lt
 800e4c0:	4613      	movlt	r3, r2
 800e4c2:	6033      	str	r3, [r6, #0]
 800e4c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	b10a      	cbz	r2, 800e4d2 <_printf_common+0x26>
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	6033      	str	r3, [r6, #0]
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	0699      	lsls	r1, r3, #26
 800e4d6:	bf42      	ittt	mi
 800e4d8:	6833      	ldrmi	r3, [r6, #0]
 800e4da:	3302      	addmi	r3, #2
 800e4dc:	6033      	strmi	r3, [r6, #0]
 800e4de:	6825      	ldr	r5, [r4, #0]
 800e4e0:	f015 0506 	ands.w	r5, r5, #6
 800e4e4:	d106      	bne.n	800e4f4 <_printf_common+0x48>
 800e4e6:	f104 0a19 	add.w	sl, r4, #25
 800e4ea:	68e3      	ldr	r3, [r4, #12]
 800e4ec:	6832      	ldr	r2, [r6, #0]
 800e4ee:	1a9b      	subs	r3, r3, r2
 800e4f0:	42ab      	cmp	r3, r5
 800e4f2:	dc26      	bgt.n	800e542 <_printf_common+0x96>
 800e4f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4f8:	1e13      	subs	r3, r2, #0
 800e4fa:	6822      	ldr	r2, [r4, #0]
 800e4fc:	bf18      	it	ne
 800e4fe:	2301      	movne	r3, #1
 800e500:	0692      	lsls	r2, r2, #26
 800e502:	d42b      	bmi.n	800e55c <_printf_common+0xb0>
 800e504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e508:	4649      	mov	r1, r9
 800e50a:	4638      	mov	r0, r7
 800e50c:	47c0      	blx	r8
 800e50e:	3001      	adds	r0, #1
 800e510:	d01e      	beq.n	800e550 <_printf_common+0xa4>
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	6922      	ldr	r2, [r4, #16]
 800e516:	f003 0306 	and.w	r3, r3, #6
 800e51a:	2b04      	cmp	r3, #4
 800e51c:	bf02      	ittt	eq
 800e51e:	68e5      	ldreq	r5, [r4, #12]
 800e520:	6833      	ldreq	r3, [r6, #0]
 800e522:	1aed      	subeq	r5, r5, r3
 800e524:	68a3      	ldr	r3, [r4, #8]
 800e526:	bf0c      	ite	eq
 800e528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e52c:	2500      	movne	r5, #0
 800e52e:	4293      	cmp	r3, r2
 800e530:	bfc4      	itt	gt
 800e532:	1a9b      	subgt	r3, r3, r2
 800e534:	18ed      	addgt	r5, r5, r3
 800e536:	2600      	movs	r6, #0
 800e538:	341a      	adds	r4, #26
 800e53a:	42b5      	cmp	r5, r6
 800e53c:	d11a      	bne.n	800e574 <_printf_common+0xc8>
 800e53e:	2000      	movs	r0, #0
 800e540:	e008      	b.n	800e554 <_printf_common+0xa8>
 800e542:	2301      	movs	r3, #1
 800e544:	4652      	mov	r2, sl
 800e546:	4649      	mov	r1, r9
 800e548:	4638      	mov	r0, r7
 800e54a:	47c0      	blx	r8
 800e54c:	3001      	adds	r0, #1
 800e54e:	d103      	bne.n	800e558 <_printf_common+0xac>
 800e550:	f04f 30ff 	mov.w	r0, #4294967295
 800e554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e558:	3501      	adds	r5, #1
 800e55a:	e7c6      	b.n	800e4ea <_printf_common+0x3e>
 800e55c:	18e1      	adds	r1, r4, r3
 800e55e:	1c5a      	adds	r2, r3, #1
 800e560:	2030      	movs	r0, #48	; 0x30
 800e562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e566:	4422      	add	r2, r4
 800e568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e56c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e570:	3302      	adds	r3, #2
 800e572:	e7c7      	b.n	800e504 <_printf_common+0x58>
 800e574:	2301      	movs	r3, #1
 800e576:	4622      	mov	r2, r4
 800e578:	4649      	mov	r1, r9
 800e57a:	4638      	mov	r0, r7
 800e57c:	47c0      	blx	r8
 800e57e:	3001      	adds	r0, #1
 800e580:	d0e6      	beq.n	800e550 <_printf_common+0xa4>
 800e582:	3601      	adds	r6, #1
 800e584:	e7d9      	b.n	800e53a <_printf_common+0x8e>
	...

0800e588 <_printf_i>:
 800e588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e58c:	7e0f      	ldrb	r7, [r1, #24]
 800e58e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e590:	2f78      	cmp	r7, #120	; 0x78
 800e592:	4691      	mov	r9, r2
 800e594:	4680      	mov	r8, r0
 800e596:	460c      	mov	r4, r1
 800e598:	469a      	mov	sl, r3
 800e59a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e59e:	d807      	bhi.n	800e5b0 <_printf_i+0x28>
 800e5a0:	2f62      	cmp	r7, #98	; 0x62
 800e5a2:	d80a      	bhi.n	800e5ba <_printf_i+0x32>
 800e5a4:	2f00      	cmp	r7, #0
 800e5a6:	f000 80d4 	beq.w	800e752 <_printf_i+0x1ca>
 800e5aa:	2f58      	cmp	r7, #88	; 0x58
 800e5ac:	f000 80c0 	beq.w	800e730 <_printf_i+0x1a8>
 800e5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5b8:	e03a      	b.n	800e630 <_printf_i+0xa8>
 800e5ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5be:	2b15      	cmp	r3, #21
 800e5c0:	d8f6      	bhi.n	800e5b0 <_printf_i+0x28>
 800e5c2:	a101      	add	r1, pc, #4	; (adr r1, 800e5c8 <_printf_i+0x40>)
 800e5c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5c8:	0800e621 	.word	0x0800e621
 800e5cc:	0800e635 	.word	0x0800e635
 800e5d0:	0800e5b1 	.word	0x0800e5b1
 800e5d4:	0800e5b1 	.word	0x0800e5b1
 800e5d8:	0800e5b1 	.word	0x0800e5b1
 800e5dc:	0800e5b1 	.word	0x0800e5b1
 800e5e0:	0800e635 	.word	0x0800e635
 800e5e4:	0800e5b1 	.word	0x0800e5b1
 800e5e8:	0800e5b1 	.word	0x0800e5b1
 800e5ec:	0800e5b1 	.word	0x0800e5b1
 800e5f0:	0800e5b1 	.word	0x0800e5b1
 800e5f4:	0800e739 	.word	0x0800e739
 800e5f8:	0800e661 	.word	0x0800e661
 800e5fc:	0800e6f3 	.word	0x0800e6f3
 800e600:	0800e5b1 	.word	0x0800e5b1
 800e604:	0800e5b1 	.word	0x0800e5b1
 800e608:	0800e75b 	.word	0x0800e75b
 800e60c:	0800e5b1 	.word	0x0800e5b1
 800e610:	0800e661 	.word	0x0800e661
 800e614:	0800e5b1 	.word	0x0800e5b1
 800e618:	0800e5b1 	.word	0x0800e5b1
 800e61c:	0800e6fb 	.word	0x0800e6fb
 800e620:	682b      	ldr	r3, [r5, #0]
 800e622:	1d1a      	adds	r2, r3, #4
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	602a      	str	r2, [r5, #0]
 800e628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e62c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e630:	2301      	movs	r3, #1
 800e632:	e09f      	b.n	800e774 <_printf_i+0x1ec>
 800e634:	6820      	ldr	r0, [r4, #0]
 800e636:	682b      	ldr	r3, [r5, #0]
 800e638:	0607      	lsls	r7, r0, #24
 800e63a:	f103 0104 	add.w	r1, r3, #4
 800e63e:	6029      	str	r1, [r5, #0]
 800e640:	d501      	bpl.n	800e646 <_printf_i+0xbe>
 800e642:	681e      	ldr	r6, [r3, #0]
 800e644:	e003      	b.n	800e64e <_printf_i+0xc6>
 800e646:	0646      	lsls	r6, r0, #25
 800e648:	d5fb      	bpl.n	800e642 <_printf_i+0xba>
 800e64a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e64e:	2e00      	cmp	r6, #0
 800e650:	da03      	bge.n	800e65a <_printf_i+0xd2>
 800e652:	232d      	movs	r3, #45	; 0x2d
 800e654:	4276      	negs	r6, r6
 800e656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e65a:	485a      	ldr	r0, [pc, #360]	; (800e7c4 <_printf_i+0x23c>)
 800e65c:	230a      	movs	r3, #10
 800e65e:	e012      	b.n	800e686 <_printf_i+0xfe>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	6820      	ldr	r0, [r4, #0]
 800e664:	1d19      	adds	r1, r3, #4
 800e666:	6029      	str	r1, [r5, #0]
 800e668:	0605      	lsls	r5, r0, #24
 800e66a:	d501      	bpl.n	800e670 <_printf_i+0xe8>
 800e66c:	681e      	ldr	r6, [r3, #0]
 800e66e:	e002      	b.n	800e676 <_printf_i+0xee>
 800e670:	0641      	lsls	r1, r0, #25
 800e672:	d5fb      	bpl.n	800e66c <_printf_i+0xe4>
 800e674:	881e      	ldrh	r6, [r3, #0]
 800e676:	4853      	ldr	r0, [pc, #332]	; (800e7c4 <_printf_i+0x23c>)
 800e678:	2f6f      	cmp	r7, #111	; 0x6f
 800e67a:	bf0c      	ite	eq
 800e67c:	2308      	moveq	r3, #8
 800e67e:	230a      	movne	r3, #10
 800e680:	2100      	movs	r1, #0
 800e682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e686:	6865      	ldr	r5, [r4, #4]
 800e688:	60a5      	str	r5, [r4, #8]
 800e68a:	2d00      	cmp	r5, #0
 800e68c:	bfa2      	ittt	ge
 800e68e:	6821      	ldrge	r1, [r4, #0]
 800e690:	f021 0104 	bicge.w	r1, r1, #4
 800e694:	6021      	strge	r1, [r4, #0]
 800e696:	b90e      	cbnz	r6, 800e69c <_printf_i+0x114>
 800e698:	2d00      	cmp	r5, #0
 800e69a:	d04b      	beq.n	800e734 <_printf_i+0x1ac>
 800e69c:	4615      	mov	r5, r2
 800e69e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6a2:	fb03 6711 	mls	r7, r3, r1, r6
 800e6a6:	5dc7      	ldrb	r7, [r0, r7]
 800e6a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6ac:	4637      	mov	r7, r6
 800e6ae:	42bb      	cmp	r3, r7
 800e6b0:	460e      	mov	r6, r1
 800e6b2:	d9f4      	bls.n	800e69e <_printf_i+0x116>
 800e6b4:	2b08      	cmp	r3, #8
 800e6b6:	d10b      	bne.n	800e6d0 <_printf_i+0x148>
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	07de      	lsls	r6, r3, #31
 800e6bc:	d508      	bpl.n	800e6d0 <_printf_i+0x148>
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	6861      	ldr	r1, [r4, #4]
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	bfde      	ittt	le
 800e6c6:	2330      	movle	r3, #48	; 0x30
 800e6c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6d0:	1b52      	subs	r2, r2, r5
 800e6d2:	6122      	str	r2, [r4, #16]
 800e6d4:	f8cd a000 	str.w	sl, [sp]
 800e6d8:	464b      	mov	r3, r9
 800e6da:	aa03      	add	r2, sp, #12
 800e6dc:	4621      	mov	r1, r4
 800e6de:	4640      	mov	r0, r8
 800e6e0:	f7ff fee4 	bl	800e4ac <_printf_common>
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d14a      	bne.n	800e77e <_printf_i+0x1f6>
 800e6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ec:	b004      	add	sp, #16
 800e6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	f043 0320 	orr.w	r3, r3, #32
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	4833      	ldr	r0, [pc, #204]	; (800e7c8 <_printf_i+0x240>)
 800e6fc:	2778      	movs	r7, #120	; 0x78
 800e6fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	6829      	ldr	r1, [r5, #0]
 800e706:	061f      	lsls	r7, r3, #24
 800e708:	f851 6b04 	ldr.w	r6, [r1], #4
 800e70c:	d402      	bmi.n	800e714 <_printf_i+0x18c>
 800e70e:	065f      	lsls	r7, r3, #25
 800e710:	bf48      	it	mi
 800e712:	b2b6      	uxthmi	r6, r6
 800e714:	07df      	lsls	r7, r3, #31
 800e716:	bf48      	it	mi
 800e718:	f043 0320 	orrmi.w	r3, r3, #32
 800e71c:	6029      	str	r1, [r5, #0]
 800e71e:	bf48      	it	mi
 800e720:	6023      	strmi	r3, [r4, #0]
 800e722:	b91e      	cbnz	r6, 800e72c <_printf_i+0x1a4>
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	f023 0320 	bic.w	r3, r3, #32
 800e72a:	6023      	str	r3, [r4, #0]
 800e72c:	2310      	movs	r3, #16
 800e72e:	e7a7      	b.n	800e680 <_printf_i+0xf8>
 800e730:	4824      	ldr	r0, [pc, #144]	; (800e7c4 <_printf_i+0x23c>)
 800e732:	e7e4      	b.n	800e6fe <_printf_i+0x176>
 800e734:	4615      	mov	r5, r2
 800e736:	e7bd      	b.n	800e6b4 <_printf_i+0x12c>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	6826      	ldr	r6, [r4, #0]
 800e73c:	6961      	ldr	r1, [r4, #20]
 800e73e:	1d18      	adds	r0, r3, #4
 800e740:	6028      	str	r0, [r5, #0]
 800e742:	0635      	lsls	r5, r6, #24
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	d501      	bpl.n	800e74c <_printf_i+0x1c4>
 800e748:	6019      	str	r1, [r3, #0]
 800e74a:	e002      	b.n	800e752 <_printf_i+0x1ca>
 800e74c:	0670      	lsls	r0, r6, #25
 800e74e:	d5fb      	bpl.n	800e748 <_printf_i+0x1c0>
 800e750:	8019      	strh	r1, [r3, #0]
 800e752:	2300      	movs	r3, #0
 800e754:	6123      	str	r3, [r4, #16]
 800e756:	4615      	mov	r5, r2
 800e758:	e7bc      	b.n	800e6d4 <_printf_i+0x14c>
 800e75a:	682b      	ldr	r3, [r5, #0]
 800e75c:	1d1a      	adds	r2, r3, #4
 800e75e:	602a      	str	r2, [r5, #0]
 800e760:	681d      	ldr	r5, [r3, #0]
 800e762:	6862      	ldr	r2, [r4, #4]
 800e764:	2100      	movs	r1, #0
 800e766:	4628      	mov	r0, r5
 800e768:	f7f1 fd52 	bl	8000210 <memchr>
 800e76c:	b108      	cbz	r0, 800e772 <_printf_i+0x1ea>
 800e76e:	1b40      	subs	r0, r0, r5
 800e770:	6060      	str	r0, [r4, #4]
 800e772:	6863      	ldr	r3, [r4, #4]
 800e774:	6123      	str	r3, [r4, #16]
 800e776:	2300      	movs	r3, #0
 800e778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e77c:	e7aa      	b.n	800e6d4 <_printf_i+0x14c>
 800e77e:	6923      	ldr	r3, [r4, #16]
 800e780:	462a      	mov	r2, r5
 800e782:	4649      	mov	r1, r9
 800e784:	4640      	mov	r0, r8
 800e786:	47d0      	blx	sl
 800e788:	3001      	adds	r0, #1
 800e78a:	d0ad      	beq.n	800e6e8 <_printf_i+0x160>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	079b      	lsls	r3, r3, #30
 800e790:	d413      	bmi.n	800e7ba <_printf_i+0x232>
 800e792:	68e0      	ldr	r0, [r4, #12]
 800e794:	9b03      	ldr	r3, [sp, #12]
 800e796:	4298      	cmp	r0, r3
 800e798:	bfb8      	it	lt
 800e79a:	4618      	movlt	r0, r3
 800e79c:	e7a6      	b.n	800e6ec <_printf_i+0x164>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	4632      	mov	r2, r6
 800e7a2:	4649      	mov	r1, r9
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	47d0      	blx	sl
 800e7a8:	3001      	adds	r0, #1
 800e7aa:	d09d      	beq.n	800e6e8 <_printf_i+0x160>
 800e7ac:	3501      	adds	r5, #1
 800e7ae:	68e3      	ldr	r3, [r4, #12]
 800e7b0:	9903      	ldr	r1, [sp, #12]
 800e7b2:	1a5b      	subs	r3, r3, r1
 800e7b4:	42ab      	cmp	r3, r5
 800e7b6:	dcf2      	bgt.n	800e79e <_printf_i+0x216>
 800e7b8:	e7eb      	b.n	800e792 <_printf_i+0x20a>
 800e7ba:	2500      	movs	r5, #0
 800e7bc:	f104 0619 	add.w	r6, r4, #25
 800e7c0:	e7f5      	b.n	800e7ae <_printf_i+0x226>
 800e7c2:	bf00      	nop
 800e7c4:	080140c0 	.word	0x080140c0
 800e7c8:	080140d1 	.word	0x080140d1

0800e7cc <_scanf_float>:
 800e7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d0:	b087      	sub	sp, #28
 800e7d2:	4617      	mov	r7, r2
 800e7d4:	9303      	str	r3, [sp, #12]
 800e7d6:	688b      	ldr	r3, [r1, #8]
 800e7d8:	1e5a      	subs	r2, r3, #1
 800e7da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e7de:	bf83      	ittte	hi
 800e7e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e7e4:	195b      	addhi	r3, r3, r5
 800e7e6:	9302      	strhi	r3, [sp, #8]
 800e7e8:	2300      	movls	r3, #0
 800e7ea:	bf86      	itte	hi
 800e7ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e7f0:	608b      	strhi	r3, [r1, #8]
 800e7f2:	9302      	strls	r3, [sp, #8]
 800e7f4:	680b      	ldr	r3, [r1, #0]
 800e7f6:	468b      	mov	fp, r1
 800e7f8:	2500      	movs	r5, #0
 800e7fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e7fe:	f84b 3b1c 	str.w	r3, [fp], #28
 800e802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e806:	4680      	mov	r8, r0
 800e808:	460c      	mov	r4, r1
 800e80a:	465e      	mov	r6, fp
 800e80c:	46aa      	mov	sl, r5
 800e80e:	46a9      	mov	r9, r5
 800e810:	9501      	str	r5, [sp, #4]
 800e812:	68a2      	ldr	r2, [r4, #8]
 800e814:	b152      	cbz	r2, 800e82c <_scanf_float+0x60>
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b4e      	cmp	r3, #78	; 0x4e
 800e81c:	d864      	bhi.n	800e8e8 <_scanf_float+0x11c>
 800e81e:	2b40      	cmp	r3, #64	; 0x40
 800e820:	d83c      	bhi.n	800e89c <_scanf_float+0xd0>
 800e822:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e826:	b2c8      	uxtb	r0, r1
 800e828:	280e      	cmp	r0, #14
 800e82a:	d93a      	bls.n	800e8a2 <_scanf_float+0xd6>
 800e82c:	f1b9 0f00 	cmp.w	r9, #0
 800e830:	d003      	beq.n	800e83a <_scanf_float+0x6e>
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e83e:	f1ba 0f01 	cmp.w	sl, #1
 800e842:	f200 8113 	bhi.w	800ea6c <_scanf_float+0x2a0>
 800e846:	455e      	cmp	r6, fp
 800e848:	f200 8105 	bhi.w	800ea56 <_scanf_float+0x28a>
 800e84c:	2501      	movs	r5, #1
 800e84e:	4628      	mov	r0, r5
 800e850:	b007      	add	sp, #28
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e85a:	2a0d      	cmp	r2, #13
 800e85c:	d8e6      	bhi.n	800e82c <_scanf_float+0x60>
 800e85e:	a101      	add	r1, pc, #4	; (adr r1, 800e864 <_scanf_float+0x98>)
 800e860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e864:	0800e9a3 	.word	0x0800e9a3
 800e868:	0800e82d 	.word	0x0800e82d
 800e86c:	0800e82d 	.word	0x0800e82d
 800e870:	0800e82d 	.word	0x0800e82d
 800e874:	0800ea03 	.word	0x0800ea03
 800e878:	0800e9db 	.word	0x0800e9db
 800e87c:	0800e82d 	.word	0x0800e82d
 800e880:	0800e82d 	.word	0x0800e82d
 800e884:	0800e9b1 	.word	0x0800e9b1
 800e888:	0800e82d 	.word	0x0800e82d
 800e88c:	0800e82d 	.word	0x0800e82d
 800e890:	0800e82d 	.word	0x0800e82d
 800e894:	0800e82d 	.word	0x0800e82d
 800e898:	0800e969 	.word	0x0800e969
 800e89c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e8a0:	e7db      	b.n	800e85a <_scanf_float+0x8e>
 800e8a2:	290e      	cmp	r1, #14
 800e8a4:	d8c2      	bhi.n	800e82c <_scanf_float+0x60>
 800e8a6:	a001      	add	r0, pc, #4	; (adr r0, 800e8ac <_scanf_float+0xe0>)
 800e8a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e8ac:	0800e95b 	.word	0x0800e95b
 800e8b0:	0800e82d 	.word	0x0800e82d
 800e8b4:	0800e95b 	.word	0x0800e95b
 800e8b8:	0800e9ef 	.word	0x0800e9ef
 800e8bc:	0800e82d 	.word	0x0800e82d
 800e8c0:	0800e909 	.word	0x0800e909
 800e8c4:	0800e945 	.word	0x0800e945
 800e8c8:	0800e945 	.word	0x0800e945
 800e8cc:	0800e945 	.word	0x0800e945
 800e8d0:	0800e945 	.word	0x0800e945
 800e8d4:	0800e945 	.word	0x0800e945
 800e8d8:	0800e945 	.word	0x0800e945
 800e8dc:	0800e945 	.word	0x0800e945
 800e8e0:	0800e945 	.word	0x0800e945
 800e8e4:	0800e945 	.word	0x0800e945
 800e8e8:	2b6e      	cmp	r3, #110	; 0x6e
 800e8ea:	d809      	bhi.n	800e900 <_scanf_float+0x134>
 800e8ec:	2b60      	cmp	r3, #96	; 0x60
 800e8ee:	d8b2      	bhi.n	800e856 <_scanf_float+0x8a>
 800e8f0:	2b54      	cmp	r3, #84	; 0x54
 800e8f2:	d077      	beq.n	800e9e4 <_scanf_float+0x218>
 800e8f4:	2b59      	cmp	r3, #89	; 0x59
 800e8f6:	d199      	bne.n	800e82c <_scanf_float+0x60>
 800e8f8:	2d07      	cmp	r5, #7
 800e8fa:	d197      	bne.n	800e82c <_scanf_float+0x60>
 800e8fc:	2508      	movs	r5, #8
 800e8fe:	e029      	b.n	800e954 <_scanf_float+0x188>
 800e900:	2b74      	cmp	r3, #116	; 0x74
 800e902:	d06f      	beq.n	800e9e4 <_scanf_float+0x218>
 800e904:	2b79      	cmp	r3, #121	; 0x79
 800e906:	e7f6      	b.n	800e8f6 <_scanf_float+0x12a>
 800e908:	6821      	ldr	r1, [r4, #0]
 800e90a:	05c8      	lsls	r0, r1, #23
 800e90c:	d51a      	bpl.n	800e944 <_scanf_float+0x178>
 800e90e:	9b02      	ldr	r3, [sp, #8]
 800e910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e914:	6021      	str	r1, [r4, #0]
 800e916:	f109 0901 	add.w	r9, r9, #1
 800e91a:	b11b      	cbz	r3, 800e924 <_scanf_float+0x158>
 800e91c:	3b01      	subs	r3, #1
 800e91e:	3201      	adds	r2, #1
 800e920:	9302      	str	r3, [sp, #8]
 800e922:	60a2      	str	r2, [r4, #8]
 800e924:	68a3      	ldr	r3, [r4, #8]
 800e926:	3b01      	subs	r3, #1
 800e928:	60a3      	str	r3, [r4, #8]
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	3301      	adds	r3, #1
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3b01      	subs	r3, #1
 800e934:	2b00      	cmp	r3, #0
 800e936:	607b      	str	r3, [r7, #4]
 800e938:	f340 8084 	ble.w	800ea44 <_scanf_float+0x278>
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	3301      	adds	r3, #1
 800e940:	603b      	str	r3, [r7, #0]
 800e942:	e766      	b.n	800e812 <_scanf_float+0x46>
 800e944:	eb1a 0f05 	cmn.w	sl, r5
 800e948:	f47f af70 	bne.w	800e82c <_scanf_float+0x60>
 800e94c:	6822      	ldr	r2, [r4, #0]
 800e94e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e952:	6022      	str	r2, [r4, #0]
 800e954:	f806 3b01 	strb.w	r3, [r6], #1
 800e958:	e7e4      	b.n	800e924 <_scanf_float+0x158>
 800e95a:	6822      	ldr	r2, [r4, #0]
 800e95c:	0610      	lsls	r0, r2, #24
 800e95e:	f57f af65 	bpl.w	800e82c <_scanf_float+0x60>
 800e962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e966:	e7f4      	b.n	800e952 <_scanf_float+0x186>
 800e968:	f1ba 0f00 	cmp.w	sl, #0
 800e96c:	d10e      	bne.n	800e98c <_scanf_float+0x1c0>
 800e96e:	f1b9 0f00 	cmp.w	r9, #0
 800e972:	d10e      	bne.n	800e992 <_scanf_float+0x1c6>
 800e974:	6822      	ldr	r2, [r4, #0]
 800e976:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e97a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e97e:	d108      	bne.n	800e992 <_scanf_float+0x1c6>
 800e980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e984:	6022      	str	r2, [r4, #0]
 800e986:	f04f 0a01 	mov.w	sl, #1
 800e98a:	e7e3      	b.n	800e954 <_scanf_float+0x188>
 800e98c:	f1ba 0f02 	cmp.w	sl, #2
 800e990:	d055      	beq.n	800ea3e <_scanf_float+0x272>
 800e992:	2d01      	cmp	r5, #1
 800e994:	d002      	beq.n	800e99c <_scanf_float+0x1d0>
 800e996:	2d04      	cmp	r5, #4
 800e998:	f47f af48 	bne.w	800e82c <_scanf_float+0x60>
 800e99c:	3501      	adds	r5, #1
 800e99e:	b2ed      	uxtb	r5, r5
 800e9a0:	e7d8      	b.n	800e954 <_scanf_float+0x188>
 800e9a2:	f1ba 0f01 	cmp.w	sl, #1
 800e9a6:	f47f af41 	bne.w	800e82c <_scanf_float+0x60>
 800e9aa:	f04f 0a02 	mov.w	sl, #2
 800e9ae:	e7d1      	b.n	800e954 <_scanf_float+0x188>
 800e9b0:	b97d      	cbnz	r5, 800e9d2 <_scanf_float+0x206>
 800e9b2:	f1b9 0f00 	cmp.w	r9, #0
 800e9b6:	f47f af3c 	bne.w	800e832 <_scanf_float+0x66>
 800e9ba:	6822      	ldr	r2, [r4, #0]
 800e9bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e9c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e9c4:	f47f af39 	bne.w	800e83a <_scanf_float+0x6e>
 800e9c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e9cc:	6022      	str	r2, [r4, #0]
 800e9ce:	2501      	movs	r5, #1
 800e9d0:	e7c0      	b.n	800e954 <_scanf_float+0x188>
 800e9d2:	2d03      	cmp	r5, #3
 800e9d4:	d0e2      	beq.n	800e99c <_scanf_float+0x1d0>
 800e9d6:	2d05      	cmp	r5, #5
 800e9d8:	e7de      	b.n	800e998 <_scanf_float+0x1cc>
 800e9da:	2d02      	cmp	r5, #2
 800e9dc:	f47f af26 	bne.w	800e82c <_scanf_float+0x60>
 800e9e0:	2503      	movs	r5, #3
 800e9e2:	e7b7      	b.n	800e954 <_scanf_float+0x188>
 800e9e4:	2d06      	cmp	r5, #6
 800e9e6:	f47f af21 	bne.w	800e82c <_scanf_float+0x60>
 800e9ea:	2507      	movs	r5, #7
 800e9ec:	e7b2      	b.n	800e954 <_scanf_float+0x188>
 800e9ee:	6822      	ldr	r2, [r4, #0]
 800e9f0:	0591      	lsls	r1, r2, #22
 800e9f2:	f57f af1b 	bpl.w	800e82c <_scanf_float+0x60>
 800e9f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e9fa:	6022      	str	r2, [r4, #0]
 800e9fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ea00:	e7a8      	b.n	800e954 <_scanf_float+0x188>
 800ea02:	6822      	ldr	r2, [r4, #0]
 800ea04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ea08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ea0c:	d006      	beq.n	800ea1c <_scanf_float+0x250>
 800ea0e:	0550      	lsls	r0, r2, #21
 800ea10:	f57f af0c 	bpl.w	800e82c <_scanf_float+0x60>
 800ea14:	f1b9 0f00 	cmp.w	r9, #0
 800ea18:	f43f af0f 	beq.w	800e83a <_scanf_float+0x6e>
 800ea1c:	0591      	lsls	r1, r2, #22
 800ea1e:	bf58      	it	pl
 800ea20:	9901      	ldrpl	r1, [sp, #4]
 800ea22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ea26:	bf58      	it	pl
 800ea28:	eba9 0101 	subpl.w	r1, r9, r1
 800ea2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ea30:	bf58      	it	pl
 800ea32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ea36:	6022      	str	r2, [r4, #0]
 800ea38:	f04f 0900 	mov.w	r9, #0
 800ea3c:	e78a      	b.n	800e954 <_scanf_float+0x188>
 800ea3e:	f04f 0a03 	mov.w	sl, #3
 800ea42:	e787      	b.n	800e954 <_scanf_float+0x188>
 800ea44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea48:	4639      	mov	r1, r7
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	4798      	blx	r3
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	f43f aedf 	beq.w	800e812 <_scanf_float+0x46>
 800ea54:	e6ea      	b.n	800e82c <_scanf_float+0x60>
 800ea56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea5e:	463a      	mov	r2, r7
 800ea60:	4640      	mov	r0, r8
 800ea62:	4798      	blx	r3
 800ea64:	6923      	ldr	r3, [r4, #16]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	6123      	str	r3, [r4, #16]
 800ea6a:	e6ec      	b.n	800e846 <_scanf_float+0x7a>
 800ea6c:	1e6b      	subs	r3, r5, #1
 800ea6e:	2b06      	cmp	r3, #6
 800ea70:	d825      	bhi.n	800eabe <_scanf_float+0x2f2>
 800ea72:	2d02      	cmp	r5, #2
 800ea74:	d836      	bhi.n	800eae4 <_scanf_float+0x318>
 800ea76:	455e      	cmp	r6, fp
 800ea78:	f67f aee8 	bls.w	800e84c <_scanf_float+0x80>
 800ea7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea84:	463a      	mov	r2, r7
 800ea86:	4640      	mov	r0, r8
 800ea88:	4798      	blx	r3
 800ea8a:	6923      	ldr	r3, [r4, #16]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	6123      	str	r3, [r4, #16]
 800ea90:	e7f1      	b.n	800ea76 <_scanf_float+0x2aa>
 800ea92:	9802      	ldr	r0, [sp, #8]
 800ea94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ea9c:	9002      	str	r0, [sp, #8]
 800ea9e:	463a      	mov	r2, r7
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	4798      	blx	r3
 800eaa4:	6923      	ldr	r3, [r4, #16]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	6123      	str	r3, [r4, #16]
 800eaaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaae:	fa5f fa8a 	uxtb.w	sl, sl
 800eab2:	f1ba 0f02 	cmp.w	sl, #2
 800eab6:	d1ec      	bne.n	800ea92 <_scanf_float+0x2c6>
 800eab8:	3d03      	subs	r5, #3
 800eaba:	b2ed      	uxtb	r5, r5
 800eabc:	1b76      	subs	r6, r6, r5
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	05da      	lsls	r2, r3, #23
 800eac2:	d52f      	bpl.n	800eb24 <_scanf_float+0x358>
 800eac4:	055b      	lsls	r3, r3, #21
 800eac6:	d510      	bpl.n	800eaea <_scanf_float+0x31e>
 800eac8:	455e      	cmp	r6, fp
 800eaca:	f67f aebf 	bls.w	800e84c <_scanf_float+0x80>
 800eace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ead2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ead6:	463a      	mov	r2, r7
 800ead8:	4640      	mov	r0, r8
 800eada:	4798      	blx	r3
 800eadc:	6923      	ldr	r3, [r4, #16]
 800eade:	3b01      	subs	r3, #1
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	e7f1      	b.n	800eac8 <_scanf_float+0x2fc>
 800eae4:	46aa      	mov	sl, r5
 800eae6:	9602      	str	r6, [sp, #8]
 800eae8:	e7df      	b.n	800eaaa <_scanf_float+0x2de>
 800eaea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eaee:	6923      	ldr	r3, [r4, #16]
 800eaf0:	2965      	cmp	r1, #101	; 0x65
 800eaf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800eaf6:	f106 35ff 	add.w	r5, r6, #4294967295
 800eafa:	6123      	str	r3, [r4, #16]
 800eafc:	d00c      	beq.n	800eb18 <_scanf_float+0x34c>
 800eafe:	2945      	cmp	r1, #69	; 0x45
 800eb00:	d00a      	beq.n	800eb18 <_scanf_float+0x34c>
 800eb02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb06:	463a      	mov	r2, r7
 800eb08:	4640      	mov	r0, r8
 800eb0a:	4798      	blx	r3
 800eb0c:	6923      	ldr	r3, [r4, #16]
 800eb0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	1eb5      	subs	r5, r6, #2
 800eb16:	6123      	str	r3, [r4, #16]
 800eb18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb1c:	463a      	mov	r2, r7
 800eb1e:	4640      	mov	r0, r8
 800eb20:	4798      	blx	r3
 800eb22:	462e      	mov	r6, r5
 800eb24:	6825      	ldr	r5, [r4, #0]
 800eb26:	f015 0510 	ands.w	r5, r5, #16
 800eb2a:	d158      	bne.n	800ebde <_scanf_float+0x412>
 800eb2c:	7035      	strb	r5, [r6, #0]
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eb34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb38:	d11c      	bne.n	800eb74 <_scanf_float+0x3a8>
 800eb3a:	9b01      	ldr	r3, [sp, #4]
 800eb3c:	454b      	cmp	r3, r9
 800eb3e:	eba3 0209 	sub.w	r2, r3, r9
 800eb42:	d124      	bne.n	800eb8e <_scanf_float+0x3c2>
 800eb44:	2200      	movs	r2, #0
 800eb46:	4659      	mov	r1, fp
 800eb48:	4640      	mov	r0, r8
 800eb4a:	f002 fc11 	bl	8011370 <_strtod_r>
 800eb4e:	9b03      	ldr	r3, [sp, #12]
 800eb50:	6821      	ldr	r1, [r4, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f011 0f02 	tst.w	r1, #2
 800eb58:	ec57 6b10 	vmov	r6, r7, d0
 800eb5c:	f103 0204 	add.w	r2, r3, #4
 800eb60:	d020      	beq.n	800eba4 <_scanf_float+0x3d8>
 800eb62:	9903      	ldr	r1, [sp, #12]
 800eb64:	600a      	str	r2, [r1, #0]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	e9c3 6700 	strd	r6, r7, [r3]
 800eb6c:	68e3      	ldr	r3, [r4, #12]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	60e3      	str	r3, [r4, #12]
 800eb72:	e66c      	b.n	800e84e <_scanf_float+0x82>
 800eb74:	9b04      	ldr	r3, [sp, #16]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0e4      	beq.n	800eb44 <_scanf_float+0x378>
 800eb7a:	9905      	ldr	r1, [sp, #20]
 800eb7c:	230a      	movs	r3, #10
 800eb7e:	462a      	mov	r2, r5
 800eb80:	3101      	adds	r1, #1
 800eb82:	4640      	mov	r0, r8
 800eb84:	f002 fc7c 	bl	8011480 <_strtol_r>
 800eb88:	9b04      	ldr	r3, [sp, #16]
 800eb8a:	9e05      	ldr	r6, [sp, #20]
 800eb8c:	1ac2      	subs	r2, r0, r3
 800eb8e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eb92:	429e      	cmp	r6, r3
 800eb94:	bf28      	it	cs
 800eb96:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eb9a:	4912      	ldr	r1, [pc, #72]	; (800ebe4 <_scanf_float+0x418>)
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	f000 f8d5 	bl	800ed4c <siprintf>
 800eba2:	e7cf      	b.n	800eb44 <_scanf_float+0x378>
 800eba4:	f011 0f04 	tst.w	r1, #4
 800eba8:	9903      	ldr	r1, [sp, #12]
 800ebaa:	600a      	str	r2, [r1, #0]
 800ebac:	d1db      	bne.n	800eb66 <_scanf_float+0x39a>
 800ebae:	f8d3 8000 	ldr.w	r8, [r3]
 800ebb2:	ee10 2a10 	vmov	r2, s0
 800ebb6:	ee10 0a10 	vmov	r0, s0
 800ebba:	463b      	mov	r3, r7
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	f7f1 ffd5 	bl	8000b6c <__aeabi_dcmpun>
 800ebc2:	b128      	cbz	r0, 800ebd0 <_scanf_float+0x404>
 800ebc4:	4808      	ldr	r0, [pc, #32]	; (800ebe8 <_scanf_float+0x41c>)
 800ebc6:	f000 fa45 	bl	800f054 <nanf>
 800ebca:	ed88 0a00 	vstr	s0, [r8]
 800ebce:	e7cd      	b.n	800eb6c <_scanf_float+0x3a0>
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	f7f2 f828 	bl	8000c28 <__aeabi_d2f>
 800ebd8:	f8c8 0000 	str.w	r0, [r8]
 800ebdc:	e7c6      	b.n	800eb6c <_scanf_float+0x3a0>
 800ebde:	2500      	movs	r5, #0
 800ebe0:	e635      	b.n	800e84e <_scanf_float+0x82>
 800ebe2:	bf00      	nop
 800ebe4:	080140e2 	.word	0x080140e2
 800ebe8:	08014490 	.word	0x08014490

0800ebec <std>:
 800ebec:	2300      	movs	r3, #0
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	e9c0 3300 	strd	r3, r3, [r0]
 800ebf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebfa:	6083      	str	r3, [r0, #8]
 800ebfc:	8181      	strh	r1, [r0, #12]
 800ebfe:	6643      	str	r3, [r0, #100]	; 0x64
 800ec00:	81c2      	strh	r2, [r0, #14]
 800ec02:	6183      	str	r3, [r0, #24]
 800ec04:	4619      	mov	r1, r3
 800ec06:	2208      	movs	r2, #8
 800ec08:	305c      	adds	r0, #92	; 0x5c
 800ec0a:	f000 f930 	bl	800ee6e <memset>
 800ec0e:	4b05      	ldr	r3, [pc, #20]	; (800ec24 <std+0x38>)
 800ec10:	6263      	str	r3, [r4, #36]	; 0x24
 800ec12:	4b05      	ldr	r3, [pc, #20]	; (800ec28 <std+0x3c>)
 800ec14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec16:	4b05      	ldr	r3, [pc, #20]	; (800ec2c <std+0x40>)
 800ec18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec1a:	4b05      	ldr	r3, [pc, #20]	; (800ec30 <std+0x44>)
 800ec1c:	6224      	str	r4, [r4, #32]
 800ec1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	bf00      	nop
 800ec24:	0800ede5 	.word	0x0800ede5
 800ec28:	0800ee0b 	.word	0x0800ee0b
 800ec2c:	0800ee43 	.word	0x0800ee43
 800ec30:	0800ee67 	.word	0x0800ee67

0800ec34 <stdio_exit_handler>:
 800ec34:	4a02      	ldr	r2, [pc, #8]	; (800ec40 <stdio_exit_handler+0xc>)
 800ec36:	4903      	ldr	r1, [pc, #12]	; (800ec44 <stdio_exit_handler+0x10>)
 800ec38:	4803      	ldr	r0, [pc, #12]	; (800ec48 <stdio_exit_handler+0x14>)
 800ec3a:	f000 b869 	b.w	800ed10 <_fwalk_sglue>
 800ec3e:	bf00      	nop
 800ec40:	20000014 	.word	0x20000014
 800ec44:	08011e81 	.word	0x08011e81
 800ec48:	20000020 	.word	0x20000020

0800ec4c <cleanup_stdio>:
 800ec4c:	6841      	ldr	r1, [r0, #4]
 800ec4e:	4b0c      	ldr	r3, [pc, #48]	; (800ec80 <cleanup_stdio+0x34>)
 800ec50:	4299      	cmp	r1, r3
 800ec52:	b510      	push	{r4, lr}
 800ec54:	4604      	mov	r4, r0
 800ec56:	d001      	beq.n	800ec5c <cleanup_stdio+0x10>
 800ec58:	f003 f912 	bl	8011e80 <_fflush_r>
 800ec5c:	68a1      	ldr	r1, [r4, #8]
 800ec5e:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <cleanup_stdio+0x38>)
 800ec60:	4299      	cmp	r1, r3
 800ec62:	d002      	beq.n	800ec6a <cleanup_stdio+0x1e>
 800ec64:	4620      	mov	r0, r4
 800ec66:	f003 f90b 	bl	8011e80 <_fflush_r>
 800ec6a:	68e1      	ldr	r1, [r4, #12]
 800ec6c:	4b06      	ldr	r3, [pc, #24]	; (800ec88 <cleanup_stdio+0x3c>)
 800ec6e:	4299      	cmp	r1, r3
 800ec70:	d004      	beq.n	800ec7c <cleanup_stdio+0x30>
 800ec72:	4620      	mov	r0, r4
 800ec74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec78:	f003 b902 	b.w	8011e80 <_fflush_r>
 800ec7c:	bd10      	pop	{r4, pc}
 800ec7e:	bf00      	nop
 800ec80:	2000705c 	.word	0x2000705c
 800ec84:	200070c4 	.word	0x200070c4
 800ec88:	2000712c 	.word	0x2000712c

0800ec8c <global_stdio_init.part.0>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	4b0b      	ldr	r3, [pc, #44]	; (800ecbc <global_stdio_init.part.0+0x30>)
 800ec90:	4c0b      	ldr	r4, [pc, #44]	; (800ecc0 <global_stdio_init.part.0+0x34>)
 800ec92:	4a0c      	ldr	r2, [pc, #48]	; (800ecc4 <global_stdio_init.part.0+0x38>)
 800ec94:	601a      	str	r2, [r3, #0]
 800ec96:	4620      	mov	r0, r4
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2104      	movs	r1, #4
 800ec9c:	f7ff ffa6 	bl	800ebec <std>
 800eca0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eca4:	2201      	movs	r2, #1
 800eca6:	2109      	movs	r1, #9
 800eca8:	f7ff ffa0 	bl	800ebec <std>
 800ecac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ecb0:	2202      	movs	r2, #2
 800ecb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb6:	2112      	movs	r1, #18
 800ecb8:	f7ff bf98 	b.w	800ebec <std>
 800ecbc:	20007194 	.word	0x20007194
 800ecc0:	2000705c 	.word	0x2000705c
 800ecc4:	0800ec35 	.word	0x0800ec35

0800ecc8 <__sfp_lock_acquire>:
 800ecc8:	4801      	ldr	r0, [pc, #4]	; (800ecd0 <__sfp_lock_acquire+0x8>)
 800ecca:	f000 b9b3 	b.w	800f034 <__retarget_lock_acquire_recursive>
 800ecce:	bf00      	nop
 800ecd0:	2000719d 	.word	0x2000719d

0800ecd4 <__sfp_lock_release>:
 800ecd4:	4801      	ldr	r0, [pc, #4]	; (800ecdc <__sfp_lock_release+0x8>)
 800ecd6:	f000 b9ae 	b.w	800f036 <__retarget_lock_release_recursive>
 800ecda:	bf00      	nop
 800ecdc:	2000719d 	.word	0x2000719d

0800ece0 <__sinit>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	4604      	mov	r4, r0
 800ece4:	f7ff fff0 	bl	800ecc8 <__sfp_lock_acquire>
 800ece8:	6a23      	ldr	r3, [r4, #32]
 800ecea:	b11b      	cbz	r3, 800ecf4 <__sinit+0x14>
 800ecec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf0:	f7ff bff0 	b.w	800ecd4 <__sfp_lock_release>
 800ecf4:	4b04      	ldr	r3, [pc, #16]	; (800ed08 <__sinit+0x28>)
 800ecf6:	6223      	str	r3, [r4, #32]
 800ecf8:	4b04      	ldr	r3, [pc, #16]	; (800ed0c <__sinit+0x2c>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1f5      	bne.n	800ecec <__sinit+0xc>
 800ed00:	f7ff ffc4 	bl	800ec8c <global_stdio_init.part.0>
 800ed04:	e7f2      	b.n	800ecec <__sinit+0xc>
 800ed06:	bf00      	nop
 800ed08:	0800ec4d 	.word	0x0800ec4d
 800ed0c:	20007194 	.word	0x20007194

0800ed10 <_fwalk_sglue>:
 800ed10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed14:	4607      	mov	r7, r0
 800ed16:	4688      	mov	r8, r1
 800ed18:	4614      	mov	r4, r2
 800ed1a:	2600      	movs	r6, #0
 800ed1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed20:	f1b9 0901 	subs.w	r9, r9, #1
 800ed24:	d505      	bpl.n	800ed32 <_fwalk_sglue+0x22>
 800ed26:	6824      	ldr	r4, [r4, #0]
 800ed28:	2c00      	cmp	r4, #0
 800ed2a:	d1f7      	bne.n	800ed1c <_fwalk_sglue+0xc>
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed32:	89ab      	ldrh	r3, [r5, #12]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d907      	bls.n	800ed48 <_fwalk_sglue+0x38>
 800ed38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	d003      	beq.n	800ed48 <_fwalk_sglue+0x38>
 800ed40:	4629      	mov	r1, r5
 800ed42:	4638      	mov	r0, r7
 800ed44:	47c0      	blx	r8
 800ed46:	4306      	orrs	r6, r0
 800ed48:	3568      	adds	r5, #104	; 0x68
 800ed4a:	e7e9      	b.n	800ed20 <_fwalk_sglue+0x10>

0800ed4c <siprintf>:
 800ed4c:	b40e      	push	{r1, r2, r3}
 800ed4e:	b500      	push	{lr}
 800ed50:	b09c      	sub	sp, #112	; 0x70
 800ed52:	ab1d      	add	r3, sp, #116	; 0x74
 800ed54:	9002      	str	r0, [sp, #8]
 800ed56:	9006      	str	r0, [sp, #24]
 800ed58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed5c:	4809      	ldr	r0, [pc, #36]	; (800ed84 <siprintf+0x38>)
 800ed5e:	9107      	str	r1, [sp, #28]
 800ed60:	9104      	str	r1, [sp, #16]
 800ed62:	4909      	ldr	r1, [pc, #36]	; (800ed88 <siprintf+0x3c>)
 800ed64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed68:	9105      	str	r1, [sp, #20]
 800ed6a:	6800      	ldr	r0, [r0, #0]
 800ed6c:	9301      	str	r3, [sp, #4]
 800ed6e:	a902      	add	r1, sp, #8
 800ed70:	f002 fbe2 	bl	8011538 <_svfiprintf_r>
 800ed74:	9b02      	ldr	r3, [sp, #8]
 800ed76:	2200      	movs	r2, #0
 800ed78:	701a      	strb	r2, [r3, #0]
 800ed7a:	b01c      	add	sp, #112	; 0x70
 800ed7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed80:	b003      	add	sp, #12
 800ed82:	4770      	bx	lr
 800ed84:	2000006c 	.word	0x2000006c
 800ed88:	ffff0208 	.word	0xffff0208

0800ed8c <siscanf>:
 800ed8c:	b40e      	push	{r1, r2, r3}
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	b09f      	sub	sp, #124	; 0x7c
 800ed92:	ac21      	add	r4, sp, #132	; 0x84
 800ed94:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ed98:	f854 2b04 	ldr.w	r2, [r4], #4
 800ed9c:	9201      	str	r2, [sp, #4]
 800ed9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800eda2:	9004      	str	r0, [sp, #16]
 800eda4:	9008      	str	r0, [sp, #32]
 800eda6:	f7f1 fa83 	bl	80002b0 <strlen>
 800edaa:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <siscanf+0x50>)
 800edac:	9005      	str	r0, [sp, #20]
 800edae:	9009      	str	r0, [sp, #36]	; 0x24
 800edb0:	930d      	str	r3, [sp, #52]	; 0x34
 800edb2:	480b      	ldr	r0, [pc, #44]	; (800ede0 <siscanf+0x54>)
 800edb4:	9a01      	ldr	r2, [sp, #4]
 800edb6:	6800      	ldr	r0, [r0, #0]
 800edb8:	9403      	str	r4, [sp, #12]
 800edba:	2300      	movs	r3, #0
 800edbc:	9311      	str	r3, [sp, #68]	; 0x44
 800edbe:	9316      	str	r3, [sp, #88]	; 0x58
 800edc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800edc8:	a904      	add	r1, sp, #16
 800edca:	4623      	mov	r3, r4
 800edcc:	f002 fd0c 	bl	80117e8 <__ssvfiscanf_r>
 800edd0:	b01f      	add	sp, #124	; 0x7c
 800edd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd6:	b003      	add	sp, #12
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	0800ee07 	.word	0x0800ee07
 800ede0:	2000006c 	.word	0x2000006c

0800ede4 <__sread>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	460c      	mov	r4, r1
 800ede8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edec:	f000 f8c4 	bl	800ef78 <_read_r>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	bfab      	itete	ge
 800edf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edf6:	89a3      	ldrhlt	r3, [r4, #12]
 800edf8:	181b      	addge	r3, r3, r0
 800edfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edfe:	bfac      	ite	ge
 800ee00:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee02:	81a3      	strhlt	r3, [r4, #12]
 800ee04:	bd10      	pop	{r4, pc}

0800ee06 <__seofread>:
 800ee06:	2000      	movs	r0, #0
 800ee08:	4770      	bx	lr

0800ee0a <__swrite>:
 800ee0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	461f      	mov	r7, r3
 800ee10:	898b      	ldrh	r3, [r1, #12]
 800ee12:	05db      	lsls	r3, r3, #23
 800ee14:	4605      	mov	r5, r0
 800ee16:	460c      	mov	r4, r1
 800ee18:	4616      	mov	r6, r2
 800ee1a:	d505      	bpl.n	800ee28 <__swrite+0x1e>
 800ee1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee20:	2302      	movs	r3, #2
 800ee22:	2200      	movs	r2, #0
 800ee24:	f000 f896 	bl	800ef54 <_lseek_r>
 800ee28:	89a3      	ldrh	r3, [r4, #12]
 800ee2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	4632      	mov	r2, r6
 800ee36:	463b      	mov	r3, r7
 800ee38:	4628      	mov	r0, r5
 800ee3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee3e:	f000 b8bd 	b.w	800efbc <_write_r>

0800ee42 <__sseek>:
 800ee42:	b510      	push	{r4, lr}
 800ee44:	460c      	mov	r4, r1
 800ee46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee4a:	f000 f883 	bl	800ef54 <_lseek_r>
 800ee4e:	1c43      	adds	r3, r0, #1
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	bf15      	itete	ne
 800ee54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee5e:	81a3      	strheq	r3, [r4, #12]
 800ee60:	bf18      	it	ne
 800ee62:	81a3      	strhne	r3, [r4, #12]
 800ee64:	bd10      	pop	{r4, pc}

0800ee66 <__sclose>:
 800ee66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6a:	f000 b80d 	b.w	800ee88 <_close_r>

0800ee6e <memset>:
 800ee6e:	4402      	add	r2, r0
 800ee70:	4603      	mov	r3, r0
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d100      	bne.n	800ee78 <memset+0xa>
 800ee76:	4770      	bx	lr
 800ee78:	f803 1b01 	strb.w	r1, [r3], #1
 800ee7c:	e7f9      	b.n	800ee72 <memset+0x4>
	...

0800ee80 <_localeconv_r>:
 800ee80:	4800      	ldr	r0, [pc, #0]	; (800ee84 <_localeconv_r+0x4>)
 800ee82:	4770      	bx	lr
 800ee84:	20000160 	.word	0x20000160

0800ee88 <_close_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	4d06      	ldr	r5, [pc, #24]	; (800eea4 <_close_r+0x1c>)
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4608      	mov	r0, r1
 800ee92:	602b      	str	r3, [r5, #0]
 800ee94:	f7f3 fa05 	bl	80022a2 <_close>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_close_r+0x1a>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_close_r+0x1a>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	20007198 	.word	0x20007198

0800eea8 <_reclaim_reent>:
 800eea8:	4b29      	ldr	r3, [pc, #164]	; (800ef50 <_reclaim_reent+0xa8>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4283      	cmp	r3, r0
 800eeae:	b570      	push	{r4, r5, r6, lr}
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	d04b      	beq.n	800ef4c <_reclaim_reent+0xa4>
 800eeb4:	69c3      	ldr	r3, [r0, #28]
 800eeb6:	b143      	cbz	r3, 800eeca <_reclaim_reent+0x22>
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d144      	bne.n	800ef48 <_reclaim_reent+0xa0>
 800eebe:	69e3      	ldr	r3, [r4, #28]
 800eec0:	6819      	ldr	r1, [r3, #0]
 800eec2:	b111      	cbz	r1, 800eeca <_reclaim_reent+0x22>
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 ff45 	bl	800fd54 <_free_r>
 800eeca:	6961      	ldr	r1, [r4, #20]
 800eecc:	b111      	cbz	r1, 800eed4 <_reclaim_reent+0x2c>
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 ff40 	bl	800fd54 <_free_r>
 800eed4:	69e1      	ldr	r1, [r4, #28]
 800eed6:	b111      	cbz	r1, 800eede <_reclaim_reent+0x36>
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 ff3b 	bl	800fd54 <_free_r>
 800eede:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eee0:	b111      	cbz	r1, 800eee8 <_reclaim_reent+0x40>
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 ff36 	bl	800fd54 <_free_r>
 800eee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeea:	b111      	cbz	r1, 800eef2 <_reclaim_reent+0x4a>
 800eeec:	4620      	mov	r0, r4
 800eeee:	f000 ff31 	bl	800fd54 <_free_r>
 800eef2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eef4:	b111      	cbz	r1, 800eefc <_reclaim_reent+0x54>
 800eef6:	4620      	mov	r0, r4
 800eef8:	f000 ff2c 	bl	800fd54 <_free_r>
 800eefc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eefe:	b111      	cbz	r1, 800ef06 <_reclaim_reent+0x5e>
 800ef00:	4620      	mov	r0, r4
 800ef02:	f000 ff27 	bl	800fd54 <_free_r>
 800ef06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef08:	b111      	cbz	r1, 800ef10 <_reclaim_reent+0x68>
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f000 ff22 	bl	800fd54 <_free_r>
 800ef10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ef12:	b111      	cbz	r1, 800ef1a <_reclaim_reent+0x72>
 800ef14:	4620      	mov	r0, r4
 800ef16:	f000 ff1d 	bl	800fd54 <_free_r>
 800ef1a:	6a23      	ldr	r3, [r4, #32]
 800ef1c:	b1b3      	cbz	r3, 800ef4c <_reclaim_reent+0xa4>
 800ef1e:	4620      	mov	r0, r4
 800ef20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef24:	4718      	bx	r3
 800ef26:	5949      	ldr	r1, [r1, r5]
 800ef28:	b941      	cbnz	r1, 800ef3c <_reclaim_reent+0x94>
 800ef2a:	3504      	adds	r5, #4
 800ef2c:	69e3      	ldr	r3, [r4, #28]
 800ef2e:	2d80      	cmp	r5, #128	; 0x80
 800ef30:	68d9      	ldr	r1, [r3, #12]
 800ef32:	d1f8      	bne.n	800ef26 <_reclaim_reent+0x7e>
 800ef34:	4620      	mov	r0, r4
 800ef36:	f000 ff0d 	bl	800fd54 <_free_r>
 800ef3a:	e7c0      	b.n	800eebe <_reclaim_reent+0x16>
 800ef3c:	680e      	ldr	r6, [r1, #0]
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f000 ff08 	bl	800fd54 <_free_r>
 800ef44:	4631      	mov	r1, r6
 800ef46:	e7ef      	b.n	800ef28 <_reclaim_reent+0x80>
 800ef48:	2500      	movs	r5, #0
 800ef4a:	e7ef      	b.n	800ef2c <_reclaim_reent+0x84>
 800ef4c:	bd70      	pop	{r4, r5, r6, pc}
 800ef4e:	bf00      	nop
 800ef50:	2000006c 	.word	0x2000006c

0800ef54 <_lseek_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	4d07      	ldr	r5, [pc, #28]	; (800ef74 <_lseek_r+0x20>)
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	602a      	str	r2, [r5, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	f7f3 f9c4 	bl	80022f0 <_lseek>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_lseek_r+0x1e>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_lseek_r+0x1e>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	20007198 	.word	0x20007198

0800ef78 <_read_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_read_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f3 f952 	bl	8002230 <_read>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_read_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_read_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	20007198 	.word	0x20007198

0800ef9c <_sbrk_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4d06      	ldr	r5, [pc, #24]	; (800efb8 <_sbrk_r+0x1c>)
 800efa0:	2300      	movs	r3, #0
 800efa2:	4604      	mov	r4, r0
 800efa4:	4608      	mov	r0, r1
 800efa6:	602b      	str	r3, [r5, #0]
 800efa8:	f7f3 f9b0 	bl	800230c <_sbrk>
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	d102      	bne.n	800efb6 <_sbrk_r+0x1a>
 800efb0:	682b      	ldr	r3, [r5, #0]
 800efb2:	b103      	cbz	r3, 800efb6 <_sbrk_r+0x1a>
 800efb4:	6023      	str	r3, [r4, #0]
 800efb6:	bd38      	pop	{r3, r4, r5, pc}
 800efb8:	20007198 	.word	0x20007198

0800efbc <_write_r>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4d07      	ldr	r5, [pc, #28]	; (800efdc <_write_r+0x20>)
 800efc0:	4604      	mov	r4, r0
 800efc2:	4608      	mov	r0, r1
 800efc4:	4611      	mov	r1, r2
 800efc6:	2200      	movs	r2, #0
 800efc8:	602a      	str	r2, [r5, #0]
 800efca:	461a      	mov	r2, r3
 800efcc:	f7f3 f94d 	bl	800226a <_write>
 800efd0:	1c43      	adds	r3, r0, #1
 800efd2:	d102      	bne.n	800efda <_write_r+0x1e>
 800efd4:	682b      	ldr	r3, [r5, #0]
 800efd6:	b103      	cbz	r3, 800efda <_write_r+0x1e>
 800efd8:	6023      	str	r3, [r4, #0]
 800efda:	bd38      	pop	{r3, r4, r5, pc}
 800efdc:	20007198 	.word	0x20007198

0800efe0 <__errno>:
 800efe0:	4b01      	ldr	r3, [pc, #4]	; (800efe8 <__errno+0x8>)
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop
 800efe8:	2000006c 	.word	0x2000006c

0800efec <__libc_init_array>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	4d0d      	ldr	r5, [pc, #52]	; (800f024 <__libc_init_array+0x38>)
 800eff0:	4c0d      	ldr	r4, [pc, #52]	; (800f028 <__libc_init_array+0x3c>)
 800eff2:	1b64      	subs	r4, r4, r5
 800eff4:	10a4      	asrs	r4, r4, #2
 800eff6:	2600      	movs	r6, #0
 800eff8:	42a6      	cmp	r6, r4
 800effa:	d109      	bne.n	800f010 <__libc_init_array+0x24>
 800effc:	4d0b      	ldr	r5, [pc, #44]	; (800f02c <__libc_init_array+0x40>)
 800effe:	4c0c      	ldr	r4, [pc, #48]	; (800f030 <__libc_init_array+0x44>)
 800f000:	f004 fe6c 	bl	8013cdc <_init>
 800f004:	1b64      	subs	r4, r4, r5
 800f006:	10a4      	asrs	r4, r4, #2
 800f008:	2600      	movs	r6, #0
 800f00a:	42a6      	cmp	r6, r4
 800f00c:	d105      	bne.n	800f01a <__libc_init_array+0x2e>
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	f855 3b04 	ldr.w	r3, [r5], #4
 800f014:	4798      	blx	r3
 800f016:	3601      	adds	r6, #1
 800f018:	e7ee      	b.n	800eff8 <__libc_init_array+0xc>
 800f01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f01e:	4798      	blx	r3
 800f020:	3601      	adds	r6, #1
 800f022:	e7f2      	b.n	800f00a <__libc_init_array+0x1e>
 800f024:	08014530 	.word	0x08014530
 800f028:	08014530 	.word	0x08014530
 800f02c:	08014530 	.word	0x08014530
 800f030:	08014534 	.word	0x08014534

0800f034 <__retarget_lock_acquire_recursive>:
 800f034:	4770      	bx	lr

0800f036 <__retarget_lock_release_recursive>:
 800f036:	4770      	bx	lr

0800f038 <memcpy>:
 800f038:	440a      	add	r2, r1
 800f03a:	4291      	cmp	r1, r2
 800f03c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f040:	d100      	bne.n	800f044 <memcpy+0xc>
 800f042:	4770      	bx	lr
 800f044:	b510      	push	{r4, lr}
 800f046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f04a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f04e:	4291      	cmp	r1, r2
 800f050:	d1f9      	bne.n	800f046 <memcpy+0xe>
 800f052:	bd10      	pop	{r4, pc}

0800f054 <nanf>:
 800f054:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f05c <nanf+0x8>
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	7fc00000 	.word	0x7fc00000

0800f060 <quorem>:
 800f060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f064:	6903      	ldr	r3, [r0, #16]
 800f066:	690c      	ldr	r4, [r1, #16]
 800f068:	42a3      	cmp	r3, r4
 800f06a:	4607      	mov	r7, r0
 800f06c:	db7e      	blt.n	800f16c <quorem+0x10c>
 800f06e:	3c01      	subs	r4, #1
 800f070:	f101 0814 	add.w	r8, r1, #20
 800f074:	f100 0514 	add.w	r5, r0, #20
 800f078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f07c:	9301      	str	r3, [sp, #4]
 800f07e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f086:	3301      	adds	r3, #1
 800f088:	429a      	cmp	r2, r3
 800f08a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f08e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f092:	fbb2 f6f3 	udiv	r6, r2, r3
 800f096:	d331      	bcc.n	800f0fc <quorem+0x9c>
 800f098:	f04f 0e00 	mov.w	lr, #0
 800f09c:	4640      	mov	r0, r8
 800f09e:	46ac      	mov	ip, r5
 800f0a0:	46f2      	mov	sl, lr
 800f0a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800f0a6:	b293      	uxth	r3, r2
 800f0a8:	fb06 e303 	mla	r3, r6, r3, lr
 800f0ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0b0:	0c1a      	lsrs	r2, r3, #16
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	ebaa 0303 	sub.w	r3, sl, r3
 800f0b8:	f8dc a000 	ldr.w	sl, [ip]
 800f0bc:	fa13 f38a 	uxtah	r3, r3, sl
 800f0c0:	fb06 220e 	mla	r2, r6, lr, r2
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	9b00      	ldr	r3, [sp, #0]
 800f0c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0cc:	b292      	uxth	r2, r2
 800f0ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f0d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800f0da:	4581      	cmp	r9, r0
 800f0dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0e0:	f84c 3b04 	str.w	r3, [ip], #4
 800f0e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f0e8:	d2db      	bcs.n	800f0a2 <quorem+0x42>
 800f0ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800f0ee:	b92b      	cbnz	r3, 800f0fc <quorem+0x9c>
 800f0f0:	9b01      	ldr	r3, [sp, #4]
 800f0f2:	3b04      	subs	r3, #4
 800f0f4:	429d      	cmp	r5, r3
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	d32c      	bcc.n	800f154 <quorem+0xf4>
 800f0fa:	613c      	str	r4, [r7, #16]
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	f001 f943 	bl	8010388 <__mcmp>
 800f102:	2800      	cmp	r0, #0
 800f104:	db22      	blt.n	800f14c <quorem+0xec>
 800f106:	3601      	adds	r6, #1
 800f108:	4629      	mov	r1, r5
 800f10a:	2000      	movs	r0, #0
 800f10c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f110:	f8d1 c000 	ldr.w	ip, [r1]
 800f114:	b293      	uxth	r3, r2
 800f116:	1ac3      	subs	r3, r0, r3
 800f118:	0c12      	lsrs	r2, r2, #16
 800f11a:	fa13 f38c 	uxtah	r3, r3, ip
 800f11e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f122:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f126:	b29b      	uxth	r3, r3
 800f128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f12c:	45c1      	cmp	r9, r8
 800f12e:	f841 3b04 	str.w	r3, [r1], #4
 800f132:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f136:	d2e9      	bcs.n	800f10c <quorem+0xac>
 800f138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f13c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f140:	b922      	cbnz	r2, 800f14c <quorem+0xec>
 800f142:	3b04      	subs	r3, #4
 800f144:	429d      	cmp	r5, r3
 800f146:	461a      	mov	r2, r3
 800f148:	d30a      	bcc.n	800f160 <quorem+0x100>
 800f14a:	613c      	str	r4, [r7, #16]
 800f14c:	4630      	mov	r0, r6
 800f14e:	b003      	add	sp, #12
 800f150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f154:	6812      	ldr	r2, [r2, #0]
 800f156:	3b04      	subs	r3, #4
 800f158:	2a00      	cmp	r2, #0
 800f15a:	d1ce      	bne.n	800f0fa <quorem+0x9a>
 800f15c:	3c01      	subs	r4, #1
 800f15e:	e7c9      	b.n	800f0f4 <quorem+0x94>
 800f160:	6812      	ldr	r2, [r2, #0]
 800f162:	3b04      	subs	r3, #4
 800f164:	2a00      	cmp	r2, #0
 800f166:	d1f0      	bne.n	800f14a <quorem+0xea>
 800f168:	3c01      	subs	r4, #1
 800f16a:	e7eb      	b.n	800f144 <quorem+0xe4>
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7ee      	b.n	800f14e <quorem+0xee>

0800f170 <_dtoa_r>:
 800f170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f174:	ed2d 8b04 	vpush	{d8-d9}
 800f178:	69c5      	ldr	r5, [r0, #28]
 800f17a:	b093      	sub	sp, #76	; 0x4c
 800f17c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f180:	ec57 6b10 	vmov	r6, r7, d0
 800f184:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f188:	9107      	str	r1, [sp, #28]
 800f18a:	4604      	mov	r4, r0
 800f18c:	920a      	str	r2, [sp, #40]	; 0x28
 800f18e:	930d      	str	r3, [sp, #52]	; 0x34
 800f190:	b975      	cbnz	r5, 800f1b0 <_dtoa_r+0x40>
 800f192:	2010      	movs	r0, #16
 800f194:	f000 fe2a 	bl	800fdec <malloc>
 800f198:	4602      	mov	r2, r0
 800f19a:	61e0      	str	r0, [r4, #28]
 800f19c:	b920      	cbnz	r0, 800f1a8 <_dtoa_r+0x38>
 800f19e:	4bae      	ldr	r3, [pc, #696]	; (800f458 <_dtoa_r+0x2e8>)
 800f1a0:	21ef      	movs	r1, #239	; 0xef
 800f1a2:	48ae      	ldr	r0, [pc, #696]	; (800f45c <_dtoa_r+0x2ec>)
 800f1a4:	f002 ff3c 	bl	8012020 <__assert_func>
 800f1a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f1ac:	6005      	str	r5, [r0, #0]
 800f1ae:	60c5      	str	r5, [r0, #12]
 800f1b0:	69e3      	ldr	r3, [r4, #28]
 800f1b2:	6819      	ldr	r1, [r3, #0]
 800f1b4:	b151      	cbz	r1, 800f1cc <_dtoa_r+0x5c>
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	604a      	str	r2, [r1, #4]
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	4093      	lsls	r3, r2
 800f1be:	608b      	str	r3, [r1, #8]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 fe5b 	bl	800fe7c <_Bfree>
 800f1c6:	69e3      	ldr	r3, [r4, #28]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	1e3b      	subs	r3, r7, #0
 800f1ce:	bfbb      	ittet	lt
 800f1d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f1d4:	9303      	strlt	r3, [sp, #12]
 800f1d6:	2300      	movge	r3, #0
 800f1d8:	2201      	movlt	r2, #1
 800f1da:	bfac      	ite	ge
 800f1dc:	f8c8 3000 	strge.w	r3, [r8]
 800f1e0:	f8c8 2000 	strlt.w	r2, [r8]
 800f1e4:	4b9e      	ldr	r3, [pc, #632]	; (800f460 <_dtoa_r+0x2f0>)
 800f1e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f1ea:	ea33 0308 	bics.w	r3, r3, r8
 800f1ee:	d11b      	bne.n	800f228 <_dtoa_r+0xb8>
 800f1f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1f6:	6013      	str	r3, [r2, #0]
 800f1f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f1fc:	4333      	orrs	r3, r6
 800f1fe:	f000 8593 	beq.w	800fd28 <_dtoa_r+0xbb8>
 800f202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f204:	b963      	cbnz	r3, 800f220 <_dtoa_r+0xb0>
 800f206:	4b97      	ldr	r3, [pc, #604]	; (800f464 <_dtoa_r+0x2f4>)
 800f208:	e027      	b.n	800f25a <_dtoa_r+0xea>
 800f20a:	4b97      	ldr	r3, [pc, #604]	; (800f468 <_dtoa_r+0x2f8>)
 800f20c:	9300      	str	r3, [sp, #0]
 800f20e:	3308      	adds	r3, #8
 800f210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f212:	6013      	str	r3, [r2, #0]
 800f214:	9800      	ldr	r0, [sp, #0]
 800f216:	b013      	add	sp, #76	; 0x4c
 800f218:	ecbd 8b04 	vpop	{d8-d9}
 800f21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f220:	4b90      	ldr	r3, [pc, #576]	; (800f464 <_dtoa_r+0x2f4>)
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	3303      	adds	r3, #3
 800f226:	e7f3      	b.n	800f210 <_dtoa_r+0xa0>
 800f228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f22c:	2200      	movs	r2, #0
 800f22e:	ec51 0b17 	vmov	r0, r1, d7
 800f232:	eeb0 8a47 	vmov.f32	s16, s14
 800f236:	eef0 8a67 	vmov.f32	s17, s15
 800f23a:	2300      	movs	r3, #0
 800f23c:	f7f1 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 800f240:	4681      	mov	r9, r0
 800f242:	b160      	cbz	r0, 800f25e <_dtoa_r+0xee>
 800f244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f246:	2301      	movs	r3, #1
 800f248:	6013      	str	r3, [r2, #0]
 800f24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 8568 	beq.w	800fd22 <_dtoa_r+0xbb2>
 800f252:	4b86      	ldr	r3, [pc, #536]	; (800f46c <_dtoa_r+0x2fc>)
 800f254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	3b01      	subs	r3, #1
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	e7da      	b.n	800f214 <_dtoa_r+0xa4>
 800f25e:	aa10      	add	r2, sp, #64	; 0x40
 800f260:	a911      	add	r1, sp, #68	; 0x44
 800f262:	4620      	mov	r0, r4
 800f264:	eeb0 0a48 	vmov.f32	s0, s16
 800f268:	eef0 0a68 	vmov.f32	s1, s17
 800f26c:	f001 f9a2 	bl	80105b4 <__d2b>
 800f270:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f274:	4682      	mov	sl, r0
 800f276:	2d00      	cmp	r5, #0
 800f278:	d07f      	beq.n	800f37a <_dtoa_r+0x20a>
 800f27a:	ee18 3a90 	vmov	r3, s17
 800f27e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f282:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f286:	ec51 0b18 	vmov	r0, r1, d8
 800f28a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f28e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f292:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f296:	4619      	mov	r1, r3
 800f298:	2200      	movs	r2, #0
 800f29a:	4b75      	ldr	r3, [pc, #468]	; (800f470 <_dtoa_r+0x300>)
 800f29c:	f7f1 f814 	bl	80002c8 <__aeabi_dsub>
 800f2a0:	a367      	add	r3, pc, #412	; (adr r3, 800f440 <_dtoa_r+0x2d0>)
 800f2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a6:	f7f1 f9c7 	bl	8000638 <__aeabi_dmul>
 800f2aa:	a367      	add	r3, pc, #412	; (adr r3, 800f448 <_dtoa_r+0x2d8>)
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	f7f1 f80c 	bl	80002cc <__adddf3>
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	460f      	mov	r7, r1
 800f2ba:	f7f1 f953 	bl	8000564 <__aeabi_i2d>
 800f2be:	a364      	add	r3, pc, #400	; (adr r3, 800f450 <_dtoa_r+0x2e0>)
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	f7f1 f9b8 	bl	8000638 <__aeabi_dmul>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	f7f0 fffc 	bl	80002cc <__adddf3>
 800f2d4:	4606      	mov	r6, r0
 800f2d6:	460f      	mov	r7, r1
 800f2d8:	f7f1 fc5e 	bl	8000b98 <__aeabi_d2iz>
 800f2dc:	2200      	movs	r2, #0
 800f2de:	4683      	mov	fp, r0
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	f7f1 fc19 	bl	8000b1c <__aeabi_dcmplt>
 800f2ea:	b148      	cbz	r0, 800f300 <_dtoa_r+0x190>
 800f2ec:	4658      	mov	r0, fp
 800f2ee:	f7f1 f939 	bl	8000564 <__aeabi_i2d>
 800f2f2:	4632      	mov	r2, r6
 800f2f4:	463b      	mov	r3, r7
 800f2f6:	f7f1 fc07 	bl	8000b08 <__aeabi_dcmpeq>
 800f2fa:	b908      	cbnz	r0, 800f300 <_dtoa_r+0x190>
 800f2fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f300:	f1bb 0f16 	cmp.w	fp, #22
 800f304:	d857      	bhi.n	800f3b6 <_dtoa_r+0x246>
 800f306:	4b5b      	ldr	r3, [pc, #364]	; (800f474 <_dtoa_r+0x304>)
 800f308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f310:	ec51 0b18 	vmov	r0, r1, d8
 800f314:	f7f1 fc02 	bl	8000b1c <__aeabi_dcmplt>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d04e      	beq.n	800f3ba <_dtoa_r+0x24a>
 800f31c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f320:	2300      	movs	r3, #0
 800f322:	930c      	str	r3, [sp, #48]	; 0x30
 800f324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f326:	1b5b      	subs	r3, r3, r5
 800f328:	1e5a      	subs	r2, r3, #1
 800f32a:	bf45      	ittet	mi
 800f32c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f330:	9305      	strmi	r3, [sp, #20]
 800f332:	2300      	movpl	r3, #0
 800f334:	2300      	movmi	r3, #0
 800f336:	9206      	str	r2, [sp, #24]
 800f338:	bf54      	ite	pl
 800f33a:	9305      	strpl	r3, [sp, #20]
 800f33c:	9306      	strmi	r3, [sp, #24]
 800f33e:	f1bb 0f00 	cmp.w	fp, #0
 800f342:	db3c      	blt.n	800f3be <_dtoa_r+0x24e>
 800f344:	9b06      	ldr	r3, [sp, #24]
 800f346:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f34a:	445b      	add	r3, fp
 800f34c:	9306      	str	r3, [sp, #24]
 800f34e:	2300      	movs	r3, #0
 800f350:	9308      	str	r3, [sp, #32]
 800f352:	9b07      	ldr	r3, [sp, #28]
 800f354:	2b09      	cmp	r3, #9
 800f356:	d868      	bhi.n	800f42a <_dtoa_r+0x2ba>
 800f358:	2b05      	cmp	r3, #5
 800f35a:	bfc4      	itt	gt
 800f35c:	3b04      	subgt	r3, #4
 800f35e:	9307      	strgt	r3, [sp, #28]
 800f360:	9b07      	ldr	r3, [sp, #28]
 800f362:	f1a3 0302 	sub.w	r3, r3, #2
 800f366:	bfcc      	ite	gt
 800f368:	2500      	movgt	r5, #0
 800f36a:	2501      	movle	r5, #1
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	f200 8085 	bhi.w	800f47c <_dtoa_r+0x30c>
 800f372:	e8df f003 	tbb	[pc, r3]
 800f376:	3b2e      	.short	0x3b2e
 800f378:	5839      	.short	0x5839
 800f37a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f37e:	441d      	add	r5, r3
 800f380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f384:	2b20      	cmp	r3, #32
 800f386:	bfc1      	itttt	gt
 800f388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f38c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f390:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f394:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f398:	bfd6      	itet	le
 800f39a:	f1c3 0320 	rsble	r3, r3, #32
 800f39e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f3a2:	fa06 f003 	lslle.w	r0, r6, r3
 800f3a6:	f7f1 f8cd 	bl	8000544 <__aeabi_ui2d>
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f3b0:	3d01      	subs	r5, #1
 800f3b2:	920e      	str	r2, [sp, #56]	; 0x38
 800f3b4:	e76f      	b.n	800f296 <_dtoa_r+0x126>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e7b3      	b.n	800f322 <_dtoa_r+0x1b2>
 800f3ba:	900c      	str	r0, [sp, #48]	; 0x30
 800f3bc:	e7b2      	b.n	800f324 <_dtoa_r+0x1b4>
 800f3be:	9b05      	ldr	r3, [sp, #20]
 800f3c0:	eba3 030b 	sub.w	r3, r3, fp
 800f3c4:	9305      	str	r3, [sp, #20]
 800f3c6:	f1cb 0300 	rsb	r3, fp, #0
 800f3ca:	9308      	str	r3, [sp, #32]
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3d0:	e7bf      	b.n	800f352 <_dtoa_r+0x1e2>
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	dc52      	bgt.n	800f482 <_dtoa_r+0x312>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800f3e6:	e00b      	b.n	800f400 <_dtoa_r+0x290>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e7f3      	b.n	800f3d4 <_dtoa_r+0x264>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3f2:	445b      	add	r3, fp
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	9304      	str	r3, [sp, #16]
 800f3fc:	bfb8      	it	lt
 800f3fe:	2301      	movlt	r3, #1
 800f400:	69e0      	ldr	r0, [r4, #28]
 800f402:	2100      	movs	r1, #0
 800f404:	2204      	movs	r2, #4
 800f406:	f102 0614 	add.w	r6, r2, #20
 800f40a:	429e      	cmp	r6, r3
 800f40c:	d93d      	bls.n	800f48a <_dtoa_r+0x31a>
 800f40e:	6041      	str	r1, [r0, #4]
 800f410:	4620      	mov	r0, r4
 800f412:	f000 fcf3 	bl	800fdfc <_Balloc>
 800f416:	9000      	str	r0, [sp, #0]
 800f418:	2800      	cmp	r0, #0
 800f41a:	d139      	bne.n	800f490 <_dtoa_r+0x320>
 800f41c:	4b16      	ldr	r3, [pc, #88]	; (800f478 <_dtoa_r+0x308>)
 800f41e:	4602      	mov	r2, r0
 800f420:	f240 11af 	movw	r1, #431	; 0x1af
 800f424:	e6bd      	b.n	800f1a2 <_dtoa_r+0x32>
 800f426:	2301      	movs	r3, #1
 800f428:	e7e1      	b.n	800f3ee <_dtoa_r+0x27e>
 800f42a:	2501      	movs	r5, #1
 800f42c:	2300      	movs	r3, #0
 800f42e:	9307      	str	r3, [sp, #28]
 800f430:	9509      	str	r5, [sp, #36]	; 0x24
 800f432:	f04f 33ff 	mov.w	r3, #4294967295
 800f436:	9301      	str	r3, [sp, #4]
 800f438:	9304      	str	r3, [sp, #16]
 800f43a:	2200      	movs	r2, #0
 800f43c:	2312      	movs	r3, #18
 800f43e:	e7d1      	b.n	800f3e4 <_dtoa_r+0x274>
 800f440:	636f4361 	.word	0x636f4361
 800f444:	3fd287a7 	.word	0x3fd287a7
 800f448:	8b60c8b3 	.word	0x8b60c8b3
 800f44c:	3fc68a28 	.word	0x3fc68a28
 800f450:	509f79fb 	.word	0x509f79fb
 800f454:	3fd34413 	.word	0x3fd34413
 800f458:	080140f4 	.word	0x080140f4
 800f45c:	0801410b 	.word	0x0801410b
 800f460:	7ff00000 	.word	0x7ff00000
 800f464:	080140f0 	.word	0x080140f0
 800f468:	080140e7 	.word	0x080140e7
 800f46c:	08014449 	.word	0x08014449
 800f470:	3ff80000 	.word	0x3ff80000
 800f474:	080141f8 	.word	0x080141f8
 800f478:	08014163 	.word	0x08014163
 800f47c:	2301      	movs	r3, #1
 800f47e:	9309      	str	r3, [sp, #36]	; 0x24
 800f480:	e7d7      	b.n	800f432 <_dtoa_r+0x2c2>
 800f482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	9304      	str	r3, [sp, #16]
 800f488:	e7ba      	b.n	800f400 <_dtoa_r+0x290>
 800f48a:	3101      	adds	r1, #1
 800f48c:	0052      	lsls	r2, r2, #1
 800f48e:	e7ba      	b.n	800f406 <_dtoa_r+0x296>
 800f490:	69e3      	ldr	r3, [r4, #28]
 800f492:	9a00      	ldr	r2, [sp, #0]
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	2b0e      	cmp	r3, #14
 800f49a:	f200 80a8 	bhi.w	800f5ee <_dtoa_r+0x47e>
 800f49e:	2d00      	cmp	r5, #0
 800f4a0:	f000 80a5 	beq.w	800f5ee <_dtoa_r+0x47e>
 800f4a4:	f1bb 0f00 	cmp.w	fp, #0
 800f4a8:	dd38      	ble.n	800f51c <_dtoa_r+0x3ac>
 800f4aa:	4bc0      	ldr	r3, [pc, #768]	; (800f7ac <_dtoa_r+0x63c>)
 800f4ac:	f00b 020f 	and.w	r2, fp, #15
 800f4b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f4b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f4bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f4c0:	d019      	beq.n	800f4f6 <_dtoa_r+0x386>
 800f4c2:	4bbb      	ldr	r3, [pc, #748]	; (800f7b0 <_dtoa_r+0x640>)
 800f4c4:	ec51 0b18 	vmov	r0, r1, d8
 800f4c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4cc:	f7f1 f9de 	bl	800088c <__aeabi_ddiv>
 800f4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4d4:	f008 080f 	and.w	r8, r8, #15
 800f4d8:	2503      	movs	r5, #3
 800f4da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f7b0 <_dtoa_r+0x640>
 800f4de:	f1b8 0f00 	cmp.w	r8, #0
 800f4e2:	d10a      	bne.n	800f4fa <_dtoa_r+0x38a>
 800f4e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4e8:	4632      	mov	r2, r6
 800f4ea:	463b      	mov	r3, r7
 800f4ec:	f7f1 f9ce 	bl	800088c <__aeabi_ddiv>
 800f4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f4:	e02b      	b.n	800f54e <_dtoa_r+0x3de>
 800f4f6:	2502      	movs	r5, #2
 800f4f8:	e7ef      	b.n	800f4da <_dtoa_r+0x36a>
 800f4fa:	f018 0f01 	tst.w	r8, #1
 800f4fe:	d008      	beq.n	800f512 <_dtoa_r+0x3a2>
 800f500:	4630      	mov	r0, r6
 800f502:	4639      	mov	r1, r7
 800f504:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f508:	f7f1 f896 	bl	8000638 <__aeabi_dmul>
 800f50c:	3501      	adds	r5, #1
 800f50e:	4606      	mov	r6, r0
 800f510:	460f      	mov	r7, r1
 800f512:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f516:	f109 0908 	add.w	r9, r9, #8
 800f51a:	e7e0      	b.n	800f4de <_dtoa_r+0x36e>
 800f51c:	f000 809f 	beq.w	800f65e <_dtoa_r+0x4ee>
 800f520:	f1cb 0600 	rsb	r6, fp, #0
 800f524:	4ba1      	ldr	r3, [pc, #644]	; (800f7ac <_dtoa_r+0x63c>)
 800f526:	4fa2      	ldr	r7, [pc, #648]	; (800f7b0 <_dtoa_r+0x640>)
 800f528:	f006 020f 	and.w	r2, r6, #15
 800f52c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	ec51 0b18 	vmov	r0, r1, d8
 800f538:	f7f1 f87e 	bl	8000638 <__aeabi_dmul>
 800f53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f540:	1136      	asrs	r6, r6, #4
 800f542:	2300      	movs	r3, #0
 800f544:	2502      	movs	r5, #2
 800f546:	2e00      	cmp	r6, #0
 800f548:	d17e      	bne.n	800f648 <_dtoa_r+0x4d8>
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1d0      	bne.n	800f4f0 <_dtoa_r+0x380>
 800f54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f550:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	f000 8084 	beq.w	800f662 <_dtoa_r+0x4f2>
 800f55a:	4b96      	ldr	r3, [pc, #600]	; (800f7b4 <_dtoa_r+0x644>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	4640      	mov	r0, r8
 800f560:	4649      	mov	r1, r9
 800f562:	f7f1 fadb 	bl	8000b1c <__aeabi_dcmplt>
 800f566:	2800      	cmp	r0, #0
 800f568:	d07b      	beq.n	800f662 <_dtoa_r+0x4f2>
 800f56a:	9b04      	ldr	r3, [sp, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d078      	beq.n	800f662 <_dtoa_r+0x4f2>
 800f570:	9b01      	ldr	r3, [sp, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	dd39      	ble.n	800f5ea <_dtoa_r+0x47a>
 800f576:	4b90      	ldr	r3, [pc, #576]	; (800f7b8 <_dtoa_r+0x648>)
 800f578:	2200      	movs	r2, #0
 800f57a:	4640      	mov	r0, r8
 800f57c:	4649      	mov	r1, r9
 800f57e:	f7f1 f85b 	bl	8000638 <__aeabi_dmul>
 800f582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f586:	9e01      	ldr	r6, [sp, #4]
 800f588:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f58c:	3501      	adds	r5, #1
 800f58e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f592:	4628      	mov	r0, r5
 800f594:	f7f0 ffe6 	bl	8000564 <__aeabi_i2d>
 800f598:	4642      	mov	r2, r8
 800f59a:	464b      	mov	r3, r9
 800f59c:	f7f1 f84c 	bl	8000638 <__aeabi_dmul>
 800f5a0:	4b86      	ldr	r3, [pc, #536]	; (800f7bc <_dtoa_r+0x64c>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f7f0 fe92 	bl	80002cc <__adddf3>
 800f5a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5b0:	9303      	str	r3, [sp, #12]
 800f5b2:	2e00      	cmp	r6, #0
 800f5b4:	d158      	bne.n	800f668 <_dtoa_r+0x4f8>
 800f5b6:	4b82      	ldr	r3, [pc, #520]	; (800f7c0 <_dtoa_r+0x650>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4649      	mov	r1, r9
 800f5be:	f7f0 fe83 	bl	80002c8 <__aeabi_dsub>
 800f5c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5c6:	4680      	mov	r8, r0
 800f5c8:	4689      	mov	r9, r1
 800f5ca:	f7f1 fac5 	bl	8000b58 <__aeabi_dcmpgt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	f040 8296 	bne.w	800fb00 <_dtoa_r+0x990>
 800f5d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f5d8:	4640      	mov	r0, r8
 800f5da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5de:	4649      	mov	r1, r9
 800f5e0:	f7f1 fa9c 	bl	8000b1c <__aeabi_dcmplt>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	f040 8289 	bne.w	800fafc <_dtoa_r+0x98c>
 800f5ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f5ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f2c0 814e 	blt.w	800f892 <_dtoa_r+0x722>
 800f5f6:	f1bb 0f0e 	cmp.w	fp, #14
 800f5fa:	f300 814a 	bgt.w	800f892 <_dtoa_r+0x722>
 800f5fe:	4b6b      	ldr	r3, [pc, #428]	; (800f7ac <_dtoa_r+0x63c>)
 800f600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f604:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f280 80dc 	bge.w	800f7c8 <_dtoa_r+0x658>
 800f610:	9b04      	ldr	r3, [sp, #16]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f300 80d8 	bgt.w	800f7c8 <_dtoa_r+0x658>
 800f618:	f040 826f 	bne.w	800fafa <_dtoa_r+0x98a>
 800f61c:	4b68      	ldr	r3, [pc, #416]	; (800f7c0 <_dtoa_r+0x650>)
 800f61e:	2200      	movs	r2, #0
 800f620:	4640      	mov	r0, r8
 800f622:	4649      	mov	r1, r9
 800f624:	f7f1 f808 	bl	8000638 <__aeabi_dmul>
 800f628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f62c:	f7f1 fa8a 	bl	8000b44 <__aeabi_dcmpge>
 800f630:	9e04      	ldr	r6, [sp, #16]
 800f632:	4637      	mov	r7, r6
 800f634:	2800      	cmp	r0, #0
 800f636:	f040 8245 	bne.w	800fac4 <_dtoa_r+0x954>
 800f63a:	9d00      	ldr	r5, [sp, #0]
 800f63c:	2331      	movs	r3, #49	; 0x31
 800f63e:	f805 3b01 	strb.w	r3, [r5], #1
 800f642:	f10b 0b01 	add.w	fp, fp, #1
 800f646:	e241      	b.n	800facc <_dtoa_r+0x95c>
 800f648:	07f2      	lsls	r2, r6, #31
 800f64a:	d505      	bpl.n	800f658 <_dtoa_r+0x4e8>
 800f64c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f650:	f7f0 fff2 	bl	8000638 <__aeabi_dmul>
 800f654:	3501      	adds	r5, #1
 800f656:	2301      	movs	r3, #1
 800f658:	1076      	asrs	r6, r6, #1
 800f65a:	3708      	adds	r7, #8
 800f65c:	e773      	b.n	800f546 <_dtoa_r+0x3d6>
 800f65e:	2502      	movs	r5, #2
 800f660:	e775      	b.n	800f54e <_dtoa_r+0x3de>
 800f662:	9e04      	ldr	r6, [sp, #16]
 800f664:	465f      	mov	r7, fp
 800f666:	e792      	b.n	800f58e <_dtoa_r+0x41e>
 800f668:	9900      	ldr	r1, [sp, #0]
 800f66a:	4b50      	ldr	r3, [pc, #320]	; (800f7ac <_dtoa_r+0x63c>)
 800f66c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f670:	4431      	add	r1, r6
 800f672:	9102      	str	r1, [sp, #8]
 800f674:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f676:	eeb0 9a47 	vmov.f32	s18, s14
 800f67a:	eef0 9a67 	vmov.f32	s19, s15
 800f67e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f686:	2900      	cmp	r1, #0
 800f688:	d044      	beq.n	800f714 <_dtoa_r+0x5a4>
 800f68a:	494e      	ldr	r1, [pc, #312]	; (800f7c4 <_dtoa_r+0x654>)
 800f68c:	2000      	movs	r0, #0
 800f68e:	f7f1 f8fd 	bl	800088c <__aeabi_ddiv>
 800f692:	ec53 2b19 	vmov	r2, r3, d9
 800f696:	f7f0 fe17 	bl	80002c8 <__aeabi_dsub>
 800f69a:	9d00      	ldr	r5, [sp, #0]
 800f69c:	ec41 0b19 	vmov	d9, r0, r1
 800f6a0:	4649      	mov	r1, r9
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	f7f1 fa78 	bl	8000b98 <__aeabi_d2iz>
 800f6a8:	4606      	mov	r6, r0
 800f6aa:	f7f0 ff5b 	bl	8000564 <__aeabi_i2d>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4640      	mov	r0, r8
 800f6b4:	4649      	mov	r1, r9
 800f6b6:	f7f0 fe07 	bl	80002c8 <__aeabi_dsub>
 800f6ba:	3630      	adds	r6, #48	; 0x30
 800f6bc:	f805 6b01 	strb.w	r6, [r5], #1
 800f6c0:	ec53 2b19 	vmov	r2, r3, d9
 800f6c4:	4680      	mov	r8, r0
 800f6c6:	4689      	mov	r9, r1
 800f6c8:	f7f1 fa28 	bl	8000b1c <__aeabi_dcmplt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d164      	bne.n	800f79a <_dtoa_r+0x62a>
 800f6d0:	4642      	mov	r2, r8
 800f6d2:	464b      	mov	r3, r9
 800f6d4:	4937      	ldr	r1, [pc, #220]	; (800f7b4 <_dtoa_r+0x644>)
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	f7f0 fdf6 	bl	80002c8 <__aeabi_dsub>
 800f6dc:	ec53 2b19 	vmov	r2, r3, d9
 800f6e0:	f7f1 fa1c 	bl	8000b1c <__aeabi_dcmplt>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	f040 80b6 	bne.w	800f856 <_dtoa_r+0x6e6>
 800f6ea:	9b02      	ldr	r3, [sp, #8]
 800f6ec:	429d      	cmp	r5, r3
 800f6ee:	f43f af7c 	beq.w	800f5ea <_dtoa_r+0x47a>
 800f6f2:	4b31      	ldr	r3, [pc, #196]	; (800f7b8 <_dtoa_r+0x648>)
 800f6f4:	ec51 0b19 	vmov	r0, r1, d9
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f7f0 ff9d 	bl	8000638 <__aeabi_dmul>
 800f6fe:	4b2e      	ldr	r3, [pc, #184]	; (800f7b8 <_dtoa_r+0x648>)
 800f700:	ec41 0b19 	vmov	d9, r0, r1
 800f704:	2200      	movs	r2, #0
 800f706:	4640      	mov	r0, r8
 800f708:	4649      	mov	r1, r9
 800f70a:	f7f0 ff95 	bl	8000638 <__aeabi_dmul>
 800f70e:	4680      	mov	r8, r0
 800f710:	4689      	mov	r9, r1
 800f712:	e7c5      	b.n	800f6a0 <_dtoa_r+0x530>
 800f714:	ec51 0b17 	vmov	r0, r1, d7
 800f718:	f7f0 ff8e 	bl	8000638 <__aeabi_dmul>
 800f71c:	9b02      	ldr	r3, [sp, #8]
 800f71e:	9d00      	ldr	r5, [sp, #0]
 800f720:	930f      	str	r3, [sp, #60]	; 0x3c
 800f722:	ec41 0b19 	vmov	d9, r0, r1
 800f726:	4649      	mov	r1, r9
 800f728:	4640      	mov	r0, r8
 800f72a:	f7f1 fa35 	bl	8000b98 <__aeabi_d2iz>
 800f72e:	4606      	mov	r6, r0
 800f730:	f7f0 ff18 	bl	8000564 <__aeabi_i2d>
 800f734:	3630      	adds	r6, #48	; 0x30
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	4640      	mov	r0, r8
 800f73c:	4649      	mov	r1, r9
 800f73e:	f7f0 fdc3 	bl	80002c8 <__aeabi_dsub>
 800f742:	f805 6b01 	strb.w	r6, [r5], #1
 800f746:	9b02      	ldr	r3, [sp, #8]
 800f748:	429d      	cmp	r5, r3
 800f74a:	4680      	mov	r8, r0
 800f74c:	4689      	mov	r9, r1
 800f74e:	f04f 0200 	mov.w	r2, #0
 800f752:	d124      	bne.n	800f79e <_dtoa_r+0x62e>
 800f754:	4b1b      	ldr	r3, [pc, #108]	; (800f7c4 <_dtoa_r+0x654>)
 800f756:	ec51 0b19 	vmov	r0, r1, d9
 800f75a:	f7f0 fdb7 	bl	80002cc <__adddf3>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	4640      	mov	r0, r8
 800f764:	4649      	mov	r1, r9
 800f766:	f7f1 f9f7 	bl	8000b58 <__aeabi_dcmpgt>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d173      	bne.n	800f856 <_dtoa_r+0x6e6>
 800f76e:	ec53 2b19 	vmov	r2, r3, d9
 800f772:	4914      	ldr	r1, [pc, #80]	; (800f7c4 <_dtoa_r+0x654>)
 800f774:	2000      	movs	r0, #0
 800f776:	f7f0 fda7 	bl	80002c8 <__aeabi_dsub>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4640      	mov	r0, r8
 800f780:	4649      	mov	r1, r9
 800f782:	f7f1 f9cb 	bl	8000b1c <__aeabi_dcmplt>
 800f786:	2800      	cmp	r0, #0
 800f788:	f43f af2f 	beq.w	800f5ea <_dtoa_r+0x47a>
 800f78c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f78e:	1e6b      	subs	r3, r5, #1
 800f790:	930f      	str	r3, [sp, #60]	; 0x3c
 800f792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f796:	2b30      	cmp	r3, #48	; 0x30
 800f798:	d0f8      	beq.n	800f78c <_dtoa_r+0x61c>
 800f79a:	46bb      	mov	fp, r7
 800f79c:	e04a      	b.n	800f834 <_dtoa_r+0x6c4>
 800f79e:	4b06      	ldr	r3, [pc, #24]	; (800f7b8 <_dtoa_r+0x648>)
 800f7a0:	f7f0 ff4a 	bl	8000638 <__aeabi_dmul>
 800f7a4:	4680      	mov	r8, r0
 800f7a6:	4689      	mov	r9, r1
 800f7a8:	e7bd      	b.n	800f726 <_dtoa_r+0x5b6>
 800f7aa:	bf00      	nop
 800f7ac:	080141f8 	.word	0x080141f8
 800f7b0:	080141d0 	.word	0x080141d0
 800f7b4:	3ff00000 	.word	0x3ff00000
 800f7b8:	40240000 	.word	0x40240000
 800f7bc:	401c0000 	.word	0x401c0000
 800f7c0:	40140000 	.word	0x40140000
 800f7c4:	3fe00000 	.word	0x3fe00000
 800f7c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f7cc:	9d00      	ldr	r5, [sp, #0]
 800f7ce:	4642      	mov	r2, r8
 800f7d0:	464b      	mov	r3, r9
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	f7f1 f859 	bl	800088c <__aeabi_ddiv>
 800f7da:	f7f1 f9dd 	bl	8000b98 <__aeabi_d2iz>
 800f7de:	9001      	str	r0, [sp, #4]
 800f7e0:	f7f0 fec0 	bl	8000564 <__aeabi_i2d>
 800f7e4:	4642      	mov	r2, r8
 800f7e6:	464b      	mov	r3, r9
 800f7e8:	f7f0 ff26 	bl	8000638 <__aeabi_dmul>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	f7f0 fd68 	bl	80002c8 <__aeabi_dsub>
 800f7f8:	9e01      	ldr	r6, [sp, #4]
 800f7fa:	9f04      	ldr	r7, [sp, #16]
 800f7fc:	3630      	adds	r6, #48	; 0x30
 800f7fe:	f805 6b01 	strb.w	r6, [r5], #1
 800f802:	9e00      	ldr	r6, [sp, #0]
 800f804:	1bae      	subs	r6, r5, r6
 800f806:	42b7      	cmp	r7, r6
 800f808:	4602      	mov	r2, r0
 800f80a:	460b      	mov	r3, r1
 800f80c:	d134      	bne.n	800f878 <_dtoa_r+0x708>
 800f80e:	f7f0 fd5d 	bl	80002cc <__adddf3>
 800f812:	4642      	mov	r2, r8
 800f814:	464b      	mov	r3, r9
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	f7f1 f99d 	bl	8000b58 <__aeabi_dcmpgt>
 800f81e:	b9c8      	cbnz	r0, 800f854 <_dtoa_r+0x6e4>
 800f820:	4642      	mov	r2, r8
 800f822:	464b      	mov	r3, r9
 800f824:	4630      	mov	r0, r6
 800f826:	4639      	mov	r1, r7
 800f828:	f7f1 f96e 	bl	8000b08 <__aeabi_dcmpeq>
 800f82c:	b110      	cbz	r0, 800f834 <_dtoa_r+0x6c4>
 800f82e:	9b01      	ldr	r3, [sp, #4]
 800f830:	07db      	lsls	r3, r3, #31
 800f832:	d40f      	bmi.n	800f854 <_dtoa_r+0x6e4>
 800f834:	4651      	mov	r1, sl
 800f836:	4620      	mov	r0, r4
 800f838:	f000 fb20 	bl	800fe7c <_Bfree>
 800f83c:	2300      	movs	r3, #0
 800f83e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f840:	702b      	strb	r3, [r5, #0]
 800f842:	f10b 0301 	add.w	r3, fp, #1
 800f846:	6013      	str	r3, [r2, #0]
 800f848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f43f ace2 	beq.w	800f214 <_dtoa_r+0xa4>
 800f850:	601d      	str	r5, [r3, #0]
 800f852:	e4df      	b.n	800f214 <_dtoa_r+0xa4>
 800f854:	465f      	mov	r7, fp
 800f856:	462b      	mov	r3, r5
 800f858:	461d      	mov	r5, r3
 800f85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f85e:	2a39      	cmp	r2, #57	; 0x39
 800f860:	d106      	bne.n	800f870 <_dtoa_r+0x700>
 800f862:	9a00      	ldr	r2, [sp, #0]
 800f864:	429a      	cmp	r2, r3
 800f866:	d1f7      	bne.n	800f858 <_dtoa_r+0x6e8>
 800f868:	9900      	ldr	r1, [sp, #0]
 800f86a:	2230      	movs	r2, #48	; 0x30
 800f86c:	3701      	adds	r7, #1
 800f86e:	700a      	strb	r2, [r1, #0]
 800f870:	781a      	ldrb	r2, [r3, #0]
 800f872:	3201      	adds	r2, #1
 800f874:	701a      	strb	r2, [r3, #0]
 800f876:	e790      	b.n	800f79a <_dtoa_r+0x62a>
 800f878:	4ba3      	ldr	r3, [pc, #652]	; (800fb08 <_dtoa_r+0x998>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	f7f0 fedc 	bl	8000638 <__aeabi_dmul>
 800f880:	2200      	movs	r2, #0
 800f882:	2300      	movs	r3, #0
 800f884:	4606      	mov	r6, r0
 800f886:	460f      	mov	r7, r1
 800f888:	f7f1 f93e 	bl	8000b08 <__aeabi_dcmpeq>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	d09e      	beq.n	800f7ce <_dtoa_r+0x65e>
 800f890:	e7d0      	b.n	800f834 <_dtoa_r+0x6c4>
 800f892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f894:	2a00      	cmp	r2, #0
 800f896:	f000 80ca 	beq.w	800fa2e <_dtoa_r+0x8be>
 800f89a:	9a07      	ldr	r2, [sp, #28]
 800f89c:	2a01      	cmp	r2, #1
 800f89e:	f300 80ad 	bgt.w	800f9fc <_dtoa_r+0x88c>
 800f8a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8a4:	2a00      	cmp	r2, #0
 800f8a6:	f000 80a5 	beq.w	800f9f4 <_dtoa_r+0x884>
 800f8aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f8ae:	9e08      	ldr	r6, [sp, #32]
 800f8b0:	9d05      	ldr	r5, [sp, #20]
 800f8b2:	9a05      	ldr	r2, [sp, #20]
 800f8b4:	441a      	add	r2, r3
 800f8b6:	9205      	str	r2, [sp, #20]
 800f8b8:	9a06      	ldr	r2, [sp, #24]
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	441a      	add	r2, r3
 800f8be:	4620      	mov	r0, r4
 800f8c0:	9206      	str	r2, [sp, #24]
 800f8c2:	f000 fbdb 	bl	801007c <__i2b>
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	b165      	cbz	r5, 800f8e4 <_dtoa_r+0x774>
 800f8ca:	9b06      	ldr	r3, [sp, #24]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	dd09      	ble.n	800f8e4 <_dtoa_r+0x774>
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	9a05      	ldr	r2, [sp, #20]
 800f8d4:	bfa8      	it	ge
 800f8d6:	462b      	movge	r3, r5
 800f8d8:	1ad2      	subs	r2, r2, r3
 800f8da:	9205      	str	r2, [sp, #20]
 800f8dc:	9a06      	ldr	r2, [sp, #24]
 800f8de:	1aed      	subs	r5, r5, r3
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	9306      	str	r3, [sp, #24]
 800f8e4:	9b08      	ldr	r3, [sp, #32]
 800f8e6:	b1f3      	cbz	r3, 800f926 <_dtoa_r+0x7b6>
 800f8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f000 80a3 	beq.w	800fa36 <_dtoa_r+0x8c6>
 800f8f0:	2e00      	cmp	r6, #0
 800f8f2:	dd10      	ble.n	800f916 <_dtoa_r+0x7a6>
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	4632      	mov	r2, r6
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f000 fc7f 	bl	80101fc <__pow5mult>
 800f8fe:	4652      	mov	r2, sl
 800f900:	4601      	mov	r1, r0
 800f902:	4607      	mov	r7, r0
 800f904:	4620      	mov	r0, r4
 800f906:	f000 fbcf 	bl	80100a8 <__multiply>
 800f90a:	4651      	mov	r1, sl
 800f90c:	4680      	mov	r8, r0
 800f90e:	4620      	mov	r0, r4
 800f910:	f000 fab4 	bl	800fe7c <_Bfree>
 800f914:	46c2      	mov	sl, r8
 800f916:	9b08      	ldr	r3, [sp, #32]
 800f918:	1b9a      	subs	r2, r3, r6
 800f91a:	d004      	beq.n	800f926 <_dtoa_r+0x7b6>
 800f91c:	4651      	mov	r1, sl
 800f91e:	4620      	mov	r0, r4
 800f920:	f000 fc6c 	bl	80101fc <__pow5mult>
 800f924:	4682      	mov	sl, r0
 800f926:	2101      	movs	r1, #1
 800f928:	4620      	mov	r0, r4
 800f92a:	f000 fba7 	bl	801007c <__i2b>
 800f92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f930:	2b00      	cmp	r3, #0
 800f932:	4606      	mov	r6, r0
 800f934:	f340 8081 	ble.w	800fa3a <_dtoa_r+0x8ca>
 800f938:	461a      	mov	r2, r3
 800f93a:	4601      	mov	r1, r0
 800f93c:	4620      	mov	r0, r4
 800f93e:	f000 fc5d 	bl	80101fc <__pow5mult>
 800f942:	9b07      	ldr	r3, [sp, #28]
 800f944:	2b01      	cmp	r3, #1
 800f946:	4606      	mov	r6, r0
 800f948:	dd7a      	ble.n	800fa40 <_dtoa_r+0x8d0>
 800f94a:	f04f 0800 	mov.w	r8, #0
 800f94e:	6933      	ldr	r3, [r6, #16]
 800f950:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f954:	6918      	ldr	r0, [r3, #16]
 800f956:	f000 fb43 	bl	800ffe0 <__hi0bits>
 800f95a:	f1c0 0020 	rsb	r0, r0, #32
 800f95e:	9b06      	ldr	r3, [sp, #24]
 800f960:	4418      	add	r0, r3
 800f962:	f010 001f 	ands.w	r0, r0, #31
 800f966:	f000 8094 	beq.w	800fa92 <_dtoa_r+0x922>
 800f96a:	f1c0 0320 	rsb	r3, r0, #32
 800f96e:	2b04      	cmp	r3, #4
 800f970:	f340 8085 	ble.w	800fa7e <_dtoa_r+0x90e>
 800f974:	9b05      	ldr	r3, [sp, #20]
 800f976:	f1c0 001c 	rsb	r0, r0, #28
 800f97a:	4403      	add	r3, r0
 800f97c:	9305      	str	r3, [sp, #20]
 800f97e:	9b06      	ldr	r3, [sp, #24]
 800f980:	4403      	add	r3, r0
 800f982:	4405      	add	r5, r0
 800f984:	9306      	str	r3, [sp, #24]
 800f986:	9b05      	ldr	r3, [sp, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	dd05      	ble.n	800f998 <_dtoa_r+0x828>
 800f98c:	4651      	mov	r1, sl
 800f98e:	461a      	mov	r2, r3
 800f990:	4620      	mov	r0, r4
 800f992:	f000 fc8d 	bl	80102b0 <__lshift>
 800f996:	4682      	mov	sl, r0
 800f998:	9b06      	ldr	r3, [sp, #24]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dd05      	ble.n	800f9aa <_dtoa_r+0x83a>
 800f99e:	4631      	mov	r1, r6
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f000 fc84 	bl	80102b0 <__lshift>
 800f9a8:	4606      	mov	r6, r0
 800f9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d072      	beq.n	800fa96 <_dtoa_r+0x926>
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4650      	mov	r0, sl
 800f9b4:	f000 fce8 	bl	8010388 <__mcmp>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	da6c      	bge.n	800fa96 <_dtoa_r+0x926>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4651      	mov	r1, sl
 800f9c0:	220a      	movs	r2, #10
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f000 fa7c 	bl	800fec0 <__multadd>
 800f9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f9ce:	4682      	mov	sl, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 81b0 	beq.w	800fd36 <_dtoa_r+0xbc6>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	4639      	mov	r1, r7
 800f9da:	220a      	movs	r2, #10
 800f9dc:	4620      	mov	r0, r4
 800f9de:	f000 fa6f 	bl	800fec0 <__multadd>
 800f9e2:	9b01      	ldr	r3, [sp, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	4607      	mov	r7, r0
 800f9e8:	f300 8096 	bgt.w	800fb18 <_dtoa_r+0x9a8>
 800f9ec:	9b07      	ldr	r3, [sp, #28]
 800f9ee:	2b02      	cmp	r3, #2
 800f9f0:	dc59      	bgt.n	800faa6 <_dtoa_r+0x936>
 800f9f2:	e091      	b.n	800fb18 <_dtoa_r+0x9a8>
 800f9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9fa:	e758      	b.n	800f8ae <_dtoa_r+0x73e>
 800f9fc:	9b04      	ldr	r3, [sp, #16]
 800f9fe:	1e5e      	subs	r6, r3, #1
 800fa00:	9b08      	ldr	r3, [sp, #32]
 800fa02:	42b3      	cmp	r3, r6
 800fa04:	bfbf      	itttt	lt
 800fa06:	9b08      	ldrlt	r3, [sp, #32]
 800fa08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fa0a:	9608      	strlt	r6, [sp, #32]
 800fa0c:	1af3      	sublt	r3, r6, r3
 800fa0e:	bfb4      	ite	lt
 800fa10:	18d2      	addlt	r2, r2, r3
 800fa12:	1b9e      	subge	r6, r3, r6
 800fa14:	9b04      	ldr	r3, [sp, #16]
 800fa16:	bfbc      	itt	lt
 800fa18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fa1a:	2600      	movlt	r6, #0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	bfb7      	itett	lt
 800fa20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fa24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fa28:	1a9d      	sublt	r5, r3, r2
 800fa2a:	2300      	movlt	r3, #0
 800fa2c:	e741      	b.n	800f8b2 <_dtoa_r+0x742>
 800fa2e:	9e08      	ldr	r6, [sp, #32]
 800fa30:	9d05      	ldr	r5, [sp, #20]
 800fa32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fa34:	e748      	b.n	800f8c8 <_dtoa_r+0x758>
 800fa36:	9a08      	ldr	r2, [sp, #32]
 800fa38:	e770      	b.n	800f91c <_dtoa_r+0x7ac>
 800fa3a:	9b07      	ldr	r3, [sp, #28]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	dc19      	bgt.n	800fa74 <_dtoa_r+0x904>
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	b9bb      	cbnz	r3, 800fa74 <_dtoa_r+0x904>
 800fa44:	9b03      	ldr	r3, [sp, #12]
 800fa46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa4a:	b99b      	cbnz	r3, 800fa74 <_dtoa_r+0x904>
 800fa4c:	9b03      	ldr	r3, [sp, #12]
 800fa4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa52:	0d1b      	lsrs	r3, r3, #20
 800fa54:	051b      	lsls	r3, r3, #20
 800fa56:	b183      	cbz	r3, 800fa7a <_dtoa_r+0x90a>
 800fa58:	9b05      	ldr	r3, [sp, #20]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	9305      	str	r3, [sp, #20]
 800fa5e:	9b06      	ldr	r3, [sp, #24]
 800fa60:	3301      	adds	r3, #1
 800fa62:	9306      	str	r3, [sp, #24]
 800fa64:	f04f 0801 	mov.w	r8, #1
 800fa68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f47f af6f 	bne.w	800f94e <_dtoa_r+0x7de>
 800fa70:	2001      	movs	r0, #1
 800fa72:	e774      	b.n	800f95e <_dtoa_r+0x7ee>
 800fa74:	f04f 0800 	mov.w	r8, #0
 800fa78:	e7f6      	b.n	800fa68 <_dtoa_r+0x8f8>
 800fa7a:	4698      	mov	r8, r3
 800fa7c:	e7f4      	b.n	800fa68 <_dtoa_r+0x8f8>
 800fa7e:	d082      	beq.n	800f986 <_dtoa_r+0x816>
 800fa80:	9a05      	ldr	r2, [sp, #20]
 800fa82:	331c      	adds	r3, #28
 800fa84:	441a      	add	r2, r3
 800fa86:	9205      	str	r2, [sp, #20]
 800fa88:	9a06      	ldr	r2, [sp, #24]
 800fa8a:	441a      	add	r2, r3
 800fa8c:	441d      	add	r5, r3
 800fa8e:	9206      	str	r2, [sp, #24]
 800fa90:	e779      	b.n	800f986 <_dtoa_r+0x816>
 800fa92:	4603      	mov	r3, r0
 800fa94:	e7f4      	b.n	800fa80 <_dtoa_r+0x910>
 800fa96:	9b04      	ldr	r3, [sp, #16]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	dc37      	bgt.n	800fb0c <_dtoa_r+0x99c>
 800fa9c:	9b07      	ldr	r3, [sp, #28]
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	dd34      	ble.n	800fb0c <_dtoa_r+0x99c>
 800faa2:	9b04      	ldr	r3, [sp, #16]
 800faa4:	9301      	str	r3, [sp, #4]
 800faa6:	9b01      	ldr	r3, [sp, #4]
 800faa8:	b963      	cbnz	r3, 800fac4 <_dtoa_r+0x954>
 800faaa:	4631      	mov	r1, r6
 800faac:	2205      	movs	r2, #5
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 fa06 	bl	800fec0 <__multadd>
 800fab4:	4601      	mov	r1, r0
 800fab6:	4606      	mov	r6, r0
 800fab8:	4650      	mov	r0, sl
 800faba:	f000 fc65 	bl	8010388 <__mcmp>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	f73f adbb 	bgt.w	800f63a <_dtoa_r+0x4ca>
 800fac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fac6:	9d00      	ldr	r5, [sp, #0]
 800fac8:	ea6f 0b03 	mvn.w	fp, r3
 800facc:	f04f 0800 	mov.w	r8, #0
 800fad0:	4631      	mov	r1, r6
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 f9d2 	bl	800fe7c <_Bfree>
 800fad8:	2f00      	cmp	r7, #0
 800fada:	f43f aeab 	beq.w	800f834 <_dtoa_r+0x6c4>
 800fade:	f1b8 0f00 	cmp.w	r8, #0
 800fae2:	d005      	beq.n	800faf0 <_dtoa_r+0x980>
 800fae4:	45b8      	cmp	r8, r7
 800fae6:	d003      	beq.n	800faf0 <_dtoa_r+0x980>
 800fae8:	4641      	mov	r1, r8
 800faea:	4620      	mov	r0, r4
 800faec:	f000 f9c6 	bl	800fe7c <_Bfree>
 800faf0:	4639      	mov	r1, r7
 800faf2:	4620      	mov	r0, r4
 800faf4:	f000 f9c2 	bl	800fe7c <_Bfree>
 800faf8:	e69c      	b.n	800f834 <_dtoa_r+0x6c4>
 800fafa:	2600      	movs	r6, #0
 800fafc:	4637      	mov	r7, r6
 800fafe:	e7e1      	b.n	800fac4 <_dtoa_r+0x954>
 800fb00:	46bb      	mov	fp, r7
 800fb02:	4637      	mov	r7, r6
 800fb04:	e599      	b.n	800f63a <_dtoa_r+0x4ca>
 800fb06:	bf00      	nop
 800fb08:	40240000 	.word	0x40240000
 800fb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f000 80c8 	beq.w	800fca4 <_dtoa_r+0xb34>
 800fb14:	9b04      	ldr	r3, [sp, #16]
 800fb16:	9301      	str	r3, [sp, #4]
 800fb18:	2d00      	cmp	r5, #0
 800fb1a:	dd05      	ble.n	800fb28 <_dtoa_r+0x9b8>
 800fb1c:	4639      	mov	r1, r7
 800fb1e:	462a      	mov	r2, r5
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 fbc5 	bl	80102b0 <__lshift>
 800fb26:	4607      	mov	r7, r0
 800fb28:	f1b8 0f00 	cmp.w	r8, #0
 800fb2c:	d05b      	beq.n	800fbe6 <_dtoa_r+0xa76>
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 f963 	bl	800fdfc <_Balloc>
 800fb36:	4605      	mov	r5, r0
 800fb38:	b928      	cbnz	r0, 800fb46 <_dtoa_r+0x9d6>
 800fb3a:	4b83      	ldr	r3, [pc, #524]	; (800fd48 <_dtoa_r+0xbd8>)
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fb42:	f7ff bb2e 	b.w	800f1a2 <_dtoa_r+0x32>
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	3202      	adds	r2, #2
 800fb4a:	0092      	lsls	r2, r2, #2
 800fb4c:	f107 010c 	add.w	r1, r7, #12
 800fb50:	300c      	adds	r0, #12
 800fb52:	f7ff fa71 	bl	800f038 <memcpy>
 800fb56:	2201      	movs	r2, #1
 800fb58:	4629      	mov	r1, r5
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 fba8 	bl	80102b0 <__lshift>
 800fb60:	9b00      	ldr	r3, [sp, #0]
 800fb62:	3301      	adds	r3, #1
 800fb64:	9304      	str	r3, [sp, #16]
 800fb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	9308      	str	r3, [sp, #32]
 800fb6e:	9b02      	ldr	r3, [sp, #8]
 800fb70:	f003 0301 	and.w	r3, r3, #1
 800fb74:	46b8      	mov	r8, r7
 800fb76:	9306      	str	r3, [sp, #24]
 800fb78:	4607      	mov	r7, r0
 800fb7a:	9b04      	ldr	r3, [sp, #16]
 800fb7c:	4631      	mov	r1, r6
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	4650      	mov	r0, sl
 800fb82:	9301      	str	r3, [sp, #4]
 800fb84:	f7ff fa6c 	bl	800f060 <quorem>
 800fb88:	4641      	mov	r1, r8
 800fb8a:	9002      	str	r0, [sp, #8]
 800fb8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fb90:	4650      	mov	r0, sl
 800fb92:	f000 fbf9 	bl	8010388 <__mcmp>
 800fb96:	463a      	mov	r2, r7
 800fb98:	9005      	str	r0, [sp, #20]
 800fb9a:	4631      	mov	r1, r6
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f000 fc0f 	bl	80103c0 <__mdiff>
 800fba2:	68c2      	ldr	r2, [r0, #12]
 800fba4:	4605      	mov	r5, r0
 800fba6:	bb02      	cbnz	r2, 800fbea <_dtoa_r+0xa7a>
 800fba8:	4601      	mov	r1, r0
 800fbaa:	4650      	mov	r0, sl
 800fbac:	f000 fbec 	bl	8010388 <__mcmp>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	9209      	str	r2, [sp, #36]	; 0x24
 800fbb8:	f000 f960 	bl	800fe7c <_Bfree>
 800fbbc:	9b07      	ldr	r3, [sp, #28]
 800fbbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbc0:	9d04      	ldr	r5, [sp, #16]
 800fbc2:	ea43 0102 	orr.w	r1, r3, r2
 800fbc6:	9b06      	ldr	r3, [sp, #24]
 800fbc8:	4319      	orrs	r1, r3
 800fbca:	d110      	bne.n	800fbee <_dtoa_r+0xa7e>
 800fbcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbd0:	d029      	beq.n	800fc26 <_dtoa_r+0xab6>
 800fbd2:	9b05      	ldr	r3, [sp, #20]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	dd02      	ble.n	800fbde <_dtoa_r+0xa6e>
 800fbd8:	9b02      	ldr	r3, [sp, #8]
 800fbda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	f883 9000 	strb.w	r9, [r3]
 800fbe4:	e774      	b.n	800fad0 <_dtoa_r+0x960>
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	e7ba      	b.n	800fb60 <_dtoa_r+0x9f0>
 800fbea:	2201      	movs	r2, #1
 800fbec:	e7e1      	b.n	800fbb2 <_dtoa_r+0xa42>
 800fbee:	9b05      	ldr	r3, [sp, #20]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	db04      	blt.n	800fbfe <_dtoa_r+0xa8e>
 800fbf4:	9907      	ldr	r1, [sp, #28]
 800fbf6:	430b      	orrs	r3, r1
 800fbf8:	9906      	ldr	r1, [sp, #24]
 800fbfa:	430b      	orrs	r3, r1
 800fbfc:	d120      	bne.n	800fc40 <_dtoa_r+0xad0>
 800fbfe:	2a00      	cmp	r2, #0
 800fc00:	dded      	ble.n	800fbde <_dtoa_r+0xa6e>
 800fc02:	4651      	mov	r1, sl
 800fc04:	2201      	movs	r2, #1
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 fb52 	bl	80102b0 <__lshift>
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4682      	mov	sl, r0
 800fc10:	f000 fbba 	bl	8010388 <__mcmp>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	dc03      	bgt.n	800fc20 <_dtoa_r+0xab0>
 800fc18:	d1e1      	bne.n	800fbde <_dtoa_r+0xa6e>
 800fc1a:	f019 0f01 	tst.w	r9, #1
 800fc1e:	d0de      	beq.n	800fbde <_dtoa_r+0xa6e>
 800fc20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fc24:	d1d8      	bne.n	800fbd8 <_dtoa_r+0xa68>
 800fc26:	9a01      	ldr	r2, [sp, #4]
 800fc28:	2339      	movs	r3, #57	; 0x39
 800fc2a:	7013      	strb	r3, [r2, #0]
 800fc2c:	462b      	mov	r3, r5
 800fc2e:	461d      	mov	r5, r3
 800fc30:	3b01      	subs	r3, #1
 800fc32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fc36:	2a39      	cmp	r2, #57	; 0x39
 800fc38:	d06c      	beq.n	800fd14 <_dtoa_r+0xba4>
 800fc3a:	3201      	adds	r2, #1
 800fc3c:	701a      	strb	r2, [r3, #0]
 800fc3e:	e747      	b.n	800fad0 <_dtoa_r+0x960>
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	dd07      	ble.n	800fc54 <_dtoa_r+0xae4>
 800fc44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fc48:	d0ed      	beq.n	800fc26 <_dtoa_r+0xab6>
 800fc4a:	9a01      	ldr	r2, [sp, #4]
 800fc4c:	f109 0301 	add.w	r3, r9, #1
 800fc50:	7013      	strb	r3, [r2, #0]
 800fc52:	e73d      	b.n	800fad0 <_dtoa_r+0x960>
 800fc54:	9b04      	ldr	r3, [sp, #16]
 800fc56:	9a08      	ldr	r2, [sp, #32]
 800fc58:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d043      	beq.n	800fce8 <_dtoa_r+0xb78>
 800fc60:	4651      	mov	r1, sl
 800fc62:	2300      	movs	r3, #0
 800fc64:	220a      	movs	r2, #10
 800fc66:	4620      	mov	r0, r4
 800fc68:	f000 f92a 	bl	800fec0 <__multadd>
 800fc6c:	45b8      	cmp	r8, r7
 800fc6e:	4682      	mov	sl, r0
 800fc70:	f04f 0300 	mov.w	r3, #0
 800fc74:	f04f 020a 	mov.w	r2, #10
 800fc78:	4641      	mov	r1, r8
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	d107      	bne.n	800fc8e <_dtoa_r+0xb1e>
 800fc7e:	f000 f91f 	bl	800fec0 <__multadd>
 800fc82:	4680      	mov	r8, r0
 800fc84:	4607      	mov	r7, r0
 800fc86:	9b04      	ldr	r3, [sp, #16]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	e775      	b.n	800fb7a <_dtoa_r+0xa0a>
 800fc8e:	f000 f917 	bl	800fec0 <__multadd>
 800fc92:	4639      	mov	r1, r7
 800fc94:	4680      	mov	r8, r0
 800fc96:	2300      	movs	r3, #0
 800fc98:	220a      	movs	r2, #10
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f000 f910 	bl	800fec0 <__multadd>
 800fca0:	4607      	mov	r7, r0
 800fca2:	e7f0      	b.n	800fc86 <_dtoa_r+0xb16>
 800fca4:	9b04      	ldr	r3, [sp, #16]
 800fca6:	9301      	str	r3, [sp, #4]
 800fca8:	9d00      	ldr	r5, [sp, #0]
 800fcaa:	4631      	mov	r1, r6
 800fcac:	4650      	mov	r0, sl
 800fcae:	f7ff f9d7 	bl	800f060 <quorem>
 800fcb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fcb6:	9b00      	ldr	r3, [sp, #0]
 800fcb8:	f805 9b01 	strb.w	r9, [r5], #1
 800fcbc:	1aea      	subs	r2, r5, r3
 800fcbe:	9b01      	ldr	r3, [sp, #4]
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	dd07      	ble.n	800fcd4 <_dtoa_r+0xb64>
 800fcc4:	4651      	mov	r1, sl
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	220a      	movs	r2, #10
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 f8f8 	bl	800fec0 <__multadd>
 800fcd0:	4682      	mov	sl, r0
 800fcd2:	e7ea      	b.n	800fcaa <_dtoa_r+0xb3a>
 800fcd4:	9b01      	ldr	r3, [sp, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	bfc8      	it	gt
 800fcda:	461d      	movgt	r5, r3
 800fcdc:	9b00      	ldr	r3, [sp, #0]
 800fcde:	bfd8      	it	le
 800fce0:	2501      	movle	r5, #1
 800fce2:	441d      	add	r5, r3
 800fce4:	f04f 0800 	mov.w	r8, #0
 800fce8:	4651      	mov	r1, sl
 800fcea:	2201      	movs	r2, #1
 800fcec:	4620      	mov	r0, r4
 800fcee:	f000 fadf 	bl	80102b0 <__lshift>
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	4682      	mov	sl, r0
 800fcf6:	f000 fb47 	bl	8010388 <__mcmp>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	dc96      	bgt.n	800fc2c <_dtoa_r+0xabc>
 800fcfe:	d102      	bne.n	800fd06 <_dtoa_r+0xb96>
 800fd00:	f019 0f01 	tst.w	r9, #1
 800fd04:	d192      	bne.n	800fc2c <_dtoa_r+0xabc>
 800fd06:	462b      	mov	r3, r5
 800fd08:	461d      	mov	r5, r3
 800fd0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd0e:	2a30      	cmp	r2, #48	; 0x30
 800fd10:	d0fa      	beq.n	800fd08 <_dtoa_r+0xb98>
 800fd12:	e6dd      	b.n	800fad0 <_dtoa_r+0x960>
 800fd14:	9a00      	ldr	r2, [sp, #0]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d189      	bne.n	800fc2e <_dtoa_r+0xabe>
 800fd1a:	f10b 0b01 	add.w	fp, fp, #1
 800fd1e:	2331      	movs	r3, #49	; 0x31
 800fd20:	e796      	b.n	800fc50 <_dtoa_r+0xae0>
 800fd22:	4b0a      	ldr	r3, [pc, #40]	; (800fd4c <_dtoa_r+0xbdc>)
 800fd24:	f7ff ba99 	b.w	800f25a <_dtoa_r+0xea>
 800fd28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	f47f aa6d 	bne.w	800f20a <_dtoa_r+0x9a>
 800fd30:	4b07      	ldr	r3, [pc, #28]	; (800fd50 <_dtoa_r+0xbe0>)
 800fd32:	f7ff ba92 	b.w	800f25a <_dtoa_r+0xea>
 800fd36:	9b01      	ldr	r3, [sp, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	dcb5      	bgt.n	800fca8 <_dtoa_r+0xb38>
 800fd3c:	9b07      	ldr	r3, [sp, #28]
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	f73f aeb1 	bgt.w	800faa6 <_dtoa_r+0x936>
 800fd44:	e7b0      	b.n	800fca8 <_dtoa_r+0xb38>
 800fd46:	bf00      	nop
 800fd48:	08014163 	.word	0x08014163
 800fd4c:	08014448 	.word	0x08014448
 800fd50:	080140e7 	.word	0x080140e7

0800fd54 <_free_r>:
 800fd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd56:	2900      	cmp	r1, #0
 800fd58:	d044      	beq.n	800fde4 <_free_r+0x90>
 800fd5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd5e:	9001      	str	r0, [sp, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f1a1 0404 	sub.w	r4, r1, #4
 800fd66:	bfb8      	it	lt
 800fd68:	18e4      	addlt	r4, r4, r3
 800fd6a:	f7fe f8bd 	bl	800dee8 <__malloc_lock>
 800fd6e:	4a1e      	ldr	r2, [pc, #120]	; (800fde8 <_free_r+0x94>)
 800fd70:	9801      	ldr	r0, [sp, #4]
 800fd72:	6813      	ldr	r3, [r2, #0]
 800fd74:	b933      	cbnz	r3, 800fd84 <_free_r+0x30>
 800fd76:	6063      	str	r3, [r4, #4]
 800fd78:	6014      	str	r4, [r2, #0]
 800fd7a:	b003      	add	sp, #12
 800fd7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd80:	f7fe b8b8 	b.w	800def4 <__malloc_unlock>
 800fd84:	42a3      	cmp	r3, r4
 800fd86:	d908      	bls.n	800fd9a <_free_r+0x46>
 800fd88:	6825      	ldr	r5, [r4, #0]
 800fd8a:	1961      	adds	r1, r4, r5
 800fd8c:	428b      	cmp	r3, r1
 800fd8e:	bf01      	itttt	eq
 800fd90:	6819      	ldreq	r1, [r3, #0]
 800fd92:	685b      	ldreq	r3, [r3, #4]
 800fd94:	1949      	addeq	r1, r1, r5
 800fd96:	6021      	streq	r1, [r4, #0]
 800fd98:	e7ed      	b.n	800fd76 <_free_r+0x22>
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	b10b      	cbz	r3, 800fda4 <_free_r+0x50>
 800fda0:	42a3      	cmp	r3, r4
 800fda2:	d9fa      	bls.n	800fd9a <_free_r+0x46>
 800fda4:	6811      	ldr	r1, [r2, #0]
 800fda6:	1855      	adds	r5, r2, r1
 800fda8:	42a5      	cmp	r5, r4
 800fdaa:	d10b      	bne.n	800fdc4 <_free_r+0x70>
 800fdac:	6824      	ldr	r4, [r4, #0]
 800fdae:	4421      	add	r1, r4
 800fdb0:	1854      	adds	r4, r2, r1
 800fdb2:	42a3      	cmp	r3, r4
 800fdb4:	6011      	str	r1, [r2, #0]
 800fdb6:	d1e0      	bne.n	800fd7a <_free_r+0x26>
 800fdb8:	681c      	ldr	r4, [r3, #0]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	6053      	str	r3, [r2, #4]
 800fdbe:	440c      	add	r4, r1
 800fdc0:	6014      	str	r4, [r2, #0]
 800fdc2:	e7da      	b.n	800fd7a <_free_r+0x26>
 800fdc4:	d902      	bls.n	800fdcc <_free_r+0x78>
 800fdc6:	230c      	movs	r3, #12
 800fdc8:	6003      	str	r3, [r0, #0]
 800fdca:	e7d6      	b.n	800fd7a <_free_r+0x26>
 800fdcc:	6825      	ldr	r5, [r4, #0]
 800fdce:	1961      	adds	r1, r4, r5
 800fdd0:	428b      	cmp	r3, r1
 800fdd2:	bf04      	itt	eq
 800fdd4:	6819      	ldreq	r1, [r3, #0]
 800fdd6:	685b      	ldreq	r3, [r3, #4]
 800fdd8:	6063      	str	r3, [r4, #4]
 800fdda:	bf04      	itt	eq
 800fddc:	1949      	addeq	r1, r1, r5
 800fdde:	6021      	streq	r1, [r4, #0]
 800fde0:	6054      	str	r4, [r2, #4]
 800fde2:	e7ca      	b.n	800fd7a <_free_r+0x26>
 800fde4:	b003      	add	sp, #12
 800fde6:	bd30      	pop	{r4, r5, pc}
 800fde8:	20007054 	.word	0x20007054

0800fdec <malloc>:
 800fdec:	4b02      	ldr	r3, [pc, #8]	; (800fdf8 <malloc+0xc>)
 800fdee:	4601      	mov	r1, r0
 800fdf0:	6818      	ldr	r0, [r3, #0]
 800fdf2:	f7fd bff9 	b.w	800dde8 <_malloc_r>
 800fdf6:	bf00      	nop
 800fdf8:	2000006c 	.word	0x2000006c

0800fdfc <_Balloc>:
 800fdfc:	b570      	push	{r4, r5, r6, lr}
 800fdfe:	69c6      	ldr	r6, [r0, #28]
 800fe00:	4604      	mov	r4, r0
 800fe02:	460d      	mov	r5, r1
 800fe04:	b976      	cbnz	r6, 800fe24 <_Balloc+0x28>
 800fe06:	2010      	movs	r0, #16
 800fe08:	f7ff fff0 	bl	800fdec <malloc>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	61e0      	str	r0, [r4, #28]
 800fe10:	b920      	cbnz	r0, 800fe1c <_Balloc+0x20>
 800fe12:	4b18      	ldr	r3, [pc, #96]	; (800fe74 <_Balloc+0x78>)
 800fe14:	4818      	ldr	r0, [pc, #96]	; (800fe78 <_Balloc+0x7c>)
 800fe16:	216b      	movs	r1, #107	; 0x6b
 800fe18:	f002 f902 	bl	8012020 <__assert_func>
 800fe1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe20:	6006      	str	r6, [r0, #0]
 800fe22:	60c6      	str	r6, [r0, #12]
 800fe24:	69e6      	ldr	r6, [r4, #28]
 800fe26:	68f3      	ldr	r3, [r6, #12]
 800fe28:	b183      	cbz	r3, 800fe4c <_Balloc+0x50>
 800fe2a:	69e3      	ldr	r3, [r4, #28]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe32:	b9b8      	cbnz	r0, 800fe64 <_Balloc+0x68>
 800fe34:	2101      	movs	r1, #1
 800fe36:	fa01 f605 	lsl.w	r6, r1, r5
 800fe3a:	1d72      	adds	r2, r6, #5
 800fe3c:	0092      	lsls	r2, r2, #2
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f7fd ff9c 	bl	800dd7c <_calloc_r>
 800fe44:	b160      	cbz	r0, 800fe60 <_Balloc+0x64>
 800fe46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe4a:	e00e      	b.n	800fe6a <_Balloc+0x6e>
 800fe4c:	2221      	movs	r2, #33	; 0x21
 800fe4e:	2104      	movs	r1, #4
 800fe50:	4620      	mov	r0, r4
 800fe52:	f7fd ff93 	bl	800dd7c <_calloc_r>
 800fe56:	69e3      	ldr	r3, [r4, #28]
 800fe58:	60f0      	str	r0, [r6, #12]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1e4      	bne.n	800fe2a <_Balloc+0x2e>
 800fe60:	2000      	movs	r0, #0
 800fe62:	bd70      	pop	{r4, r5, r6, pc}
 800fe64:	6802      	ldr	r2, [r0, #0]
 800fe66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe70:	e7f7      	b.n	800fe62 <_Balloc+0x66>
 800fe72:	bf00      	nop
 800fe74:	080140f4 	.word	0x080140f4
 800fe78:	08014174 	.word	0x08014174

0800fe7c <_Bfree>:
 800fe7c:	b570      	push	{r4, r5, r6, lr}
 800fe7e:	69c6      	ldr	r6, [r0, #28]
 800fe80:	4605      	mov	r5, r0
 800fe82:	460c      	mov	r4, r1
 800fe84:	b976      	cbnz	r6, 800fea4 <_Bfree+0x28>
 800fe86:	2010      	movs	r0, #16
 800fe88:	f7ff ffb0 	bl	800fdec <malloc>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	61e8      	str	r0, [r5, #28]
 800fe90:	b920      	cbnz	r0, 800fe9c <_Bfree+0x20>
 800fe92:	4b09      	ldr	r3, [pc, #36]	; (800feb8 <_Bfree+0x3c>)
 800fe94:	4809      	ldr	r0, [pc, #36]	; (800febc <_Bfree+0x40>)
 800fe96:	218f      	movs	r1, #143	; 0x8f
 800fe98:	f002 f8c2 	bl	8012020 <__assert_func>
 800fe9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fea0:	6006      	str	r6, [r0, #0]
 800fea2:	60c6      	str	r6, [r0, #12]
 800fea4:	b13c      	cbz	r4, 800feb6 <_Bfree+0x3a>
 800fea6:	69eb      	ldr	r3, [r5, #28]
 800fea8:	6862      	ldr	r2, [r4, #4]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800feb0:	6021      	str	r1, [r4, #0]
 800feb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800feb6:	bd70      	pop	{r4, r5, r6, pc}
 800feb8:	080140f4 	.word	0x080140f4
 800febc:	08014174 	.word	0x08014174

0800fec0 <__multadd>:
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	690d      	ldr	r5, [r1, #16]
 800fec6:	4607      	mov	r7, r0
 800fec8:	460c      	mov	r4, r1
 800feca:	461e      	mov	r6, r3
 800fecc:	f101 0c14 	add.w	ip, r1, #20
 800fed0:	2000      	movs	r0, #0
 800fed2:	f8dc 3000 	ldr.w	r3, [ip]
 800fed6:	b299      	uxth	r1, r3
 800fed8:	fb02 6101 	mla	r1, r2, r1, r6
 800fedc:	0c1e      	lsrs	r6, r3, #16
 800fede:	0c0b      	lsrs	r3, r1, #16
 800fee0:	fb02 3306 	mla	r3, r2, r6, r3
 800fee4:	b289      	uxth	r1, r1
 800fee6:	3001      	adds	r0, #1
 800fee8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800feec:	4285      	cmp	r5, r0
 800feee:	f84c 1b04 	str.w	r1, [ip], #4
 800fef2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fef6:	dcec      	bgt.n	800fed2 <__multadd+0x12>
 800fef8:	b30e      	cbz	r6, 800ff3e <__multadd+0x7e>
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	42ab      	cmp	r3, r5
 800fefe:	dc19      	bgt.n	800ff34 <__multadd+0x74>
 800ff00:	6861      	ldr	r1, [r4, #4]
 800ff02:	4638      	mov	r0, r7
 800ff04:	3101      	adds	r1, #1
 800ff06:	f7ff ff79 	bl	800fdfc <_Balloc>
 800ff0a:	4680      	mov	r8, r0
 800ff0c:	b928      	cbnz	r0, 800ff1a <__multadd+0x5a>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	4b0c      	ldr	r3, [pc, #48]	; (800ff44 <__multadd+0x84>)
 800ff12:	480d      	ldr	r0, [pc, #52]	; (800ff48 <__multadd+0x88>)
 800ff14:	21ba      	movs	r1, #186	; 0xba
 800ff16:	f002 f883 	bl	8012020 <__assert_func>
 800ff1a:	6922      	ldr	r2, [r4, #16]
 800ff1c:	3202      	adds	r2, #2
 800ff1e:	f104 010c 	add.w	r1, r4, #12
 800ff22:	0092      	lsls	r2, r2, #2
 800ff24:	300c      	adds	r0, #12
 800ff26:	f7ff f887 	bl	800f038 <memcpy>
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	4638      	mov	r0, r7
 800ff2e:	f7ff ffa5 	bl	800fe7c <_Bfree>
 800ff32:	4644      	mov	r4, r8
 800ff34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff38:	3501      	adds	r5, #1
 800ff3a:	615e      	str	r6, [r3, #20]
 800ff3c:	6125      	str	r5, [r4, #16]
 800ff3e:	4620      	mov	r0, r4
 800ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff44:	08014163 	.word	0x08014163
 800ff48:	08014174 	.word	0x08014174

0800ff4c <__s2b>:
 800ff4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff50:	460c      	mov	r4, r1
 800ff52:	4615      	mov	r5, r2
 800ff54:	461f      	mov	r7, r3
 800ff56:	2209      	movs	r2, #9
 800ff58:	3308      	adds	r3, #8
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff60:	2100      	movs	r1, #0
 800ff62:	2201      	movs	r2, #1
 800ff64:	429a      	cmp	r2, r3
 800ff66:	db09      	blt.n	800ff7c <__s2b+0x30>
 800ff68:	4630      	mov	r0, r6
 800ff6a:	f7ff ff47 	bl	800fdfc <_Balloc>
 800ff6e:	b940      	cbnz	r0, 800ff82 <__s2b+0x36>
 800ff70:	4602      	mov	r2, r0
 800ff72:	4b19      	ldr	r3, [pc, #100]	; (800ffd8 <__s2b+0x8c>)
 800ff74:	4819      	ldr	r0, [pc, #100]	; (800ffdc <__s2b+0x90>)
 800ff76:	21d3      	movs	r1, #211	; 0xd3
 800ff78:	f002 f852 	bl	8012020 <__assert_func>
 800ff7c:	0052      	lsls	r2, r2, #1
 800ff7e:	3101      	adds	r1, #1
 800ff80:	e7f0      	b.n	800ff64 <__s2b+0x18>
 800ff82:	9b08      	ldr	r3, [sp, #32]
 800ff84:	6143      	str	r3, [r0, #20]
 800ff86:	2d09      	cmp	r5, #9
 800ff88:	f04f 0301 	mov.w	r3, #1
 800ff8c:	6103      	str	r3, [r0, #16]
 800ff8e:	dd16      	ble.n	800ffbe <__s2b+0x72>
 800ff90:	f104 0909 	add.w	r9, r4, #9
 800ff94:	46c8      	mov	r8, r9
 800ff96:	442c      	add	r4, r5
 800ff98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff9c:	4601      	mov	r1, r0
 800ff9e:	3b30      	subs	r3, #48	; 0x30
 800ffa0:	220a      	movs	r2, #10
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f7ff ff8c 	bl	800fec0 <__multadd>
 800ffa8:	45a0      	cmp	r8, r4
 800ffaa:	d1f5      	bne.n	800ff98 <__s2b+0x4c>
 800ffac:	f1a5 0408 	sub.w	r4, r5, #8
 800ffb0:	444c      	add	r4, r9
 800ffb2:	1b2d      	subs	r5, r5, r4
 800ffb4:	1963      	adds	r3, r4, r5
 800ffb6:	42bb      	cmp	r3, r7
 800ffb8:	db04      	blt.n	800ffc4 <__s2b+0x78>
 800ffba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffbe:	340a      	adds	r4, #10
 800ffc0:	2509      	movs	r5, #9
 800ffc2:	e7f6      	b.n	800ffb2 <__s2b+0x66>
 800ffc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ffc8:	4601      	mov	r1, r0
 800ffca:	3b30      	subs	r3, #48	; 0x30
 800ffcc:	220a      	movs	r2, #10
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f7ff ff76 	bl	800fec0 <__multadd>
 800ffd4:	e7ee      	b.n	800ffb4 <__s2b+0x68>
 800ffd6:	bf00      	nop
 800ffd8:	08014163 	.word	0x08014163
 800ffdc:	08014174 	.word	0x08014174

0800ffe0 <__hi0bits>:
 800ffe0:	0c03      	lsrs	r3, r0, #16
 800ffe2:	041b      	lsls	r3, r3, #16
 800ffe4:	b9d3      	cbnz	r3, 801001c <__hi0bits+0x3c>
 800ffe6:	0400      	lsls	r0, r0, #16
 800ffe8:	2310      	movs	r3, #16
 800ffea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ffee:	bf04      	itt	eq
 800fff0:	0200      	lsleq	r0, r0, #8
 800fff2:	3308      	addeq	r3, #8
 800fff4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fff8:	bf04      	itt	eq
 800fffa:	0100      	lsleq	r0, r0, #4
 800fffc:	3304      	addeq	r3, #4
 800fffe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010002:	bf04      	itt	eq
 8010004:	0080      	lsleq	r0, r0, #2
 8010006:	3302      	addeq	r3, #2
 8010008:	2800      	cmp	r0, #0
 801000a:	db05      	blt.n	8010018 <__hi0bits+0x38>
 801000c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010010:	f103 0301 	add.w	r3, r3, #1
 8010014:	bf08      	it	eq
 8010016:	2320      	moveq	r3, #32
 8010018:	4618      	mov	r0, r3
 801001a:	4770      	bx	lr
 801001c:	2300      	movs	r3, #0
 801001e:	e7e4      	b.n	800ffea <__hi0bits+0xa>

08010020 <__lo0bits>:
 8010020:	6803      	ldr	r3, [r0, #0]
 8010022:	f013 0207 	ands.w	r2, r3, #7
 8010026:	d00c      	beq.n	8010042 <__lo0bits+0x22>
 8010028:	07d9      	lsls	r1, r3, #31
 801002a:	d422      	bmi.n	8010072 <__lo0bits+0x52>
 801002c:	079a      	lsls	r2, r3, #30
 801002e:	bf49      	itett	mi
 8010030:	085b      	lsrmi	r3, r3, #1
 8010032:	089b      	lsrpl	r3, r3, #2
 8010034:	6003      	strmi	r3, [r0, #0]
 8010036:	2201      	movmi	r2, #1
 8010038:	bf5c      	itt	pl
 801003a:	6003      	strpl	r3, [r0, #0]
 801003c:	2202      	movpl	r2, #2
 801003e:	4610      	mov	r0, r2
 8010040:	4770      	bx	lr
 8010042:	b299      	uxth	r1, r3
 8010044:	b909      	cbnz	r1, 801004a <__lo0bits+0x2a>
 8010046:	0c1b      	lsrs	r3, r3, #16
 8010048:	2210      	movs	r2, #16
 801004a:	b2d9      	uxtb	r1, r3
 801004c:	b909      	cbnz	r1, 8010052 <__lo0bits+0x32>
 801004e:	3208      	adds	r2, #8
 8010050:	0a1b      	lsrs	r3, r3, #8
 8010052:	0719      	lsls	r1, r3, #28
 8010054:	bf04      	itt	eq
 8010056:	091b      	lsreq	r3, r3, #4
 8010058:	3204      	addeq	r2, #4
 801005a:	0799      	lsls	r1, r3, #30
 801005c:	bf04      	itt	eq
 801005e:	089b      	lsreq	r3, r3, #2
 8010060:	3202      	addeq	r2, #2
 8010062:	07d9      	lsls	r1, r3, #31
 8010064:	d403      	bmi.n	801006e <__lo0bits+0x4e>
 8010066:	085b      	lsrs	r3, r3, #1
 8010068:	f102 0201 	add.w	r2, r2, #1
 801006c:	d003      	beq.n	8010076 <__lo0bits+0x56>
 801006e:	6003      	str	r3, [r0, #0]
 8010070:	e7e5      	b.n	801003e <__lo0bits+0x1e>
 8010072:	2200      	movs	r2, #0
 8010074:	e7e3      	b.n	801003e <__lo0bits+0x1e>
 8010076:	2220      	movs	r2, #32
 8010078:	e7e1      	b.n	801003e <__lo0bits+0x1e>
	...

0801007c <__i2b>:
 801007c:	b510      	push	{r4, lr}
 801007e:	460c      	mov	r4, r1
 8010080:	2101      	movs	r1, #1
 8010082:	f7ff febb 	bl	800fdfc <_Balloc>
 8010086:	4602      	mov	r2, r0
 8010088:	b928      	cbnz	r0, 8010096 <__i2b+0x1a>
 801008a:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <__i2b+0x24>)
 801008c:	4805      	ldr	r0, [pc, #20]	; (80100a4 <__i2b+0x28>)
 801008e:	f240 1145 	movw	r1, #325	; 0x145
 8010092:	f001 ffc5 	bl	8012020 <__assert_func>
 8010096:	2301      	movs	r3, #1
 8010098:	6144      	str	r4, [r0, #20]
 801009a:	6103      	str	r3, [r0, #16]
 801009c:	bd10      	pop	{r4, pc}
 801009e:	bf00      	nop
 80100a0:	08014163 	.word	0x08014163
 80100a4:	08014174 	.word	0x08014174

080100a8 <__multiply>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	4691      	mov	r9, r2
 80100ae:	690a      	ldr	r2, [r1, #16]
 80100b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	bfb8      	it	lt
 80100b8:	460b      	movlt	r3, r1
 80100ba:	460c      	mov	r4, r1
 80100bc:	bfbc      	itt	lt
 80100be:	464c      	movlt	r4, r9
 80100c0:	4699      	movlt	r9, r3
 80100c2:	6927      	ldr	r7, [r4, #16]
 80100c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80100c8:	68a3      	ldr	r3, [r4, #8]
 80100ca:	6861      	ldr	r1, [r4, #4]
 80100cc:	eb07 060a 	add.w	r6, r7, sl
 80100d0:	42b3      	cmp	r3, r6
 80100d2:	b085      	sub	sp, #20
 80100d4:	bfb8      	it	lt
 80100d6:	3101      	addlt	r1, #1
 80100d8:	f7ff fe90 	bl	800fdfc <_Balloc>
 80100dc:	b930      	cbnz	r0, 80100ec <__multiply+0x44>
 80100de:	4602      	mov	r2, r0
 80100e0:	4b44      	ldr	r3, [pc, #272]	; (80101f4 <__multiply+0x14c>)
 80100e2:	4845      	ldr	r0, [pc, #276]	; (80101f8 <__multiply+0x150>)
 80100e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80100e8:	f001 ff9a 	bl	8012020 <__assert_func>
 80100ec:	f100 0514 	add.w	r5, r0, #20
 80100f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100f4:	462b      	mov	r3, r5
 80100f6:	2200      	movs	r2, #0
 80100f8:	4543      	cmp	r3, r8
 80100fa:	d321      	bcc.n	8010140 <__multiply+0x98>
 80100fc:	f104 0314 	add.w	r3, r4, #20
 8010100:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010104:	f109 0314 	add.w	r3, r9, #20
 8010108:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801010c:	9202      	str	r2, [sp, #8]
 801010e:	1b3a      	subs	r2, r7, r4
 8010110:	3a15      	subs	r2, #21
 8010112:	f022 0203 	bic.w	r2, r2, #3
 8010116:	3204      	adds	r2, #4
 8010118:	f104 0115 	add.w	r1, r4, #21
 801011c:	428f      	cmp	r7, r1
 801011e:	bf38      	it	cc
 8010120:	2204      	movcc	r2, #4
 8010122:	9201      	str	r2, [sp, #4]
 8010124:	9a02      	ldr	r2, [sp, #8]
 8010126:	9303      	str	r3, [sp, #12]
 8010128:	429a      	cmp	r2, r3
 801012a:	d80c      	bhi.n	8010146 <__multiply+0x9e>
 801012c:	2e00      	cmp	r6, #0
 801012e:	dd03      	ble.n	8010138 <__multiply+0x90>
 8010130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010134:	2b00      	cmp	r3, #0
 8010136:	d05b      	beq.n	80101f0 <__multiply+0x148>
 8010138:	6106      	str	r6, [r0, #16]
 801013a:	b005      	add	sp, #20
 801013c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010140:	f843 2b04 	str.w	r2, [r3], #4
 8010144:	e7d8      	b.n	80100f8 <__multiply+0x50>
 8010146:	f8b3 a000 	ldrh.w	sl, [r3]
 801014a:	f1ba 0f00 	cmp.w	sl, #0
 801014e:	d024      	beq.n	801019a <__multiply+0xf2>
 8010150:	f104 0e14 	add.w	lr, r4, #20
 8010154:	46a9      	mov	r9, r5
 8010156:	f04f 0c00 	mov.w	ip, #0
 801015a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801015e:	f8d9 1000 	ldr.w	r1, [r9]
 8010162:	fa1f fb82 	uxth.w	fp, r2
 8010166:	b289      	uxth	r1, r1
 8010168:	fb0a 110b 	mla	r1, sl, fp, r1
 801016c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010170:	f8d9 2000 	ldr.w	r2, [r9]
 8010174:	4461      	add	r1, ip
 8010176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801017a:	fb0a c20b 	mla	r2, sl, fp, ip
 801017e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010182:	b289      	uxth	r1, r1
 8010184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010188:	4577      	cmp	r7, lr
 801018a:	f849 1b04 	str.w	r1, [r9], #4
 801018e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010192:	d8e2      	bhi.n	801015a <__multiply+0xb2>
 8010194:	9a01      	ldr	r2, [sp, #4]
 8010196:	f845 c002 	str.w	ip, [r5, r2]
 801019a:	9a03      	ldr	r2, [sp, #12]
 801019c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80101a0:	3304      	adds	r3, #4
 80101a2:	f1b9 0f00 	cmp.w	r9, #0
 80101a6:	d021      	beq.n	80101ec <__multiply+0x144>
 80101a8:	6829      	ldr	r1, [r5, #0]
 80101aa:	f104 0c14 	add.w	ip, r4, #20
 80101ae:	46ae      	mov	lr, r5
 80101b0:	f04f 0a00 	mov.w	sl, #0
 80101b4:	f8bc b000 	ldrh.w	fp, [ip]
 80101b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80101bc:	fb09 220b 	mla	r2, r9, fp, r2
 80101c0:	4452      	add	r2, sl
 80101c2:	b289      	uxth	r1, r1
 80101c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80101c8:	f84e 1b04 	str.w	r1, [lr], #4
 80101cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80101d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101d4:	f8be 1000 	ldrh.w	r1, [lr]
 80101d8:	fb09 110a 	mla	r1, r9, sl, r1
 80101dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80101e0:	4567      	cmp	r7, ip
 80101e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101e6:	d8e5      	bhi.n	80101b4 <__multiply+0x10c>
 80101e8:	9a01      	ldr	r2, [sp, #4]
 80101ea:	50a9      	str	r1, [r5, r2]
 80101ec:	3504      	adds	r5, #4
 80101ee:	e799      	b.n	8010124 <__multiply+0x7c>
 80101f0:	3e01      	subs	r6, #1
 80101f2:	e79b      	b.n	801012c <__multiply+0x84>
 80101f4:	08014163 	.word	0x08014163
 80101f8:	08014174 	.word	0x08014174

080101fc <__pow5mult>:
 80101fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010200:	4615      	mov	r5, r2
 8010202:	f012 0203 	ands.w	r2, r2, #3
 8010206:	4606      	mov	r6, r0
 8010208:	460f      	mov	r7, r1
 801020a:	d007      	beq.n	801021c <__pow5mult+0x20>
 801020c:	4c25      	ldr	r4, [pc, #148]	; (80102a4 <__pow5mult+0xa8>)
 801020e:	3a01      	subs	r2, #1
 8010210:	2300      	movs	r3, #0
 8010212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010216:	f7ff fe53 	bl	800fec0 <__multadd>
 801021a:	4607      	mov	r7, r0
 801021c:	10ad      	asrs	r5, r5, #2
 801021e:	d03d      	beq.n	801029c <__pow5mult+0xa0>
 8010220:	69f4      	ldr	r4, [r6, #28]
 8010222:	b97c      	cbnz	r4, 8010244 <__pow5mult+0x48>
 8010224:	2010      	movs	r0, #16
 8010226:	f7ff fde1 	bl	800fdec <malloc>
 801022a:	4602      	mov	r2, r0
 801022c:	61f0      	str	r0, [r6, #28]
 801022e:	b928      	cbnz	r0, 801023c <__pow5mult+0x40>
 8010230:	4b1d      	ldr	r3, [pc, #116]	; (80102a8 <__pow5mult+0xac>)
 8010232:	481e      	ldr	r0, [pc, #120]	; (80102ac <__pow5mult+0xb0>)
 8010234:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010238:	f001 fef2 	bl	8012020 <__assert_func>
 801023c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010240:	6004      	str	r4, [r0, #0]
 8010242:	60c4      	str	r4, [r0, #12]
 8010244:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801024c:	b94c      	cbnz	r4, 8010262 <__pow5mult+0x66>
 801024e:	f240 2171 	movw	r1, #625	; 0x271
 8010252:	4630      	mov	r0, r6
 8010254:	f7ff ff12 	bl	801007c <__i2b>
 8010258:	2300      	movs	r3, #0
 801025a:	f8c8 0008 	str.w	r0, [r8, #8]
 801025e:	4604      	mov	r4, r0
 8010260:	6003      	str	r3, [r0, #0]
 8010262:	f04f 0900 	mov.w	r9, #0
 8010266:	07eb      	lsls	r3, r5, #31
 8010268:	d50a      	bpl.n	8010280 <__pow5mult+0x84>
 801026a:	4639      	mov	r1, r7
 801026c:	4622      	mov	r2, r4
 801026e:	4630      	mov	r0, r6
 8010270:	f7ff ff1a 	bl	80100a8 <__multiply>
 8010274:	4639      	mov	r1, r7
 8010276:	4680      	mov	r8, r0
 8010278:	4630      	mov	r0, r6
 801027a:	f7ff fdff 	bl	800fe7c <_Bfree>
 801027e:	4647      	mov	r7, r8
 8010280:	106d      	asrs	r5, r5, #1
 8010282:	d00b      	beq.n	801029c <__pow5mult+0xa0>
 8010284:	6820      	ldr	r0, [r4, #0]
 8010286:	b938      	cbnz	r0, 8010298 <__pow5mult+0x9c>
 8010288:	4622      	mov	r2, r4
 801028a:	4621      	mov	r1, r4
 801028c:	4630      	mov	r0, r6
 801028e:	f7ff ff0b 	bl	80100a8 <__multiply>
 8010292:	6020      	str	r0, [r4, #0]
 8010294:	f8c0 9000 	str.w	r9, [r0]
 8010298:	4604      	mov	r4, r0
 801029a:	e7e4      	b.n	8010266 <__pow5mult+0x6a>
 801029c:	4638      	mov	r0, r7
 801029e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a2:	bf00      	nop
 80102a4:	080142c0 	.word	0x080142c0
 80102a8:	080140f4 	.word	0x080140f4
 80102ac:	08014174 	.word	0x08014174

080102b0 <__lshift>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	460c      	mov	r4, r1
 80102b6:	6849      	ldr	r1, [r1, #4]
 80102b8:	6923      	ldr	r3, [r4, #16]
 80102ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102be:	68a3      	ldr	r3, [r4, #8]
 80102c0:	4607      	mov	r7, r0
 80102c2:	4691      	mov	r9, r2
 80102c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102c8:	f108 0601 	add.w	r6, r8, #1
 80102cc:	42b3      	cmp	r3, r6
 80102ce:	db0b      	blt.n	80102e8 <__lshift+0x38>
 80102d0:	4638      	mov	r0, r7
 80102d2:	f7ff fd93 	bl	800fdfc <_Balloc>
 80102d6:	4605      	mov	r5, r0
 80102d8:	b948      	cbnz	r0, 80102ee <__lshift+0x3e>
 80102da:	4602      	mov	r2, r0
 80102dc:	4b28      	ldr	r3, [pc, #160]	; (8010380 <__lshift+0xd0>)
 80102de:	4829      	ldr	r0, [pc, #164]	; (8010384 <__lshift+0xd4>)
 80102e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80102e4:	f001 fe9c 	bl	8012020 <__assert_func>
 80102e8:	3101      	adds	r1, #1
 80102ea:	005b      	lsls	r3, r3, #1
 80102ec:	e7ee      	b.n	80102cc <__lshift+0x1c>
 80102ee:	2300      	movs	r3, #0
 80102f0:	f100 0114 	add.w	r1, r0, #20
 80102f4:	f100 0210 	add.w	r2, r0, #16
 80102f8:	4618      	mov	r0, r3
 80102fa:	4553      	cmp	r3, sl
 80102fc:	db33      	blt.n	8010366 <__lshift+0xb6>
 80102fe:	6920      	ldr	r0, [r4, #16]
 8010300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010304:	f104 0314 	add.w	r3, r4, #20
 8010308:	f019 091f 	ands.w	r9, r9, #31
 801030c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010314:	d02b      	beq.n	801036e <__lshift+0xbe>
 8010316:	f1c9 0e20 	rsb	lr, r9, #32
 801031a:	468a      	mov	sl, r1
 801031c:	2200      	movs	r2, #0
 801031e:	6818      	ldr	r0, [r3, #0]
 8010320:	fa00 f009 	lsl.w	r0, r0, r9
 8010324:	4310      	orrs	r0, r2
 8010326:	f84a 0b04 	str.w	r0, [sl], #4
 801032a:	f853 2b04 	ldr.w	r2, [r3], #4
 801032e:	459c      	cmp	ip, r3
 8010330:	fa22 f20e 	lsr.w	r2, r2, lr
 8010334:	d8f3      	bhi.n	801031e <__lshift+0x6e>
 8010336:	ebac 0304 	sub.w	r3, ip, r4
 801033a:	3b15      	subs	r3, #21
 801033c:	f023 0303 	bic.w	r3, r3, #3
 8010340:	3304      	adds	r3, #4
 8010342:	f104 0015 	add.w	r0, r4, #21
 8010346:	4584      	cmp	ip, r0
 8010348:	bf38      	it	cc
 801034a:	2304      	movcc	r3, #4
 801034c:	50ca      	str	r2, [r1, r3]
 801034e:	b10a      	cbz	r2, 8010354 <__lshift+0xa4>
 8010350:	f108 0602 	add.w	r6, r8, #2
 8010354:	3e01      	subs	r6, #1
 8010356:	4638      	mov	r0, r7
 8010358:	612e      	str	r6, [r5, #16]
 801035a:	4621      	mov	r1, r4
 801035c:	f7ff fd8e 	bl	800fe7c <_Bfree>
 8010360:	4628      	mov	r0, r5
 8010362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010366:	f842 0f04 	str.w	r0, [r2, #4]!
 801036a:	3301      	adds	r3, #1
 801036c:	e7c5      	b.n	80102fa <__lshift+0x4a>
 801036e:	3904      	subs	r1, #4
 8010370:	f853 2b04 	ldr.w	r2, [r3], #4
 8010374:	f841 2f04 	str.w	r2, [r1, #4]!
 8010378:	459c      	cmp	ip, r3
 801037a:	d8f9      	bhi.n	8010370 <__lshift+0xc0>
 801037c:	e7ea      	b.n	8010354 <__lshift+0xa4>
 801037e:	bf00      	nop
 8010380:	08014163 	.word	0x08014163
 8010384:	08014174 	.word	0x08014174

08010388 <__mcmp>:
 8010388:	b530      	push	{r4, r5, lr}
 801038a:	6902      	ldr	r2, [r0, #16]
 801038c:	690c      	ldr	r4, [r1, #16]
 801038e:	1b12      	subs	r2, r2, r4
 8010390:	d10e      	bne.n	80103b0 <__mcmp+0x28>
 8010392:	f100 0314 	add.w	r3, r0, #20
 8010396:	3114      	adds	r1, #20
 8010398:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801039c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80103a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80103a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80103a8:	42a5      	cmp	r5, r4
 80103aa:	d003      	beq.n	80103b4 <__mcmp+0x2c>
 80103ac:	d305      	bcc.n	80103ba <__mcmp+0x32>
 80103ae:	2201      	movs	r2, #1
 80103b0:	4610      	mov	r0, r2
 80103b2:	bd30      	pop	{r4, r5, pc}
 80103b4:	4283      	cmp	r3, r0
 80103b6:	d3f3      	bcc.n	80103a0 <__mcmp+0x18>
 80103b8:	e7fa      	b.n	80103b0 <__mcmp+0x28>
 80103ba:	f04f 32ff 	mov.w	r2, #4294967295
 80103be:	e7f7      	b.n	80103b0 <__mcmp+0x28>

080103c0 <__mdiff>:
 80103c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	460c      	mov	r4, r1
 80103c6:	4606      	mov	r6, r0
 80103c8:	4611      	mov	r1, r2
 80103ca:	4620      	mov	r0, r4
 80103cc:	4690      	mov	r8, r2
 80103ce:	f7ff ffdb 	bl	8010388 <__mcmp>
 80103d2:	1e05      	subs	r5, r0, #0
 80103d4:	d110      	bne.n	80103f8 <__mdiff+0x38>
 80103d6:	4629      	mov	r1, r5
 80103d8:	4630      	mov	r0, r6
 80103da:	f7ff fd0f 	bl	800fdfc <_Balloc>
 80103de:	b930      	cbnz	r0, 80103ee <__mdiff+0x2e>
 80103e0:	4b3a      	ldr	r3, [pc, #232]	; (80104cc <__mdiff+0x10c>)
 80103e2:	4602      	mov	r2, r0
 80103e4:	f240 2137 	movw	r1, #567	; 0x237
 80103e8:	4839      	ldr	r0, [pc, #228]	; (80104d0 <__mdiff+0x110>)
 80103ea:	f001 fe19 	bl	8012020 <__assert_func>
 80103ee:	2301      	movs	r3, #1
 80103f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f8:	bfa4      	itt	ge
 80103fa:	4643      	movge	r3, r8
 80103fc:	46a0      	movge	r8, r4
 80103fe:	4630      	mov	r0, r6
 8010400:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010404:	bfa6      	itte	ge
 8010406:	461c      	movge	r4, r3
 8010408:	2500      	movge	r5, #0
 801040a:	2501      	movlt	r5, #1
 801040c:	f7ff fcf6 	bl	800fdfc <_Balloc>
 8010410:	b920      	cbnz	r0, 801041c <__mdiff+0x5c>
 8010412:	4b2e      	ldr	r3, [pc, #184]	; (80104cc <__mdiff+0x10c>)
 8010414:	4602      	mov	r2, r0
 8010416:	f240 2145 	movw	r1, #581	; 0x245
 801041a:	e7e5      	b.n	80103e8 <__mdiff+0x28>
 801041c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010420:	6926      	ldr	r6, [r4, #16]
 8010422:	60c5      	str	r5, [r0, #12]
 8010424:	f104 0914 	add.w	r9, r4, #20
 8010428:	f108 0514 	add.w	r5, r8, #20
 801042c:	f100 0e14 	add.w	lr, r0, #20
 8010430:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010434:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010438:	f108 0210 	add.w	r2, r8, #16
 801043c:	46f2      	mov	sl, lr
 801043e:	2100      	movs	r1, #0
 8010440:	f859 3b04 	ldr.w	r3, [r9], #4
 8010444:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010448:	fa11 f88b 	uxtah	r8, r1, fp
 801044c:	b299      	uxth	r1, r3
 801044e:	0c1b      	lsrs	r3, r3, #16
 8010450:	eba8 0801 	sub.w	r8, r8, r1
 8010454:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010458:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801045c:	fa1f f888 	uxth.w	r8, r8
 8010460:	1419      	asrs	r1, r3, #16
 8010462:	454e      	cmp	r6, r9
 8010464:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010468:	f84a 3b04 	str.w	r3, [sl], #4
 801046c:	d8e8      	bhi.n	8010440 <__mdiff+0x80>
 801046e:	1b33      	subs	r3, r6, r4
 8010470:	3b15      	subs	r3, #21
 8010472:	f023 0303 	bic.w	r3, r3, #3
 8010476:	3304      	adds	r3, #4
 8010478:	3415      	adds	r4, #21
 801047a:	42a6      	cmp	r6, r4
 801047c:	bf38      	it	cc
 801047e:	2304      	movcc	r3, #4
 8010480:	441d      	add	r5, r3
 8010482:	4473      	add	r3, lr
 8010484:	469e      	mov	lr, r3
 8010486:	462e      	mov	r6, r5
 8010488:	4566      	cmp	r6, ip
 801048a:	d30e      	bcc.n	80104aa <__mdiff+0xea>
 801048c:	f10c 0203 	add.w	r2, ip, #3
 8010490:	1b52      	subs	r2, r2, r5
 8010492:	f022 0203 	bic.w	r2, r2, #3
 8010496:	3d03      	subs	r5, #3
 8010498:	45ac      	cmp	ip, r5
 801049a:	bf38      	it	cc
 801049c:	2200      	movcc	r2, #0
 801049e:	4413      	add	r3, r2
 80104a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80104a4:	b17a      	cbz	r2, 80104c6 <__mdiff+0x106>
 80104a6:	6107      	str	r7, [r0, #16]
 80104a8:	e7a4      	b.n	80103f4 <__mdiff+0x34>
 80104aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80104ae:	fa11 f288 	uxtah	r2, r1, r8
 80104b2:	1414      	asrs	r4, r2, #16
 80104b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80104b8:	b292      	uxth	r2, r2
 80104ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80104be:	f84e 2b04 	str.w	r2, [lr], #4
 80104c2:	1421      	asrs	r1, r4, #16
 80104c4:	e7e0      	b.n	8010488 <__mdiff+0xc8>
 80104c6:	3f01      	subs	r7, #1
 80104c8:	e7ea      	b.n	80104a0 <__mdiff+0xe0>
 80104ca:	bf00      	nop
 80104cc:	08014163 	.word	0x08014163
 80104d0:	08014174 	.word	0x08014174

080104d4 <__ulp>:
 80104d4:	b082      	sub	sp, #8
 80104d6:	ed8d 0b00 	vstr	d0, [sp]
 80104da:	9a01      	ldr	r2, [sp, #4]
 80104dc:	4b0f      	ldr	r3, [pc, #60]	; (801051c <__ulp+0x48>)
 80104de:	4013      	ands	r3, r2
 80104e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	dc08      	bgt.n	80104fa <__ulp+0x26>
 80104e8:	425b      	negs	r3, r3
 80104ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80104ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104f2:	da04      	bge.n	80104fe <__ulp+0x2a>
 80104f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80104f8:	4113      	asrs	r3, r2
 80104fa:	2200      	movs	r2, #0
 80104fc:	e008      	b.n	8010510 <__ulp+0x3c>
 80104fe:	f1a2 0314 	sub.w	r3, r2, #20
 8010502:	2b1e      	cmp	r3, #30
 8010504:	bfda      	itte	le
 8010506:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801050a:	40da      	lsrle	r2, r3
 801050c:	2201      	movgt	r2, #1
 801050e:	2300      	movs	r3, #0
 8010510:	4619      	mov	r1, r3
 8010512:	4610      	mov	r0, r2
 8010514:	ec41 0b10 	vmov	d0, r0, r1
 8010518:	b002      	add	sp, #8
 801051a:	4770      	bx	lr
 801051c:	7ff00000 	.word	0x7ff00000

08010520 <__b2d>:
 8010520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010524:	6906      	ldr	r6, [r0, #16]
 8010526:	f100 0814 	add.w	r8, r0, #20
 801052a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801052e:	1f37      	subs	r7, r6, #4
 8010530:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010534:	4610      	mov	r0, r2
 8010536:	f7ff fd53 	bl	800ffe0 <__hi0bits>
 801053a:	f1c0 0320 	rsb	r3, r0, #32
 801053e:	280a      	cmp	r0, #10
 8010540:	600b      	str	r3, [r1, #0]
 8010542:	491b      	ldr	r1, [pc, #108]	; (80105b0 <__b2d+0x90>)
 8010544:	dc15      	bgt.n	8010572 <__b2d+0x52>
 8010546:	f1c0 0c0b 	rsb	ip, r0, #11
 801054a:	fa22 f30c 	lsr.w	r3, r2, ip
 801054e:	45b8      	cmp	r8, r7
 8010550:	ea43 0501 	orr.w	r5, r3, r1
 8010554:	bf34      	ite	cc
 8010556:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801055a:	2300      	movcs	r3, #0
 801055c:	3015      	adds	r0, #21
 801055e:	fa02 f000 	lsl.w	r0, r2, r0
 8010562:	fa23 f30c 	lsr.w	r3, r3, ip
 8010566:	4303      	orrs	r3, r0
 8010568:	461c      	mov	r4, r3
 801056a:	ec45 4b10 	vmov	d0, r4, r5
 801056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010572:	45b8      	cmp	r8, r7
 8010574:	bf3a      	itte	cc
 8010576:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801057a:	f1a6 0708 	subcc.w	r7, r6, #8
 801057e:	2300      	movcs	r3, #0
 8010580:	380b      	subs	r0, #11
 8010582:	d012      	beq.n	80105aa <__b2d+0x8a>
 8010584:	f1c0 0120 	rsb	r1, r0, #32
 8010588:	fa23 f401 	lsr.w	r4, r3, r1
 801058c:	4082      	lsls	r2, r0
 801058e:	4322      	orrs	r2, r4
 8010590:	4547      	cmp	r7, r8
 8010592:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010596:	bf8c      	ite	hi
 8010598:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801059c:	2200      	movls	r2, #0
 801059e:	4083      	lsls	r3, r0
 80105a0:	40ca      	lsrs	r2, r1
 80105a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80105a6:	4313      	orrs	r3, r2
 80105a8:	e7de      	b.n	8010568 <__b2d+0x48>
 80105aa:	ea42 0501 	orr.w	r5, r2, r1
 80105ae:	e7db      	b.n	8010568 <__b2d+0x48>
 80105b0:	3ff00000 	.word	0x3ff00000

080105b4 <__d2b>:
 80105b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105b8:	460f      	mov	r7, r1
 80105ba:	2101      	movs	r1, #1
 80105bc:	ec59 8b10 	vmov	r8, r9, d0
 80105c0:	4616      	mov	r6, r2
 80105c2:	f7ff fc1b 	bl	800fdfc <_Balloc>
 80105c6:	4604      	mov	r4, r0
 80105c8:	b930      	cbnz	r0, 80105d8 <__d2b+0x24>
 80105ca:	4602      	mov	r2, r0
 80105cc:	4b24      	ldr	r3, [pc, #144]	; (8010660 <__d2b+0xac>)
 80105ce:	4825      	ldr	r0, [pc, #148]	; (8010664 <__d2b+0xb0>)
 80105d0:	f240 310f 	movw	r1, #783	; 0x30f
 80105d4:	f001 fd24 	bl	8012020 <__assert_func>
 80105d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80105dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105e0:	bb2d      	cbnz	r5, 801062e <__d2b+0x7a>
 80105e2:	9301      	str	r3, [sp, #4]
 80105e4:	f1b8 0300 	subs.w	r3, r8, #0
 80105e8:	d026      	beq.n	8010638 <__d2b+0x84>
 80105ea:	4668      	mov	r0, sp
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	f7ff fd17 	bl	8010020 <__lo0bits>
 80105f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105f6:	b1e8      	cbz	r0, 8010634 <__d2b+0x80>
 80105f8:	f1c0 0320 	rsb	r3, r0, #32
 80105fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010600:	430b      	orrs	r3, r1
 8010602:	40c2      	lsrs	r2, r0
 8010604:	6163      	str	r3, [r4, #20]
 8010606:	9201      	str	r2, [sp, #4]
 8010608:	9b01      	ldr	r3, [sp, #4]
 801060a:	61a3      	str	r3, [r4, #24]
 801060c:	2b00      	cmp	r3, #0
 801060e:	bf14      	ite	ne
 8010610:	2202      	movne	r2, #2
 8010612:	2201      	moveq	r2, #1
 8010614:	6122      	str	r2, [r4, #16]
 8010616:	b1bd      	cbz	r5, 8010648 <__d2b+0x94>
 8010618:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801061c:	4405      	add	r5, r0
 801061e:	603d      	str	r5, [r7, #0]
 8010620:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010624:	6030      	str	r0, [r6, #0]
 8010626:	4620      	mov	r0, r4
 8010628:	b003      	add	sp, #12
 801062a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801062e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010632:	e7d6      	b.n	80105e2 <__d2b+0x2e>
 8010634:	6161      	str	r1, [r4, #20]
 8010636:	e7e7      	b.n	8010608 <__d2b+0x54>
 8010638:	a801      	add	r0, sp, #4
 801063a:	f7ff fcf1 	bl	8010020 <__lo0bits>
 801063e:	9b01      	ldr	r3, [sp, #4]
 8010640:	6163      	str	r3, [r4, #20]
 8010642:	3020      	adds	r0, #32
 8010644:	2201      	movs	r2, #1
 8010646:	e7e5      	b.n	8010614 <__d2b+0x60>
 8010648:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801064c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010650:	6038      	str	r0, [r7, #0]
 8010652:	6918      	ldr	r0, [r3, #16]
 8010654:	f7ff fcc4 	bl	800ffe0 <__hi0bits>
 8010658:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801065c:	e7e2      	b.n	8010624 <__d2b+0x70>
 801065e:	bf00      	nop
 8010660:	08014163 	.word	0x08014163
 8010664:	08014174 	.word	0x08014174

08010668 <__ratio>:
 8010668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	4688      	mov	r8, r1
 801066e:	4669      	mov	r1, sp
 8010670:	4681      	mov	r9, r0
 8010672:	f7ff ff55 	bl	8010520 <__b2d>
 8010676:	a901      	add	r1, sp, #4
 8010678:	4640      	mov	r0, r8
 801067a:	ec55 4b10 	vmov	r4, r5, d0
 801067e:	f7ff ff4f 	bl	8010520 <__b2d>
 8010682:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010686:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801068a:	eba3 0c02 	sub.w	ip, r3, r2
 801068e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010692:	1a9b      	subs	r3, r3, r2
 8010694:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010698:	ec51 0b10 	vmov	r0, r1, d0
 801069c:	2b00      	cmp	r3, #0
 801069e:	bfd6      	itet	le
 80106a0:	460a      	movle	r2, r1
 80106a2:	462a      	movgt	r2, r5
 80106a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80106a8:	468b      	mov	fp, r1
 80106aa:	462f      	mov	r7, r5
 80106ac:	bfd4      	ite	le
 80106ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80106b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80106b6:	4620      	mov	r0, r4
 80106b8:	ee10 2a10 	vmov	r2, s0
 80106bc:	465b      	mov	r3, fp
 80106be:	4639      	mov	r1, r7
 80106c0:	f7f0 f8e4 	bl	800088c <__aeabi_ddiv>
 80106c4:	ec41 0b10 	vmov	d0, r0, r1
 80106c8:	b003      	add	sp, #12
 80106ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106ce <__copybits>:
 80106ce:	3901      	subs	r1, #1
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	1149      	asrs	r1, r1, #5
 80106d4:	6914      	ldr	r4, [r2, #16]
 80106d6:	3101      	adds	r1, #1
 80106d8:	f102 0314 	add.w	r3, r2, #20
 80106dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80106e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106e4:	1f05      	subs	r5, r0, #4
 80106e6:	42a3      	cmp	r3, r4
 80106e8:	d30c      	bcc.n	8010704 <__copybits+0x36>
 80106ea:	1aa3      	subs	r3, r4, r2
 80106ec:	3b11      	subs	r3, #17
 80106ee:	f023 0303 	bic.w	r3, r3, #3
 80106f2:	3211      	adds	r2, #17
 80106f4:	42a2      	cmp	r2, r4
 80106f6:	bf88      	it	hi
 80106f8:	2300      	movhi	r3, #0
 80106fa:	4418      	add	r0, r3
 80106fc:	2300      	movs	r3, #0
 80106fe:	4288      	cmp	r0, r1
 8010700:	d305      	bcc.n	801070e <__copybits+0x40>
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	f853 6b04 	ldr.w	r6, [r3], #4
 8010708:	f845 6f04 	str.w	r6, [r5, #4]!
 801070c:	e7eb      	b.n	80106e6 <__copybits+0x18>
 801070e:	f840 3b04 	str.w	r3, [r0], #4
 8010712:	e7f4      	b.n	80106fe <__copybits+0x30>

08010714 <__any_on>:
 8010714:	f100 0214 	add.w	r2, r0, #20
 8010718:	6900      	ldr	r0, [r0, #16]
 801071a:	114b      	asrs	r3, r1, #5
 801071c:	4298      	cmp	r0, r3
 801071e:	b510      	push	{r4, lr}
 8010720:	db11      	blt.n	8010746 <__any_on+0x32>
 8010722:	dd0a      	ble.n	801073a <__any_on+0x26>
 8010724:	f011 011f 	ands.w	r1, r1, #31
 8010728:	d007      	beq.n	801073a <__any_on+0x26>
 801072a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801072e:	fa24 f001 	lsr.w	r0, r4, r1
 8010732:	fa00 f101 	lsl.w	r1, r0, r1
 8010736:	428c      	cmp	r4, r1
 8010738:	d10b      	bne.n	8010752 <__any_on+0x3e>
 801073a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801073e:	4293      	cmp	r3, r2
 8010740:	d803      	bhi.n	801074a <__any_on+0x36>
 8010742:	2000      	movs	r0, #0
 8010744:	bd10      	pop	{r4, pc}
 8010746:	4603      	mov	r3, r0
 8010748:	e7f7      	b.n	801073a <__any_on+0x26>
 801074a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801074e:	2900      	cmp	r1, #0
 8010750:	d0f5      	beq.n	801073e <__any_on+0x2a>
 8010752:	2001      	movs	r0, #1
 8010754:	e7f6      	b.n	8010744 <__any_on+0x30>

08010756 <sulp>:
 8010756:	b570      	push	{r4, r5, r6, lr}
 8010758:	4604      	mov	r4, r0
 801075a:	460d      	mov	r5, r1
 801075c:	ec45 4b10 	vmov	d0, r4, r5
 8010760:	4616      	mov	r6, r2
 8010762:	f7ff feb7 	bl	80104d4 <__ulp>
 8010766:	ec51 0b10 	vmov	r0, r1, d0
 801076a:	b17e      	cbz	r6, 801078c <sulp+0x36>
 801076c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010770:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010774:	2b00      	cmp	r3, #0
 8010776:	dd09      	ble.n	801078c <sulp+0x36>
 8010778:	051b      	lsls	r3, r3, #20
 801077a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801077e:	2400      	movs	r4, #0
 8010780:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010784:	4622      	mov	r2, r4
 8010786:	462b      	mov	r3, r5
 8010788:	f7ef ff56 	bl	8000638 <__aeabi_dmul>
 801078c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010790 <_strtod_l>:
 8010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010794:	ed2d 8b02 	vpush	{d8}
 8010798:	b09b      	sub	sp, #108	; 0x6c
 801079a:	4604      	mov	r4, r0
 801079c:	9213      	str	r2, [sp, #76]	; 0x4c
 801079e:	2200      	movs	r2, #0
 80107a0:	9216      	str	r2, [sp, #88]	; 0x58
 80107a2:	460d      	mov	r5, r1
 80107a4:	f04f 0800 	mov.w	r8, #0
 80107a8:	f04f 0900 	mov.w	r9, #0
 80107ac:	460a      	mov	r2, r1
 80107ae:	9215      	str	r2, [sp, #84]	; 0x54
 80107b0:	7811      	ldrb	r1, [r2, #0]
 80107b2:	292b      	cmp	r1, #43	; 0x2b
 80107b4:	d04c      	beq.n	8010850 <_strtod_l+0xc0>
 80107b6:	d83a      	bhi.n	801082e <_strtod_l+0x9e>
 80107b8:	290d      	cmp	r1, #13
 80107ba:	d834      	bhi.n	8010826 <_strtod_l+0x96>
 80107bc:	2908      	cmp	r1, #8
 80107be:	d834      	bhi.n	801082a <_strtod_l+0x9a>
 80107c0:	2900      	cmp	r1, #0
 80107c2:	d03d      	beq.n	8010840 <_strtod_l+0xb0>
 80107c4:	2200      	movs	r2, #0
 80107c6:	920a      	str	r2, [sp, #40]	; 0x28
 80107c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80107ca:	7832      	ldrb	r2, [r6, #0]
 80107cc:	2a30      	cmp	r2, #48	; 0x30
 80107ce:	f040 80b4 	bne.w	801093a <_strtod_l+0x1aa>
 80107d2:	7872      	ldrb	r2, [r6, #1]
 80107d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80107d8:	2a58      	cmp	r2, #88	; 0x58
 80107da:	d170      	bne.n	80108be <_strtod_l+0x12e>
 80107dc:	9302      	str	r3, [sp, #8]
 80107de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107e0:	9301      	str	r3, [sp, #4]
 80107e2:	ab16      	add	r3, sp, #88	; 0x58
 80107e4:	9300      	str	r3, [sp, #0]
 80107e6:	4a8e      	ldr	r2, [pc, #568]	; (8010a20 <_strtod_l+0x290>)
 80107e8:	ab17      	add	r3, sp, #92	; 0x5c
 80107ea:	a915      	add	r1, sp, #84	; 0x54
 80107ec:	4620      	mov	r0, r4
 80107ee:	f001 fc9d 	bl	801212c <__gethex>
 80107f2:	f010 070f 	ands.w	r7, r0, #15
 80107f6:	4605      	mov	r5, r0
 80107f8:	d005      	beq.n	8010806 <_strtod_l+0x76>
 80107fa:	2f06      	cmp	r7, #6
 80107fc:	d12a      	bne.n	8010854 <_strtod_l+0xc4>
 80107fe:	3601      	adds	r6, #1
 8010800:	2300      	movs	r3, #0
 8010802:	9615      	str	r6, [sp, #84]	; 0x54
 8010804:	930a      	str	r3, [sp, #40]	; 0x28
 8010806:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010808:	2b00      	cmp	r3, #0
 801080a:	f040 857f 	bne.w	801130c <_strtod_l+0xb7c>
 801080e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010810:	b1db      	cbz	r3, 801084a <_strtod_l+0xba>
 8010812:	4642      	mov	r2, r8
 8010814:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010818:	ec43 2b10 	vmov	d0, r2, r3
 801081c:	b01b      	add	sp, #108	; 0x6c
 801081e:	ecbd 8b02 	vpop	{d8}
 8010822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010826:	2920      	cmp	r1, #32
 8010828:	d1cc      	bne.n	80107c4 <_strtod_l+0x34>
 801082a:	3201      	adds	r2, #1
 801082c:	e7bf      	b.n	80107ae <_strtod_l+0x1e>
 801082e:	292d      	cmp	r1, #45	; 0x2d
 8010830:	d1c8      	bne.n	80107c4 <_strtod_l+0x34>
 8010832:	2101      	movs	r1, #1
 8010834:	910a      	str	r1, [sp, #40]	; 0x28
 8010836:	1c51      	adds	r1, r2, #1
 8010838:	9115      	str	r1, [sp, #84]	; 0x54
 801083a:	7852      	ldrb	r2, [r2, #1]
 801083c:	2a00      	cmp	r2, #0
 801083e:	d1c3      	bne.n	80107c8 <_strtod_l+0x38>
 8010840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010842:	9515      	str	r5, [sp, #84]	; 0x54
 8010844:	2b00      	cmp	r3, #0
 8010846:	f040 855f 	bne.w	8011308 <_strtod_l+0xb78>
 801084a:	4642      	mov	r2, r8
 801084c:	464b      	mov	r3, r9
 801084e:	e7e3      	b.n	8010818 <_strtod_l+0x88>
 8010850:	2100      	movs	r1, #0
 8010852:	e7ef      	b.n	8010834 <_strtod_l+0xa4>
 8010854:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010856:	b13a      	cbz	r2, 8010868 <_strtod_l+0xd8>
 8010858:	2135      	movs	r1, #53	; 0x35
 801085a:	a818      	add	r0, sp, #96	; 0x60
 801085c:	f7ff ff37 	bl	80106ce <__copybits>
 8010860:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010862:	4620      	mov	r0, r4
 8010864:	f7ff fb0a 	bl	800fe7c <_Bfree>
 8010868:	3f01      	subs	r7, #1
 801086a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801086c:	2f04      	cmp	r7, #4
 801086e:	d806      	bhi.n	801087e <_strtod_l+0xee>
 8010870:	e8df f007 	tbb	[pc, r7]
 8010874:	201d0314 	.word	0x201d0314
 8010878:	14          	.byte	0x14
 8010879:	00          	.byte	0x00
 801087a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801087e:	05e9      	lsls	r1, r5, #23
 8010880:	bf48      	it	mi
 8010882:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010886:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801088a:	0d1b      	lsrs	r3, r3, #20
 801088c:	051b      	lsls	r3, r3, #20
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1b9      	bne.n	8010806 <_strtod_l+0x76>
 8010892:	f7fe fba5 	bl	800efe0 <__errno>
 8010896:	2322      	movs	r3, #34	; 0x22
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	e7b4      	b.n	8010806 <_strtod_l+0x76>
 801089c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80108a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80108a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80108a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80108ac:	e7e7      	b.n	801087e <_strtod_l+0xee>
 80108ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010a28 <_strtod_l+0x298>
 80108b2:	e7e4      	b.n	801087e <_strtod_l+0xee>
 80108b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80108b8:	f04f 38ff 	mov.w	r8, #4294967295
 80108bc:	e7df      	b.n	801087e <_strtod_l+0xee>
 80108be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	9215      	str	r2, [sp, #84]	; 0x54
 80108c4:	785b      	ldrb	r3, [r3, #1]
 80108c6:	2b30      	cmp	r3, #48	; 0x30
 80108c8:	d0f9      	beq.n	80108be <_strtod_l+0x12e>
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d09b      	beq.n	8010806 <_strtod_l+0x76>
 80108ce:	2301      	movs	r3, #1
 80108d0:	f04f 0a00 	mov.w	sl, #0
 80108d4:	9304      	str	r3, [sp, #16]
 80108d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80108da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80108de:	46d3      	mov	fp, sl
 80108e0:	220a      	movs	r2, #10
 80108e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80108e4:	7806      	ldrb	r6, [r0, #0]
 80108e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80108ea:	b2d9      	uxtb	r1, r3
 80108ec:	2909      	cmp	r1, #9
 80108ee:	d926      	bls.n	801093e <_strtod_l+0x1ae>
 80108f0:	494c      	ldr	r1, [pc, #304]	; (8010a24 <_strtod_l+0x294>)
 80108f2:	2201      	movs	r2, #1
 80108f4:	f001 fb79 	bl	8011fea <strncmp>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	d030      	beq.n	801095e <_strtod_l+0x1ce>
 80108fc:	2000      	movs	r0, #0
 80108fe:	4632      	mov	r2, r6
 8010900:	9005      	str	r0, [sp, #20]
 8010902:	465e      	mov	r6, fp
 8010904:	4603      	mov	r3, r0
 8010906:	2a65      	cmp	r2, #101	; 0x65
 8010908:	d001      	beq.n	801090e <_strtod_l+0x17e>
 801090a:	2a45      	cmp	r2, #69	; 0x45
 801090c:	d113      	bne.n	8010936 <_strtod_l+0x1a6>
 801090e:	b91e      	cbnz	r6, 8010918 <_strtod_l+0x188>
 8010910:	9a04      	ldr	r2, [sp, #16]
 8010912:	4302      	orrs	r2, r0
 8010914:	d094      	beq.n	8010840 <_strtod_l+0xb0>
 8010916:	2600      	movs	r6, #0
 8010918:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801091a:	1c6a      	adds	r2, r5, #1
 801091c:	9215      	str	r2, [sp, #84]	; 0x54
 801091e:	786a      	ldrb	r2, [r5, #1]
 8010920:	2a2b      	cmp	r2, #43	; 0x2b
 8010922:	d074      	beq.n	8010a0e <_strtod_l+0x27e>
 8010924:	2a2d      	cmp	r2, #45	; 0x2d
 8010926:	d078      	beq.n	8010a1a <_strtod_l+0x28a>
 8010928:	f04f 0c00 	mov.w	ip, #0
 801092c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010930:	2909      	cmp	r1, #9
 8010932:	d97f      	bls.n	8010a34 <_strtod_l+0x2a4>
 8010934:	9515      	str	r5, [sp, #84]	; 0x54
 8010936:	2700      	movs	r7, #0
 8010938:	e09e      	b.n	8010a78 <_strtod_l+0x2e8>
 801093a:	2300      	movs	r3, #0
 801093c:	e7c8      	b.n	80108d0 <_strtod_l+0x140>
 801093e:	f1bb 0f08 	cmp.w	fp, #8
 8010942:	bfd8      	it	le
 8010944:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010946:	f100 0001 	add.w	r0, r0, #1
 801094a:	bfda      	itte	le
 801094c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010950:	9309      	strle	r3, [sp, #36]	; 0x24
 8010952:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010956:	f10b 0b01 	add.w	fp, fp, #1
 801095a:	9015      	str	r0, [sp, #84]	; 0x54
 801095c:	e7c1      	b.n	80108e2 <_strtod_l+0x152>
 801095e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	9215      	str	r2, [sp, #84]	; 0x54
 8010964:	785a      	ldrb	r2, [r3, #1]
 8010966:	f1bb 0f00 	cmp.w	fp, #0
 801096a:	d037      	beq.n	80109dc <_strtod_l+0x24c>
 801096c:	9005      	str	r0, [sp, #20]
 801096e:	465e      	mov	r6, fp
 8010970:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010974:	2b09      	cmp	r3, #9
 8010976:	d912      	bls.n	801099e <_strtod_l+0x20e>
 8010978:	2301      	movs	r3, #1
 801097a:	e7c4      	b.n	8010906 <_strtod_l+0x176>
 801097c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	9215      	str	r2, [sp, #84]	; 0x54
 8010982:	785a      	ldrb	r2, [r3, #1]
 8010984:	3001      	adds	r0, #1
 8010986:	2a30      	cmp	r2, #48	; 0x30
 8010988:	d0f8      	beq.n	801097c <_strtod_l+0x1ec>
 801098a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801098e:	2b08      	cmp	r3, #8
 8010990:	f200 84c1 	bhi.w	8011316 <_strtod_l+0xb86>
 8010994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010996:	9005      	str	r0, [sp, #20]
 8010998:	2000      	movs	r0, #0
 801099a:	930b      	str	r3, [sp, #44]	; 0x2c
 801099c:	4606      	mov	r6, r0
 801099e:	3a30      	subs	r2, #48	; 0x30
 80109a0:	f100 0301 	add.w	r3, r0, #1
 80109a4:	d014      	beq.n	80109d0 <_strtod_l+0x240>
 80109a6:	9905      	ldr	r1, [sp, #20]
 80109a8:	4419      	add	r1, r3
 80109aa:	9105      	str	r1, [sp, #20]
 80109ac:	4633      	mov	r3, r6
 80109ae:	eb00 0c06 	add.w	ip, r0, r6
 80109b2:	210a      	movs	r1, #10
 80109b4:	4563      	cmp	r3, ip
 80109b6:	d113      	bne.n	80109e0 <_strtod_l+0x250>
 80109b8:	1833      	adds	r3, r6, r0
 80109ba:	2b08      	cmp	r3, #8
 80109bc:	f106 0601 	add.w	r6, r6, #1
 80109c0:	4406      	add	r6, r0
 80109c2:	dc1a      	bgt.n	80109fa <_strtod_l+0x26a>
 80109c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109c6:	230a      	movs	r3, #10
 80109c8:	fb03 2301 	mla	r3, r3, r1, r2
 80109cc:	9309      	str	r3, [sp, #36]	; 0x24
 80109ce:	2300      	movs	r3, #0
 80109d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109d2:	1c51      	adds	r1, r2, #1
 80109d4:	9115      	str	r1, [sp, #84]	; 0x54
 80109d6:	7852      	ldrb	r2, [r2, #1]
 80109d8:	4618      	mov	r0, r3
 80109da:	e7c9      	b.n	8010970 <_strtod_l+0x1e0>
 80109dc:	4658      	mov	r0, fp
 80109de:	e7d2      	b.n	8010986 <_strtod_l+0x1f6>
 80109e0:	2b08      	cmp	r3, #8
 80109e2:	f103 0301 	add.w	r3, r3, #1
 80109e6:	dc03      	bgt.n	80109f0 <_strtod_l+0x260>
 80109e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109ea:	434f      	muls	r7, r1
 80109ec:	9709      	str	r7, [sp, #36]	; 0x24
 80109ee:	e7e1      	b.n	80109b4 <_strtod_l+0x224>
 80109f0:	2b10      	cmp	r3, #16
 80109f2:	bfd8      	it	le
 80109f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80109f8:	e7dc      	b.n	80109b4 <_strtod_l+0x224>
 80109fa:	2e10      	cmp	r6, #16
 80109fc:	bfdc      	itt	le
 80109fe:	230a      	movle	r3, #10
 8010a00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010a04:	e7e3      	b.n	80109ce <_strtod_l+0x23e>
 8010a06:	2300      	movs	r3, #0
 8010a08:	9305      	str	r3, [sp, #20]
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e780      	b.n	8010910 <_strtod_l+0x180>
 8010a0e:	f04f 0c00 	mov.w	ip, #0
 8010a12:	1caa      	adds	r2, r5, #2
 8010a14:	9215      	str	r2, [sp, #84]	; 0x54
 8010a16:	78aa      	ldrb	r2, [r5, #2]
 8010a18:	e788      	b.n	801092c <_strtod_l+0x19c>
 8010a1a:	f04f 0c01 	mov.w	ip, #1
 8010a1e:	e7f8      	b.n	8010a12 <_strtod_l+0x282>
 8010a20:	080142d0 	.word	0x080142d0
 8010a24:	080142cc 	.word	0x080142cc
 8010a28:	7ff00000 	.word	0x7ff00000
 8010a2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010a2e:	1c51      	adds	r1, r2, #1
 8010a30:	9115      	str	r1, [sp, #84]	; 0x54
 8010a32:	7852      	ldrb	r2, [r2, #1]
 8010a34:	2a30      	cmp	r2, #48	; 0x30
 8010a36:	d0f9      	beq.n	8010a2c <_strtod_l+0x29c>
 8010a38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010a3c:	2908      	cmp	r1, #8
 8010a3e:	f63f af7a 	bhi.w	8010936 <_strtod_l+0x1a6>
 8010a42:	3a30      	subs	r2, #48	; 0x30
 8010a44:	9208      	str	r2, [sp, #32]
 8010a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010a48:	920c      	str	r2, [sp, #48]	; 0x30
 8010a4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010a4c:	1c57      	adds	r7, r2, #1
 8010a4e:	9715      	str	r7, [sp, #84]	; 0x54
 8010a50:	7852      	ldrb	r2, [r2, #1]
 8010a52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010a56:	f1be 0f09 	cmp.w	lr, #9
 8010a5a:	d938      	bls.n	8010ace <_strtod_l+0x33e>
 8010a5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a5e:	1a7f      	subs	r7, r7, r1
 8010a60:	2f08      	cmp	r7, #8
 8010a62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010a66:	dc03      	bgt.n	8010a70 <_strtod_l+0x2e0>
 8010a68:	9908      	ldr	r1, [sp, #32]
 8010a6a:	428f      	cmp	r7, r1
 8010a6c:	bfa8      	it	ge
 8010a6e:	460f      	movge	r7, r1
 8010a70:	f1bc 0f00 	cmp.w	ip, #0
 8010a74:	d000      	beq.n	8010a78 <_strtod_l+0x2e8>
 8010a76:	427f      	negs	r7, r7
 8010a78:	2e00      	cmp	r6, #0
 8010a7a:	d14f      	bne.n	8010b1c <_strtod_l+0x38c>
 8010a7c:	9904      	ldr	r1, [sp, #16]
 8010a7e:	4301      	orrs	r1, r0
 8010a80:	f47f aec1 	bne.w	8010806 <_strtod_l+0x76>
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f47f aedb 	bne.w	8010840 <_strtod_l+0xb0>
 8010a8a:	2a69      	cmp	r2, #105	; 0x69
 8010a8c:	d029      	beq.n	8010ae2 <_strtod_l+0x352>
 8010a8e:	dc26      	bgt.n	8010ade <_strtod_l+0x34e>
 8010a90:	2a49      	cmp	r2, #73	; 0x49
 8010a92:	d026      	beq.n	8010ae2 <_strtod_l+0x352>
 8010a94:	2a4e      	cmp	r2, #78	; 0x4e
 8010a96:	f47f aed3 	bne.w	8010840 <_strtod_l+0xb0>
 8010a9a:	499b      	ldr	r1, [pc, #620]	; (8010d08 <_strtod_l+0x578>)
 8010a9c:	a815      	add	r0, sp, #84	; 0x54
 8010a9e:	f001 fd85 	bl	80125ac <__match>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	f43f aecc 	beq.w	8010840 <_strtod_l+0xb0>
 8010aa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2b28      	cmp	r3, #40	; 0x28
 8010aae:	d12f      	bne.n	8010b10 <_strtod_l+0x380>
 8010ab0:	4996      	ldr	r1, [pc, #600]	; (8010d0c <_strtod_l+0x57c>)
 8010ab2:	aa18      	add	r2, sp, #96	; 0x60
 8010ab4:	a815      	add	r0, sp, #84	; 0x54
 8010ab6:	f001 fd8d 	bl	80125d4 <__hexnan>
 8010aba:	2805      	cmp	r0, #5
 8010abc:	d128      	bne.n	8010b10 <_strtod_l+0x380>
 8010abe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010ac0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010ac4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010ac8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010acc:	e69b      	b.n	8010806 <_strtod_l+0x76>
 8010ace:	9f08      	ldr	r7, [sp, #32]
 8010ad0:	210a      	movs	r1, #10
 8010ad2:	fb01 2107 	mla	r1, r1, r7, r2
 8010ad6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010ada:	9208      	str	r2, [sp, #32]
 8010adc:	e7b5      	b.n	8010a4a <_strtod_l+0x2ba>
 8010ade:	2a6e      	cmp	r2, #110	; 0x6e
 8010ae0:	e7d9      	b.n	8010a96 <_strtod_l+0x306>
 8010ae2:	498b      	ldr	r1, [pc, #556]	; (8010d10 <_strtod_l+0x580>)
 8010ae4:	a815      	add	r0, sp, #84	; 0x54
 8010ae6:	f001 fd61 	bl	80125ac <__match>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	f43f aea8 	beq.w	8010840 <_strtod_l+0xb0>
 8010af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010af2:	4988      	ldr	r1, [pc, #544]	; (8010d14 <_strtod_l+0x584>)
 8010af4:	3b01      	subs	r3, #1
 8010af6:	a815      	add	r0, sp, #84	; 0x54
 8010af8:	9315      	str	r3, [sp, #84]	; 0x54
 8010afa:	f001 fd57 	bl	80125ac <__match>
 8010afe:	b910      	cbnz	r0, 8010b06 <_strtod_l+0x376>
 8010b00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b02:	3301      	adds	r3, #1
 8010b04:	9315      	str	r3, [sp, #84]	; 0x54
 8010b06:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010d24 <_strtod_l+0x594>
 8010b0a:	f04f 0800 	mov.w	r8, #0
 8010b0e:	e67a      	b.n	8010806 <_strtod_l+0x76>
 8010b10:	4881      	ldr	r0, [pc, #516]	; (8010d18 <_strtod_l+0x588>)
 8010b12:	f001 fa7d 	bl	8012010 <nan>
 8010b16:	ec59 8b10 	vmov	r8, r9, d0
 8010b1a:	e674      	b.n	8010806 <_strtod_l+0x76>
 8010b1c:	9b05      	ldr	r3, [sp, #20]
 8010b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b20:	1afb      	subs	r3, r7, r3
 8010b22:	f1bb 0f00 	cmp.w	fp, #0
 8010b26:	bf08      	it	eq
 8010b28:	46b3      	moveq	fp, r6
 8010b2a:	2e10      	cmp	r6, #16
 8010b2c:	9308      	str	r3, [sp, #32]
 8010b2e:	4635      	mov	r5, r6
 8010b30:	bfa8      	it	ge
 8010b32:	2510      	movge	r5, #16
 8010b34:	f7ef fd06 	bl	8000544 <__aeabi_ui2d>
 8010b38:	2e09      	cmp	r6, #9
 8010b3a:	4680      	mov	r8, r0
 8010b3c:	4689      	mov	r9, r1
 8010b3e:	dd13      	ble.n	8010b68 <_strtod_l+0x3d8>
 8010b40:	4b76      	ldr	r3, [pc, #472]	; (8010d1c <_strtod_l+0x58c>)
 8010b42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010b46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010b4a:	f7ef fd75 	bl	8000638 <__aeabi_dmul>
 8010b4e:	4680      	mov	r8, r0
 8010b50:	4650      	mov	r0, sl
 8010b52:	4689      	mov	r9, r1
 8010b54:	f7ef fcf6 	bl	8000544 <__aeabi_ui2d>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	4640      	mov	r0, r8
 8010b5e:	4649      	mov	r1, r9
 8010b60:	f7ef fbb4 	bl	80002cc <__adddf3>
 8010b64:	4680      	mov	r8, r0
 8010b66:	4689      	mov	r9, r1
 8010b68:	2e0f      	cmp	r6, #15
 8010b6a:	dc38      	bgt.n	8010bde <_strtod_l+0x44e>
 8010b6c:	9b08      	ldr	r3, [sp, #32]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f43f ae49 	beq.w	8010806 <_strtod_l+0x76>
 8010b74:	dd24      	ble.n	8010bc0 <_strtod_l+0x430>
 8010b76:	2b16      	cmp	r3, #22
 8010b78:	dc0b      	bgt.n	8010b92 <_strtod_l+0x402>
 8010b7a:	4968      	ldr	r1, [pc, #416]	; (8010d1c <_strtod_l+0x58c>)
 8010b7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b84:	4642      	mov	r2, r8
 8010b86:	464b      	mov	r3, r9
 8010b88:	f7ef fd56 	bl	8000638 <__aeabi_dmul>
 8010b8c:	4680      	mov	r8, r0
 8010b8e:	4689      	mov	r9, r1
 8010b90:	e639      	b.n	8010806 <_strtod_l+0x76>
 8010b92:	9a08      	ldr	r2, [sp, #32]
 8010b94:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	db20      	blt.n	8010bde <_strtod_l+0x44e>
 8010b9c:	4c5f      	ldr	r4, [pc, #380]	; (8010d1c <_strtod_l+0x58c>)
 8010b9e:	f1c6 060f 	rsb	r6, r6, #15
 8010ba2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010ba6:	4642      	mov	r2, r8
 8010ba8:	464b      	mov	r3, r9
 8010baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bae:	f7ef fd43 	bl	8000638 <__aeabi_dmul>
 8010bb2:	9b08      	ldr	r3, [sp, #32]
 8010bb4:	1b9e      	subs	r6, r3, r6
 8010bb6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010bba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010bbe:	e7e3      	b.n	8010b88 <_strtod_l+0x3f8>
 8010bc0:	9b08      	ldr	r3, [sp, #32]
 8010bc2:	3316      	adds	r3, #22
 8010bc4:	db0b      	blt.n	8010bde <_strtod_l+0x44e>
 8010bc6:	9b05      	ldr	r3, [sp, #20]
 8010bc8:	1bdf      	subs	r7, r3, r7
 8010bca:	4b54      	ldr	r3, [pc, #336]	; (8010d1c <_strtod_l+0x58c>)
 8010bcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bd4:	4640      	mov	r0, r8
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	f7ef fe58 	bl	800088c <__aeabi_ddiv>
 8010bdc:	e7d6      	b.n	8010b8c <_strtod_l+0x3fc>
 8010bde:	9b08      	ldr	r3, [sp, #32]
 8010be0:	1b75      	subs	r5, r6, r5
 8010be2:	441d      	add	r5, r3
 8010be4:	2d00      	cmp	r5, #0
 8010be6:	dd70      	ble.n	8010cca <_strtod_l+0x53a>
 8010be8:	f015 030f 	ands.w	r3, r5, #15
 8010bec:	d00a      	beq.n	8010c04 <_strtod_l+0x474>
 8010bee:	494b      	ldr	r1, [pc, #300]	; (8010d1c <_strtod_l+0x58c>)
 8010bf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010bf4:	4642      	mov	r2, r8
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bfc:	f7ef fd1c 	bl	8000638 <__aeabi_dmul>
 8010c00:	4680      	mov	r8, r0
 8010c02:	4689      	mov	r9, r1
 8010c04:	f035 050f 	bics.w	r5, r5, #15
 8010c08:	d04d      	beq.n	8010ca6 <_strtod_l+0x516>
 8010c0a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010c0e:	dd22      	ble.n	8010c56 <_strtod_l+0x4c6>
 8010c10:	2500      	movs	r5, #0
 8010c12:	46ab      	mov	fp, r5
 8010c14:	9509      	str	r5, [sp, #36]	; 0x24
 8010c16:	9505      	str	r5, [sp, #20]
 8010c18:	2322      	movs	r3, #34	; 0x22
 8010c1a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010d24 <_strtod_l+0x594>
 8010c1e:	6023      	str	r3, [r4, #0]
 8010c20:	f04f 0800 	mov.w	r8, #0
 8010c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f43f aded 	beq.w	8010806 <_strtod_l+0x76>
 8010c2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f7ff f924 	bl	800fe7c <_Bfree>
 8010c34:	9905      	ldr	r1, [sp, #20]
 8010c36:	4620      	mov	r0, r4
 8010c38:	f7ff f920 	bl	800fe7c <_Bfree>
 8010c3c:	4659      	mov	r1, fp
 8010c3e:	4620      	mov	r0, r4
 8010c40:	f7ff f91c 	bl	800fe7c <_Bfree>
 8010c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c46:	4620      	mov	r0, r4
 8010c48:	f7ff f918 	bl	800fe7c <_Bfree>
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f7ff f914 	bl	800fe7c <_Bfree>
 8010c54:	e5d7      	b.n	8010806 <_strtod_l+0x76>
 8010c56:	4b32      	ldr	r3, [pc, #200]	; (8010d20 <_strtod_l+0x590>)
 8010c58:	9304      	str	r3, [sp, #16]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	112d      	asrs	r5, r5, #4
 8010c5e:	4640      	mov	r0, r8
 8010c60:	4649      	mov	r1, r9
 8010c62:	469a      	mov	sl, r3
 8010c64:	2d01      	cmp	r5, #1
 8010c66:	dc21      	bgt.n	8010cac <_strtod_l+0x51c>
 8010c68:	b10b      	cbz	r3, 8010c6e <_strtod_l+0x4de>
 8010c6a:	4680      	mov	r8, r0
 8010c6c:	4689      	mov	r9, r1
 8010c6e:	492c      	ldr	r1, [pc, #176]	; (8010d20 <_strtod_l+0x590>)
 8010c70:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010c74:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010c78:	4642      	mov	r2, r8
 8010c7a:	464b      	mov	r3, r9
 8010c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c80:	f7ef fcda 	bl	8000638 <__aeabi_dmul>
 8010c84:	4b27      	ldr	r3, [pc, #156]	; (8010d24 <_strtod_l+0x594>)
 8010c86:	460a      	mov	r2, r1
 8010c88:	400b      	ands	r3, r1
 8010c8a:	4927      	ldr	r1, [pc, #156]	; (8010d28 <_strtod_l+0x598>)
 8010c8c:	428b      	cmp	r3, r1
 8010c8e:	4680      	mov	r8, r0
 8010c90:	d8be      	bhi.n	8010c10 <_strtod_l+0x480>
 8010c92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c96:	428b      	cmp	r3, r1
 8010c98:	bf86      	itte	hi
 8010c9a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010d2c <_strtod_l+0x59c>
 8010c9e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010ca2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	9304      	str	r3, [sp, #16]
 8010caa:	e07b      	b.n	8010da4 <_strtod_l+0x614>
 8010cac:	07ea      	lsls	r2, r5, #31
 8010cae:	d505      	bpl.n	8010cbc <_strtod_l+0x52c>
 8010cb0:	9b04      	ldr	r3, [sp, #16]
 8010cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb6:	f7ef fcbf 	bl	8000638 <__aeabi_dmul>
 8010cba:	2301      	movs	r3, #1
 8010cbc:	9a04      	ldr	r2, [sp, #16]
 8010cbe:	3208      	adds	r2, #8
 8010cc0:	f10a 0a01 	add.w	sl, sl, #1
 8010cc4:	106d      	asrs	r5, r5, #1
 8010cc6:	9204      	str	r2, [sp, #16]
 8010cc8:	e7cc      	b.n	8010c64 <_strtod_l+0x4d4>
 8010cca:	d0ec      	beq.n	8010ca6 <_strtod_l+0x516>
 8010ccc:	426d      	negs	r5, r5
 8010cce:	f015 020f 	ands.w	r2, r5, #15
 8010cd2:	d00a      	beq.n	8010cea <_strtod_l+0x55a>
 8010cd4:	4b11      	ldr	r3, [pc, #68]	; (8010d1c <_strtod_l+0x58c>)
 8010cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cda:	4640      	mov	r0, r8
 8010cdc:	4649      	mov	r1, r9
 8010cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce2:	f7ef fdd3 	bl	800088c <__aeabi_ddiv>
 8010ce6:	4680      	mov	r8, r0
 8010ce8:	4689      	mov	r9, r1
 8010cea:	112d      	asrs	r5, r5, #4
 8010cec:	d0db      	beq.n	8010ca6 <_strtod_l+0x516>
 8010cee:	2d1f      	cmp	r5, #31
 8010cf0:	dd1e      	ble.n	8010d30 <_strtod_l+0x5a0>
 8010cf2:	2500      	movs	r5, #0
 8010cf4:	46ab      	mov	fp, r5
 8010cf6:	9509      	str	r5, [sp, #36]	; 0x24
 8010cf8:	9505      	str	r5, [sp, #20]
 8010cfa:	2322      	movs	r3, #34	; 0x22
 8010cfc:	f04f 0800 	mov.w	r8, #0
 8010d00:	f04f 0900 	mov.w	r9, #0
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	e78d      	b.n	8010c24 <_strtod_l+0x494>
 8010d08:	080140bd 	.word	0x080140bd
 8010d0c:	080142e4 	.word	0x080142e4
 8010d10:	080140b5 	.word	0x080140b5
 8010d14:	080140ea 	.word	0x080140ea
 8010d18:	08014490 	.word	0x08014490
 8010d1c:	080141f8 	.word	0x080141f8
 8010d20:	080141d0 	.word	0x080141d0
 8010d24:	7ff00000 	.word	0x7ff00000
 8010d28:	7ca00000 	.word	0x7ca00000
 8010d2c:	7fefffff 	.word	0x7fefffff
 8010d30:	f015 0310 	ands.w	r3, r5, #16
 8010d34:	bf18      	it	ne
 8010d36:	236a      	movne	r3, #106	; 0x6a
 8010d38:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80110dc <_strtod_l+0x94c>
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	4640      	mov	r0, r8
 8010d40:	4649      	mov	r1, r9
 8010d42:	2300      	movs	r3, #0
 8010d44:	07ea      	lsls	r2, r5, #31
 8010d46:	d504      	bpl.n	8010d52 <_strtod_l+0x5c2>
 8010d48:	e9da 2300 	ldrd	r2, r3, [sl]
 8010d4c:	f7ef fc74 	bl	8000638 <__aeabi_dmul>
 8010d50:	2301      	movs	r3, #1
 8010d52:	106d      	asrs	r5, r5, #1
 8010d54:	f10a 0a08 	add.w	sl, sl, #8
 8010d58:	d1f4      	bne.n	8010d44 <_strtod_l+0x5b4>
 8010d5a:	b10b      	cbz	r3, 8010d60 <_strtod_l+0x5d0>
 8010d5c:	4680      	mov	r8, r0
 8010d5e:	4689      	mov	r9, r1
 8010d60:	9b04      	ldr	r3, [sp, #16]
 8010d62:	b1bb      	cbz	r3, 8010d94 <_strtod_l+0x604>
 8010d64:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010d68:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	4649      	mov	r1, r9
 8010d70:	dd10      	ble.n	8010d94 <_strtod_l+0x604>
 8010d72:	2b1f      	cmp	r3, #31
 8010d74:	f340 811e 	ble.w	8010fb4 <_strtod_l+0x824>
 8010d78:	2b34      	cmp	r3, #52	; 0x34
 8010d7a:	bfde      	ittt	le
 8010d7c:	f04f 33ff 	movle.w	r3, #4294967295
 8010d80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010d84:	4093      	lslle	r3, r2
 8010d86:	f04f 0800 	mov.w	r8, #0
 8010d8a:	bfcc      	ite	gt
 8010d8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010d90:	ea03 0901 	andle.w	r9, r3, r1
 8010d94:	2200      	movs	r2, #0
 8010d96:	2300      	movs	r3, #0
 8010d98:	4640      	mov	r0, r8
 8010d9a:	4649      	mov	r1, r9
 8010d9c:	f7ef feb4 	bl	8000b08 <__aeabi_dcmpeq>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d1a6      	bne.n	8010cf2 <_strtod_l+0x562>
 8010da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010daa:	4633      	mov	r3, r6
 8010dac:	465a      	mov	r2, fp
 8010dae:	4620      	mov	r0, r4
 8010db0:	f7ff f8cc 	bl	800ff4c <__s2b>
 8010db4:	9009      	str	r0, [sp, #36]	; 0x24
 8010db6:	2800      	cmp	r0, #0
 8010db8:	f43f af2a 	beq.w	8010c10 <_strtod_l+0x480>
 8010dbc:	9a08      	ldr	r2, [sp, #32]
 8010dbe:	9b05      	ldr	r3, [sp, #20]
 8010dc0:	2a00      	cmp	r2, #0
 8010dc2:	eba3 0307 	sub.w	r3, r3, r7
 8010dc6:	bfa8      	it	ge
 8010dc8:	2300      	movge	r3, #0
 8010dca:	930c      	str	r3, [sp, #48]	; 0x30
 8010dcc:	2500      	movs	r5, #0
 8010dce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010dd2:	9312      	str	r3, [sp, #72]	; 0x48
 8010dd4:	46ab      	mov	fp, r5
 8010dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd8:	4620      	mov	r0, r4
 8010dda:	6859      	ldr	r1, [r3, #4]
 8010ddc:	f7ff f80e 	bl	800fdfc <_Balloc>
 8010de0:	9005      	str	r0, [sp, #20]
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f43f af18 	beq.w	8010c18 <_strtod_l+0x488>
 8010de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dea:	691a      	ldr	r2, [r3, #16]
 8010dec:	3202      	adds	r2, #2
 8010dee:	f103 010c 	add.w	r1, r3, #12
 8010df2:	0092      	lsls	r2, r2, #2
 8010df4:	300c      	adds	r0, #12
 8010df6:	f7fe f91f 	bl	800f038 <memcpy>
 8010dfa:	ec49 8b10 	vmov	d0, r8, r9
 8010dfe:	aa18      	add	r2, sp, #96	; 0x60
 8010e00:	a917      	add	r1, sp, #92	; 0x5c
 8010e02:	4620      	mov	r0, r4
 8010e04:	f7ff fbd6 	bl	80105b4 <__d2b>
 8010e08:	ec49 8b18 	vmov	d8, r8, r9
 8010e0c:	9016      	str	r0, [sp, #88]	; 0x58
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f43f af02 	beq.w	8010c18 <_strtod_l+0x488>
 8010e14:	2101      	movs	r1, #1
 8010e16:	4620      	mov	r0, r4
 8010e18:	f7ff f930 	bl	801007c <__i2b>
 8010e1c:	4683      	mov	fp, r0
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f43f aefa 	beq.w	8010c18 <_strtod_l+0x488>
 8010e24:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010e26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e28:	2e00      	cmp	r6, #0
 8010e2a:	bfab      	itete	ge
 8010e2c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010e2e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010e30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010e32:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010e36:	bfac      	ite	ge
 8010e38:	eb06 0a03 	addge.w	sl, r6, r3
 8010e3c:	1b9f      	sublt	r7, r3, r6
 8010e3e:	9b04      	ldr	r3, [sp, #16]
 8010e40:	1af6      	subs	r6, r6, r3
 8010e42:	4416      	add	r6, r2
 8010e44:	4ba0      	ldr	r3, [pc, #640]	; (80110c8 <_strtod_l+0x938>)
 8010e46:	3e01      	subs	r6, #1
 8010e48:	429e      	cmp	r6, r3
 8010e4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010e4e:	f280 80c4 	bge.w	8010fda <_strtod_l+0x84a>
 8010e52:	1b9b      	subs	r3, r3, r6
 8010e54:	2b1f      	cmp	r3, #31
 8010e56:	eba2 0203 	sub.w	r2, r2, r3
 8010e5a:	f04f 0101 	mov.w	r1, #1
 8010e5e:	f300 80b0 	bgt.w	8010fc2 <_strtod_l+0x832>
 8010e62:	fa01 f303 	lsl.w	r3, r1, r3
 8010e66:	930e      	str	r3, [sp, #56]	; 0x38
 8010e68:	2300      	movs	r3, #0
 8010e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8010e6c:	eb0a 0602 	add.w	r6, sl, r2
 8010e70:	9b04      	ldr	r3, [sp, #16]
 8010e72:	45b2      	cmp	sl, r6
 8010e74:	4417      	add	r7, r2
 8010e76:	441f      	add	r7, r3
 8010e78:	4653      	mov	r3, sl
 8010e7a:	bfa8      	it	ge
 8010e7c:	4633      	movge	r3, r6
 8010e7e:	42bb      	cmp	r3, r7
 8010e80:	bfa8      	it	ge
 8010e82:	463b      	movge	r3, r7
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	bfc2      	ittt	gt
 8010e88:	1af6      	subgt	r6, r6, r3
 8010e8a:	1aff      	subgt	r7, r7, r3
 8010e8c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	dd17      	ble.n	8010ec6 <_strtod_l+0x736>
 8010e96:	4659      	mov	r1, fp
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f7ff f9ae 	bl	80101fc <__pow5mult>
 8010ea0:	4683      	mov	fp, r0
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	f43f aeb8 	beq.w	8010c18 <_strtod_l+0x488>
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010eac:	4620      	mov	r0, r4
 8010eae:	f7ff f8fb 	bl	80100a8 <__multiply>
 8010eb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	f43f aeaf 	beq.w	8010c18 <_strtod_l+0x488>
 8010eba:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f7fe ffdd 	bl	800fe7c <_Bfree>
 8010ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ec4:	9316      	str	r3, [sp, #88]	; 0x58
 8010ec6:	2e00      	cmp	r6, #0
 8010ec8:	f300 808c 	bgt.w	8010fe4 <_strtod_l+0x854>
 8010ecc:	9b08      	ldr	r3, [sp, #32]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	dd08      	ble.n	8010ee4 <_strtod_l+0x754>
 8010ed2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ed4:	9905      	ldr	r1, [sp, #20]
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f7ff f990 	bl	80101fc <__pow5mult>
 8010edc:	9005      	str	r0, [sp, #20]
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	f43f ae9a 	beq.w	8010c18 <_strtod_l+0x488>
 8010ee4:	2f00      	cmp	r7, #0
 8010ee6:	dd08      	ble.n	8010efa <_strtod_l+0x76a>
 8010ee8:	9905      	ldr	r1, [sp, #20]
 8010eea:	463a      	mov	r2, r7
 8010eec:	4620      	mov	r0, r4
 8010eee:	f7ff f9df 	bl	80102b0 <__lshift>
 8010ef2:	9005      	str	r0, [sp, #20]
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	f43f ae8f 	beq.w	8010c18 <_strtod_l+0x488>
 8010efa:	f1ba 0f00 	cmp.w	sl, #0
 8010efe:	dd08      	ble.n	8010f12 <_strtod_l+0x782>
 8010f00:	4659      	mov	r1, fp
 8010f02:	4652      	mov	r2, sl
 8010f04:	4620      	mov	r0, r4
 8010f06:	f7ff f9d3 	bl	80102b0 <__lshift>
 8010f0a:	4683      	mov	fp, r0
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	f43f ae83 	beq.w	8010c18 <_strtod_l+0x488>
 8010f12:	9a05      	ldr	r2, [sp, #20]
 8010f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f16:	4620      	mov	r0, r4
 8010f18:	f7ff fa52 	bl	80103c0 <__mdiff>
 8010f1c:	4605      	mov	r5, r0
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	f43f ae7a 	beq.w	8010c18 <_strtod_l+0x488>
 8010f24:	68c3      	ldr	r3, [r0, #12]
 8010f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f28:	2300      	movs	r3, #0
 8010f2a:	60c3      	str	r3, [r0, #12]
 8010f2c:	4659      	mov	r1, fp
 8010f2e:	f7ff fa2b 	bl	8010388 <__mcmp>
 8010f32:	2800      	cmp	r0, #0
 8010f34:	da60      	bge.n	8010ff8 <_strtod_l+0x868>
 8010f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f38:	ea53 0308 	orrs.w	r3, r3, r8
 8010f3c:	f040 8084 	bne.w	8011048 <_strtod_l+0x8b8>
 8010f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d17f      	bne.n	8011048 <_strtod_l+0x8b8>
 8010f48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010f4c:	0d1b      	lsrs	r3, r3, #20
 8010f4e:	051b      	lsls	r3, r3, #20
 8010f50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010f54:	d978      	bls.n	8011048 <_strtod_l+0x8b8>
 8010f56:	696b      	ldr	r3, [r5, #20]
 8010f58:	b913      	cbnz	r3, 8010f60 <_strtod_l+0x7d0>
 8010f5a:	692b      	ldr	r3, [r5, #16]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	dd73      	ble.n	8011048 <_strtod_l+0x8b8>
 8010f60:	4629      	mov	r1, r5
 8010f62:	2201      	movs	r2, #1
 8010f64:	4620      	mov	r0, r4
 8010f66:	f7ff f9a3 	bl	80102b0 <__lshift>
 8010f6a:	4659      	mov	r1, fp
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	f7ff fa0b 	bl	8010388 <__mcmp>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	dd68      	ble.n	8011048 <_strtod_l+0x8b8>
 8010f76:	9904      	ldr	r1, [sp, #16]
 8010f78:	4a54      	ldr	r2, [pc, #336]	; (80110cc <_strtod_l+0x93c>)
 8010f7a:	464b      	mov	r3, r9
 8010f7c:	2900      	cmp	r1, #0
 8010f7e:	f000 8084 	beq.w	801108a <_strtod_l+0x8fa>
 8010f82:	ea02 0109 	and.w	r1, r2, r9
 8010f86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f8a:	dc7e      	bgt.n	801108a <_strtod_l+0x8fa>
 8010f8c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f90:	f77f aeb3 	ble.w	8010cfa <_strtod_l+0x56a>
 8010f94:	4b4e      	ldr	r3, [pc, #312]	; (80110d0 <_strtod_l+0x940>)
 8010f96:	4640      	mov	r0, r8
 8010f98:	4649      	mov	r1, r9
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f7ef fb4c 	bl	8000638 <__aeabi_dmul>
 8010fa0:	4b4a      	ldr	r3, [pc, #296]	; (80110cc <_strtod_l+0x93c>)
 8010fa2:	400b      	ands	r3, r1
 8010fa4:	4680      	mov	r8, r0
 8010fa6:	4689      	mov	r9, r1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f47f ae3f 	bne.w	8010c2c <_strtod_l+0x49c>
 8010fae:	2322      	movs	r3, #34	; 0x22
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	e63b      	b.n	8010c2c <_strtod_l+0x49c>
 8010fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fbc:	ea03 0808 	and.w	r8, r3, r8
 8010fc0:	e6e8      	b.n	8010d94 <_strtod_l+0x604>
 8010fc2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010fc6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010fca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010fce:	36e2      	adds	r6, #226	; 0xe2
 8010fd0:	fa01 f306 	lsl.w	r3, r1, r6
 8010fd4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010fd8:	e748      	b.n	8010e6c <_strtod_l+0x6dc>
 8010fda:	2100      	movs	r1, #0
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010fe2:	e743      	b.n	8010e6c <_strtod_l+0x6dc>
 8010fe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010fe6:	4632      	mov	r2, r6
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f7ff f961 	bl	80102b0 <__lshift>
 8010fee:	9016      	str	r0, [sp, #88]	; 0x58
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	f47f af6b 	bne.w	8010ecc <_strtod_l+0x73c>
 8010ff6:	e60f      	b.n	8010c18 <_strtod_l+0x488>
 8010ff8:	46ca      	mov	sl, r9
 8010ffa:	d171      	bne.n	80110e0 <_strtod_l+0x950>
 8010ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ffe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011002:	b352      	cbz	r2, 801105a <_strtod_l+0x8ca>
 8011004:	4a33      	ldr	r2, [pc, #204]	; (80110d4 <_strtod_l+0x944>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d12a      	bne.n	8011060 <_strtod_l+0x8d0>
 801100a:	9b04      	ldr	r3, [sp, #16]
 801100c:	4641      	mov	r1, r8
 801100e:	b1fb      	cbz	r3, 8011050 <_strtod_l+0x8c0>
 8011010:	4b2e      	ldr	r3, [pc, #184]	; (80110cc <_strtod_l+0x93c>)
 8011012:	ea09 0303 	and.w	r3, r9, r3
 8011016:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801101a:	f04f 32ff 	mov.w	r2, #4294967295
 801101e:	d81a      	bhi.n	8011056 <_strtod_l+0x8c6>
 8011020:	0d1b      	lsrs	r3, r3, #20
 8011022:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011026:	fa02 f303 	lsl.w	r3, r2, r3
 801102a:	4299      	cmp	r1, r3
 801102c:	d118      	bne.n	8011060 <_strtod_l+0x8d0>
 801102e:	4b2a      	ldr	r3, [pc, #168]	; (80110d8 <_strtod_l+0x948>)
 8011030:	459a      	cmp	sl, r3
 8011032:	d102      	bne.n	801103a <_strtod_l+0x8aa>
 8011034:	3101      	adds	r1, #1
 8011036:	f43f adef 	beq.w	8010c18 <_strtod_l+0x488>
 801103a:	4b24      	ldr	r3, [pc, #144]	; (80110cc <_strtod_l+0x93c>)
 801103c:	ea0a 0303 	and.w	r3, sl, r3
 8011040:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011044:	f04f 0800 	mov.w	r8, #0
 8011048:	9b04      	ldr	r3, [sp, #16]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1a2      	bne.n	8010f94 <_strtod_l+0x804>
 801104e:	e5ed      	b.n	8010c2c <_strtod_l+0x49c>
 8011050:	f04f 33ff 	mov.w	r3, #4294967295
 8011054:	e7e9      	b.n	801102a <_strtod_l+0x89a>
 8011056:	4613      	mov	r3, r2
 8011058:	e7e7      	b.n	801102a <_strtod_l+0x89a>
 801105a:	ea53 0308 	orrs.w	r3, r3, r8
 801105e:	d08a      	beq.n	8010f76 <_strtod_l+0x7e6>
 8011060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011062:	b1e3      	cbz	r3, 801109e <_strtod_l+0x90e>
 8011064:	ea13 0f0a 	tst.w	r3, sl
 8011068:	d0ee      	beq.n	8011048 <_strtod_l+0x8b8>
 801106a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801106c:	9a04      	ldr	r2, [sp, #16]
 801106e:	4640      	mov	r0, r8
 8011070:	4649      	mov	r1, r9
 8011072:	b1c3      	cbz	r3, 80110a6 <_strtod_l+0x916>
 8011074:	f7ff fb6f 	bl	8010756 <sulp>
 8011078:	4602      	mov	r2, r0
 801107a:	460b      	mov	r3, r1
 801107c:	ec51 0b18 	vmov	r0, r1, d8
 8011080:	f7ef f924 	bl	80002cc <__adddf3>
 8011084:	4680      	mov	r8, r0
 8011086:	4689      	mov	r9, r1
 8011088:	e7de      	b.n	8011048 <_strtod_l+0x8b8>
 801108a:	4013      	ands	r3, r2
 801108c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011090:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011094:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011098:	f04f 38ff 	mov.w	r8, #4294967295
 801109c:	e7d4      	b.n	8011048 <_strtod_l+0x8b8>
 801109e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110a0:	ea13 0f08 	tst.w	r3, r8
 80110a4:	e7e0      	b.n	8011068 <_strtod_l+0x8d8>
 80110a6:	f7ff fb56 	bl	8010756 <sulp>
 80110aa:	4602      	mov	r2, r0
 80110ac:	460b      	mov	r3, r1
 80110ae:	ec51 0b18 	vmov	r0, r1, d8
 80110b2:	f7ef f909 	bl	80002c8 <__aeabi_dsub>
 80110b6:	2200      	movs	r2, #0
 80110b8:	2300      	movs	r3, #0
 80110ba:	4680      	mov	r8, r0
 80110bc:	4689      	mov	r9, r1
 80110be:	f7ef fd23 	bl	8000b08 <__aeabi_dcmpeq>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	d0c0      	beq.n	8011048 <_strtod_l+0x8b8>
 80110c6:	e618      	b.n	8010cfa <_strtod_l+0x56a>
 80110c8:	fffffc02 	.word	0xfffffc02
 80110cc:	7ff00000 	.word	0x7ff00000
 80110d0:	39500000 	.word	0x39500000
 80110d4:	000fffff 	.word	0x000fffff
 80110d8:	7fefffff 	.word	0x7fefffff
 80110dc:	080142f8 	.word	0x080142f8
 80110e0:	4659      	mov	r1, fp
 80110e2:	4628      	mov	r0, r5
 80110e4:	f7ff fac0 	bl	8010668 <__ratio>
 80110e8:	ec57 6b10 	vmov	r6, r7, d0
 80110ec:	ee10 0a10 	vmov	r0, s0
 80110f0:	2200      	movs	r2, #0
 80110f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110f6:	4639      	mov	r1, r7
 80110f8:	f7ef fd1a 	bl	8000b30 <__aeabi_dcmple>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d071      	beq.n	80111e4 <_strtod_l+0xa54>
 8011100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011102:	2b00      	cmp	r3, #0
 8011104:	d17c      	bne.n	8011200 <_strtod_l+0xa70>
 8011106:	f1b8 0f00 	cmp.w	r8, #0
 801110a:	d15a      	bne.n	80111c2 <_strtod_l+0xa32>
 801110c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011110:	2b00      	cmp	r3, #0
 8011112:	d15d      	bne.n	80111d0 <_strtod_l+0xa40>
 8011114:	4b90      	ldr	r3, [pc, #576]	; (8011358 <_strtod_l+0xbc8>)
 8011116:	2200      	movs	r2, #0
 8011118:	4630      	mov	r0, r6
 801111a:	4639      	mov	r1, r7
 801111c:	f7ef fcfe 	bl	8000b1c <__aeabi_dcmplt>
 8011120:	2800      	cmp	r0, #0
 8011122:	d15c      	bne.n	80111de <_strtod_l+0xa4e>
 8011124:	4630      	mov	r0, r6
 8011126:	4639      	mov	r1, r7
 8011128:	4b8c      	ldr	r3, [pc, #560]	; (801135c <_strtod_l+0xbcc>)
 801112a:	2200      	movs	r2, #0
 801112c:	f7ef fa84 	bl	8000638 <__aeabi_dmul>
 8011130:	4606      	mov	r6, r0
 8011132:	460f      	mov	r7, r1
 8011134:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011138:	9606      	str	r6, [sp, #24]
 801113a:	9307      	str	r3, [sp, #28]
 801113c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011140:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011144:	4b86      	ldr	r3, [pc, #536]	; (8011360 <_strtod_l+0xbd0>)
 8011146:	ea0a 0303 	and.w	r3, sl, r3
 801114a:	930d      	str	r3, [sp, #52]	; 0x34
 801114c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801114e:	4b85      	ldr	r3, [pc, #532]	; (8011364 <_strtod_l+0xbd4>)
 8011150:	429a      	cmp	r2, r3
 8011152:	f040 8090 	bne.w	8011276 <_strtod_l+0xae6>
 8011156:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801115a:	ec49 8b10 	vmov	d0, r8, r9
 801115e:	f7ff f9b9 	bl	80104d4 <__ulp>
 8011162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011166:	ec51 0b10 	vmov	r0, r1, d0
 801116a:	f7ef fa65 	bl	8000638 <__aeabi_dmul>
 801116e:	4642      	mov	r2, r8
 8011170:	464b      	mov	r3, r9
 8011172:	f7ef f8ab 	bl	80002cc <__adddf3>
 8011176:	460b      	mov	r3, r1
 8011178:	4979      	ldr	r1, [pc, #484]	; (8011360 <_strtod_l+0xbd0>)
 801117a:	4a7b      	ldr	r2, [pc, #492]	; (8011368 <_strtod_l+0xbd8>)
 801117c:	4019      	ands	r1, r3
 801117e:	4291      	cmp	r1, r2
 8011180:	4680      	mov	r8, r0
 8011182:	d944      	bls.n	801120e <_strtod_l+0xa7e>
 8011184:	ee18 2a90 	vmov	r2, s17
 8011188:	4b78      	ldr	r3, [pc, #480]	; (801136c <_strtod_l+0xbdc>)
 801118a:	429a      	cmp	r2, r3
 801118c:	d104      	bne.n	8011198 <_strtod_l+0xa08>
 801118e:	ee18 3a10 	vmov	r3, s16
 8011192:	3301      	adds	r3, #1
 8011194:	f43f ad40 	beq.w	8010c18 <_strtod_l+0x488>
 8011198:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801136c <_strtod_l+0xbdc>
 801119c:	f04f 38ff 	mov.w	r8, #4294967295
 80111a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80111a2:	4620      	mov	r0, r4
 80111a4:	f7fe fe6a 	bl	800fe7c <_Bfree>
 80111a8:	9905      	ldr	r1, [sp, #20]
 80111aa:	4620      	mov	r0, r4
 80111ac:	f7fe fe66 	bl	800fe7c <_Bfree>
 80111b0:	4659      	mov	r1, fp
 80111b2:	4620      	mov	r0, r4
 80111b4:	f7fe fe62 	bl	800fe7c <_Bfree>
 80111b8:	4629      	mov	r1, r5
 80111ba:	4620      	mov	r0, r4
 80111bc:	f7fe fe5e 	bl	800fe7c <_Bfree>
 80111c0:	e609      	b.n	8010dd6 <_strtod_l+0x646>
 80111c2:	f1b8 0f01 	cmp.w	r8, #1
 80111c6:	d103      	bne.n	80111d0 <_strtod_l+0xa40>
 80111c8:	f1b9 0f00 	cmp.w	r9, #0
 80111cc:	f43f ad95 	beq.w	8010cfa <_strtod_l+0x56a>
 80111d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8011328 <_strtod_l+0xb98>
 80111d4:	4f60      	ldr	r7, [pc, #384]	; (8011358 <_strtod_l+0xbc8>)
 80111d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111da:	2600      	movs	r6, #0
 80111dc:	e7ae      	b.n	801113c <_strtod_l+0x9ac>
 80111de:	4f5f      	ldr	r7, [pc, #380]	; (801135c <_strtod_l+0xbcc>)
 80111e0:	2600      	movs	r6, #0
 80111e2:	e7a7      	b.n	8011134 <_strtod_l+0x9a4>
 80111e4:	4b5d      	ldr	r3, [pc, #372]	; (801135c <_strtod_l+0xbcc>)
 80111e6:	4630      	mov	r0, r6
 80111e8:	4639      	mov	r1, r7
 80111ea:	2200      	movs	r2, #0
 80111ec:	f7ef fa24 	bl	8000638 <__aeabi_dmul>
 80111f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111f2:	4606      	mov	r6, r0
 80111f4:	460f      	mov	r7, r1
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d09c      	beq.n	8011134 <_strtod_l+0x9a4>
 80111fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80111fe:	e79d      	b.n	801113c <_strtod_l+0x9ac>
 8011200:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011330 <_strtod_l+0xba0>
 8011204:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011208:	ec57 6b17 	vmov	r6, r7, d7
 801120c:	e796      	b.n	801113c <_strtod_l+0x9ac>
 801120e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011212:	9b04      	ldr	r3, [sp, #16]
 8011214:	46ca      	mov	sl, r9
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1c2      	bne.n	80111a0 <_strtod_l+0xa10>
 801121a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801121e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011220:	0d1b      	lsrs	r3, r3, #20
 8011222:	051b      	lsls	r3, r3, #20
 8011224:	429a      	cmp	r2, r3
 8011226:	d1bb      	bne.n	80111a0 <_strtod_l+0xa10>
 8011228:	4630      	mov	r0, r6
 801122a:	4639      	mov	r1, r7
 801122c:	f7ef fd64 	bl	8000cf8 <__aeabi_d2lz>
 8011230:	f7ef f9d4 	bl	80005dc <__aeabi_l2d>
 8011234:	4602      	mov	r2, r0
 8011236:	460b      	mov	r3, r1
 8011238:	4630      	mov	r0, r6
 801123a:	4639      	mov	r1, r7
 801123c:	f7ef f844 	bl	80002c8 <__aeabi_dsub>
 8011240:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011242:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011246:	ea43 0308 	orr.w	r3, r3, r8
 801124a:	4313      	orrs	r3, r2
 801124c:	4606      	mov	r6, r0
 801124e:	460f      	mov	r7, r1
 8011250:	d054      	beq.n	80112fc <_strtod_l+0xb6c>
 8011252:	a339      	add	r3, pc, #228	; (adr r3, 8011338 <_strtod_l+0xba8>)
 8011254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011258:	f7ef fc60 	bl	8000b1c <__aeabi_dcmplt>
 801125c:	2800      	cmp	r0, #0
 801125e:	f47f ace5 	bne.w	8010c2c <_strtod_l+0x49c>
 8011262:	a337      	add	r3, pc, #220	; (adr r3, 8011340 <_strtod_l+0xbb0>)
 8011264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011268:	4630      	mov	r0, r6
 801126a:	4639      	mov	r1, r7
 801126c:	f7ef fc74 	bl	8000b58 <__aeabi_dcmpgt>
 8011270:	2800      	cmp	r0, #0
 8011272:	d095      	beq.n	80111a0 <_strtod_l+0xa10>
 8011274:	e4da      	b.n	8010c2c <_strtod_l+0x49c>
 8011276:	9b04      	ldr	r3, [sp, #16]
 8011278:	b333      	cbz	r3, 80112c8 <_strtod_l+0xb38>
 801127a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801127c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011280:	d822      	bhi.n	80112c8 <_strtod_l+0xb38>
 8011282:	a331      	add	r3, pc, #196	; (adr r3, 8011348 <_strtod_l+0xbb8>)
 8011284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011288:	4630      	mov	r0, r6
 801128a:	4639      	mov	r1, r7
 801128c:	f7ef fc50 	bl	8000b30 <__aeabi_dcmple>
 8011290:	b1a0      	cbz	r0, 80112bc <_strtod_l+0xb2c>
 8011292:	4639      	mov	r1, r7
 8011294:	4630      	mov	r0, r6
 8011296:	f7ef fca7 	bl	8000be8 <__aeabi_d2uiz>
 801129a:	2801      	cmp	r0, #1
 801129c:	bf38      	it	cc
 801129e:	2001      	movcc	r0, #1
 80112a0:	f7ef f950 	bl	8000544 <__aeabi_ui2d>
 80112a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112a6:	4606      	mov	r6, r0
 80112a8:	460f      	mov	r7, r1
 80112aa:	bb23      	cbnz	r3, 80112f6 <_strtod_l+0xb66>
 80112ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112b0:	9010      	str	r0, [sp, #64]	; 0x40
 80112b2:	9311      	str	r3, [sp, #68]	; 0x44
 80112b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80112b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80112bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80112c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80112c4:	1a9b      	subs	r3, r3, r2
 80112c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80112c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80112cc:	eeb0 0a48 	vmov.f32	s0, s16
 80112d0:	eef0 0a68 	vmov.f32	s1, s17
 80112d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80112d8:	f7ff f8fc 	bl	80104d4 <__ulp>
 80112dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80112e0:	ec53 2b10 	vmov	r2, r3, d0
 80112e4:	f7ef f9a8 	bl	8000638 <__aeabi_dmul>
 80112e8:	ec53 2b18 	vmov	r2, r3, d8
 80112ec:	f7ee ffee 	bl	80002cc <__adddf3>
 80112f0:	4680      	mov	r8, r0
 80112f2:	4689      	mov	r9, r1
 80112f4:	e78d      	b.n	8011212 <_strtod_l+0xa82>
 80112f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80112fa:	e7db      	b.n	80112b4 <_strtod_l+0xb24>
 80112fc:	a314      	add	r3, pc, #80	; (adr r3, 8011350 <_strtod_l+0xbc0>)
 80112fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011302:	f7ef fc0b 	bl	8000b1c <__aeabi_dcmplt>
 8011306:	e7b3      	b.n	8011270 <_strtod_l+0xae0>
 8011308:	2300      	movs	r3, #0
 801130a:	930a      	str	r3, [sp, #40]	; 0x28
 801130c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801130e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011310:	6013      	str	r3, [r2, #0]
 8011312:	f7ff ba7c 	b.w	801080e <_strtod_l+0x7e>
 8011316:	2a65      	cmp	r2, #101	; 0x65
 8011318:	f43f ab75 	beq.w	8010a06 <_strtod_l+0x276>
 801131c:	2a45      	cmp	r2, #69	; 0x45
 801131e:	f43f ab72 	beq.w	8010a06 <_strtod_l+0x276>
 8011322:	2301      	movs	r3, #1
 8011324:	f7ff bbaa 	b.w	8010a7c <_strtod_l+0x2ec>
 8011328:	00000000 	.word	0x00000000
 801132c:	bff00000 	.word	0xbff00000
 8011330:	00000000 	.word	0x00000000
 8011334:	3ff00000 	.word	0x3ff00000
 8011338:	94a03595 	.word	0x94a03595
 801133c:	3fdfffff 	.word	0x3fdfffff
 8011340:	35afe535 	.word	0x35afe535
 8011344:	3fe00000 	.word	0x3fe00000
 8011348:	ffc00000 	.word	0xffc00000
 801134c:	41dfffff 	.word	0x41dfffff
 8011350:	94a03595 	.word	0x94a03595
 8011354:	3fcfffff 	.word	0x3fcfffff
 8011358:	3ff00000 	.word	0x3ff00000
 801135c:	3fe00000 	.word	0x3fe00000
 8011360:	7ff00000 	.word	0x7ff00000
 8011364:	7fe00000 	.word	0x7fe00000
 8011368:	7c9fffff 	.word	0x7c9fffff
 801136c:	7fefffff 	.word	0x7fefffff

08011370 <_strtod_r>:
 8011370:	4b01      	ldr	r3, [pc, #4]	; (8011378 <_strtod_r+0x8>)
 8011372:	f7ff ba0d 	b.w	8010790 <_strtod_l>
 8011376:	bf00      	nop
 8011378:	20000070 	.word	0x20000070

0801137c <_strtol_l.constprop.0>:
 801137c:	2b01      	cmp	r3, #1
 801137e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011382:	d001      	beq.n	8011388 <_strtol_l.constprop.0+0xc>
 8011384:	2b24      	cmp	r3, #36	; 0x24
 8011386:	d906      	bls.n	8011396 <_strtol_l.constprop.0+0x1a>
 8011388:	f7fd fe2a 	bl	800efe0 <__errno>
 801138c:	2316      	movs	r3, #22
 801138e:	6003      	str	r3, [r0, #0]
 8011390:	2000      	movs	r0, #0
 8011392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011396:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801147c <_strtol_l.constprop.0+0x100>
 801139a:	460d      	mov	r5, r1
 801139c:	462e      	mov	r6, r5
 801139e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80113a6:	f017 0708 	ands.w	r7, r7, #8
 80113aa:	d1f7      	bne.n	801139c <_strtol_l.constprop.0+0x20>
 80113ac:	2c2d      	cmp	r4, #45	; 0x2d
 80113ae:	d132      	bne.n	8011416 <_strtol_l.constprop.0+0x9a>
 80113b0:	782c      	ldrb	r4, [r5, #0]
 80113b2:	2701      	movs	r7, #1
 80113b4:	1cb5      	adds	r5, r6, #2
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d05b      	beq.n	8011472 <_strtol_l.constprop.0+0xf6>
 80113ba:	2b10      	cmp	r3, #16
 80113bc:	d109      	bne.n	80113d2 <_strtol_l.constprop.0+0x56>
 80113be:	2c30      	cmp	r4, #48	; 0x30
 80113c0:	d107      	bne.n	80113d2 <_strtol_l.constprop.0+0x56>
 80113c2:	782c      	ldrb	r4, [r5, #0]
 80113c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80113c8:	2c58      	cmp	r4, #88	; 0x58
 80113ca:	d14d      	bne.n	8011468 <_strtol_l.constprop.0+0xec>
 80113cc:	786c      	ldrb	r4, [r5, #1]
 80113ce:	2310      	movs	r3, #16
 80113d0:	3502      	adds	r5, #2
 80113d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80113d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80113da:	f04f 0e00 	mov.w	lr, #0
 80113de:	fbb8 f9f3 	udiv	r9, r8, r3
 80113e2:	4676      	mov	r6, lr
 80113e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80113e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80113ec:	f1bc 0f09 	cmp.w	ip, #9
 80113f0:	d816      	bhi.n	8011420 <_strtol_l.constprop.0+0xa4>
 80113f2:	4664      	mov	r4, ip
 80113f4:	42a3      	cmp	r3, r4
 80113f6:	dd24      	ble.n	8011442 <_strtol_l.constprop.0+0xc6>
 80113f8:	f1be 3fff 	cmp.w	lr, #4294967295
 80113fc:	d008      	beq.n	8011410 <_strtol_l.constprop.0+0x94>
 80113fe:	45b1      	cmp	r9, r6
 8011400:	d31c      	bcc.n	801143c <_strtol_l.constprop.0+0xc0>
 8011402:	d101      	bne.n	8011408 <_strtol_l.constprop.0+0x8c>
 8011404:	45a2      	cmp	sl, r4
 8011406:	db19      	blt.n	801143c <_strtol_l.constprop.0+0xc0>
 8011408:	fb06 4603 	mla	r6, r6, r3, r4
 801140c:	f04f 0e01 	mov.w	lr, #1
 8011410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011414:	e7e8      	b.n	80113e8 <_strtol_l.constprop.0+0x6c>
 8011416:	2c2b      	cmp	r4, #43	; 0x2b
 8011418:	bf04      	itt	eq
 801141a:	782c      	ldrbeq	r4, [r5, #0]
 801141c:	1cb5      	addeq	r5, r6, #2
 801141e:	e7ca      	b.n	80113b6 <_strtol_l.constprop.0+0x3a>
 8011420:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011424:	f1bc 0f19 	cmp.w	ip, #25
 8011428:	d801      	bhi.n	801142e <_strtol_l.constprop.0+0xb2>
 801142a:	3c37      	subs	r4, #55	; 0x37
 801142c:	e7e2      	b.n	80113f4 <_strtol_l.constprop.0+0x78>
 801142e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011432:	f1bc 0f19 	cmp.w	ip, #25
 8011436:	d804      	bhi.n	8011442 <_strtol_l.constprop.0+0xc6>
 8011438:	3c57      	subs	r4, #87	; 0x57
 801143a:	e7db      	b.n	80113f4 <_strtol_l.constprop.0+0x78>
 801143c:	f04f 3eff 	mov.w	lr, #4294967295
 8011440:	e7e6      	b.n	8011410 <_strtol_l.constprop.0+0x94>
 8011442:	f1be 3fff 	cmp.w	lr, #4294967295
 8011446:	d105      	bne.n	8011454 <_strtol_l.constprop.0+0xd8>
 8011448:	2322      	movs	r3, #34	; 0x22
 801144a:	6003      	str	r3, [r0, #0]
 801144c:	4646      	mov	r6, r8
 801144e:	b942      	cbnz	r2, 8011462 <_strtol_l.constprop.0+0xe6>
 8011450:	4630      	mov	r0, r6
 8011452:	e79e      	b.n	8011392 <_strtol_l.constprop.0+0x16>
 8011454:	b107      	cbz	r7, 8011458 <_strtol_l.constprop.0+0xdc>
 8011456:	4276      	negs	r6, r6
 8011458:	2a00      	cmp	r2, #0
 801145a:	d0f9      	beq.n	8011450 <_strtol_l.constprop.0+0xd4>
 801145c:	f1be 0f00 	cmp.w	lr, #0
 8011460:	d000      	beq.n	8011464 <_strtol_l.constprop.0+0xe8>
 8011462:	1e69      	subs	r1, r5, #1
 8011464:	6011      	str	r1, [r2, #0]
 8011466:	e7f3      	b.n	8011450 <_strtol_l.constprop.0+0xd4>
 8011468:	2430      	movs	r4, #48	; 0x30
 801146a:	2b00      	cmp	r3, #0
 801146c:	d1b1      	bne.n	80113d2 <_strtol_l.constprop.0+0x56>
 801146e:	2308      	movs	r3, #8
 8011470:	e7af      	b.n	80113d2 <_strtol_l.constprop.0+0x56>
 8011472:	2c30      	cmp	r4, #48	; 0x30
 8011474:	d0a5      	beq.n	80113c2 <_strtol_l.constprop.0+0x46>
 8011476:	230a      	movs	r3, #10
 8011478:	e7ab      	b.n	80113d2 <_strtol_l.constprop.0+0x56>
 801147a:	bf00      	nop
 801147c:	08014321 	.word	0x08014321

08011480 <_strtol_r>:
 8011480:	f7ff bf7c 	b.w	801137c <_strtol_l.constprop.0>

08011484 <__ssputs_r>:
 8011484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011488:	688e      	ldr	r6, [r1, #8]
 801148a:	461f      	mov	r7, r3
 801148c:	42be      	cmp	r6, r7
 801148e:	680b      	ldr	r3, [r1, #0]
 8011490:	4682      	mov	sl, r0
 8011492:	460c      	mov	r4, r1
 8011494:	4690      	mov	r8, r2
 8011496:	d82c      	bhi.n	80114f2 <__ssputs_r+0x6e>
 8011498:	898a      	ldrh	r2, [r1, #12]
 801149a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801149e:	d026      	beq.n	80114ee <__ssputs_r+0x6a>
 80114a0:	6965      	ldr	r5, [r4, #20]
 80114a2:	6909      	ldr	r1, [r1, #16]
 80114a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114a8:	eba3 0901 	sub.w	r9, r3, r1
 80114ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114b0:	1c7b      	adds	r3, r7, #1
 80114b2:	444b      	add	r3, r9
 80114b4:	106d      	asrs	r5, r5, #1
 80114b6:	429d      	cmp	r5, r3
 80114b8:	bf38      	it	cc
 80114ba:	461d      	movcc	r5, r3
 80114bc:	0553      	lsls	r3, r2, #21
 80114be:	d527      	bpl.n	8011510 <__ssputs_r+0x8c>
 80114c0:	4629      	mov	r1, r5
 80114c2:	f7fc fc91 	bl	800dde8 <_malloc_r>
 80114c6:	4606      	mov	r6, r0
 80114c8:	b360      	cbz	r0, 8011524 <__ssputs_r+0xa0>
 80114ca:	6921      	ldr	r1, [r4, #16]
 80114cc:	464a      	mov	r2, r9
 80114ce:	f7fd fdb3 	bl	800f038 <memcpy>
 80114d2:	89a3      	ldrh	r3, [r4, #12]
 80114d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114dc:	81a3      	strh	r3, [r4, #12]
 80114de:	6126      	str	r6, [r4, #16]
 80114e0:	6165      	str	r5, [r4, #20]
 80114e2:	444e      	add	r6, r9
 80114e4:	eba5 0509 	sub.w	r5, r5, r9
 80114e8:	6026      	str	r6, [r4, #0]
 80114ea:	60a5      	str	r5, [r4, #8]
 80114ec:	463e      	mov	r6, r7
 80114ee:	42be      	cmp	r6, r7
 80114f0:	d900      	bls.n	80114f4 <__ssputs_r+0x70>
 80114f2:	463e      	mov	r6, r7
 80114f4:	6820      	ldr	r0, [r4, #0]
 80114f6:	4632      	mov	r2, r6
 80114f8:	4641      	mov	r1, r8
 80114fa:	f000 fd5c 	bl	8011fb6 <memmove>
 80114fe:	68a3      	ldr	r3, [r4, #8]
 8011500:	1b9b      	subs	r3, r3, r6
 8011502:	60a3      	str	r3, [r4, #8]
 8011504:	6823      	ldr	r3, [r4, #0]
 8011506:	4433      	add	r3, r6
 8011508:	6023      	str	r3, [r4, #0]
 801150a:	2000      	movs	r0, #0
 801150c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011510:	462a      	mov	r2, r5
 8011512:	f001 f90c 	bl	801272e <_realloc_r>
 8011516:	4606      	mov	r6, r0
 8011518:	2800      	cmp	r0, #0
 801151a:	d1e0      	bne.n	80114de <__ssputs_r+0x5a>
 801151c:	6921      	ldr	r1, [r4, #16]
 801151e:	4650      	mov	r0, sl
 8011520:	f7fe fc18 	bl	800fd54 <_free_r>
 8011524:	230c      	movs	r3, #12
 8011526:	f8ca 3000 	str.w	r3, [sl]
 801152a:	89a3      	ldrh	r3, [r4, #12]
 801152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011530:	81a3      	strh	r3, [r4, #12]
 8011532:	f04f 30ff 	mov.w	r0, #4294967295
 8011536:	e7e9      	b.n	801150c <__ssputs_r+0x88>

08011538 <_svfiprintf_r>:
 8011538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	4698      	mov	r8, r3
 801153e:	898b      	ldrh	r3, [r1, #12]
 8011540:	061b      	lsls	r3, r3, #24
 8011542:	b09d      	sub	sp, #116	; 0x74
 8011544:	4607      	mov	r7, r0
 8011546:	460d      	mov	r5, r1
 8011548:	4614      	mov	r4, r2
 801154a:	d50e      	bpl.n	801156a <_svfiprintf_r+0x32>
 801154c:	690b      	ldr	r3, [r1, #16]
 801154e:	b963      	cbnz	r3, 801156a <_svfiprintf_r+0x32>
 8011550:	2140      	movs	r1, #64	; 0x40
 8011552:	f7fc fc49 	bl	800dde8 <_malloc_r>
 8011556:	6028      	str	r0, [r5, #0]
 8011558:	6128      	str	r0, [r5, #16]
 801155a:	b920      	cbnz	r0, 8011566 <_svfiprintf_r+0x2e>
 801155c:	230c      	movs	r3, #12
 801155e:	603b      	str	r3, [r7, #0]
 8011560:	f04f 30ff 	mov.w	r0, #4294967295
 8011564:	e0d0      	b.n	8011708 <_svfiprintf_r+0x1d0>
 8011566:	2340      	movs	r3, #64	; 0x40
 8011568:	616b      	str	r3, [r5, #20]
 801156a:	2300      	movs	r3, #0
 801156c:	9309      	str	r3, [sp, #36]	; 0x24
 801156e:	2320      	movs	r3, #32
 8011570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011574:	f8cd 800c 	str.w	r8, [sp, #12]
 8011578:	2330      	movs	r3, #48	; 0x30
 801157a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011720 <_svfiprintf_r+0x1e8>
 801157e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011582:	f04f 0901 	mov.w	r9, #1
 8011586:	4623      	mov	r3, r4
 8011588:	469a      	mov	sl, r3
 801158a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801158e:	b10a      	cbz	r2, 8011594 <_svfiprintf_r+0x5c>
 8011590:	2a25      	cmp	r2, #37	; 0x25
 8011592:	d1f9      	bne.n	8011588 <_svfiprintf_r+0x50>
 8011594:	ebba 0b04 	subs.w	fp, sl, r4
 8011598:	d00b      	beq.n	80115b2 <_svfiprintf_r+0x7a>
 801159a:	465b      	mov	r3, fp
 801159c:	4622      	mov	r2, r4
 801159e:	4629      	mov	r1, r5
 80115a0:	4638      	mov	r0, r7
 80115a2:	f7ff ff6f 	bl	8011484 <__ssputs_r>
 80115a6:	3001      	adds	r0, #1
 80115a8:	f000 80a9 	beq.w	80116fe <_svfiprintf_r+0x1c6>
 80115ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115ae:	445a      	add	r2, fp
 80115b0:	9209      	str	r2, [sp, #36]	; 0x24
 80115b2:	f89a 3000 	ldrb.w	r3, [sl]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f000 80a1 	beq.w	80116fe <_svfiprintf_r+0x1c6>
 80115bc:	2300      	movs	r3, #0
 80115be:	f04f 32ff 	mov.w	r2, #4294967295
 80115c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115c6:	f10a 0a01 	add.w	sl, sl, #1
 80115ca:	9304      	str	r3, [sp, #16]
 80115cc:	9307      	str	r3, [sp, #28]
 80115ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115d2:	931a      	str	r3, [sp, #104]	; 0x68
 80115d4:	4654      	mov	r4, sl
 80115d6:	2205      	movs	r2, #5
 80115d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115dc:	4850      	ldr	r0, [pc, #320]	; (8011720 <_svfiprintf_r+0x1e8>)
 80115de:	f7ee fe17 	bl	8000210 <memchr>
 80115e2:	9a04      	ldr	r2, [sp, #16]
 80115e4:	b9d8      	cbnz	r0, 801161e <_svfiprintf_r+0xe6>
 80115e6:	06d0      	lsls	r0, r2, #27
 80115e8:	bf44      	itt	mi
 80115ea:	2320      	movmi	r3, #32
 80115ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115f0:	0711      	lsls	r1, r2, #28
 80115f2:	bf44      	itt	mi
 80115f4:	232b      	movmi	r3, #43	; 0x2b
 80115f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115fa:	f89a 3000 	ldrb.w	r3, [sl]
 80115fe:	2b2a      	cmp	r3, #42	; 0x2a
 8011600:	d015      	beq.n	801162e <_svfiprintf_r+0xf6>
 8011602:	9a07      	ldr	r2, [sp, #28]
 8011604:	4654      	mov	r4, sl
 8011606:	2000      	movs	r0, #0
 8011608:	f04f 0c0a 	mov.w	ip, #10
 801160c:	4621      	mov	r1, r4
 801160e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011612:	3b30      	subs	r3, #48	; 0x30
 8011614:	2b09      	cmp	r3, #9
 8011616:	d94d      	bls.n	80116b4 <_svfiprintf_r+0x17c>
 8011618:	b1b0      	cbz	r0, 8011648 <_svfiprintf_r+0x110>
 801161a:	9207      	str	r2, [sp, #28]
 801161c:	e014      	b.n	8011648 <_svfiprintf_r+0x110>
 801161e:	eba0 0308 	sub.w	r3, r0, r8
 8011622:	fa09 f303 	lsl.w	r3, r9, r3
 8011626:	4313      	orrs	r3, r2
 8011628:	9304      	str	r3, [sp, #16]
 801162a:	46a2      	mov	sl, r4
 801162c:	e7d2      	b.n	80115d4 <_svfiprintf_r+0x9c>
 801162e:	9b03      	ldr	r3, [sp, #12]
 8011630:	1d19      	adds	r1, r3, #4
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	9103      	str	r1, [sp, #12]
 8011636:	2b00      	cmp	r3, #0
 8011638:	bfbb      	ittet	lt
 801163a:	425b      	neglt	r3, r3
 801163c:	f042 0202 	orrlt.w	r2, r2, #2
 8011640:	9307      	strge	r3, [sp, #28]
 8011642:	9307      	strlt	r3, [sp, #28]
 8011644:	bfb8      	it	lt
 8011646:	9204      	strlt	r2, [sp, #16]
 8011648:	7823      	ldrb	r3, [r4, #0]
 801164a:	2b2e      	cmp	r3, #46	; 0x2e
 801164c:	d10c      	bne.n	8011668 <_svfiprintf_r+0x130>
 801164e:	7863      	ldrb	r3, [r4, #1]
 8011650:	2b2a      	cmp	r3, #42	; 0x2a
 8011652:	d134      	bne.n	80116be <_svfiprintf_r+0x186>
 8011654:	9b03      	ldr	r3, [sp, #12]
 8011656:	1d1a      	adds	r2, r3, #4
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	9203      	str	r2, [sp, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	bfb8      	it	lt
 8011660:	f04f 33ff 	movlt.w	r3, #4294967295
 8011664:	3402      	adds	r4, #2
 8011666:	9305      	str	r3, [sp, #20]
 8011668:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011730 <_svfiprintf_r+0x1f8>
 801166c:	7821      	ldrb	r1, [r4, #0]
 801166e:	2203      	movs	r2, #3
 8011670:	4650      	mov	r0, sl
 8011672:	f7ee fdcd 	bl	8000210 <memchr>
 8011676:	b138      	cbz	r0, 8011688 <_svfiprintf_r+0x150>
 8011678:	9b04      	ldr	r3, [sp, #16]
 801167a:	eba0 000a 	sub.w	r0, r0, sl
 801167e:	2240      	movs	r2, #64	; 0x40
 8011680:	4082      	lsls	r2, r0
 8011682:	4313      	orrs	r3, r2
 8011684:	3401      	adds	r4, #1
 8011686:	9304      	str	r3, [sp, #16]
 8011688:	f814 1b01 	ldrb.w	r1, [r4], #1
 801168c:	4825      	ldr	r0, [pc, #148]	; (8011724 <_svfiprintf_r+0x1ec>)
 801168e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011692:	2206      	movs	r2, #6
 8011694:	f7ee fdbc 	bl	8000210 <memchr>
 8011698:	2800      	cmp	r0, #0
 801169a:	d038      	beq.n	801170e <_svfiprintf_r+0x1d6>
 801169c:	4b22      	ldr	r3, [pc, #136]	; (8011728 <_svfiprintf_r+0x1f0>)
 801169e:	bb1b      	cbnz	r3, 80116e8 <_svfiprintf_r+0x1b0>
 80116a0:	9b03      	ldr	r3, [sp, #12]
 80116a2:	3307      	adds	r3, #7
 80116a4:	f023 0307 	bic.w	r3, r3, #7
 80116a8:	3308      	adds	r3, #8
 80116aa:	9303      	str	r3, [sp, #12]
 80116ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ae:	4433      	add	r3, r6
 80116b0:	9309      	str	r3, [sp, #36]	; 0x24
 80116b2:	e768      	b.n	8011586 <_svfiprintf_r+0x4e>
 80116b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80116b8:	460c      	mov	r4, r1
 80116ba:	2001      	movs	r0, #1
 80116bc:	e7a6      	b.n	801160c <_svfiprintf_r+0xd4>
 80116be:	2300      	movs	r3, #0
 80116c0:	3401      	adds	r4, #1
 80116c2:	9305      	str	r3, [sp, #20]
 80116c4:	4619      	mov	r1, r3
 80116c6:	f04f 0c0a 	mov.w	ip, #10
 80116ca:	4620      	mov	r0, r4
 80116cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116d0:	3a30      	subs	r2, #48	; 0x30
 80116d2:	2a09      	cmp	r2, #9
 80116d4:	d903      	bls.n	80116de <_svfiprintf_r+0x1a6>
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d0c6      	beq.n	8011668 <_svfiprintf_r+0x130>
 80116da:	9105      	str	r1, [sp, #20]
 80116dc:	e7c4      	b.n	8011668 <_svfiprintf_r+0x130>
 80116de:	fb0c 2101 	mla	r1, ip, r1, r2
 80116e2:	4604      	mov	r4, r0
 80116e4:	2301      	movs	r3, #1
 80116e6:	e7f0      	b.n	80116ca <_svfiprintf_r+0x192>
 80116e8:	ab03      	add	r3, sp, #12
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	462a      	mov	r2, r5
 80116ee:	4b0f      	ldr	r3, [pc, #60]	; (801172c <_svfiprintf_r+0x1f4>)
 80116f0:	a904      	add	r1, sp, #16
 80116f2:	4638      	mov	r0, r7
 80116f4:	f7fc fca4 	bl	800e040 <_printf_float>
 80116f8:	1c42      	adds	r2, r0, #1
 80116fa:	4606      	mov	r6, r0
 80116fc:	d1d6      	bne.n	80116ac <_svfiprintf_r+0x174>
 80116fe:	89ab      	ldrh	r3, [r5, #12]
 8011700:	065b      	lsls	r3, r3, #25
 8011702:	f53f af2d 	bmi.w	8011560 <_svfiprintf_r+0x28>
 8011706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011708:	b01d      	add	sp, #116	; 0x74
 801170a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801170e:	ab03      	add	r3, sp, #12
 8011710:	9300      	str	r3, [sp, #0]
 8011712:	462a      	mov	r2, r5
 8011714:	4b05      	ldr	r3, [pc, #20]	; (801172c <_svfiprintf_r+0x1f4>)
 8011716:	a904      	add	r1, sp, #16
 8011718:	4638      	mov	r0, r7
 801171a:	f7fc ff35 	bl	800e588 <_printf_i>
 801171e:	e7eb      	b.n	80116f8 <_svfiprintf_r+0x1c0>
 8011720:	08014421 	.word	0x08014421
 8011724:	0801442b 	.word	0x0801442b
 8011728:	0800e041 	.word	0x0800e041
 801172c:	08011485 	.word	0x08011485
 8011730:	08014427 	.word	0x08014427

08011734 <_sungetc_r>:
 8011734:	b538      	push	{r3, r4, r5, lr}
 8011736:	1c4b      	adds	r3, r1, #1
 8011738:	4614      	mov	r4, r2
 801173a:	d103      	bne.n	8011744 <_sungetc_r+0x10>
 801173c:	f04f 35ff 	mov.w	r5, #4294967295
 8011740:	4628      	mov	r0, r5
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	8993      	ldrh	r3, [r2, #12]
 8011746:	f023 0320 	bic.w	r3, r3, #32
 801174a:	8193      	strh	r3, [r2, #12]
 801174c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801174e:	6852      	ldr	r2, [r2, #4]
 8011750:	b2cd      	uxtb	r5, r1
 8011752:	b18b      	cbz	r3, 8011778 <_sungetc_r+0x44>
 8011754:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011756:	4293      	cmp	r3, r2
 8011758:	dd08      	ble.n	801176c <_sungetc_r+0x38>
 801175a:	6823      	ldr	r3, [r4, #0]
 801175c:	1e5a      	subs	r2, r3, #1
 801175e:	6022      	str	r2, [r4, #0]
 8011760:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011764:	6863      	ldr	r3, [r4, #4]
 8011766:	3301      	adds	r3, #1
 8011768:	6063      	str	r3, [r4, #4]
 801176a:	e7e9      	b.n	8011740 <_sungetc_r+0xc>
 801176c:	4621      	mov	r1, r4
 801176e:	f000 fbe8 	bl	8011f42 <__submore>
 8011772:	2800      	cmp	r0, #0
 8011774:	d0f1      	beq.n	801175a <_sungetc_r+0x26>
 8011776:	e7e1      	b.n	801173c <_sungetc_r+0x8>
 8011778:	6921      	ldr	r1, [r4, #16]
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	b151      	cbz	r1, 8011794 <_sungetc_r+0x60>
 801177e:	4299      	cmp	r1, r3
 8011780:	d208      	bcs.n	8011794 <_sungetc_r+0x60>
 8011782:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011786:	42a9      	cmp	r1, r5
 8011788:	d104      	bne.n	8011794 <_sungetc_r+0x60>
 801178a:	3b01      	subs	r3, #1
 801178c:	3201      	adds	r2, #1
 801178e:	6023      	str	r3, [r4, #0]
 8011790:	6062      	str	r2, [r4, #4]
 8011792:	e7d5      	b.n	8011740 <_sungetc_r+0xc>
 8011794:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801179c:	6363      	str	r3, [r4, #52]	; 0x34
 801179e:	2303      	movs	r3, #3
 80117a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80117a2:	4623      	mov	r3, r4
 80117a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80117a8:	6023      	str	r3, [r4, #0]
 80117aa:	2301      	movs	r3, #1
 80117ac:	e7dc      	b.n	8011768 <_sungetc_r+0x34>

080117ae <__ssrefill_r>:
 80117ae:	b510      	push	{r4, lr}
 80117b0:	460c      	mov	r4, r1
 80117b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80117b4:	b169      	cbz	r1, 80117d2 <__ssrefill_r+0x24>
 80117b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117ba:	4299      	cmp	r1, r3
 80117bc:	d001      	beq.n	80117c2 <__ssrefill_r+0x14>
 80117be:	f7fe fac9 	bl	800fd54 <_free_r>
 80117c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117c4:	6063      	str	r3, [r4, #4]
 80117c6:	2000      	movs	r0, #0
 80117c8:	6360      	str	r0, [r4, #52]	; 0x34
 80117ca:	b113      	cbz	r3, 80117d2 <__ssrefill_r+0x24>
 80117cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80117ce:	6023      	str	r3, [r4, #0]
 80117d0:	bd10      	pop	{r4, pc}
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	6023      	str	r3, [r4, #0]
 80117d6:	2300      	movs	r3, #0
 80117d8:	6063      	str	r3, [r4, #4]
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	f043 0320 	orr.w	r3, r3, #32
 80117e0:	81a3      	strh	r3, [r4, #12]
 80117e2:	f04f 30ff 	mov.w	r0, #4294967295
 80117e6:	e7f3      	b.n	80117d0 <__ssrefill_r+0x22>

080117e8 <__ssvfiscanf_r>:
 80117e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117ec:	460c      	mov	r4, r1
 80117ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80117f2:	2100      	movs	r1, #0
 80117f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80117f8:	49a6      	ldr	r1, [pc, #664]	; (8011a94 <__ssvfiscanf_r+0x2ac>)
 80117fa:	91a0      	str	r1, [sp, #640]	; 0x280
 80117fc:	f10d 0804 	add.w	r8, sp, #4
 8011800:	49a5      	ldr	r1, [pc, #660]	; (8011a98 <__ssvfiscanf_r+0x2b0>)
 8011802:	4fa6      	ldr	r7, [pc, #664]	; (8011a9c <__ssvfiscanf_r+0x2b4>)
 8011804:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011aa0 <__ssvfiscanf_r+0x2b8>
 8011808:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801180c:	4606      	mov	r6, r0
 801180e:	91a1      	str	r1, [sp, #644]	; 0x284
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	7813      	ldrb	r3, [r2, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	f000 815a 	beq.w	8011ace <__ssvfiscanf_r+0x2e6>
 801181a:	5cf9      	ldrb	r1, [r7, r3]
 801181c:	f011 0108 	ands.w	r1, r1, #8
 8011820:	f102 0501 	add.w	r5, r2, #1
 8011824:	d019      	beq.n	801185a <__ssvfiscanf_r+0x72>
 8011826:	6863      	ldr	r3, [r4, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	dd0f      	ble.n	801184c <__ssvfiscanf_r+0x64>
 801182c:	6823      	ldr	r3, [r4, #0]
 801182e:	781a      	ldrb	r2, [r3, #0]
 8011830:	5cba      	ldrb	r2, [r7, r2]
 8011832:	0712      	lsls	r2, r2, #28
 8011834:	d401      	bmi.n	801183a <__ssvfiscanf_r+0x52>
 8011836:	462a      	mov	r2, r5
 8011838:	e7eb      	b.n	8011812 <__ssvfiscanf_r+0x2a>
 801183a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801183c:	3201      	adds	r2, #1
 801183e:	9245      	str	r2, [sp, #276]	; 0x114
 8011840:	6862      	ldr	r2, [r4, #4]
 8011842:	3301      	adds	r3, #1
 8011844:	3a01      	subs	r2, #1
 8011846:	6062      	str	r2, [r4, #4]
 8011848:	6023      	str	r3, [r4, #0]
 801184a:	e7ec      	b.n	8011826 <__ssvfiscanf_r+0x3e>
 801184c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801184e:	4621      	mov	r1, r4
 8011850:	4630      	mov	r0, r6
 8011852:	4798      	blx	r3
 8011854:	2800      	cmp	r0, #0
 8011856:	d0e9      	beq.n	801182c <__ssvfiscanf_r+0x44>
 8011858:	e7ed      	b.n	8011836 <__ssvfiscanf_r+0x4e>
 801185a:	2b25      	cmp	r3, #37	; 0x25
 801185c:	d012      	beq.n	8011884 <__ssvfiscanf_r+0x9c>
 801185e:	469a      	mov	sl, r3
 8011860:	6863      	ldr	r3, [r4, #4]
 8011862:	2b00      	cmp	r3, #0
 8011864:	f340 8091 	ble.w	801198a <__ssvfiscanf_r+0x1a2>
 8011868:	6822      	ldr	r2, [r4, #0]
 801186a:	7813      	ldrb	r3, [r2, #0]
 801186c:	4553      	cmp	r3, sl
 801186e:	f040 812e 	bne.w	8011ace <__ssvfiscanf_r+0x2e6>
 8011872:	6863      	ldr	r3, [r4, #4]
 8011874:	3b01      	subs	r3, #1
 8011876:	6063      	str	r3, [r4, #4]
 8011878:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801187a:	3201      	adds	r2, #1
 801187c:	3301      	adds	r3, #1
 801187e:	6022      	str	r2, [r4, #0]
 8011880:	9345      	str	r3, [sp, #276]	; 0x114
 8011882:	e7d8      	b.n	8011836 <__ssvfiscanf_r+0x4e>
 8011884:	9141      	str	r1, [sp, #260]	; 0x104
 8011886:	9143      	str	r1, [sp, #268]	; 0x10c
 8011888:	7853      	ldrb	r3, [r2, #1]
 801188a:	2b2a      	cmp	r3, #42	; 0x2a
 801188c:	bf02      	ittt	eq
 801188e:	2310      	moveq	r3, #16
 8011890:	1c95      	addeq	r5, r2, #2
 8011892:	9341      	streq	r3, [sp, #260]	; 0x104
 8011894:	220a      	movs	r2, #10
 8011896:	46aa      	mov	sl, r5
 8011898:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801189c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80118a0:	2b09      	cmp	r3, #9
 80118a2:	d91c      	bls.n	80118de <__ssvfiscanf_r+0xf6>
 80118a4:	487e      	ldr	r0, [pc, #504]	; (8011aa0 <__ssvfiscanf_r+0x2b8>)
 80118a6:	2203      	movs	r2, #3
 80118a8:	f7ee fcb2 	bl	8000210 <memchr>
 80118ac:	b138      	cbz	r0, 80118be <__ssvfiscanf_r+0xd6>
 80118ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80118b0:	eba0 0009 	sub.w	r0, r0, r9
 80118b4:	2301      	movs	r3, #1
 80118b6:	4083      	lsls	r3, r0
 80118b8:	4313      	orrs	r3, r2
 80118ba:	9341      	str	r3, [sp, #260]	; 0x104
 80118bc:	4655      	mov	r5, sl
 80118be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80118c2:	2b78      	cmp	r3, #120	; 0x78
 80118c4:	d806      	bhi.n	80118d4 <__ssvfiscanf_r+0xec>
 80118c6:	2b57      	cmp	r3, #87	; 0x57
 80118c8:	d810      	bhi.n	80118ec <__ssvfiscanf_r+0x104>
 80118ca:	2b25      	cmp	r3, #37	; 0x25
 80118cc:	d0c7      	beq.n	801185e <__ssvfiscanf_r+0x76>
 80118ce:	d857      	bhi.n	8011980 <__ssvfiscanf_r+0x198>
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d065      	beq.n	80119a0 <__ssvfiscanf_r+0x1b8>
 80118d4:	2303      	movs	r3, #3
 80118d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80118d8:	230a      	movs	r3, #10
 80118da:	9342      	str	r3, [sp, #264]	; 0x108
 80118dc:	e076      	b.n	80119cc <__ssvfiscanf_r+0x1e4>
 80118de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80118e0:	fb02 1103 	mla	r1, r2, r3, r1
 80118e4:	3930      	subs	r1, #48	; 0x30
 80118e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80118e8:	4655      	mov	r5, sl
 80118ea:	e7d4      	b.n	8011896 <__ssvfiscanf_r+0xae>
 80118ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80118f0:	2a20      	cmp	r2, #32
 80118f2:	d8ef      	bhi.n	80118d4 <__ssvfiscanf_r+0xec>
 80118f4:	a101      	add	r1, pc, #4	; (adr r1, 80118fc <__ssvfiscanf_r+0x114>)
 80118f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80118fa:	bf00      	nop
 80118fc:	080119af 	.word	0x080119af
 8011900:	080118d5 	.word	0x080118d5
 8011904:	080118d5 	.word	0x080118d5
 8011908:	08011a0d 	.word	0x08011a0d
 801190c:	080118d5 	.word	0x080118d5
 8011910:	080118d5 	.word	0x080118d5
 8011914:	080118d5 	.word	0x080118d5
 8011918:	080118d5 	.word	0x080118d5
 801191c:	080118d5 	.word	0x080118d5
 8011920:	080118d5 	.word	0x080118d5
 8011924:	080118d5 	.word	0x080118d5
 8011928:	08011a23 	.word	0x08011a23
 801192c:	08011a09 	.word	0x08011a09
 8011930:	08011987 	.word	0x08011987
 8011934:	08011987 	.word	0x08011987
 8011938:	08011987 	.word	0x08011987
 801193c:	080118d5 	.word	0x080118d5
 8011940:	080119c5 	.word	0x080119c5
 8011944:	080118d5 	.word	0x080118d5
 8011948:	080118d5 	.word	0x080118d5
 801194c:	080118d5 	.word	0x080118d5
 8011950:	080118d5 	.word	0x080118d5
 8011954:	08011a33 	.word	0x08011a33
 8011958:	08011a01 	.word	0x08011a01
 801195c:	080119a7 	.word	0x080119a7
 8011960:	080118d5 	.word	0x080118d5
 8011964:	080118d5 	.word	0x080118d5
 8011968:	08011a2f 	.word	0x08011a2f
 801196c:	080118d5 	.word	0x080118d5
 8011970:	08011a09 	.word	0x08011a09
 8011974:	080118d5 	.word	0x080118d5
 8011978:	080118d5 	.word	0x080118d5
 801197c:	080119af 	.word	0x080119af
 8011980:	3b45      	subs	r3, #69	; 0x45
 8011982:	2b02      	cmp	r3, #2
 8011984:	d8a6      	bhi.n	80118d4 <__ssvfiscanf_r+0xec>
 8011986:	2305      	movs	r3, #5
 8011988:	e01f      	b.n	80119ca <__ssvfiscanf_r+0x1e2>
 801198a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801198c:	4621      	mov	r1, r4
 801198e:	4630      	mov	r0, r6
 8011990:	4798      	blx	r3
 8011992:	2800      	cmp	r0, #0
 8011994:	f43f af68 	beq.w	8011868 <__ssvfiscanf_r+0x80>
 8011998:	9844      	ldr	r0, [sp, #272]	; 0x110
 801199a:	2800      	cmp	r0, #0
 801199c:	f040 808d 	bne.w	8011aba <__ssvfiscanf_r+0x2d2>
 80119a0:	f04f 30ff 	mov.w	r0, #4294967295
 80119a4:	e08f      	b.n	8011ac6 <__ssvfiscanf_r+0x2de>
 80119a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80119a8:	f042 0220 	orr.w	r2, r2, #32
 80119ac:	9241      	str	r2, [sp, #260]	; 0x104
 80119ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80119b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80119b4:	9241      	str	r2, [sp, #260]	; 0x104
 80119b6:	2210      	movs	r2, #16
 80119b8:	2b6f      	cmp	r3, #111	; 0x6f
 80119ba:	9242      	str	r2, [sp, #264]	; 0x108
 80119bc:	bf34      	ite	cc
 80119be:	2303      	movcc	r3, #3
 80119c0:	2304      	movcs	r3, #4
 80119c2:	e002      	b.n	80119ca <__ssvfiscanf_r+0x1e2>
 80119c4:	2300      	movs	r3, #0
 80119c6:	9342      	str	r3, [sp, #264]	; 0x108
 80119c8:	2303      	movs	r3, #3
 80119ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80119cc:	6863      	ldr	r3, [r4, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	dd3d      	ble.n	8011a4e <__ssvfiscanf_r+0x266>
 80119d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80119d4:	0659      	lsls	r1, r3, #25
 80119d6:	d404      	bmi.n	80119e2 <__ssvfiscanf_r+0x1fa>
 80119d8:	6823      	ldr	r3, [r4, #0]
 80119da:	781a      	ldrb	r2, [r3, #0]
 80119dc:	5cba      	ldrb	r2, [r7, r2]
 80119de:	0712      	lsls	r2, r2, #28
 80119e0:	d43c      	bmi.n	8011a5c <__ssvfiscanf_r+0x274>
 80119e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80119e4:	2b02      	cmp	r3, #2
 80119e6:	dc4b      	bgt.n	8011a80 <__ssvfiscanf_r+0x298>
 80119e8:	466b      	mov	r3, sp
 80119ea:	4622      	mov	r2, r4
 80119ec:	a941      	add	r1, sp, #260	; 0x104
 80119ee:	4630      	mov	r0, r6
 80119f0:	f000 f872 	bl	8011ad8 <_scanf_chars>
 80119f4:	2801      	cmp	r0, #1
 80119f6:	d06a      	beq.n	8011ace <__ssvfiscanf_r+0x2e6>
 80119f8:	2802      	cmp	r0, #2
 80119fa:	f47f af1c 	bne.w	8011836 <__ssvfiscanf_r+0x4e>
 80119fe:	e7cb      	b.n	8011998 <__ssvfiscanf_r+0x1b0>
 8011a00:	2308      	movs	r3, #8
 8011a02:	9342      	str	r3, [sp, #264]	; 0x108
 8011a04:	2304      	movs	r3, #4
 8011a06:	e7e0      	b.n	80119ca <__ssvfiscanf_r+0x1e2>
 8011a08:	220a      	movs	r2, #10
 8011a0a:	e7d5      	b.n	80119b8 <__ssvfiscanf_r+0x1d0>
 8011a0c:	4629      	mov	r1, r5
 8011a0e:	4640      	mov	r0, r8
 8011a10:	f000 fa5e 	bl	8011ed0 <__sccl>
 8011a14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a1a:	9341      	str	r3, [sp, #260]	; 0x104
 8011a1c:	4605      	mov	r5, r0
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e7d3      	b.n	80119ca <__ssvfiscanf_r+0x1e2>
 8011a22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a28:	9341      	str	r3, [sp, #260]	; 0x104
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e7cd      	b.n	80119ca <__ssvfiscanf_r+0x1e2>
 8011a2e:	2302      	movs	r3, #2
 8011a30:	e7cb      	b.n	80119ca <__ssvfiscanf_r+0x1e2>
 8011a32:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011a34:	06c3      	lsls	r3, r0, #27
 8011a36:	f53f aefe 	bmi.w	8011836 <__ssvfiscanf_r+0x4e>
 8011a3a:	9b00      	ldr	r3, [sp, #0]
 8011a3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011a3e:	1d19      	adds	r1, r3, #4
 8011a40:	9100      	str	r1, [sp, #0]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	07c0      	lsls	r0, r0, #31
 8011a46:	bf4c      	ite	mi
 8011a48:	801a      	strhmi	r2, [r3, #0]
 8011a4a:	601a      	strpl	r2, [r3, #0]
 8011a4c:	e6f3      	b.n	8011836 <__ssvfiscanf_r+0x4e>
 8011a4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011a50:	4621      	mov	r1, r4
 8011a52:	4630      	mov	r0, r6
 8011a54:	4798      	blx	r3
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d0bb      	beq.n	80119d2 <__ssvfiscanf_r+0x1ea>
 8011a5a:	e79d      	b.n	8011998 <__ssvfiscanf_r+0x1b0>
 8011a5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011a5e:	3201      	adds	r2, #1
 8011a60:	9245      	str	r2, [sp, #276]	; 0x114
 8011a62:	6862      	ldr	r2, [r4, #4]
 8011a64:	3a01      	subs	r2, #1
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	6062      	str	r2, [r4, #4]
 8011a6a:	dd02      	ble.n	8011a72 <__ssvfiscanf_r+0x28a>
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	6023      	str	r3, [r4, #0]
 8011a70:	e7b2      	b.n	80119d8 <__ssvfiscanf_r+0x1f0>
 8011a72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011a74:	4621      	mov	r1, r4
 8011a76:	4630      	mov	r0, r6
 8011a78:	4798      	blx	r3
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d0ac      	beq.n	80119d8 <__ssvfiscanf_r+0x1f0>
 8011a7e:	e78b      	b.n	8011998 <__ssvfiscanf_r+0x1b0>
 8011a80:	2b04      	cmp	r3, #4
 8011a82:	dc0f      	bgt.n	8011aa4 <__ssvfiscanf_r+0x2bc>
 8011a84:	466b      	mov	r3, sp
 8011a86:	4622      	mov	r2, r4
 8011a88:	a941      	add	r1, sp, #260	; 0x104
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	f000 f87e 	bl	8011b8c <_scanf_i>
 8011a90:	e7b0      	b.n	80119f4 <__ssvfiscanf_r+0x20c>
 8011a92:	bf00      	nop
 8011a94:	08011735 	.word	0x08011735
 8011a98:	080117af 	.word	0x080117af
 8011a9c:	08014321 	.word	0x08014321
 8011aa0:	08014427 	.word	0x08014427
 8011aa4:	4b0b      	ldr	r3, [pc, #44]	; (8011ad4 <__ssvfiscanf_r+0x2ec>)
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	f43f aec5 	beq.w	8011836 <__ssvfiscanf_r+0x4e>
 8011aac:	466b      	mov	r3, sp
 8011aae:	4622      	mov	r2, r4
 8011ab0:	a941      	add	r1, sp, #260	; 0x104
 8011ab2:	4630      	mov	r0, r6
 8011ab4:	f7fc fe8a 	bl	800e7cc <_scanf_float>
 8011ab8:	e79c      	b.n	80119f4 <__ssvfiscanf_r+0x20c>
 8011aba:	89a3      	ldrh	r3, [r4, #12]
 8011abc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011ac0:	bf18      	it	ne
 8011ac2:	f04f 30ff 	movne.w	r0, #4294967295
 8011ac6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ace:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011ad0:	e7f9      	b.n	8011ac6 <__ssvfiscanf_r+0x2de>
 8011ad2:	bf00      	nop
 8011ad4:	0800e7cd 	.word	0x0800e7cd

08011ad8 <_scanf_chars>:
 8011ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011adc:	4615      	mov	r5, r2
 8011ade:	688a      	ldr	r2, [r1, #8]
 8011ae0:	4680      	mov	r8, r0
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	b932      	cbnz	r2, 8011af4 <_scanf_chars+0x1c>
 8011ae6:	698a      	ldr	r2, [r1, #24]
 8011ae8:	2a00      	cmp	r2, #0
 8011aea:	bf0c      	ite	eq
 8011aec:	2201      	moveq	r2, #1
 8011aee:	f04f 32ff 	movne.w	r2, #4294967295
 8011af2:	608a      	str	r2, [r1, #8]
 8011af4:	6822      	ldr	r2, [r4, #0]
 8011af6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011b88 <_scanf_chars+0xb0>
 8011afa:	06d1      	lsls	r1, r2, #27
 8011afc:	bf5f      	itttt	pl
 8011afe:	681a      	ldrpl	r2, [r3, #0]
 8011b00:	1d11      	addpl	r1, r2, #4
 8011b02:	6019      	strpl	r1, [r3, #0]
 8011b04:	6816      	ldrpl	r6, [r2, #0]
 8011b06:	2700      	movs	r7, #0
 8011b08:	69a0      	ldr	r0, [r4, #24]
 8011b0a:	b188      	cbz	r0, 8011b30 <_scanf_chars+0x58>
 8011b0c:	2801      	cmp	r0, #1
 8011b0e:	d107      	bne.n	8011b20 <_scanf_chars+0x48>
 8011b10:	682a      	ldr	r2, [r5, #0]
 8011b12:	7811      	ldrb	r1, [r2, #0]
 8011b14:	6962      	ldr	r2, [r4, #20]
 8011b16:	5c52      	ldrb	r2, [r2, r1]
 8011b18:	b952      	cbnz	r2, 8011b30 <_scanf_chars+0x58>
 8011b1a:	2f00      	cmp	r7, #0
 8011b1c:	d031      	beq.n	8011b82 <_scanf_chars+0xaa>
 8011b1e:	e022      	b.n	8011b66 <_scanf_chars+0x8e>
 8011b20:	2802      	cmp	r0, #2
 8011b22:	d120      	bne.n	8011b66 <_scanf_chars+0x8e>
 8011b24:	682b      	ldr	r3, [r5, #0]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011b2c:	071b      	lsls	r3, r3, #28
 8011b2e:	d41a      	bmi.n	8011b66 <_scanf_chars+0x8e>
 8011b30:	6823      	ldr	r3, [r4, #0]
 8011b32:	06da      	lsls	r2, r3, #27
 8011b34:	bf5e      	ittt	pl
 8011b36:	682b      	ldrpl	r3, [r5, #0]
 8011b38:	781b      	ldrbpl	r3, [r3, #0]
 8011b3a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011b3e:	682a      	ldr	r2, [r5, #0]
 8011b40:	686b      	ldr	r3, [r5, #4]
 8011b42:	3201      	adds	r2, #1
 8011b44:	602a      	str	r2, [r5, #0]
 8011b46:	68a2      	ldr	r2, [r4, #8]
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	3a01      	subs	r2, #1
 8011b4c:	606b      	str	r3, [r5, #4]
 8011b4e:	3701      	adds	r7, #1
 8011b50:	60a2      	str	r2, [r4, #8]
 8011b52:	b142      	cbz	r2, 8011b66 <_scanf_chars+0x8e>
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	dcd7      	bgt.n	8011b08 <_scanf_chars+0x30>
 8011b58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4640      	mov	r0, r8
 8011b60:	4798      	blx	r3
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d0d0      	beq.n	8011b08 <_scanf_chars+0x30>
 8011b66:	6823      	ldr	r3, [r4, #0]
 8011b68:	f013 0310 	ands.w	r3, r3, #16
 8011b6c:	d105      	bne.n	8011b7a <_scanf_chars+0xa2>
 8011b6e:	68e2      	ldr	r2, [r4, #12]
 8011b70:	3201      	adds	r2, #1
 8011b72:	60e2      	str	r2, [r4, #12]
 8011b74:	69a2      	ldr	r2, [r4, #24]
 8011b76:	b102      	cbz	r2, 8011b7a <_scanf_chars+0xa2>
 8011b78:	7033      	strb	r3, [r6, #0]
 8011b7a:	6923      	ldr	r3, [r4, #16]
 8011b7c:	443b      	add	r3, r7
 8011b7e:	6123      	str	r3, [r4, #16]
 8011b80:	2000      	movs	r0, #0
 8011b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b86:	bf00      	nop
 8011b88:	08014321 	.word	0x08014321

08011b8c <_scanf_i>:
 8011b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b90:	4698      	mov	r8, r3
 8011b92:	4b74      	ldr	r3, [pc, #464]	; (8011d64 <_scanf_i+0x1d8>)
 8011b94:	460c      	mov	r4, r1
 8011b96:	4682      	mov	sl, r0
 8011b98:	4616      	mov	r6, r2
 8011b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b9e:	b087      	sub	sp, #28
 8011ba0:	ab03      	add	r3, sp, #12
 8011ba2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011ba6:	4b70      	ldr	r3, [pc, #448]	; (8011d68 <_scanf_i+0x1dc>)
 8011ba8:	69a1      	ldr	r1, [r4, #24]
 8011baa:	4a70      	ldr	r2, [pc, #448]	; (8011d6c <_scanf_i+0x1e0>)
 8011bac:	2903      	cmp	r1, #3
 8011bae:	bf18      	it	ne
 8011bb0:	461a      	movne	r2, r3
 8011bb2:	68a3      	ldr	r3, [r4, #8]
 8011bb4:	9201      	str	r2, [sp, #4]
 8011bb6:	1e5a      	subs	r2, r3, #1
 8011bb8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011bbc:	bf88      	it	hi
 8011bbe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011bc2:	4627      	mov	r7, r4
 8011bc4:	bf82      	ittt	hi
 8011bc6:	eb03 0905 	addhi.w	r9, r3, r5
 8011bca:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011bce:	60a3      	strhi	r3, [r4, #8]
 8011bd0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011bd4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011bd8:	bf98      	it	ls
 8011bda:	f04f 0900 	movls.w	r9, #0
 8011bde:	6023      	str	r3, [r4, #0]
 8011be0:	463d      	mov	r5, r7
 8011be2:	f04f 0b00 	mov.w	fp, #0
 8011be6:	6831      	ldr	r1, [r6, #0]
 8011be8:	ab03      	add	r3, sp, #12
 8011bea:	7809      	ldrb	r1, [r1, #0]
 8011bec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011bf0:	2202      	movs	r2, #2
 8011bf2:	f7ee fb0d 	bl	8000210 <memchr>
 8011bf6:	b328      	cbz	r0, 8011c44 <_scanf_i+0xb8>
 8011bf8:	f1bb 0f01 	cmp.w	fp, #1
 8011bfc:	d159      	bne.n	8011cb2 <_scanf_i+0x126>
 8011bfe:	6862      	ldr	r2, [r4, #4]
 8011c00:	b92a      	cbnz	r2, 8011c0e <_scanf_i+0x82>
 8011c02:	6822      	ldr	r2, [r4, #0]
 8011c04:	2308      	movs	r3, #8
 8011c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c0a:	6063      	str	r3, [r4, #4]
 8011c0c:	6022      	str	r2, [r4, #0]
 8011c0e:	6822      	ldr	r2, [r4, #0]
 8011c10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011c14:	6022      	str	r2, [r4, #0]
 8011c16:	68a2      	ldr	r2, [r4, #8]
 8011c18:	1e51      	subs	r1, r2, #1
 8011c1a:	60a1      	str	r1, [r4, #8]
 8011c1c:	b192      	cbz	r2, 8011c44 <_scanf_i+0xb8>
 8011c1e:	6832      	ldr	r2, [r6, #0]
 8011c20:	1c51      	adds	r1, r2, #1
 8011c22:	6031      	str	r1, [r6, #0]
 8011c24:	7812      	ldrb	r2, [r2, #0]
 8011c26:	f805 2b01 	strb.w	r2, [r5], #1
 8011c2a:	6872      	ldr	r2, [r6, #4]
 8011c2c:	3a01      	subs	r2, #1
 8011c2e:	2a00      	cmp	r2, #0
 8011c30:	6072      	str	r2, [r6, #4]
 8011c32:	dc07      	bgt.n	8011c44 <_scanf_i+0xb8>
 8011c34:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011c38:	4631      	mov	r1, r6
 8011c3a:	4650      	mov	r0, sl
 8011c3c:	4790      	blx	r2
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f040 8085 	bne.w	8011d4e <_scanf_i+0x1c2>
 8011c44:	f10b 0b01 	add.w	fp, fp, #1
 8011c48:	f1bb 0f03 	cmp.w	fp, #3
 8011c4c:	d1cb      	bne.n	8011be6 <_scanf_i+0x5a>
 8011c4e:	6863      	ldr	r3, [r4, #4]
 8011c50:	b90b      	cbnz	r3, 8011c56 <_scanf_i+0xca>
 8011c52:	230a      	movs	r3, #10
 8011c54:	6063      	str	r3, [r4, #4]
 8011c56:	6863      	ldr	r3, [r4, #4]
 8011c58:	4945      	ldr	r1, [pc, #276]	; (8011d70 <_scanf_i+0x1e4>)
 8011c5a:	6960      	ldr	r0, [r4, #20]
 8011c5c:	1ac9      	subs	r1, r1, r3
 8011c5e:	f000 f937 	bl	8011ed0 <__sccl>
 8011c62:	f04f 0b00 	mov.w	fp, #0
 8011c66:	68a3      	ldr	r3, [r4, #8]
 8011c68:	6822      	ldr	r2, [r4, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d03d      	beq.n	8011cea <_scanf_i+0x15e>
 8011c6e:	6831      	ldr	r1, [r6, #0]
 8011c70:	6960      	ldr	r0, [r4, #20]
 8011c72:	f891 c000 	ldrb.w	ip, [r1]
 8011c76:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d035      	beq.n	8011cea <_scanf_i+0x15e>
 8011c7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011c82:	d124      	bne.n	8011cce <_scanf_i+0x142>
 8011c84:	0510      	lsls	r0, r2, #20
 8011c86:	d522      	bpl.n	8011cce <_scanf_i+0x142>
 8011c88:	f10b 0b01 	add.w	fp, fp, #1
 8011c8c:	f1b9 0f00 	cmp.w	r9, #0
 8011c90:	d003      	beq.n	8011c9a <_scanf_i+0x10e>
 8011c92:	3301      	adds	r3, #1
 8011c94:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c98:	60a3      	str	r3, [r4, #8]
 8011c9a:	6873      	ldr	r3, [r6, #4]
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	6073      	str	r3, [r6, #4]
 8011ca2:	dd1b      	ble.n	8011cdc <_scanf_i+0x150>
 8011ca4:	6833      	ldr	r3, [r6, #0]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	6033      	str	r3, [r6, #0]
 8011caa:	68a3      	ldr	r3, [r4, #8]
 8011cac:	3b01      	subs	r3, #1
 8011cae:	60a3      	str	r3, [r4, #8]
 8011cb0:	e7d9      	b.n	8011c66 <_scanf_i+0xda>
 8011cb2:	f1bb 0f02 	cmp.w	fp, #2
 8011cb6:	d1ae      	bne.n	8011c16 <_scanf_i+0x8a>
 8011cb8:	6822      	ldr	r2, [r4, #0]
 8011cba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011cbe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011cc2:	d1bf      	bne.n	8011c44 <_scanf_i+0xb8>
 8011cc4:	2310      	movs	r3, #16
 8011cc6:	6063      	str	r3, [r4, #4]
 8011cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011ccc:	e7a2      	b.n	8011c14 <_scanf_i+0x88>
 8011cce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011cd2:	6022      	str	r2, [r4, #0]
 8011cd4:	780b      	ldrb	r3, [r1, #0]
 8011cd6:	f805 3b01 	strb.w	r3, [r5], #1
 8011cda:	e7de      	b.n	8011c9a <_scanf_i+0x10e>
 8011cdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011ce0:	4631      	mov	r1, r6
 8011ce2:	4650      	mov	r0, sl
 8011ce4:	4798      	blx	r3
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	d0df      	beq.n	8011caa <_scanf_i+0x11e>
 8011cea:	6823      	ldr	r3, [r4, #0]
 8011cec:	05d9      	lsls	r1, r3, #23
 8011cee:	d50d      	bpl.n	8011d0c <_scanf_i+0x180>
 8011cf0:	42bd      	cmp	r5, r7
 8011cf2:	d909      	bls.n	8011d08 <_scanf_i+0x17c>
 8011cf4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	4650      	mov	r0, sl
 8011d00:	4798      	blx	r3
 8011d02:	f105 39ff 	add.w	r9, r5, #4294967295
 8011d06:	464d      	mov	r5, r9
 8011d08:	42bd      	cmp	r5, r7
 8011d0a:	d028      	beq.n	8011d5e <_scanf_i+0x1d2>
 8011d0c:	6822      	ldr	r2, [r4, #0]
 8011d0e:	f012 0210 	ands.w	r2, r2, #16
 8011d12:	d113      	bne.n	8011d3c <_scanf_i+0x1b0>
 8011d14:	702a      	strb	r2, [r5, #0]
 8011d16:	6863      	ldr	r3, [r4, #4]
 8011d18:	9e01      	ldr	r6, [sp, #4]
 8011d1a:	4639      	mov	r1, r7
 8011d1c:	4650      	mov	r0, sl
 8011d1e:	47b0      	blx	r6
 8011d20:	f8d8 3000 	ldr.w	r3, [r8]
 8011d24:	6821      	ldr	r1, [r4, #0]
 8011d26:	1d1a      	adds	r2, r3, #4
 8011d28:	f8c8 2000 	str.w	r2, [r8]
 8011d2c:	f011 0f20 	tst.w	r1, #32
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	d00f      	beq.n	8011d54 <_scanf_i+0x1c8>
 8011d34:	6018      	str	r0, [r3, #0]
 8011d36:	68e3      	ldr	r3, [r4, #12]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	60e3      	str	r3, [r4, #12]
 8011d3c:	6923      	ldr	r3, [r4, #16]
 8011d3e:	1bed      	subs	r5, r5, r7
 8011d40:	445d      	add	r5, fp
 8011d42:	442b      	add	r3, r5
 8011d44:	6123      	str	r3, [r4, #16]
 8011d46:	2000      	movs	r0, #0
 8011d48:	b007      	add	sp, #28
 8011d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4e:	f04f 0b00 	mov.w	fp, #0
 8011d52:	e7ca      	b.n	8011cea <_scanf_i+0x15e>
 8011d54:	07ca      	lsls	r2, r1, #31
 8011d56:	bf4c      	ite	mi
 8011d58:	8018      	strhmi	r0, [r3, #0]
 8011d5a:	6018      	strpl	r0, [r3, #0]
 8011d5c:	e7eb      	b.n	8011d36 <_scanf_i+0x1aa>
 8011d5e:	2001      	movs	r0, #1
 8011d60:	e7f2      	b.n	8011d48 <_scanf_i+0x1bc>
 8011d62:	bf00      	nop
 8011d64:	08013f74 	.word	0x08013f74
 8011d68:	08012871 	.word	0x08012871
 8011d6c:	08011481 	.word	0x08011481
 8011d70:	08014442 	.word	0x08014442

08011d74 <__sflush_r>:
 8011d74:	898a      	ldrh	r2, [r1, #12]
 8011d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	0710      	lsls	r0, r2, #28
 8011d7e:	460c      	mov	r4, r1
 8011d80:	d458      	bmi.n	8011e34 <__sflush_r+0xc0>
 8011d82:	684b      	ldr	r3, [r1, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	dc05      	bgt.n	8011d94 <__sflush_r+0x20>
 8011d88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	dc02      	bgt.n	8011d94 <__sflush_r+0x20>
 8011d8e:	2000      	movs	r0, #0
 8011d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d96:	2e00      	cmp	r6, #0
 8011d98:	d0f9      	beq.n	8011d8e <__sflush_r+0x1a>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011da0:	682f      	ldr	r7, [r5, #0]
 8011da2:	6a21      	ldr	r1, [r4, #32]
 8011da4:	602b      	str	r3, [r5, #0]
 8011da6:	d032      	beq.n	8011e0e <__sflush_r+0x9a>
 8011da8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011daa:	89a3      	ldrh	r3, [r4, #12]
 8011dac:	075a      	lsls	r2, r3, #29
 8011dae:	d505      	bpl.n	8011dbc <__sflush_r+0x48>
 8011db0:	6863      	ldr	r3, [r4, #4]
 8011db2:	1ac0      	subs	r0, r0, r3
 8011db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011db6:	b10b      	cbz	r3, 8011dbc <__sflush_r+0x48>
 8011db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dba:	1ac0      	subs	r0, r0, r3
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dc2:	6a21      	ldr	r1, [r4, #32]
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	47b0      	blx	r6
 8011dc8:	1c43      	adds	r3, r0, #1
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	d106      	bne.n	8011ddc <__sflush_r+0x68>
 8011dce:	6829      	ldr	r1, [r5, #0]
 8011dd0:	291d      	cmp	r1, #29
 8011dd2:	d82b      	bhi.n	8011e2c <__sflush_r+0xb8>
 8011dd4:	4a29      	ldr	r2, [pc, #164]	; (8011e7c <__sflush_r+0x108>)
 8011dd6:	410a      	asrs	r2, r1
 8011dd8:	07d6      	lsls	r6, r2, #31
 8011dda:	d427      	bmi.n	8011e2c <__sflush_r+0xb8>
 8011ddc:	2200      	movs	r2, #0
 8011dde:	6062      	str	r2, [r4, #4]
 8011de0:	04d9      	lsls	r1, r3, #19
 8011de2:	6922      	ldr	r2, [r4, #16]
 8011de4:	6022      	str	r2, [r4, #0]
 8011de6:	d504      	bpl.n	8011df2 <__sflush_r+0x7e>
 8011de8:	1c42      	adds	r2, r0, #1
 8011dea:	d101      	bne.n	8011df0 <__sflush_r+0x7c>
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	b903      	cbnz	r3, 8011df2 <__sflush_r+0x7e>
 8011df0:	6560      	str	r0, [r4, #84]	; 0x54
 8011df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011df4:	602f      	str	r7, [r5, #0]
 8011df6:	2900      	cmp	r1, #0
 8011df8:	d0c9      	beq.n	8011d8e <__sflush_r+0x1a>
 8011dfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dfe:	4299      	cmp	r1, r3
 8011e00:	d002      	beq.n	8011e08 <__sflush_r+0x94>
 8011e02:	4628      	mov	r0, r5
 8011e04:	f7fd ffa6 	bl	800fd54 <_free_r>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	6360      	str	r0, [r4, #52]	; 0x34
 8011e0c:	e7c0      	b.n	8011d90 <__sflush_r+0x1c>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	4628      	mov	r0, r5
 8011e12:	47b0      	blx	r6
 8011e14:	1c41      	adds	r1, r0, #1
 8011e16:	d1c8      	bne.n	8011daa <__sflush_r+0x36>
 8011e18:	682b      	ldr	r3, [r5, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d0c5      	beq.n	8011daa <__sflush_r+0x36>
 8011e1e:	2b1d      	cmp	r3, #29
 8011e20:	d001      	beq.n	8011e26 <__sflush_r+0xb2>
 8011e22:	2b16      	cmp	r3, #22
 8011e24:	d101      	bne.n	8011e2a <__sflush_r+0xb6>
 8011e26:	602f      	str	r7, [r5, #0]
 8011e28:	e7b1      	b.n	8011d8e <__sflush_r+0x1a>
 8011e2a:	89a3      	ldrh	r3, [r4, #12]
 8011e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e30:	81a3      	strh	r3, [r4, #12]
 8011e32:	e7ad      	b.n	8011d90 <__sflush_r+0x1c>
 8011e34:	690f      	ldr	r7, [r1, #16]
 8011e36:	2f00      	cmp	r7, #0
 8011e38:	d0a9      	beq.n	8011d8e <__sflush_r+0x1a>
 8011e3a:	0793      	lsls	r3, r2, #30
 8011e3c:	680e      	ldr	r6, [r1, #0]
 8011e3e:	bf08      	it	eq
 8011e40:	694b      	ldreq	r3, [r1, #20]
 8011e42:	600f      	str	r7, [r1, #0]
 8011e44:	bf18      	it	ne
 8011e46:	2300      	movne	r3, #0
 8011e48:	eba6 0807 	sub.w	r8, r6, r7
 8011e4c:	608b      	str	r3, [r1, #8]
 8011e4e:	f1b8 0f00 	cmp.w	r8, #0
 8011e52:	dd9c      	ble.n	8011d8e <__sflush_r+0x1a>
 8011e54:	6a21      	ldr	r1, [r4, #32]
 8011e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e58:	4643      	mov	r3, r8
 8011e5a:	463a      	mov	r2, r7
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	47b0      	blx	r6
 8011e60:	2800      	cmp	r0, #0
 8011e62:	dc06      	bgt.n	8011e72 <__sflush_r+0xfe>
 8011e64:	89a3      	ldrh	r3, [r4, #12]
 8011e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e6a:	81a3      	strh	r3, [r4, #12]
 8011e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e70:	e78e      	b.n	8011d90 <__sflush_r+0x1c>
 8011e72:	4407      	add	r7, r0
 8011e74:	eba8 0800 	sub.w	r8, r8, r0
 8011e78:	e7e9      	b.n	8011e4e <__sflush_r+0xda>
 8011e7a:	bf00      	nop
 8011e7c:	dfbffffe 	.word	0xdfbffffe

08011e80 <_fflush_r>:
 8011e80:	b538      	push	{r3, r4, r5, lr}
 8011e82:	690b      	ldr	r3, [r1, #16]
 8011e84:	4605      	mov	r5, r0
 8011e86:	460c      	mov	r4, r1
 8011e88:	b913      	cbnz	r3, 8011e90 <_fflush_r+0x10>
 8011e8a:	2500      	movs	r5, #0
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	b118      	cbz	r0, 8011e9a <_fflush_r+0x1a>
 8011e92:	6a03      	ldr	r3, [r0, #32]
 8011e94:	b90b      	cbnz	r3, 8011e9a <_fflush_r+0x1a>
 8011e96:	f7fc ff23 	bl	800ece0 <__sinit>
 8011e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d0f3      	beq.n	8011e8a <_fflush_r+0xa>
 8011ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ea4:	07d0      	lsls	r0, r2, #31
 8011ea6:	d404      	bmi.n	8011eb2 <_fflush_r+0x32>
 8011ea8:	0599      	lsls	r1, r3, #22
 8011eaa:	d402      	bmi.n	8011eb2 <_fflush_r+0x32>
 8011eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eae:	f7fd f8c1 	bl	800f034 <__retarget_lock_acquire_recursive>
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	4621      	mov	r1, r4
 8011eb6:	f7ff ff5d 	bl	8011d74 <__sflush_r>
 8011eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ebc:	07da      	lsls	r2, r3, #31
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	d4e4      	bmi.n	8011e8c <_fflush_r+0xc>
 8011ec2:	89a3      	ldrh	r3, [r4, #12]
 8011ec4:	059b      	lsls	r3, r3, #22
 8011ec6:	d4e1      	bmi.n	8011e8c <_fflush_r+0xc>
 8011ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eca:	f7fd f8b4 	bl	800f036 <__retarget_lock_release_recursive>
 8011ece:	e7dd      	b.n	8011e8c <_fflush_r+0xc>

08011ed0 <__sccl>:
 8011ed0:	b570      	push	{r4, r5, r6, lr}
 8011ed2:	780b      	ldrb	r3, [r1, #0]
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	2b5e      	cmp	r3, #94	; 0x5e
 8011ed8:	bf0b      	itete	eq
 8011eda:	784b      	ldrbeq	r3, [r1, #1]
 8011edc:	1c4a      	addne	r2, r1, #1
 8011ede:	1c8a      	addeq	r2, r1, #2
 8011ee0:	2100      	movne	r1, #0
 8011ee2:	bf08      	it	eq
 8011ee4:	2101      	moveq	r1, #1
 8011ee6:	3801      	subs	r0, #1
 8011ee8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011eec:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011ef0:	42a8      	cmp	r0, r5
 8011ef2:	d1fb      	bne.n	8011eec <__sccl+0x1c>
 8011ef4:	b90b      	cbnz	r3, 8011efa <__sccl+0x2a>
 8011ef6:	1e50      	subs	r0, r2, #1
 8011ef8:	bd70      	pop	{r4, r5, r6, pc}
 8011efa:	f081 0101 	eor.w	r1, r1, #1
 8011efe:	54e1      	strb	r1, [r4, r3]
 8011f00:	4610      	mov	r0, r2
 8011f02:	4602      	mov	r2, r0
 8011f04:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011f08:	2d2d      	cmp	r5, #45	; 0x2d
 8011f0a:	d005      	beq.n	8011f18 <__sccl+0x48>
 8011f0c:	2d5d      	cmp	r5, #93	; 0x5d
 8011f0e:	d016      	beq.n	8011f3e <__sccl+0x6e>
 8011f10:	2d00      	cmp	r5, #0
 8011f12:	d0f1      	beq.n	8011ef8 <__sccl+0x28>
 8011f14:	462b      	mov	r3, r5
 8011f16:	e7f2      	b.n	8011efe <__sccl+0x2e>
 8011f18:	7846      	ldrb	r6, [r0, #1]
 8011f1a:	2e5d      	cmp	r6, #93	; 0x5d
 8011f1c:	d0fa      	beq.n	8011f14 <__sccl+0x44>
 8011f1e:	42b3      	cmp	r3, r6
 8011f20:	dcf8      	bgt.n	8011f14 <__sccl+0x44>
 8011f22:	3002      	adds	r0, #2
 8011f24:	461a      	mov	r2, r3
 8011f26:	3201      	adds	r2, #1
 8011f28:	4296      	cmp	r6, r2
 8011f2a:	54a1      	strb	r1, [r4, r2]
 8011f2c:	dcfb      	bgt.n	8011f26 <__sccl+0x56>
 8011f2e:	1af2      	subs	r2, r6, r3
 8011f30:	3a01      	subs	r2, #1
 8011f32:	1c5d      	adds	r5, r3, #1
 8011f34:	42b3      	cmp	r3, r6
 8011f36:	bfa8      	it	ge
 8011f38:	2200      	movge	r2, #0
 8011f3a:	18ab      	adds	r3, r5, r2
 8011f3c:	e7e1      	b.n	8011f02 <__sccl+0x32>
 8011f3e:	4610      	mov	r0, r2
 8011f40:	e7da      	b.n	8011ef8 <__sccl+0x28>

08011f42 <__submore>:
 8011f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f46:	460c      	mov	r4, r1
 8011f48:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f4e:	4299      	cmp	r1, r3
 8011f50:	d11d      	bne.n	8011f8e <__submore+0x4c>
 8011f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011f56:	f7fb ff47 	bl	800dde8 <_malloc_r>
 8011f5a:	b918      	cbnz	r0, 8011f64 <__submore+0x22>
 8011f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f68:	63a3      	str	r3, [r4, #56]	; 0x38
 8011f6a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011f6e:	6360      	str	r0, [r4, #52]	; 0x34
 8011f70:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011f74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011f78:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011f7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f80:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011f84:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011f88:	6020      	str	r0, [r4, #0]
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	e7e8      	b.n	8011f60 <__submore+0x1e>
 8011f8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011f90:	0077      	lsls	r7, r6, #1
 8011f92:	463a      	mov	r2, r7
 8011f94:	f000 fbcb 	bl	801272e <_realloc_r>
 8011f98:	4605      	mov	r5, r0
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d0de      	beq.n	8011f5c <__submore+0x1a>
 8011f9e:	eb00 0806 	add.w	r8, r0, r6
 8011fa2:	4601      	mov	r1, r0
 8011fa4:	4632      	mov	r2, r6
 8011fa6:	4640      	mov	r0, r8
 8011fa8:	f7fd f846 	bl	800f038 <memcpy>
 8011fac:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011fb0:	f8c4 8000 	str.w	r8, [r4]
 8011fb4:	e7e9      	b.n	8011f8a <__submore+0x48>

08011fb6 <memmove>:
 8011fb6:	4288      	cmp	r0, r1
 8011fb8:	b510      	push	{r4, lr}
 8011fba:	eb01 0402 	add.w	r4, r1, r2
 8011fbe:	d902      	bls.n	8011fc6 <memmove+0x10>
 8011fc0:	4284      	cmp	r4, r0
 8011fc2:	4623      	mov	r3, r4
 8011fc4:	d807      	bhi.n	8011fd6 <memmove+0x20>
 8011fc6:	1e43      	subs	r3, r0, #1
 8011fc8:	42a1      	cmp	r1, r4
 8011fca:	d008      	beq.n	8011fde <memmove+0x28>
 8011fcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fd4:	e7f8      	b.n	8011fc8 <memmove+0x12>
 8011fd6:	4402      	add	r2, r0
 8011fd8:	4601      	mov	r1, r0
 8011fda:	428a      	cmp	r2, r1
 8011fdc:	d100      	bne.n	8011fe0 <memmove+0x2a>
 8011fde:	bd10      	pop	{r4, pc}
 8011fe0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fe4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011fe8:	e7f7      	b.n	8011fda <memmove+0x24>

08011fea <strncmp>:
 8011fea:	b510      	push	{r4, lr}
 8011fec:	b16a      	cbz	r2, 801200a <strncmp+0x20>
 8011fee:	3901      	subs	r1, #1
 8011ff0:	1884      	adds	r4, r0, r2
 8011ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ff6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d103      	bne.n	8012006 <strncmp+0x1c>
 8011ffe:	42a0      	cmp	r0, r4
 8012000:	d001      	beq.n	8012006 <strncmp+0x1c>
 8012002:	2a00      	cmp	r2, #0
 8012004:	d1f5      	bne.n	8011ff2 <strncmp+0x8>
 8012006:	1ad0      	subs	r0, r2, r3
 8012008:	bd10      	pop	{r4, pc}
 801200a:	4610      	mov	r0, r2
 801200c:	e7fc      	b.n	8012008 <strncmp+0x1e>
	...

08012010 <nan>:
 8012010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012018 <nan+0x8>
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop
 8012018:	00000000 	.word	0x00000000
 801201c:	7ff80000 	.word	0x7ff80000

08012020 <__assert_func>:
 8012020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012022:	4614      	mov	r4, r2
 8012024:	461a      	mov	r2, r3
 8012026:	4b09      	ldr	r3, [pc, #36]	; (801204c <__assert_func+0x2c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4605      	mov	r5, r0
 801202c:	68d8      	ldr	r0, [r3, #12]
 801202e:	b14c      	cbz	r4, 8012044 <__assert_func+0x24>
 8012030:	4b07      	ldr	r3, [pc, #28]	; (8012050 <__assert_func+0x30>)
 8012032:	9100      	str	r1, [sp, #0]
 8012034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012038:	4906      	ldr	r1, [pc, #24]	; (8012054 <__assert_func+0x34>)
 801203a:	462b      	mov	r3, r5
 801203c:	f000 fc28 	bl	8012890 <fiprintf>
 8012040:	f000 fc38 	bl	80128b4 <abort>
 8012044:	4b04      	ldr	r3, [pc, #16]	; (8012058 <__assert_func+0x38>)
 8012046:	461c      	mov	r4, r3
 8012048:	e7f3      	b.n	8012032 <__assert_func+0x12>
 801204a:	bf00      	nop
 801204c:	2000006c 	.word	0x2000006c
 8012050:	08014455 	.word	0x08014455
 8012054:	08014462 	.word	0x08014462
 8012058:	08014490 	.word	0x08014490

0801205c <rshift>:
 801205c:	6903      	ldr	r3, [r0, #16]
 801205e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012066:	ea4f 1261 	mov.w	r2, r1, asr #5
 801206a:	f100 0414 	add.w	r4, r0, #20
 801206e:	dd45      	ble.n	80120fc <rshift+0xa0>
 8012070:	f011 011f 	ands.w	r1, r1, #31
 8012074:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012078:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801207c:	d10c      	bne.n	8012098 <rshift+0x3c>
 801207e:	f100 0710 	add.w	r7, r0, #16
 8012082:	4629      	mov	r1, r5
 8012084:	42b1      	cmp	r1, r6
 8012086:	d334      	bcc.n	80120f2 <rshift+0x96>
 8012088:	1a9b      	subs	r3, r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	1eea      	subs	r2, r5, #3
 801208e:	4296      	cmp	r6, r2
 8012090:	bf38      	it	cc
 8012092:	2300      	movcc	r3, #0
 8012094:	4423      	add	r3, r4
 8012096:	e015      	b.n	80120c4 <rshift+0x68>
 8012098:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801209c:	f1c1 0820 	rsb	r8, r1, #32
 80120a0:	40cf      	lsrs	r7, r1
 80120a2:	f105 0e04 	add.w	lr, r5, #4
 80120a6:	46a1      	mov	r9, r4
 80120a8:	4576      	cmp	r6, lr
 80120aa:	46f4      	mov	ip, lr
 80120ac:	d815      	bhi.n	80120da <rshift+0x7e>
 80120ae:	1a9a      	subs	r2, r3, r2
 80120b0:	0092      	lsls	r2, r2, #2
 80120b2:	3a04      	subs	r2, #4
 80120b4:	3501      	adds	r5, #1
 80120b6:	42ae      	cmp	r6, r5
 80120b8:	bf38      	it	cc
 80120ba:	2200      	movcc	r2, #0
 80120bc:	18a3      	adds	r3, r4, r2
 80120be:	50a7      	str	r7, [r4, r2]
 80120c0:	b107      	cbz	r7, 80120c4 <rshift+0x68>
 80120c2:	3304      	adds	r3, #4
 80120c4:	1b1a      	subs	r2, r3, r4
 80120c6:	42a3      	cmp	r3, r4
 80120c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80120cc:	bf08      	it	eq
 80120ce:	2300      	moveq	r3, #0
 80120d0:	6102      	str	r2, [r0, #16]
 80120d2:	bf08      	it	eq
 80120d4:	6143      	streq	r3, [r0, #20]
 80120d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120da:	f8dc c000 	ldr.w	ip, [ip]
 80120de:	fa0c fc08 	lsl.w	ip, ip, r8
 80120e2:	ea4c 0707 	orr.w	r7, ip, r7
 80120e6:	f849 7b04 	str.w	r7, [r9], #4
 80120ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80120ee:	40cf      	lsrs	r7, r1
 80120f0:	e7da      	b.n	80120a8 <rshift+0x4c>
 80120f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80120f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80120fa:	e7c3      	b.n	8012084 <rshift+0x28>
 80120fc:	4623      	mov	r3, r4
 80120fe:	e7e1      	b.n	80120c4 <rshift+0x68>

08012100 <__hexdig_fun>:
 8012100:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012104:	2b09      	cmp	r3, #9
 8012106:	d802      	bhi.n	801210e <__hexdig_fun+0xe>
 8012108:	3820      	subs	r0, #32
 801210a:	b2c0      	uxtb	r0, r0
 801210c:	4770      	bx	lr
 801210e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012112:	2b05      	cmp	r3, #5
 8012114:	d801      	bhi.n	801211a <__hexdig_fun+0x1a>
 8012116:	3847      	subs	r0, #71	; 0x47
 8012118:	e7f7      	b.n	801210a <__hexdig_fun+0xa>
 801211a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801211e:	2b05      	cmp	r3, #5
 8012120:	d801      	bhi.n	8012126 <__hexdig_fun+0x26>
 8012122:	3827      	subs	r0, #39	; 0x27
 8012124:	e7f1      	b.n	801210a <__hexdig_fun+0xa>
 8012126:	2000      	movs	r0, #0
 8012128:	4770      	bx	lr
	...

0801212c <__gethex>:
 801212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012130:	4617      	mov	r7, r2
 8012132:	680a      	ldr	r2, [r1, #0]
 8012134:	b085      	sub	sp, #20
 8012136:	f102 0b02 	add.w	fp, r2, #2
 801213a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801213e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012142:	4681      	mov	r9, r0
 8012144:	468a      	mov	sl, r1
 8012146:	9302      	str	r3, [sp, #8]
 8012148:	32fe      	adds	r2, #254	; 0xfe
 801214a:	eb02 030b 	add.w	r3, r2, fp
 801214e:	46d8      	mov	r8, fp
 8012150:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	2830      	cmp	r0, #48	; 0x30
 8012158:	d0f7      	beq.n	801214a <__gethex+0x1e>
 801215a:	f7ff ffd1 	bl	8012100 <__hexdig_fun>
 801215e:	4604      	mov	r4, r0
 8012160:	2800      	cmp	r0, #0
 8012162:	d138      	bne.n	80121d6 <__gethex+0xaa>
 8012164:	49a7      	ldr	r1, [pc, #668]	; (8012404 <__gethex+0x2d8>)
 8012166:	2201      	movs	r2, #1
 8012168:	4640      	mov	r0, r8
 801216a:	f7ff ff3e 	bl	8011fea <strncmp>
 801216e:	4606      	mov	r6, r0
 8012170:	2800      	cmp	r0, #0
 8012172:	d169      	bne.n	8012248 <__gethex+0x11c>
 8012174:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012178:	465d      	mov	r5, fp
 801217a:	f7ff ffc1 	bl	8012100 <__hexdig_fun>
 801217e:	2800      	cmp	r0, #0
 8012180:	d064      	beq.n	801224c <__gethex+0x120>
 8012182:	465a      	mov	r2, fp
 8012184:	7810      	ldrb	r0, [r2, #0]
 8012186:	2830      	cmp	r0, #48	; 0x30
 8012188:	4690      	mov	r8, r2
 801218a:	f102 0201 	add.w	r2, r2, #1
 801218e:	d0f9      	beq.n	8012184 <__gethex+0x58>
 8012190:	f7ff ffb6 	bl	8012100 <__hexdig_fun>
 8012194:	2301      	movs	r3, #1
 8012196:	fab0 f480 	clz	r4, r0
 801219a:	0964      	lsrs	r4, r4, #5
 801219c:	465e      	mov	r6, fp
 801219e:	9301      	str	r3, [sp, #4]
 80121a0:	4642      	mov	r2, r8
 80121a2:	4615      	mov	r5, r2
 80121a4:	3201      	adds	r2, #1
 80121a6:	7828      	ldrb	r0, [r5, #0]
 80121a8:	f7ff ffaa 	bl	8012100 <__hexdig_fun>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	d1f8      	bne.n	80121a2 <__gethex+0x76>
 80121b0:	4994      	ldr	r1, [pc, #592]	; (8012404 <__gethex+0x2d8>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	4628      	mov	r0, r5
 80121b6:	f7ff ff18 	bl	8011fea <strncmp>
 80121ba:	b978      	cbnz	r0, 80121dc <__gethex+0xb0>
 80121bc:	b946      	cbnz	r6, 80121d0 <__gethex+0xa4>
 80121be:	1c6e      	adds	r6, r5, #1
 80121c0:	4632      	mov	r2, r6
 80121c2:	4615      	mov	r5, r2
 80121c4:	3201      	adds	r2, #1
 80121c6:	7828      	ldrb	r0, [r5, #0]
 80121c8:	f7ff ff9a 	bl	8012100 <__hexdig_fun>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d1f8      	bne.n	80121c2 <__gethex+0x96>
 80121d0:	1b73      	subs	r3, r6, r5
 80121d2:	009e      	lsls	r6, r3, #2
 80121d4:	e004      	b.n	80121e0 <__gethex+0xb4>
 80121d6:	2400      	movs	r4, #0
 80121d8:	4626      	mov	r6, r4
 80121da:	e7e1      	b.n	80121a0 <__gethex+0x74>
 80121dc:	2e00      	cmp	r6, #0
 80121de:	d1f7      	bne.n	80121d0 <__gethex+0xa4>
 80121e0:	782b      	ldrb	r3, [r5, #0]
 80121e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80121e6:	2b50      	cmp	r3, #80	; 0x50
 80121e8:	d13d      	bne.n	8012266 <__gethex+0x13a>
 80121ea:	786b      	ldrb	r3, [r5, #1]
 80121ec:	2b2b      	cmp	r3, #43	; 0x2b
 80121ee:	d02f      	beq.n	8012250 <__gethex+0x124>
 80121f0:	2b2d      	cmp	r3, #45	; 0x2d
 80121f2:	d031      	beq.n	8012258 <__gethex+0x12c>
 80121f4:	1c69      	adds	r1, r5, #1
 80121f6:	f04f 0b00 	mov.w	fp, #0
 80121fa:	7808      	ldrb	r0, [r1, #0]
 80121fc:	f7ff ff80 	bl	8012100 <__hexdig_fun>
 8012200:	1e42      	subs	r2, r0, #1
 8012202:	b2d2      	uxtb	r2, r2
 8012204:	2a18      	cmp	r2, #24
 8012206:	d82e      	bhi.n	8012266 <__gethex+0x13a>
 8012208:	f1a0 0210 	sub.w	r2, r0, #16
 801220c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012210:	f7ff ff76 	bl	8012100 <__hexdig_fun>
 8012214:	f100 3cff 	add.w	ip, r0, #4294967295
 8012218:	fa5f fc8c 	uxtb.w	ip, ip
 801221c:	f1bc 0f18 	cmp.w	ip, #24
 8012220:	d91d      	bls.n	801225e <__gethex+0x132>
 8012222:	f1bb 0f00 	cmp.w	fp, #0
 8012226:	d000      	beq.n	801222a <__gethex+0xfe>
 8012228:	4252      	negs	r2, r2
 801222a:	4416      	add	r6, r2
 801222c:	f8ca 1000 	str.w	r1, [sl]
 8012230:	b1dc      	cbz	r4, 801226a <__gethex+0x13e>
 8012232:	9b01      	ldr	r3, [sp, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	bf14      	ite	ne
 8012238:	f04f 0800 	movne.w	r8, #0
 801223c:	f04f 0806 	moveq.w	r8, #6
 8012240:	4640      	mov	r0, r8
 8012242:	b005      	add	sp, #20
 8012244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012248:	4645      	mov	r5, r8
 801224a:	4626      	mov	r6, r4
 801224c:	2401      	movs	r4, #1
 801224e:	e7c7      	b.n	80121e0 <__gethex+0xb4>
 8012250:	f04f 0b00 	mov.w	fp, #0
 8012254:	1ca9      	adds	r1, r5, #2
 8012256:	e7d0      	b.n	80121fa <__gethex+0xce>
 8012258:	f04f 0b01 	mov.w	fp, #1
 801225c:	e7fa      	b.n	8012254 <__gethex+0x128>
 801225e:	230a      	movs	r3, #10
 8012260:	fb03 0002 	mla	r0, r3, r2, r0
 8012264:	e7d0      	b.n	8012208 <__gethex+0xdc>
 8012266:	4629      	mov	r1, r5
 8012268:	e7e0      	b.n	801222c <__gethex+0x100>
 801226a:	eba5 0308 	sub.w	r3, r5, r8
 801226e:	3b01      	subs	r3, #1
 8012270:	4621      	mov	r1, r4
 8012272:	2b07      	cmp	r3, #7
 8012274:	dc0a      	bgt.n	801228c <__gethex+0x160>
 8012276:	4648      	mov	r0, r9
 8012278:	f7fd fdc0 	bl	800fdfc <_Balloc>
 801227c:	4604      	mov	r4, r0
 801227e:	b940      	cbnz	r0, 8012292 <__gethex+0x166>
 8012280:	4b61      	ldr	r3, [pc, #388]	; (8012408 <__gethex+0x2dc>)
 8012282:	4602      	mov	r2, r0
 8012284:	21e4      	movs	r1, #228	; 0xe4
 8012286:	4861      	ldr	r0, [pc, #388]	; (801240c <__gethex+0x2e0>)
 8012288:	f7ff feca 	bl	8012020 <__assert_func>
 801228c:	3101      	adds	r1, #1
 801228e:	105b      	asrs	r3, r3, #1
 8012290:	e7ef      	b.n	8012272 <__gethex+0x146>
 8012292:	f100 0a14 	add.w	sl, r0, #20
 8012296:	2300      	movs	r3, #0
 8012298:	495a      	ldr	r1, [pc, #360]	; (8012404 <__gethex+0x2d8>)
 801229a:	f8cd a004 	str.w	sl, [sp, #4]
 801229e:	469b      	mov	fp, r3
 80122a0:	45a8      	cmp	r8, r5
 80122a2:	d342      	bcc.n	801232a <__gethex+0x1fe>
 80122a4:	9801      	ldr	r0, [sp, #4]
 80122a6:	f840 bb04 	str.w	fp, [r0], #4
 80122aa:	eba0 000a 	sub.w	r0, r0, sl
 80122ae:	1080      	asrs	r0, r0, #2
 80122b0:	6120      	str	r0, [r4, #16]
 80122b2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80122b6:	4658      	mov	r0, fp
 80122b8:	f7fd fe92 	bl	800ffe0 <__hi0bits>
 80122bc:	683d      	ldr	r5, [r7, #0]
 80122be:	eba8 0000 	sub.w	r0, r8, r0
 80122c2:	42a8      	cmp	r0, r5
 80122c4:	dd59      	ble.n	801237a <__gethex+0x24e>
 80122c6:	eba0 0805 	sub.w	r8, r0, r5
 80122ca:	4641      	mov	r1, r8
 80122cc:	4620      	mov	r0, r4
 80122ce:	f7fe fa21 	bl	8010714 <__any_on>
 80122d2:	4683      	mov	fp, r0
 80122d4:	b1b8      	cbz	r0, 8012306 <__gethex+0x1da>
 80122d6:	f108 33ff 	add.w	r3, r8, #4294967295
 80122da:	1159      	asrs	r1, r3, #5
 80122dc:	f003 021f 	and.w	r2, r3, #31
 80122e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80122e4:	f04f 0b01 	mov.w	fp, #1
 80122e8:	fa0b f202 	lsl.w	r2, fp, r2
 80122ec:	420a      	tst	r2, r1
 80122ee:	d00a      	beq.n	8012306 <__gethex+0x1da>
 80122f0:	455b      	cmp	r3, fp
 80122f2:	dd06      	ble.n	8012302 <__gethex+0x1d6>
 80122f4:	f1a8 0102 	sub.w	r1, r8, #2
 80122f8:	4620      	mov	r0, r4
 80122fa:	f7fe fa0b 	bl	8010714 <__any_on>
 80122fe:	2800      	cmp	r0, #0
 8012300:	d138      	bne.n	8012374 <__gethex+0x248>
 8012302:	f04f 0b02 	mov.w	fp, #2
 8012306:	4641      	mov	r1, r8
 8012308:	4620      	mov	r0, r4
 801230a:	f7ff fea7 	bl	801205c <rshift>
 801230e:	4446      	add	r6, r8
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	42b3      	cmp	r3, r6
 8012314:	da41      	bge.n	801239a <__gethex+0x26e>
 8012316:	4621      	mov	r1, r4
 8012318:	4648      	mov	r0, r9
 801231a:	f7fd fdaf 	bl	800fe7c <_Bfree>
 801231e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012320:	2300      	movs	r3, #0
 8012322:	6013      	str	r3, [r2, #0]
 8012324:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012328:	e78a      	b.n	8012240 <__gethex+0x114>
 801232a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801232e:	2a2e      	cmp	r2, #46	; 0x2e
 8012330:	d014      	beq.n	801235c <__gethex+0x230>
 8012332:	2b20      	cmp	r3, #32
 8012334:	d106      	bne.n	8012344 <__gethex+0x218>
 8012336:	9b01      	ldr	r3, [sp, #4]
 8012338:	f843 bb04 	str.w	fp, [r3], #4
 801233c:	f04f 0b00 	mov.w	fp, #0
 8012340:	9301      	str	r3, [sp, #4]
 8012342:	465b      	mov	r3, fp
 8012344:	7828      	ldrb	r0, [r5, #0]
 8012346:	9303      	str	r3, [sp, #12]
 8012348:	f7ff feda 	bl	8012100 <__hexdig_fun>
 801234c:	9b03      	ldr	r3, [sp, #12]
 801234e:	f000 000f 	and.w	r0, r0, #15
 8012352:	4098      	lsls	r0, r3
 8012354:	ea4b 0b00 	orr.w	fp, fp, r0
 8012358:	3304      	adds	r3, #4
 801235a:	e7a1      	b.n	80122a0 <__gethex+0x174>
 801235c:	45a8      	cmp	r8, r5
 801235e:	d8e8      	bhi.n	8012332 <__gethex+0x206>
 8012360:	2201      	movs	r2, #1
 8012362:	4628      	mov	r0, r5
 8012364:	9303      	str	r3, [sp, #12]
 8012366:	f7ff fe40 	bl	8011fea <strncmp>
 801236a:	4926      	ldr	r1, [pc, #152]	; (8012404 <__gethex+0x2d8>)
 801236c:	9b03      	ldr	r3, [sp, #12]
 801236e:	2800      	cmp	r0, #0
 8012370:	d1df      	bne.n	8012332 <__gethex+0x206>
 8012372:	e795      	b.n	80122a0 <__gethex+0x174>
 8012374:	f04f 0b03 	mov.w	fp, #3
 8012378:	e7c5      	b.n	8012306 <__gethex+0x1da>
 801237a:	da0b      	bge.n	8012394 <__gethex+0x268>
 801237c:	eba5 0800 	sub.w	r8, r5, r0
 8012380:	4621      	mov	r1, r4
 8012382:	4642      	mov	r2, r8
 8012384:	4648      	mov	r0, r9
 8012386:	f7fd ff93 	bl	80102b0 <__lshift>
 801238a:	eba6 0608 	sub.w	r6, r6, r8
 801238e:	4604      	mov	r4, r0
 8012390:	f100 0a14 	add.w	sl, r0, #20
 8012394:	f04f 0b00 	mov.w	fp, #0
 8012398:	e7ba      	b.n	8012310 <__gethex+0x1e4>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	42b3      	cmp	r3, r6
 801239e:	dd73      	ble.n	8012488 <__gethex+0x35c>
 80123a0:	1b9e      	subs	r6, r3, r6
 80123a2:	42b5      	cmp	r5, r6
 80123a4:	dc34      	bgt.n	8012410 <__gethex+0x2e4>
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d023      	beq.n	80123f4 <__gethex+0x2c8>
 80123ac:	2b03      	cmp	r3, #3
 80123ae:	d025      	beq.n	80123fc <__gethex+0x2d0>
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d115      	bne.n	80123e0 <__gethex+0x2b4>
 80123b4:	42b5      	cmp	r5, r6
 80123b6:	d113      	bne.n	80123e0 <__gethex+0x2b4>
 80123b8:	2d01      	cmp	r5, #1
 80123ba:	d10b      	bne.n	80123d4 <__gethex+0x2a8>
 80123bc:	9a02      	ldr	r2, [sp, #8]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6013      	str	r3, [r2, #0]
 80123c2:	2301      	movs	r3, #1
 80123c4:	6123      	str	r3, [r4, #16]
 80123c6:	f8ca 3000 	str.w	r3, [sl]
 80123ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123cc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80123d0:	601c      	str	r4, [r3, #0]
 80123d2:	e735      	b.n	8012240 <__gethex+0x114>
 80123d4:	1e69      	subs	r1, r5, #1
 80123d6:	4620      	mov	r0, r4
 80123d8:	f7fe f99c 	bl	8010714 <__any_on>
 80123dc:	2800      	cmp	r0, #0
 80123de:	d1ed      	bne.n	80123bc <__gethex+0x290>
 80123e0:	4621      	mov	r1, r4
 80123e2:	4648      	mov	r0, r9
 80123e4:	f7fd fd4a 	bl	800fe7c <_Bfree>
 80123e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123ea:	2300      	movs	r3, #0
 80123ec:	6013      	str	r3, [r2, #0]
 80123ee:	f04f 0850 	mov.w	r8, #80	; 0x50
 80123f2:	e725      	b.n	8012240 <__gethex+0x114>
 80123f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d1f2      	bne.n	80123e0 <__gethex+0x2b4>
 80123fa:	e7df      	b.n	80123bc <__gethex+0x290>
 80123fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1dc      	bne.n	80123bc <__gethex+0x290>
 8012402:	e7ed      	b.n	80123e0 <__gethex+0x2b4>
 8012404:	080142cc 	.word	0x080142cc
 8012408:	08014163 	.word	0x08014163
 801240c:	08014491 	.word	0x08014491
 8012410:	f106 38ff 	add.w	r8, r6, #4294967295
 8012414:	f1bb 0f00 	cmp.w	fp, #0
 8012418:	d133      	bne.n	8012482 <__gethex+0x356>
 801241a:	f1b8 0f00 	cmp.w	r8, #0
 801241e:	d004      	beq.n	801242a <__gethex+0x2fe>
 8012420:	4641      	mov	r1, r8
 8012422:	4620      	mov	r0, r4
 8012424:	f7fe f976 	bl	8010714 <__any_on>
 8012428:	4683      	mov	fp, r0
 801242a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801242e:	2301      	movs	r3, #1
 8012430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012434:	f008 081f 	and.w	r8, r8, #31
 8012438:	fa03 f308 	lsl.w	r3, r3, r8
 801243c:	4213      	tst	r3, r2
 801243e:	4631      	mov	r1, r6
 8012440:	4620      	mov	r0, r4
 8012442:	bf18      	it	ne
 8012444:	f04b 0b02 	orrne.w	fp, fp, #2
 8012448:	1bad      	subs	r5, r5, r6
 801244a:	f7ff fe07 	bl	801205c <rshift>
 801244e:	687e      	ldr	r6, [r7, #4]
 8012450:	f04f 0802 	mov.w	r8, #2
 8012454:	f1bb 0f00 	cmp.w	fp, #0
 8012458:	d04a      	beq.n	80124f0 <__gethex+0x3c4>
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2b02      	cmp	r3, #2
 801245e:	d016      	beq.n	801248e <__gethex+0x362>
 8012460:	2b03      	cmp	r3, #3
 8012462:	d018      	beq.n	8012496 <__gethex+0x36a>
 8012464:	2b01      	cmp	r3, #1
 8012466:	d109      	bne.n	801247c <__gethex+0x350>
 8012468:	f01b 0f02 	tst.w	fp, #2
 801246c:	d006      	beq.n	801247c <__gethex+0x350>
 801246e:	f8da 3000 	ldr.w	r3, [sl]
 8012472:	ea4b 0b03 	orr.w	fp, fp, r3
 8012476:	f01b 0f01 	tst.w	fp, #1
 801247a:	d10f      	bne.n	801249c <__gethex+0x370>
 801247c:	f048 0810 	orr.w	r8, r8, #16
 8012480:	e036      	b.n	80124f0 <__gethex+0x3c4>
 8012482:	f04f 0b01 	mov.w	fp, #1
 8012486:	e7d0      	b.n	801242a <__gethex+0x2fe>
 8012488:	f04f 0801 	mov.w	r8, #1
 801248c:	e7e2      	b.n	8012454 <__gethex+0x328>
 801248e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012490:	f1c3 0301 	rsb	r3, r3, #1
 8012494:	930f      	str	r3, [sp, #60]	; 0x3c
 8012496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012498:	2b00      	cmp	r3, #0
 801249a:	d0ef      	beq.n	801247c <__gethex+0x350>
 801249c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80124a0:	f104 0214 	add.w	r2, r4, #20
 80124a4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80124a8:	9301      	str	r3, [sp, #4]
 80124aa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80124ae:	2300      	movs	r3, #0
 80124b0:	4694      	mov	ip, r2
 80124b2:	f852 1b04 	ldr.w	r1, [r2], #4
 80124b6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80124ba:	d01e      	beq.n	80124fa <__gethex+0x3ce>
 80124bc:	3101      	adds	r1, #1
 80124be:	f8cc 1000 	str.w	r1, [ip]
 80124c2:	f1b8 0f02 	cmp.w	r8, #2
 80124c6:	f104 0214 	add.w	r2, r4, #20
 80124ca:	d13d      	bne.n	8012548 <__gethex+0x41c>
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	3b01      	subs	r3, #1
 80124d0:	42ab      	cmp	r3, r5
 80124d2:	d10b      	bne.n	80124ec <__gethex+0x3c0>
 80124d4:	1169      	asrs	r1, r5, #5
 80124d6:	2301      	movs	r3, #1
 80124d8:	f005 051f 	and.w	r5, r5, #31
 80124dc:	fa03 f505 	lsl.w	r5, r3, r5
 80124e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124e4:	421d      	tst	r5, r3
 80124e6:	bf18      	it	ne
 80124e8:	f04f 0801 	movne.w	r8, #1
 80124ec:	f048 0820 	orr.w	r8, r8, #32
 80124f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124f2:	601c      	str	r4, [r3, #0]
 80124f4:	9b02      	ldr	r3, [sp, #8]
 80124f6:	601e      	str	r6, [r3, #0]
 80124f8:	e6a2      	b.n	8012240 <__gethex+0x114>
 80124fa:	4290      	cmp	r0, r2
 80124fc:	f842 3c04 	str.w	r3, [r2, #-4]
 8012500:	d8d6      	bhi.n	80124b0 <__gethex+0x384>
 8012502:	68a2      	ldr	r2, [r4, #8]
 8012504:	4593      	cmp	fp, r2
 8012506:	db17      	blt.n	8012538 <__gethex+0x40c>
 8012508:	6861      	ldr	r1, [r4, #4]
 801250a:	4648      	mov	r0, r9
 801250c:	3101      	adds	r1, #1
 801250e:	f7fd fc75 	bl	800fdfc <_Balloc>
 8012512:	4682      	mov	sl, r0
 8012514:	b918      	cbnz	r0, 801251e <__gethex+0x3f2>
 8012516:	4b1b      	ldr	r3, [pc, #108]	; (8012584 <__gethex+0x458>)
 8012518:	4602      	mov	r2, r0
 801251a:	2184      	movs	r1, #132	; 0x84
 801251c:	e6b3      	b.n	8012286 <__gethex+0x15a>
 801251e:	6922      	ldr	r2, [r4, #16]
 8012520:	3202      	adds	r2, #2
 8012522:	f104 010c 	add.w	r1, r4, #12
 8012526:	0092      	lsls	r2, r2, #2
 8012528:	300c      	adds	r0, #12
 801252a:	f7fc fd85 	bl	800f038 <memcpy>
 801252e:	4621      	mov	r1, r4
 8012530:	4648      	mov	r0, r9
 8012532:	f7fd fca3 	bl	800fe7c <_Bfree>
 8012536:	4654      	mov	r4, sl
 8012538:	6922      	ldr	r2, [r4, #16]
 801253a:	1c51      	adds	r1, r2, #1
 801253c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012540:	6121      	str	r1, [r4, #16]
 8012542:	2101      	movs	r1, #1
 8012544:	6151      	str	r1, [r2, #20]
 8012546:	e7bc      	b.n	80124c2 <__gethex+0x396>
 8012548:	6921      	ldr	r1, [r4, #16]
 801254a:	4559      	cmp	r1, fp
 801254c:	dd0b      	ble.n	8012566 <__gethex+0x43a>
 801254e:	2101      	movs	r1, #1
 8012550:	4620      	mov	r0, r4
 8012552:	f7ff fd83 	bl	801205c <rshift>
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	3601      	adds	r6, #1
 801255a:	42b3      	cmp	r3, r6
 801255c:	f6ff aedb 	blt.w	8012316 <__gethex+0x1ea>
 8012560:	f04f 0801 	mov.w	r8, #1
 8012564:	e7c2      	b.n	80124ec <__gethex+0x3c0>
 8012566:	f015 051f 	ands.w	r5, r5, #31
 801256a:	d0f9      	beq.n	8012560 <__gethex+0x434>
 801256c:	9b01      	ldr	r3, [sp, #4]
 801256e:	441a      	add	r2, r3
 8012570:	f1c5 0520 	rsb	r5, r5, #32
 8012574:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012578:	f7fd fd32 	bl	800ffe0 <__hi0bits>
 801257c:	42a8      	cmp	r0, r5
 801257e:	dbe6      	blt.n	801254e <__gethex+0x422>
 8012580:	e7ee      	b.n	8012560 <__gethex+0x434>
 8012582:	bf00      	nop
 8012584:	08014163 	.word	0x08014163

08012588 <L_shift>:
 8012588:	f1c2 0208 	rsb	r2, r2, #8
 801258c:	0092      	lsls	r2, r2, #2
 801258e:	b570      	push	{r4, r5, r6, lr}
 8012590:	f1c2 0620 	rsb	r6, r2, #32
 8012594:	6843      	ldr	r3, [r0, #4]
 8012596:	6804      	ldr	r4, [r0, #0]
 8012598:	fa03 f506 	lsl.w	r5, r3, r6
 801259c:	432c      	orrs	r4, r5
 801259e:	40d3      	lsrs	r3, r2
 80125a0:	6004      	str	r4, [r0, #0]
 80125a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80125a6:	4288      	cmp	r0, r1
 80125a8:	d3f4      	bcc.n	8012594 <L_shift+0xc>
 80125aa:	bd70      	pop	{r4, r5, r6, pc}

080125ac <__match>:
 80125ac:	b530      	push	{r4, r5, lr}
 80125ae:	6803      	ldr	r3, [r0, #0]
 80125b0:	3301      	adds	r3, #1
 80125b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125b6:	b914      	cbnz	r4, 80125be <__match+0x12>
 80125b8:	6003      	str	r3, [r0, #0]
 80125ba:	2001      	movs	r0, #1
 80125bc:	bd30      	pop	{r4, r5, pc}
 80125be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80125c6:	2d19      	cmp	r5, #25
 80125c8:	bf98      	it	ls
 80125ca:	3220      	addls	r2, #32
 80125cc:	42a2      	cmp	r2, r4
 80125ce:	d0f0      	beq.n	80125b2 <__match+0x6>
 80125d0:	2000      	movs	r0, #0
 80125d2:	e7f3      	b.n	80125bc <__match+0x10>

080125d4 <__hexnan>:
 80125d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d8:	680b      	ldr	r3, [r1, #0]
 80125da:	6801      	ldr	r1, [r0, #0]
 80125dc:	115e      	asrs	r6, r3, #5
 80125de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125e2:	f013 031f 	ands.w	r3, r3, #31
 80125e6:	b087      	sub	sp, #28
 80125e8:	bf18      	it	ne
 80125ea:	3604      	addne	r6, #4
 80125ec:	2500      	movs	r5, #0
 80125ee:	1f37      	subs	r7, r6, #4
 80125f0:	4682      	mov	sl, r0
 80125f2:	4690      	mov	r8, r2
 80125f4:	9301      	str	r3, [sp, #4]
 80125f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80125fa:	46b9      	mov	r9, r7
 80125fc:	463c      	mov	r4, r7
 80125fe:	9502      	str	r5, [sp, #8]
 8012600:	46ab      	mov	fp, r5
 8012602:	784a      	ldrb	r2, [r1, #1]
 8012604:	1c4b      	adds	r3, r1, #1
 8012606:	9303      	str	r3, [sp, #12]
 8012608:	b342      	cbz	r2, 801265c <__hexnan+0x88>
 801260a:	4610      	mov	r0, r2
 801260c:	9105      	str	r1, [sp, #20]
 801260e:	9204      	str	r2, [sp, #16]
 8012610:	f7ff fd76 	bl	8012100 <__hexdig_fun>
 8012614:	2800      	cmp	r0, #0
 8012616:	d14f      	bne.n	80126b8 <__hexnan+0xe4>
 8012618:	9a04      	ldr	r2, [sp, #16]
 801261a:	9905      	ldr	r1, [sp, #20]
 801261c:	2a20      	cmp	r2, #32
 801261e:	d818      	bhi.n	8012652 <__hexnan+0x7e>
 8012620:	9b02      	ldr	r3, [sp, #8]
 8012622:	459b      	cmp	fp, r3
 8012624:	dd13      	ble.n	801264e <__hexnan+0x7a>
 8012626:	454c      	cmp	r4, r9
 8012628:	d206      	bcs.n	8012638 <__hexnan+0x64>
 801262a:	2d07      	cmp	r5, #7
 801262c:	dc04      	bgt.n	8012638 <__hexnan+0x64>
 801262e:	462a      	mov	r2, r5
 8012630:	4649      	mov	r1, r9
 8012632:	4620      	mov	r0, r4
 8012634:	f7ff ffa8 	bl	8012588 <L_shift>
 8012638:	4544      	cmp	r4, r8
 801263a:	d950      	bls.n	80126de <__hexnan+0x10a>
 801263c:	2300      	movs	r3, #0
 801263e:	f1a4 0904 	sub.w	r9, r4, #4
 8012642:	f844 3c04 	str.w	r3, [r4, #-4]
 8012646:	f8cd b008 	str.w	fp, [sp, #8]
 801264a:	464c      	mov	r4, r9
 801264c:	461d      	mov	r5, r3
 801264e:	9903      	ldr	r1, [sp, #12]
 8012650:	e7d7      	b.n	8012602 <__hexnan+0x2e>
 8012652:	2a29      	cmp	r2, #41	; 0x29
 8012654:	d155      	bne.n	8012702 <__hexnan+0x12e>
 8012656:	3102      	adds	r1, #2
 8012658:	f8ca 1000 	str.w	r1, [sl]
 801265c:	f1bb 0f00 	cmp.w	fp, #0
 8012660:	d04f      	beq.n	8012702 <__hexnan+0x12e>
 8012662:	454c      	cmp	r4, r9
 8012664:	d206      	bcs.n	8012674 <__hexnan+0xa0>
 8012666:	2d07      	cmp	r5, #7
 8012668:	dc04      	bgt.n	8012674 <__hexnan+0xa0>
 801266a:	462a      	mov	r2, r5
 801266c:	4649      	mov	r1, r9
 801266e:	4620      	mov	r0, r4
 8012670:	f7ff ff8a 	bl	8012588 <L_shift>
 8012674:	4544      	cmp	r4, r8
 8012676:	d934      	bls.n	80126e2 <__hexnan+0x10e>
 8012678:	f1a8 0204 	sub.w	r2, r8, #4
 801267c:	4623      	mov	r3, r4
 801267e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012682:	f842 1f04 	str.w	r1, [r2, #4]!
 8012686:	429f      	cmp	r7, r3
 8012688:	d2f9      	bcs.n	801267e <__hexnan+0xaa>
 801268a:	1b3b      	subs	r3, r7, r4
 801268c:	f023 0303 	bic.w	r3, r3, #3
 8012690:	3304      	adds	r3, #4
 8012692:	3e03      	subs	r6, #3
 8012694:	3401      	adds	r4, #1
 8012696:	42a6      	cmp	r6, r4
 8012698:	bf38      	it	cc
 801269a:	2304      	movcc	r3, #4
 801269c:	4443      	add	r3, r8
 801269e:	2200      	movs	r2, #0
 80126a0:	f843 2b04 	str.w	r2, [r3], #4
 80126a4:	429f      	cmp	r7, r3
 80126a6:	d2fb      	bcs.n	80126a0 <__hexnan+0xcc>
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	b91b      	cbnz	r3, 80126b4 <__hexnan+0xe0>
 80126ac:	4547      	cmp	r7, r8
 80126ae:	d126      	bne.n	80126fe <__hexnan+0x12a>
 80126b0:	2301      	movs	r3, #1
 80126b2:	603b      	str	r3, [r7, #0]
 80126b4:	2005      	movs	r0, #5
 80126b6:	e025      	b.n	8012704 <__hexnan+0x130>
 80126b8:	3501      	adds	r5, #1
 80126ba:	2d08      	cmp	r5, #8
 80126bc:	f10b 0b01 	add.w	fp, fp, #1
 80126c0:	dd06      	ble.n	80126d0 <__hexnan+0xfc>
 80126c2:	4544      	cmp	r4, r8
 80126c4:	d9c3      	bls.n	801264e <__hexnan+0x7a>
 80126c6:	2300      	movs	r3, #0
 80126c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80126cc:	2501      	movs	r5, #1
 80126ce:	3c04      	subs	r4, #4
 80126d0:	6822      	ldr	r2, [r4, #0]
 80126d2:	f000 000f 	and.w	r0, r0, #15
 80126d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126da:	6020      	str	r0, [r4, #0]
 80126dc:	e7b7      	b.n	801264e <__hexnan+0x7a>
 80126de:	2508      	movs	r5, #8
 80126e0:	e7b5      	b.n	801264e <__hexnan+0x7a>
 80126e2:	9b01      	ldr	r3, [sp, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d0df      	beq.n	80126a8 <__hexnan+0xd4>
 80126e8:	f1c3 0320 	rsb	r3, r3, #32
 80126ec:	f04f 32ff 	mov.w	r2, #4294967295
 80126f0:	40da      	lsrs	r2, r3
 80126f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126f6:	4013      	ands	r3, r2
 80126f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80126fc:	e7d4      	b.n	80126a8 <__hexnan+0xd4>
 80126fe:	3f04      	subs	r7, #4
 8012700:	e7d2      	b.n	80126a8 <__hexnan+0xd4>
 8012702:	2004      	movs	r0, #4
 8012704:	b007      	add	sp, #28
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801270a <__ascii_mbtowc>:
 801270a:	b082      	sub	sp, #8
 801270c:	b901      	cbnz	r1, 8012710 <__ascii_mbtowc+0x6>
 801270e:	a901      	add	r1, sp, #4
 8012710:	b142      	cbz	r2, 8012724 <__ascii_mbtowc+0x1a>
 8012712:	b14b      	cbz	r3, 8012728 <__ascii_mbtowc+0x1e>
 8012714:	7813      	ldrb	r3, [r2, #0]
 8012716:	600b      	str	r3, [r1, #0]
 8012718:	7812      	ldrb	r2, [r2, #0]
 801271a:	1e10      	subs	r0, r2, #0
 801271c:	bf18      	it	ne
 801271e:	2001      	movne	r0, #1
 8012720:	b002      	add	sp, #8
 8012722:	4770      	bx	lr
 8012724:	4610      	mov	r0, r2
 8012726:	e7fb      	b.n	8012720 <__ascii_mbtowc+0x16>
 8012728:	f06f 0001 	mvn.w	r0, #1
 801272c:	e7f8      	b.n	8012720 <__ascii_mbtowc+0x16>

0801272e <_realloc_r>:
 801272e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012732:	4680      	mov	r8, r0
 8012734:	4614      	mov	r4, r2
 8012736:	460e      	mov	r6, r1
 8012738:	b921      	cbnz	r1, 8012744 <_realloc_r+0x16>
 801273a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801273e:	4611      	mov	r1, r2
 8012740:	f7fb bb52 	b.w	800dde8 <_malloc_r>
 8012744:	b92a      	cbnz	r2, 8012752 <_realloc_r+0x24>
 8012746:	f7fd fb05 	bl	800fd54 <_free_r>
 801274a:	4625      	mov	r5, r4
 801274c:	4628      	mov	r0, r5
 801274e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012752:	f000 f8b6 	bl	80128c2 <_malloc_usable_size_r>
 8012756:	4284      	cmp	r4, r0
 8012758:	4607      	mov	r7, r0
 801275a:	d802      	bhi.n	8012762 <_realloc_r+0x34>
 801275c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012760:	d812      	bhi.n	8012788 <_realloc_r+0x5a>
 8012762:	4621      	mov	r1, r4
 8012764:	4640      	mov	r0, r8
 8012766:	f7fb fb3f 	bl	800dde8 <_malloc_r>
 801276a:	4605      	mov	r5, r0
 801276c:	2800      	cmp	r0, #0
 801276e:	d0ed      	beq.n	801274c <_realloc_r+0x1e>
 8012770:	42bc      	cmp	r4, r7
 8012772:	4622      	mov	r2, r4
 8012774:	4631      	mov	r1, r6
 8012776:	bf28      	it	cs
 8012778:	463a      	movcs	r2, r7
 801277a:	f7fc fc5d 	bl	800f038 <memcpy>
 801277e:	4631      	mov	r1, r6
 8012780:	4640      	mov	r0, r8
 8012782:	f7fd fae7 	bl	800fd54 <_free_r>
 8012786:	e7e1      	b.n	801274c <_realloc_r+0x1e>
 8012788:	4635      	mov	r5, r6
 801278a:	e7df      	b.n	801274c <_realloc_r+0x1e>

0801278c <_strtoul_l.constprop.0>:
 801278c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012790:	4f36      	ldr	r7, [pc, #216]	; (801286c <_strtoul_l.constprop.0+0xe0>)
 8012792:	4686      	mov	lr, r0
 8012794:	460d      	mov	r5, r1
 8012796:	4628      	mov	r0, r5
 8012798:	f815 4b01 	ldrb.w	r4, [r5], #1
 801279c:	5d3e      	ldrb	r6, [r7, r4]
 801279e:	f016 0608 	ands.w	r6, r6, #8
 80127a2:	d1f8      	bne.n	8012796 <_strtoul_l.constprop.0+0xa>
 80127a4:	2c2d      	cmp	r4, #45	; 0x2d
 80127a6:	d130      	bne.n	801280a <_strtoul_l.constprop.0+0x7e>
 80127a8:	782c      	ldrb	r4, [r5, #0]
 80127aa:	2601      	movs	r6, #1
 80127ac:	1c85      	adds	r5, r0, #2
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d057      	beq.n	8012862 <_strtoul_l.constprop.0+0xd6>
 80127b2:	2b10      	cmp	r3, #16
 80127b4:	d109      	bne.n	80127ca <_strtoul_l.constprop.0+0x3e>
 80127b6:	2c30      	cmp	r4, #48	; 0x30
 80127b8:	d107      	bne.n	80127ca <_strtoul_l.constprop.0+0x3e>
 80127ba:	7828      	ldrb	r0, [r5, #0]
 80127bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80127c0:	2858      	cmp	r0, #88	; 0x58
 80127c2:	d149      	bne.n	8012858 <_strtoul_l.constprop.0+0xcc>
 80127c4:	786c      	ldrb	r4, [r5, #1]
 80127c6:	2310      	movs	r3, #16
 80127c8:	3502      	adds	r5, #2
 80127ca:	f04f 38ff 	mov.w	r8, #4294967295
 80127ce:	2700      	movs	r7, #0
 80127d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80127d4:	fb03 f908 	mul.w	r9, r3, r8
 80127d8:	ea6f 0909 	mvn.w	r9, r9
 80127dc:	4638      	mov	r0, r7
 80127de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80127e2:	f1bc 0f09 	cmp.w	ip, #9
 80127e6:	d815      	bhi.n	8012814 <_strtoul_l.constprop.0+0x88>
 80127e8:	4664      	mov	r4, ip
 80127ea:	42a3      	cmp	r3, r4
 80127ec:	dd23      	ble.n	8012836 <_strtoul_l.constprop.0+0xaa>
 80127ee:	f1b7 3fff 	cmp.w	r7, #4294967295
 80127f2:	d007      	beq.n	8012804 <_strtoul_l.constprop.0+0x78>
 80127f4:	4580      	cmp	r8, r0
 80127f6:	d31b      	bcc.n	8012830 <_strtoul_l.constprop.0+0xa4>
 80127f8:	d101      	bne.n	80127fe <_strtoul_l.constprop.0+0x72>
 80127fa:	45a1      	cmp	r9, r4
 80127fc:	db18      	blt.n	8012830 <_strtoul_l.constprop.0+0xa4>
 80127fe:	fb00 4003 	mla	r0, r0, r3, r4
 8012802:	2701      	movs	r7, #1
 8012804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012808:	e7e9      	b.n	80127de <_strtoul_l.constprop.0+0x52>
 801280a:	2c2b      	cmp	r4, #43	; 0x2b
 801280c:	bf04      	itt	eq
 801280e:	782c      	ldrbeq	r4, [r5, #0]
 8012810:	1c85      	addeq	r5, r0, #2
 8012812:	e7cc      	b.n	80127ae <_strtoul_l.constprop.0+0x22>
 8012814:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012818:	f1bc 0f19 	cmp.w	ip, #25
 801281c:	d801      	bhi.n	8012822 <_strtoul_l.constprop.0+0x96>
 801281e:	3c37      	subs	r4, #55	; 0x37
 8012820:	e7e3      	b.n	80127ea <_strtoul_l.constprop.0+0x5e>
 8012822:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012826:	f1bc 0f19 	cmp.w	ip, #25
 801282a:	d804      	bhi.n	8012836 <_strtoul_l.constprop.0+0xaa>
 801282c:	3c57      	subs	r4, #87	; 0x57
 801282e:	e7dc      	b.n	80127ea <_strtoul_l.constprop.0+0x5e>
 8012830:	f04f 37ff 	mov.w	r7, #4294967295
 8012834:	e7e6      	b.n	8012804 <_strtoul_l.constprop.0+0x78>
 8012836:	1c7b      	adds	r3, r7, #1
 8012838:	d106      	bne.n	8012848 <_strtoul_l.constprop.0+0xbc>
 801283a:	2322      	movs	r3, #34	; 0x22
 801283c:	f8ce 3000 	str.w	r3, [lr]
 8012840:	4638      	mov	r0, r7
 8012842:	b932      	cbnz	r2, 8012852 <_strtoul_l.constprop.0+0xc6>
 8012844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012848:	b106      	cbz	r6, 801284c <_strtoul_l.constprop.0+0xc0>
 801284a:	4240      	negs	r0, r0
 801284c:	2a00      	cmp	r2, #0
 801284e:	d0f9      	beq.n	8012844 <_strtoul_l.constprop.0+0xb8>
 8012850:	b107      	cbz	r7, 8012854 <_strtoul_l.constprop.0+0xc8>
 8012852:	1e69      	subs	r1, r5, #1
 8012854:	6011      	str	r1, [r2, #0]
 8012856:	e7f5      	b.n	8012844 <_strtoul_l.constprop.0+0xb8>
 8012858:	2430      	movs	r4, #48	; 0x30
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1b5      	bne.n	80127ca <_strtoul_l.constprop.0+0x3e>
 801285e:	2308      	movs	r3, #8
 8012860:	e7b3      	b.n	80127ca <_strtoul_l.constprop.0+0x3e>
 8012862:	2c30      	cmp	r4, #48	; 0x30
 8012864:	d0a9      	beq.n	80127ba <_strtoul_l.constprop.0+0x2e>
 8012866:	230a      	movs	r3, #10
 8012868:	e7af      	b.n	80127ca <_strtoul_l.constprop.0+0x3e>
 801286a:	bf00      	nop
 801286c:	08014321 	.word	0x08014321

08012870 <_strtoul_r>:
 8012870:	f7ff bf8c 	b.w	801278c <_strtoul_l.constprop.0>

08012874 <__ascii_wctomb>:
 8012874:	b149      	cbz	r1, 801288a <__ascii_wctomb+0x16>
 8012876:	2aff      	cmp	r2, #255	; 0xff
 8012878:	bf85      	ittet	hi
 801287a:	238a      	movhi	r3, #138	; 0x8a
 801287c:	6003      	strhi	r3, [r0, #0]
 801287e:	700a      	strbls	r2, [r1, #0]
 8012880:	f04f 30ff 	movhi.w	r0, #4294967295
 8012884:	bf98      	it	ls
 8012886:	2001      	movls	r0, #1
 8012888:	4770      	bx	lr
 801288a:	4608      	mov	r0, r1
 801288c:	4770      	bx	lr
	...

08012890 <fiprintf>:
 8012890:	b40e      	push	{r1, r2, r3}
 8012892:	b503      	push	{r0, r1, lr}
 8012894:	4601      	mov	r1, r0
 8012896:	ab03      	add	r3, sp, #12
 8012898:	4805      	ldr	r0, [pc, #20]	; (80128b0 <fiprintf+0x20>)
 801289a:	f853 2b04 	ldr.w	r2, [r3], #4
 801289e:	6800      	ldr	r0, [r0, #0]
 80128a0:	9301      	str	r3, [sp, #4]
 80128a2:	f000 f83f 	bl	8012924 <_vfiprintf_r>
 80128a6:	b002      	add	sp, #8
 80128a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80128ac:	b003      	add	sp, #12
 80128ae:	4770      	bx	lr
 80128b0:	2000006c 	.word	0x2000006c

080128b4 <abort>:
 80128b4:	b508      	push	{r3, lr}
 80128b6:	2006      	movs	r0, #6
 80128b8:	f000 fa0c 	bl	8012cd4 <raise>
 80128bc:	2001      	movs	r0, #1
 80128be:	f7ef fcad 	bl	800221c <_exit>

080128c2 <_malloc_usable_size_r>:
 80128c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128c6:	1f18      	subs	r0, r3, #4
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	bfbc      	itt	lt
 80128cc:	580b      	ldrlt	r3, [r1, r0]
 80128ce:	18c0      	addlt	r0, r0, r3
 80128d0:	4770      	bx	lr

080128d2 <__sfputc_r>:
 80128d2:	6893      	ldr	r3, [r2, #8]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	b410      	push	{r4}
 80128da:	6093      	str	r3, [r2, #8]
 80128dc:	da08      	bge.n	80128f0 <__sfputc_r+0x1e>
 80128de:	6994      	ldr	r4, [r2, #24]
 80128e0:	42a3      	cmp	r3, r4
 80128e2:	db01      	blt.n	80128e8 <__sfputc_r+0x16>
 80128e4:	290a      	cmp	r1, #10
 80128e6:	d103      	bne.n	80128f0 <__sfputc_r+0x1e>
 80128e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128ec:	f000 b934 	b.w	8012b58 <__swbuf_r>
 80128f0:	6813      	ldr	r3, [r2, #0]
 80128f2:	1c58      	adds	r0, r3, #1
 80128f4:	6010      	str	r0, [r2, #0]
 80128f6:	7019      	strb	r1, [r3, #0]
 80128f8:	4608      	mov	r0, r1
 80128fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <__sfputs_r>:
 8012900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012902:	4606      	mov	r6, r0
 8012904:	460f      	mov	r7, r1
 8012906:	4614      	mov	r4, r2
 8012908:	18d5      	adds	r5, r2, r3
 801290a:	42ac      	cmp	r4, r5
 801290c:	d101      	bne.n	8012912 <__sfputs_r+0x12>
 801290e:	2000      	movs	r0, #0
 8012910:	e007      	b.n	8012922 <__sfputs_r+0x22>
 8012912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012916:	463a      	mov	r2, r7
 8012918:	4630      	mov	r0, r6
 801291a:	f7ff ffda 	bl	80128d2 <__sfputc_r>
 801291e:	1c43      	adds	r3, r0, #1
 8012920:	d1f3      	bne.n	801290a <__sfputs_r+0xa>
 8012922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012924 <_vfiprintf_r>:
 8012924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012928:	460d      	mov	r5, r1
 801292a:	b09d      	sub	sp, #116	; 0x74
 801292c:	4614      	mov	r4, r2
 801292e:	4698      	mov	r8, r3
 8012930:	4606      	mov	r6, r0
 8012932:	b118      	cbz	r0, 801293c <_vfiprintf_r+0x18>
 8012934:	6a03      	ldr	r3, [r0, #32]
 8012936:	b90b      	cbnz	r3, 801293c <_vfiprintf_r+0x18>
 8012938:	f7fc f9d2 	bl	800ece0 <__sinit>
 801293c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801293e:	07d9      	lsls	r1, r3, #31
 8012940:	d405      	bmi.n	801294e <_vfiprintf_r+0x2a>
 8012942:	89ab      	ldrh	r3, [r5, #12]
 8012944:	059a      	lsls	r2, r3, #22
 8012946:	d402      	bmi.n	801294e <_vfiprintf_r+0x2a>
 8012948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801294a:	f7fc fb73 	bl	800f034 <__retarget_lock_acquire_recursive>
 801294e:	89ab      	ldrh	r3, [r5, #12]
 8012950:	071b      	lsls	r3, r3, #28
 8012952:	d501      	bpl.n	8012958 <_vfiprintf_r+0x34>
 8012954:	692b      	ldr	r3, [r5, #16]
 8012956:	b99b      	cbnz	r3, 8012980 <_vfiprintf_r+0x5c>
 8012958:	4629      	mov	r1, r5
 801295a:	4630      	mov	r0, r6
 801295c:	f000 f93a 	bl	8012bd4 <__swsetup_r>
 8012960:	b170      	cbz	r0, 8012980 <_vfiprintf_r+0x5c>
 8012962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012964:	07dc      	lsls	r4, r3, #31
 8012966:	d504      	bpl.n	8012972 <_vfiprintf_r+0x4e>
 8012968:	f04f 30ff 	mov.w	r0, #4294967295
 801296c:	b01d      	add	sp, #116	; 0x74
 801296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012972:	89ab      	ldrh	r3, [r5, #12]
 8012974:	0598      	lsls	r0, r3, #22
 8012976:	d4f7      	bmi.n	8012968 <_vfiprintf_r+0x44>
 8012978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801297a:	f7fc fb5c 	bl	800f036 <__retarget_lock_release_recursive>
 801297e:	e7f3      	b.n	8012968 <_vfiprintf_r+0x44>
 8012980:	2300      	movs	r3, #0
 8012982:	9309      	str	r3, [sp, #36]	; 0x24
 8012984:	2320      	movs	r3, #32
 8012986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801298a:	f8cd 800c 	str.w	r8, [sp, #12]
 801298e:	2330      	movs	r3, #48	; 0x30
 8012990:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012b44 <_vfiprintf_r+0x220>
 8012994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012998:	f04f 0901 	mov.w	r9, #1
 801299c:	4623      	mov	r3, r4
 801299e:	469a      	mov	sl, r3
 80129a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129a4:	b10a      	cbz	r2, 80129aa <_vfiprintf_r+0x86>
 80129a6:	2a25      	cmp	r2, #37	; 0x25
 80129a8:	d1f9      	bne.n	801299e <_vfiprintf_r+0x7a>
 80129aa:	ebba 0b04 	subs.w	fp, sl, r4
 80129ae:	d00b      	beq.n	80129c8 <_vfiprintf_r+0xa4>
 80129b0:	465b      	mov	r3, fp
 80129b2:	4622      	mov	r2, r4
 80129b4:	4629      	mov	r1, r5
 80129b6:	4630      	mov	r0, r6
 80129b8:	f7ff ffa2 	bl	8012900 <__sfputs_r>
 80129bc:	3001      	adds	r0, #1
 80129be:	f000 80a9 	beq.w	8012b14 <_vfiprintf_r+0x1f0>
 80129c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129c4:	445a      	add	r2, fp
 80129c6:	9209      	str	r2, [sp, #36]	; 0x24
 80129c8:	f89a 3000 	ldrb.w	r3, [sl]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	f000 80a1 	beq.w	8012b14 <_vfiprintf_r+0x1f0>
 80129d2:	2300      	movs	r3, #0
 80129d4:	f04f 32ff 	mov.w	r2, #4294967295
 80129d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129dc:	f10a 0a01 	add.w	sl, sl, #1
 80129e0:	9304      	str	r3, [sp, #16]
 80129e2:	9307      	str	r3, [sp, #28]
 80129e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129e8:	931a      	str	r3, [sp, #104]	; 0x68
 80129ea:	4654      	mov	r4, sl
 80129ec:	2205      	movs	r2, #5
 80129ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129f2:	4854      	ldr	r0, [pc, #336]	; (8012b44 <_vfiprintf_r+0x220>)
 80129f4:	f7ed fc0c 	bl	8000210 <memchr>
 80129f8:	9a04      	ldr	r2, [sp, #16]
 80129fa:	b9d8      	cbnz	r0, 8012a34 <_vfiprintf_r+0x110>
 80129fc:	06d1      	lsls	r1, r2, #27
 80129fe:	bf44      	itt	mi
 8012a00:	2320      	movmi	r3, #32
 8012a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a06:	0713      	lsls	r3, r2, #28
 8012a08:	bf44      	itt	mi
 8012a0a:	232b      	movmi	r3, #43	; 0x2b
 8012a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a10:	f89a 3000 	ldrb.w	r3, [sl]
 8012a14:	2b2a      	cmp	r3, #42	; 0x2a
 8012a16:	d015      	beq.n	8012a44 <_vfiprintf_r+0x120>
 8012a18:	9a07      	ldr	r2, [sp, #28]
 8012a1a:	4654      	mov	r4, sl
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	f04f 0c0a 	mov.w	ip, #10
 8012a22:	4621      	mov	r1, r4
 8012a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a28:	3b30      	subs	r3, #48	; 0x30
 8012a2a:	2b09      	cmp	r3, #9
 8012a2c:	d94d      	bls.n	8012aca <_vfiprintf_r+0x1a6>
 8012a2e:	b1b0      	cbz	r0, 8012a5e <_vfiprintf_r+0x13a>
 8012a30:	9207      	str	r2, [sp, #28]
 8012a32:	e014      	b.n	8012a5e <_vfiprintf_r+0x13a>
 8012a34:	eba0 0308 	sub.w	r3, r0, r8
 8012a38:	fa09 f303 	lsl.w	r3, r9, r3
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	9304      	str	r3, [sp, #16]
 8012a40:	46a2      	mov	sl, r4
 8012a42:	e7d2      	b.n	80129ea <_vfiprintf_r+0xc6>
 8012a44:	9b03      	ldr	r3, [sp, #12]
 8012a46:	1d19      	adds	r1, r3, #4
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	9103      	str	r1, [sp, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	bfbb      	ittet	lt
 8012a50:	425b      	neglt	r3, r3
 8012a52:	f042 0202 	orrlt.w	r2, r2, #2
 8012a56:	9307      	strge	r3, [sp, #28]
 8012a58:	9307      	strlt	r3, [sp, #28]
 8012a5a:	bfb8      	it	lt
 8012a5c:	9204      	strlt	r2, [sp, #16]
 8012a5e:	7823      	ldrb	r3, [r4, #0]
 8012a60:	2b2e      	cmp	r3, #46	; 0x2e
 8012a62:	d10c      	bne.n	8012a7e <_vfiprintf_r+0x15a>
 8012a64:	7863      	ldrb	r3, [r4, #1]
 8012a66:	2b2a      	cmp	r3, #42	; 0x2a
 8012a68:	d134      	bne.n	8012ad4 <_vfiprintf_r+0x1b0>
 8012a6a:	9b03      	ldr	r3, [sp, #12]
 8012a6c:	1d1a      	adds	r2, r3, #4
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	9203      	str	r2, [sp, #12]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	bfb8      	it	lt
 8012a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a7a:	3402      	adds	r4, #2
 8012a7c:	9305      	str	r3, [sp, #20]
 8012a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012b54 <_vfiprintf_r+0x230>
 8012a82:	7821      	ldrb	r1, [r4, #0]
 8012a84:	2203      	movs	r2, #3
 8012a86:	4650      	mov	r0, sl
 8012a88:	f7ed fbc2 	bl	8000210 <memchr>
 8012a8c:	b138      	cbz	r0, 8012a9e <_vfiprintf_r+0x17a>
 8012a8e:	9b04      	ldr	r3, [sp, #16]
 8012a90:	eba0 000a 	sub.w	r0, r0, sl
 8012a94:	2240      	movs	r2, #64	; 0x40
 8012a96:	4082      	lsls	r2, r0
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	3401      	adds	r4, #1
 8012a9c:	9304      	str	r3, [sp, #16]
 8012a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aa2:	4829      	ldr	r0, [pc, #164]	; (8012b48 <_vfiprintf_r+0x224>)
 8012aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012aa8:	2206      	movs	r2, #6
 8012aaa:	f7ed fbb1 	bl	8000210 <memchr>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d03f      	beq.n	8012b32 <_vfiprintf_r+0x20e>
 8012ab2:	4b26      	ldr	r3, [pc, #152]	; (8012b4c <_vfiprintf_r+0x228>)
 8012ab4:	bb1b      	cbnz	r3, 8012afe <_vfiprintf_r+0x1da>
 8012ab6:	9b03      	ldr	r3, [sp, #12]
 8012ab8:	3307      	adds	r3, #7
 8012aba:	f023 0307 	bic.w	r3, r3, #7
 8012abe:	3308      	adds	r3, #8
 8012ac0:	9303      	str	r3, [sp, #12]
 8012ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac4:	443b      	add	r3, r7
 8012ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac8:	e768      	b.n	801299c <_vfiprintf_r+0x78>
 8012aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ace:	460c      	mov	r4, r1
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	e7a6      	b.n	8012a22 <_vfiprintf_r+0xfe>
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	3401      	adds	r4, #1
 8012ad8:	9305      	str	r3, [sp, #20]
 8012ada:	4619      	mov	r1, r3
 8012adc:	f04f 0c0a 	mov.w	ip, #10
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ae6:	3a30      	subs	r2, #48	; 0x30
 8012ae8:	2a09      	cmp	r2, #9
 8012aea:	d903      	bls.n	8012af4 <_vfiprintf_r+0x1d0>
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d0c6      	beq.n	8012a7e <_vfiprintf_r+0x15a>
 8012af0:	9105      	str	r1, [sp, #20]
 8012af2:	e7c4      	b.n	8012a7e <_vfiprintf_r+0x15a>
 8012af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012af8:	4604      	mov	r4, r0
 8012afa:	2301      	movs	r3, #1
 8012afc:	e7f0      	b.n	8012ae0 <_vfiprintf_r+0x1bc>
 8012afe:	ab03      	add	r3, sp, #12
 8012b00:	9300      	str	r3, [sp, #0]
 8012b02:	462a      	mov	r2, r5
 8012b04:	4b12      	ldr	r3, [pc, #72]	; (8012b50 <_vfiprintf_r+0x22c>)
 8012b06:	a904      	add	r1, sp, #16
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f7fb fa99 	bl	800e040 <_printf_float>
 8012b0e:	4607      	mov	r7, r0
 8012b10:	1c78      	adds	r0, r7, #1
 8012b12:	d1d6      	bne.n	8012ac2 <_vfiprintf_r+0x19e>
 8012b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b16:	07d9      	lsls	r1, r3, #31
 8012b18:	d405      	bmi.n	8012b26 <_vfiprintf_r+0x202>
 8012b1a:	89ab      	ldrh	r3, [r5, #12]
 8012b1c:	059a      	lsls	r2, r3, #22
 8012b1e:	d402      	bmi.n	8012b26 <_vfiprintf_r+0x202>
 8012b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b22:	f7fc fa88 	bl	800f036 <__retarget_lock_release_recursive>
 8012b26:	89ab      	ldrh	r3, [r5, #12]
 8012b28:	065b      	lsls	r3, r3, #25
 8012b2a:	f53f af1d 	bmi.w	8012968 <_vfiprintf_r+0x44>
 8012b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b30:	e71c      	b.n	801296c <_vfiprintf_r+0x48>
 8012b32:	ab03      	add	r3, sp, #12
 8012b34:	9300      	str	r3, [sp, #0]
 8012b36:	462a      	mov	r2, r5
 8012b38:	4b05      	ldr	r3, [pc, #20]	; (8012b50 <_vfiprintf_r+0x22c>)
 8012b3a:	a904      	add	r1, sp, #16
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f7fb fd23 	bl	800e588 <_printf_i>
 8012b42:	e7e4      	b.n	8012b0e <_vfiprintf_r+0x1ea>
 8012b44:	08014421 	.word	0x08014421
 8012b48:	0801442b 	.word	0x0801442b
 8012b4c:	0800e041 	.word	0x0800e041
 8012b50:	08012901 	.word	0x08012901
 8012b54:	08014427 	.word	0x08014427

08012b58 <__swbuf_r>:
 8012b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5a:	460e      	mov	r6, r1
 8012b5c:	4614      	mov	r4, r2
 8012b5e:	4605      	mov	r5, r0
 8012b60:	b118      	cbz	r0, 8012b6a <__swbuf_r+0x12>
 8012b62:	6a03      	ldr	r3, [r0, #32]
 8012b64:	b90b      	cbnz	r3, 8012b6a <__swbuf_r+0x12>
 8012b66:	f7fc f8bb 	bl	800ece0 <__sinit>
 8012b6a:	69a3      	ldr	r3, [r4, #24]
 8012b6c:	60a3      	str	r3, [r4, #8]
 8012b6e:	89a3      	ldrh	r3, [r4, #12]
 8012b70:	071a      	lsls	r2, r3, #28
 8012b72:	d525      	bpl.n	8012bc0 <__swbuf_r+0x68>
 8012b74:	6923      	ldr	r3, [r4, #16]
 8012b76:	b31b      	cbz	r3, 8012bc0 <__swbuf_r+0x68>
 8012b78:	6823      	ldr	r3, [r4, #0]
 8012b7a:	6922      	ldr	r2, [r4, #16]
 8012b7c:	1a98      	subs	r0, r3, r2
 8012b7e:	6963      	ldr	r3, [r4, #20]
 8012b80:	b2f6      	uxtb	r6, r6
 8012b82:	4283      	cmp	r3, r0
 8012b84:	4637      	mov	r7, r6
 8012b86:	dc04      	bgt.n	8012b92 <__swbuf_r+0x3a>
 8012b88:	4621      	mov	r1, r4
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	f7ff f978 	bl	8011e80 <_fflush_r>
 8012b90:	b9e0      	cbnz	r0, 8012bcc <__swbuf_r+0x74>
 8012b92:	68a3      	ldr	r3, [r4, #8]
 8012b94:	3b01      	subs	r3, #1
 8012b96:	60a3      	str	r3, [r4, #8]
 8012b98:	6823      	ldr	r3, [r4, #0]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	6022      	str	r2, [r4, #0]
 8012b9e:	701e      	strb	r6, [r3, #0]
 8012ba0:	6962      	ldr	r2, [r4, #20]
 8012ba2:	1c43      	adds	r3, r0, #1
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d004      	beq.n	8012bb2 <__swbuf_r+0x5a>
 8012ba8:	89a3      	ldrh	r3, [r4, #12]
 8012baa:	07db      	lsls	r3, r3, #31
 8012bac:	d506      	bpl.n	8012bbc <__swbuf_r+0x64>
 8012bae:	2e0a      	cmp	r6, #10
 8012bb0:	d104      	bne.n	8012bbc <__swbuf_r+0x64>
 8012bb2:	4621      	mov	r1, r4
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	f7ff f963 	bl	8011e80 <_fflush_r>
 8012bba:	b938      	cbnz	r0, 8012bcc <__swbuf_r+0x74>
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bc0:	4621      	mov	r1, r4
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f000 f806 	bl	8012bd4 <__swsetup_r>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d0d5      	beq.n	8012b78 <__swbuf_r+0x20>
 8012bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8012bd0:	e7f4      	b.n	8012bbc <__swbuf_r+0x64>
	...

08012bd4 <__swsetup_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	4b2a      	ldr	r3, [pc, #168]	; (8012c80 <__swsetup_r+0xac>)
 8012bd8:	4605      	mov	r5, r0
 8012bda:	6818      	ldr	r0, [r3, #0]
 8012bdc:	460c      	mov	r4, r1
 8012bde:	b118      	cbz	r0, 8012be8 <__swsetup_r+0x14>
 8012be0:	6a03      	ldr	r3, [r0, #32]
 8012be2:	b90b      	cbnz	r3, 8012be8 <__swsetup_r+0x14>
 8012be4:	f7fc f87c 	bl	800ece0 <__sinit>
 8012be8:	89a3      	ldrh	r3, [r4, #12]
 8012bea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bee:	0718      	lsls	r0, r3, #28
 8012bf0:	d422      	bmi.n	8012c38 <__swsetup_r+0x64>
 8012bf2:	06d9      	lsls	r1, r3, #27
 8012bf4:	d407      	bmi.n	8012c06 <__swsetup_r+0x32>
 8012bf6:	2309      	movs	r3, #9
 8012bf8:	602b      	str	r3, [r5, #0]
 8012bfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bfe:	81a3      	strh	r3, [r4, #12]
 8012c00:	f04f 30ff 	mov.w	r0, #4294967295
 8012c04:	e034      	b.n	8012c70 <__swsetup_r+0x9c>
 8012c06:	0758      	lsls	r0, r3, #29
 8012c08:	d512      	bpl.n	8012c30 <__swsetup_r+0x5c>
 8012c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c0c:	b141      	cbz	r1, 8012c20 <__swsetup_r+0x4c>
 8012c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c12:	4299      	cmp	r1, r3
 8012c14:	d002      	beq.n	8012c1c <__swsetup_r+0x48>
 8012c16:	4628      	mov	r0, r5
 8012c18:	f7fd f89c 	bl	800fd54 <_free_r>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	6363      	str	r3, [r4, #52]	; 0x34
 8012c20:	89a3      	ldrh	r3, [r4, #12]
 8012c22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c26:	81a3      	strh	r3, [r4, #12]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	6063      	str	r3, [r4, #4]
 8012c2c:	6923      	ldr	r3, [r4, #16]
 8012c2e:	6023      	str	r3, [r4, #0]
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	f043 0308 	orr.w	r3, r3, #8
 8012c36:	81a3      	strh	r3, [r4, #12]
 8012c38:	6923      	ldr	r3, [r4, #16]
 8012c3a:	b94b      	cbnz	r3, 8012c50 <__swsetup_r+0x7c>
 8012c3c:	89a3      	ldrh	r3, [r4, #12]
 8012c3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c46:	d003      	beq.n	8012c50 <__swsetup_r+0x7c>
 8012c48:	4621      	mov	r1, r4
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	f000 f884 	bl	8012d58 <__smakebuf_r>
 8012c50:	89a0      	ldrh	r0, [r4, #12]
 8012c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c56:	f010 0301 	ands.w	r3, r0, #1
 8012c5a:	d00a      	beq.n	8012c72 <__swsetup_r+0x9e>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	60a3      	str	r3, [r4, #8]
 8012c60:	6963      	ldr	r3, [r4, #20]
 8012c62:	425b      	negs	r3, r3
 8012c64:	61a3      	str	r3, [r4, #24]
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	b943      	cbnz	r3, 8012c7c <__swsetup_r+0xa8>
 8012c6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c6e:	d1c4      	bne.n	8012bfa <__swsetup_r+0x26>
 8012c70:	bd38      	pop	{r3, r4, r5, pc}
 8012c72:	0781      	lsls	r1, r0, #30
 8012c74:	bf58      	it	pl
 8012c76:	6963      	ldrpl	r3, [r4, #20]
 8012c78:	60a3      	str	r3, [r4, #8]
 8012c7a:	e7f4      	b.n	8012c66 <__swsetup_r+0x92>
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	e7f7      	b.n	8012c70 <__swsetup_r+0x9c>
 8012c80:	2000006c 	.word	0x2000006c

08012c84 <_raise_r>:
 8012c84:	291f      	cmp	r1, #31
 8012c86:	b538      	push	{r3, r4, r5, lr}
 8012c88:	4604      	mov	r4, r0
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	d904      	bls.n	8012c98 <_raise_r+0x14>
 8012c8e:	2316      	movs	r3, #22
 8012c90:	6003      	str	r3, [r0, #0]
 8012c92:	f04f 30ff 	mov.w	r0, #4294967295
 8012c96:	bd38      	pop	{r3, r4, r5, pc}
 8012c98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012c9a:	b112      	cbz	r2, 8012ca2 <_raise_r+0x1e>
 8012c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ca0:	b94b      	cbnz	r3, 8012cb6 <_raise_r+0x32>
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f000 f830 	bl	8012d08 <_getpid_r>
 8012ca8:	462a      	mov	r2, r5
 8012caa:	4601      	mov	r1, r0
 8012cac:	4620      	mov	r0, r4
 8012cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cb2:	f000 b817 	b.w	8012ce4 <_kill_r>
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d00a      	beq.n	8012cd0 <_raise_r+0x4c>
 8012cba:	1c59      	adds	r1, r3, #1
 8012cbc:	d103      	bne.n	8012cc6 <_raise_r+0x42>
 8012cbe:	2316      	movs	r3, #22
 8012cc0:	6003      	str	r3, [r0, #0]
 8012cc2:	2001      	movs	r0, #1
 8012cc4:	e7e7      	b.n	8012c96 <_raise_r+0x12>
 8012cc6:	2400      	movs	r4, #0
 8012cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ccc:	4628      	mov	r0, r5
 8012cce:	4798      	blx	r3
 8012cd0:	2000      	movs	r0, #0
 8012cd2:	e7e0      	b.n	8012c96 <_raise_r+0x12>

08012cd4 <raise>:
 8012cd4:	4b02      	ldr	r3, [pc, #8]	; (8012ce0 <raise+0xc>)
 8012cd6:	4601      	mov	r1, r0
 8012cd8:	6818      	ldr	r0, [r3, #0]
 8012cda:	f7ff bfd3 	b.w	8012c84 <_raise_r>
 8012cde:	bf00      	nop
 8012ce0:	2000006c 	.word	0x2000006c

08012ce4 <_kill_r>:
 8012ce4:	b538      	push	{r3, r4, r5, lr}
 8012ce6:	4d07      	ldr	r5, [pc, #28]	; (8012d04 <_kill_r+0x20>)
 8012ce8:	2300      	movs	r3, #0
 8012cea:	4604      	mov	r4, r0
 8012cec:	4608      	mov	r0, r1
 8012cee:	4611      	mov	r1, r2
 8012cf0:	602b      	str	r3, [r5, #0]
 8012cf2:	f7ef fa83 	bl	80021fc <_kill>
 8012cf6:	1c43      	adds	r3, r0, #1
 8012cf8:	d102      	bne.n	8012d00 <_kill_r+0x1c>
 8012cfa:	682b      	ldr	r3, [r5, #0]
 8012cfc:	b103      	cbz	r3, 8012d00 <_kill_r+0x1c>
 8012cfe:	6023      	str	r3, [r4, #0]
 8012d00:	bd38      	pop	{r3, r4, r5, pc}
 8012d02:	bf00      	nop
 8012d04:	20007198 	.word	0x20007198

08012d08 <_getpid_r>:
 8012d08:	f7ef ba70 	b.w	80021ec <_getpid>

08012d0c <__swhatbuf_r>:
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	460c      	mov	r4, r1
 8012d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d14:	2900      	cmp	r1, #0
 8012d16:	b096      	sub	sp, #88	; 0x58
 8012d18:	4615      	mov	r5, r2
 8012d1a:	461e      	mov	r6, r3
 8012d1c:	da0d      	bge.n	8012d3a <__swhatbuf_r+0x2e>
 8012d1e:	89a3      	ldrh	r3, [r4, #12]
 8012d20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012d24:	f04f 0100 	mov.w	r1, #0
 8012d28:	bf0c      	ite	eq
 8012d2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012d2e:	2340      	movne	r3, #64	; 0x40
 8012d30:	2000      	movs	r0, #0
 8012d32:	6031      	str	r1, [r6, #0]
 8012d34:	602b      	str	r3, [r5, #0]
 8012d36:	b016      	add	sp, #88	; 0x58
 8012d38:	bd70      	pop	{r4, r5, r6, pc}
 8012d3a:	466a      	mov	r2, sp
 8012d3c:	f000 f848 	bl	8012dd0 <_fstat_r>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	dbec      	blt.n	8012d1e <__swhatbuf_r+0x12>
 8012d44:	9901      	ldr	r1, [sp, #4]
 8012d46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012d4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012d4e:	4259      	negs	r1, r3
 8012d50:	4159      	adcs	r1, r3
 8012d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d56:	e7eb      	b.n	8012d30 <__swhatbuf_r+0x24>

08012d58 <__smakebuf_r>:
 8012d58:	898b      	ldrh	r3, [r1, #12]
 8012d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d5c:	079d      	lsls	r5, r3, #30
 8012d5e:	4606      	mov	r6, r0
 8012d60:	460c      	mov	r4, r1
 8012d62:	d507      	bpl.n	8012d74 <__smakebuf_r+0x1c>
 8012d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d68:	6023      	str	r3, [r4, #0]
 8012d6a:	6123      	str	r3, [r4, #16]
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	6163      	str	r3, [r4, #20]
 8012d70:	b002      	add	sp, #8
 8012d72:	bd70      	pop	{r4, r5, r6, pc}
 8012d74:	ab01      	add	r3, sp, #4
 8012d76:	466a      	mov	r2, sp
 8012d78:	f7ff ffc8 	bl	8012d0c <__swhatbuf_r>
 8012d7c:	9900      	ldr	r1, [sp, #0]
 8012d7e:	4605      	mov	r5, r0
 8012d80:	4630      	mov	r0, r6
 8012d82:	f7fb f831 	bl	800dde8 <_malloc_r>
 8012d86:	b948      	cbnz	r0, 8012d9c <__smakebuf_r+0x44>
 8012d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d8c:	059a      	lsls	r2, r3, #22
 8012d8e:	d4ef      	bmi.n	8012d70 <__smakebuf_r+0x18>
 8012d90:	f023 0303 	bic.w	r3, r3, #3
 8012d94:	f043 0302 	orr.w	r3, r3, #2
 8012d98:	81a3      	strh	r3, [r4, #12]
 8012d9a:	e7e3      	b.n	8012d64 <__smakebuf_r+0xc>
 8012d9c:	89a3      	ldrh	r3, [r4, #12]
 8012d9e:	6020      	str	r0, [r4, #0]
 8012da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012da4:	81a3      	strh	r3, [r4, #12]
 8012da6:	9b00      	ldr	r3, [sp, #0]
 8012da8:	6163      	str	r3, [r4, #20]
 8012daa:	9b01      	ldr	r3, [sp, #4]
 8012dac:	6120      	str	r0, [r4, #16]
 8012dae:	b15b      	cbz	r3, 8012dc8 <__smakebuf_r+0x70>
 8012db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012db4:	4630      	mov	r0, r6
 8012db6:	f000 f81d 	bl	8012df4 <_isatty_r>
 8012dba:	b128      	cbz	r0, 8012dc8 <__smakebuf_r+0x70>
 8012dbc:	89a3      	ldrh	r3, [r4, #12]
 8012dbe:	f023 0303 	bic.w	r3, r3, #3
 8012dc2:	f043 0301 	orr.w	r3, r3, #1
 8012dc6:	81a3      	strh	r3, [r4, #12]
 8012dc8:	89a3      	ldrh	r3, [r4, #12]
 8012dca:	431d      	orrs	r5, r3
 8012dcc:	81a5      	strh	r5, [r4, #12]
 8012dce:	e7cf      	b.n	8012d70 <__smakebuf_r+0x18>

08012dd0 <_fstat_r>:
 8012dd0:	b538      	push	{r3, r4, r5, lr}
 8012dd2:	4d07      	ldr	r5, [pc, #28]	; (8012df0 <_fstat_r+0x20>)
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	4604      	mov	r4, r0
 8012dd8:	4608      	mov	r0, r1
 8012dda:	4611      	mov	r1, r2
 8012ddc:	602b      	str	r3, [r5, #0]
 8012dde:	f7ef fa6c 	bl	80022ba <_fstat>
 8012de2:	1c43      	adds	r3, r0, #1
 8012de4:	d102      	bne.n	8012dec <_fstat_r+0x1c>
 8012de6:	682b      	ldr	r3, [r5, #0]
 8012de8:	b103      	cbz	r3, 8012dec <_fstat_r+0x1c>
 8012dea:	6023      	str	r3, [r4, #0]
 8012dec:	bd38      	pop	{r3, r4, r5, pc}
 8012dee:	bf00      	nop
 8012df0:	20007198 	.word	0x20007198

08012df4 <_isatty_r>:
 8012df4:	b538      	push	{r3, r4, r5, lr}
 8012df6:	4d06      	ldr	r5, [pc, #24]	; (8012e10 <_isatty_r+0x1c>)
 8012df8:	2300      	movs	r3, #0
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	4608      	mov	r0, r1
 8012dfe:	602b      	str	r3, [r5, #0]
 8012e00:	f7ef fa6b 	bl	80022da <_isatty>
 8012e04:	1c43      	adds	r3, r0, #1
 8012e06:	d102      	bne.n	8012e0e <_isatty_r+0x1a>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	b103      	cbz	r3, 8012e0e <_isatty_r+0x1a>
 8012e0c:	6023      	str	r3, [r4, #0]
 8012e0e:	bd38      	pop	{r3, r4, r5, pc}
 8012e10:	20007198 	.word	0x20007198

08012e14 <pow>:
 8012e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e16:	ed2d 8b02 	vpush	{d8}
 8012e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8012e1e:	eef0 8a60 	vmov.f32	s17, s1
 8012e22:	ec55 4b11 	vmov	r4, r5, d1
 8012e26:	f000 f97f 	bl	8013128 <__ieee754_pow>
 8012e2a:	4622      	mov	r2, r4
 8012e2c:	462b      	mov	r3, r5
 8012e2e:	4620      	mov	r0, r4
 8012e30:	4629      	mov	r1, r5
 8012e32:	ec57 6b10 	vmov	r6, r7, d0
 8012e36:	f7ed fe99 	bl	8000b6c <__aeabi_dcmpun>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	d13b      	bne.n	8012eb6 <pow+0xa2>
 8012e3e:	ec51 0b18 	vmov	r0, r1, d8
 8012e42:	2200      	movs	r2, #0
 8012e44:	2300      	movs	r3, #0
 8012e46:	f7ed fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 8012e4a:	b1b8      	cbz	r0, 8012e7c <pow+0x68>
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	2300      	movs	r3, #0
 8012e50:	4620      	mov	r0, r4
 8012e52:	4629      	mov	r1, r5
 8012e54:	f7ed fe58 	bl	8000b08 <__aeabi_dcmpeq>
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	d146      	bne.n	8012eea <pow+0xd6>
 8012e5c:	ec45 4b10 	vmov	d0, r4, r5
 8012e60:	f000 f87d 	bl	8012f5e <finite>
 8012e64:	b338      	cbz	r0, 8012eb6 <pow+0xa2>
 8012e66:	2200      	movs	r2, #0
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	4629      	mov	r1, r5
 8012e6e:	f7ed fe55 	bl	8000b1c <__aeabi_dcmplt>
 8012e72:	b300      	cbz	r0, 8012eb6 <pow+0xa2>
 8012e74:	f7fc f8b4 	bl	800efe0 <__errno>
 8012e78:	2322      	movs	r3, #34	; 0x22
 8012e7a:	e01b      	b.n	8012eb4 <pow+0xa0>
 8012e7c:	ec47 6b10 	vmov	d0, r6, r7
 8012e80:	f000 f86d 	bl	8012f5e <finite>
 8012e84:	b9e0      	cbnz	r0, 8012ec0 <pow+0xac>
 8012e86:	eeb0 0a48 	vmov.f32	s0, s16
 8012e8a:	eef0 0a68 	vmov.f32	s1, s17
 8012e8e:	f000 f866 	bl	8012f5e <finite>
 8012e92:	b1a8      	cbz	r0, 8012ec0 <pow+0xac>
 8012e94:	ec45 4b10 	vmov	d0, r4, r5
 8012e98:	f000 f861 	bl	8012f5e <finite>
 8012e9c:	b180      	cbz	r0, 8012ec0 <pow+0xac>
 8012e9e:	4632      	mov	r2, r6
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	4639      	mov	r1, r7
 8012ea6:	f7ed fe61 	bl	8000b6c <__aeabi_dcmpun>
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	d0e2      	beq.n	8012e74 <pow+0x60>
 8012eae:	f7fc f897 	bl	800efe0 <__errno>
 8012eb2:	2321      	movs	r3, #33	; 0x21
 8012eb4:	6003      	str	r3, [r0, #0]
 8012eb6:	ecbd 8b02 	vpop	{d8}
 8012eba:	ec47 6b10 	vmov	d0, r6, r7
 8012ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	4639      	mov	r1, r7
 8012ec8:	f7ed fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d0f2      	beq.n	8012eb6 <pow+0xa2>
 8012ed0:	eeb0 0a48 	vmov.f32	s0, s16
 8012ed4:	eef0 0a68 	vmov.f32	s1, s17
 8012ed8:	f000 f841 	bl	8012f5e <finite>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d0ea      	beq.n	8012eb6 <pow+0xa2>
 8012ee0:	ec45 4b10 	vmov	d0, r4, r5
 8012ee4:	f000 f83b 	bl	8012f5e <finite>
 8012ee8:	e7c3      	b.n	8012e72 <pow+0x5e>
 8012eea:	4f01      	ldr	r7, [pc, #4]	; (8012ef0 <pow+0xdc>)
 8012eec:	2600      	movs	r6, #0
 8012eee:	e7e2      	b.n	8012eb6 <pow+0xa2>
 8012ef0:	3ff00000 	.word	0x3ff00000

08012ef4 <sqrt>:
 8012ef4:	b538      	push	{r3, r4, r5, lr}
 8012ef6:	ed2d 8b02 	vpush	{d8}
 8012efa:	ec55 4b10 	vmov	r4, r5, d0
 8012efe:	f000 f839 	bl	8012f74 <__ieee754_sqrt>
 8012f02:	4622      	mov	r2, r4
 8012f04:	462b      	mov	r3, r5
 8012f06:	4620      	mov	r0, r4
 8012f08:	4629      	mov	r1, r5
 8012f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f0e:	eef0 8a60 	vmov.f32	s17, s1
 8012f12:	f7ed fe2b 	bl	8000b6c <__aeabi_dcmpun>
 8012f16:	b990      	cbnz	r0, 8012f3e <sqrt+0x4a>
 8012f18:	2200      	movs	r2, #0
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4629      	mov	r1, r5
 8012f20:	f7ed fdfc 	bl	8000b1c <__aeabi_dcmplt>
 8012f24:	b158      	cbz	r0, 8012f3e <sqrt+0x4a>
 8012f26:	f7fc f85b 	bl	800efe0 <__errno>
 8012f2a:	2321      	movs	r3, #33	; 0x21
 8012f2c:	6003      	str	r3, [r0, #0]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	2300      	movs	r3, #0
 8012f32:	4610      	mov	r0, r2
 8012f34:	4619      	mov	r1, r3
 8012f36:	f7ed fca9 	bl	800088c <__aeabi_ddiv>
 8012f3a:	ec41 0b18 	vmov	d8, r0, r1
 8012f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8012f42:	eef0 0a68 	vmov.f32	s1, s17
 8012f46:	ecbd 8b02 	vpop	{d8}
 8012f4a:	bd38      	pop	{r3, r4, r5, pc}

08012f4c <fabs>:
 8012f4c:	ec51 0b10 	vmov	r0, r1, d0
 8012f50:	ee10 2a10 	vmov	r2, s0
 8012f54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f58:	ec43 2b10 	vmov	d0, r2, r3
 8012f5c:	4770      	bx	lr

08012f5e <finite>:
 8012f5e:	b082      	sub	sp, #8
 8012f60:	ed8d 0b00 	vstr	d0, [sp]
 8012f64:	9801      	ldr	r0, [sp, #4]
 8012f66:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012f6a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012f6e:	0fc0      	lsrs	r0, r0, #31
 8012f70:	b002      	add	sp, #8
 8012f72:	4770      	bx	lr

08012f74 <__ieee754_sqrt>:
 8012f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f78:	ec55 4b10 	vmov	r4, r5, d0
 8012f7c:	4e67      	ldr	r6, [pc, #412]	; (801311c <__ieee754_sqrt+0x1a8>)
 8012f7e:	43ae      	bics	r6, r5
 8012f80:	ee10 0a10 	vmov	r0, s0
 8012f84:	ee10 2a10 	vmov	r2, s0
 8012f88:	4629      	mov	r1, r5
 8012f8a:	462b      	mov	r3, r5
 8012f8c:	d10d      	bne.n	8012faa <__ieee754_sqrt+0x36>
 8012f8e:	f7ed fb53 	bl	8000638 <__aeabi_dmul>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	4620      	mov	r0, r4
 8012f98:	4629      	mov	r1, r5
 8012f9a:	f7ed f997 	bl	80002cc <__adddf3>
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	ec45 4b10 	vmov	d0, r4, r5
 8012fa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012faa:	2d00      	cmp	r5, #0
 8012fac:	dc0b      	bgt.n	8012fc6 <__ieee754_sqrt+0x52>
 8012fae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fb2:	4326      	orrs	r6, r4
 8012fb4:	d0f5      	beq.n	8012fa2 <__ieee754_sqrt+0x2e>
 8012fb6:	b135      	cbz	r5, 8012fc6 <__ieee754_sqrt+0x52>
 8012fb8:	f7ed f986 	bl	80002c8 <__aeabi_dsub>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	f7ed fc64 	bl	800088c <__aeabi_ddiv>
 8012fc4:	e7eb      	b.n	8012f9e <__ieee754_sqrt+0x2a>
 8012fc6:	1509      	asrs	r1, r1, #20
 8012fc8:	f000 808d 	beq.w	80130e6 <__ieee754_sqrt+0x172>
 8012fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012fd0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012fd8:	07c9      	lsls	r1, r1, #31
 8012fda:	bf5c      	itt	pl
 8012fdc:	005b      	lslpl	r3, r3, #1
 8012fde:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012fe2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012fe6:	bf58      	it	pl
 8012fe8:	0052      	lslpl	r2, r2, #1
 8012fea:	2500      	movs	r5, #0
 8012fec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012ff0:	1076      	asrs	r6, r6, #1
 8012ff2:	0052      	lsls	r2, r2, #1
 8012ff4:	f04f 0e16 	mov.w	lr, #22
 8012ff8:	46ac      	mov	ip, r5
 8012ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012ffe:	eb0c 0001 	add.w	r0, ip, r1
 8013002:	4298      	cmp	r0, r3
 8013004:	bfde      	ittt	le
 8013006:	1a1b      	suble	r3, r3, r0
 8013008:	eb00 0c01 	addle.w	ip, r0, r1
 801300c:	186d      	addle	r5, r5, r1
 801300e:	005b      	lsls	r3, r3, #1
 8013010:	f1be 0e01 	subs.w	lr, lr, #1
 8013014:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013018:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801301c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013020:	d1ed      	bne.n	8012ffe <__ieee754_sqrt+0x8a>
 8013022:	4674      	mov	r4, lr
 8013024:	2720      	movs	r7, #32
 8013026:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801302a:	4563      	cmp	r3, ip
 801302c:	eb01 000e 	add.w	r0, r1, lr
 8013030:	dc02      	bgt.n	8013038 <__ieee754_sqrt+0xc4>
 8013032:	d113      	bne.n	801305c <__ieee754_sqrt+0xe8>
 8013034:	4290      	cmp	r0, r2
 8013036:	d811      	bhi.n	801305c <__ieee754_sqrt+0xe8>
 8013038:	2800      	cmp	r0, #0
 801303a:	eb00 0e01 	add.w	lr, r0, r1
 801303e:	da57      	bge.n	80130f0 <__ieee754_sqrt+0x17c>
 8013040:	f1be 0f00 	cmp.w	lr, #0
 8013044:	db54      	blt.n	80130f0 <__ieee754_sqrt+0x17c>
 8013046:	f10c 0801 	add.w	r8, ip, #1
 801304a:	eba3 030c 	sub.w	r3, r3, ip
 801304e:	4290      	cmp	r0, r2
 8013050:	bf88      	it	hi
 8013052:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013056:	1a12      	subs	r2, r2, r0
 8013058:	440c      	add	r4, r1
 801305a:	46c4      	mov	ip, r8
 801305c:	005b      	lsls	r3, r3, #1
 801305e:	3f01      	subs	r7, #1
 8013060:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013064:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013068:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801306c:	d1dd      	bne.n	801302a <__ieee754_sqrt+0xb6>
 801306e:	4313      	orrs	r3, r2
 8013070:	d01b      	beq.n	80130aa <__ieee754_sqrt+0x136>
 8013072:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8013120 <__ieee754_sqrt+0x1ac>
 8013076:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013124 <__ieee754_sqrt+0x1b0>
 801307a:	e9da 0100 	ldrd	r0, r1, [sl]
 801307e:	e9db 2300 	ldrd	r2, r3, [fp]
 8013082:	f7ed f921 	bl	80002c8 <__aeabi_dsub>
 8013086:	e9da 8900 	ldrd	r8, r9, [sl]
 801308a:	4602      	mov	r2, r0
 801308c:	460b      	mov	r3, r1
 801308e:	4640      	mov	r0, r8
 8013090:	4649      	mov	r1, r9
 8013092:	f7ed fd4d 	bl	8000b30 <__aeabi_dcmple>
 8013096:	b140      	cbz	r0, 80130aa <__ieee754_sqrt+0x136>
 8013098:	f1b4 3fff 	cmp.w	r4, #4294967295
 801309c:	e9da 0100 	ldrd	r0, r1, [sl]
 80130a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80130a4:	d126      	bne.n	80130f4 <__ieee754_sqrt+0x180>
 80130a6:	3501      	adds	r5, #1
 80130a8:	463c      	mov	r4, r7
 80130aa:	106a      	asrs	r2, r5, #1
 80130ac:	0863      	lsrs	r3, r4, #1
 80130ae:	07e9      	lsls	r1, r5, #31
 80130b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80130b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80130b8:	bf48      	it	mi
 80130ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80130be:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80130c2:	461c      	mov	r4, r3
 80130c4:	e76d      	b.n	8012fa2 <__ieee754_sqrt+0x2e>
 80130c6:	0ad3      	lsrs	r3, r2, #11
 80130c8:	3815      	subs	r0, #21
 80130ca:	0552      	lsls	r2, r2, #21
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d0fa      	beq.n	80130c6 <__ieee754_sqrt+0x152>
 80130d0:	02dc      	lsls	r4, r3, #11
 80130d2:	d50a      	bpl.n	80130ea <__ieee754_sqrt+0x176>
 80130d4:	f1c1 0420 	rsb	r4, r1, #32
 80130d8:	fa22 f404 	lsr.w	r4, r2, r4
 80130dc:	1e4d      	subs	r5, r1, #1
 80130de:	408a      	lsls	r2, r1
 80130e0:	4323      	orrs	r3, r4
 80130e2:	1b41      	subs	r1, r0, r5
 80130e4:	e772      	b.n	8012fcc <__ieee754_sqrt+0x58>
 80130e6:	4608      	mov	r0, r1
 80130e8:	e7f0      	b.n	80130cc <__ieee754_sqrt+0x158>
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	3101      	adds	r1, #1
 80130ee:	e7ef      	b.n	80130d0 <__ieee754_sqrt+0x15c>
 80130f0:	46e0      	mov	r8, ip
 80130f2:	e7aa      	b.n	801304a <__ieee754_sqrt+0xd6>
 80130f4:	f7ed f8ea 	bl	80002cc <__adddf3>
 80130f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80130fc:	4602      	mov	r2, r0
 80130fe:	460b      	mov	r3, r1
 8013100:	4640      	mov	r0, r8
 8013102:	4649      	mov	r1, r9
 8013104:	f7ed fd0a 	bl	8000b1c <__aeabi_dcmplt>
 8013108:	b120      	cbz	r0, 8013114 <__ieee754_sqrt+0x1a0>
 801310a:	1ca0      	adds	r0, r4, #2
 801310c:	bf08      	it	eq
 801310e:	3501      	addeq	r5, #1
 8013110:	3402      	adds	r4, #2
 8013112:	e7ca      	b.n	80130aa <__ieee754_sqrt+0x136>
 8013114:	3401      	adds	r4, #1
 8013116:	f024 0401 	bic.w	r4, r4, #1
 801311a:	e7c6      	b.n	80130aa <__ieee754_sqrt+0x136>
 801311c:	7ff00000 	.word	0x7ff00000
 8013120:	200001e0 	.word	0x200001e0
 8013124:	200001e8 	.word	0x200001e8

08013128 <__ieee754_pow>:
 8013128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	ed2d 8b06 	vpush	{d8-d10}
 8013130:	b089      	sub	sp, #36	; 0x24
 8013132:	ed8d 1b00 	vstr	d1, [sp]
 8013136:	e9dd 2900 	ldrd	r2, r9, [sp]
 801313a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801313e:	ea58 0102 	orrs.w	r1, r8, r2
 8013142:	ec57 6b10 	vmov	r6, r7, d0
 8013146:	d115      	bne.n	8013174 <__ieee754_pow+0x4c>
 8013148:	19b3      	adds	r3, r6, r6
 801314a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801314e:	4152      	adcs	r2, r2
 8013150:	4299      	cmp	r1, r3
 8013152:	4b89      	ldr	r3, [pc, #548]	; (8013378 <__ieee754_pow+0x250>)
 8013154:	4193      	sbcs	r3, r2
 8013156:	f080 84d1 	bcs.w	8013afc <__ieee754_pow+0x9d4>
 801315a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801315e:	4630      	mov	r0, r6
 8013160:	4639      	mov	r1, r7
 8013162:	f7ed f8b3 	bl	80002cc <__adddf3>
 8013166:	ec41 0b10 	vmov	d0, r0, r1
 801316a:	b009      	add	sp, #36	; 0x24
 801316c:	ecbd 8b06 	vpop	{d8-d10}
 8013170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013174:	4b81      	ldr	r3, [pc, #516]	; (801337c <__ieee754_pow+0x254>)
 8013176:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801317a:	429c      	cmp	r4, r3
 801317c:	ee10 aa10 	vmov	sl, s0
 8013180:	463d      	mov	r5, r7
 8013182:	dc06      	bgt.n	8013192 <__ieee754_pow+0x6a>
 8013184:	d101      	bne.n	801318a <__ieee754_pow+0x62>
 8013186:	2e00      	cmp	r6, #0
 8013188:	d1e7      	bne.n	801315a <__ieee754_pow+0x32>
 801318a:	4598      	cmp	r8, r3
 801318c:	dc01      	bgt.n	8013192 <__ieee754_pow+0x6a>
 801318e:	d10f      	bne.n	80131b0 <__ieee754_pow+0x88>
 8013190:	b172      	cbz	r2, 80131b0 <__ieee754_pow+0x88>
 8013192:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013196:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801319a:	ea55 050a 	orrs.w	r5, r5, sl
 801319e:	d1dc      	bne.n	801315a <__ieee754_pow+0x32>
 80131a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80131a4:	18db      	adds	r3, r3, r3
 80131a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80131aa:	4152      	adcs	r2, r2
 80131ac:	429d      	cmp	r5, r3
 80131ae:	e7d0      	b.n	8013152 <__ieee754_pow+0x2a>
 80131b0:	2d00      	cmp	r5, #0
 80131b2:	da3b      	bge.n	801322c <__ieee754_pow+0x104>
 80131b4:	4b72      	ldr	r3, [pc, #456]	; (8013380 <__ieee754_pow+0x258>)
 80131b6:	4598      	cmp	r8, r3
 80131b8:	dc51      	bgt.n	801325e <__ieee754_pow+0x136>
 80131ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80131be:	4598      	cmp	r8, r3
 80131c0:	f340 84ab 	ble.w	8013b1a <__ieee754_pow+0x9f2>
 80131c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80131c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80131cc:	2b14      	cmp	r3, #20
 80131ce:	dd0f      	ble.n	80131f0 <__ieee754_pow+0xc8>
 80131d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80131d4:	fa22 f103 	lsr.w	r1, r2, r3
 80131d8:	fa01 f303 	lsl.w	r3, r1, r3
 80131dc:	4293      	cmp	r3, r2
 80131de:	f040 849c 	bne.w	8013b1a <__ieee754_pow+0x9f2>
 80131e2:	f001 0101 	and.w	r1, r1, #1
 80131e6:	f1c1 0302 	rsb	r3, r1, #2
 80131ea:	9304      	str	r3, [sp, #16]
 80131ec:	b182      	cbz	r2, 8013210 <__ieee754_pow+0xe8>
 80131ee:	e05f      	b.n	80132b0 <__ieee754_pow+0x188>
 80131f0:	2a00      	cmp	r2, #0
 80131f2:	d15b      	bne.n	80132ac <__ieee754_pow+0x184>
 80131f4:	f1c3 0314 	rsb	r3, r3, #20
 80131f8:	fa48 f103 	asr.w	r1, r8, r3
 80131fc:	fa01 f303 	lsl.w	r3, r1, r3
 8013200:	4543      	cmp	r3, r8
 8013202:	f040 8487 	bne.w	8013b14 <__ieee754_pow+0x9ec>
 8013206:	f001 0101 	and.w	r1, r1, #1
 801320a:	f1c1 0302 	rsb	r3, r1, #2
 801320e:	9304      	str	r3, [sp, #16]
 8013210:	4b5c      	ldr	r3, [pc, #368]	; (8013384 <__ieee754_pow+0x25c>)
 8013212:	4598      	cmp	r8, r3
 8013214:	d132      	bne.n	801327c <__ieee754_pow+0x154>
 8013216:	f1b9 0f00 	cmp.w	r9, #0
 801321a:	f280 8477 	bge.w	8013b0c <__ieee754_pow+0x9e4>
 801321e:	4959      	ldr	r1, [pc, #356]	; (8013384 <__ieee754_pow+0x25c>)
 8013220:	4632      	mov	r2, r6
 8013222:	463b      	mov	r3, r7
 8013224:	2000      	movs	r0, #0
 8013226:	f7ed fb31 	bl	800088c <__aeabi_ddiv>
 801322a:	e79c      	b.n	8013166 <__ieee754_pow+0x3e>
 801322c:	2300      	movs	r3, #0
 801322e:	9304      	str	r3, [sp, #16]
 8013230:	2a00      	cmp	r2, #0
 8013232:	d13d      	bne.n	80132b0 <__ieee754_pow+0x188>
 8013234:	4b51      	ldr	r3, [pc, #324]	; (801337c <__ieee754_pow+0x254>)
 8013236:	4598      	cmp	r8, r3
 8013238:	d1ea      	bne.n	8013210 <__ieee754_pow+0xe8>
 801323a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801323e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013242:	ea53 030a 	orrs.w	r3, r3, sl
 8013246:	f000 8459 	beq.w	8013afc <__ieee754_pow+0x9d4>
 801324a:	4b4f      	ldr	r3, [pc, #316]	; (8013388 <__ieee754_pow+0x260>)
 801324c:	429c      	cmp	r4, r3
 801324e:	dd08      	ble.n	8013262 <__ieee754_pow+0x13a>
 8013250:	f1b9 0f00 	cmp.w	r9, #0
 8013254:	f2c0 8456 	blt.w	8013b04 <__ieee754_pow+0x9dc>
 8013258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801325c:	e783      	b.n	8013166 <__ieee754_pow+0x3e>
 801325e:	2302      	movs	r3, #2
 8013260:	e7e5      	b.n	801322e <__ieee754_pow+0x106>
 8013262:	f1b9 0f00 	cmp.w	r9, #0
 8013266:	f04f 0000 	mov.w	r0, #0
 801326a:	f04f 0100 	mov.w	r1, #0
 801326e:	f6bf af7a 	bge.w	8013166 <__ieee754_pow+0x3e>
 8013272:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013276:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801327a:	e774      	b.n	8013166 <__ieee754_pow+0x3e>
 801327c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013280:	d106      	bne.n	8013290 <__ieee754_pow+0x168>
 8013282:	4632      	mov	r2, r6
 8013284:	463b      	mov	r3, r7
 8013286:	4630      	mov	r0, r6
 8013288:	4639      	mov	r1, r7
 801328a:	f7ed f9d5 	bl	8000638 <__aeabi_dmul>
 801328e:	e76a      	b.n	8013166 <__ieee754_pow+0x3e>
 8013290:	4b3e      	ldr	r3, [pc, #248]	; (801338c <__ieee754_pow+0x264>)
 8013292:	4599      	cmp	r9, r3
 8013294:	d10c      	bne.n	80132b0 <__ieee754_pow+0x188>
 8013296:	2d00      	cmp	r5, #0
 8013298:	db0a      	blt.n	80132b0 <__ieee754_pow+0x188>
 801329a:	ec47 6b10 	vmov	d0, r6, r7
 801329e:	b009      	add	sp, #36	; 0x24
 80132a0:	ecbd 8b06 	vpop	{d8-d10}
 80132a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a8:	f7ff be64 	b.w	8012f74 <__ieee754_sqrt>
 80132ac:	2300      	movs	r3, #0
 80132ae:	9304      	str	r3, [sp, #16]
 80132b0:	ec47 6b10 	vmov	d0, r6, r7
 80132b4:	f7ff fe4a 	bl	8012f4c <fabs>
 80132b8:	ec51 0b10 	vmov	r0, r1, d0
 80132bc:	f1ba 0f00 	cmp.w	sl, #0
 80132c0:	d129      	bne.n	8013316 <__ieee754_pow+0x1ee>
 80132c2:	b124      	cbz	r4, 80132ce <__ieee754_pow+0x1a6>
 80132c4:	4b2f      	ldr	r3, [pc, #188]	; (8013384 <__ieee754_pow+0x25c>)
 80132c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d123      	bne.n	8013316 <__ieee754_pow+0x1ee>
 80132ce:	f1b9 0f00 	cmp.w	r9, #0
 80132d2:	da05      	bge.n	80132e0 <__ieee754_pow+0x1b8>
 80132d4:	4602      	mov	r2, r0
 80132d6:	460b      	mov	r3, r1
 80132d8:	2000      	movs	r0, #0
 80132da:	492a      	ldr	r1, [pc, #168]	; (8013384 <__ieee754_pow+0x25c>)
 80132dc:	f7ed fad6 	bl	800088c <__aeabi_ddiv>
 80132e0:	2d00      	cmp	r5, #0
 80132e2:	f6bf af40 	bge.w	8013166 <__ieee754_pow+0x3e>
 80132e6:	9b04      	ldr	r3, [sp, #16]
 80132e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80132ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80132f0:	431c      	orrs	r4, r3
 80132f2:	d108      	bne.n	8013306 <__ieee754_pow+0x1de>
 80132f4:	4602      	mov	r2, r0
 80132f6:	460b      	mov	r3, r1
 80132f8:	4610      	mov	r0, r2
 80132fa:	4619      	mov	r1, r3
 80132fc:	f7ec ffe4 	bl	80002c8 <__aeabi_dsub>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	e78f      	b.n	8013226 <__ieee754_pow+0xfe>
 8013306:	9b04      	ldr	r3, [sp, #16]
 8013308:	2b01      	cmp	r3, #1
 801330a:	f47f af2c 	bne.w	8013166 <__ieee754_pow+0x3e>
 801330e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013312:	4619      	mov	r1, r3
 8013314:	e727      	b.n	8013166 <__ieee754_pow+0x3e>
 8013316:	0feb      	lsrs	r3, r5, #31
 8013318:	3b01      	subs	r3, #1
 801331a:	9306      	str	r3, [sp, #24]
 801331c:	9a06      	ldr	r2, [sp, #24]
 801331e:	9b04      	ldr	r3, [sp, #16]
 8013320:	4313      	orrs	r3, r2
 8013322:	d102      	bne.n	801332a <__ieee754_pow+0x202>
 8013324:	4632      	mov	r2, r6
 8013326:	463b      	mov	r3, r7
 8013328:	e7e6      	b.n	80132f8 <__ieee754_pow+0x1d0>
 801332a:	4b19      	ldr	r3, [pc, #100]	; (8013390 <__ieee754_pow+0x268>)
 801332c:	4598      	cmp	r8, r3
 801332e:	f340 80fb 	ble.w	8013528 <__ieee754_pow+0x400>
 8013332:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013336:	4598      	cmp	r8, r3
 8013338:	4b13      	ldr	r3, [pc, #76]	; (8013388 <__ieee754_pow+0x260>)
 801333a:	dd0c      	ble.n	8013356 <__ieee754_pow+0x22e>
 801333c:	429c      	cmp	r4, r3
 801333e:	dc0f      	bgt.n	8013360 <__ieee754_pow+0x238>
 8013340:	f1b9 0f00 	cmp.w	r9, #0
 8013344:	da0f      	bge.n	8013366 <__ieee754_pow+0x23e>
 8013346:	2000      	movs	r0, #0
 8013348:	b009      	add	sp, #36	; 0x24
 801334a:	ecbd 8b06 	vpop	{d8-d10}
 801334e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013352:	f000 bcba 	b.w	8013cca <__math_oflow>
 8013356:	429c      	cmp	r4, r3
 8013358:	dbf2      	blt.n	8013340 <__ieee754_pow+0x218>
 801335a:	4b0a      	ldr	r3, [pc, #40]	; (8013384 <__ieee754_pow+0x25c>)
 801335c:	429c      	cmp	r4, r3
 801335e:	dd19      	ble.n	8013394 <__ieee754_pow+0x26c>
 8013360:	f1b9 0f00 	cmp.w	r9, #0
 8013364:	dcef      	bgt.n	8013346 <__ieee754_pow+0x21e>
 8013366:	2000      	movs	r0, #0
 8013368:	b009      	add	sp, #36	; 0x24
 801336a:	ecbd 8b06 	vpop	{d8-d10}
 801336e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013372:	f000 bca1 	b.w	8013cb8 <__math_uflow>
 8013376:	bf00      	nop
 8013378:	fff00000 	.word	0xfff00000
 801337c:	7ff00000 	.word	0x7ff00000
 8013380:	433fffff 	.word	0x433fffff
 8013384:	3ff00000 	.word	0x3ff00000
 8013388:	3fefffff 	.word	0x3fefffff
 801338c:	3fe00000 	.word	0x3fe00000
 8013390:	41e00000 	.word	0x41e00000
 8013394:	4b60      	ldr	r3, [pc, #384]	; (8013518 <__ieee754_pow+0x3f0>)
 8013396:	2200      	movs	r2, #0
 8013398:	f7ec ff96 	bl	80002c8 <__aeabi_dsub>
 801339c:	a354      	add	r3, pc, #336	; (adr r3, 80134f0 <__ieee754_pow+0x3c8>)
 801339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a2:	4604      	mov	r4, r0
 80133a4:	460d      	mov	r5, r1
 80133a6:	f7ed f947 	bl	8000638 <__aeabi_dmul>
 80133aa:	a353      	add	r3, pc, #332	; (adr r3, 80134f8 <__ieee754_pow+0x3d0>)
 80133ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b0:	4606      	mov	r6, r0
 80133b2:	460f      	mov	r7, r1
 80133b4:	4620      	mov	r0, r4
 80133b6:	4629      	mov	r1, r5
 80133b8:	f7ed f93e 	bl	8000638 <__aeabi_dmul>
 80133bc:	4b57      	ldr	r3, [pc, #348]	; (801351c <__ieee754_pow+0x3f4>)
 80133be:	4682      	mov	sl, r0
 80133c0:	468b      	mov	fp, r1
 80133c2:	2200      	movs	r2, #0
 80133c4:	4620      	mov	r0, r4
 80133c6:	4629      	mov	r1, r5
 80133c8:	f7ed f936 	bl	8000638 <__aeabi_dmul>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	a14b      	add	r1, pc, #300	; (adr r1, 8013500 <__ieee754_pow+0x3d8>)
 80133d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133d6:	f7ec ff77 	bl	80002c8 <__aeabi_dsub>
 80133da:	4622      	mov	r2, r4
 80133dc:	462b      	mov	r3, r5
 80133de:	f7ed f92b 	bl	8000638 <__aeabi_dmul>
 80133e2:	4602      	mov	r2, r0
 80133e4:	460b      	mov	r3, r1
 80133e6:	2000      	movs	r0, #0
 80133e8:	494d      	ldr	r1, [pc, #308]	; (8013520 <__ieee754_pow+0x3f8>)
 80133ea:	f7ec ff6d 	bl	80002c8 <__aeabi_dsub>
 80133ee:	4622      	mov	r2, r4
 80133f0:	4680      	mov	r8, r0
 80133f2:	4689      	mov	r9, r1
 80133f4:	462b      	mov	r3, r5
 80133f6:	4620      	mov	r0, r4
 80133f8:	4629      	mov	r1, r5
 80133fa:	f7ed f91d 	bl	8000638 <__aeabi_dmul>
 80133fe:	4602      	mov	r2, r0
 8013400:	460b      	mov	r3, r1
 8013402:	4640      	mov	r0, r8
 8013404:	4649      	mov	r1, r9
 8013406:	f7ed f917 	bl	8000638 <__aeabi_dmul>
 801340a:	a33f      	add	r3, pc, #252	; (adr r3, 8013508 <__ieee754_pow+0x3e0>)
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	f7ed f912 	bl	8000638 <__aeabi_dmul>
 8013414:	4602      	mov	r2, r0
 8013416:	460b      	mov	r3, r1
 8013418:	4650      	mov	r0, sl
 801341a:	4659      	mov	r1, fp
 801341c:	f7ec ff54 	bl	80002c8 <__aeabi_dsub>
 8013420:	4602      	mov	r2, r0
 8013422:	460b      	mov	r3, r1
 8013424:	4680      	mov	r8, r0
 8013426:	4689      	mov	r9, r1
 8013428:	4630      	mov	r0, r6
 801342a:	4639      	mov	r1, r7
 801342c:	f7ec ff4e 	bl	80002cc <__adddf3>
 8013430:	2000      	movs	r0, #0
 8013432:	4632      	mov	r2, r6
 8013434:	463b      	mov	r3, r7
 8013436:	4604      	mov	r4, r0
 8013438:	460d      	mov	r5, r1
 801343a:	f7ec ff45 	bl	80002c8 <__aeabi_dsub>
 801343e:	4602      	mov	r2, r0
 8013440:	460b      	mov	r3, r1
 8013442:	4640      	mov	r0, r8
 8013444:	4649      	mov	r1, r9
 8013446:	f7ec ff3f 	bl	80002c8 <__aeabi_dsub>
 801344a:	9b04      	ldr	r3, [sp, #16]
 801344c:	9a06      	ldr	r2, [sp, #24]
 801344e:	3b01      	subs	r3, #1
 8013450:	4313      	orrs	r3, r2
 8013452:	4682      	mov	sl, r0
 8013454:	468b      	mov	fp, r1
 8013456:	f040 81e7 	bne.w	8013828 <__ieee754_pow+0x700>
 801345a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013510 <__ieee754_pow+0x3e8>
 801345e:	eeb0 8a47 	vmov.f32	s16, s14
 8013462:	eef0 8a67 	vmov.f32	s17, s15
 8013466:	e9dd 6700 	ldrd	r6, r7, [sp]
 801346a:	2600      	movs	r6, #0
 801346c:	4632      	mov	r2, r6
 801346e:	463b      	mov	r3, r7
 8013470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013474:	f7ec ff28 	bl	80002c8 <__aeabi_dsub>
 8013478:	4622      	mov	r2, r4
 801347a:	462b      	mov	r3, r5
 801347c:	f7ed f8dc 	bl	8000638 <__aeabi_dmul>
 8013480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013484:	4680      	mov	r8, r0
 8013486:	4689      	mov	r9, r1
 8013488:	4650      	mov	r0, sl
 801348a:	4659      	mov	r1, fp
 801348c:	f7ed f8d4 	bl	8000638 <__aeabi_dmul>
 8013490:	4602      	mov	r2, r0
 8013492:	460b      	mov	r3, r1
 8013494:	4640      	mov	r0, r8
 8013496:	4649      	mov	r1, r9
 8013498:	f7ec ff18 	bl	80002cc <__adddf3>
 801349c:	4632      	mov	r2, r6
 801349e:	463b      	mov	r3, r7
 80134a0:	4680      	mov	r8, r0
 80134a2:	4689      	mov	r9, r1
 80134a4:	4620      	mov	r0, r4
 80134a6:	4629      	mov	r1, r5
 80134a8:	f7ed f8c6 	bl	8000638 <__aeabi_dmul>
 80134ac:	460b      	mov	r3, r1
 80134ae:	4604      	mov	r4, r0
 80134b0:	460d      	mov	r5, r1
 80134b2:	4602      	mov	r2, r0
 80134b4:	4649      	mov	r1, r9
 80134b6:	4640      	mov	r0, r8
 80134b8:	f7ec ff08 	bl	80002cc <__adddf3>
 80134bc:	4b19      	ldr	r3, [pc, #100]	; (8013524 <__ieee754_pow+0x3fc>)
 80134be:	4299      	cmp	r1, r3
 80134c0:	ec45 4b19 	vmov	d9, r4, r5
 80134c4:	4606      	mov	r6, r0
 80134c6:	460f      	mov	r7, r1
 80134c8:	468b      	mov	fp, r1
 80134ca:	f340 82f0 	ble.w	8013aae <__ieee754_pow+0x986>
 80134ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80134d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80134d6:	4303      	orrs	r3, r0
 80134d8:	f000 81e4 	beq.w	80138a4 <__ieee754_pow+0x77c>
 80134dc:	ec51 0b18 	vmov	r0, r1, d8
 80134e0:	2200      	movs	r2, #0
 80134e2:	2300      	movs	r3, #0
 80134e4:	f7ed fb1a 	bl	8000b1c <__aeabi_dcmplt>
 80134e8:	3800      	subs	r0, #0
 80134ea:	bf18      	it	ne
 80134ec:	2001      	movne	r0, #1
 80134ee:	e72b      	b.n	8013348 <__ieee754_pow+0x220>
 80134f0:	60000000 	.word	0x60000000
 80134f4:	3ff71547 	.word	0x3ff71547
 80134f8:	f85ddf44 	.word	0xf85ddf44
 80134fc:	3e54ae0b 	.word	0x3e54ae0b
 8013500:	55555555 	.word	0x55555555
 8013504:	3fd55555 	.word	0x3fd55555
 8013508:	652b82fe 	.word	0x652b82fe
 801350c:	3ff71547 	.word	0x3ff71547
 8013510:	00000000 	.word	0x00000000
 8013514:	bff00000 	.word	0xbff00000
 8013518:	3ff00000 	.word	0x3ff00000
 801351c:	3fd00000 	.word	0x3fd00000
 8013520:	3fe00000 	.word	0x3fe00000
 8013524:	408fffff 	.word	0x408fffff
 8013528:	4bd5      	ldr	r3, [pc, #852]	; (8013880 <__ieee754_pow+0x758>)
 801352a:	402b      	ands	r3, r5
 801352c:	2200      	movs	r2, #0
 801352e:	b92b      	cbnz	r3, 801353c <__ieee754_pow+0x414>
 8013530:	4bd4      	ldr	r3, [pc, #848]	; (8013884 <__ieee754_pow+0x75c>)
 8013532:	f7ed f881 	bl	8000638 <__aeabi_dmul>
 8013536:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801353a:	460c      	mov	r4, r1
 801353c:	1523      	asrs	r3, r4, #20
 801353e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013542:	4413      	add	r3, r2
 8013544:	9305      	str	r3, [sp, #20]
 8013546:	4bd0      	ldr	r3, [pc, #832]	; (8013888 <__ieee754_pow+0x760>)
 8013548:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801354c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013550:	429c      	cmp	r4, r3
 8013552:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013556:	dd08      	ble.n	801356a <__ieee754_pow+0x442>
 8013558:	4bcc      	ldr	r3, [pc, #816]	; (801388c <__ieee754_pow+0x764>)
 801355a:	429c      	cmp	r4, r3
 801355c:	f340 8162 	ble.w	8013824 <__ieee754_pow+0x6fc>
 8013560:	9b05      	ldr	r3, [sp, #20]
 8013562:	3301      	adds	r3, #1
 8013564:	9305      	str	r3, [sp, #20]
 8013566:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801356a:	2400      	movs	r4, #0
 801356c:	00e3      	lsls	r3, r4, #3
 801356e:	9307      	str	r3, [sp, #28]
 8013570:	4bc7      	ldr	r3, [pc, #796]	; (8013890 <__ieee754_pow+0x768>)
 8013572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013576:	ed93 7b00 	vldr	d7, [r3]
 801357a:	4629      	mov	r1, r5
 801357c:	ec53 2b17 	vmov	r2, r3, d7
 8013580:	eeb0 9a47 	vmov.f32	s18, s14
 8013584:	eef0 9a67 	vmov.f32	s19, s15
 8013588:	4682      	mov	sl, r0
 801358a:	f7ec fe9d 	bl	80002c8 <__aeabi_dsub>
 801358e:	4652      	mov	r2, sl
 8013590:	4606      	mov	r6, r0
 8013592:	460f      	mov	r7, r1
 8013594:	462b      	mov	r3, r5
 8013596:	ec51 0b19 	vmov	r0, r1, d9
 801359a:	f7ec fe97 	bl	80002cc <__adddf3>
 801359e:	4602      	mov	r2, r0
 80135a0:	460b      	mov	r3, r1
 80135a2:	2000      	movs	r0, #0
 80135a4:	49bb      	ldr	r1, [pc, #748]	; (8013894 <__ieee754_pow+0x76c>)
 80135a6:	f7ed f971 	bl	800088c <__aeabi_ddiv>
 80135aa:	ec41 0b1a 	vmov	d10, r0, r1
 80135ae:	4602      	mov	r2, r0
 80135b0:	460b      	mov	r3, r1
 80135b2:	4630      	mov	r0, r6
 80135b4:	4639      	mov	r1, r7
 80135b6:	f7ed f83f 	bl	8000638 <__aeabi_dmul>
 80135ba:	2300      	movs	r3, #0
 80135bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135c0:	9302      	str	r3, [sp, #8]
 80135c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80135c6:	46ab      	mov	fp, r5
 80135c8:	106d      	asrs	r5, r5, #1
 80135ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80135ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80135d2:	ec41 0b18 	vmov	d8, r0, r1
 80135d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80135da:	2200      	movs	r2, #0
 80135dc:	4640      	mov	r0, r8
 80135de:	4649      	mov	r1, r9
 80135e0:	4614      	mov	r4, r2
 80135e2:	461d      	mov	r5, r3
 80135e4:	f7ed f828 	bl	8000638 <__aeabi_dmul>
 80135e8:	4602      	mov	r2, r0
 80135ea:	460b      	mov	r3, r1
 80135ec:	4630      	mov	r0, r6
 80135ee:	4639      	mov	r1, r7
 80135f0:	f7ec fe6a 	bl	80002c8 <__aeabi_dsub>
 80135f4:	ec53 2b19 	vmov	r2, r3, d9
 80135f8:	4606      	mov	r6, r0
 80135fa:	460f      	mov	r7, r1
 80135fc:	4620      	mov	r0, r4
 80135fe:	4629      	mov	r1, r5
 8013600:	f7ec fe62 	bl	80002c8 <__aeabi_dsub>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	4650      	mov	r0, sl
 801360a:	4659      	mov	r1, fp
 801360c:	f7ec fe5c 	bl	80002c8 <__aeabi_dsub>
 8013610:	4642      	mov	r2, r8
 8013612:	464b      	mov	r3, r9
 8013614:	f7ed f810 	bl	8000638 <__aeabi_dmul>
 8013618:	4602      	mov	r2, r0
 801361a:	460b      	mov	r3, r1
 801361c:	4630      	mov	r0, r6
 801361e:	4639      	mov	r1, r7
 8013620:	f7ec fe52 	bl	80002c8 <__aeabi_dsub>
 8013624:	ec53 2b1a 	vmov	r2, r3, d10
 8013628:	f7ed f806 	bl	8000638 <__aeabi_dmul>
 801362c:	ec53 2b18 	vmov	r2, r3, d8
 8013630:	ec41 0b19 	vmov	d9, r0, r1
 8013634:	ec51 0b18 	vmov	r0, r1, d8
 8013638:	f7ec fffe 	bl	8000638 <__aeabi_dmul>
 801363c:	a37c      	add	r3, pc, #496	; (adr r3, 8013830 <__ieee754_pow+0x708>)
 801363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013642:	4604      	mov	r4, r0
 8013644:	460d      	mov	r5, r1
 8013646:	f7ec fff7 	bl	8000638 <__aeabi_dmul>
 801364a:	a37b      	add	r3, pc, #492	; (adr r3, 8013838 <__ieee754_pow+0x710>)
 801364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013650:	f7ec fe3c 	bl	80002cc <__adddf3>
 8013654:	4622      	mov	r2, r4
 8013656:	462b      	mov	r3, r5
 8013658:	f7ec ffee 	bl	8000638 <__aeabi_dmul>
 801365c:	a378      	add	r3, pc, #480	; (adr r3, 8013840 <__ieee754_pow+0x718>)
 801365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013662:	f7ec fe33 	bl	80002cc <__adddf3>
 8013666:	4622      	mov	r2, r4
 8013668:	462b      	mov	r3, r5
 801366a:	f7ec ffe5 	bl	8000638 <__aeabi_dmul>
 801366e:	a376      	add	r3, pc, #472	; (adr r3, 8013848 <__ieee754_pow+0x720>)
 8013670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013674:	f7ec fe2a 	bl	80002cc <__adddf3>
 8013678:	4622      	mov	r2, r4
 801367a:	462b      	mov	r3, r5
 801367c:	f7ec ffdc 	bl	8000638 <__aeabi_dmul>
 8013680:	a373      	add	r3, pc, #460	; (adr r3, 8013850 <__ieee754_pow+0x728>)
 8013682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013686:	f7ec fe21 	bl	80002cc <__adddf3>
 801368a:	4622      	mov	r2, r4
 801368c:	462b      	mov	r3, r5
 801368e:	f7ec ffd3 	bl	8000638 <__aeabi_dmul>
 8013692:	a371      	add	r3, pc, #452	; (adr r3, 8013858 <__ieee754_pow+0x730>)
 8013694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013698:	f7ec fe18 	bl	80002cc <__adddf3>
 801369c:	4622      	mov	r2, r4
 801369e:	4606      	mov	r6, r0
 80136a0:	460f      	mov	r7, r1
 80136a2:	462b      	mov	r3, r5
 80136a4:	4620      	mov	r0, r4
 80136a6:	4629      	mov	r1, r5
 80136a8:	f7ec ffc6 	bl	8000638 <__aeabi_dmul>
 80136ac:	4602      	mov	r2, r0
 80136ae:	460b      	mov	r3, r1
 80136b0:	4630      	mov	r0, r6
 80136b2:	4639      	mov	r1, r7
 80136b4:	f7ec ffc0 	bl	8000638 <__aeabi_dmul>
 80136b8:	4642      	mov	r2, r8
 80136ba:	4604      	mov	r4, r0
 80136bc:	460d      	mov	r5, r1
 80136be:	464b      	mov	r3, r9
 80136c0:	ec51 0b18 	vmov	r0, r1, d8
 80136c4:	f7ec fe02 	bl	80002cc <__adddf3>
 80136c8:	ec53 2b19 	vmov	r2, r3, d9
 80136cc:	f7ec ffb4 	bl	8000638 <__aeabi_dmul>
 80136d0:	4622      	mov	r2, r4
 80136d2:	462b      	mov	r3, r5
 80136d4:	f7ec fdfa 	bl	80002cc <__adddf3>
 80136d8:	4642      	mov	r2, r8
 80136da:	4682      	mov	sl, r0
 80136dc:	468b      	mov	fp, r1
 80136de:	464b      	mov	r3, r9
 80136e0:	4640      	mov	r0, r8
 80136e2:	4649      	mov	r1, r9
 80136e4:	f7ec ffa8 	bl	8000638 <__aeabi_dmul>
 80136e8:	4b6b      	ldr	r3, [pc, #428]	; (8013898 <__ieee754_pow+0x770>)
 80136ea:	2200      	movs	r2, #0
 80136ec:	4606      	mov	r6, r0
 80136ee:	460f      	mov	r7, r1
 80136f0:	f7ec fdec 	bl	80002cc <__adddf3>
 80136f4:	4652      	mov	r2, sl
 80136f6:	465b      	mov	r3, fp
 80136f8:	f7ec fde8 	bl	80002cc <__adddf3>
 80136fc:	2000      	movs	r0, #0
 80136fe:	4604      	mov	r4, r0
 8013700:	460d      	mov	r5, r1
 8013702:	4602      	mov	r2, r0
 8013704:	460b      	mov	r3, r1
 8013706:	4640      	mov	r0, r8
 8013708:	4649      	mov	r1, r9
 801370a:	f7ec ff95 	bl	8000638 <__aeabi_dmul>
 801370e:	4b62      	ldr	r3, [pc, #392]	; (8013898 <__ieee754_pow+0x770>)
 8013710:	4680      	mov	r8, r0
 8013712:	4689      	mov	r9, r1
 8013714:	2200      	movs	r2, #0
 8013716:	4620      	mov	r0, r4
 8013718:	4629      	mov	r1, r5
 801371a:	f7ec fdd5 	bl	80002c8 <__aeabi_dsub>
 801371e:	4632      	mov	r2, r6
 8013720:	463b      	mov	r3, r7
 8013722:	f7ec fdd1 	bl	80002c8 <__aeabi_dsub>
 8013726:	4602      	mov	r2, r0
 8013728:	460b      	mov	r3, r1
 801372a:	4650      	mov	r0, sl
 801372c:	4659      	mov	r1, fp
 801372e:	f7ec fdcb 	bl	80002c8 <__aeabi_dsub>
 8013732:	ec53 2b18 	vmov	r2, r3, d8
 8013736:	f7ec ff7f 	bl	8000638 <__aeabi_dmul>
 801373a:	4622      	mov	r2, r4
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	462b      	mov	r3, r5
 8013742:	ec51 0b19 	vmov	r0, r1, d9
 8013746:	f7ec ff77 	bl	8000638 <__aeabi_dmul>
 801374a:	4602      	mov	r2, r0
 801374c:	460b      	mov	r3, r1
 801374e:	4630      	mov	r0, r6
 8013750:	4639      	mov	r1, r7
 8013752:	f7ec fdbb 	bl	80002cc <__adddf3>
 8013756:	4606      	mov	r6, r0
 8013758:	460f      	mov	r7, r1
 801375a:	4602      	mov	r2, r0
 801375c:	460b      	mov	r3, r1
 801375e:	4640      	mov	r0, r8
 8013760:	4649      	mov	r1, r9
 8013762:	f7ec fdb3 	bl	80002cc <__adddf3>
 8013766:	a33e      	add	r3, pc, #248	; (adr r3, 8013860 <__ieee754_pow+0x738>)
 8013768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376c:	2000      	movs	r0, #0
 801376e:	4604      	mov	r4, r0
 8013770:	460d      	mov	r5, r1
 8013772:	f7ec ff61 	bl	8000638 <__aeabi_dmul>
 8013776:	4642      	mov	r2, r8
 8013778:	ec41 0b18 	vmov	d8, r0, r1
 801377c:	464b      	mov	r3, r9
 801377e:	4620      	mov	r0, r4
 8013780:	4629      	mov	r1, r5
 8013782:	f7ec fda1 	bl	80002c8 <__aeabi_dsub>
 8013786:	4602      	mov	r2, r0
 8013788:	460b      	mov	r3, r1
 801378a:	4630      	mov	r0, r6
 801378c:	4639      	mov	r1, r7
 801378e:	f7ec fd9b 	bl	80002c8 <__aeabi_dsub>
 8013792:	a335      	add	r3, pc, #212	; (adr r3, 8013868 <__ieee754_pow+0x740>)
 8013794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013798:	f7ec ff4e 	bl	8000638 <__aeabi_dmul>
 801379c:	a334      	add	r3, pc, #208	; (adr r3, 8013870 <__ieee754_pow+0x748>)
 801379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a2:	4606      	mov	r6, r0
 80137a4:	460f      	mov	r7, r1
 80137a6:	4620      	mov	r0, r4
 80137a8:	4629      	mov	r1, r5
 80137aa:	f7ec ff45 	bl	8000638 <__aeabi_dmul>
 80137ae:	4602      	mov	r2, r0
 80137b0:	460b      	mov	r3, r1
 80137b2:	4630      	mov	r0, r6
 80137b4:	4639      	mov	r1, r7
 80137b6:	f7ec fd89 	bl	80002cc <__adddf3>
 80137ba:	9a07      	ldr	r2, [sp, #28]
 80137bc:	4b37      	ldr	r3, [pc, #220]	; (801389c <__ieee754_pow+0x774>)
 80137be:	4413      	add	r3, r2
 80137c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c4:	f7ec fd82 	bl	80002cc <__adddf3>
 80137c8:	4682      	mov	sl, r0
 80137ca:	9805      	ldr	r0, [sp, #20]
 80137cc:	468b      	mov	fp, r1
 80137ce:	f7ec fec9 	bl	8000564 <__aeabi_i2d>
 80137d2:	9a07      	ldr	r2, [sp, #28]
 80137d4:	4b32      	ldr	r3, [pc, #200]	; (80138a0 <__ieee754_pow+0x778>)
 80137d6:	4413      	add	r3, r2
 80137d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137dc:	4606      	mov	r6, r0
 80137de:	460f      	mov	r7, r1
 80137e0:	4652      	mov	r2, sl
 80137e2:	465b      	mov	r3, fp
 80137e4:	ec51 0b18 	vmov	r0, r1, d8
 80137e8:	f7ec fd70 	bl	80002cc <__adddf3>
 80137ec:	4642      	mov	r2, r8
 80137ee:	464b      	mov	r3, r9
 80137f0:	f7ec fd6c 	bl	80002cc <__adddf3>
 80137f4:	4632      	mov	r2, r6
 80137f6:	463b      	mov	r3, r7
 80137f8:	f7ec fd68 	bl	80002cc <__adddf3>
 80137fc:	2000      	movs	r0, #0
 80137fe:	4632      	mov	r2, r6
 8013800:	463b      	mov	r3, r7
 8013802:	4604      	mov	r4, r0
 8013804:	460d      	mov	r5, r1
 8013806:	f7ec fd5f 	bl	80002c8 <__aeabi_dsub>
 801380a:	4642      	mov	r2, r8
 801380c:	464b      	mov	r3, r9
 801380e:	f7ec fd5b 	bl	80002c8 <__aeabi_dsub>
 8013812:	ec53 2b18 	vmov	r2, r3, d8
 8013816:	f7ec fd57 	bl	80002c8 <__aeabi_dsub>
 801381a:	4602      	mov	r2, r0
 801381c:	460b      	mov	r3, r1
 801381e:	4650      	mov	r0, sl
 8013820:	4659      	mov	r1, fp
 8013822:	e610      	b.n	8013446 <__ieee754_pow+0x31e>
 8013824:	2401      	movs	r4, #1
 8013826:	e6a1      	b.n	801356c <__ieee754_pow+0x444>
 8013828:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013878 <__ieee754_pow+0x750>
 801382c:	e617      	b.n	801345e <__ieee754_pow+0x336>
 801382e:	bf00      	nop
 8013830:	4a454eef 	.word	0x4a454eef
 8013834:	3fca7e28 	.word	0x3fca7e28
 8013838:	93c9db65 	.word	0x93c9db65
 801383c:	3fcd864a 	.word	0x3fcd864a
 8013840:	a91d4101 	.word	0xa91d4101
 8013844:	3fd17460 	.word	0x3fd17460
 8013848:	518f264d 	.word	0x518f264d
 801384c:	3fd55555 	.word	0x3fd55555
 8013850:	db6fabff 	.word	0xdb6fabff
 8013854:	3fdb6db6 	.word	0x3fdb6db6
 8013858:	33333303 	.word	0x33333303
 801385c:	3fe33333 	.word	0x3fe33333
 8013860:	e0000000 	.word	0xe0000000
 8013864:	3feec709 	.word	0x3feec709
 8013868:	dc3a03fd 	.word	0xdc3a03fd
 801386c:	3feec709 	.word	0x3feec709
 8013870:	145b01f5 	.word	0x145b01f5
 8013874:	be3e2fe0 	.word	0xbe3e2fe0
 8013878:	00000000 	.word	0x00000000
 801387c:	3ff00000 	.word	0x3ff00000
 8013880:	7ff00000 	.word	0x7ff00000
 8013884:	43400000 	.word	0x43400000
 8013888:	0003988e 	.word	0x0003988e
 801388c:	000bb679 	.word	0x000bb679
 8013890:	080144f8 	.word	0x080144f8
 8013894:	3ff00000 	.word	0x3ff00000
 8013898:	40080000 	.word	0x40080000
 801389c:	08014518 	.word	0x08014518
 80138a0:	08014508 	.word	0x08014508
 80138a4:	a3b3      	add	r3, pc, #716	; (adr r3, 8013b74 <__ieee754_pow+0xa4c>)
 80138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138aa:	4640      	mov	r0, r8
 80138ac:	4649      	mov	r1, r9
 80138ae:	f7ec fd0d 	bl	80002cc <__adddf3>
 80138b2:	4622      	mov	r2, r4
 80138b4:	ec41 0b1a 	vmov	d10, r0, r1
 80138b8:	462b      	mov	r3, r5
 80138ba:	4630      	mov	r0, r6
 80138bc:	4639      	mov	r1, r7
 80138be:	f7ec fd03 	bl	80002c8 <__aeabi_dsub>
 80138c2:	4602      	mov	r2, r0
 80138c4:	460b      	mov	r3, r1
 80138c6:	ec51 0b1a 	vmov	r0, r1, d10
 80138ca:	f7ed f945 	bl	8000b58 <__aeabi_dcmpgt>
 80138ce:	2800      	cmp	r0, #0
 80138d0:	f47f ae04 	bne.w	80134dc <__ieee754_pow+0x3b4>
 80138d4:	4aa2      	ldr	r2, [pc, #648]	; (8013b60 <__ieee754_pow+0xa38>)
 80138d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80138da:	4293      	cmp	r3, r2
 80138dc:	f340 8107 	ble.w	8013aee <__ieee754_pow+0x9c6>
 80138e0:	151b      	asrs	r3, r3, #20
 80138e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80138e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80138ea:	fa4a fa03 	asr.w	sl, sl, r3
 80138ee:	44da      	add	sl, fp
 80138f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80138f4:	489b      	ldr	r0, [pc, #620]	; (8013b64 <__ieee754_pow+0xa3c>)
 80138f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80138fa:	4108      	asrs	r0, r1
 80138fc:	ea00 030a 	and.w	r3, r0, sl
 8013900:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013904:	f1c1 0114 	rsb	r1, r1, #20
 8013908:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801390c:	fa4a fa01 	asr.w	sl, sl, r1
 8013910:	f1bb 0f00 	cmp.w	fp, #0
 8013914:	f04f 0200 	mov.w	r2, #0
 8013918:	4620      	mov	r0, r4
 801391a:	4629      	mov	r1, r5
 801391c:	bfb8      	it	lt
 801391e:	f1ca 0a00 	rsblt	sl, sl, #0
 8013922:	f7ec fcd1 	bl	80002c8 <__aeabi_dsub>
 8013926:	ec41 0b19 	vmov	d9, r0, r1
 801392a:	4642      	mov	r2, r8
 801392c:	464b      	mov	r3, r9
 801392e:	ec51 0b19 	vmov	r0, r1, d9
 8013932:	f7ec fccb 	bl	80002cc <__adddf3>
 8013936:	a37a      	add	r3, pc, #488	; (adr r3, 8013b20 <__ieee754_pow+0x9f8>)
 8013938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393c:	2000      	movs	r0, #0
 801393e:	4604      	mov	r4, r0
 8013940:	460d      	mov	r5, r1
 8013942:	f7ec fe79 	bl	8000638 <__aeabi_dmul>
 8013946:	ec53 2b19 	vmov	r2, r3, d9
 801394a:	4606      	mov	r6, r0
 801394c:	460f      	mov	r7, r1
 801394e:	4620      	mov	r0, r4
 8013950:	4629      	mov	r1, r5
 8013952:	f7ec fcb9 	bl	80002c8 <__aeabi_dsub>
 8013956:	4602      	mov	r2, r0
 8013958:	460b      	mov	r3, r1
 801395a:	4640      	mov	r0, r8
 801395c:	4649      	mov	r1, r9
 801395e:	f7ec fcb3 	bl	80002c8 <__aeabi_dsub>
 8013962:	a371      	add	r3, pc, #452	; (adr r3, 8013b28 <__ieee754_pow+0xa00>)
 8013964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013968:	f7ec fe66 	bl	8000638 <__aeabi_dmul>
 801396c:	a370      	add	r3, pc, #448	; (adr r3, 8013b30 <__ieee754_pow+0xa08>)
 801396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013972:	4680      	mov	r8, r0
 8013974:	4689      	mov	r9, r1
 8013976:	4620      	mov	r0, r4
 8013978:	4629      	mov	r1, r5
 801397a:	f7ec fe5d 	bl	8000638 <__aeabi_dmul>
 801397e:	4602      	mov	r2, r0
 8013980:	460b      	mov	r3, r1
 8013982:	4640      	mov	r0, r8
 8013984:	4649      	mov	r1, r9
 8013986:	f7ec fca1 	bl	80002cc <__adddf3>
 801398a:	4604      	mov	r4, r0
 801398c:	460d      	mov	r5, r1
 801398e:	4602      	mov	r2, r0
 8013990:	460b      	mov	r3, r1
 8013992:	4630      	mov	r0, r6
 8013994:	4639      	mov	r1, r7
 8013996:	f7ec fc99 	bl	80002cc <__adddf3>
 801399a:	4632      	mov	r2, r6
 801399c:	463b      	mov	r3, r7
 801399e:	4680      	mov	r8, r0
 80139a0:	4689      	mov	r9, r1
 80139a2:	f7ec fc91 	bl	80002c8 <__aeabi_dsub>
 80139a6:	4602      	mov	r2, r0
 80139a8:	460b      	mov	r3, r1
 80139aa:	4620      	mov	r0, r4
 80139ac:	4629      	mov	r1, r5
 80139ae:	f7ec fc8b 	bl	80002c8 <__aeabi_dsub>
 80139b2:	4642      	mov	r2, r8
 80139b4:	4606      	mov	r6, r0
 80139b6:	460f      	mov	r7, r1
 80139b8:	464b      	mov	r3, r9
 80139ba:	4640      	mov	r0, r8
 80139bc:	4649      	mov	r1, r9
 80139be:	f7ec fe3b 	bl	8000638 <__aeabi_dmul>
 80139c2:	a35d      	add	r3, pc, #372	; (adr r3, 8013b38 <__ieee754_pow+0xa10>)
 80139c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c8:	4604      	mov	r4, r0
 80139ca:	460d      	mov	r5, r1
 80139cc:	f7ec fe34 	bl	8000638 <__aeabi_dmul>
 80139d0:	a35b      	add	r3, pc, #364	; (adr r3, 8013b40 <__ieee754_pow+0xa18>)
 80139d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d6:	f7ec fc77 	bl	80002c8 <__aeabi_dsub>
 80139da:	4622      	mov	r2, r4
 80139dc:	462b      	mov	r3, r5
 80139de:	f7ec fe2b 	bl	8000638 <__aeabi_dmul>
 80139e2:	a359      	add	r3, pc, #356	; (adr r3, 8013b48 <__ieee754_pow+0xa20>)
 80139e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e8:	f7ec fc70 	bl	80002cc <__adddf3>
 80139ec:	4622      	mov	r2, r4
 80139ee:	462b      	mov	r3, r5
 80139f0:	f7ec fe22 	bl	8000638 <__aeabi_dmul>
 80139f4:	a356      	add	r3, pc, #344	; (adr r3, 8013b50 <__ieee754_pow+0xa28>)
 80139f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fa:	f7ec fc65 	bl	80002c8 <__aeabi_dsub>
 80139fe:	4622      	mov	r2, r4
 8013a00:	462b      	mov	r3, r5
 8013a02:	f7ec fe19 	bl	8000638 <__aeabi_dmul>
 8013a06:	a354      	add	r3, pc, #336	; (adr r3, 8013b58 <__ieee754_pow+0xa30>)
 8013a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0c:	f7ec fc5e 	bl	80002cc <__adddf3>
 8013a10:	4622      	mov	r2, r4
 8013a12:	462b      	mov	r3, r5
 8013a14:	f7ec fe10 	bl	8000638 <__aeabi_dmul>
 8013a18:	4602      	mov	r2, r0
 8013a1a:	460b      	mov	r3, r1
 8013a1c:	4640      	mov	r0, r8
 8013a1e:	4649      	mov	r1, r9
 8013a20:	f7ec fc52 	bl	80002c8 <__aeabi_dsub>
 8013a24:	4604      	mov	r4, r0
 8013a26:	460d      	mov	r5, r1
 8013a28:	4602      	mov	r2, r0
 8013a2a:	460b      	mov	r3, r1
 8013a2c:	4640      	mov	r0, r8
 8013a2e:	4649      	mov	r1, r9
 8013a30:	f7ec fe02 	bl	8000638 <__aeabi_dmul>
 8013a34:	2200      	movs	r2, #0
 8013a36:	ec41 0b19 	vmov	d9, r0, r1
 8013a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a3e:	4620      	mov	r0, r4
 8013a40:	4629      	mov	r1, r5
 8013a42:	f7ec fc41 	bl	80002c8 <__aeabi_dsub>
 8013a46:	4602      	mov	r2, r0
 8013a48:	460b      	mov	r3, r1
 8013a4a:	ec51 0b19 	vmov	r0, r1, d9
 8013a4e:	f7ec ff1d 	bl	800088c <__aeabi_ddiv>
 8013a52:	4632      	mov	r2, r6
 8013a54:	4604      	mov	r4, r0
 8013a56:	460d      	mov	r5, r1
 8013a58:	463b      	mov	r3, r7
 8013a5a:	4640      	mov	r0, r8
 8013a5c:	4649      	mov	r1, r9
 8013a5e:	f7ec fdeb 	bl	8000638 <__aeabi_dmul>
 8013a62:	4632      	mov	r2, r6
 8013a64:	463b      	mov	r3, r7
 8013a66:	f7ec fc31 	bl	80002cc <__adddf3>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	4620      	mov	r0, r4
 8013a70:	4629      	mov	r1, r5
 8013a72:	f7ec fc29 	bl	80002c8 <__aeabi_dsub>
 8013a76:	4642      	mov	r2, r8
 8013a78:	464b      	mov	r3, r9
 8013a7a:	f7ec fc25 	bl	80002c8 <__aeabi_dsub>
 8013a7e:	460b      	mov	r3, r1
 8013a80:	4602      	mov	r2, r0
 8013a82:	4939      	ldr	r1, [pc, #228]	; (8013b68 <__ieee754_pow+0xa40>)
 8013a84:	2000      	movs	r0, #0
 8013a86:	f7ec fc1f 	bl	80002c8 <__aeabi_dsub>
 8013a8a:	ec41 0b10 	vmov	d0, r0, r1
 8013a8e:	ee10 3a90 	vmov	r3, s1
 8013a92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a9a:	da2b      	bge.n	8013af4 <__ieee754_pow+0x9cc>
 8013a9c:	4650      	mov	r0, sl
 8013a9e:	f000 f86f 	bl	8013b80 <scalbn>
 8013aa2:	ec51 0b10 	vmov	r0, r1, d0
 8013aa6:	ec53 2b18 	vmov	r2, r3, d8
 8013aaa:	f7ff bbee 	b.w	801328a <__ieee754_pow+0x162>
 8013aae:	4b2f      	ldr	r3, [pc, #188]	; (8013b6c <__ieee754_pow+0xa44>)
 8013ab0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013ab4:	429e      	cmp	r6, r3
 8013ab6:	f77f af0d 	ble.w	80138d4 <__ieee754_pow+0x7ac>
 8013aba:	4b2d      	ldr	r3, [pc, #180]	; (8013b70 <__ieee754_pow+0xa48>)
 8013abc:	440b      	add	r3, r1
 8013abe:	4303      	orrs	r3, r0
 8013ac0:	d009      	beq.n	8013ad6 <__ieee754_pow+0x9ae>
 8013ac2:	ec51 0b18 	vmov	r0, r1, d8
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	2300      	movs	r3, #0
 8013aca:	f7ed f827 	bl	8000b1c <__aeabi_dcmplt>
 8013ace:	3800      	subs	r0, #0
 8013ad0:	bf18      	it	ne
 8013ad2:	2001      	movne	r0, #1
 8013ad4:	e448      	b.n	8013368 <__ieee754_pow+0x240>
 8013ad6:	4622      	mov	r2, r4
 8013ad8:	462b      	mov	r3, r5
 8013ada:	f7ec fbf5 	bl	80002c8 <__aeabi_dsub>
 8013ade:	4642      	mov	r2, r8
 8013ae0:	464b      	mov	r3, r9
 8013ae2:	f7ed f82f 	bl	8000b44 <__aeabi_dcmpge>
 8013ae6:	2800      	cmp	r0, #0
 8013ae8:	f43f aef4 	beq.w	80138d4 <__ieee754_pow+0x7ac>
 8013aec:	e7e9      	b.n	8013ac2 <__ieee754_pow+0x99a>
 8013aee:	f04f 0a00 	mov.w	sl, #0
 8013af2:	e71a      	b.n	801392a <__ieee754_pow+0x802>
 8013af4:	ec51 0b10 	vmov	r0, r1, d0
 8013af8:	4619      	mov	r1, r3
 8013afa:	e7d4      	b.n	8013aa6 <__ieee754_pow+0x97e>
 8013afc:	491a      	ldr	r1, [pc, #104]	; (8013b68 <__ieee754_pow+0xa40>)
 8013afe:	2000      	movs	r0, #0
 8013b00:	f7ff bb31 	b.w	8013166 <__ieee754_pow+0x3e>
 8013b04:	2000      	movs	r0, #0
 8013b06:	2100      	movs	r1, #0
 8013b08:	f7ff bb2d 	b.w	8013166 <__ieee754_pow+0x3e>
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	4639      	mov	r1, r7
 8013b10:	f7ff bb29 	b.w	8013166 <__ieee754_pow+0x3e>
 8013b14:	9204      	str	r2, [sp, #16]
 8013b16:	f7ff bb7b 	b.w	8013210 <__ieee754_pow+0xe8>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	f7ff bb65 	b.w	80131ea <__ieee754_pow+0xc2>
 8013b20:	00000000 	.word	0x00000000
 8013b24:	3fe62e43 	.word	0x3fe62e43
 8013b28:	fefa39ef 	.word	0xfefa39ef
 8013b2c:	3fe62e42 	.word	0x3fe62e42
 8013b30:	0ca86c39 	.word	0x0ca86c39
 8013b34:	be205c61 	.word	0xbe205c61
 8013b38:	72bea4d0 	.word	0x72bea4d0
 8013b3c:	3e663769 	.word	0x3e663769
 8013b40:	c5d26bf1 	.word	0xc5d26bf1
 8013b44:	3ebbbd41 	.word	0x3ebbbd41
 8013b48:	af25de2c 	.word	0xaf25de2c
 8013b4c:	3f11566a 	.word	0x3f11566a
 8013b50:	16bebd93 	.word	0x16bebd93
 8013b54:	3f66c16c 	.word	0x3f66c16c
 8013b58:	5555553e 	.word	0x5555553e
 8013b5c:	3fc55555 	.word	0x3fc55555
 8013b60:	3fe00000 	.word	0x3fe00000
 8013b64:	fff00000 	.word	0xfff00000
 8013b68:	3ff00000 	.word	0x3ff00000
 8013b6c:	4090cbff 	.word	0x4090cbff
 8013b70:	3f6f3400 	.word	0x3f6f3400
 8013b74:	652b82fe 	.word	0x652b82fe
 8013b78:	3c971547 	.word	0x3c971547
 8013b7c:	00000000 	.word	0x00000000

08013b80 <scalbn>:
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	ec55 4b10 	vmov	r4, r5, d0
 8013b86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	462b      	mov	r3, r5
 8013b8e:	b999      	cbnz	r1, 8013bb8 <scalbn+0x38>
 8013b90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b94:	4323      	orrs	r3, r4
 8013b96:	d03f      	beq.n	8013c18 <scalbn+0x98>
 8013b98:	4b35      	ldr	r3, [pc, #212]	; (8013c70 <scalbn+0xf0>)
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	ee10 0a10 	vmov	r0, s0
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	f7ec fd49 	bl	8000638 <__aeabi_dmul>
 8013ba6:	4b33      	ldr	r3, [pc, #204]	; (8013c74 <scalbn+0xf4>)
 8013ba8:	429e      	cmp	r6, r3
 8013baa:	4604      	mov	r4, r0
 8013bac:	460d      	mov	r5, r1
 8013bae:	da10      	bge.n	8013bd2 <scalbn+0x52>
 8013bb0:	a327      	add	r3, pc, #156	; (adr r3, 8013c50 <scalbn+0xd0>)
 8013bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb6:	e01f      	b.n	8013bf8 <scalbn+0x78>
 8013bb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013bbc:	4291      	cmp	r1, r2
 8013bbe:	d10c      	bne.n	8013bda <scalbn+0x5a>
 8013bc0:	ee10 2a10 	vmov	r2, s0
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	f7ec fb80 	bl	80002cc <__adddf3>
 8013bcc:	4604      	mov	r4, r0
 8013bce:	460d      	mov	r5, r1
 8013bd0:	e022      	b.n	8013c18 <scalbn+0x98>
 8013bd2:	460b      	mov	r3, r1
 8013bd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013bd8:	3936      	subs	r1, #54	; 0x36
 8013bda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013bde:	4296      	cmp	r6, r2
 8013be0:	dd0d      	ble.n	8013bfe <scalbn+0x7e>
 8013be2:	2d00      	cmp	r5, #0
 8013be4:	a11c      	add	r1, pc, #112	; (adr r1, 8013c58 <scalbn+0xd8>)
 8013be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bea:	da02      	bge.n	8013bf2 <scalbn+0x72>
 8013bec:	a11c      	add	r1, pc, #112	; (adr r1, 8013c60 <scalbn+0xe0>)
 8013bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bf2:	a319      	add	r3, pc, #100	; (adr r3, 8013c58 <scalbn+0xd8>)
 8013bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf8:	f7ec fd1e 	bl	8000638 <__aeabi_dmul>
 8013bfc:	e7e6      	b.n	8013bcc <scalbn+0x4c>
 8013bfe:	1872      	adds	r2, r6, r1
 8013c00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013c04:	428a      	cmp	r2, r1
 8013c06:	dcec      	bgt.n	8013be2 <scalbn+0x62>
 8013c08:	2a00      	cmp	r2, #0
 8013c0a:	dd08      	ble.n	8013c1e <scalbn+0x9e>
 8013c0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c18:	ec45 4b10 	vmov	d0, r4, r5
 8013c1c:	bd70      	pop	{r4, r5, r6, pc}
 8013c1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013c22:	da08      	bge.n	8013c36 <scalbn+0xb6>
 8013c24:	2d00      	cmp	r5, #0
 8013c26:	a10a      	add	r1, pc, #40	; (adr r1, 8013c50 <scalbn+0xd0>)
 8013c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c2c:	dac0      	bge.n	8013bb0 <scalbn+0x30>
 8013c2e:	a10e      	add	r1, pc, #56	; (adr r1, 8013c68 <scalbn+0xe8>)
 8013c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c34:	e7bc      	b.n	8013bb0 <scalbn+0x30>
 8013c36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c3a:	3236      	adds	r2, #54	; 0x36
 8013c3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013c44:	4620      	mov	r0, r4
 8013c46:	4b0c      	ldr	r3, [pc, #48]	; (8013c78 <scalbn+0xf8>)
 8013c48:	2200      	movs	r2, #0
 8013c4a:	e7d5      	b.n	8013bf8 <scalbn+0x78>
 8013c4c:	f3af 8000 	nop.w
 8013c50:	c2f8f359 	.word	0xc2f8f359
 8013c54:	01a56e1f 	.word	0x01a56e1f
 8013c58:	8800759c 	.word	0x8800759c
 8013c5c:	7e37e43c 	.word	0x7e37e43c
 8013c60:	8800759c 	.word	0x8800759c
 8013c64:	fe37e43c 	.word	0xfe37e43c
 8013c68:	c2f8f359 	.word	0xc2f8f359
 8013c6c:	81a56e1f 	.word	0x81a56e1f
 8013c70:	43500000 	.word	0x43500000
 8013c74:	ffff3cb0 	.word	0xffff3cb0
 8013c78:	3c900000 	.word	0x3c900000

08013c7c <with_errno>:
 8013c7c:	b570      	push	{r4, r5, r6, lr}
 8013c7e:	4604      	mov	r4, r0
 8013c80:	460d      	mov	r5, r1
 8013c82:	4616      	mov	r6, r2
 8013c84:	f7fb f9ac 	bl	800efe0 <__errno>
 8013c88:	4629      	mov	r1, r5
 8013c8a:	6006      	str	r6, [r0, #0]
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	bd70      	pop	{r4, r5, r6, pc}

08013c90 <xflow>:
 8013c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c92:	4614      	mov	r4, r2
 8013c94:	461d      	mov	r5, r3
 8013c96:	b108      	cbz	r0, 8013c9c <xflow+0xc>
 8013c98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013c9c:	e9cd 2300 	strd	r2, r3, [sp]
 8013ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	f7ec fcc6 	bl	8000638 <__aeabi_dmul>
 8013cac:	2222      	movs	r2, #34	; 0x22
 8013cae:	b003      	add	sp, #12
 8013cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cb4:	f7ff bfe2 	b.w	8013c7c <with_errno>

08013cb8 <__math_uflow>:
 8013cb8:	b508      	push	{r3, lr}
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013cc0:	f7ff ffe6 	bl	8013c90 <xflow>
 8013cc4:	ec41 0b10 	vmov	d0, r0, r1
 8013cc8:	bd08      	pop	{r3, pc}

08013cca <__math_oflow>:
 8013cca:	b508      	push	{r3, lr}
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013cd2:	f7ff ffdd 	bl	8013c90 <xflow>
 8013cd6:	ec41 0b10 	vmov	d0, r0, r1
 8013cda:	bd08      	pop	{r3, pc}

08013cdc <_init>:
 8013cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cde:	bf00      	nop
 8013ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ce2:	bc08      	pop	{r3}
 8013ce4:	469e      	mov	lr, r3
 8013ce6:	4770      	bx	lr

08013ce8 <_fini>:
 8013ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cea:	bf00      	nop
 8013cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cee:	bc08      	pop	{r3}
 8013cf0:	469e      	mov	lr, r3
 8013cf2:	4770      	bx	lr
