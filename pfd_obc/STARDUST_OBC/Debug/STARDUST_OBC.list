
STARDUST_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ad4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08013ca8  08013ca8  00023ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144b8  080144b8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080144b8  080144b8  000244b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144c0  080144c0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144c0  080144c0  000244c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080144c4  080144c4  000244c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080144c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f88  200001f0  080146b8  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20007178  080146b8  00037178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000299f1  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000620a  00000000  00000000  00059c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002160  00000000  00000000  0005fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019ae  00000000  00000000  00061fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000097ea  00000000  00000000  0006396e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b083  00000000  00000000  0006d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaa2a  00000000  00000000  000981db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a35c  00000000  00000000  00182c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018cf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013c8c 	.word	0x08013c8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08013c8c 	.word	0x08013c8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <checkLiftoff>:
#include "checking.h"

#include "system.h"

uint8_t checkLiftoff()
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    if (fabs((double)accel.absG) > LIFTOFF_ACCELERATION &&
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <checkLiftoff+0x40>)
 8001036:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800103a:	eef0 7ae7 	vabs.f32	s15, s15
 800103e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd0b      	ble.n	8001064 <checkLiftoff+0x34>
        altitude.altitude > LIFTOFF_ALTITUDE)
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <checkLiftoff+0x44>)
 800104e:	edd3 7a03 	vldr	s15, [r3, #12]
    if (fabs((double)accel.absG) > LIFTOFF_ACCELERATION &&
 8001052:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001078 <checkLiftoff+0x48>
 8001056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd01      	ble.n	8001064 <checkLiftoff+0x34>
    {
        return 1;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <checkLiftoff+0x36>
    }
    else
        return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000854 	.word	0x20000854
 8001074:	200008f0 	.word	0x200008f0
 8001078:	43870000 	.word	0x43870000

0800107c <checkBurnout>:

uint8_t checkBurnout()
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
    if (fabs((double)accel.absG) < BURNOUT_ACCELERATION &&
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <checkBurnout+0x40>)
 8001082:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001086:	eef0 7ae7 	vabs.f32	s15, s15
 800108a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800108e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d50b      	bpl.n	80010b0 <checkBurnout+0x34>
        altitude.altitude > BURNOUT_ALTITUDE)
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <checkBurnout+0x44>)
 800109a:	edd3 7a03 	vldr	s15, [r3, #12]
    if (fabs((double)accel.absG) < BURNOUT_ACCELERATION &&
 800109e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010c4 <checkBurnout+0x48>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd01      	ble.n	80010b0 <checkBurnout+0x34>
    {
        return 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <checkBurnout+0x36>
    }
    else
        return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000854 	.word	0x20000854
 80010c0:	200008f0 	.word	0x200008f0
 80010c4:	44480000 	.word	0x44480000

080010c8 <checkApogee>:

uint8_t checkApogee()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    if (altitude.altitude > APOGEE_ALTITUDE &&
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <checkApogee+0x80>)
 80010ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800114c <checkApogee+0x84>
 80010d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dd2d      	ble.n	800113c <checkApogee+0x74>
        velocity.verticalVelocity < APOGEE_VERTICAL_VELOCITY &&
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <checkApogee+0x88>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
    if (altitude.altitude > APOGEE_ALTITUDE &&
 80010e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d523      	bpl.n	800113c <checkApogee+0x74>
        accel.x < 0.5 && (fabs(accel.y) > 0.5 || fabs(accel.z) > 0.5))
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <checkApogee+0x8c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
        velocity.verticalVelocity < APOGEE_VERTICAL_VELOCITY &&
 80010fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d519      	bpl.n	800113c <checkApogee+0x74>
        accel.x < 0.5 && (fabs(accel.y) > 0.5 || fabs(accel.z) > 0.5))
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <checkApogee+0x8c>)
 800110a:	edd3 7a01 	vldr	s15, [r3, #4]
 800110e:	eef0 7ae7 	vabs.f32	s15, s15
 8001112:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dc0b      	bgt.n	8001138 <checkApogee+0x70>
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <checkApogee+0x8c>)
 8001122:	edd3 7a02 	vldr	s15, [r3, #8]
 8001126:	eef0 7ae7 	vabs.f32	s15, s15
 800112a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	dd01      	ble.n	800113c <checkApogee+0x74>
    {
        return 1;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <checkApogee+0x76>
    }
    else
        return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200008f0 	.word	0x200008f0
 800114c:	4541c000 	.word	0x4541c000
 8001150:	200008a8 	.word	0x200008a8
 8001154:	20000854 	.word	0x20000854

08001158 <checkMainParachute>:

uint8_t checkMainParachute()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
    if (altitude.altitude < MAIN_PARACHUTE_ALTITUDE)
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <checkMainParachute+0x28>)
 800115e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001162:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001184 <checkMainParachute+0x2c>
 8001166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d501      	bpl.n	8001174 <checkMainParachute+0x1c>
    {
        return 1;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <checkMainParachute+0x1e>
    }
    else
        return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	200008f0 	.word	0x200008f0
 8001184:	447a0000 	.word	0x447a0000

08001188 <checkLanding>:

uint8_t checkLanding()
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    if (velocity.verticalVelocity > -1 && velocity.verticalVelocity < 1 &&
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <checkLanding+0x50>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	dd15      	ble.n	80011cc <checkLanding+0x44>
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <checkLanding+0x50>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d50b      	bpl.n	80011cc <checkLanding+0x44>
        altitude.altitude < 100)
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <checkLanding+0x54>)
 80011b6:	edd3 7a03 	vldr	s15, [r3, #12]
    if (velocity.verticalVelocity > -1 && velocity.verticalVelocity < 1 &&
 80011ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011e0 <checkLanding+0x58>
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d501      	bpl.n	80011cc <checkLanding+0x44>
    {
        return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <checkLanding+0x46>
    }
    else
        return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200008a8 	.word	0x200008a8
 80011dc:	200008f0 	.word	0x200008f0
 80011e0:	42c80000 	.word	0x42c80000

080011e4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <BSP_I2C2_Init+0x58>)
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <BSP_I2C2_Init+0x5c>)
 80011f2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <BSP_I2C2_Init+0x60>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	4912      	ldr	r1, [pc, #72]	; (8001244 <BSP_I2C2_Init+0x60>)
 80011fc:	600a      	str	r2, [r1, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d117      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <BSP_I2C2_Init+0x58>)
 8001204:	f003 fc87 	bl	8004b16 <HAL_I2C_GetState>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d111      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <BSP_I2C2_Init+0x58>)
 8001210:	f000 f84e 	bl	80012b0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <BSP_I2C2_Init+0x58>)
 800121c:	f000 f814 	bl	8001248 <MX_I2C2_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001226:	f06f 0307 	mvn.w	r3, #7
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <BSP_I2C2_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000020c 	.word	0x2000020c
 8001240:	40005800 	.word	0x40005800
 8001244:	20000260 	.word	0x20000260

08001248 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <MX_I2C2_Init+0x60>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C2_Init+0x64>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f002 fdf9 	bl	8003e84 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005800 	.word	0x40005800
 80012ac:	00061a80 	.word	0x00061a80

080012b0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <I2C2_MspInit+0xb8>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a29      	ldr	r2, [pc, #164]	; (8001368 <I2C2_MspInit+0xb8>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <I2C2_MspInit+0xb8>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <I2C2_MspInit+0xb8>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <I2C2_MspInit+0xb8>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <I2C2_MspInit+0xb8>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001302:	2304      	movs	r3, #4
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <I2C2_MspInit+0xbc>)
 800130e:	f002 fbcf 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001324:	2304      	movs	r3, #4
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <I2C2_MspInit+0xc0>)
 8001330:	f002 fbbe 	bl	8003ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <I2C2_MspInit+0xb8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <I2C2_MspInit+0xb8>)
 800133e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <I2C2_MspInit+0xb8>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2021      	movs	r0, #33	; 0x21
 8001356:	f001 ff65 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800135a:	2021      	movs	r0, #33	; 0x21
 800135c:	f001 ff7e 	bl	800325c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800

08001374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_DMA_Init+0x4c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_DMA_Init+0x4c>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_DMA_Init+0x4c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	203b      	movs	r0, #59	; 0x3b
 800139c:	f001 ff42 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013a0:	203b      	movs	r0, #59	; 0x3b
 80013a2:	f001 ff5b 	bl	800325c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	2045      	movs	r0, #69	; 0x45
 80013ac:	f001 ff3a 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013b0:	2045      	movs	r0, #69	; 0x45
 80013b2:	f001 ff53 	bl	800325c <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle =
        osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <MX_FREERTOS_Init+0x78>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_FREERTOS_Init+0x7c>)
 80013ce:	f009 fd82 	bl	800aed6 <osThreadNew>
 80013d2:	4603      	mov	r3, r0
    defaultTaskHandle =
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_FREERTOS_Init+0x80>)
 80013d6:	6013      	str	r3, [r2, #0]

    /* creation of runCommand */
    runCommandHandle =
        osThreadNew(runCommandEntry, NULL, &runCommand_attributes);
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_FREERTOS_Init+0x84>)
 80013da:	2100      	movs	r1, #0
 80013dc:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_FREERTOS_Init+0x88>)
 80013de:	f009 fd7a 	bl	800aed6 <osThreadNew>
 80013e2:	4603      	mov	r3, r0
    runCommandHandle =
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <MX_FREERTOS_Init+0x8c>)
 80013e6:	6013      	str	r3, [r2, #0]

    /* creation of sendTelemetry */
    sendTelemetryHandle =
        osThreadNew(sendTelemetryEntry, NULL, &sendTelemetry_attributes);
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <MX_FREERTOS_Init+0x90>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_FREERTOS_Init+0x94>)
 80013ee:	f009 fd72 	bl	800aed6 <osThreadNew>
 80013f2:	4603      	mov	r3, r0
    sendTelemetryHandle =
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <MX_FREERTOS_Init+0x98>)
 80013f6:	6013      	str	r3, [r2, #0]

    /* creation of checkState */
    checkStateHandle =
        osThreadNew(checkStateEntry, NULL, &checkState_attributes);
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <MX_FREERTOS_Init+0x9c>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4819      	ldr	r0, [pc, #100]	; (8001464 <MX_FREERTOS_Init+0xa0>)
 80013fe:	f009 fd6a 	bl	800aed6 <osThreadNew>
 8001402:	4603      	mov	r3, r0
    checkStateHandle =
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <MX_FREERTOS_Init+0xa4>)
 8001406:	6013      	str	r3, [r2, #0]

    /* creation of someLoop */
    someLoopHandle = osThreadNew(someLoopEntry, NULL, &someLoop_attributes);
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_FREERTOS_Init+0xa8>)
 800140a:	2100      	movs	r1, #0
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <MX_FREERTOS_Init+0xac>)
 800140e:	f009 fd62 	bl	800aed6 <osThreadNew>
 8001412:	4603      	mov	r3, r0
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_FREERTOS_Init+0xb0>)
 8001416:	6013      	str	r3, [r2, #0]

    /* creation of sdLog */
    sdLogHandle = osThreadNew(sdLogEnrty, NULL, &sdLog_attributes);
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <MX_FREERTOS_Init+0xb4>)
 800141a:	2100      	movs	r1, #0
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <MX_FREERTOS_Init+0xb8>)
 800141e:	f009 fd5a 	bl	800aed6 <osThreadNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a16      	ldr	r2, [pc, #88]	; (8001480 <MX_FREERTOS_Init+0xbc>)
 8001426:	6013      	str	r3, [r2, #0]

    /* creation of dataTask */
    dataTaskHandle = osThreadNew(dataTaskEntry, NULL, &dataTask_attributes);
 8001428:	4a16      	ldr	r2, [pc, #88]	; (8001484 <MX_FREERTOS_Init+0xc0>)
 800142a:	2100      	movs	r1, #0
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <MX_FREERTOS_Init+0xc4>)
 800142e:	f009 fd52 	bl	800aed6 <osThreadNew>
 8001432:	4603      	mov	r3, r0
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_FREERTOS_Init+0xc8>)
 8001436:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_THREADS */

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08013f10 	.word	0x08013f10
 8001440:	08001491 	.word	0x08001491
 8001444:	20000268 	.word	0x20000268
 8001448:	08013f34 	.word	0x08013f34
 800144c:	080014a1 	.word	0x080014a1
 8001450:	2000026c 	.word	0x2000026c
 8001454:	08013f58 	.word	0x08013f58
 8001458:	080014b1 	.word	0x080014b1
 800145c:	20000270 	.word	0x20000270
 8001460:	08013f7c 	.word	0x08013f7c
 8001464:	080014c1 	.word	0x080014c1
 8001468:	20000274 	.word	0x20000274
 800146c:	08013fa0 	.word	0x08013fa0
 8001470:	08001625 	.word	0x08001625
 8001474:	20000278 	.word	0x20000278
 8001478:	08013fc4 	.word	0x08013fc4
 800147c:	08001635 	.word	0x08001635
 8001480:	2000027c 	.word	0x2000027c
 8001484:	08013fe8 	.word	0x08013fe8
 8001488:	08001679 	.word	0x08001679
 800148c:	20000280 	.word	0x20000280

08001490 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f009 fdae 	bl	800affa <osDelay>
 800149e:	e7fb      	b.n	8001498 <StartDefaultTask+0x8>

080014a0 <runCommandEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCommandEntry */
void runCommandEntry(void *argument)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
        //            HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin,
        //            GPIO_PIN_SET); HAL_GPIO_WritePin(MAINP_GPIO_Port,
        //            MAINP_Pin, GPIO_PIN_SET);
        //        }

        osDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f009 fda6 	bl	800affa <osDelay>
 80014ae:	e7fb      	b.n	80014a8 <runCommandEntry+0x8>

080014b0 <sendTelemetryEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sendTelemetryEntry */
void sendTelemetryEntry(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
        //        createTxString();
        //        HAL_UART_Transmit(&huart2, (uint8_t *)tlcTxString, strlen(tlcTxString),
        //                          100);
        //        HAL_UART_Transmit(&huart4, (uint8_t *)tlcTxString, strlen(tlcTxString),
        //                          100);
        osDelay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f009 fd9e 	bl	800affa <osDelay>
 80014be:	e7fb      	b.n	80014b8 <sendTelemetryEntry+0x8>

080014c0 <checkStateEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_checkStateEntry */
void checkStateEntry(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN checkStateEntry */
    /* Infinite loop */
    for (;;)
    {
        if (time.current != time.prevTime)
 80014c8:	4b51      	ldr	r3, [pc, #324]	; (8001610 <checkStateEntry+0x150>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4b50      	ldr	r3, [pc, #320]	; (8001610 <checkStateEntry+0x150>)
 80014d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d00f      	beq.n	80014fe <checkStateEntry+0x3e>
        {
            sprintf(flightStateData, "%d\n", flightState);
 80014de:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <checkStateEntry+0x154>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	494c      	ldr	r1, [pc, #304]	; (8001618 <checkStateEntry+0x158>)
 80014e6:	484d      	ldr	r0, [pc, #308]	; (800161c <checkStateEntry+0x15c>)
 80014e8:	f00d fc08 	bl	800ecfc <siprintf>
            HAL_UART_Transmit_IT(&huart2, flightStateData, sizeof(flightStateData));
 80014ec:	2202      	movs	r2, #2
 80014ee:	494b      	ldr	r1, [pc, #300]	; (800161c <checkStateEntry+0x15c>)
 80014f0:	484b      	ldr	r0, [pc, #300]	; (8001620 <checkStateEntry+0x160>)
 80014f2:	f007 fcca 	bl	8008e8a <HAL_UART_Transmit_IT>
            time.prevTime = time.current;
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <checkStateEntry+0x150>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a45      	ldr	r2, [pc, #276]	; (8001610 <checkStateEntry+0x150>)
 80014fc:	6053      	str	r3, [r2, #4]
        }

        switch (flightState)
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <checkStateEntry+0x154>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3b01      	subs	r3, #1
 8001504:	2b08      	cmp	r3, #8
 8001506:	d872      	bhi.n	80015ee <checkStateEntry+0x12e>
 8001508:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <checkStateEntry+0x50>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001535 	.word	0x08001535
 8001514:	080015ef 	.word	0x080015ef
 8001518:	080015ef 	.word	0x080015ef
 800151c:	0800154f 	.word	0x0800154f
 8001520:	08001569 	.word	0x08001569
 8001524:	08001589 	.word	0x08001589
 8001528:	080015a9 	.word	0x080015a9
 800152c:	080015c3 	.word	0x080015c3
 8001530:	080015e5 	.word	0x080015e5
        {
        case START:
            if (checkLiftoff() == 1)
 8001534:	f7ff fd7c 	bl	8001030 <checkLiftoff>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d15b      	bne.n	80015f6 <checkStateEntry+0x136>
            {
                time.liftoffTime = time.current;
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <checkStateEntry+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <checkStateEntry+0x150>)
 8001544:	6093      	str	r3, [r2, #8]
                flightState = AFTER_LIFTOFF;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <checkStateEntry+0x154>)
 8001548:	2204      	movs	r2, #4
 800154a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800154c:	e053      	b.n	80015f6 <checkStateEntry+0x136>

        case AFTER_LIFTOFF:
            if (checkBurnout() == 1)
 800154e:	f7ff fd95 	bl	800107c <checkBurnout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d150      	bne.n	80015fa <checkStateEntry+0x13a>
            {
                time.burnoutTime = time.current;
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <checkStateEntry+0x150>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <checkStateEntry+0x150>)
 800155e:	60d3      	str	r3, [r2, #12]
                flightState = AFTER_BURNOUT;
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <checkStateEntry+0x154>)
 8001562:	2205      	movs	r2, #5
 8001564:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001566:	e048      	b.n	80015fa <checkStateEntry+0x13a>

        case AFTER_BURNOUT:
            if (checkApogee() == 1)
 8001568:	f7ff fdae 	bl	80010c8 <checkApogee>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d145      	bne.n	80015fe <checkStateEntry+0x13e>
            {
                time.apogeeTime = time.current;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <checkStateEntry+0x150>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a26      	ldr	r2, [pc, #152]	; (8001610 <checkStateEntry+0x150>)
 8001578:	6113      	str	r3, [r2, #16]
                flightState = AFTER_APOGEE;
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <checkStateEntry+0x154>)
 800157c:	2206      	movs	r2, #6
 800157e:	701a      	strb	r2, [r3, #0]
                dragSchute(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f001 fb03 	bl	8002b8c <dragSchute>
            }
            break;
 8001586:	e03a      	b.n	80015fe <checkStateEntry+0x13e>

        case AFTER_APOGEE:
            if (checkMainParachute() == 1)
 8001588:	f7ff fde6 	bl	8001158 <checkMainParachute>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d137      	bne.n	8001602 <checkStateEntry+0x142>
            {
                time.mainParachuteTime = time.current;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <checkStateEntry+0x150>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <checkStateEntry+0x150>)
 8001598:	6153      	str	r3, [r2, #20]
                flightState = AFTER_MAIN_PAR;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <checkStateEntry+0x154>)
 800159c:	2207      	movs	r2, #7
 800159e:	701a      	strb	r2, [r3, #0]
                mainSchute(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f001 fb0d 	bl	8002bc0 <mainSchute>
            }
            break;
 80015a6:	e02c      	b.n	8001602 <checkStateEntry+0x142>

        case AFTER_MAIN_PAR:
            if (checkLanding() == 1)
 80015a8:	f7ff fdee 	bl	8001188 <checkLanding>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d129      	bne.n	8001606 <checkStateEntry+0x146>
            {
                time.landingTime = time.current;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <checkStateEntry+0x150>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <checkStateEntry+0x150>)
 80015b8:	6213      	str	r3, [r2, #32]
                flightState = LANDED;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <checkStateEntry+0x154>)
 80015bc:	2208      	movs	r2, #8
 80015be:	701a      	strb	r2, [r3, #0]
            }
            break;
 80015c0:	e021      	b.n	8001606 <checkStateEntry+0x146>

        case LANDED:
            if (time.landingTime == 0.0f)
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <checkStateEntry+0x150>)
 80015c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80015c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d103      	bne.n	80015da <checkStateEntry+0x11a>
            {
                time.landingTime = time.current;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <checkStateEntry+0x150>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <checkStateEntry+0x150>)
 80015d8:	6213      	str	r3, [r2, #32]
            }
            osDelay(10000); /* TODO: Something for saving power*/
 80015da:	f242 7010 	movw	r0, #10000	; 0x2710
 80015de:	f009 fd0c 	bl	800affa <osDelay>
            break;
 80015e2:	e011      	b.n	8001608 <checkStateEntry+0x148>

        case FLIGHT_FAILURE:
            osDelay(10000); /* TODO: Something for saving power*/
 80015e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80015e8:	f009 fd07 	bl	800affa <osDelay>
            break;
 80015ec:	e00c      	b.n	8001608 <checkStateEntry+0x148>

        default:
        	flightState = START;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <checkStateEntry+0x154>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
            break;
 80015f4:	e008      	b.n	8001608 <checkStateEntry+0x148>
            break;
 80015f6:	bf00      	nop
 80015f8:	e006      	b.n	8001608 <checkStateEntry+0x148>
            break;
 80015fa:	bf00      	nop
 80015fc:	e004      	b.n	8001608 <checkStateEntry+0x148>
            break;
 80015fe:	bf00      	nop
 8001600:	e002      	b.n	8001608 <checkStateEntry+0x148>
            break;
 8001602:	bf00      	nop
 8001604:	e000      	b.n	8001608 <checkStateEntry+0x148>
            break;
 8001606:	bf00      	nop
        }
        osDelay(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f009 fcf6 	bl	800affa <osDelay>
        if (time.current != time.prevTime)
 800160e:	e75b      	b.n	80014c8 <checkStateEntry+0x8>
 8001610:	20000830 	.word	0x20000830
 8001614:	20000000 	.word	0x20000000
 8001618:	08013cfc 	.word	0x08013cfc
 800161c:	20000264 	.word	0x20000264
 8001620:	20000a8c 	.word	0x20000a8c

08001624 <someLoopEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_someLoopEntry */
void someLoopEntry(void *argument)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
        //        strlen(tlcTxString),
        //                          100);
        //        HAL_UART_Transmit(&huart2, (uint8_t *)tlcTxString,
        //        strlen(tlcTxString),
        //                          100);
        osDelay(10);
 800162c:	200a      	movs	r0, #10
 800162e:	f009 fce4 	bl	800affa <osDelay>
 8001632:	e7fb      	b.n	800162c <someLoopEntry+0x8>

08001634 <sdLogEnrty>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sdLogEnrty */
void sdLogEnrty(void *argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN sdLogEnrty */
    // initSD();
    // fram_init();

    int fram_flight_state = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
    fram_flight_state = fram_read8(FRAM_FLIGHT_STATE_ADDR);
 8001640:	2050      	movs	r0, #80	; 0x50
 8001642:	f001 fbeb 	bl	8002e1c <fram_read8>
 8001646:	4603      	mov	r3, r0
 8001648:	617b      	str	r3, [r7, #20]
    if (fram_flight_state == LANDED)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d101      	bne.n	8001654 <sdLogEnrty+0x20>
    {
        fram_flight_state = START;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
    }
    if (fram_flight_state != START)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d003      	beq.n	8001662 <sdLogEnrty+0x2e>
    {
        flightState = fram_flight_state;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <sdLogEnrty+0x40>)
 8001660:	701a      	strb	r2, [r3, #0]
    }

    float test_float = 0.0f;
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
    int tick_t = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
        // fram_write8(FRAM_SYS_TICK_ADDR, fram_test8);
        // osDelay(10);

        // fram_debug_data = fram_read8(FRAM_SYS_TICK_ADDR);

        osDelay(1);
 800166c:	2001      	movs	r0, #1
 800166e:	f009 fcc4 	bl	800affa <osDelay>
 8001672:	e7fb      	b.n	800166c <sdLogEnrty+0x38>
 8001674:	20000000 	.word	0x20000000

08001678 <dataTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_dataTaskEntry */
void dataTaskEntry(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN dataTaskEntry */
    // int temp;
    // temp = HAL_GetTick();
    initFilter();
 8001680:	f001 f9de 	bl	8002a40 <initFilter>

    //initBarometer();
    // initIMU();
    // initMagnetometer();,
    // readData();
    basePressure(); // init fonk. base pressure değeri için bir fonk.
 8001684:	f000 ff88 	bl	8002598 <basePressure>
    /* Infinite loop */
    for (;;)
    {
        // temp = HAL_GetTick();
        //
        readTime();
 8001688:	f000 fefe 	bl	8002488 <readTime>
        readAltitude();
 800168c:	f000 ffb0 	bl	80025f0 <readAltitude>
        readIMU();
 8001690:	f001 f852 	bl	8002738 <readIMU>
        // readMagnetometer();
        //  HAL_GPIO_TogglePin(USERL_GPIO_Port, USERL_Pin);

        // velocityCalculated();
        //  dataCollectingTime = HAL_GetTick() - temp;
        osDelay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f009 fcb0 	bl	800affa <osDelay>
        readTime();
 800169a:	e7f5      	b.n	8001688 <dataTaskEntry+0x10>

0800169c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <MX_GPIO_Init+0x120>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <MX_GPIO_Init+0x120>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <MX_GPIO_Init+0x120>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <MX_GPIO_Init+0x120>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a39      	ldr	r2, [pc, #228]	; (80017bc <MX_GPIO_Init+0x120>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <MX_GPIO_Init+0x120>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <MX_GPIO_Init+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <MX_GPIO_Init+0x120>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <MX_GPIO_Init+0x120>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <MX_GPIO_Init+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a2b      	ldr	r2, [pc, #172]	; (80017bc <MX_GPIO_Init+0x120>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <MX_GPIO_Init+0x120>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAINP_Pin|DRAGP_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2103      	movs	r1, #3
 8001726:	4826      	ldr	r0, [pc, #152]	; (80017c0 <MX_GPIO_Init+0x124>)
 8001728:	f002 fb6e 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USERL_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2118      	movs	r1, #24
 8001730:	4824      	ldr	r0, [pc, #144]	; (80017c4 <MX_GPIO_Init+0x128>)
 8001732:	f002 fb69 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USERB_Pin;
 8001736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USERB_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <MX_GPIO_Init+0x124>)
 800174e:	f002 f9af 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <MX_GPIO_Init+0x124>)
 8001768:	f002 f9a2 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAINP_Pin|DRAGP_Pin;
 800176c:	2303      	movs	r3, #3
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480f      	ldr	r0, [pc, #60]	; (80017c0 <MX_GPIO_Init+0x124>)
 8001784:	f002 f994 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USERL_Pin|BUZZER_Pin;
 8001788:	2318      	movs	r3, #24
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_GPIO_Init+0x128>)
 80017a0:	f002 f986 	bl	8003ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2105      	movs	r1, #5
 80017a8:	2028      	movs	r0, #40	; 0x28
 80017aa:	f001 fd3b 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ae:	2028      	movs	r0, #40	; 0x28
 80017b0:	f001 fd54 	bl	800325c <HAL_NVIC_EnableIRQ>

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020400 	.word	0x40020400

080017c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_I2C1_Init+0x50>)
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <MX_I2C1_Init+0x54>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_I2C1_Init+0x50>)
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_I2C1_Init+0x58>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_I2C1_Init+0x50>)
 80017e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_I2C1_Init+0x50>)
 8001806:	f002 fb3d 	bl	8003e84 <HAL_I2C_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001810:	f000 fa67 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000284 	.word	0x20000284
 800181c:	40005400 	.word	0x40005400
 8001820:	00061a80 	.word	0x00061a80

08001824 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_I2C3_Init+0x50>)
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <MX_I2C3_Init+0x54>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_I2C3_Init+0x50>)
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_I2C3_Init+0x58>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_I2C3_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_I2C3_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_I2C3_Init+0x50>)
 8001842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001846:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <MX_I2C3_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_I2C3_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <MX_I2C3_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_I2C3_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_I2C3_Init+0x50>)
 8001862:	f002 fb0f 	bl	8003e84 <HAL_I2C_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 fa39 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200002d8 	.word	0x200002d8
 8001878:	40005c00 	.word	0x40005c00
 800187c:	000186a0 	.word	0x000186a0

08001880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <HAL_I2C_MspInit+0x148>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d134      	bne.n	800190c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c2:	2312      	movs	r3, #18
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ce:	2304      	movs	r3, #4
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	483d      	ldr	r0, [pc, #244]	; (80019d0 <HAL_I2C_MspInit+0x150>)
 80018da:	f002 f8e9 	bl	8003ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a39      	ldr	r2, [pc, #228]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2105      	movs	r1, #5
 80018fe:	201f      	movs	r0, #31
 8001900:	f001 fc90 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001904:	201f      	movs	r0, #31
 8001906:	f001 fca9 	bl	800325c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800190a:	e058      	b.n	80019be <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_I2C_MspInit+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d153      	bne.n	80019be <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a2b      	ldr	r2, [pc, #172]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a24      	ldr	r2, [pc, #144]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800194e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001960:	2304      	movs	r3, #4
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	481b      	ldr	r0, [pc, #108]	; (80019d8 <HAL_I2C_MspInit+0x158>)
 800196c:	f002 f8a0 	bl	8003ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001976:	2312      	movs	r3, #18
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001982:	2304      	movs	r3, #4
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <HAL_I2C_MspInit+0x15c>)
 800198e:	f002 f88f 	bl	8003ab0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 800199c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_I2C_MspInit+0x14c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2048      	movs	r0, #72	; 0x48
 80019b4:	f001 fc36 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80019b8:	2048      	movs	r0, #72	; 0x48
 80019ba:	f001 fc4f 	bl	800325c <HAL_NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40005400 	.word	0x40005400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40005c00 	.word	0x40005c00
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020000 	.word	0x40020000

080019e0 <HAL_I2C_MemRxCpltCallback>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_I2C_MemRxCpltCallback+0x2c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d004      	beq.n	80019fe <HAL_I2C_MemRxCpltCallback+0x1e>
    {
        /* BMP280 IT*/
    }
    else if (hi2c->Instance == hi2c2.Instance)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_I2C_MemRxCpltCallback+0x30>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	429a      	cmp	r2, r3
    }
    else if (hi2c->Instance == hi2c3.Instance)
    {
        /* LIS & MB85R  IT*/
    }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000284 	.word	0x20000284
 8001a10:	2000020c 	.word	0x2000020c

08001a14 <HAL_UART_RxCpltCallback>:
uint8_t rxBuffer[2];
uint8_t rxIndex = 0;
uint8_t rxStr[270];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart4.Instance)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <HAL_UART_RxCpltCallback+0x118>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d14b      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0xac>
    {
        // receive telemetry strong that ends with '\n' then parse
        if (tlcRxByte == '\n')
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_UART_RxCpltCallback+0x11c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0a      	cmp	r3, #10
 8001a2e:	d11f      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0x5c>
        {
            tlcRxString[tlcRxIndex] = '\n';
 8001a30:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a40      	ldr	r2, [pc, #256]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a36:	210a      	movs	r1, #10
 8001a38:	54d1      	strb	r1, [r2, r3]
            tlcRxIndex++;
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a42:	6013      	str	r3, [r2, #0]
            // parse telemetry string
            parseTlcString(tlcRxString);
 8001a44:	483c      	ldr	r0, [pc, #240]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a46:	f000 ffd7 	bl	80029f8 <parseTlcString>
            tlcRxIndex = 0;
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
            // clear telemetry string
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e007      	b.n	8001a66 <HAL_UART_RxCpltCallback+0x52>
            {
                tlcRxString[i] = '\0';
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a6c:	d3f3      	bcc.n	8001a56 <HAL_UART_RxCpltCallback+0x42>
 8001a6e:	e00a      	b.n	8001a86 <HAL_UART_RxCpltCallback+0x72>
            }
        }
        else
        {
            tlcRxString[tlcRxIndex] = tlcRxByte;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <HAL_UART_RxCpltCallback+0x11c>)
 8001a76:	7811      	ldrb	r1, [r2, #0]
 8001a78:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a7a:	54d1      	strb	r1, [r2, r3]
            tlcRxIndex++;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a84:	6013      	str	r3, [r2, #0]
        }

        if (tlcRxIndex > STRING_BUFFER_SIZE)
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a8e:	dd11      	ble.n	8001ab4 <HAL_UART_RxCpltCallback+0xa0>
        {
            tlcRxIndex = 0;
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_UART_RxCpltCallback+0x120>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e007      	b.n	8001aac <HAL_UART_RxCpltCallback+0x98>
            {
                tlcRxString[i] = '\0';
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_UART_RxCpltCallback+0x124>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ab2:	d3f3      	bcc.n	8001a9c <HAL_UART_RxCpltCallback+0x88>
            }
        }
        HAL_UART_Receive_IT(&huart4, &tlcRxByte, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	491e      	ldr	r1, [pc, #120]	; (8001b30 <HAL_UART_RxCpltCallback+0x11c>)
 8001ab8:	481c      	ldr	r0, [pc, #112]	; (8001b2c <HAL_UART_RxCpltCallback+0x118>)
 8001aba:	f007 fa2b 	bl	8008f14 <HAL_UART_Receive_IT>
 8001abe:	e02c      	b.n	8001b1a <HAL_UART_RxCpltCallback+0x106>
    }
    else if (huart->Instance == huart2.Instance)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_UART_RxCpltCallback+0x128>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d126      	bne.n	8001b1a <HAL_UART_RxCpltCallback+0x106>
    {
        if (rxBuffer[0] != '\n')
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_UART_RxCpltCallback+0x12c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b0a      	cmp	r3, #10
 8001ad2:	d00d      	beq.n	8001af0 <HAL_UART_RxCpltCallback+0xdc>
        {
            rxStr[rxIndex] = rxBuffer[0];
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_UART_RxCpltCallback+0x12c>)
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_UART_RxCpltCallback+0x134>)
 8001ae0:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e014      	b.n	8001b1a <HAL_UART_RxCpltCallback+0x106>
        }
        else
        {
            //parseData(rxStr);
            //parseKongrulData(rxStr);
            parseIllinoisData(rxStr);
 8001af0:	4815      	ldr	r0, [pc, #84]	; (8001b48 <HAL_UART_RxCpltCallback+0x134>)
 8001af2:	f000 fc91 	bl	8002418 <parseIllinoisData>
            rxIndex = 0;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_UART_RxCpltCallback+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(rxStr); i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e007      	b.n	8001b12 <HAL_UART_RxCpltCallback+0xfe>
            {
                rxStr[i] = '\0';
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_UART_RxCpltCallback+0x134>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(rxStr); i++)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001b18:	d3f3      	bcc.n	8001b02 <HAL_UART_RxCpltCallback+0xee>
            }
        }
    }
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4908      	ldr	r1, [pc, #32]	; (8001b40 <HAL_UART_RxCpltCallback+0x12c>)
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <HAL_UART_RxCpltCallback+0x128>)
 8001b20:	f007 f9f8 	bl	8008f14 <HAL_UART_Receive_IT>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000a48 	.word	0x20000a48
 8001b30:	2000032c 	.word	0x2000032c
 8001b34:	20000330 	.word	0x20000330
 8001b38:	200005d8 	.word	0x200005d8
 8001b3c:	20000a8c 	.word	0x20000a8c
 8001b40:	20000334 	.word	0x20000334
 8001b44:	20000336 	.word	0x20000336
 8001b48:	20000338 	.word	0x20000338

08001b4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001b52:	f001 fa49 	bl	8002fe8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001b56:	f000 f843 	bl	8001be0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001b5a:	f7ff fd9f 	bl	800169c <MX_GPIO_Init>
    MX_DMA_Init();
 8001b5e:	f7ff fc09 	bl	8001374 <MX_DMA_Init>
    MX_I2C1_Init();
 8001b62:	f7ff fe31 	bl	80017c8 <MX_I2C1_Init>
    MX_SDIO_SD_Init();
 8001b66:	f000 f8c5 	bl	8001cf4 <MX_SDIO_SD_Init>
    MX_UART4_Init();
 8001b6a:	f001 f855 	bl	8002c18 <MX_UART4_Init>
    MX_USART2_UART_Init();
 8001b6e:	f001 f87d 	bl	8002c6c <MX_USART2_UART_Init>
    MX_FATFS_Init();
 8001b72:	f008 fe2b 	bl	800a7cc <MX_FATFS_Init>
    MX_I2C3_Init();
 8001b76:	f7ff fe55 	bl	8001824 <MX_I2C3_Init>
    /* USER CODE BEGIN 2 */
    led(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 ffec 	bl	8002b58 <led>
    BSP_I2C2_Init();
 8001b80:	f7ff fb30 	bl	80011e4 <BSP_I2C2_Init>

    openingThemeSong(400);
 8001b84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b88:	f000 fbf6 	bl	8002378 <openingThemeSong>

    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4911      	ldr	r1, [pc, #68]	; (8001bd4 <main+0x88>)
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <main+0x8c>)
 8001b92:	f007 f9bf 	bl	8008f14 <HAL_UART_Receive_IT>

    //     i2c address scan
    for (int i = 0; i < 0xFF + 1; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e011      	b.n	8001bc0 <main+0x74>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c3, i, 2, 10) == HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <main+0x90>)
 8001ba6:	f002 fcd7 	bl	8004558 <HAL_I2C_IsDeviceReady>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d104      	bne.n	8001bba <main+0x6e>
        {
            int a = i >> 1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	105b      	asrs	r3, r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
            a = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 0xFF + 1; i++)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	ddea      	ble.n	8001b9c <main+0x50>
    }

    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize(); /* Call init function for freertos objects (in
 8001bc6:	f009 f905 	bl	800add4 <osKernelInitialize>
                             freertos.c) */
    MX_FREERTOS_Init();
 8001bca:	f7ff fbfb 	bl	80013c4 <MX_FREERTOS_Init>

    /* Start scheduler */
    osKernelStart();
 8001bce:	f009 f947 	bl	800ae60 <osKernelStart>
    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <main+0x86>
 8001bd4:	20000334 	.word	0x20000334
 8001bd8:	20000a8c 	.word	0x20000a8c
 8001bdc:	200002d8 	.word	0x200002d8

08001be0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	2234      	movs	r2, #52	; 0x34
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00d f915 	bl	800ee1e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <SystemClock_Config+0xe0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <SystemClock_Config+0xe0>)
 8001c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <SystemClock_Config+0xe0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c44:	2310      	movs	r3, #16
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001c50:	2308      	movs	r3, #8
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 180;
 8001c54:	23b4      	movs	r3, #180	; 0xb4
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fa5b 	bl	8007124 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x98>
    {
        Error_Handler();
 8001c74:	f000 f835 	bl	8001ce2 <Error_Handler>
    }

    /** Activate the Over-Drive mode
     */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c78:	f004 fbe4 	bl	8006444 <HAL_PWREx_EnableOverDrive>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0xa6>
    {
        Error_Handler();
 8001c82:	f000 f82e 	bl	8001ce2 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001c86:	230f      	movs	r3, #15
 8001c88:	60bb      	str	r3, [r7, #8]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c96:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	2105      	movs	r1, #5
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 fc1d 	bl	80064e4 <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xd4>
    {
        Error_Handler();
 8001cb0:	f000 f817 	bl	8001ce2 <Error_Handler>
    }
}
 8001cb4:	bf00      	nop
 8001cb6:	3750      	adds	r7, #80	; 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8001cd6:	f001 f9a9 	bl	800302c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce6:	b672      	cpsid	i
}
 8001ce8:	bf00      	nop
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
    {
        led(0);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 ff34 	bl	8002b58 <led>
 8001cf0:	e7fb      	b.n	8001cea <Error_Handler+0x8>
	...

08001cf4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <MX_SDIO_SD_Init+0x3c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d1e:	2204      	movs	r2, #4
 8001d20:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	20000448 	.word	0x20000448
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0a2      	sub	sp, #136	; 0x88
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	225c      	movs	r2, #92	; 0x5c
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00d f862 	bl	800ee1e <memset>
  if(sdHandle->Instance==SDIO)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a83      	ldr	r2, [pc, #524]	; (8001f6c <HAL_SD_MspInit+0x238>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f040 80fe 	bne.w	8001f62 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001d70:	2300      	movs	r3, #0
 8001d72:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 fcff 	bl	800677c <HAL_RCCEx_PeriphCLKConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001d84:	f7ff ffad 	bl	8001ce2 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d96:	6453      	str	r3, [r2, #68]	; 0x44
 8001d98:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	4b71      	ldr	r3, [pc, #452]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <HAL_SD_MspInit+0x23c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e14:	4619      	mov	r1, r3
 8001e16:	4857      	ldr	r0, [pc, #348]	; (8001f74 <HAL_SD_MspInit+0x240>)
 8001e18:	f001 fe4a 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e20:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e30:	230c      	movs	r3, #12
 8001e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	484e      	ldr	r0, [pc, #312]	; (8001f78 <HAL_SD_MspInit+0x244>)
 8001e3e:	f001 fe37 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e42:	2304      	movs	r3, #4
 8001e44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e54:	230c      	movs	r3, #12
 8001e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4846      	ldr	r0, [pc, #280]	; (8001f7c <HAL_SD_MspInit+0x248>)
 8001e62:	f001 fe25 	bl	8003ab0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e68:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_SD_MspInit+0x250>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001e6c:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e86:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e88:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e96:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001eba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001ec0:	482f      	ldr	r0, [pc, #188]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ec2:	f001 f9d9 	bl	8003278 <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001ecc:	f7ff ff09 	bl	8001ce2 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <HAL_SD_MspInit+0x24c>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_SD_MspInit+0x258>)
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f10:	2220      	movs	r2, #32
 8001f12:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f22:	2203      	movs	r2, #3
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f36:	4814      	ldr	r0, [pc, #80]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f38:	f001 f99e 	bl	8003278 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8001f42:	f7ff fece 	bl	8001ce2 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_SD_MspInit+0x254>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2105      	movs	r1, #5
 8001f56:	2031      	movs	r0, #49	; 0x31
 8001f58:	f001 f964 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001f5c:	2031      	movs	r0, #49	; 0x31
 8001f5e:	f001 f97d 	bl	800325c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3788      	adds	r7, #136	; 0x88
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	200004cc 	.word	0x200004cc
 8001f84:	40026458 	.word	0x40026458
 8001f88:	2000052c 	.word	0x2000052c
 8001f8c:	400264a0 	.word	0x400264a0

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_MspInit+0x64>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_MspInit+0x64>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	f06f 0001 	mvn.w	r0, #1
 8001fd6:	f001 f925 	bl	8003224 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f001 f920 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f001 f939 	bl	800325c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_InitTick+0xe8>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a33      	ldr	r2, [pc, #204]	; (80020e0 <HAL_InitTick+0xe8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_InitTick+0xe8>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002024:	f107 0210 	add.w	r2, r7, #16
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fb72 	bl	8006718 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800203e:	f004 fb43 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8002042:	6378      	str	r0, [r7, #52]	; 0x34
 8002044:	e004      	b.n	8002050 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002046:	f004 fb3f 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 800204a:	4603      	mov	r3, r0
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_InitTick+0xec>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9b      	lsrs	r3, r3, #18
 800205a:	3b01      	subs	r3, #1
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_InitTick+0xf0>)
 8002060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_InitTick+0xf0>)
 8002068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800206c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_InitTick+0xf0>)
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_InitTick+0xf0>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_InitTick+0xf0>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_InitTick+0xf0>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002086:	4818      	ldr	r0, [pc, #96]	; (80020e8 <HAL_InitTick+0xf0>)
 8002088:	f006 fc04 	bl	8008894 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11b      	bne.n	80020d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800209a:	4813      	ldr	r0, [pc, #76]	; (80020e8 <HAL_InitTick+0xf0>)
 800209c:	f006 fc54 	bl	8008948 <HAL_TIM_Base_Start_IT>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d111      	bne.n	80020d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ae:	201c      	movs	r0, #28
 80020b0:	f001 f8d4 	bl	800325c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	d808      	bhi.n	80020cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80020ba:	2200      	movs	r2, #0
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	201c      	movs	r0, #28
 80020c0:	f001 f8b0 	bl	8003224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c4:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_InitTick+0xf4>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e002      	b.n	80020d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3738      	adds	r7, #56	; 0x38
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	2000058c 	.word	0x2000058c
 80020ec:	20000008 	.word	0x20000008

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002120:	f004 f976 	bl	8006410 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM2_IRQHandler+0x10>)
 800212e:	f006 fc7b 	bl	8008a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000058c 	.word	0x2000058c

0800213c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <I2C1_EV_IRQHandler+0x10>)
 8002142:	f002 fb37 	bl	80047b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000284 	.word	0x20000284

08002150 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <I2C2_EV_IRQHandler+0x10>)
 8002156:	f002 fb2d 	bl	80047b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000020c 	.word	0x2000020c

08002164 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <USART2_IRQHandler+0x10>)
 800216a:	f006 ff03 	bl	8008f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000a8c 	.word	0x20000a8c

08002178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USERB_Pin);
 800217c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002180:	f001 fe5c 	bl	8003e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <SDIO_IRQHandler+0x10>)
 800218e:	f005 fcd9 	bl	8007b44 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000448 	.word	0x20000448

0800219c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <UART4_IRQHandler+0x10>)
 80021a2:	f006 fee7 	bl	8008f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000a48 	.word	0x20000a48

080021b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <DMA2_Stream3_IRQHandler+0x10>)
 80021b6:	f001 f9f7 	bl	80035a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200004cc 	.word	0x200004cc

080021c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA2_Stream6_IRQHandler+0x10>)
 80021ca:	f001 f9ed 	bl	80035a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000052c 	.word	0x2000052c

080021d8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <I2C3_EV_IRQHandler+0x10>)
 80021de:	f002 fae9 	bl	80047b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200002d8 	.word	0x200002d8

080021ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_kill>:

int _kill(int pid, int sig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002206:	f00c fec3 	bl	800ef90 <__errno>
 800220a:	4603      	mov	r3, r0
 800220c:	2216      	movs	r2, #22
 800220e:	601a      	str	r2, [r3, #0]
  return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_exit>:

void _exit (int status)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffe7 	bl	80021fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800222e:	e7fe      	b.n	800222e <_exit+0x12>

08002230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e00a      	b.n	8002258 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002242:	f3af 8000 	nop.w
 8002246:	4601      	mov	r1, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	b2ca      	uxtb	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf0      	blt.n	8002242 <_read+0x12>
  }

  return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e009      	b.n	8002290 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf1      	blt.n	800227c <_write+0x12>
  }
  return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_close>:

int _close(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ca:	605a      	str	r2, [r3, #4]
  return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f00c fe28 	bl	800ef90 <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20020000 	.word	0x20020000
 800236c:	00000800 	.word	0x00000800
 8002370:	200005d4 	.word	0x200005d4
 8002374:	20007178 	.word	0x20007178

08002378 <openingThemeSong>:
uint32_t byteswritten, bytesread;             /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[512];                           /* File read buffer */

void openingThemeSong(uint32_t time)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    buzzer(1);
 8002380:	2001      	movs	r0, #1
 8002382:	f000 fbcf 	bl	8002b24 <buzzer>
    led(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fbe6 	bl	8002b58 <led>
    HAL_Delay(time / 5);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <openingThemeSong+0x98>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fe68 	bl	800306c <HAL_Delay>
    buzzer(0);
 800239c:	2000      	movs	r0, #0
 800239e:	f000 fbc1 	bl	8002b24 <buzzer>
    led(0);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 fbd8 	bl	8002b58 <led>
    HAL_Delay(time / 6);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <openingThemeSong+0x9c>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fe5a 	bl	800306c <HAL_Delay>
    buzzer(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f000 fbb3 	bl	8002b24 <buzzer>
    led(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 fbca 	bl	8002b58 <led>
    HAL_Delay(time / 4);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fe4f 	bl	800306c <HAL_Delay>
    buzzer(0);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 fba8 	bl	8002b24 <buzzer>
    led(0);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 fbbf 	bl	8002b58 <led>
    HAL_Delay(time / 2);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fe44 	bl	800306c <HAL_Delay>
    buzzer(1);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 fb9d 	bl	8002b24 <buzzer>
    led(1);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f000 fbb4 	bl	8002b58 <led>
    HAL_Delay(time / 4);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fe39 	bl	800306c <HAL_Delay>
    buzzer(0);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f000 fb92 	bl	8002b24 <buzzer>
    led(0);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 fba9 	bl	8002b58 <led>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	aaaaaaab 	.word	0xaaaaaaab

08002418 <parseIllinoisData>:
           &altitude.temperature, &altitude.humidity,
           &gps.latitude, &gps.longtitude, &time.current);
}

void parseIllinoisData(uint8_t *data)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af0a      	add	r7, sp, #40	; 0x28
 800241e:	6078      	str	r0, [r7, #4]
    sscanf(data, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f", &time.current,
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <parseIllinoisData+0x40>)
 8002422:	9308      	str	r3, [sp, #32]
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <parseIllinoisData+0x44>)
 8002426:	9307      	str	r3, [sp, #28]
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <parseIllinoisData+0x48>)
 800242a:	9306      	str	r3, [sp, #24]
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <parseIllinoisData+0x4c>)
 800242e:	9305      	str	r3, [sp, #20]
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <parseIllinoisData+0x50>)
 8002432:	9304      	str	r3, [sp, #16]
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <parseIllinoisData+0x54>)
 8002436:	9303      	str	r3, [sp, #12]
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <parseIllinoisData+0x58>)
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <parseIllinoisData+0x5c>)
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <parseIllinoisData+0x60>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <parseIllinoisData+0x64>)
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <parseIllinoisData+0x68>)
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <parseIllinoisData+0x6c>)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f00c fc76 	bl	800ed3c <siscanf>
           &accel.x, &accel.y, &accel.z,
           &gyro.x, &gyro.y, &gyro.z,
           &gps.latitude, &gps.longtitude,
           &illinois.altitude, &altitude.pressure);
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200008f0 	.word	0x200008f0
 800245c:	20000938 	.word	0x20000938
 8002460:	200008dc 	.word	0x200008dc
 8002464:	200008d8 	.word	0x200008d8
 8002468:	2000088c 	.word	0x2000088c
 800246c:	20000888 	.word	0x20000888
 8002470:	20000884 	.word	0x20000884
 8002474:	2000085c 	.word	0x2000085c
 8002478:	20000858 	.word	0x20000858
 800247c:	20000854 	.word	0x20000854
 8002480:	20000830 	.word	0x20000830
 8002484:	08013d1c 	.word	0x08013d1c

08002488 <readTime>:

    return 0;
}

void readTime()
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
    time.timeDifference = (time.current - time.prevTime);
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <readTime+0x54>)
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <readTime+0x54>)
 8002494:	edd3 7a01 	vldr	s15, [r3, #4]
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <readTime+0x54>)
 800249e:	edc3 7a06 	vstr	s15, [r3, #24]
    time.prevTime = time.current;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <readTime+0x54>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <readTime+0x54>)
 80024a8:	6053      	str	r3, [r2, #4]

    if (flightState > AFTER_LIFTOFF)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <readTime+0x58>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d90e      	bls.n	80024d0 <readTime+0x48>
    {
        time.flightTime = (time.current - time.liftoffTime) / 1000.0;
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <readTime+0x54>)
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <readTime+0x54>)
 80024ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80024be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024c2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80024e4 <readTime+0x5c>
 80024c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <readTime+0x54>)
 80024cc:	edc3 7a07 	vstr	s15, [r3, #28]
    }
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000830 	.word	0x20000830
 80024e0:	20000000 	.word	0x20000000
 80024e4:	447a0000 	.word	0x447a0000

080024e8 <calculateAltitude>:

static float calculateAltitude(float p, float pi)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80024f2:	edc7 0a00 	vstr	s1, [r7]
    p = p / 100;
 80024f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024fa:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002590 <calculateAltitude+0xa8>
 80024fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002502:	edc7 7a01 	vstr	s15, [r7, #4]
    pi = pi / 100;
 8002506:	ed97 7a00 	vldr	s14, [r7]
 800250a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002590 <calculateAltitude+0xa8>
 800250e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002512:	edc7 7a00 	vstr	s15, [r7]
    float alt = (44330 * (1.0 - pow(p / pi, 0.1903)));
 8002516:	ed97 7a01 	vldr	s14, [r7, #4]
 800251a:	edd7 7a00 	vldr	s15, [r7]
 800251e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002522:	ee16 0a90 	vmov	r0, s13
 8002526:	f7fe f82f 	bl	8000588 <__aeabi_f2d>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002580 <calculateAltitude+0x98>
 8002532:	ec43 2b10 	vmov	d0, r2, r3
 8002536:	f010 fc45 	bl	8012dc4 <pow>
 800253a:	ec53 2b10 	vmov	r2, r3, d0
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	4914      	ldr	r1, [pc, #80]	; (8002594 <calculateAltitude+0xac>)
 8002544:	f7fd fec0 	bl	80002c8 <__aeabi_dsub>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	a30d      	add	r3, pc, #52	; (adr r3, 8002588 <calculateAltitude+0xa0>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f86f 	bl	8000638 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb61 	bl	8000c28 <__aeabi_d2f>
 8002566:	4603      	mov	r3, r0
 8002568:	60fb      	str	r3, [r7, #12]
    return alt;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	ee07 3a90 	vmov	s15, r3
}
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	1a36e2eb 	.word	0x1a36e2eb
 8002584:	3fc85bc0 	.word	0x3fc85bc0
 8002588:	00000000 	.word	0x00000000
 800258c:	40e5a540 	.word	0x40e5a540
 8002590:	42c80000 	.word	0x42c80000
 8002594:	3ff00000 	.word	0x3ff00000

08002598 <basePressure>:

    return 1;
}

void basePressure()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 100; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	e010      	b.n	80025c6 <basePressure+0x2e>
    {
        altitude.basePressure += altitude.pressure;
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <basePressure+0x50>)
 80025a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <basePressure+0x50>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <basePressure+0x50>)
 80025b6:	edc3 7a01 	vstr	s15, [r3, #4]
        HAL_Delay(2);
 80025ba:	2002      	movs	r0, #2
 80025bc:	f000 fd56 	bl	800306c <HAL_Delay>
    for (int i = 0; i < 100; i++)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3301      	adds	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b63      	cmp	r3, #99	; 0x63
 80025ca:	ddeb      	ble.n	80025a4 <basePressure+0xc>
    }

    altitude.basePressure /= 100;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <basePressure+0x50>)
 80025ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80025d2:	eddf 6a06 	vldr	s13, [pc, #24]	; 80025ec <basePressure+0x54>
 80025d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <basePressure+0x50>)
 80025dc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200008f0 	.word	0x200008f0
 80025ec:	42c80000 	.word	0x42c80000

080025f0 <readAltitude>:

    return 1;
}

int readAltitude()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
    // readBarometer();

    altitude.altitude =
        calculateAltitude(altitude.pressure, altitude.basePressure) + 274.279;
 80025f4:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <readAltitude+0x130>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	4b49      	ldr	r3, [pc, #292]	; (8002720 <readAltitude+0x130>)
 80025fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002600:	eef0 0a47 	vmov.f32	s1, s14
 8002604:	eeb0 0a67 	vmov.f32	s0, s15
 8002608:	f7ff ff6e 	bl	80024e8 <calculateAltitude>
 800260c:	ee10 3a10 	vmov	r3, s0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ffb9 	bl	8000588 <__aeabi_f2d>
 8002616:	a33e      	add	r3, pc, #248	; (adr r3, 8002710 <readAltitude+0x120>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f7fd fe56 	bl	80002cc <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fafe 	bl	8000c28 <__aeabi_d2f>
 800262c:	4603      	mov	r3, r0
    altitude.altitude =
 800262e:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <readAltitude+0x130>)
 8002630:	60d3      	str	r3, [r2, #12]

    altitude.altitude =
        yrt_simpleKalman_updateEstimate(&barometerKalman, altitude.altitude);
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <readAltitude+0x130>)
 8002634:	edd3 7a03 	vldr	s15, [r3, #12]
 8002638:	eeb0 0a67 	vmov.f32	s0, s15
 800263c:	4839      	ldr	r0, [pc, #228]	; (8002724 <readAltitude+0x134>)
 800263e:	f000 fc25 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 8002642:	eef0 7a40 	vmov.f32	s15, s0
    altitude.altitude =
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <readAltitude+0x130>)
 8002648:	edc3 7a03 	vstr	s15, [r3, #12]

    /* diif (-) ise cikiyorsun (+) ise iniyorsun  */
    altitude.diffToMax = altitude.maxAltitude - altitude.altitude;
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <readAltitude+0x130>)
 800264e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <readAltitude+0x130>)
 8002654:	edd3 7a03 	vldr	s15, [r3, #12]
 8002658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <readAltitude+0x130>)
 800265e:	edc3 7a07 	vstr	s15, [r3, #28]

    if (altitude.altitude > altitude.maxAltitude)
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <readAltitude+0x130>)
 8002664:	ed93 7a03 	vldr	s14, [r3, #12]
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <readAltitude+0x130>)
 800266a:	edd3 7a06 	vldr	s15, [r3, #24]
 800266e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	dd03      	ble.n	8002680 <readAltitude+0x90>
    {
        altitude.maxAltitude = altitude.altitude;
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <readAltitude+0x130>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a28      	ldr	r2, [pc, #160]	; (8002720 <readAltitude+0x130>)
 800267e:	6193      	str	r3, [r2, #24]
    }

    // calculate vertical velocity m/s
    velocity.timeDiffVertical =
        ((time.current) - velocity.prevTimeVertical) / 1000.0f;
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <readAltitude+0x138>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <readAltitude+0x13c>)
 8002688:	edd3 7a03 	vldr	s15, [r3, #12]
 800268c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002690:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002730 <readAltitude+0x140>
 8002694:	eec7 7a26 	vdiv.f32	s15, s14, s13
    velocity.timeDiffVertical =
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <readAltitude+0x13c>)
 800269a:	edc3 7a02 	vstr	s15, [r3, #8]

    // time diff must be greater than 0.3 sec
    if (velocity.timeDiffVertical > 0.3)
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <readAltitude+0x13c>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff70 	bl	8000588 <__aeabi_f2d>
 80026a8:	a31b      	add	r3, pc, #108	; (adr r3, 8002718 <readAltitude+0x128>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fe fa53 	bl	8000b58 <__aeabi_dcmpgt>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d017      	beq.n	80026e8 <readAltitude+0xf8>
    {
        velocity.verticalVelocity =
            (altitude.altitude - altitude.prevAltitude) /
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <readAltitude+0x130>)
 80026ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <readAltitude+0x130>)
 80026c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80026c4:	ee77 6a67 	vsub.f32	s13, s14, s15
            velocity.timeDiffVertical;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <readAltitude+0x13c>)
 80026ca:	ed93 7a02 	vldr	s14, [r3, #8]
            (altitude.altitude - altitude.prevAltitude) /
 80026ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
        velocity.verticalVelocity =
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <readAltitude+0x13c>)
 80026d4:	edc3 7a00 	vstr	s15, [r3]
        velocity.prevTimeVertical = time.current;
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <readAltitude+0x138>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a13      	ldr	r2, [pc, #76]	; (800272c <readAltitude+0x13c>)
 80026de:	60d3      	str	r3, [r2, #12]
        altitude.prevAltitude = altitude.altitude;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <readAltitude+0x130>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <readAltitude+0x130>)
 80026e6:	6113      	str	r3, [r2, #16]
    }

    if (velocity.verticalVelocity > velocity.maxVerticalVelocity)
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <readAltitude+0x13c>)
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <readAltitude+0x13c>)
 80026f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80026f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	dd03      	ble.n	8002706 <readAltitude+0x116>
    {
        velocity.maxVerticalVelocity = velocity.verticalVelocity;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <readAltitude+0x13c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <readAltitude+0x13c>)
 8002704:	6113      	str	r3, [r2, #16]
    }

    return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	f3af 8000 	nop.w
 8002710:	c8b43958 	.word	0xc8b43958
 8002714:	40712476 	.word	0x40712476
 8002718:	33333333 	.word	0x33333333
 800271c:	3fd33333 	.word	0x3fd33333
 8002720:	200008f0 	.word	0x200008f0
 8002724:	20000a24 	.word	0x20000a24
 8002728:	20000830 	.word	0x20000830
 800272c:	200008a8 	.word	0x200008a8
 8002730:	447a0000 	.word	0x447a0000
 8002734:	00000000 	.word	0x00000000

08002738 <readIMU>:

    return ret;
}

int readIMU()
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	af00      	add	r7, sp, #0

    // accel.x = (float)user_accel_bmi088.x / 1000;
    // accel.y = (float)user_accel_bmi088.y / 1000;
    // accel.z = (float)user_accel_bmi088.z / 1000;
    //
    gyro.x = (float)user_gyro_bmi088.x / 1000;
 800273c:	4ba0      	ldr	r3, [pc, #640]	; (80029c0 <readIMU+0x288>)
 800273e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274a:	eddf 6a9e 	vldr	s13, [pc, #632]	; 80029c4 <readIMU+0x28c>
 800274e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002752:	4b9d      	ldr	r3, [pc, #628]	; (80029c8 <readIMU+0x290>)
 8002754:	edc3 7a00 	vstr	s15, [r3]
    gyro.y = (float)user_gyro_bmi088.y / 1000;
 8002758:	4b99      	ldr	r3, [pc, #612]	; (80029c0 <readIMU+0x288>)
 800275a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002766:	eddf 6a97 	vldr	s13, [pc, #604]	; 80029c4 <readIMU+0x28c>
 800276a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <readIMU+0x290>)
 8002770:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro.z = (float)user_gyro_bmi088.z / 1000;
 8002774:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <readIMU+0x288>)
 8002776:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002782:	eddf 6a90 	vldr	s13, [pc, #576]	; 80029c4 <readIMU+0x28c>
 8002786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800278a:	4b8f      	ldr	r3, [pc, #572]	; (80029c8 <readIMU+0x290>)
 800278c:	edc3 7a02 	vstr	s15, [r3, #8]

    accel.x = yrt_simpleKalman_updateEstimate(&accelXKalman, accel.x);
 8002790:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <readIMU+0x294>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eeb0 0a67 	vmov.f32	s0, s15
 800279a:	488d      	ldr	r0, [pc, #564]	; (80029d0 <readIMU+0x298>)
 800279c:	f000 fb76 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 80027a0:	eef0 7a40 	vmov.f32	s15, s0
 80027a4:	4b89      	ldr	r3, [pc, #548]	; (80029cc <readIMU+0x294>)
 80027a6:	edc3 7a00 	vstr	s15, [r3]
    accel.y = yrt_simpleKalman_updateEstimate(&accelYKalman, accel.y);
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <readIMU+0x294>)
 80027ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b0:	eeb0 0a67 	vmov.f32	s0, s15
 80027b4:	4887      	ldr	r0, [pc, #540]	; (80029d4 <readIMU+0x29c>)
 80027b6:	f000 fb69 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 80027ba:	eef0 7a40 	vmov.f32	s15, s0
 80027be:	4b83      	ldr	r3, [pc, #524]	; (80029cc <readIMU+0x294>)
 80027c0:	edc3 7a01 	vstr	s15, [r3, #4]
    accel.z = yrt_simpleKalman_updateEstimate(&accelZKalman, accel.z);
 80027c4:	4b81      	ldr	r3, [pc, #516]	; (80029cc <readIMU+0x294>)
 80027c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ca:	eeb0 0a67 	vmov.f32	s0, s15
 80027ce:	4882      	ldr	r0, [pc, #520]	; (80029d8 <readIMU+0x2a0>)
 80027d0:	f000 fb5c 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 80027d4:	eef0 7a40 	vmov.f32	s15, s0
 80027d8:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <readIMU+0x294>)
 80027da:	edc3 7a02 	vstr	s15, [r3, #8]

    gyro.x = yrt_simpleKalman_updateEstimate(&gyroXKalman, gyro.x);
 80027de:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <readIMU+0x290>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	487c      	ldr	r0, [pc, #496]	; (80029dc <readIMU+0x2a4>)
 80027ea:	f000 fb4f 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 80027ee:	eef0 7a40 	vmov.f32	s15, s0
 80027f2:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <readIMU+0x290>)
 80027f4:	edc3 7a00 	vstr	s15, [r3]
    gyro.y = yrt_simpleKalman_updateEstimate(&gyroYKalman, gyro.y);
 80027f8:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <readIMU+0x290>)
 80027fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	4877      	ldr	r0, [pc, #476]	; (80029e0 <readIMU+0x2a8>)
 8002804:	f000 fb42 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	4b6e      	ldr	r3, [pc, #440]	; (80029c8 <readIMU+0x290>)
 800280e:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro.z = yrt_simpleKalman_updateEstimate(&gyroZKalman, gyro.z);
 8002812:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <readIMU+0x290>)
 8002814:	edd3 7a02 	vldr	s15, [r3, #8]
 8002818:	eeb0 0a67 	vmov.f32	s0, s15
 800281c:	4871      	ldr	r0, [pc, #452]	; (80029e4 <readIMU+0x2ac>)
 800281e:	f000 fb35 	bl	8002e8c <yrt_simpleKalman_updateEstimate>
 8002822:	eef0 7a40 	vmov.f32	s15, s0
 8002826:	4b68      	ldr	r3, [pc, #416]	; (80029c8 <readIMU+0x290>)
 8002828:	edc3 7a02 	vstr	s15, [r3, #8]

    accel.absG = sqrt(pow(accel.x, 2) + pow(accel.y, 2) + pow(accel.z, 2));
 800282c:	4b67      	ldr	r3, [pc, #412]	; (80029cc <readIMU+0x294>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fea9 	bl	8000588 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80029b8 <readIMU+0x280>
 800283e:	ec43 2b10 	vmov	d0, r2, r3
 8002842:	f010 fabf 	bl	8012dc4 <pow>
 8002846:	ec55 4b10 	vmov	r4, r5, d0
 800284a:	4b60      	ldr	r3, [pc, #384]	; (80029cc <readIMU+0x294>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe9a 	bl	8000588 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	ed9f 1b57 	vldr	d1, [pc, #348]	; 80029b8 <readIMU+0x280>
 800285c:	ec43 2b10 	vmov	d0, r2, r3
 8002860:	f010 fab0 	bl	8012dc4 <pow>
 8002864:	ec53 2b10 	vmov	r2, r3, d0
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fd2e 	bl	80002cc <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4614      	mov	r4, r2
 8002876:	461d      	mov	r5, r3
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <readIMU+0x294>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe83 	bl	8000588 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 80029b8 <readIMU+0x280>
 800288a:	ec43 2b10 	vmov	d0, r2, r3
 800288e:	f010 fa99 	bl	8012dc4 <pow>
 8002892:	ec53 2b10 	vmov	r2, r3, d0
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fd fd17 	bl	80002cc <__adddf3>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	ec43 2b17 	vmov	d7, r2, r3
 80028a6:	eeb0 0a47 	vmov.f32	s0, s14
 80028aa:	eef0 0a67 	vmov.f32	s1, s15
 80028ae:	f010 faf9 	bl	8012ea4 <sqrt>
 80028b2:	ec53 2b10 	vmov	r2, r3, d0
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f9b5 	bl	8000c28 <__aeabi_d2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	4a42      	ldr	r2, [pc, #264]	; (80029cc <readIMU+0x294>)
 80028c2:	6253      	str	r3, [r2, #36]	; 0x24
    if (accel.absG > accel.maxG)
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <readIMU+0x294>)
 80028c6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <readIMU+0x294>)
 80028cc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd03      	ble.n	80028e2 <readIMU+0x1aa>
    {
        accel.maxG = accel.absG;
 80028da:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <readIMU+0x294>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <readIMU+0x294>)
 80028e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    // calculate true velocity m/s from accelerometer
    velocity.timeDiffTrue = (time.current - velocity.prevTimeTrue) / 1000.0f;
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <readIMU+0x2b0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe4e 	bl	8000588 <__aeabi_f2d>
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <readIMU+0x2b4>)
 80028ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80028f2:	f7fd fce9 	bl	80002c8 <__aeabi_dsub>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <readIMU+0x2b8>)
 8002904:	f7fd ffc2 	bl	800088c <__aeabi_ddiv>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4937      	ldr	r1, [pc, #220]	; (80029ec <readIMU+0x2b4>)
 800290e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // time diff must be greater than 0.3 sec
    velocity.trueVelocity =
        (accel.absG - accel.prevAbsG) / velocity.timeDiffTrue;
 8002912:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <readIMU+0x294>)
 8002914:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <readIMU+0x294>)
 800291a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	ee17 0a90 	vmov	r0, s15
 8002926:	f7fd fe2f 	bl	8000588 <__aeabi_f2d>
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <readIMU+0x2b4>)
 800292c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002930:	f7fd ffac 	bl	800088c <__aeabi_ddiv>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f974 	bl	8000c28 <__aeabi_d2f>
 8002940:	4603      	mov	r3, r0
    velocity.trueVelocity =
 8002942:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <readIMU+0x2b4>)
 8002944:	6153      	str	r3, [r2, #20]
    velocity.prevTimeTrue = time.current;
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <readIMU+0x2b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fe1c 	bl	8000588 <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4925      	ldr	r1, [pc, #148]	; (80029ec <readIMU+0x2b4>)
 8002956:	e9c1 2308 	strd	r2, r3, [r1, #32]

    if (velocity.trueVelocity > velocity.maxTrueVelocity)
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <readIMU+0x2b4>)
 800295c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <readIMU+0x2b4>)
 8002962:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	dd03      	ble.n	8002978 <readIMU+0x240>
    {
        velocity.maxTrueVelocity = velocity.trueVelocity;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <readIMU+0x2b4>)
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <readIMU+0x2b4>)
 8002976:	6293      	str	r3, [r2, #40]	; 0x28
    }

    accel.prevAbsG = accel.absG;
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <readIMU+0x294>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <readIMU+0x294>)
 800297e:	6293      	str	r3, [r2, #40]	; 0x28

    accel.prev_x = accel.x;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <readIMU+0x294>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <readIMU+0x294>)
 8002986:	60d3      	str	r3, [r2, #12]
    accel.prev_y = accel.y;
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <readIMU+0x294>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <readIMU+0x294>)
 800298e:	6113      	str	r3, [r2, #16]
    accel.prev_z = accel.z;
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <readIMU+0x294>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <readIMU+0x294>)
 8002996:	6153      	str	r3, [r2, #20]

    gyro.prev_x = gyro.x;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <readIMU+0x290>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <readIMU+0x290>)
 800299e:	60d3      	str	r3, [r2, #12]
    gyro.prev_y = gyro.y;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <readIMU+0x290>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <readIMU+0x290>)
 80029a6:	6113      	str	r3, [r2, #16]
    gyro.prev_z = gyro.z;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <readIMU+0x290>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <readIMU+0x290>)
 80029ae:	6153      	str	r3, [r2, #20]

    return ret;
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <readIMU+0x2bc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}
 80029b8:	00000000 	.word	0x00000000
 80029bc:	40000000 	.word	0x40000000
 80029c0:	20000a3c 	.word	0x20000a3c
 80029c4:	447a0000 	.word	0x447a0000
 80029c8:	20000884 	.word	0x20000884
 80029cc:	20000854 	.word	0x20000854
 80029d0:	2000094c 	.word	0x2000094c
 80029d4:	20000964 	.word	0x20000964
 80029d8:	2000097c 	.word	0x2000097c
 80029dc:	20000994 	.word	0x20000994
 80029e0:	200009ac 	.word	0x200009ac
 80029e4:	200009c4 	.word	0x200009c4
 80029e8:	20000830 	.word	0x20000830
 80029ec:	200008a8 	.word	0x200008a8
 80029f0:	408f4000 	.word	0x408f4000
 80029f4:	20000a44 	.word	0x20000a44

080029f8 <parseTlcString>:
    res = f_close(&SDFile);
    return;
}

void parseTlcString(char *data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	6078      	str	r0, [r7, #4]
    // parse string with sscanf
    // time(float), tlcStatus, bpcStatus, latitude, longitude, gps.altitude
    sscanf(data, "%f,%d,%d,%f,%f,%f\n", &tlcTime, &tlcStatus, &bpcStatus,
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <parseTlcString+0x2c>)
 8002a02:	9303      	str	r3, [sp, #12]
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <parseTlcString+0x30>)
 8002a06:	9302      	str	r3, [sp, #8]
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <parseTlcString+0x34>)
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <parseTlcString+0x38>)
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <parseTlcString+0x3c>)
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <parseTlcString+0x40>)
 8002a14:	4909      	ldr	r1, [pc, #36]	; (8002a3c <parseTlcString+0x44>)
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f00c f990 	bl	800ed3c <siscanf>
           &gps.latitude, &gps.longtitude, &gps.altitude);
    return;
 8002a1c:	bf00      	nop
}
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200008e0 	.word	0x200008e0
 8002a28:	200008dc 	.word	0x200008dc
 8002a2c:	200008d8 	.word	0x200008d8
 8002a30:	20000949 	.word	0x20000949
 8002a34:	20000948 	.word	0x20000948
 8002a38:	20000914 	.word	0x20000914
 8002a3c:	08013ecc 	.word	0x08013ecc

08002a40 <initFilter>:
    sscanf(data, "%d,%f,%f", &pccTime, &pccTemp, &pccVoltage);
    return;
}

void initFilter()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
    yrt_simpleKalman_init(&accelXKalman, 1, 1, 0.25);
 8002a44:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002a48:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a50:	482a      	ldr	r0, [pc, #168]	; (8002afc <initFilter+0xbc>)
 8002a52:	f000 f9f6 	bl	8002e42 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&accelYKalman, 1, 1, 0.25);
 8002a56:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002a5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a62:	4827      	ldr	r0, [pc, #156]	; (8002b00 <initFilter+0xc0>)
 8002a64:	f000 f9ed 	bl	8002e42 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&accelZKalman, 1, 1, 0.25);
 8002a68:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002a6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a74:	4823      	ldr	r0, [pc, #140]	; (8002b04 <initFilter+0xc4>)
 8002a76:	f000 f9e4 	bl	8002e42 <yrt_simpleKalman_init>

    yrt_simpleKalman_init(&gyroXKalman, 1, 1, 0.25);
 8002a7a:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002a7e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a86:	4820      	ldr	r0, [pc, #128]	; (8002b08 <initFilter+0xc8>)
 8002a88:	f000 f9db 	bl	8002e42 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&gyroYKalman, 1, 1, 0.25);
 8002a8c:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002a90:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a98:	481c      	ldr	r0, [pc, #112]	; (8002b0c <initFilter+0xcc>)
 8002a9a:	f000 f9d2 	bl	8002e42 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&gyroZKalman, 1, 1, 0.25);
 8002a9e:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002aa2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002aa6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002aaa:	4819      	ldr	r0, [pc, #100]	; (8002b10 <initFilter+0xd0>)
 8002aac:	f000 f9c9 	bl	8002e42 <yrt_simpleKalman_init>

    yrt_simpleKalman_init(&magXKalman, 1, 1, 0.5);
 8002ab0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002ab4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ab8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002abc:	4815      	ldr	r0, [pc, #84]	; (8002b14 <initFilter+0xd4>)
 8002abe:	f000 f9c0 	bl	8002e42 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&magYKalman, 1, 1, 0.5);
 8002ac2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002ac6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002aca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ace:	4812      	ldr	r0, [pc, #72]	; (8002b18 <initFilter+0xd8>)
 8002ad0:	f000 f9b7 	bl	8002e42 <yrt_simpleKalman_init>
    yrt_simpleKalman_init(&magZKalman, 1, 1, 0.5);
 8002ad4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002ad8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002adc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ae0:	480e      	ldr	r0, [pc, #56]	; (8002b1c <initFilter+0xdc>)
 8002ae2:	f000 f9ae 	bl	8002e42 <yrt_simpleKalman_init>

    yrt_simpleKalman_init(&barometerKalman, 1, 1, 0.25);
 8002ae6:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002aea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002aee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002af2:	480b      	ldr	r0, [pc, #44]	; (8002b20 <initFilter+0xe0>)
 8002af4:	f000 f9a5 	bl	8002e42 <yrt_simpleKalman_init>
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2000094c 	.word	0x2000094c
 8002b00:	20000964 	.word	0x20000964
 8002b04:	2000097c 	.word	0x2000097c
 8002b08:	20000994 	.word	0x20000994
 8002b0c:	200009ac 	.word	0x200009ac
 8002b10:	200009c4 	.word	0x200009c4
 8002b14:	200009dc 	.word	0x200009dc
 8002b18:	200009f4 	.word	0x200009f4
 8002b1c:	20000a0c 	.word	0x20000a0c
 8002b20:	20000a24 	.word	0x20000a24

08002b24 <buzzer>:

void buzzer(uint8_t state)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
    if (state)
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <buzzer+0x1c>
    {
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2110      	movs	r1, #16
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <buzzer+0x30>)
 8002b3a:	f001 f965 	bl	8003e08 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
    }
}
 8002b3e:	e004      	b.n	8002b4a <buzzer+0x26>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2110      	movs	r1, #16
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <buzzer+0x30>)
 8002b46:	f001 f95f 	bl	8003e08 <HAL_GPIO_WritePin>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40020400 	.word	0x40020400

08002b58 <led>:

void led(uint8_t state)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
    if (state)
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <led+0x1c>
    {
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	4806      	ldr	r0, [pc, #24]	; (8002b88 <led+0x30>)
 8002b6e:	f001 f94b 	bl	8003e08 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_RESET);
    }
}
 8002b72:	e004      	b.n	8002b7e <led+0x26>
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_RESET);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2108      	movs	r1, #8
 8002b78:	4803      	ldr	r0, [pc, #12]	; (8002b88 <led+0x30>)
 8002b7a:	f001 f945 	bl	8003e08 <HAL_GPIO_WritePin>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40020400 	.word	0x40020400

08002b8c <dragSchute>:

void dragSchute(uint8_t state)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
    if (state == 1)
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <dragSchute+0x1c>
    {
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_SET);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4806      	ldr	r0, [pc, #24]	; (8002bbc <dragSchute+0x30>)
 8002ba2:	f001 f931 	bl	8003e08 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_RESET);
    }
}
 8002ba6:	e004      	b.n	8002bb2 <dragSchute+0x26>
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2102      	movs	r1, #2
 8002bac:	4803      	ldr	r0, [pc, #12]	; (8002bbc <dragSchute+0x30>)
 8002bae:	f001 f92b 	bl	8003e08 <HAL_GPIO_WritePin>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40020800 	.word	0x40020800

08002bc0 <mainSchute>:

void mainSchute(uint8_t state)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
    if (state == 1)
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <mainSchute+0x1c>
    {
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_SET);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <mainSchute+0x30>)
 8002bd6:	f001 f917 	bl	8003e08 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_RESET);
    }
}
 8002bda:	e004      	b.n	8002be6 <mainSchute+0x26>
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_RESET);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2101      	movs	r1, #1
 8002be0:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <mainSchute+0x30>)
 8002be2:	f001 f911 	bl	8003e08 <HAL_GPIO_WritePin>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020800 	.word	0x40020800

08002bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <SystemInit+0x20>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <SystemInit+0x20>)
 8002c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <MX_UART4_Init+0x50>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_UART4_Init+0x4c>)
 8002c50:	f006 f8ce 	bl	8008df0 <HAL_UART_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c5a:	f7ff f842 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000a48 	.word	0x20000a48
 8002c68:	40004c00 	.word	0x40004c00

08002c6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <MX_USART2_UART_Init+0x50>)
 8002c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c92:	220c      	movs	r2, #12
 8002c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ca2:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002ca4:	f006 f8a4 	bl	8008df0 <HAL_UART_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cae:	f7ff f818 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000a8c 	.word	0x20000a8c
 8002cbc:	40004400 	.word	0x40004400

08002cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	; 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <HAL_UART_MspInit+0x108>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d134      	bne.n	8002d4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	4619      	mov	r1, r3
 8002d34:	4826      	ldr	r0, [pc, #152]	; (8002dd0 <HAL_UART_MspInit+0x110>)
 8002d36:	f000 febb 	bl	8003ab0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	2034      	movs	r0, #52	; 0x34
 8002d40:	f000 fa70 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d44:	2034      	movs	r0, #52	; 0x34
 8002d46:	f000 fa89 	bl	800325c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d4a:	e038      	b.n	8002dbe <HAL_UART_MspInit+0xfe>
  else if(uartHandle->Instance==USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <HAL_UART_MspInit+0x114>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d133      	bne.n	8002dbe <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_UART_MspInit+0x10c>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d8e:	230c      	movs	r3, #12
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d9e:	2307      	movs	r3, #7
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	4619      	mov	r1, r3
 8002da8:	4809      	ldr	r0, [pc, #36]	; (8002dd0 <HAL_UART_MspInit+0x110>)
 8002daa:	f000 fe81 	bl	8003ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	2026      	movs	r0, #38	; 0x26
 8002db4:	f000 fa36 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002db8:	2026      	movs	r0, #38	; 0x26
 8002dba:	f000 fa4f 	bl	800325c <HAL_NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40004c00 	.word	0x40004c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40004400 	.word	0x40004400

08002dd8 <ms5611_i2c_read_byte>:
    } else {
        return 0;
    }
}

static uint8_t ms5611_i2c_read_byte(uint16_t reg, uint8_t *data){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af04      	add	r7, sp, #16
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Mem_Read(FRAM_I2C, FRAM_ADDRESS_READ, reg, I2C_MEMADD_SIZE_16BIT,
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	2364      	movs	r3, #100	; 0x64
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	2301      	movs	r3, #1
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2310      	movs	r3, #16
 8002df4:	21a1      	movs	r1, #161	; 0xa1
 8002df6:	4808      	ldr	r0, [pc, #32]	; (8002e18 <ms5611_i2c_read_byte+0x40>)
 8002df8:	f001 f988 	bl	800410c <HAL_I2C_Mem_Read>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
                     data, 1, 100);

    // return data if success
    if (res == HAL_OK) {
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <ms5611_i2c_read_byte+0x34>
        return *data;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	e000      	b.n	8002e0e <ms5611_i2c_read_byte+0x36>
    } else {
        return 0;
 8002e0c:	2300      	movs	r3, #0
    }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000020c 	.word	0x2000020c

08002e1c <fram_read8>:
    }
    return data;

}

uint8_t fram_read8(uint16_t framAddr){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
    uint8_t data = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
    ms5611_i2c_read_byte(framAddr, &data);
 8002e2a:	f107 020f 	add.w	r2, r7, #15
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffd0 	bl	8002dd8 <ms5611_i2c_read_byte>
    return data;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <yrt_simpleKalman_init>:
0.01. Should be tunned to your needs.
*/

void yrt_simpleKalman_init(yrt_simpleKalman_t *kalman, float mea_e, float est_e,
                           float q)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e4e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e52:	ed87 1a00 	vstr	s2, [r7]
    kalman->err_measure = mea_e;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	601a      	str	r2, [r3, #0]
    kalman->err_estimate = est_e;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]
    kalman->q = q;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	609a      	str	r2, [r3, #8]

    kalman->current_estimate = 0;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
    kalman->last_estimate = 0;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
    kalman->kalman_gain = 0;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <yrt_simpleKalman_updateEstimate>:
float yrt_simpleKalman_updateEstimate(yrt_simpleKalman_t *kalman, float mea)
{
 8002e8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	ed87 0a00 	vstr	s0, [r7]
    kalman->kalman_gain =
        kalman->err_estimate / (kalman->err_estimate + kalman->err_measure);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    kalman->kalman_gain =
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->current_estimate =
        kalman->last_estimate +
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	ed93 7a04 	vldr	s14, [r3, #16]
        kalman->kalman_gain * (mea - kalman->last_estimate);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ecc:	ed97 6a00 	vldr	s12, [r7]
 8002ed0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        kalman->last_estimate +
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
    kalman->current_estimate =
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->err_estimate =
        (1.0 - kalman->kalman_gain) * kalman->err_estimate +
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb4e 	bl	8000588 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	4926      	ldr	r1, [pc, #152]	; (8002f90 <yrt_simpleKalman_updateEstimate+0x104>)
 8002ef6:	f7fd f9e7 	bl	80002c8 <__aeabi_dsub>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4614      	mov	r4, r2
 8002f00:	461d      	mov	r5, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fb3e 	bl	8000588 <__aeabi_f2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd fb90 	bl	8000638 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4690      	mov	r8, r2
 8002f1e:	4699      	mov	r9, r3
        fabs(kalman->last_estimate - kalman->current_estimate) * kalman->q;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f30:	eef0 7ae7 	vabs.f32	s15, s15
 8002f34:	ee17 0a90 	vmov	r0, s15
 8002f38:	f7fd fb26 	bl	8000588 <__aeabi_f2d>
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	460d      	mov	r5, r1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fb1f 	bl	8000588 <__aeabi_f2d>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4620      	mov	r0, r4
 8002f50:	4629      	mov	r1, r5
 8002f52:	f7fd fb71 	bl	8000638 <__aeabi_dmul>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
        (1.0 - kalman->kalman_gain) * kalman->err_estimate +
 8002f5a:	4640      	mov	r0, r8
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	f7fd f9b5 	bl	80002cc <__adddf3>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fe5d 	bl	8000c28 <__aeabi_d2f>
 8002f6e:	4602      	mov	r2, r0
    kalman->err_estimate =
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]
    kalman->last_estimate = kalman->current_estimate;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]

    return kalman->current_estimate;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	ee07 3a90 	vmov	s15, r3
}
 8002f84:	eeb0 0a67 	vmov.f32	s0, s15
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f90:	3ff00000 	.word	0x3ff00000

08002f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fbe:	f7ff fe19 	bl	8002bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f00b ffeb 	bl	800ef9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc6:	f7fe fdc1 	bl	8001b4c <main>
  bx  lr    
 8002fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002fd8:	080144c8 	.word	0x080144c8
  ldr r2, =_sbss
 8002fdc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002fe0:	20007178 	.word	0x20007178

08002fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_Init+0x40>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_Init+0x40>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_Init+0x40>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
 8003012:	f000 f8fc 	bl	800320e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fe ffee 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301c:	f7fe ffb8 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00

0800302c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x20>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_IncTick+0x24>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	2000000c 	.word	0x2000000c
 8003050:	20000ad0 	.word	0x20000ad0

08003054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000ad0 	.word	0x20000ad0

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003092:	bf00      	nop
 8003094:	f7ff ffde 	bl	8003054 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__NVIC_GetPriorityGrouping+0x18>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0307 	and.w	r3, r3, #7
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0b      	blt.n	8003142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <__NVIC_EnableIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf28      	it	cs
 80031c6:	2304      	movcs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b03      	subs	r3, #3
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff4c 	bl	80030b4 <__NVIC_SetPriorityGrouping>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003236:	f7ff ff61 	bl	80030fc <__NVIC_GetPriorityGrouping>
 800323a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	6978      	ldr	r0, [r7, #20]
 8003242:	f7ff ffb1 	bl	80031a8 <NVIC_EncodePriority>
 8003246:	4602      	mov	r2, r0
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff80 	bl	8003154 <__NVIC_SetPriority>
}
 8003254:	bf00      	nop
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff54 	bl	8003118 <__NVIC_EnableIRQ>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff fee6 	bl	8003054 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e099      	b.n	80033c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	e00f      	b.n	80032d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b6:	f7ff fecd 	bl	8003054 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d908      	bls.n	80032d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e078      	b.n	80033c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e8      	bne.n	80032b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_DMA_Init+0x158>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	4313      	orrs	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b04      	cmp	r3, #4
 8003368:	d117      	bne.n	800339a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fb1b 	bl	80039b8 <DMA_CheckFifoParam>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2240      	movs	r2, #64	; 0x40
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003396:	2301      	movs	r3, #1
 8003398:	e016      	b.n	80033c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fad2 	bl	800394c <DMA_CalcBaseAndBitshift>
 80033a8:	4603      	mov	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	223f      	movs	r2, #63	; 0x3f
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	f010803f 	.word	0xf010803f

080033d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_Start_IT+0x26>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e040      	b.n	800347c <HAL_DMA_Start_IT+0xa8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d12f      	bne.n	800346e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2202      	movs	r2, #2
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa64 	bl	80038f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0216 	orr.w	r2, r2, #22
 8003442:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e005      	b.n	800347a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003476:	2302      	movs	r3, #2
 8003478:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800347a:	7dfb      	ldrb	r3, [r7, #23]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003492:	f7ff fddf 	bl	8003054 <HAL_GetTick>
 8003496:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d008      	beq.n	80034b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e052      	b.n	800355c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0216 	bic.w	r2, r2, #22
 80034c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_DMA_Abort+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003506:	e013      	b.n	8003530 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003508:	f7ff fda4 	bl	8003054 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d90c      	bls.n	8003530 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e015      	b.n	800355c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e4      	bne.n	8003508 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	223f      	movs	r2, #63	; 0x3f
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00c      	b.n	800359c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035b4:	4b8e      	ldr	r3, [pc, #568]	; (80037f0 <HAL_DMA_IRQHandler+0x248>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a8e      	ldr	r2, [pc, #568]	; (80037f4 <HAL_DMA_IRQHandler+0x24c>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2208      	movs	r2, #8
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01a      	beq.n	8003614 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0204 	bic.w	r2, r2, #4
 80035fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2208      	movs	r2, #8
 8003602:	409a      	lsls	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2201      	movs	r2, #1
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2204      	movs	r2, #4
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	2204      	movs	r2, #4
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2210      	movs	r2, #16
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d043      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03c      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2210      	movs	r2, #16
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d024      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
 80036d6:	e01f      	b.n	8003718 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
 80036e8:	e016      	b.n	8003718 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0208 	bic.w	r2, r2, #8
 8003706:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2220      	movs	r2, #32
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 808f 	beq.w	8003848 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8087 	beq.w	8003848 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	2220      	movs	r2, #32
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b05      	cmp	r3, #5
 8003750:	d136      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0216 	bic.w	r2, r2, #22
 8003760:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003770:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_DMA_IRQHandler+0x1da>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0208 	bic.w	r2, r2, #8
 8003790:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	223f      	movs	r2, #63	; 0x3f
 8003798:	409a      	lsls	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d07e      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
        }
        return;
 80037be:	e079      	b.n	80038b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d031      	beq.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	e02c      	b.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
 80037ee:	bf00      	nop
 80037f0:	20000004 	.word	0x20000004
 80037f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e01e      	b.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0210 	bic.w	r2, r2, #16
 8003826:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	2b00      	cmp	r3, #0
 800384e:	d032      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2205      	movs	r2, #5
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	429a      	cmp	r2, r3
 800387e:	d307      	bcc.n	8003890 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f2      	bne.n	8003874 <HAL_DMA_IRQHandler+0x2cc>
 800388e:	e000      	b.n	8003892 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003890:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
 80038b2:	e000      	b.n	80038b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038b4:	bf00      	nop
    }
  }
}
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ca:	b2db      	uxtb	r3, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800390c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d108      	bne.n	8003930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800392e:	e007      	b.n	8003940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b10      	subs	r3, #16
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <DMA_CalcBaseAndBitshift+0x64>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d909      	bls.n	800398e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
 800398c:	e007      	b.n	800399e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	08014024 	.word	0x08014024

080039b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11f      	bne.n	8003a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d856      	bhi.n	8003a86 <DMA_CheckFifoParam+0xce>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <DMA_CheckFifoParam+0x28>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a03 	.word	0x08003a03
 80039e8:	080039f1 	.word	0x080039f1
 80039ec:	08003a87 	.word	0x08003a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d046      	beq.n	8003a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e043      	b.n	8003a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0a:	d140      	bne.n	8003a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a10:	e03d      	b.n	8003a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1a:	d121      	bne.n	8003a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d837      	bhi.n	8003a92 <DMA_CheckFifoParam+0xda>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <DMA_CheckFifoParam+0x70>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a3f 	.word	0x08003a3f
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003a51 	.word	0x08003a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3c:	e030      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d025      	beq.n	8003a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e022      	b.n	8003a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a5e:	e01c      	b.n	8003a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d903      	bls.n	8003a6e <DMA_CheckFifoParam+0xb6>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a6c:	e018      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      break;
 8003a72:	e015      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e00b      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a86:	bf00      	nop
 8003a88:	e00a      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e008      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e006      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e165      	b.n	8003d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f040 8154 	bne.w	8003d92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d005      	beq.n	8003b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d130      	bne.n	8003b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 0201 	and.w	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d017      	beq.n	8003ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d123      	bne.n	8003bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80ae 	beq.w	8003d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	; (8003db0 <HAL_GPIO_Init+0x300>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	; (8003db0 <HAL_GPIO_Init+0x300>)
 8003c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <HAL_GPIO_Init+0x300>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c52:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_GPIO_Init+0x304>)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4f      	ldr	r2, [pc, #316]	; (8003db8 <HAL_GPIO_Init+0x308>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d025      	beq.n	8003cca <HAL_GPIO_Init+0x21a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4e      	ldr	r2, [pc, #312]	; (8003dbc <HAL_GPIO_Init+0x30c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <HAL_GPIO_Init+0x216>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4d      	ldr	r2, [pc, #308]	; (8003dc0 <HAL_GPIO_Init+0x310>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d019      	beq.n	8003cc2 <HAL_GPIO_Init+0x212>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4c      	ldr	r2, [pc, #304]	; (8003dc4 <HAL_GPIO_Init+0x314>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x20e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <HAL_GPIO_Init+0x318>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x20a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <HAL_GPIO_Init+0x31c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x206>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a49      	ldr	r2, [pc, #292]	; (8003dd0 <HAL_GPIO_Init+0x320>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x202>
 8003cae:	2306      	movs	r3, #6
 8003cb0:	e00c      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	e00a      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	e008      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e004      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f002 0203 	and.w	r2, r2, #3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cdc:	4935      	ldr	r1, [pc, #212]	; (8003db4 <HAL_GPIO_Init+0x304>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d0e:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f67f ae96 	bls.w	8003acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40021400 	.word	0x40021400
 8003dd0:	40021800 	.word	0x40021800
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e001      	b.n	8003dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e18:	787b      	ldrb	r3, [r7, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e24:	e003      	b.n	8003e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	041a      	lsls	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	619a      	str	r2, [r3, #24]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f806 	bl	8003e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40013c00 	.word	0x40013c00

08003e6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e12b      	b.n	80040ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fce8 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f002 fbee 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8003eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a81      	ldr	r2, [pc, #516]	; (80040f8 <HAL_I2C_Init+0x274>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d807      	bhi.n	8003f08 <HAL_I2C_Init+0x84>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_I2C_Init+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf94      	ite	ls
 8003f00:	2301      	movls	r3, #1
 8003f02:	2300      	movhi	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e006      	b.n	8003f16 <HAL_I2C_Init+0x92>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a7d      	ldr	r2, [pc, #500]	; (8004100 <HAL_I2C_Init+0x27c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bf94      	ite	ls
 8003f10:	2301      	movls	r3, #1
 8003f12:	2300      	movhi	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0e7      	b.n	80040ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a78      	ldr	r2, [pc, #480]	; (8004104 <HAL_I2C_Init+0x280>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0c9b      	lsrs	r3, r3, #18
 8003f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a6a      	ldr	r2, [pc, #424]	; (80040f8 <HAL_I2C_Init+0x274>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d802      	bhi.n	8003f58 <HAL_I2C_Init+0xd4>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3301      	adds	r3, #1
 8003f56:	e009      	b.n	8003f6c <HAL_I2C_Init+0xe8>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	4a69      	ldr	r2, [pc, #420]	; (8004108 <HAL_I2C_Init+0x284>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	099b      	lsrs	r3, r3, #6
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	495c      	ldr	r1, [pc, #368]	; (80040f8 <HAL_I2C_Init+0x274>)
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	d819      	bhi.n	8003fc0 <HAL_I2C_Init+0x13c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e59      	subs	r1, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9a:	1c59      	adds	r1, r3, #1
 8003f9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_I2C_Init+0x138>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1e59      	subs	r1, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fba:	e051      	b.n	8004060 <HAL_I2C_Init+0x1dc>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	e04f      	b.n	8004060 <HAL_I2C_Init+0x1dc>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d111      	bne.n	8003fec <HAL_I2C_Init+0x168>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e58      	subs	r0, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6859      	ldr	r1, [r3, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	440b      	add	r3, r1
 8003fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e012      	b.n	8004012 <HAL_I2C_Init+0x18e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e58      	subs	r0, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	0099      	lsls	r1, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004002:	3301      	adds	r3, #1
 8004004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Init+0x196>
 8004016:	2301      	movs	r3, #1
 8004018:	e022      	b.n	8004060 <HAL_I2C_Init+0x1dc>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10e      	bne.n	8004040 <HAL_I2C_Init+0x1bc>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1e58      	subs	r0, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	440b      	add	r3, r1
 8004030:	fbb0 f3f3 	udiv	r3, r0, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	e00f      	b.n	8004060 <HAL_I2C_Init+0x1dc>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	0099      	lsls	r1, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	6809      	ldr	r1, [r1, #0]
 8004064:	4313      	orrs	r3, r2
 8004066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800408e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6911      	ldr	r1, [r2, #16]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68d2      	ldr	r2, [r2, #12]
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	000186a0 	.word	0x000186a0
 80040fc:	001e847f 	.word	0x001e847f
 8004100:	003d08ff 	.word	0x003d08ff
 8004104:	431bde83 	.word	0x431bde83
 8004108:	10624dd3 	.word	0x10624dd3

0800410c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	460b      	mov	r3, r1
 8004120:	813b      	strh	r3, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004126:	f7fe ff95 	bl	8003054 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b20      	cmp	r3, #32
 8004136:	f040 8208 	bne.w	800454a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2319      	movs	r3, #25
 8004140:	2201      	movs	r2, #1
 8004142:	497b      	ldr	r1, [pc, #492]	; (8004330 <HAL_I2C_Mem_Read+0x224>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f001 ff79 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
 8004152:	e1fb      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_I2C_Mem_Read+0x56>
 800415e:	2302      	movs	r3, #2
 8004160:	e1f4      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d007      	beq.n	8004188 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2222      	movs	r2, #34	; 0x22
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2240      	movs	r2, #64	; 0x40
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a5b      	ldr	r2, [pc, #364]	; (8004334 <HAL_I2C_Mem_Read+0x228>)
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ca:	88f8      	ldrh	r0, [r7, #6]
 80041cc:	893a      	ldrh	r2, [r7, #8]
 80041ce:	8979      	ldrh	r1, [r7, #10]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4603      	mov	r3, r0
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f001 fd9e 	bl	8005d1c <I2C_RequestMemoryRead>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e1b0      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d113      	bne.n	800421a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	623b      	str	r3, [r7, #32]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e184      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	2b01      	cmp	r3, #1
 8004220:	d11b      	bne.n	800425a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e164      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	2b02      	cmp	r3, #2
 8004260:	d11b      	bne.n	800429a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	e144      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042b0:	e138      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	f200 80f1 	bhi.w	800449e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d123      	bne.n	800430c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f002 f801 	bl	80062d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e139      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800430a:	e10b      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b02      	cmp	r3, #2
 8004312:	d14e      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	2200      	movs	r2, #0
 800431c:	4906      	ldr	r1, [pc, #24]	; (8004338 <HAL_I2C_Mem_Read+0x22c>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 fe8c 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e10e      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
 800432e:	bf00      	nop
 8004330:	00100002 	.word	0x00100002
 8004334:	ffff0000 	.word	0xffff0000
 8004338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b0:	e0b8      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2200      	movs	r2, #0
 80043ba:	4966      	ldr	r1, [pc, #408]	; (8004554 <HAL_I2C_Mem_Read+0x448>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f001 fe3d 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0bf      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2200      	movs	r2, #0
 8004416:	494f      	ldr	r1, [pc, #316]	; (8004554 <HAL_I2C_Mem_Read+0x448>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f001 fe0f 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e091      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449c:	e042      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f001 ff14 	bl	80062d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e04c      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d118      	bne.n	8004524 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f aec2 	bne.w	80042b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	; 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	00010004 	.word	0x00010004

08004558 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	460b      	mov	r3, r1
 8004566:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7fe fd74 	bl	8003054 <HAL_GetTick>
 800456c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b20      	cmp	r3, #32
 800457c:	f040 8111 	bne.w	80047a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2319      	movs	r3, #25
 8004586:	2201      	movs	r2, #1
 8004588:	4988      	ldr	r1, [pc, #544]	; (80047ac <HAL_I2C_IsDeviceReady+0x254>)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f001 fd56 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
 8004598:	e104      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_I2C_IsDeviceReady+0x50>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e0fd      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d007      	beq.n	80045ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2224      	movs	r2, #36	; 0x24
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_I2C_IsDeviceReady+0x258>)
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004600:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2200      	movs	r2, #0
 800460a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f001 fd14 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004628:	d103      	bne.n	8004632 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b6      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004644:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004646:	f7fe fd05 	bl	8003054 <HAL_GetTick>
 800464a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800467a:	e025      	b.n	80046c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe fcea 	bl	8003054 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <HAL_I2C_IsDeviceReady+0x13a>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	22a0      	movs	r2, #160	; 0xa0
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2ba0      	cmp	r3, #160	; 0xa0
 80046d2:	d005      	beq.n	80046e0 <HAL_I2C_IsDeviceReady+0x188>
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_I2C_IsDeviceReady+0x188>
 80046da:	7dbb      	ldrb	r3, [r7, #22]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0cd      	beq.n	800467c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d129      	bne.n	800474a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004704:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2319      	movs	r3, #25
 8004722:	2201      	movs	r2, #1
 8004724:	4921      	ldr	r1, [pc, #132]	; (80047ac <HAL_I2C_IsDeviceReady+0x254>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f001 fc88 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e036      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e02c      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004758:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004762:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2319      	movs	r3, #25
 800476a:	2201      	movs	r2, #1
 800476c:	490f      	ldr	r1, [pc, #60]	; (80047ac <HAL_I2C_IsDeviceReady+0x254>)
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 fc64 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e012      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3301      	adds	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	f4ff af32 	bcc.w	80045f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	00100002 	.word	0x00100002
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d003      	beq.n	80047ec <HAL_I2C_EV_IRQHandler+0x38>
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	f040 80b1 	bne.w	800494e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_I2C_EV_IRQHandler+0x6e>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800480c:	d003      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0x62>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004814:	d101      	bne.n	800481a <HAL_I2C_EV_IRQHandler+0x66>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x68>
 800481a:	2300      	movs	r3, #0
 800481c:	2b01      	cmp	r3, #1
 800481e:	f000 8114 	beq.w	8004a4a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x90>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f001 fdcf 	bl	80063da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fcc3 	bl	80051c8 <I2C_Master_SB>
 8004842:	e083      	b.n	800494c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_I2C_EV_IRQHandler+0xac>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fd3b 	bl	80052d4 <I2C_Master_ADD10>
 800485e:	e075      	b.n	800494c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_I2C_EV_IRQHandler+0xc8>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fd57 	bl	8005328 <I2C_Master_ADDR>
 800487a:	e067      	b.n	800494c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d036      	beq.n	80048f4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004894:	f000 80db 	beq.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x10a>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x10a>
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f93b 	bl	8004b32 <I2C_MasterTransmit_TXE>
 80048bc:	e046      	b.n	800494c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80c2 	beq.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80bc 	beq.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	2b21      	cmp	r3, #33	; 0x21
 80048da:	d103      	bne.n	80048e4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9c4 	bl	8004c6a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e2:	e0b4      	b.n	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	f040 80b1 	bne.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fa32 	bl	8004d56 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f2:	e0ac      	b.n	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004902:	f000 80a4 	beq.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x178>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x178>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 faaa 	bl	8004e7e <I2C_MasterReceive_RXNE>
 800492a:	e00f      	b.n	800494c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 808b 	beq.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8085 	beq.w	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb55 	bl	8004ff4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494a:	e080      	b.n	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
 800494c:	e07f      	b.n	8004a4e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e007      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d011      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x1ea>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 ff15 	bl	80057c6 <I2C_Slave_ADDR>
 800499c:	e05a      	b.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_I2C_EV_IRQHandler+0x206>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 ff50 	bl	8005858 <I2C_Slave_STOPF>
 80049b8:	e04c      	b.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	2b21      	cmp	r3, #33	; 0x21
 80049be:	d002      	beq.n	80049c6 <HAL_I2C_EV_IRQHandler+0x212>
 80049c0:	7bbb      	ldrb	r3, [r7, #14]
 80049c2:	2b29      	cmp	r3, #41	; 0x29
 80049c4:	d120      	bne.n	8004a08 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x238>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x238>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fe30 	bl	800564a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ea:	e032      	b.n	8004a52 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02d      	beq.n	8004a52 <HAL_I2C_EV_IRQHandler+0x29e>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d028      	beq.n	8004a52 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fe5f 	bl	80056c4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a06:	e024      	b.n	8004a52 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_I2C_EV_IRQHandler+0x27a>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_I2C_EV_IRQHandler+0x27a>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fe6d 	bl	8005706 <I2C_SlaveReceive_RXNE>
 8004a2c:	e012      	b.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00d      	beq.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fe9d 	bl	8005782 <I2C_SlaveReceive_BTF>
 8004a48:	e004      	b.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70fb      	strb	r3, [r7, #3]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b48:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d150      	bne.n	8004bfa <I2C_MasterTransmit_TXE+0xc8>
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b21      	cmp	r3, #33	; 0x21
 8004b5c:	d14d      	bne.n	8004bfa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d01d      	beq.n	8004ba0 <I2C_MasterTransmit_TXE+0x6e>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d01a      	beq.n	8004ba0 <I2C_MasterTransmit_TXE+0x6e>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b70:	d016      	beq.n	8004ba0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b80:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2211      	movs	r2, #17
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff5e 	bl	8004a5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b9e:	e060      	b.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d107      	bne.n	8004bea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ff79 	bl	8004ada <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004be8:	e03b      	b.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ff31 	bl	8004a5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bf8:	e033      	b.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b21      	cmp	r3, #33	; 0x21
 8004bfe:	d005      	beq.n	8004c0c <I2C_MasterTransmit_TXE+0xda>
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d12d      	bne.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b22      	cmp	r3, #34	; 0x22
 8004c0a:	d12a      	bne.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c26:	e01c      	b.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d103      	bne.n	8004c3c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f88e 	bl	8004d56 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c3a:	e012      	b.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c60:	e7ff      	b.n	8004c62 <I2C_MasterTransmit_TXE+0x130>
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b21      	cmp	r3, #33	; 0x21
 8004c82:	d164      	bne.n	8004d4e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d012      	beq.n	8004cb4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004cb2:	e04c      	b.n	8004d4e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d01d      	beq.n	8004cf6 <I2C_MasterTransmit_BTF+0x8c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d01a      	beq.n	8004cf6 <I2C_MasterTransmit_BTF+0x8c>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cc6:	d016      	beq.n	8004cf6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cd6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2211      	movs	r2, #17
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff feb3 	bl	8004a5a <HAL_I2C_MasterTxCpltCallback>
}
 8004cf4:	e02b      	b.n	8004d4e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d04:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d14:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d107      	bne.n	8004d40 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fece 	bl	8004ada <HAL_I2C_MemTxCpltCallback>
}
 8004d3e:	e006      	b.n	8004d4e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fe86 	bl	8004a5a <HAL_I2C_MasterTxCpltCallback>
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d11d      	bne.n	8004daa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d10b      	bne.n	8004d8e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d86:	1c9a      	adds	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d8c:	e073      	b.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	121b      	asrs	r3, r3, #8
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004da8:	e065      	b.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d10b      	bne.n	8004dca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dc8:	e055      	b.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d151      	bne.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b22      	cmp	r3, #34	; 0x22
 8004dd6:	d10d      	bne.n	8004df4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004df2:	e040      	b.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d015      	beq.n	8004e2a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b21      	cmp	r3, #33	; 0x21
 8004e02:	d112      	bne.n	8004e2a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e28:	e025      	b.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d120      	bne.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b21      	cmp	r3, #33	; 0x21
 8004e38:	d11d      	bne.n	8004e76 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e48:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fe32 	bl	8004ada <HAL_I2C_MemTxCpltCallback>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b22      	cmp	r3, #34	; 0x22
 8004e90:	f040 80ac 	bne.w	8004fec <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d921      	bls.n	8004ee6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	f040 808c 	bne.w	8004fec <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ee4:	e082      	b.n	8004fec <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d075      	beq.n	8004fda <I2C_MasterReceive_RXNE+0x15c>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d002      	beq.n	8004efa <I2C_MasterReceive_RXNE+0x7c>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d16f      	bne.n	8004fda <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 f9b6 	bl	800626c <I2C_WaitOnSTOPRequestThroughIT>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d142      	bne.n	8004f8c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d10a      	bne.n	8004f76 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fd36 	bl	80019e0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f74:	e03a      	b.n	8004fec <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2212      	movs	r2, #18
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fd72 	bl	8004a6e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f8a:	e02f      	b.n	8004fec <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fd8b 	bl	8004aee <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fd8:	e008      	b.n	8004fec <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	605a      	str	r2, [r3, #4]
}
 8004fea:	e7ff      	b.n	8004fec <I2C_MasterReceive_RXNE+0x16e>
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b04      	cmp	r3, #4
 800500a:	d11b      	bne.n	8005044 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005042:	e0bd      	b.n	80051c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d129      	bne.n	80050a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d00a      	beq.n	800507a <I2C_MasterReceive_BTF+0x86>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d007      	beq.n	800507a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050a0:	e08e      	b.n	80051c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d176      	bne.n	800519a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d002      	beq.n	80050b8 <I2C_MasterReceive_BTF+0xc4>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d108      	bne.n	80050ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e019      	b.n	80050fe <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d002      	beq.n	80050d6 <I2C_MasterReceive_BTF+0xe2>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d108      	bne.n	80050e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e00a      	b.n	80050fe <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d007      	beq.n	80050fe <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005158:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d10a      	bne.n	8005184 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fc fc2f 	bl	80019e0 <HAL_I2C_MemRxCpltCallback>
}
 8005182:	e01d      	b.n	80051c0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2212      	movs	r2, #18
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fc6b 	bl	8004a6e <HAL_I2C_MasterRxCpltCallback>
}
 8005198:	e012      	b.n	80051c0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d117      	bne.n	800520c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051f4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051f6:	e067      	b.n	80052c8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]
}
 800520a:	e05d      	b.n	80052c8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005214:	d133      	bne.n	800527e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b21      	cmp	r3, #33	; 0x21
 8005220:	d109      	bne.n	8005236 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005232:	611a      	str	r2, [r3, #16]
 8005234:	e008      	b.n	8005248 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	b2da      	uxtb	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <I2C_Master_SB+0x92>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d032      	beq.n	80052c8 <I2C_Master_SB+0x100>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02d      	beq.n	80052c8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527a:	605a      	str	r2, [r3, #4]
}
 800527c:	e024      	b.n	80052c8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10e      	bne.n	80052a4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	b29b      	uxth	r3, r3
 800528c:	11db      	asrs	r3, r3, #7
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0306 	and.w	r3, r3, #6
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f063 030f 	orn	r3, r3, #15
 800529a:	b2da      	uxtb	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]
}
 80052a2:	e011      	b.n	80052c8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10d      	bne.n	80052c8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	11db      	asrs	r3, r3, #7
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f063 030e 	orn	r3, r3, #14
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	611a      	str	r2, [r3, #16]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <I2C_Master_ADD10+0x26>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <I2C_Master_ADD10+0x48>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800531a:	605a      	str	r2, [r3, #4]
  }
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b091      	sub	sp, #68	; 0x44
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005336:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b22      	cmp	r3, #34	; 0x22
 8005350:	f040 8169 	bne.w	8005626 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <I2C_Master_ADDR+0x54>
 800535c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d10b      	bne.n	800537c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005364:	2300      	movs	r3, #0
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	633b      	str	r3, [r7, #48]	; 0x30
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	e160      	b.n	800563e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <I2C_Master_ADDR+0x98>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800538c:	d118      	bne.n	80053c0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
 80053be:	e13e      	b.n	800563e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d113      	bne.n	80053f2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	2300      	movs	r3, #0
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e115      	b.n	800561e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 808a 	bne.w	8005512 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005404:	d137      	bne.n	8005476 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005414:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005424:	d113      	bne.n	800544e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005434:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	e0e7      	b.n	800561e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e0d3      	b.n	800561e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	2b08      	cmp	r3, #8
 800547a:	d02e      	beq.n	80054da <I2C_Master_ADDR+0x1b2>
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	2b20      	cmp	r3, #32
 8005480:	d02b      	beq.n	80054da <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005484:	2b12      	cmp	r3, #18
 8005486:	d102      	bne.n	800548e <I2C_Master_ADDR+0x166>
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	2b01      	cmp	r3, #1
 800548c:	d125      	bne.n	80054da <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b04      	cmp	r3, #4
 8005492:	d00e      	beq.n	80054b2 <I2C_Master_ADDR+0x18a>
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b02      	cmp	r3, #2
 8005498:	d00b      	beq.n	80054b2 <I2C_Master_ADDR+0x18a>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b10      	cmp	r3, #16
 800549e:	d008      	beq.n	80054b2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e007      	b.n	80054c2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	e0a1      	b.n	800561e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e085      	b.n	800561e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d14d      	bne.n	80055b8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	2b04      	cmp	r3, #4
 8005520:	d016      	beq.n	8005550 <I2C_Master_ADDR+0x228>
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b02      	cmp	r3, #2
 8005526:	d013      	beq.n	8005550 <I2C_Master_ADDR+0x228>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b10      	cmp	r3, #16
 800552c:	d010      	beq.n	8005550 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e007      	b.n	8005560 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800555e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d117      	bne.n	80055a0 <I2C_Master_ADDR+0x278>
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005576:	d00b      	beq.n	8005590 <I2C_Master_ADDR+0x268>
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b01      	cmp	r3, #1
 800557c:	d008      	beq.n	8005590 <I2C_Master_ADDR+0x268>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b08      	cmp	r3, #8
 8005582:	d005      	beq.n	8005590 <I2C_Master_ADDR+0x268>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b10      	cmp	r3, #16
 8005588:	d002      	beq.n	8005590 <I2C_Master_ADDR+0x268>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b20      	cmp	r3, #32
 800558e:	d107      	bne.n	80055a0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800559e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	e032      	b.n	800561e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d117      	bne.n	8005608 <I2C_Master_ADDR+0x2e0>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055de:	d00b      	beq.n	80055f8 <I2C_Master_ADDR+0x2d0>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d008      	beq.n	80055f8 <I2C_Master_ADDR+0x2d0>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d005      	beq.n	80055f8 <I2C_Master_ADDR+0x2d0>
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d002      	beq.n	80055f8 <I2C_Master_ADDR+0x2d0>
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d107      	bne.n	8005608 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005606:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005624:	e00b      	b.n	800563e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
}
 800563c:	e7ff      	b.n	800563e <I2C_Master_ADDR+0x316>
 800563e:	bf00      	nop
 8005640:	3744      	adds	r7, #68	; 0x44
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02b      	beq.n	80056bc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d114      	bne.n	80056bc <I2C_SlaveTransmit_TXE+0x72>
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b29      	cmp	r3, #41	; 0x29
 8005696:	d111      	bne.n	80056bc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2221      	movs	r2, #33	; 0x21
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2228      	movs	r2, #40	; 0x28
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff f9e3 	bl	8004a82 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d02c      	beq.n	800577a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d114      	bne.n	800577a <I2C_SlaveReceive_RXNE+0x74>
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b2a      	cmp	r3, #42	; 0x2a
 8005754:	d111      	bne.n	800577a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2222      	movs	r2, #34	; 0x22
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2228      	movs	r2, #40	; 0x28
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff f98e 	bl	8004a96 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d012      	beq.n	80057ba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057e0:	2b28      	cmp	r3, #40	; 0x28
 80057e2:	d125      	bne.n	8005830 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	81bb      	strh	r3, [r7, #12]
 8005812:	e002      	b.n	800581a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005822:	89ba      	ldrh	r2, [r7, #12]
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff f93e 	bl	8004aaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800582e:	e00e      	b.n	800584e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005830:	2300      	movs	r3, #0
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005866:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005876:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005878:	2300      	movs	r3, #0
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b4:	d172      	bne.n	800599c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b22      	cmp	r3, #34	; 0x22
 80058ba:	d002      	beq.n	80058c2 <I2C_Slave_STOPF+0x6a>
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b2a      	cmp	r3, #42	; 0x2a
 80058c0:	d135      	bne.n	800592e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0204 	orr.w	r2, r3, #4
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd ffde 	bl	80038bc <HAL_DMA_GetState>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d049      	beq.n	800599a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4a69      	ldr	r2, [pc, #420]	; (8005ab0 <I2C_Slave_STOPF+0x258>)
 800590c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	4618      	mov	r0, r3
 8005914:	f7fd fe26 	bl	8003564 <HAL_DMA_Abort_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03d      	beq.n	800599a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800592c:	e035      	b.n	800599a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f043 0204 	orr.w	r2, r3, #4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005960:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	4618      	mov	r0, r3
 8005968:	f7fd ffa8 	bl	80038bc <HAL_DMA_GetState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d014      	beq.n	800599c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	4a4e      	ldr	r2, [pc, #312]	; (8005ab0 <I2C_Slave_STOPF+0x258>)
 8005978:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd fdf0 	bl	8003564 <HAL_DMA_Abort_IT>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
 8005998:	e000      	b.n	800599c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800599a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d03e      	beq.n	8005a24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d112      	bne.n	80059da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d112      	bne.n	8005a0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f043 0204 	orr.w	r2, r3, #4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f843 	bl	8005ab8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a32:	e039      	b.n	8005aa8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b2a      	cmp	r3, #42	; 0x2a
 8005a38:	d109      	bne.n	8005a4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2228      	movs	r2, #40	; 0x28
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff f824 	bl	8004a96 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b28      	cmp	r3, #40	; 0x28
 8005a58:	d111      	bne.n	8005a7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <I2C_Slave_STOPF+0x25c>)
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff f825 	bl	8004ac6 <HAL_I2C_ListenCpltCallback>
}
 8005a7c:	e014      	b.n	8005aa8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	2b22      	cmp	r3, #34	; 0x22
 8005a84:	d002      	beq.n	8005a8c <I2C_Slave_STOPF+0x234>
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b22      	cmp	r3, #34	; 0x22
 8005a8a:	d10d      	bne.n	8005aa8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fe fff7 	bl	8004a96 <HAL_I2C_SlaveRxCpltCallback>
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08005eed 	.word	0x08005eed
 8005ab4:	ffff0000 	.word	0xffff0000

08005ab8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ace:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d002      	beq.n	8005adc <I2C_ITError+0x24>
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d10a      	bne.n	8005af2 <I2C_ITError+0x3a>
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b22      	cmp	r3, #34	; 0x22
 8005ae0:	d107      	bne.n	8005af2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005af8:	2b28      	cmp	r3, #40	; 0x28
 8005afa:	d107      	bne.n	8005b0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2228      	movs	r2, #40	; 0x28
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b0a:	e015      	b.n	8005b38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1a:	d00a      	beq.n	8005b32 <I2C_ITError+0x7a>
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b60      	cmp	r3, #96	; 0x60
 8005b20:	d007      	beq.n	8005b32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b46:	d162      	bne.n	8005c0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d020      	beq.n	8005ba8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	4a6a      	ldr	r2, [pc, #424]	; (8005d14 <I2C_ITError+0x25c>)
 8005b6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd fcf6 	bl	8003564 <HAL_DMA_Abort_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8089 	beq.w	8005c92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
 8005ba6:	e074      	b.n	8005c92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	4a59      	ldr	r2, [pc, #356]	; (8005d14 <I2C_ITError+0x25c>)
 8005bae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fd fcd5 	bl	8003564 <HAL_DMA_Abort_IT>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d068      	beq.n	8005c92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d10b      	bne.n	8005be6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	e041      	b.n	8005c92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b60      	cmp	r3, #96	; 0x60
 8005c18:	d125      	bne.n	8005c66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d10b      	bne.n	8005c4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fe ff4f 	bl	8004b02 <HAL_I2C_AbortCpltCallback>
 8005c64:	e015      	b.n	8005c92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d10b      	bne.n	8005c8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fe ff2e 	bl	8004aee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10e      	bne.n	8005cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d113      	bne.n	8005d0c <I2C_ITError+0x254>
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b28      	cmp	r3, #40	; 0x28
 8005ce8:	d110      	bne.n	8005d0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <I2C_ITError+0x260>)
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fe fedd 	bl	8004ac6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	08005eed 	.word	0x08005eed
 8005d18:	ffff0000 	.word	0xffff0000

08005d1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	817b      	strh	r3, [r7, #10]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	813b      	strh	r3, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f96a 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7c:	d103      	bne.n	8005d86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e0aa      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	4952      	ldr	r1, [pc, #328]	; (8005ee8 <I2C_RequestMemoryRead+0x1cc>)
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f9a2 	bl	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e097      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc8:	6a39      	ldr	r1, [r7, #32]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fa0c 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d107      	bne.n	8005dee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e076      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d105      	bne.n	8005e04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005df8:	893b      	ldrh	r3, [r7, #8]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	611a      	str	r2, [r3, #16]
 8005e02:	e021      	b.n	8005e48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e04:	893b      	ldrh	r3, [r7, #8]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e14:	6a39      	ldr	r1, [r7, #32]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f9e6 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d107      	bne.n	8005e3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e050      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e3e:	893b      	ldrh	r3, [r7, #8]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	6a39      	ldr	r1, [r7, #32]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f9cb 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d107      	bne.n	8005e70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e035      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f8d3 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00d      	beq.n	8005eb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eaa:	d103      	bne.n	8005eb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e013      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005eb8:	897b      	ldrh	r3, [r7, #10]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	4906      	ldr	r1, [pc, #24]	; (8005ee8 <I2C_RequestMemoryRead+0x1cc>)
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f90b 	bl	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	00010002 	.word	0x00010002

08005eec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f06:	4b4b      	ldr	r3, [pc, #300]	; (8006034 <I2C_DMAAbort+0x148>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	4a4a      	ldr	r2, [pc, #296]	; (8006038 <I2C_DMAAbort+0x14c>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	0a1a      	lsrs	r2, r3, #8
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	00da      	lsls	r2, r3, #3
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f32:	e00a      	b.n	8005f4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f48:	d0ea      	beq.n	8005f20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f56:	2200      	movs	r2, #0
 8005f58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	2200      	movs	r2, #0
 8005f68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b60      	cmp	r3, #96	; 0x60
 8005fba:	d10e      	bne.n	8005fda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fd2:	6978      	ldr	r0, [r7, #20]
 8005fd4:	f7fe fd95 	bl	8004b02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fd8:	e027      	b.n	800602a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fda:	7cfb      	ldrb	r3, [r7, #19]
 8005fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fe0:	2b28      	cmp	r3, #40	; 0x28
 8005fe2:	d117      	bne.n	8006014 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006002:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2228      	movs	r2, #40	; 0x28
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006012:	e007      	b.n	8006024 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006024:	6978      	ldr	r0, [r7, #20]
 8006026:	f7fe fd62 	bl	8004aee <HAL_I2C_ErrorCallback>
}
 800602a:	bf00      	nop
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000004 	.word	0x20000004
 8006038:	14f8b589 	.word	0x14f8b589

0800603c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800604c:	e025      	b.n	800609a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d021      	beq.n	800609a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fc fffd 	bl	8003054 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d116      	bne.n	800609a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0220 	orr.w	r2, r3, #32
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e023      	b.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d10d      	bne.n	80060c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	43da      	mvns	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4013      	ands	r3, r2
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bf0c      	ite	eq
 80060b6:	2301      	moveq	r3, #1
 80060b8:	2300      	movne	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	e00c      	b.n	80060da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	43da      	mvns	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d0b6      	beq.n	800604e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060f8:	e051      	b.n	800619e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006108:	d123      	bne.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006118:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006122:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0204 	orr.w	r2, r3, #4
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e046      	b.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d021      	beq.n	800619e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615a:	f7fc ff7b 	bl	8003054 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d302      	bcc.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d116      	bne.n	800619e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f043 0220 	orr.w	r2, r3, #32
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e020      	b.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	0c1b      	lsrs	r3, r3, #16
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d10c      	bne.n	80061c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	43da      	mvns	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4013      	ands	r3, r2
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bf14      	ite	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	2300      	moveq	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e00b      	b.n	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	43da      	mvns	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	4013      	ands	r3, r2
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d18d      	bne.n	80060fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f4:	e02d      	b.n	8006252 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f8c0 	bl	800637c <I2C_IsAcknowledgeFailed>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e02d      	b.n	8006262 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620c:	d021      	beq.n	8006252 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620e:	f7fc ff21 	bl	8003054 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d116      	bne.n	8006252 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e007      	b.n	8006262 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625c:	2b80      	cmp	r3, #128	; 0x80
 800625e:	d1ca      	bne.n	80061f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	4a13      	ldr	r2, [pc, #76]	; (80062cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	0a1a      	lsrs	r2, r3, #8
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3b01      	subs	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f043 0220 	orr.w	r2, r3, #32
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e008      	b.n	80062bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	d0e9      	beq.n	800628e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000004 	.word	0x20000004
 80062cc:	14f8b589 	.word	0x14f8b589

080062d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062dc:	e042      	b.n	8006364 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b10      	cmp	r3, #16
 80062ea:	d119      	bne.n	8006320 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0210 	mvn.w	r2, #16
 80062f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e029      	b.n	8006374 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006320:	f7fc fe98 	bl	8003054 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	429a      	cmp	r2, r3
 800632e:	d302      	bcc.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d116      	bne.n	8006364 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e007      	b.n	8006374 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d1b5      	bne.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800638e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006392:	d11b      	bne.n	80063cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800639c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	f043 0204 	orr.w	r2, r3, #4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063ea:	d103      	bne.n	80063f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063f2:	e007      	b.n	8006404 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063fc:	d102      	bne.n	8006404 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2208      	movs	r2, #8
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006414:	4b06      	ldr	r3, [pc, #24]	; (8006430 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006420:	f000 f808 	bl	8006434 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800642a:	615a      	str	r2, [r3, #20]
  }
}
 800642c:	bf00      	nop
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40013c00 	.word	0x40013c00

08006434 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006438:	bf00      	nop
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645c:	6413      	str	r3, [r2, #64]	; 0x40
 800645e:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006470:	f7fc fdf0 	bl	8003054 <HAL_GetTick>
 8006474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006476:	e009      	b.n	800648c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006478:	f7fc fdec 	bl	8003054 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006486:	d901      	bls.n	800648c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e01f      	b.n	80064cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800648c:	4b13      	ldr	r3, [pc, #76]	; (80064dc <HAL_PWREx_EnableOverDrive+0x98>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d1ee      	bne.n	8006478 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800649a:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064a0:	f7fc fdd8 	bl	8003054 <HAL_GetTick>
 80064a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064a6:	e009      	b.n	80064bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064a8:	f7fc fdd4 	bl	8003054 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b6:	d901      	bls.n	80064bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e007      	b.n	80064cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <HAL_PWREx_EnableOverDrive+0x98>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c8:	d1ee      	bne.n	80064a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40023800 	.word	0x40023800
 80064d8:	420e0040 	.word	0x420e0040
 80064dc:	40007000 	.word	0x40007000
 80064e0:	420e0044 	.word	0x420e0044

080064e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0cc      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f8:	4b68      	ldr	r3, [pc, #416]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d90c      	bls.n	8006520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006506:	4b65      	ldr	r3, [pc, #404]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650e:	4b63      	ldr	r3, [pc, #396]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0b8      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d020      	beq.n	800656e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006538:	4b59      	ldr	r3, [pc, #356]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4a58      	ldr	r2, [pc, #352]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006550:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	4a52      	ldr	r2, [pc, #328]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800655a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655c:	4b50      	ldr	r3, [pc, #320]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	494d      	ldr	r1, [pc, #308]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d044      	beq.n	8006604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d107      	bne.n	8006592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d119      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d003      	beq.n	80065a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d107      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a2:	4b3f      	ldr	r3, [pc, #252]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e06f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e067      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f023 0203 	bic.w	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4934      	ldr	r1, [pc, #208]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d4:	f7fc fd3e 	bl	8003054 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065dc:	f7fc fd3a 	bl	8003054 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e04f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 020c 	and.w	r2, r3, #12
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	429a      	cmp	r2, r3
 8006602:	d1eb      	bne.n	80065dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d20c      	bcs.n	800662c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e032      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006638:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4916      	ldr	r1, [pc, #88]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	4313      	orrs	r3, r2
 8006648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	490e      	ldr	r1, [pc, #56]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800666a:	f000 fbb1 	bl	8006dd0 <HAL_RCC_GetSysClockFreq>
 800666e:	4602      	mov	r2, r0
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	490a      	ldr	r1, [pc, #40]	; (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 800667c:	5ccb      	ldrb	r3, [r1, r3]
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <HAL_RCC_ClockConfig+0x1c8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7fb fcb4 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40023c00 	.word	0x40023c00
 80066a0:	40023800 	.word	0x40023800
 80066a4:	0801400c 	.word	0x0801400c
 80066a8:	20000004 	.word	0x20000004
 80066ac:	20000008 	.word	0x20000008

080066b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b4:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000004 	.word	0x20000004

080066c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066cc:	f7ff fff0 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0a9b      	lsrs	r3, r3, #10
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	; (80066ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	0801401c 	.word	0x0801401c

080066f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066f4:	f7ff ffdc 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	0b5b      	lsrs	r3, r3, #13
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	4903      	ldr	r1, [pc, #12]	; (8006714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006706:	5ccb      	ldrb	r3, [r1, r3]
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40023800 	.word	0x40023800
 8006714:	0801401c 	.word	0x0801401c

08006718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	220f      	movs	r2, #15
 8006726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0203 	and.w	r2, r3, #3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006740:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800674c:	4b09      	ldr	r3, [pc, #36]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	08db      	lsrs	r3, r3, #3
 8006752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800675a:	4b07      	ldr	r3, [pc, #28]	; (8006778 <HAL_RCC_GetClockConfig+0x60>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40023c00 	.word	0x40023c00

0800677c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	; 0x30
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80067b4:	4b6f      	ldr	r3, [pc, #444]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	496c      	ldr	r1, [pc, #432]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80067d2:	2301      	movs	r3, #1
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80067e2:	4b64      	ldr	r3, [pc, #400]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f0:	4960      	ldr	r1, [pc, #384]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d017      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006810:	4b58      	ldr	r3, [pc, #352]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	4955      	ldr	r1, [pc, #340]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682e:	d101      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006830:	2301      	movs	r3, #1
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800683c:	2301      	movs	r3, #1
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d017      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800684c:	4b49      	ldr	r3, [pc, #292]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	4946      	ldr	r1, [pc, #280]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800686a:	d101      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800686c:	2301      	movs	r3, #1
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 808a 	beq.w	800699e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	4b39      	ldr	r3, [pc, #228]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	4a38      	ldr	r2, [pc, #224]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6413      	str	r3, [r2, #64]	; 0x40
 800689a:	4b36      	ldr	r3, [pc, #216]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068a6:	4b34      	ldr	r3, [pc, #208]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a33      	ldr	r2, [pc, #204]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068b2:	f7fc fbcf 	bl	8003054 <HAL_GetTick>
 80068b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068b8:	e008      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068ba:	f7fc fbcb 	bl	8003054 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e278      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068cc:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0f0      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02f      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d028      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006900:	4b1e      	ldr	r3, [pc, #120]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006906:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800690c:	4a19      	ldr	r2, [pc, #100]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d114      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800691e:	f7fc fb99 	bl	8003054 <HAL_GetTick>
 8006922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	e00a      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f7fc fb95 	bl	8003054 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f241 3288 	movw	r2, #5000	; 0x1388
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e240      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ee      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006954:	d114      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	4902      	ldr	r1, [pc, #8]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800696c:	4313      	orrs	r3, r2
 800696e:	608b      	str	r3, [r1, #8]
 8006970:	e00c      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800
 8006978:	40007000 	.word	0x40007000
 800697c:	42470e40 	.word	0x42470e40
 8006980:	4b4a      	ldr	r3, [pc, #296]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a49      	ldr	r2, [pc, #292]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006986:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800698a:	6093      	str	r3, [r2, #8]
 800698c:	4b47      	ldr	r3, [pc, #284]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800698e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006998:	4944      	ldr	r1, [pc, #272]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800699a:	4313      	orrs	r3, r2
 800699c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0310 	and.w	r3, r3, #16
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80069b0:	4b3f      	ldr	r3, [pc, #252]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80069b2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80069c0:	4b3a      	ldr	r3, [pc, #232]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ce:	4937      	ldr	r1, [pc, #220]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069e2:	4b32      	ldr	r3, [pc, #200]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	492e      	ldr	r1, [pc, #184]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a04:	4b29      	ldr	r3, [pc, #164]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	4926      	ldr	r1, [pc, #152]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a22:	d101      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006a24:	2301      	movs	r3, #1
 8006a26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a34:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	491a      	ldr	r1, [pc, #104]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d011      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	4911      	ldr	r1, [pc, #68]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a74:	d101      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006a76:	2301      	movs	r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d005      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a88:	f040 80ff 	bne.w	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a92:	f7fc fadf 	bl	8003054 <HAL_GetTick>
 8006a96:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a98:	e00e      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a9a:	f7fc fadb 	bl	8003054 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d907      	bls.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e188      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	424711e0 	.word	0x424711e0
 8006ab4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab8:	4b7e      	ldr	r3, [pc, #504]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1ea      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d028      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d124      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006aec:	4b71      	ldr	r3, [pc, #452]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	3301      	adds	r3, #1
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006afe:	4b6d      	ldr	r3, [pc, #436]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b04:	0e1b      	lsrs	r3, r3, #24
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	019b      	lsls	r3, r3, #6
 8006b16:	431a      	orrs	r2, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	431a      	orrs	r2, r3
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	061b      	lsls	r3, r3, #24
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	071b      	lsls	r3, r3, #28
 8006b2e:	4961      	ldr	r1, [pc, #388]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d035      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b60:	d130      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b62:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b74:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b7a:	0f1b      	lsrs	r3, r3, #28
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	019b      	lsls	r3, r3, #6
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	3b01      	subs	r3, #1
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	061b      	lsls	r3, r3, #24
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	071b      	lsls	r3, r3, #28
 8006ba4:	4943      	ldr	r1, [pc, #268]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bac:	4b41      	ldr	r3, [pc, #260]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb2:	f023 021f 	bic.w	r2, r3, #31
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	493d      	ldr	r1, [pc, #244]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d029      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd8:	d124      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	3301      	adds	r3, #1
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bec:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf2:	0f1b      	lsrs	r3, r3, #28
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	019b      	lsls	r3, r3, #6
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	431a      	orrs	r2, r3
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	431a      	orrs	r2, r3
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	4925      	ldr	r1, [pc, #148]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d016      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	019b      	lsls	r3, r3, #6
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	3b01      	subs	r3, #1
 8006c44:	041b      	lsls	r3, r3, #16
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	071b      	lsls	r3, r3, #28
 8006c56:	4917      	ldr	r1, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c5e:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c64:	f7fc f9f6 	bl	8003054 <HAL_GetTick>
 8006c68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c6c:	f7fc f9f2 	bl	8003054 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e09f      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	f040 8095 	bne.w	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c98:	f7fc f9dc 	bl	8003054 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c9e:	e00f      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ca0:	f7fc f9d8 	bl	8003054 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d908      	bls.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e085      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	42470068 	.word	0x42470068
 8006cbc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cc0:	4b41      	ldr	r3, [pc, #260]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ccc:	d0e8      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d02b      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d127      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006cf6:	4b34      	ldr	r3, [pc, #208]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	3301      	adds	r3, #1
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	019b      	lsls	r3, r3, #6
 8006d12:	431a      	orrs	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	061b      	lsls	r3, r3, #24
 8006d24:	4928      	ldr	r1, [pc, #160]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d2c:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	4922      	ldr	r1, [pc, #136]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01d      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5a:	d118      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d62:	0e1b      	lsrs	r3, r3, #24
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	019b      	lsls	r3, r3, #6
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	061b      	lsls	r3, r3, #24
 8006d86:	4910      	ldr	r1, [pc, #64]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d94:	f7fc f95e 	bl	8003054 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d9c:	f7fc f95a 	bl	8003054 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e007      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dba:	d1ef      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3730      	adds	r7, #48	; 0x30
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	42470070 	.word	0x42470070

08006dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd4:	b0a6      	sub	sp, #152	; 0x98
 8006dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df6:	4bc8      	ldr	r3, [pc, #800]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b0c      	cmp	r3, #12
 8006e00:	f200 817e 	bhi.w	8007100 <HAL_RCC_GetSysClockFreq+0x330>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e41 	.word	0x08006e41
 8006e10:	08007101 	.word	0x08007101
 8006e14:	08007101 	.word	0x08007101
 8006e18:	08007101 	.word	0x08007101
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	08007101 	.word	0x08007101
 8006e24:	08007101 	.word	0x08007101
 8006e28:	08007101 	.word	0x08007101
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08007101 	.word	0x08007101
 8006e34:	08007101 	.word	0x08007101
 8006e38:	08007101 	.word	0x08007101
 8006e3c:	08006fbb 	.word	0x08006fbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e40:	4bb6      	ldr	r3, [pc, #728]	; (800711c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006e46:	e15f      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e48:	4bb5      	ldr	r3, [pc, #724]	; (8007120 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006e4e:	e15b      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e50:	4bb1      	ldr	r3, [pc, #708]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e5c:	4bae      	ldr	r3, [pc, #696]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d031      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e68:	4bab      	ldr	r3, [pc, #684]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	099b      	lsrs	r3, r3, #6
 8006e6e:	2200      	movs	r2, #0
 8006e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	667b      	str	r3, [r7, #100]	; 0x64
 8006e80:	4ba7      	ldr	r3, [pc, #668]	; (8007120 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e82:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006e86:	462a      	mov	r2, r5
 8006e88:	fb03 f202 	mul.w	r2, r3, r2
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4621      	mov	r1, r4
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	4413      	add	r3, r2
 8006e96:	4aa2      	ldr	r2, [pc, #648]	; (8007120 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e98:	4621      	mov	r1, r4
 8006e9a:	fba1 1202 	umull	r1, r2, r1, r2
 8006e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	67ba      	str	r2, [r7, #120]	; 0x78
 8006ea4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ea6:	4413      	add	r3, r2
 8006ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eae:	2200      	movs	r2, #0
 8006eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eb2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006eb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eb8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006ebc:	f7f9 ff04 	bl	8000cc8 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eca:	e064      	b.n	8006f96 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ecc:	4b92      	ldr	r3, [pc, #584]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	099b      	lsrs	r3, r3, #6
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ed6:	657a      	str	r2, [r7, #84]	; 0x54
 8006ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006ee8:	4622      	mov	r2, r4
 8006eea:	462b      	mov	r3, r5
 8006eec:	f04f 0000 	mov.w	r0, #0
 8006ef0:	f04f 0100 	mov.w	r1, #0
 8006ef4:	0159      	lsls	r1, r3, #5
 8006ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006efa:	0150      	lsls	r0, r2, #5
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4621      	mov	r1, r4
 8006f02:	1a51      	subs	r1, r2, r1
 8006f04:	6139      	str	r1, [r7, #16]
 8006f06:	4629      	mov	r1, r5
 8006f08:	eb63 0301 	sbc.w	r3, r3, r1
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	018b      	lsls	r3, r1, #6
 8006f1e:	4651      	mov	r1, sl
 8006f20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f24:	4651      	mov	r1, sl
 8006f26:	018a      	lsls	r2, r1, #6
 8006f28:	4651      	mov	r1, sl
 8006f2a:	ebb2 0801 	subs.w	r8, r2, r1
 8006f2e:	4659      	mov	r1, fp
 8006f30:	eb63 0901 	sbc.w	r9, r3, r1
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f48:	4690      	mov	r8, r2
 8006f4a:	4699      	mov	r9, r3
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	eb18 0303 	adds.w	r3, r8, r3
 8006f52:	60bb      	str	r3, [r7, #8]
 8006f54:	462b      	mov	r3, r5
 8006f56:	eb49 0303 	adc.w	r3, r9, r3
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f68:	4629      	mov	r1, r5
 8006f6a:	028b      	lsls	r3, r1, #10
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f72:	4621      	mov	r1, r4
 8006f74:	028a      	lsls	r2, r1, #10
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f7e:	2200      	movs	r2, #0
 8006f80:	643b      	str	r3, [r7, #64]	; 0x40
 8006f82:	647a      	str	r2, [r7, #68]	; 0x44
 8006f84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f88:	f7f9 fe9e 	bl	8000cc8 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4613      	mov	r3, r2
 8006f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f96:	4b60      	ldr	r3, [pc, #384]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	0c1b      	lsrs	r3, r3, #16
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006fa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006fb8:	e0a6      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fba:	4b57      	ldr	r3, [pc, #348]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fc6:	4b54      	ldr	r3, [pc, #336]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02a      	beq.n	8007028 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fd2:	4b51      	ldr	r3, [pc, #324]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	2200      	movs	r2, #0
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4b4e      	ldr	r3, [pc, #312]	; (8007120 <HAL_RCC_GetSysClockFreq+0x350>)
 8006fe8:	fb03 f201 	mul.w	r2, r3, r1
 8006fec:	2300      	movs	r3, #0
 8006fee:	fb00 f303 	mul.w	r3, r0, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	4a4a      	ldr	r2, [pc, #296]	; (8007120 <HAL_RCC_GetSysClockFreq+0x350>)
 8006ff6:	fba0 1202 	umull	r1, r2, r0, r2
 8006ffa:	677a      	str	r2, [r7, #116]	; 0x74
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	673a      	str	r2, [r7, #112]	; 0x70
 8007000:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007002:	4413      	add	r3, r2
 8007004:	677b      	str	r3, [r7, #116]	; 0x74
 8007006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800700a:	2200      	movs	r2, #0
 800700c:	633b      	str	r3, [r7, #48]	; 0x30
 800700e:	637a      	str	r2, [r7, #52]	; 0x34
 8007010:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007014:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007018:	f7f9 fe56 	bl	8000cc8 <__aeabi_uldivmod>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4613      	mov	r3, r2
 8007022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007026:	e05b      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007028:	4b3b      	ldr	r3, [pc, #236]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	099b      	lsrs	r3, r3, #6
 800702e:	2200      	movs	r2, #0
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
 8007032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	2300      	movs	r3, #0
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
 8007040:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	f04f 0000 	mov.w	r0, #0
 800704c:	f04f 0100 	mov.w	r1, #0
 8007050:	0159      	lsls	r1, r3, #5
 8007052:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007056:	0150      	lsls	r0, r2, #5
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4641      	mov	r1, r8
 800705e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007062:	4649      	mov	r1, r9
 8007064:	eb63 0b01 	sbc.w	fp, r3, r1
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007074:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007078:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800707c:	ebb2 040a 	subs.w	r4, r2, sl
 8007080:	eb63 050b 	sbc.w	r5, r3, fp
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	00eb      	lsls	r3, r5, #3
 800708e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007092:	00e2      	lsls	r2, r4, #3
 8007094:	4614      	mov	r4, r2
 8007096:	461d      	mov	r5, r3
 8007098:	4643      	mov	r3, r8
 800709a:	18e3      	adds	r3, r4, r3
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	464b      	mov	r3, r9
 80070a0:	eb45 0303 	adc.w	r3, r5, r3
 80070a4:	607b      	str	r3, [r7, #4]
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070b2:	4629      	mov	r1, r5
 80070b4:	028b      	lsls	r3, r1, #10
 80070b6:	4621      	mov	r1, r4
 80070b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070bc:	4621      	mov	r1, r4
 80070be:	028a      	lsls	r2, r1, #10
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c8:	2200      	movs	r2, #0
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	61fa      	str	r2, [r7, #28]
 80070ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d2:	f7f9 fdf9 	bl	8000cc8 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4613      	mov	r3, r2
 80070dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <HAL_RCC_GetSysClockFreq+0x348>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	0f1b      	lsrs	r3, r3, #28
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80070ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80070fe:	e003      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007100:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_RCC_GetSysClockFreq+0x34c>)
 8007102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800710c:	4618      	mov	r0, r3
 800710e:	3798      	adds	r7, #152	; 0x98
 8007110:	46bd      	mov	sp, r7
 8007112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007116:	bf00      	nop
 8007118:	40023800 	.word	0x40023800
 800711c:	00f42400 	.word	0x00f42400
 8007120:	017d7840 	.word	0x017d7840

08007124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e28d      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8083 	beq.w	800724a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007144:	4b94      	ldr	r3, [pc, #592]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b04      	cmp	r3, #4
 800714e:	d019      	beq.n	8007184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007150:	4b91      	ldr	r3, [pc, #580]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007158:	2b08      	cmp	r3, #8
 800715a:	d106      	bne.n	800716a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800715c:	4b8e      	ldr	r3, [pc, #568]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007168:	d00c      	beq.n	8007184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800716a:	4b8b      	ldr	r3, [pc, #556]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007172:	2b0c      	cmp	r3, #12
 8007174:	d112      	bne.n	800719c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007176:	4b88      	ldr	r3, [pc, #544]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800717e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007182:	d10b      	bne.n	800719c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007184:	4b84      	ldr	r3, [pc, #528]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d05b      	beq.n	8007248 <HAL_RCC_OscConfig+0x124>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d157      	bne.n	8007248 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e25a      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a4:	d106      	bne.n	80071b4 <HAL_RCC_OscConfig+0x90>
 80071a6:	4b7c      	ldr	r3, [pc, #496]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a7b      	ldr	r2, [pc, #492]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e01d      	b.n	80071f0 <HAL_RCC_OscConfig+0xcc>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071bc:	d10c      	bne.n	80071d8 <HAL_RCC_OscConfig+0xb4>
 80071be:	4b76      	ldr	r3, [pc, #472]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a75      	ldr	r2, [pc, #468]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	4b73      	ldr	r3, [pc, #460]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a72      	ldr	r2, [pc, #456]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e00b      	b.n	80071f0 <HAL_RCC_OscConfig+0xcc>
 80071d8:	4b6f      	ldr	r3, [pc, #444]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a6e      	ldr	r2, [pc, #440]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	4b6c      	ldr	r3, [pc, #432]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a6b      	ldr	r2, [pc, #428]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80071ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d013      	beq.n	8007220 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f8:	f7fb ff2c 	bl	8003054 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007200:	f7fb ff28 	bl	8003054 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b64      	cmp	r3, #100	; 0x64
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e21f      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007212:	4b61      	ldr	r3, [pc, #388]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0xdc>
 800721e:	e014      	b.n	800724a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fb ff18 	bl	8003054 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007228:	f7fb ff14 	bl	8003054 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b64      	cmp	r3, #100	; 0x64
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e20b      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800723a:	4b57      	ldr	r3, [pc, #348]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x104>
 8007246:	e000      	b.n	800724a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d06f      	beq.n	8007336 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007256:	4b50      	ldr	r3, [pc, #320]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
 800725e:	2b00      	cmp	r3, #0
 8007260:	d017      	beq.n	8007292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007262:	4b4d      	ldr	r3, [pc, #308]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800726a:	2b08      	cmp	r3, #8
 800726c:	d105      	bne.n	800727a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800726e:	4b4a      	ldr	r3, [pc, #296]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800727a:	4b47      	ldr	r3, [pc, #284]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007282:	2b0c      	cmp	r3, #12
 8007284:	d11c      	bne.n	80072c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007286:	4b44      	ldr	r3, [pc, #272]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d116      	bne.n	80072c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007292:	4b41      	ldr	r3, [pc, #260]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <HAL_RCC_OscConfig+0x186>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d001      	beq.n	80072aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e1d3      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072aa:	4b3b      	ldr	r3, [pc, #236]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	4937      	ldr	r1, [pc, #220]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072be:	e03a      	b.n	8007336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072c8:	4b34      	ldr	r3, [pc, #208]	; (800739c <HAL_RCC_OscConfig+0x278>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ce:	f7fb fec1 	bl	8003054 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072d6:	f7fb febd 	bl	8003054 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e1b4      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f4:	4b28      	ldr	r3, [pc, #160]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4925      	ldr	r1, [pc, #148]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]
 8007308:	e015      	b.n	8007336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800730a:	4b24      	ldr	r3, [pc, #144]	; (800739c <HAL_RCC_OscConfig+0x278>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007310:	f7fb fea0 	bl	8003054 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007318:	f7fb fe9c 	bl	8003054 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e193      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732a:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d036      	beq.n	80073b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <HAL_RCC_OscConfig+0x27c>)
 800734c:	2201      	movs	r2, #1
 800734e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007350:	f7fb fe80 	bl	8003054 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007358:	f7fb fe7c 	bl	8003054 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e173      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <HAL_RCC_OscConfig+0x274>)
 800736c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x234>
 8007376:	e01b      	b.n	80073b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007378:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <HAL_RCC_OscConfig+0x27c>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737e:	f7fb fe69 	bl	8003054 <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007384:	e00e      	b.n	80073a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007386:	f7fb fe65 	bl	8003054 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d907      	bls.n	80073a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e15c      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
 8007398:	40023800 	.word	0x40023800
 800739c:	42470000 	.word	0x42470000
 80073a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073a4:	4b8a      	ldr	r3, [pc, #552]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80073a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1ea      	bne.n	8007386 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8097 	beq.w	80074ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073be:	2300      	movs	r3, #0
 80073c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c2:	4b83      	ldr	r3, [pc, #524]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10f      	bne.n	80073ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	4b7f      	ldr	r3, [pc, #508]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	4a7e      	ldr	r2, [pc, #504]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6413      	str	r3, [r2, #64]	; 0x40
 80073de:	4b7c      	ldr	r3, [pc, #496]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ee:	4b79      	ldr	r3, [pc, #484]	; (80075d4 <HAL_RCC_OscConfig+0x4b0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d118      	bne.n	800742c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073fa:	4b76      	ldr	r3, [pc, #472]	; (80075d4 <HAL_RCC_OscConfig+0x4b0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a75      	ldr	r2, [pc, #468]	; (80075d4 <HAL_RCC_OscConfig+0x4b0>)
 8007400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007406:	f7fb fe25 	bl	8003054 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800740e:	f7fb fe21 	bl	8003054 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e118      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007420:	4b6c      	ldr	r3, [pc, #432]	; (80075d4 <HAL_RCC_OscConfig+0x4b0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0f0      	beq.n	800740e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d106      	bne.n	8007442 <HAL_RCC_OscConfig+0x31e>
 8007434:	4b66      	ldr	r3, [pc, #408]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007438:	4a65      	ldr	r2, [pc, #404]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	6713      	str	r3, [r2, #112]	; 0x70
 8007440:	e01c      	b.n	800747c <HAL_RCC_OscConfig+0x358>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b05      	cmp	r3, #5
 8007448:	d10c      	bne.n	8007464 <HAL_RCC_OscConfig+0x340>
 800744a:	4b61      	ldr	r3, [pc, #388]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a60      	ldr	r2, [pc, #384]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007450:	f043 0304 	orr.w	r3, r3, #4
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
 8007456:	4b5e      	ldr	r3, [pc, #376]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	4a5d      	ldr	r2, [pc, #372]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	6713      	str	r3, [r2, #112]	; 0x70
 8007462:	e00b      	b.n	800747c <HAL_RCC_OscConfig+0x358>
 8007464:	4b5a      	ldr	r3, [pc, #360]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	4a59      	ldr	r2, [pc, #356]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	6713      	str	r3, [r2, #112]	; 0x70
 8007470:	4b57      	ldr	r3, [pc, #348]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007474:	4a56      	ldr	r2, [pc, #344]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007476:	f023 0304 	bic.w	r3, r3, #4
 800747a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d015      	beq.n	80074b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007484:	f7fb fde6 	bl	8003054 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800748a:	e00a      	b.n	80074a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800748c:	f7fb fde2 	bl	8003054 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	; 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e0d7      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a2:	4b4b      	ldr	r3, [pc, #300]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0ee      	beq.n	800748c <HAL_RCC_OscConfig+0x368>
 80074ae:	e014      	b.n	80074da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b0:	f7fb fdd0 	bl	8003054 <HAL_GetTick>
 80074b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b6:	e00a      	b.n	80074ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074b8:	f7fb fdcc 	bl	8003054 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e0c1      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ce:	4b40      	ldr	r3, [pc, #256]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1ee      	bne.n	80074b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d105      	bne.n	80074ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e0:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	4a3a      	ldr	r2, [pc, #232]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80074e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80ad 	beq.w	8007650 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074f6:	4b36      	ldr	r3, [pc, #216]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 030c 	and.w	r3, r3, #12
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d060      	beq.n	80075c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d145      	bne.n	8007596 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750a:	4b33      	ldr	r3, [pc, #204]	; (80075d8 <HAL_RCC_OscConfig+0x4b4>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fb fda0 	bl	8003054 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007518:	f7fb fd9c 	bl	8003054 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e093      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752a:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	3b01      	subs	r3, #1
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	071b      	lsls	r3, r3, #28
 8007562:	491b      	ldr	r1, [pc, #108]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 8007564:	4313      	orrs	r3, r2
 8007566:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007568:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <HAL_RCC_OscConfig+0x4b4>)
 800756a:	2201      	movs	r2, #1
 800756c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756e:	f7fb fd71 	bl	8003054 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007576:	f7fb fd6d 	bl	8003054 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e064      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007588:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0f0      	beq.n	8007576 <HAL_RCC_OscConfig+0x452>
 8007594:	e05c      	b.n	8007650 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <HAL_RCC_OscConfig+0x4b4>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fb fd5a 	bl	8003054 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075a4:	f7fb fd56 	bl	8003054 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e04d      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <HAL_RCC_OscConfig+0x4ac>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f0      	bne.n	80075a4 <HAL_RCC_OscConfig+0x480>
 80075c2:	e045      	b.n	8007650 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d107      	bne.n	80075dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e040      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
 80075d0:	40023800 	.word	0x40023800
 80075d4:	40007000 	.word	0x40007000
 80075d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d030      	beq.n	800764c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d129      	bne.n	800764c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007602:	429a      	cmp	r2, r3
 8007604:	d122      	bne.n	800764c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800760c:	4013      	ands	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007614:	4293      	cmp	r3, r2
 8007616:	d119      	bne.n	800764c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	3b01      	subs	r3, #1
 8007626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007628:	429a      	cmp	r2, r3
 800762a:	d10f      	bne.n	800764c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d107      	bne.n	800764c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40023800 	.word	0x40023800

08007660 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e022      	b.n	80076b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d105      	bne.n	800768a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fa fb55 	bl	8001d34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2203      	movs	r2, #3
 800768e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f814 	bl	80076c0 <HAL_SD_InitCard>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e00a      	b.n	80076b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076c0:	b5b0      	push	{r4, r5, r7, lr}
 80076c2:	b08e      	sub	sp, #56	; 0x38
 80076c4:	af04      	add	r7, sp, #16
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80076dc:	2376      	movs	r3, #118	; 0x76
 80076de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681d      	ldr	r5, [r3, #0]
 80076e4:	466c      	mov	r4, sp
 80076e6:	f107 0314 	add.w	r3, r7, #20
 80076ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076f8:	4628      	mov	r0, r5
 80076fa:	f002 fb35 	bl	8009d68 <SDIO_Init>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e04f      	b.n	80077b0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007710:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <HAL_SD_InitCard+0xf8>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f002 fb6d 	bl	8009dfa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007720:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <HAL_SD_InitCard+0xf8>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007726:	2002      	movs	r0, #2
 8007728:	f7fb fca0 	bl	800306c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 ff55 	bl	80085dc <SD_PowerON>
 8007732:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e02e      	b.n	80077b0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fe74 	bl	8008440 <SD_InitCard>
 8007758:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e01b      	b.n	80077b0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007780:	4618      	mov	r0, r3
 8007782:	f002 fbcc 	bl	8009f1e <SDMMC_CmdBlockLength>
 8007786:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00f      	beq.n	80077ae <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <HAL_SD_InitCard+0xfc>)
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3728      	adds	r7, #40	; 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bdb0      	pop	{r4, r5, r7, pc}
 80077b8:	422580a0 	.word	0x422580a0
 80077bc:	004005ff 	.word	0x004005ff

080077c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08c      	sub	sp, #48	; 0x30
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d107      	bne.n	80077e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0be      	b.n	8007966 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f040 80b7 	bne.w	8007964 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80077fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	429a      	cmp	r2, r3
 8007808:	d907      	bls.n	800781a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e0a5      	b.n	8007966 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2203      	movs	r2, #3
 800781e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007838:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	4a4c      	ldr	r2, [pc, #304]	; (8007970 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	4a4b      	ldr	r2, [pc, #300]	; (8007974 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007848:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2200      	movs	r2, #0
 8007850:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3380      	adds	r3, #128	; 0x80
 8007880:	4619      	mov	r1, r3
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	025b      	lsls	r3, r3, #9
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	f7fb fda3 	bl	80033d4 <HAL_DMA_Start_IT>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d017      	beq.n	80078c4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80078a2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a33      	ldr	r2, [pc, #204]	; (8007978 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e050      	b.n	8007966 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80078c4:	4b2d      	ldr	r3, [pc, #180]	; (800797c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d002      	beq.n	80078d8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	025b      	lsls	r3, r3, #9
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295
 80078dc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	025b      	lsls	r3, r3, #9
 80078e2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80078e4:	2390      	movs	r3, #144	; 0x90
 80078e6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80078e8:	2302      	movs	r3, #2
 80078ea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80078f0:	2301      	movs	r3, #1
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f107 0210 	add.w	r2, r7, #16
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f002 fae1 	bl	8009ec6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d90a      	bls.n	8007920 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2282      	movs	r2, #130	; 0x82
 800790e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007916:	4618      	mov	r0, r3
 8007918:	f002 fb45 	bl	8009fa6 <SDMMC_CmdReadMultiBlock>
 800791c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800791e:	e009      	b.n	8007934 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2281      	movs	r2, #129	; 0x81
 8007924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800792c:	4618      	mov	r0, r3
 800792e:	f002 fb18 	bl	8009f62 <SDMMC_CmdReadSingleBlock>
 8007932:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d012      	beq.n	8007960 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a0e      	ldr	r2, [pc, #56]	; (8007978 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	431a      	orrs	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e002      	b.n	8007966 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	e000      	b.n	8007966 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3730      	adds	r7, #48	; 0x30
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	0800824f 	.word	0x0800824f
 8007974:	080082c1 	.word	0x080082c1
 8007978:	004005ff 	.word	0x004005ff
 800797c:	4225858c 	.word	0x4225858c

08007980 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	; 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0c1      	b.n	8007b2c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	f040 80ba 	bne.w	8007b2a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d907      	bls.n	80079da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e0a8      	b.n	8007b2c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2203      	movs	r2, #3
 80079de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 021a 	orr.w	r2, r2, #26
 80079f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fe:	4a4d      	ldr	r2, [pc, #308]	; (8007b34 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	4a4c      	ldr	r2, [pc, #304]	; (8007b38 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007a08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	2200      	movs	r2, #0
 8007a10:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d002      	beq.n	8007a20 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	025b      	lsls	r3, r3, #9
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d90a      	bls.n	8007a3c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	22a0      	movs	r2, #160	; 0xa0
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a32:	4618      	mov	r0, r3
 8007a34:	f002 fafb 	bl	800a02e <SDMMC_CmdWriteMultiBlock>
 8007a38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a3a:	e009      	b.n	8007a50 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2290      	movs	r2, #144	; 0x90
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f002 face 	bl	8009fea <SDMMC_CmdWriteSingleBlock>
 8007a4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d012      	beq.n	8007a7c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a38      	ldr	r2, [pc, #224]	; (8007b3c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e057      	b.n	8007b2c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007a7c:	4b30      	ldr	r3, [pc, #192]	; (8007b40 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	2240      	movs	r2, #64	; 0x40
 8007a88:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3380      	adds	r3, #128	; 0x80
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	025b      	lsls	r3, r3, #9
 8007ab8:	089b      	lsrs	r3, r3, #2
 8007aba:	f7fb fc8b 	bl	80033d4 <HAL_DMA_Start_IT>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01a      	beq.n	8007afa <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 021a 	bic.w	r2, r2, #26
 8007ad2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e018      	b.n	8007b2c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	025b      	lsls	r3, r3, #9
 8007b04:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007b06:	2390      	movs	r3, #144	; 0x90
 8007b08:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f107 0210 	add.w	r2, r7, #16
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f002 f9d0 	bl	8009ec6 <SDIO_ConfigData>

      return HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e000      	b.n	8007b2c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007b2a:	2302      	movs	r3, #2
  }
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3730      	adds	r7, #48	; 0x30
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	08008225 	.word	0x08008225
 8007b38:	080082c1 	.word	0x080082c1
 8007b3c:	004005ff 	.word	0x004005ff
 8007b40:	4225858c 	.word	0x4225858c

08007b44 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_SD_IRQHandler+0x2e>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fdec 	bl	8008748 <SD_Read_IT>
 8007b70:	e155      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 808f 	beq.w	8007ca0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007b9a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007b9e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d039      	beq.n	8007c2e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_SD_IRQHandler+0x8a>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d011      	beq.n	8007bf2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f002 fa4e 	bl	800a074 <SDMMC_CmdStopTransfer>
 8007bd8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d008      	beq.n	8007bf2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f91f 	bl	8007e30 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <HAL_SD_IRQHandler+0xda>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f002 fe64 	bl	800a8ec <HAL_SD_RxCpltCallback>
 8007c24:	e0fb      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f002 fe56 	bl	800a8d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c2c:	e0f7      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80f2 	beq.w	8007e1e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d011      	beq.n	8007c68 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 fa13 	bl	800a074 <SDMMC_CmdStopTransfer>
 8007c4e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8e4 	bl	8007e30 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f040 80d5 	bne.w	8007e1e <HAL_SD_IRQHandler+0x2da>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 80cf 	bne.w	8007e1e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0208 	bic.w	r2, r2, #8
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f002 fe1d 	bl	800a8d8 <HAL_SD_TxCpltCallback>
}
 8007c9e:	e0be      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <HAL_SD_IRQHandler+0x17c>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fd96 	bl	80087ea <SD_Write_IT>
 8007cbe:	e0ae      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80a7 	beq.w	8007e1e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	f043 0202 	orr.w	r2, r3, #2
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	f043 0208 	orr.w	r2, r3, #8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	f043 0220 	orr.w	r2, r3, #32
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	f043 0210 	orr.w	r2, r3, #16
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d50:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f002 f98c 	bl	800a074 <SDMMC_CmdStopTransfer>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f855 	bl	8007e30 <HAL_SD_ErrorCallback>
}
 8007d86:	e04a      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d045      	beq.n	8007e1e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <HAL_SD_IRQHandler+0x262>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <HAL_SD_IRQHandler+0x2e4>)
 8007dac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fb fbd6 	bl	8003564 <HAL_DMA_Abort_IT>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d02f      	beq.n	8007e1e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 face 	bl	8008364 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007dc8:	e029      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d104      	bne.n	8007dde <HAL_SD_IRQHandler+0x29a>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d011      	beq.n	8007e02 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <HAL_SD_IRQHandler+0x2e8>)
 8007de4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fb fbba 	bl	8003564 <HAL_DMA_Abort_IT>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d013      	beq.n	8007e1e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fae9 	bl	80083d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007e00:	e00d      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f002 fd54 	bl	800a8c4 <HAL_SD_AbortCallback>
}
 8007e1c:	e7ff      	b.n	8007e1e <HAL_SD_IRQHandler+0x2da>
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	08008365 	.word	0x08008365
 8007e2c:	080083d3 	.word	0x080083d3

08007e30 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e52:	0f9b      	lsrs	r3, r3, #30
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5e:	0e9b      	lsrs	r3, r3, #26
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e70:	0e1b      	lsrs	r3, r3, #24
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e82:	0c1b      	lsrs	r3, r3, #16
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea4:	0d1b      	lsrs	r3, r3, #20
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec2:	0bdb      	lsrs	r3, r3, #15
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed4:	0b9b      	lsrs	r3, r3, #14
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee6:	0b5b      	lsrs	r3, r3, #13
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef8:	0b1b      	lsrs	r3, r3, #12
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d163      	bne.n	8007fdc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f18:	009a      	lsls	r2, r3, #2
 8007f1a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f1e:	4013      	ands	r3, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f24:	0f92      	lsrs	r2, r2, #30
 8007f26:	431a      	orrs	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f30:	0edb      	lsrs	r3, r3, #27
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f42:	0e1b      	lsrs	r3, r3, #24
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f54:	0d5b      	lsrs	r3, r3, #21
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f66:	0c9b      	lsrs	r3, r3, #18
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f78:	0bdb      	lsrs	r3, r3, #15
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	7e1b      	ldrb	r3, [r3, #24]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	3302      	adds	r3, #2
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007fa6:	fb03 f202 	mul.w	r2, r3, r2
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	7a1b      	ldrb	r3, [r3, #8]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 030f 	and.w	r3, r3, #15
 8007fb8:	2201      	movs	r2, #1
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007fc8:	0a52      	lsrs	r2, r2, #9
 8007fca:	fb03 f202 	mul.w	r2, r3, r2
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60
 8007fda:	e031      	b.n	8008040 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d11d      	bne.n	8008020 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff2:	0c1b      	lsrs	r3, r3, #16
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	3301      	adds	r3, #1
 8008000:	029a      	lsls	r2, r3, #10
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008014:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	661a      	str	r2, [r3, #96]	; 0x60
 800801e:	e00f      	b.n	8008040 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a58      	ldr	r2, [pc, #352]	; (8008188 <HAL_SD_GetCardCSD+0x344>)
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e09d      	b.n	800817c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008044:	0b9b      	lsrs	r3, r3, #14
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	b2da      	uxtb	r2, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008056:	09db      	lsrs	r3, r3, #7
 8008058:	b2db      	uxtb	r3, r3
 800805a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805e:	b2da      	uxtb	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806e:	b2da      	uxtb	r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	0fdb      	lsrs	r3, r3, #31
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008084:	0f5b      	lsrs	r3, r3, #29
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	0e9b      	lsrs	r3, r3, #26
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	0d9b      	lsrs	r3, r3, #22
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	0d5b      	lsrs	r3, r3, #21
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	0c1b      	lsrs	r3, r3, #16
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	0bdb      	lsrs	r3, r3, #15
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	0b9b      	lsrs	r3, r3, #14
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	0b5b      	lsrs	r3, r3, #13
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	0b1b      	lsrs	r3, r3, #12
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	0a9b      	lsrs	r3, r3, #10
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	0a1b      	lsrs	r3, r3, #8
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	004005ff 	.word	0x004005ff

0800818c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80081f0:	f107 030c 	add.w	r3, r7, #12
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa7e 	bl	80086f8 <SD_SendStatus>
 80081fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	431a      	orrs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	0a5b      	lsrs	r3, r3, #9
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800821a:	693b      	ldr	r3, [r7, #16]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008230:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008240:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	2b82      	cmp	r3, #130	; 0x82
 8008262:	d111      	bne.n	8008288 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f001 ff03 	bl	800a074 <SDMMC_CmdStopTransfer>
 800826e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fdd4 	bl	8007e30 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0208 	bic.w	r2, r2, #8
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f240 523a 	movw	r2, #1338	; 0x53a
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f002 fb1b 	bl	800a8ec <HAL_SD_RxCpltCallback>
#endif
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7fb fb02 	bl	80038d8 <HAL_DMA_GetError>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d03e      	beq.n	8008358 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d002      	beq.n	80082f6 <SD_DMAError+0x36>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d12d      	bne.n	8008352 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a19      	ldr	r2, [pc, #100]	; (8008360 <SD_DMAError+0xa0>)
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800831a:	6978      	ldr	r0, [r7, #20]
 800831c:	f7ff ff62 	bl	80081e4 <HAL_SD_GetCardState>
 8008320:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b06      	cmp	r3, #6
 8008326:	d002      	beq.n	800832e <SD_DMAError+0x6e>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b05      	cmp	r3, #5
 800832c:	d10a      	bne.n	8008344 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fe9e 	bl	800a074 <SDMMC_CmdStopTransfer>
 8008338:	4602      	mov	r2, r0
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	431a      	orrs	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008352:	6978      	ldr	r0, [r7, #20]
 8008354:	f7ff fd6c 	bl	8007e30 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008358:	bf00      	nop
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	004005ff 	.word	0x004005ff

08008364 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f240 523a 	movw	r2, #1338	; 0x53a
 800837a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff ff31 	bl	80081e4 <HAL_SD_GetCardState>
 8008382:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b06      	cmp	r3, #6
 8008396:	d002      	beq.n	800839e <SD_DMATxAbort+0x3a>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b05      	cmp	r3, #5
 800839c:	d10a      	bne.n	80083b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fe66 	bl	800a074 <SDMMC_CmdStopTransfer>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	431a      	orrs	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f002 fa81 	bl	800a8c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80083c2:	e002      	b.n	80083ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff fd33 	bl	8007e30 <HAL_SD_ErrorCallback>
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fefa 	bl	80081e4 <HAL_SD_GetCardState>
 80083f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b06      	cmp	r3, #6
 8008404:	d002      	beq.n	800840c <SD_DMARxAbort+0x3a>
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b05      	cmp	r3, #5
 800840a:	d10a      	bne.n	8008422 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fe2f 	bl	800a074 <SDMMC_CmdStopTransfer>
 8008416:	4602      	mov	r2, r0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	431a      	orrs	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f002 fa4a 	bl	800a8c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008430:	e002      	b.n	8008438 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff fcfc 	bl	8007e30 <HAL_SD_ErrorCallback>
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008440:	b5b0      	push	{r4, r5, r7, lr}
 8008442:	b094      	sub	sp, #80	; 0x50
 8008444:	af04      	add	r7, sp, #16
 8008446:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008448:	2301      	movs	r3, #1
 800844a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f001 fce0 	bl	8009e16 <SDIO_GetPowerState>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800845c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008460:	e0b8      	b.n	80085d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	2b03      	cmp	r3, #3
 8008468:	d02f      	beq.n	80084ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fec7 	bl	800a202 <SDMMC_CmdSendCID>
 8008474:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <SD_InitCard+0x40>
    {
      return errorstate;
 800847c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847e:	e0a9      	b.n	80085d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2100      	movs	r1, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fd0a 	bl	8009ea0 <SDIO_GetResponse>
 800848c:	4602      	mov	r2, r0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2104      	movs	r1, #4
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fd01 	bl	8009ea0 <SDIO_GetResponse>
 800849e:	4602      	mov	r2, r0
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2108      	movs	r1, #8
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fcf8 	bl	8009ea0 <SDIO_GetResponse>
 80084b0:	4602      	mov	r2, r0
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	210c      	movs	r1, #12
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 fcef 	bl	8009ea0 <SDIO_GetResponse>
 80084c2:	4602      	mov	r2, r0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d00d      	beq.n	80084ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f107 020e 	add.w	r2, r7, #14
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fecd 	bl	800a27c <SDMMC_CmdSetRelAdd>
 80084e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <SD_InitCard+0xae>
    {
      return errorstate;
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	e072      	b.n	80085d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d036      	beq.n	8008564 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80084f6:	89fb      	ldrh	r3, [r7, #14]
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008506:	041b      	lsls	r3, r3, #16
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f001 fe97 	bl	800a23e <SDMMC_CmdSendCSD>
 8008510:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	e05b      	b.n	80085d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2100      	movs	r1, #0
 8008522:	4618      	mov	r0, r3
 8008524:	f001 fcbc 	bl	8009ea0 <SDIO_GetResponse>
 8008528:	4602      	mov	r2, r0
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2104      	movs	r1, #4
 8008534:	4618      	mov	r0, r3
 8008536:	f001 fcb3 	bl	8009ea0 <SDIO_GetResponse>
 800853a:	4602      	mov	r2, r0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2108      	movs	r1, #8
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fcaa 	bl	8009ea0 <SDIO_GetResponse>
 800854c:	4602      	mov	r2, r0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	210c      	movs	r1, #12
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fca1 	bl	8009ea0 <SDIO_GetResponse>
 800855e:	4602      	mov	r2, r0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2104      	movs	r1, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fc98 	bl	8009ea0 <SDIO_GetResponse>
 8008570:	4603      	mov	r3, r0
 8008572:	0d1a      	lsrs	r2, r3, #20
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008578:	f107 0310 	add.w	r3, r7, #16
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff fc60 	bl	8007e44 <HAL_SD_GetCardCSD>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800858a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800858e:	e021      	b.n	80085d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6819      	ldr	r1, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008598:	041b      	lsls	r3, r3, #16
 800859a:	2200      	movs	r2, #0
 800859c:	461c      	mov	r4, r3
 800859e:	4615      	mov	r5, r2
 80085a0:	4622      	mov	r2, r4
 80085a2:	462b      	mov	r3, r5
 80085a4:	4608      	mov	r0, r1
 80085a6:	f001 fd87 	bl	800a0b8 <SDMMC_CmdSelDesel>
 80085aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	e00e      	b.n	80085d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681d      	ldr	r5, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	466c      	mov	r4, sp
 80085be:	f103 0210 	add.w	r2, r3, #16
 80085c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80085c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085c8:	3304      	adds	r3, #4
 80085ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085cc:	4628      	mov	r0, r5
 80085ce:	f001 fbcb 	bl	8009d68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3740      	adds	r7, #64	; 0x40
 80085d8:	46bd      	mov	sp, r7
 80085da:	bdb0      	pop	{r4, r5, r7, pc}

080085dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 fd82 	bl	800a0fe <SDMMC_CmdGoIdleState>
 80085fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	e072      	b.n	80086ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fd95 	bl	800a13a <SDMMC_CmdOperCond>
 8008610:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00d      	beq.n	8008634 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fd6b 	bl	800a0fe <SDMMC_CmdGoIdleState>
 8008628:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	e05b      	b.n	80086ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863e:	2b01      	cmp	r3, #1
 8008640:	d137      	bne.n	80086b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2100      	movs	r1, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fd95 	bl	800a178 <SDMMC_CmdAppCommand>
 800864e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d02d      	beq.n	80086b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800865a:	e047      	b.n	80086ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fd88 	bl	800a178 <SDMMC_CmdAppCommand>
 8008668:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <SD_PowerON+0x98>
    {
      return errorstate;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	e03b      	b.n	80086ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	491e      	ldr	r1, [pc, #120]	; (80086f4 <SD_PowerON+0x118>)
 800867a:	4618      	mov	r0, r3
 800867c:	f001 fd9e 	bl	800a1bc <SDMMC_CmdAppOperCommand>
 8008680:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800868c:	e02e      	b.n	80086ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fc03 	bl	8009ea0 <SDIO_GetResponse>
 800869a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	0fdb      	lsrs	r3, r3, #31
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <SD_PowerON+0xcc>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <SD_PowerON+0xce>
 80086a8:	2300      	movs	r3, #0
 80086aa:	613b      	str	r3, [r7, #16]

    count++;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d802      	bhi.n	80086c2 <SD_PowerON+0xe6>
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0cc      	beq.n	800865c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d902      	bls.n	80086d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80086cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086d0:	e00c      	b.n	80086ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	645a      	str	r2, [r3, #68]	; 0x44
 80086e2:	e002      	b.n	80086ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	c1100000 	.word	0xc1100000

080086f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800870c:	e018      	b.n	8008740 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f001 fdcf 	bl	800a2be <SDMMC_CmdSendStatus>
 8008720:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	e009      	b.n	8008740 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fbb4 	bl	8009ea0 <SDIO_GetResponse>
 8008738:	4602      	mov	r2, r0
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d03f      	beq.n	80087e2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e033      	b.n	80087d0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fb26 	bl	8009dbe <SDIO_ReadFIFO>
 8008772:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	b2da      	uxtb	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3b01      	subs	r3, #1
 8008786:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	0a1b      	lsrs	r3, r3, #8
 800878c:	b2da      	uxtb	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3b01      	subs	r3, #1
 800879c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	0c1b      	lsrs	r3, r3, #16
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	0e1b      	lsrs	r3, r3, #24
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	3301      	adds	r3, #1
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b07      	cmp	r3, #7
 80087d4:	d9c8      	bls.n	8008768 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80087e2:	bf00      	nop
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b086      	sub	sp, #24
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d043      	beq.n	800888c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e037      	b.n	800887a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	3b01      	subs	r3, #1
 800881a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	021a      	lsls	r2, r3, #8
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4313      	orrs	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	3b01      	subs	r3, #1
 8008832:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	041a      	lsls	r2, r3, #16
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4313      	orrs	r3, r2
 800883e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	3b01      	subs	r3, #1
 800884a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	061a      	lsls	r2, r3, #24
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4313      	orrs	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3b01      	subs	r3, #1
 8008862:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f107 0208 	add.w	r2, r7, #8
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fab2 	bl	8009dd8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3301      	adds	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b07      	cmp	r3, #7
 800887e:	d9c4      	bls.n	800880a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800888c:	bf00      	nop
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e041      	b.n	800892a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f839 	bl	8008932 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3304      	adds	r3, #4
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f000 f9d8 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b01      	cmp	r3, #1
 800895a:	d001      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e04e      	b.n	80089fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0201 	orr.w	r2, r2, #1
 8008976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a23      	ldr	r2, [pc, #140]	; (8008a0c <HAL_TIM_Base_Start_IT+0xc4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d022      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898a:	d01d      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a1f      	ldr	r2, [pc, #124]	; (8008a10 <HAL_TIM_Base_Start_IT+0xc8>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d018      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a1e      	ldr	r2, [pc, #120]	; (8008a14 <HAL_TIM_Base_Start_IT+0xcc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d013      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a1c      	ldr	r2, [pc, #112]	; (8008a18 <HAL_TIM_Base_Start_IT+0xd0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00e      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <HAL_TIM_Base_Start_IT+0xd4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d009      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a19      	ldr	r2, [pc, #100]	; (8008a20 <HAL_TIM_Base_Start_IT+0xd8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d004      	beq.n	80089c8 <HAL_TIM_Base_Start_IT+0x80>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a18      	ldr	r2, [pc, #96]	; (8008a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d111      	bne.n	80089ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b06      	cmp	r3, #6
 80089d8:	d010      	beq.n	80089fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0201 	orr.w	r2, r2, #1
 80089e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ea:	e007      	b.n	80089fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	40010000 	.word	0x40010000
 8008a10:	40000400 	.word	0x40000400
 8008a14:	40000800 	.word	0x40000800
 8008a18:	40000c00 	.word	0x40000c00
 8008a1c:	40010400 	.word	0x40010400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40001800 	.word	0x40001800

08008a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d122      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d11b      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f06f 0202 	mvn.w	r2, #2
 8008a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f8ee 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008a70:	e005      	b.n	8008a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f8e0 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f8f1 	bl	8008c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d122      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d11b      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0204 	mvn.w	r2, #4
 8008aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8c4 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008ac4:	e005      	b.n	8008ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f8b6 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8c7 	bl	8008c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0308 	and.w	r3, r3, #8
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d122      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d11b      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f06f 0208 	mvn.w	r2, #8
 8008afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2204      	movs	r2, #4
 8008b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f89a 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008b18:	e005      	b.n	8008b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f88c 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f89d 	bl	8008c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	f003 0310 	and.w	r3, r3, #16
 8008b36:	2b10      	cmp	r3, #16
 8008b38:	d122      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b10      	cmp	r3, #16
 8008b46:	d11b      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f06f 0210 	mvn.w	r2, #16
 8008b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2208      	movs	r2, #8
 8008b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f870 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008b6c:	e005      	b.n	8008b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f862 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f873 	bl	8008c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d10e      	bne.n	8008bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d107      	bne.n	8008bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0201 	mvn.w	r2, #1
 8008ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7f9 f88c 	bl	8001cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb6:	2b80      	cmp	r3, #128	; 0x80
 8008bb8:	d10e      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc4:	2b80      	cmp	r3, #128	; 0x80
 8008bc6:	d107      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f902 	bl	8008ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be2:	2b40      	cmp	r3, #64	; 0x40
 8008be4:	d10e      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf0:	2b40      	cmp	r3, #64	; 0x40
 8008bf2:	d107      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f838 	bl	8008c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d10e      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b20      	cmp	r3, #32
 8008c1e:	d107      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f06f 0220 	mvn.w	r2, #32
 8008c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f8cc 	bl	8008dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a40      	ldr	r2, [pc, #256]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca6:	d00f      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3d      	ldr	r2, [pc, #244]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3c      	ldr	r2, [pc, #240]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3b      	ldr	r2, [pc, #236]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a3a      	ldr	r2, [pc, #232]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d108      	bne.n	8008cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a2f      	ldr	r2, [pc, #188]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d02b      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d027      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d023      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2b      	ldr	r2, [pc, #172]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d01f      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2a      	ldr	r2, [pc, #168]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01b      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a29      	ldr	r2, [pc, #164]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d017      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a28      	ldr	r2, [pc, #160]	; (8008db0 <TIM_Base_SetConfig+0x128>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a27      	ldr	r2, [pc, #156]	; (8008db4 <TIM_Base_SetConfig+0x12c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00f      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a26      	ldr	r2, [pc, #152]	; (8008db8 <TIM_Base_SetConfig+0x130>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00b      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a25      	ldr	r2, [pc, #148]	; (8008dbc <TIM_Base_SetConfig+0x134>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d007      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a24      	ldr	r2, [pc, #144]	; (8008dc0 <TIM_Base_SetConfig+0x138>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d003      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a23      	ldr	r2, [pc, #140]	; (8008dc4 <TIM_Base_SetConfig+0x13c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d108      	bne.n	8008d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a0c      	ldr	r2, [pc, #48]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d103      	bne.n	8008d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40010400 	.word	0x40010400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800
 8008dbc:	40001800 	.word	0x40001800
 8008dc0:	40001c00 	.word	0x40001c00
 8008dc4:	40002000 	.word	0x40002000

08008dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e03f      	b.n	8008e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f9 ff52 	bl	8002cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2224      	movs	r2, #36	; 0x24
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fd23 	bl	8009880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	695a      	ldr	r2, [r3, #20]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	4613      	mov	r3, r2
 8008e96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d130      	bne.n	8008f06 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <HAL_UART_Transmit_IT+0x26>
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e029      	b.n	8008f08 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_UART_Transmit_IT+0x38>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e022      	b.n	8008f08 <HAL_UART_Transmit_IT+0x7e>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	88fa      	ldrh	r2, [r7, #6]
 8008eda:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2221      	movs	r2, #33	; 0x21
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e000      	b.n	8008f08 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008f06:	2302      	movs	r3, #2
  }
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d11d      	bne.n	8008f6a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_UART_Receive_IT+0x26>
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e016      	b.n	8008f6c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_UART_Receive_IT+0x38>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e00f      	b.n	8008f6c <HAL_UART_Receive_IT+0x58>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 fab5 	bl	80094d0 <UART_Start_Receive_IT>
 8008f66:	4603      	mov	r3, r0
 8008f68:	e000      	b.n	8008f6c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f6a:	2302      	movs	r3, #2
  }
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b0ba      	sub	sp, #232	; 0xe8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10f      	bne.n	8008fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <HAL_UART_IRQHandler+0x66>
 8008fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fb99 	bl	800970a <UART_Receive_IT>
      return;
 8008fd8:	e256      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80de 	beq.w	80091a0 <HAL_UART_IRQHandler+0x22c>
 8008fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d106      	bne.n	8008ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80d1 	beq.w	80091a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <HAL_UART_IRQHandler+0xae>
 800900a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f043 0201 	orr.w	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <HAL_UART_IRQHandler+0xd2>
 800902e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f043 0202 	orr.w	r2, r3, #2
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <HAL_UART_IRQHandler+0xf6>
 8009052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d005      	beq.n	800906a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f043 0204 	orr.w	r2, r3, #4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800906a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d011      	beq.n	800909a <HAL_UART_IRQHandler+0x126>
 8009076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	f043 0208 	orr.w	r2, r3, #8
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 81ed 	beq.w	800947e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_UART_IRQHandler+0x14e>
 80090b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fb24 	bl	800970a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	bf0c      	ite	eq
 80090d0:	2301      	moveq	r3, #1
 80090d2:	2300      	movne	r3, #0
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <HAL_UART_IRQHandler+0x17a>
 80090e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d04f      	beq.n	800918e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa2c 	bl	800954c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fe:	2b40      	cmp	r3, #64	; 0x40
 8009100:	d141      	bne.n	8009186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3314      	adds	r3, #20
 8009108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800911c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3314      	adds	r3, #20
 800912a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800912e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800913a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1d9      	bne.n	8009102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	2b00      	cmp	r3, #0
 8009154:	d013      	beq.n	800917e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	4a7d      	ldr	r2, [pc, #500]	; (8009350 <HAL_UART_IRQHandler+0x3dc>)
 800915c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	4618      	mov	r0, r3
 8009164:	f7fa f9fe 	bl	8003564 <HAL_DMA_Abort_IT>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d016      	beq.n	800919c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917c:	e00e      	b.n	800919c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f990 	bl	80094a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009184:	e00a      	b.n	800919c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f98c 	bl	80094a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918c:	e006      	b.n	800919c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f988 	bl	80094a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800919a:	e170      	b.n	800947e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800919c:	bf00      	nop
    return;
 800919e:	e16e      	b.n	800947e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	f040 814a 	bne.w	800943e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8143 	beq.w	800943e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 813c 	beq.w	800943e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091c6:	2300      	movs	r3, #0
 80091c8:	60bb      	str	r3, [r7, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	60bb      	str	r3, [r7, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	f040 80b4 	bne.w	8009354 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8140 	beq.w	8009482 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800920a:	429a      	cmp	r2, r3
 800920c:	f080 8139 	bcs.w	8009482 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009222:	f000 8088 	beq.w	8009336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	330c      	adds	r3, #12
 800922c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800923c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800925e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800926a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1d9      	bne.n	8009226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3314      	adds	r3, #20
 8009278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3314      	adds	r3, #20
 8009292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800929a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800929e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e1      	bne.n	8009272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3314      	adds	r3, #20
 80092ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80092d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e3      	bne.n	80092ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	330c      	adds	r3, #12
 80092fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009306:	f023 0310 	bic.w	r3, r3, #16
 800930a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	330c      	adds	r3, #12
 8009314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009318:	65ba      	str	r2, [r7, #88]	; 0x58
 800931a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800931e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e3      	bne.n	80092f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	4618      	mov	r0, r3
 8009332:	f7fa f8a7 	bl	8003484 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800933e:	b29b      	uxth	r3, r3
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8b6 	bl	80094b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800934c:	e099      	b.n	8009482 <HAL_UART_IRQHandler+0x50e>
 800934e:	bf00      	nop
 8009350:	08009613 	.word	0x08009613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800935c:	b29b      	uxth	r3, r3
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 808b 	beq.w	8009486 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8086 	beq.w	8009486 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	330c      	adds	r3, #12
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800938a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	330c      	adds	r3, #12
 800939a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800939e:	647a      	str	r2, [r7, #68]	; 0x44
 80093a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e3      	bne.n	800937a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	623b      	str	r3, [r7, #32]
   return(result);
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3314      	adds	r3, #20
 80093d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093d6:	633a      	str	r2, [r7, #48]	; 0x30
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e3      	bne.n	80093b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	330c      	adds	r3, #12
 80093fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	60fb      	str	r3, [r7, #12]
   return(result);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0310 	bic.w	r3, r3, #16
 800940e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800941c:	61fa      	str	r2, [r7, #28]
 800941e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	69b9      	ldr	r1, [r7, #24]
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	617b      	str	r3, [r7, #20]
   return(result);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e3      	bne.n	80093f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f83e 	bl	80094b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800943c:	e023      	b.n	8009486 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800943e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <HAL_UART_IRQHandler+0x4ea>
 800944a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800944e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f8ef 	bl	800963a <UART_Transmit_IT>
    return;
 800945c:	e014      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800945e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <HAL_UART_IRQHandler+0x514>
 800946a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d008      	beq.n	8009488 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f92f 	bl	80096da <UART_EndTransmit_IT>
    return;
 800947c:	e004      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
    return;
 800947e:	bf00      	nop
 8009480:	e002      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
      return;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
      return;
 8009486:	bf00      	nop
  }
}
 8009488:	37e8      	adds	r7, #232	; 0xe8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop

08009490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	4613      	mov	r3, r2
 80094dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	88fa      	ldrh	r2, [r7, #6]
 80094e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2222      	movs	r2, #34	; 0x22
 80094fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800951c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	695a      	ldr	r2, [r3, #20]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f042 0201 	orr.w	r2, r2, #1
 800952c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0220 	orr.w	r2, r2, #32
 800953c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b095      	sub	sp, #84	; 0x54
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	330c      	adds	r3, #12
 800955a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800956a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	330c      	adds	r3, #12
 8009572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009574:	643a      	str	r2, [r7, #64]	; 0x40
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800957a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e5      	bne.n	8009554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3314      	adds	r3, #20
 800958e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	61fb      	str	r3, [r7, #28]
   return(result);
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	64bb      	str	r3, [r7, #72]	; 0x48
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3314      	adds	r3, #20
 80095a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e5      	bne.n	8009588 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d119      	bne.n	80095f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	330c      	adds	r3, #12
 80095ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095e4:	61ba      	str	r2, [r7, #24]
 80095e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	6979      	ldr	r1, [r7, #20]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	613b      	str	r3, [r7, #16]
   return(result);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e5      	bne.n	80095c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009606:	bf00      	nop
 8009608:	3754      	adds	r7, #84	; 0x54
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff ff39 	bl	80094a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b21      	cmp	r3, #33	; 0x21
 800964c:	d13e      	bne.n	80096cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009656:	d114      	bne.n	8009682 <UART_Transmit_IT+0x48>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d110      	bne.n	8009682 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009674:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	1c9a      	adds	r2, r3, #2
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	621a      	str	r2, [r3, #32]
 8009680:	e008      	b.n	8009694 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	1c59      	adds	r1, r3, #1
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6211      	str	r1, [r2, #32]
 800968c:	781a      	ldrb	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009698:	b29b      	uxth	r3, r3
 800969a:	3b01      	subs	r3, #1
 800969c:	b29b      	uxth	r3, r3
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4619      	mov	r1, r3
 80096a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10f      	bne.n	80096c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	e000      	b.n	80096ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096cc:	2302      	movs	r3, #2
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fec8 	bl	8009490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b08c      	sub	sp, #48	; 0x30
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b22      	cmp	r3, #34	; 0x22
 800971c:	f040 80ab 	bne.w	8009876 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009728:	d117      	bne.n	800975a <UART_Receive_IT+0x50>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d113      	bne.n	800975a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	b29b      	uxth	r3, r3
 8009744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009748:	b29a      	uxth	r2, r3
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	1c9a      	adds	r2, r3, #2
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	629a      	str	r2, [r3, #40]	; 0x28
 8009758:	e026      	b.n	80097a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009760:	2300      	movs	r3, #0
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976c:	d007      	beq.n	800977e <UART_Receive_IT+0x74>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <UART_Receive_IT+0x82>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	b2da      	uxtb	r2, r3
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	e008      	b.n	800979e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009798:	b2da      	uxtb	r2, r3
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	3b01      	subs	r3, #1
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	4619      	mov	r1, r3
 80097b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d15a      	bne.n	8009872 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0220 	bic.w	r2, r2, #32
 80097ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695a      	ldr	r2, [r3, #20]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0201 	bic.w	r2, r2, #1
 80097ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d135      	bne.n	8009868 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	330c      	adds	r3, #12
 8009808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	613b      	str	r3, [r7, #16]
   return(result);
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f023 0310 	bic.w	r3, r3, #16
 8009818:	627b      	str	r3, [r7, #36]	; 0x24
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	330c      	adds	r3, #12
 8009820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009822:	623a      	str	r2, [r7, #32]
 8009824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	69f9      	ldr	r1, [r7, #28]
 8009828:	6a3a      	ldr	r2, [r7, #32]
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e5      	bne.n	8009802 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0310 	and.w	r3, r3, #16
 8009840:	2b10      	cmp	r3, #16
 8009842:	d10a      	bne.n	800985a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fe29 	bl	80094b8 <HAL_UARTEx_RxEventCallback>
 8009866:	e002      	b.n	800986e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7f8 f8d3 	bl	8001a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	e002      	b.n	8009878 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	e000      	b.n	8009878 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009876:	2302      	movs	r3, #2
  }
}
 8009878:	4618      	mov	r0, r3
 800987a:	3730      	adds	r7, #48	; 0x30
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009884:	b0c0      	sub	sp, #256	; 0x100
 8009886:	af00      	add	r7, sp, #0
 8009888:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800988c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989c:	68d9      	ldr	r1, [r3, #12]
 800989e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	ea40 0301 	orr.w	r3, r0, r1
 80098a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	431a      	orrs	r2, r3
 80098c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098d8:	f021 010c 	bic.w	r1, r1, #12
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098e6:	430b      	orrs	r3, r1
 80098e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098fa:	6999      	ldr	r1, [r3, #24]
 80098fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	ea40 0301 	orr.w	r3, r0, r1
 8009906:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	4b8f      	ldr	r3, [pc, #572]	; (8009b4c <UART_SetConfig+0x2cc>)
 8009910:	429a      	cmp	r2, r3
 8009912:	d005      	beq.n	8009920 <UART_SetConfig+0xa0>
 8009914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	4b8d      	ldr	r3, [pc, #564]	; (8009b50 <UART_SetConfig+0x2d0>)
 800991c:	429a      	cmp	r2, r3
 800991e:	d104      	bne.n	800992a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009920:	f7fc fee6 	bl	80066f0 <HAL_RCC_GetPCLK2Freq>
 8009924:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009928:	e003      	b.n	8009932 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800992a:	f7fc fecd 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 800992e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800993c:	f040 810c 	bne.w	8009b58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009944:	2200      	movs	r2, #0
 8009946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800994a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800994e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009952:	4622      	mov	r2, r4
 8009954:	462b      	mov	r3, r5
 8009956:	1891      	adds	r1, r2, r2
 8009958:	65b9      	str	r1, [r7, #88]	; 0x58
 800995a:	415b      	adcs	r3, r3
 800995c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800995e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009962:	4621      	mov	r1, r4
 8009964:	eb12 0801 	adds.w	r8, r2, r1
 8009968:	4629      	mov	r1, r5
 800996a:	eb43 0901 	adc.w	r9, r3, r1
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	f04f 0300 	mov.w	r3, #0
 8009976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800997a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800997e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009982:	4690      	mov	r8, r2
 8009984:	4699      	mov	r9, r3
 8009986:	4623      	mov	r3, r4
 8009988:	eb18 0303 	adds.w	r3, r8, r3
 800998c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009990:	462b      	mov	r3, r5
 8009992:	eb49 0303 	adc.w	r3, r9, r3
 8009996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800999a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80099aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80099ae:	460b      	mov	r3, r1
 80099b0:	18db      	adds	r3, r3, r3
 80099b2:	653b      	str	r3, [r7, #80]	; 0x50
 80099b4:	4613      	mov	r3, r2
 80099b6:	eb42 0303 	adc.w	r3, r2, r3
 80099ba:	657b      	str	r3, [r7, #84]	; 0x54
 80099bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80099c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80099c4:	f7f7 f980 	bl	8000cc8 <__aeabi_uldivmod>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4b61      	ldr	r3, [pc, #388]	; (8009b54 <UART_SetConfig+0x2d4>)
 80099ce:	fba3 2302 	umull	r2, r3, r3, r2
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	011c      	lsls	r4, r3, #4
 80099d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80099e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	1891      	adds	r1, r2, r2
 80099ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80099f0:	415b      	adcs	r3, r3
 80099f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80099f8:	4641      	mov	r1, r8
 80099fa:	eb12 0a01 	adds.w	sl, r2, r1
 80099fe:	4649      	mov	r1, r9
 8009a00:	eb43 0b01 	adc.w	fp, r3, r1
 8009a04:	f04f 0200 	mov.w	r2, #0
 8009a08:	f04f 0300 	mov.w	r3, #0
 8009a0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a18:	4692      	mov	sl, r2
 8009a1a:	469b      	mov	fp, r3
 8009a1c:	4643      	mov	r3, r8
 8009a1e:	eb1a 0303 	adds.w	r3, sl, r3
 8009a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a26:	464b      	mov	r3, r9
 8009a28:	eb4b 0303 	adc.w	r3, fp, r3
 8009a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a44:	460b      	mov	r3, r1
 8009a46:	18db      	adds	r3, r3, r3
 8009a48:	643b      	str	r3, [r7, #64]	; 0x40
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	eb42 0303 	adc.w	r3, r2, r3
 8009a50:	647b      	str	r3, [r7, #68]	; 0x44
 8009a52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a5a:	f7f7 f935 	bl	8000cc8 <__aeabi_uldivmod>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	4b3b      	ldr	r3, [pc, #236]	; (8009b54 <UART_SetConfig+0x2d4>)
 8009a66:	fba3 2301 	umull	r2, r3, r3, r1
 8009a6a:	095b      	lsrs	r3, r3, #5
 8009a6c:	2264      	movs	r2, #100	; 0x64
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	1acb      	subs	r3, r1, r3
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a7a:	4b36      	ldr	r3, [pc, #216]	; (8009b54 <UART_SetConfig+0x2d4>)
 8009a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8009a80:	095b      	lsrs	r3, r3, #5
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a88:	441c      	add	r4, r3
 8009a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	1891      	adds	r1, r2, r2
 8009aa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009aa4:	415b      	adcs	r3, r3
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009aac:	4641      	mov	r1, r8
 8009aae:	1851      	adds	r1, r2, r1
 8009ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	414b      	adcs	r3, r1
 8009ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	f04f 0300 	mov.w	r3, #0
 8009ac0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ac4:	4659      	mov	r1, fp
 8009ac6:	00cb      	lsls	r3, r1, #3
 8009ac8:	4651      	mov	r1, sl
 8009aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ace:	4651      	mov	r1, sl
 8009ad0:	00ca      	lsls	r2, r1, #3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4642      	mov	r2, r8
 8009ada:	189b      	adds	r3, r3, r2
 8009adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	460a      	mov	r2, r1
 8009ae4:	eb42 0303 	adc.w	r3, r2, r3
 8009ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009af8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009afc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b00:	460b      	mov	r3, r1
 8009b02:	18db      	adds	r3, r3, r3
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b06:	4613      	mov	r3, r2
 8009b08:	eb42 0303 	adc.w	r3, r2, r3
 8009b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009b16:	f7f7 f8d7 	bl	8000cc8 <__aeabi_uldivmod>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <UART_SetConfig+0x2d4>)
 8009b20:	fba3 1302 	umull	r1, r3, r3, r2
 8009b24:	095b      	lsrs	r3, r3, #5
 8009b26:	2164      	movs	r1, #100	; 0x64
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	3332      	adds	r3, #50	; 0x32
 8009b32:	4a08      	ldr	r2, [pc, #32]	; (8009b54 <UART_SetConfig+0x2d4>)
 8009b34:	fba2 2303 	umull	r2, r3, r2, r3
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	f003 0207 	and.w	r2, r3, #7
 8009b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4422      	add	r2, r4
 8009b46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b48:	e106      	b.n	8009d58 <UART_SetConfig+0x4d8>
 8009b4a:	bf00      	nop
 8009b4c:	40011000 	.word	0x40011000
 8009b50:	40011400 	.word	0x40011400
 8009b54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b6a:	4642      	mov	r2, r8
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	1891      	adds	r1, r2, r2
 8009b70:	6239      	str	r1, [r7, #32]
 8009b72:	415b      	adcs	r3, r3
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
 8009b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	1854      	adds	r4, r2, r1
 8009b7e:	4649      	mov	r1, r9
 8009b80:	eb43 0501 	adc.w	r5, r3, r1
 8009b84:	f04f 0200 	mov.w	r2, #0
 8009b88:	f04f 0300 	mov.w	r3, #0
 8009b8c:	00eb      	lsls	r3, r5, #3
 8009b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b92:	00e2      	lsls	r2, r4, #3
 8009b94:	4614      	mov	r4, r2
 8009b96:	461d      	mov	r5, r3
 8009b98:	4643      	mov	r3, r8
 8009b9a:	18e3      	adds	r3, r4, r3
 8009b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	eb45 0303 	adc.w	r3, r5, r3
 8009ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	008b      	lsls	r3, r1, #2
 8009bca:	4621      	mov	r1, r4
 8009bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	008a      	lsls	r2, r1, #2
 8009bd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bd8:	f7f7 f876 	bl	8000cc8 <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4b60      	ldr	r3, [pc, #384]	; (8009d64 <UART_SetConfig+0x4e4>)
 8009be2:	fba3 2302 	umull	r2, r3, r3, r2
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	011c      	lsls	r4, r3, #4
 8009bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009bf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	464b      	mov	r3, r9
 8009c00:	1891      	adds	r1, r2, r2
 8009c02:	61b9      	str	r1, [r7, #24]
 8009c04:	415b      	adcs	r3, r3
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c0c:	4641      	mov	r1, r8
 8009c0e:	1851      	adds	r1, r2, r1
 8009c10:	6139      	str	r1, [r7, #16]
 8009c12:	4649      	mov	r1, r9
 8009c14:	414b      	adcs	r3, r1
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c24:	4659      	mov	r1, fp
 8009c26:	00cb      	lsls	r3, r1, #3
 8009c28:	4651      	mov	r1, sl
 8009c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c2e:	4651      	mov	r1, sl
 8009c30:	00ca      	lsls	r2, r1, #3
 8009c32:	4610      	mov	r0, r2
 8009c34:	4619      	mov	r1, r3
 8009c36:	4603      	mov	r3, r0
 8009c38:	4642      	mov	r2, r8
 8009c3a:	189b      	adds	r3, r3, r2
 8009c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c40:	464b      	mov	r3, r9
 8009c42:	460a      	mov	r2, r1
 8009c44:	eb42 0303 	adc.w	r3, r2, r3
 8009c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009c64:	4649      	mov	r1, r9
 8009c66:	008b      	lsls	r3, r1, #2
 8009c68:	4641      	mov	r1, r8
 8009c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c6e:	4641      	mov	r1, r8
 8009c70:	008a      	lsls	r2, r1, #2
 8009c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c76:	f7f7 f827 	bl	8000cc8 <__aeabi_uldivmod>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	4b38      	ldr	r3, [pc, #224]	; (8009d64 <UART_SetConfig+0x4e4>)
 8009c82:	fba3 2301 	umull	r2, r3, r3, r1
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	2264      	movs	r2, #100	; 0x64
 8009c8a:	fb02 f303 	mul.w	r3, r2, r3
 8009c8e:	1acb      	subs	r3, r1, r3
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	3332      	adds	r3, #50	; 0x32
 8009c94:	4a33      	ldr	r2, [pc, #204]	; (8009d64 <UART_SetConfig+0x4e4>)
 8009c96:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ca0:	441c      	add	r4, r3
 8009ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	673b      	str	r3, [r7, #112]	; 0x70
 8009caa:	677a      	str	r2, [r7, #116]	; 0x74
 8009cac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	1891      	adds	r1, r2, r2
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	415b      	adcs	r3, r3
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cc0:	4641      	mov	r1, r8
 8009cc2:	1851      	adds	r1, r2, r1
 8009cc4:	6039      	str	r1, [r7, #0]
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	414b      	adcs	r3, r1
 8009cca:	607b      	str	r3, [r7, #4]
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009cd8:	4659      	mov	r1, fp
 8009cda:	00cb      	lsls	r3, r1, #3
 8009cdc:	4651      	mov	r1, sl
 8009cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ce2:	4651      	mov	r1, sl
 8009ce4:	00ca      	lsls	r2, r1, #3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	4642      	mov	r2, r8
 8009cee:	189b      	adds	r3, r3, r2
 8009cf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	eb42 0303 	adc.w	r3, r2, r3
 8009cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	663b      	str	r3, [r7, #96]	; 0x60
 8009d06:	667a      	str	r2, [r7, #100]	; 0x64
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	f04f 0300 	mov.w	r3, #0
 8009d10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009d14:	4649      	mov	r1, r9
 8009d16:	008b      	lsls	r3, r1, #2
 8009d18:	4641      	mov	r1, r8
 8009d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d1e:	4641      	mov	r1, r8
 8009d20:	008a      	lsls	r2, r1, #2
 8009d22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009d26:	f7f6 ffcf 	bl	8000cc8 <__aeabi_uldivmod>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <UART_SetConfig+0x4e4>)
 8009d30:	fba3 1302 	umull	r1, r3, r3, r2
 8009d34:	095b      	lsrs	r3, r3, #5
 8009d36:	2164      	movs	r1, #100	; 0x64
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	3332      	adds	r3, #50	; 0x32
 8009d42:	4a08      	ldr	r2, [pc, #32]	; (8009d64 <UART_SetConfig+0x4e4>)
 8009d44:	fba2 2303 	umull	r2, r3, r2, r3
 8009d48:	095b      	lsrs	r3, r3, #5
 8009d4a:	f003 020f 	and.w	r2, r3, #15
 8009d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4422      	add	r2, r4
 8009d56:	609a      	str	r2, [r3, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d64:	51eb851f 	.word	0x51eb851f

08009d68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d68:	b084      	sub	sp, #16
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	f107 001c 	add.w	r0, r7, #28
 8009d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009d7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009d80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009d82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009d86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009d8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009d8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009d92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009da2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	b004      	add	sp, #16
 8009dbc:	4770      	bx	lr

08009dbe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2203      	movs	r2, #3
 8009e06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0303 	and.w	r3, r3, #3
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e50:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e56:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e6c:	f023 030f 	bic.w	r3, r3, #15
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	b2db      	uxtb	r3, r3
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3314      	adds	r3, #20
 8009eae:	461a      	mov	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
}  
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009eec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009ef2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009ef8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0

}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b088      	sub	sp, #32
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f2c:	2310      	movs	r3, #16
 8009f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f30:	2340      	movs	r3, #64	; 0x40
 8009f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f3e:	f107 0308 	add.w	r3, r7, #8
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff ff74 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4e:	2110      	movs	r1, #16
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f9d7 	bl	800a304 <SDMMC_GetCmdResp1>
 8009f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f58:	69fb      	ldr	r3, [r7, #28]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009f70:	2311      	movs	r3, #17
 8009f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f74:	2340      	movs	r3, #64	; 0x40
 8009f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f82:	f107 0308 	add.w	r3, r7, #8
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff ff52 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f92:	2111      	movs	r1, #17
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f9b5 	bl	800a304 <SDMMC_GetCmdResp1>
 8009f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b088      	sub	sp, #32
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009fb4:	2312      	movs	r3, #18
 8009fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff ff30 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd6:	2112      	movs	r1, #18
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f993 	bl	800a304 <SDMMC_GetCmdResp1>
 8009fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3720      	adds	r7, #32
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b088      	sub	sp, #32
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ff8:	2318      	movs	r3, #24
 8009ffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ffc:	2340      	movs	r3, #64	; 0x40
 8009ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a008:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a00a:	f107 0308 	add.w	r3, r7, #8
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff ff0e 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a016:	f241 3288 	movw	r2, #5000	; 0x1388
 800a01a:	2118      	movs	r1, #24
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f971 	bl	800a304 <SDMMC_GetCmdResp1>
 800a022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a024:	69fb      	ldr	r3, [r7, #28]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b088      	sub	sp, #32
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a03c:	2319      	movs	r3, #25
 800a03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a040:	2340      	movs	r3, #64	; 0x40
 800a042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a04c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a04e:	f107 0308 	add.w	r3, r7, #8
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff feec 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a05a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05e:	2119      	movs	r1, #25
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f94f 	bl	800a304 <SDMMC_GetCmdResp1>
 800a066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a068:	69fb      	ldr	r3, [r7, #28]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3720      	adds	r7, #32
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a080:	230c      	movs	r3, #12
 800a082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a084:	2340      	movs	r3, #64	; 0x40
 800a086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a08c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a090:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a092:	f107 0308 	add.w	r3, r7, #8
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff feca 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a09e:	4a05      	ldr	r2, [pc, #20]	; (800a0b4 <SDMMC_CmdStopTransfer+0x40>)
 800a0a0:	210c      	movs	r1, #12
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f92e 	bl	800a304 <SDMMC_GetCmdResp1>
 800a0a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3720      	adds	r7, #32
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	05f5e100 	.word	0x05f5e100

0800a0b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a0c8:	2307      	movs	r3, #7
 800a0ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0cc:	2340      	movs	r3, #64	; 0x40
 800a0ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff fea6 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a0e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ea:	2107      	movs	r1, #7
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f909 	bl	800a304 <SDMMC_GetCmdResp1>
 800a0f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3728      	adds	r7, #40	; 0x28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b088      	sub	sp, #32
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a10e:	2300      	movs	r3, #0
 800a110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a112:	2300      	movs	r3, #0
 800a114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a11a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11c:	f107 0308 	add.w	r3, r7, #8
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff fe85 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fb23 	bl	800a774 <SDMMC_GetCmdError>
 800a12e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a130:	69fb      	ldr	r3, [r7, #28]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b088      	sub	sp, #32
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a142:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a148:	2308      	movs	r3, #8
 800a14a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a14c:	2340      	movs	r3, #64	; 0x40
 800a14e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a158:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fe66 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fab6 	bl	800a6d8 <SDMMC_GetCmdResp7>
 800a16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16e:	69fb      	ldr	r3, [r7, #28]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a186:	2337      	movs	r3, #55	; 0x37
 800a188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff fe47 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a8:	2137      	movs	r1, #55	; 0x37
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f8aa 	bl	800a304 <SDMMC_GetCmdResp1>
 800a1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a1d2:	2329      	movs	r3, #41	; 0x29
 800a1d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1d6:	2340      	movs	r3, #64	; 0x40
 800a1d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e4:	f107 0308 	add.w	r3, r7, #8
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff fe21 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f9bd 	bl	800a570 <SDMMC_GetCmdResp3>
 800a1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b088      	sub	sp, #32
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a20e:	2302      	movs	r3, #2
 800a210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a212:	23c0      	movs	r3, #192	; 0xc0
 800a214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a21e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a220:	f107 0308 	add.w	r3, r7, #8
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff fe03 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f957 	bl	800a4e0 <SDMMC_GetCmdResp2>
 800a232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a234:	69fb      	ldr	r3, [r7, #28]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3720      	adds	r7, #32
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b088      	sub	sp, #32
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a24c:	2309      	movs	r3, #9
 800a24e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a250:	23c0      	movs	r3, #192	; 0xc0
 800a252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a254:	2300      	movs	r3, #0
 800a256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7ff fde4 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f938 	bl	800a4e0 <SDMMC_GetCmdResp2>
 800a270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a272:	69fb      	ldr	r3, [r7, #28]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3720      	adds	r7, #32
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a28a:	2303      	movs	r3, #3
 800a28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a28e:	2340      	movs	r3, #64	; 0x40
 800a290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a29c:	f107 0308 	add.w	r3, r7, #8
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff fdc5 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	2103      	movs	r1, #3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f99d 	bl	800a5ec <SDMMC_GetCmdResp6>
 800a2b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b088      	sub	sp, #32
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a2cc:	230d      	movs	r3, #13
 800a2ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2de:	f107 0308 	add.w	r3, r7, #8
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fda4 	bl	8009e32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ee:	210d      	movs	r1, #13
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f807 	bl	800a304 <SDMMC_GetCmdResp1>
 800a2f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3720      	adds	r7, #32
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	460b      	mov	r3, r1
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a312:	4b70      	ldr	r3, [pc, #448]	; (800a4d4 <SDMMC_GetCmdResp1+0x1d0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a70      	ldr	r2, [pc, #448]	; (800a4d8 <SDMMC_GetCmdResp1+0x1d4>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	0a5a      	lsrs	r2, r3, #9
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	1e5a      	subs	r2, r3, #1
 800a32a:	61fa      	str	r2, [r7, #28]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a334:	e0c9      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0ef      	beq.n	800a326 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1ea      	bne.n	800a326 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2204      	movs	r2, #4
 800a360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a362:	2304      	movs	r3, #4
 800a364:	e0b1      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d004      	beq.n	800a37c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a378:	2301      	movs	r3, #1
 800a37a:	e0a6      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	22c5      	movs	r2, #197	; 0xc5
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7ff fd7f 	bl	8009e86 <SDIO_GetCommandResponse>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	7afb      	ldrb	r3, [r7, #11]
 800a38e:	4293      	cmp	r3, r2
 800a390:	d001      	beq.n	800a396 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a392:	2301      	movs	r3, #1
 800a394:	e099      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a396:	2100      	movs	r1, #0
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7ff fd81 	bl	8009ea0 <SDIO_GetResponse>
 800a39e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	4b4e      	ldr	r3, [pc, #312]	; (800a4dc <SDMMC_GetCmdResp1+0x1d8>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e08d      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da02      	bge.n	800a3ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3b8:	e087      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	e080      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3d2:	2380      	movs	r3, #128	; 0x80
 800a3d4:	e079      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3e4:	e071      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3f4:	e069      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a404:	e061      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a414:	e059      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a424:	e051      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a434:	e049      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a444:	e041      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a454:	e039      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a464:	e031      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a474:	e029      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a480:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a484:	e021      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a494:	e019      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4a4:	e011      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a4b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4b4:	e009      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f003 0308 	and.w	r3, r3, #8
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a4c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4c4:	e001      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000004 	.word	0x20000004
 800a4d8:	10624dd3 	.word	0x10624dd3
 800a4dc:	fdffe008 	.word	0xfdffe008

0800a4e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4e8:	4b1f      	ldr	r3, [pc, #124]	; (800a568 <SDMMC_GetCmdResp2+0x88>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a1f      	ldr	r2, [pc, #124]	; (800a56c <SDMMC_GetCmdResp2+0x8c>)
 800a4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f2:	0a5b      	lsrs	r3, r3, #9
 800a4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f8:	fb02 f303 	mul.w	r3, r2, r3
 800a4fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1e5a      	subs	r2, r3, #1
 800a502:	60fa      	str	r2, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a50c:	e026      	b.n	800a55c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a512:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0ef      	beq.n	800a4fe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ea      	bne.n	800a4fe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2204      	movs	r2, #4
 800a538:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a53a:	2304      	movs	r3, #4
 800a53c:	e00e      	b.n	800a55c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d004      	beq.n	800a554 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a550:	2301      	movs	r3, #1
 800a552:	e003      	b.n	800a55c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	22c5      	movs	r2, #197	; 0xc5
 800a558:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	20000004 	.word	0x20000004
 800a56c:	10624dd3 	.word	0x10624dd3

0800a570 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a578:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <SDMMC_GetCmdResp3+0x74>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a1a      	ldr	r2, [pc, #104]	; (800a5e8 <SDMMC_GetCmdResp3+0x78>)
 800a57e:	fba2 2303 	umull	r2, r3, r2, r3
 800a582:	0a5b      	lsrs	r3, r3, #9
 800a584:	f241 3288 	movw	r2, #5000	; 0x1388
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1e5a      	subs	r2, r3, #1
 800a592:	60fa      	str	r2, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a59c:	e01b      	b.n	800a5d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0ef      	beq.n	800a58e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1ea      	bne.n	800a58e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ca:	2304      	movs	r3, #4
 800a5cc:	e003      	b.n	800a5d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	22c5      	movs	r2, #197	; 0xc5
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000004 	.word	0x20000004
 800a5e8:	10624dd3 	.word	0x10624dd3

0800a5ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5fa:	4b35      	ldr	r3, [pc, #212]	; (800a6d0 <SDMMC_GetCmdResp6+0xe4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a35      	ldr	r2, [pc, #212]	; (800a6d4 <SDMMC_GetCmdResp6+0xe8>)
 800a600:	fba2 2303 	umull	r2, r3, r2, r3
 800a604:	0a5b      	lsrs	r3, r3, #9
 800a606:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	61fa      	str	r2, [r7, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a61a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a61e:	e052      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a624:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0ef      	beq.n	800a610 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ea      	bne.n	800a610 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b00      	cmp	r3, #0
 800a644:	d004      	beq.n	800a650 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2204      	movs	r2, #4
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a64c:	2304      	movs	r3, #4
 800a64e:	e03a      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a662:	2301      	movs	r3, #1
 800a664:	e02f      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fc0d 	bl	8009e86 <SDIO_GetCommandResponse>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461a      	mov	r2, r3
 800a670:	7afb      	ldrb	r3, [r7, #11]
 800a672:	4293      	cmp	r3, r2
 800a674:	d001      	beq.n	800a67a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a676:	2301      	movs	r3, #1
 800a678:	e025      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	22c5      	movs	r2, #197	; 0xc5
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a680:	2100      	movs	r1, #0
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff fc0c 	bl	8009ea0 <SDIO_GetResponse>
 800a688:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	0c1b      	lsrs	r3, r3, #16
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e011      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6b0:	e009      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6c0:	e001      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000004 	.word	0x20000004
 800a6d4:	10624dd3 	.word	0x10624dd3

0800a6d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6e0:	4b22      	ldr	r3, [pc, #136]	; (800a76c <SDMMC_GetCmdResp7+0x94>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a22      	ldr	r2, [pc, #136]	; (800a770 <SDMMC_GetCmdResp7+0x98>)
 800a6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ea:	0a5b      	lsrs	r3, r3, #9
 800a6ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f0:	fb02 f303 	mul.w	r3, r2, r3
 800a6f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	1e5a      	subs	r2, r3, #1
 800a6fa:	60fa      	str	r2, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a704:	e02c      	b.n	800a760 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0ef      	beq.n	800a6f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ea      	bne.n	800a6f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2204      	movs	r2, #4
 800a730:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a732:	2304      	movs	r3, #4
 800a734:	e014      	b.n	800a760 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a748:	2301      	movs	r3, #1
 800a74a:	e009      	b.n	800a760 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2240      	movs	r2, #64	; 0x40
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a75e:	2300      	movs	r3, #0
  
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20000004 	.word	0x20000004
 800a770:	10624dd3 	.word	0x10624dd3

0800a774 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a77c:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <SDMMC_GetCmdError+0x50>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a11      	ldr	r2, [pc, #68]	; (800a7c8 <SDMMC_GetCmdError+0x54>)
 800a782:	fba2 2303 	umull	r2, r3, r2, r3
 800a786:	0a5b      	lsrs	r3, r3, #9
 800a788:	f241 3288 	movw	r2, #5000	; 0x1388
 800a78c:	fb02 f303 	mul.w	r3, r2, r3
 800a790:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1e5a      	subs	r2, r3, #1
 800a796:	60fa      	str	r2, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a79c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7a0:	e009      	b.n	800a7b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f1      	beq.n	800a792 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	22c5      	movs	r2, #197	; 0xc5
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000004 	.word	0x20000004
 800a7c8:	10624dd3 	.word	0x10624dd3

0800a7cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a7d0:	4904      	ldr	r1, [pc, #16]	; (800a7e4 <MX_FATFS_Init+0x18>)
 800a7d2:	4805      	ldr	r0, [pc, #20]	; (800a7e8 <MX_FATFS_Init+0x1c>)
 800a7d4:	f000 faaa 	bl	800ad2c <FATFS_LinkDriver>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	4b03      	ldr	r3, [pc, #12]	; (800a7ec <MX_FATFS_Init+0x20>)
 800a7de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a7e0:	bf00      	nop
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20000ad8 	.word	0x20000ad8
 800a7e8:	0801402c 	.word	0x0801402c
 800a7ec:	20000ad4 	.word	0x20000ad4

0800a7f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a7fa:	f000 f888 	bl	800a90e <BSP_SD_IsDetected>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b01      	cmp	r3, #1
 800a802:	d001      	beq.n	800a808 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e005      	b.n	800a814 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a808:	4804      	ldr	r0, [pc, #16]	; (800a81c <BSP_SD_Init+0x2c>)
 800a80a:	f7fc ff29 	bl	8007660 <HAL_SD_Init>
 800a80e:	4603      	mov	r3, r0
 800a810:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a812:	79fb      	ldrb	r3, [r7, #7]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000448 	.word	0x20000448

0800a820 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	68f9      	ldr	r1, [r7, #12]
 800a836:	4806      	ldr	r0, [pc, #24]	; (800a850 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a838:	f7fc ffc2 	bl	80077c0 <HAL_SD_ReadBlocks_DMA>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a846:	7dfb      	ldrb	r3, [r7, #23]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000448 	.word	0x20000448

0800a854 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	68f9      	ldr	r1, [r7, #12]
 800a86a:	4806      	ldr	r0, [pc, #24]	; (800a884 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a86c:	f7fd f888 	bl	8007980 <HAL_SD_WriteBlocks_DMA>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	20000448 	.word	0x20000448

0800a888 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a88c:	4805      	ldr	r0, [pc, #20]	; (800a8a4 <BSP_SD_GetCardState+0x1c>)
 800a88e:	f7fd fca9 	bl	80081e4 <HAL_SD_GetCardState>
 800a892:	4603      	mov	r3, r0
 800a894:	2b04      	cmp	r3, #4
 800a896:	bf14      	ite	ne
 800a898:	2301      	movne	r3, #1
 800a89a:	2300      	moveq	r3, #0
 800a89c:	b2db      	uxtb	r3, r3
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000448 	.word	0x20000448

0800a8a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	4803      	ldr	r0, [pc, #12]	; (800a8c0 <BSP_SD_GetCardInfo+0x18>)
 800a8b4:	f7fd fc6a 	bl	800818c <HAL_SD_GetCardInfo>
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20000448 	.word	0x20000448

0800a8c4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a8cc:	f000 f818 	bl	800a900 <BSP_SD_AbortCallback>
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a8e0:	f000 f9b4 	bl	800ac4c <BSP_SD_WriteCpltCallback>
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a8f4:	f000 f9bc 	bl	800ac70 <BSP_SD_ReadCpltCallback>
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0

}
 800a904:	bf00      	nop
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a914:	2301      	movs	r3, #1
 800a916:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a918:	f000 f80c 	bl	800a934 <BSP_PlatformIsDetected>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a922:	2300      	movs	r3, #0
 800a924:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	b2db      	uxtb	r3, r3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a93a:	2301      	movs	r3, #1
 800a93c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a93e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a942:	4806      	ldr	r0, [pc, #24]	; (800a95c <BSP_PlatformIsDetected+0x28>)
 800a944:	f7f9 fa48 	bl	8003dd8 <HAL_GPIO_ReadPin>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a94e:	2300      	movs	r3, #0
 800a950:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a952:	79fb      	ldrb	r3, [r7, #7]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	40020800 	.word	0x40020800

0800a960 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a968:	f000 faa0 	bl	800aeac <osKernelGetTickCount>
 800a96c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a96e:	e006      	b.n	800a97e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a970:	f7ff ff8a 	bl	800a888 <BSP_SD_GetCardState>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e009      	b.n	800a992 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a97e:	f000 fa95 	bl	800aeac <osKernelGetTickCount>
 800a982:	4602      	mov	r2, r0
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d8f0      	bhi.n	800a970 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a98e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <SD_CheckStatus+0x38>)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9ac:	f7ff ff6c 	bl	800a888 <BSP_SD_GetCardState>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d107      	bne.n	800a9c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a9b6:	4b07      	ldr	r3, [pc, #28]	; (800a9d4 <SD_CheckStatus+0x38>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f023 0301 	bic.w	r3, r3, #1
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <SD_CheckStatus+0x38>)
 800a9c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <SD_CheckStatus+0x38>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	b2db      	uxtb	r3, r3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	2000000d 	.word	0x2000000d

0800a9d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a9e2:	4b1c      	ldr	r3, [pc, #112]	; (800aa54 <SD_initialize+0x7c>)
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a9e8:	f000 fa18 	bl	800ae1c <osKernelGetState>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d129      	bne.n	800aa46 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a9f2:	f7ff fefd 	bl	800a7f0 <BSP_SD_Init>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d107      	bne.n	800aa0c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff ffcc 	bl	800a99c <SD_CheckStatus>
 800aa04:	4603      	mov	r3, r0
 800aa06:	461a      	mov	r2, r3
 800aa08:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <SD_initialize+0x7c>)
 800aa0a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800aa0c:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <SD_initialize+0x7c>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d017      	beq.n	800aa46 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <SD_initialize+0x80>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d107      	bne.n	800aa2e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2102      	movs	r1, #2
 800aa22:	200a      	movs	r0, #10
 800aa24:	f000 fb04 	bl	800b030 <osMessageQueueNew>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	4a0b      	ldr	r2, [pc, #44]	; (800aa58 <SD_initialize+0x80>)
 800aa2c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <SD_initialize+0x80>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <SD_initialize+0x7c>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f043 0301 	orr.w	r3, r3, #1
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <SD_initialize+0x7c>)
 800aa44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800aa46:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <SD_initialize+0x7c>)
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	b2db      	uxtb	r3, r3
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	2000000d 	.word	0x2000000d
 800aa58:	20000adc 	.word	0x20000adc

0800aa5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff ff97 	bl	800a99c <SD_CheckStatus>
 800aa6e:	4603      	mov	r3, r0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa8c:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa90:	f7ff ff66 	bl	800a960 <SD_CheckStatusWithTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	da01      	bge.n	800aa9e <SD_read+0x26>
  {
    return res;
 800aa9a:	7ffb      	ldrb	r3, [r7, #31]
 800aa9c:	e02f      	b.n	800aafe <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	68b8      	ldr	r0, [r7, #8]
 800aaa4:	f7ff febc 	bl	800a820 <BSP_SD_ReadBlocks_DMA>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800aaac:	7fbb      	ldrb	r3, [r7, #30]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d124      	bne.n	800aafc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800aab2:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <SD_read+0x90>)
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f107 0112 	add.w	r1, r7, #18
 800aaba:	f247 5330 	movw	r3, #30000	; 0x7530
 800aabe:	2200      	movs	r2, #0
 800aac0:	f000 fb8a 	bl	800b1d8 <osMessageQueueGet>
 800aac4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d117      	bne.n	800aafc <SD_read+0x84>
 800aacc:	8a7b      	ldrh	r3, [r7, #18]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d114      	bne.n	800aafc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800aad2:	f000 f9eb 	bl	800aeac <osKernelGetTickCount>
 800aad6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800aad8:	e007      	b.n	800aaea <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aada:	f7ff fed5 	bl	800a888 <BSP_SD_GetCardState>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <SD_read+0x72>
              {
                res = RES_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800aae8:	e008      	b.n	800aafc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800aaea:	f000 f9df 	bl	800aeac <osKernelGetTickCount>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d9ee      	bls.n	800aada <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800aafc:	7ffb      	ldrb	r3, [r7, #31]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3720      	adds	r7, #32
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20000adc 	.word	0x20000adc

0800ab0c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60b9      	str	r1, [r7, #8]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ab20:	f247 5030 	movw	r0, #30000	; 0x7530
 800ab24:	f7ff ff1c 	bl	800a960 <SD_CheckStatusWithTimeout>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	da01      	bge.n	800ab32 <SD_write+0x26>
  {
    return res;
 800ab2e:	7ffb      	ldrb	r3, [r7, #31]
 800ab30:	e02d      	b.n	800ab8e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f7ff fe8c 	bl	800a854 <BSP_SD_WriteBlocks_DMA>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d124      	bne.n	800ab8c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ab42:	4b15      	ldr	r3, [pc, #84]	; (800ab98 <SD_write+0x8c>)
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f107 0112 	add.w	r1, r7, #18
 800ab4a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f000 fb42 	bl	800b1d8 <osMessageQueueGet>
 800ab54:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d117      	bne.n	800ab8c <SD_write+0x80>
 800ab5c:	8a7b      	ldrh	r3, [r7, #18]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d114      	bne.n	800ab8c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ab62:	f000 f9a3 	bl	800aeac <osKernelGetTickCount>
 800ab66:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ab68:	e007      	b.n	800ab7a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab6a:	f7ff fe8d 	bl	800a888 <BSP_SD_GetCardState>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <SD_write+0x6e>
          {
            res = RES_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	77fb      	strb	r3, [r7, #31]
            break;
 800ab78:	e008      	b.n	800ab8c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ab7a:	f000 f997 	bl	800aeac <osKernelGetTickCount>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d9ee      	bls.n	800ab6a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800ab8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3720      	adds	r7, #32
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000adc 	.word	0x20000adc

0800ab9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08c      	sub	sp, #48	; 0x30
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	603a      	str	r2, [r7, #0]
 800aba6:	71fb      	strb	r3, [r7, #7]
 800aba8:	460b      	mov	r3, r1
 800abaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abb2:	4b25      	ldr	r3, [pc, #148]	; (800ac48 <SD_ioctl+0xac>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <SD_ioctl+0x28>
 800abc0:	2303      	movs	r3, #3
 800abc2:	e03c      	b.n	800ac3e <SD_ioctl+0xa2>

  switch (cmd)
 800abc4:	79bb      	ldrb	r3, [r7, #6]
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d834      	bhi.n	800ac34 <SD_ioctl+0x98>
 800abca:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <SD_ioctl+0x34>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800abe1 	.word	0x0800abe1
 800abd4:	0800abe9 	.word	0x0800abe9
 800abd8:	0800ac01 	.word	0x0800ac01
 800abdc:	0800ac1b 	.word	0x0800ac1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800abe6:	e028      	b.n	800ac3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800abe8:	f107 030c 	add.w	r3, r7, #12
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fe5b 	bl	800a8a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800abf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800abfe:	e01c      	b.n	800ac3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff fe4f 	bl	800a8a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac18:	e00f      	b.n	800ac3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac1a:	f107 030c 	add.w	r3, r7, #12
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fe42 	bl	800a8a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	0a5a      	lsrs	r2, r3, #9
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac32:	e002      	b.n	800ac3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ac34:	2304      	movs	r3, #4
 800ac36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ac3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3730      	adds	r7, #48	; 0x30
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	2000000d 	.word	0x2000000d

0800ac4c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800ac52:	2302      	movs	r3, #2
 800ac54:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ac56:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <BSP_SD_WriteCpltCallback+0x20>)
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	1db9      	adds	r1, r7, #6
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f000 fa5a 	bl	800b118 <osMessageQueuePut>
#endif
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000adc 	.word	0x20000adc

0800ac70 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800ac76:	2301      	movs	r3, #1
 800ac78:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ac7a:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <BSP_SD_ReadCpltCallback+0x20>)
 800ac7c:	6818      	ldr	r0, [r3, #0]
 800ac7e:	1db9      	adds	r1, r7, #6
 800ac80:	2300      	movs	r3, #0
 800ac82:	2200      	movs	r2, #0
 800ac84:	f000 fa48 	bl	800b118 <osMessageQueuePut>
#endif
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000adc 	.word	0x20000adc

0800ac94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aca2:	2301      	movs	r3, #1
 800aca4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acaa:	4b1f      	ldr	r3, [pc, #124]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acac:	7a5b      	ldrb	r3, [r3, #9]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d131      	bne.n	800ad18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800acb4:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acb6:	7a5b      	ldrb	r3, [r3, #9]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acbe:	2100      	movs	r1, #0
 800acc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800acc2:	4b19      	ldr	r3, [pc, #100]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acc4:	7a5b      	ldrb	r3, [r3, #9]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	4a17      	ldr	r2, [pc, #92]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800acd2:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acd4:	7a5b      	ldrb	r3, [r3, #9]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acdc:	4413      	add	r3, r2
 800acde:	79fa      	ldrb	r2, [r7, #7]
 800ace0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ace2:	4b11      	ldr	r3, [pc, #68]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800ace4:	7a5b      	ldrb	r3, [r3, #9]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	b2d1      	uxtb	r1, r2
 800acec:	4a0e      	ldr	r2, [pc, #56]	; (800ad28 <FATFS_LinkDriverEx+0x94>)
 800acee:	7251      	strb	r1, [r2, #9]
 800acf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
 800acf4:	3330      	adds	r3, #48	; 0x30
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	3301      	adds	r3, #1
 800ad00:	223a      	movs	r2, #58	; 0x3a
 800ad02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	3302      	adds	r3, #2
 800ad08:	222f      	movs	r2, #47	; 0x2f
 800ad0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	3303      	adds	r3, #3
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	20000ae0 	.word	0x20000ae0

0800ad2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad36:	2200      	movs	r2, #0
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ffaa 	bl	800ac94 <FATFS_LinkDriverEx>
 800ad40:	4603      	mov	r3, r0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <__NVIC_SetPriority>:
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	6039      	str	r1, [r7, #0]
 800ad56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	db0a      	blt.n	800ad76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	490c      	ldr	r1, [pc, #48]	; (800ad98 <__NVIC_SetPriority+0x4c>)
 800ad66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad6a:	0112      	lsls	r2, r2, #4
 800ad6c:	b2d2      	uxtb	r2, r2
 800ad6e:	440b      	add	r3, r1
 800ad70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad74:	e00a      	b.n	800ad8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4908      	ldr	r1, [pc, #32]	; (800ad9c <__NVIC_SetPriority+0x50>)
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	f003 030f 	and.w	r3, r3, #15
 800ad82:	3b04      	subs	r3, #4
 800ad84:	0112      	lsls	r2, r2, #4
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	440b      	add	r3, r1
 800ad8a:	761a      	strb	r2, [r3, #24]
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	e000e100 	.word	0xe000e100
 800ad9c:	e000ed00 	.word	0xe000ed00

0800ada0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <SysTick_Handler+0x1c>)
 800ada6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ada8:	f001 ff5c 	bl	800cc64 <xTaskGetSchedulerState>
 800adac:	4603      	mov	r3, r0
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d001      	beq.n	800adb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800adb2:	f002 fd41 	bl	800d838 <xPortSysTickHandler>
  }
}
 800adb6:	bf00      	nop
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	e000e010 	.word	0xe000e010

0800adc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800adc4:	2100      	movs	r1, #0
 800adc6:	f06f 0004 	mvn.w	r0, #4
 800adca:	f7ff ffbf 	bl	800ad4c <__NVIC_SetPriority>
#endif
}
 800adce:	bf00      	nop
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adda:	f3ef 8305 	mrs	r3, IPSR
 800adde:	603b      	str	r3, [r7, #0]
  return(result);
 800ade0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d003      	beq.n	800adee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ade6:	f06f 0305 	mvn.w	r3, #5
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	e00c      	b.n	800ae08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800adee:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <osKernelInitialize+0x44>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d105      	bne.n	800ae02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800adf6:	4b08      	ldr	r3, [pc, #32]	; (800ae18 <osKernelInitialize+0x44>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	607b      	str	r3, [r7, #4]
 800ae00:	e002      	b.n	800ae08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae02:	f04f 33ff 	mov.w	r3, #4294967295
 800ae06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae08:	687b      	ldr	r3, [r7, #4]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20000aec 	.word	0x20000aec

0800ae1c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ae22:	f001 ff1f 	bl	800cc64 <xTaskGetSchedulerState>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <osKernelGetState+0x1a>
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d105      	bne.n	800ae3c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ae30:	2302      	movs	r3, #2
 800ae32:	607b      	str	r3, [r7, #4]
      break;
 800ae34:	e00c      	b.n	800ae50 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ae36:	2303      	movs	r3, #3
 800ae38:	607b      	str	r3, [r7, #4]
      break;
 800ae3a:	e009      	b.n	800ae50 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ae3c:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <osKernelGetState+0x40>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d102      	bne.n	800ae4a <osKernelGetState+0x2e>
        state = osKernelReady;
 800ae44:	2301      	movs	r3, #1
 800ae46:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ae48:	e001      	b.n	800ae4e <osKernelGetState+0x32>
        state = osKernelInactive;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	607b      	str	r3, [r7, #4]
      break;
 800ae4e:	bf00      	nop
  }

  return (state);
 800ae50:	687b      	ldr	r3, [r7, #4]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000aec 	.word	0x20000aec

0800ae60 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae66:	f3ef 8305 	mrs	r3, IPSR
 800ae6a:	603b      	str	r3, [r7, #0]
  return(result);
 800ae6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae72:	f06f 0305 	mvn.w	r3, #5
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	e010      	b.n	800ae9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae7a:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <osKernelStart+0x48>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d109      	bne.n	800ae96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae82:	f7ff ff9d 	bl	800adc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae86:	4b08      	ldr	r3, [pc, #32]	; (800aea8 <osKernelStart+0x48>)
 800ae88:	2202      	movs	r2, #2
 800ae8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae8c:	f001 fa7c 	bl	800c388 <vTaskStartScheduler>
      stat = osOK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	607b      	str	r3, [r7, #4]
 800ae94:	e002      	b.n	800ae9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae96:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae9c:	687b      	ldr	r3, [r7, #4]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000aec 	.word	0x20000aec

0800aeac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeb2:	f3ef 8305 	mrs	r3, IPSR
 800aeb6:	603b      	str	r3, [r7, #0]
  return(result);
 800aeb8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800aebe:	f001 fb8f 	bl	800c5e0 <xTaskGetTickCountFromISR>
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	e002      	b.n	800aecc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800aec6:	f001 fb7b 	bl	800c5c0 <xTaskGetTickCount>
 800aeca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800aecc:	687b      	ldr	r3, [r7, #4]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08e      	sub	sp, #56	; 0x38
 800aeda:	af04      	add	r7, sp, #16
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aee2:	2300      	movs	r3, #0
 800aee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aee6:	f3ef 8305 	mrs	r3, IPSR
 800aeea:	617b      	str	r3, [r7, #20]
  return(result);
 800aeec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d17e      	bne.n	800aff0 <osThreadNew+0x11a>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d07b      	beq.n	800aff0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aef8:	2380      	movs	r3, #128	; 0x80
 800aefa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aefc:	2318      	movs	r3, #24
 800aefe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af00:	2300      	movs	r3, #0
 800af02:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af04:	f04f 33ff 	mov.w	r3, #4294967295
 800af08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d045      	beq.n	800af9c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <osThreadNew+0x48>
        name = attr->name;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d008      	beq.n	800af44 <osThreadNew+0x6e>
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b38      	cmp	r3, #56	; 0x38
 800af36:	d805      	bhi.n	800af44 <osThreadNew+0x6e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <osThreadNew+0x72>
        return (NULL);
 800af44:	2300      	movs	r3, #0
 800af46:	e054      	b.n	800aff2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	089b      	lsrs	r3, r3, #2
 800af56:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00e      	beq.n	800af7e <osThreadNew+0xa8>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	2ba7      	cmp	r3, #167	; 0xa7
 800af66:	d90a      	bls.n	800af7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d006      	beq.n	800af7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <osThreadNew+0xa8>
        mem = 1;
 800af78:	2301      	movs	r3, #1
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	e010      	b.n	800afa0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10c      	bne.n	800afa0 <osThreadNew+0xca>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d108      	bne.n	800afa0 <osThreadNew+0xca>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d104      	bne.n	800afa0 <osThreadNew+0xca>
          mem = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	61bb      	str	r3, [r7, #24]
 800af9a:	e001      	b.n	800afa0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d110      	bne.n	800afc8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afae:	9202      	str	r2, [sp, #8]
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6a3a      	ldr	r2, [r7, #32]
 800afba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 fff7 	bl	800bfb0 <xTaskCreateStatic>
 800afc2:	4603      	mov	r3, r0
 800afc4:	613b      	str	r3, [r7, #16]
 800afc6:	e013      	b.n	800aff0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d110      	bne.n	800aff0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	f107 0310 	add.w	r3, r7, #16
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f001 f842 	bl	800c06a <xTaskCreate>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d001      	beq.n	800aff0 <osThreadNew+0x11a>
            hTask = NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aff0:	693b      	ldr	r3, [r7, #16]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3728      	adds	r7, #40	; 0x28
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b002:	f3ef 8305 	mrs	r3, IPSR
 800b006:	60bb      	str	r3, [r7, #8]
  return(result);
 800b008:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <osDelay+0x1c>
    stat = osErrorISR;
 800b00e:	f06f 0305 	mvn.w	r3, #5
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	e007      	b.n	800b026 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 f97d 	bl	800c320 <vTaskDelay>
    }
  }

  return (stat);
 800b026:	68fb      	ldr	r3, [r7, #12]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b030:	b580      	push	{r7, lr}
 800b032:	b08a      	sub	sp, #40	; 0x28
 800b034:	af02      	add	r7, sp, #8
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b040:	f3ef 8305 	mrs	r3, IPSR
 800b044:	613b      	str	r3, [r7, #16]
  return(result);
 800b046:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d15f      	bne.n	800b10c <osMessageQueueNew+0xdc>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d05c      	beq.n	800b10c <osMessageQueueNew+0xdc>
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d059      	beq.n	800b10c <osMessageQueueNew+0xdc>
    mem = -1;
 800b058:	f04f 33ff 	mov.w	r3, #4294967295
 800b05c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d029      	beq.n	800b0b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d012      	beq.n	800b092 <osMessageQueueNew+0x62>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b4f      	cmp	r3, #79	; 0x4f
 800b072:	d90e      	bls.n	800b092 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	695a      	ldr	r2, [r3, #20]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	429a      	cmp	r2, r3
 800b08a:	d302      	bcc.n	800b092 <osMessageQueueNew+0x62>
        mem = 1;
 800b08c:	2301      	movs	r3, #1
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	e014      	b.n	800b0bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d110      	bne.n	800b0bc <osMessageQueueNew+0x8c>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10c      	bne.n	800b0bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d108      	bne.n	800b0bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d104      	bne.n	800b0bc <osMessageQueueNew+0x8c>
          mem = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	e001      	b.n	800b0bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d10b      	bne.n	800b0da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691a      	ldr	r2, [r3, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	9100      	str	r1, [sp, #0]
 800b0ce:	68b9      	ldr	r1, [r7, #8]
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 fa2f 	bl	800b534 <xQueueGenericCreateStatic>
 800b0d6:	61f8      	str	r0, [r7, #28]
 800b0d8:	e008      	b.n	800b0ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d105      	bne.n	800b0ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fa9d 	bl	800b624 <xQueueGenericCreate>
 800b0ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00c      	beq.n	800b10c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e001      	b.n	800b104 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b104:	6979      	ldr	r1, [r7, #20]
 800b106:	69f8      	ldr	r0, [r7, #28]
 800b108:	f000 fef4 	bl	800bef4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b10c:	69fb      	ldr	r3, [r7, #28]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3720      	adds	r7, #32
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	4613      	mov	r3, r2
 800b126:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b130:	f3ef 8305 	mrs	r3, IPSR
 800b134:	617b      	str	r3, [r7, #20]
  return(result);
 800b136:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d028      	beq.n	800b18e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <osMessageQueuePut+0x36>
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <osMessageQueuePut+0x36>
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b14e:	f06f 0303 	mvn.w	r3, #3
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	e038      	b.n	800b1c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b156:	2300      	movs	r3, #0
 800b158:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b15a:	f107 0210 	add.w	r2, r7, #16
 800b15e:	2300      	movs	r3, #0
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	69b8      	ldr	r0, [r7, #24]
 800b164:	f000 fbba 	bl	800b8dc <xQueueGenericSendFromISR>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d003      	beq.n	800b176 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b16e:	f06f 0302 	mvn.w	r3, #2
 800b172:	61fb      	str	r3, [r7, #28]
 800b174:	e028      	b.n	800b1c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d025      	beq.n	800b1c8 <osMessageQueuePut+0xb0>
 800b17c:	4b15      	ldr	r3, [pc, #84]	; (800b1d4 <osMessageQueuePut+0xbc>)
 800b17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	e01c      	b.n	800b1c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <osMessageQueuePut+0x82>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b19a:	f06f 0303 	mvn.w	r3, #3
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e012      	b.n	800b1c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	69b8      	ldr	r0, [r7, #24]
 800b1aa:	f000 fa99 	bl	800b6e0 <xQueueGenericSend>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d009      	beq.n	800b1c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b1ba:	f06f 0301 	mvn.w	r3, #1
 800b1be:	61fb      	str	r3, [r7, #28]
 800b1c0:	e002      	b.n	800b1c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b1c2:	f06f 0302 	mvn.w	r3, #2
 800b1c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1ee:	f3ef 8305 	mrs	r3, IPSR
 800b1f2:	617b      	str	r3, [r7, #20]
  return(result);
 800b1f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d028      	beq.n	800b24c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d005      	beq.n	800b20c <osMessageQueueGet+0x34>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <osMessageQueueGet+0x34>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b20c:	f06f 0303 	mvn.w	r3, #3
 800b210:	61fb      	str	r3, [r7, #28]
 800b212:	e037      	b.n	800b284 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b214:	2300      	movs	r3, #0
 800b216:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b218:	f107 0310 	add.w	r3, r7, #16
 800b21c:	461a      	mov	r2, r3
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	69b8      	ldr	r0, [r7, #24]
 800b222:	f000 fcd7 	bl	800bbd4 <xQueueReceiveFromISR>
 800b226:	4603      	mov	r3, r0
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d003      	beq.n	800b234 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b22c:	f06f 0302 	mvn.w	r3, #2
 800b230:	61fb      	str	r3, [r7, #28]
 800b232:	e027      	b.n	800b284 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d024      	beq.n	800b284 <osMessageQueueGet+0xac>
 800b23a:	4b15      	ldr	r3, [pc, #84]	; (800b290 <osMessageQueueGet+0xb8>)
 800b23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	e01b      	b.n	800b284 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <osMessageQueueGet+0x80>
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d103      	bne.n	800b260 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b258:	f06f 0303 	mvn.w	r3, #3
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	e011      	b.n	800b284 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	69b8      	ldr	r0, [r7, #24]
 800b266:	f000 fbd5 	bl	800ba14 <xQueueReceive>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d009      	beq.n	800b284 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b276:	f06f 0301 	mvn.w	r3, #1
 800b27a:	61fb      	str	r3, [r7, #28]
 800b27c:	e002      	b.n	800b284 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b27e:	f06f 0302 	mvn.w	r3, #2
 800b282:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b284:	69fb      	ldr	r3, [r7, #28]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3720      	adds	r7, #32
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4a07      	ldr	r2, [pc, #28]	; (800b2c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b2a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	4a06      	ldr	r2, [pc, #24]	; (800b2c4 <vApplicationGetIdleTaskMemory+0x30>)
 800b2aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2280      	movs	r2, #128	; 0x80
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20000af0 	.word	0x20000af0
 800b2c4:	20000b98 	.word	0x20000b98

0800b2c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	4a07      	ldr	r2, [pc, #28]	; (800b2f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4a06      	ldr	r2, [pc, #24]	; (800b2f8 <vApplicationGetTimerTaskMemory+0x30>)
 800b2de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2e6:	601a      	str	r2, [r3, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	20000d98 	.word	0x20000d98
 800b2f8:	20000e40 	.word	0x20000e40

0800b2fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f103 0208 	add.w	r2, r3, #8
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f04f 32ff 	mov.w	r2, #4294967295
 800b314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f103 0208 	add.w	r2, r3, #8
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f103 0208 	add.w	r2, r3, #8
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b34a:	bf00      	nop
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b356:	b480      	push	{r7}
 800b358:	b085      	sub	sp, #20
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	689a      	ldr	r2, [r3, #8]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	1c5a      	adds	r2, r3, #1
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
}
 800b392:	bf00      	nop
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d103      	bne.n	800b3be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	e00c      	b.n	800b3d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e002      	b.n	800b3cc <vListInsert+0x2e>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d2f6      	bcs.n	800b3c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
}
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	6892      	ldr	r2, [r2, #8]
 800b426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6852      	ldr	r2, [r2, #4]
 800b430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d103      	bne.n	800b444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	1e5a      	subs	r2, r3, #1
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b48e:	f002 f941 	bl	800d714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49a:	68f9      	ldr	r1, [r7, #12]
 800b49c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b49e:	fb01 f303 	mul.w	r3, r1, r3
 800b4a2:	441a      	add	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	68f9      	ldr	r1, [r7, #12]
 800b4c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4c4:	fb01 f303 	mul.w	r3, r1, r3
 800b4c8:	441a      	add	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	22ff      	movs	r2, #255	; 0xff
 800b4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	22ff      	movs	r2, #255	; 0xff
 800b4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d114      	bne.n	800b50e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d01a      	beq.n	800b522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3310      	adds	r3, #16
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 f9f5 	bl	800c8e0 <xTaskRemoveFromEventList>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d012      	beq.n	800b522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4fc:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <xQueueGenericReset+0xcc>)
 800b4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	e009      	b.n	800b522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3310      	adds	r3, #16
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff fef2 	bl	800b2fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3324      	adds	r3, #36	; 0x24
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff feed 	bl	800b2fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b522:	f002 f927 	bl	800d774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b526:	2301      	movs	r3, #1
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	e000ed04 	.word	0xe000ed04

0800b534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08e      	sub	sp, #56	; 0x38
 800b538:	af02      	add	r7, sp, #8
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <xQueueGenericCreateStatic+0x52>
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <xQueueGenericCreateStatic+0x56>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <xQueueGenericCreateStatic+0x58>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	623b      	str	r3, [r7, #32]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d102      	bne.n	800b5b2 <xQueueGenericCreateStatic+0x7e>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <xQueueGenericCreateStatic+0x82>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e000      	b.n	800b5b8 <xQueueGenericCreateStatic+0x84>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10a      	bne.n	800b5d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	61fb      	str	r3, [r7, #28]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5d2:	2350      	movs	r3, #80	; 0x50
 800b5d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2b50      	cmp	r3, #80	; 0x50
 800b5da:	d00a      	beq.n	800b5f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	61bb      	str	r3, [r7, #24]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00d      	beq.n	800b61a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	4613      	mov	r3, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 f83f 	bl	800b698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3730      	adds	r7, #48	; 0x30
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	; 0x28
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	613b      	str	r3, [r7, #16]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	fb02 f303 	mul.w	r3, r2, r3
 800b656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	3350      	adds	r3, #80	; 0x50
 800b65c:	4618      	mov	r0, r3
 800b65e:	f002 f97b 	bl	800d958 <pvPortMalloc>
 800b662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d011      	beq.n	800b68e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	3350      	adds	r3, #80	; 0x50
 800b672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b67c:	79fa      	ldrb	r2, [r7, #7]
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	4613      	mov	r3, r2
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 f805 	bl	800b698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b68e:	69bb      	ldr	r3, [r7, #24]
	}
 800b690:	4618      	mov	r0, r3
 800b692:	3720      	adds	r7, #32
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d103      	bne.n	800b6b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	69ba      	ldr	r2, [r7, #24]
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	e002      	b.n	800b6ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	69b8      	ldr	r0, [r7, #24]
 800b6ca:	f7ff fecb 	bl	800b464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	78fa      	ldrb	r2, [r7, #3]
 800b6d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b08e      	sub	sp, #56	; 0x38
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <xQueueGenericSend+0x32>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d103      	bne.n	800b720 <xQueueGenericSend+0x40>
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <xQueueGenericSend+0x44>
 800b720:	2301      	movs	r3, #1
 800b722:	e000      	b.n	800b726 <xQueueGenericSend+0x46>
 800b724:	2300      	movs	r3, #0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <xQueueGenericSend+0x60>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b02      	cmp	r3, #2
 800b744:	d103      	bne.n	800b74e <xQueueGenericSend+0x6e>
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d101      	bne.n	800b752 <xQueueGenericSend+0x72>
 800b74e:	2301      	movs	r3, #1
 800b750:	e000      	b.n	800b754 <xQueueGenericSend+0x74>
 800b752:	2300      	movs	r3, #0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueGenericSend+0x8e>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	623b      	str	r3, [r7, #32]
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b76e:	f001 fa79 	bl	800cc64 <xTaskGetSchedulerState>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <xQueueGenericSend+0x9e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <xQueueGenericSend+0xa2>
 800b77e:	2301      	movs	r3, #1
 800b780:	e000      	b.n	800b784 <xQueueGenericSend+0xa4>
 800b782:	2300      	movs	r3, #0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10a      	bne.n	800b79e <xQueueGenericSend+0xbe>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	61fb      	str	r3, [r7, #28]
}
 800b79a:	bf00      	nop
 800b79c:	e7fe      	b.n	800b79c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b79e:	f001 ffb9 	bl	800d714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d302      	bcc.n	800b7b4 <xQueueGenericSend+0xd4>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d129      	bne.n	800b808 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7ba:	f000 fa8b 	bl	800bcd4 <prvCopyDataToQueue>
 800b7be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d010      	beq.n	800b7ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	3324      	adds	r3, #36	; 0x24
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f001 f887 	bl	800c8e0 <xTaskRemoveFromEventList>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d013      	beq.n	800b800 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b7d8:	4b3f      	ldr	r3, [pc, #252]	; (800b8d8 <xQueueGenericSend+0x1f8>)
 800b7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	e00a      	b.n	800b800 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7f0:	4b39      	ldr	r3, [pc, #228]	; (800b8d8 <xQueueGenericSend+0x1f8>)
 800b7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b800:	f001 ffb8 	bl	800d774 <vPortExitCritical>
				return pdPASS;
 800b804:	2301      	movs	r3, #1
 800b806:	e063      	b.n	800b8d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b80e:	f001 ffb1 	bl	800d774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b812:	2300      	movs	r3, #0
 800b814:	e05c      	b.n	800b8d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	4618      	mov	r0, r3
 800b822:	f001 f8c1 	bl	800c9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b826:	2301      	movs	r3, #1
 800b828:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b82a:	f001 ffa3 	bl	800d774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b82e:	f000 fe1b 	bl	800c468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b832:	f001 ff6f 	bl	800d714 <vPortEnterCritical>
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b83c:	b25b      	sxtb	r3, r3
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b842:	d103      	bne.n	800b84c <xQueueGenericSend+0x16c>
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b852:	b25b      	sxtb	r3, r3
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d103      	bne.n	800b862 <xQueueGenericSend+0x182>
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b862:	f001 ff87 	bl	800d774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b866:	1d3a      	adds	r2, r7, #4
 800b868:	f107 0314 	add.w	r3, r7, #20
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 f8b0 	bl	800c9d4 <xTaskCheckForTimeOut>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d124      	bne.n	800b8c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b87a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b87c:	f000 fb22 	bl	800bec4 <prvIsQueueFull>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d018      	beq.n	800b8b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	3310      	adds	r3, #16
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 ffd6 	bl	800c840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b896:	f000 faad 	bl	800bdf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b89a:	f000 fdf3 	bl	800c484 <xTaskResumeAll>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f47f af7c 	bne.w	800b79e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b8a6:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <xQueueGenericSend+0x1f8>)
 800b8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	e772      	b.n	800b79e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b8b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ba:	f000 fa9b 	bl	800bdf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8be:	f000 fde1 	bl	800c484 <xTaskResumeAll>
 800b8c2:	e76c      	b.n	800b79e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8c6:	f000 fa95 	bl	800bdf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8ca:	f000 fddb 	bl	800c484 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b8ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3738      	adds	r7, #56	; 0x38
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	e000ed04 	.word	0xe000ed04

0800b8dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b090      	sub	sp, #64	; 0x40
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <xQueueGenericSendFromISR+0x3c>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <xQueueGenericSendFromISR+0x40>
 800b918:	2301      	movs	r3, #1
 800b91a:	e000      	b.n	800b91e <xQueueGenericSendFromISR+0x42>
 800b91c:	2300      	movs	r3, #0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10a      	bne.n	800b938 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d103      	bne.n	800b946 <xQueueGenericSendFromISR+0x6a>
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <xQueueGenericSendFromISR+0x6e>
 800b946:	2301      	movs	r3, #1
 800b948:	e000      	b.n	800b94c <xQueueGenericSendFromISR+0x70>
 800b94a:	2300      	movs	r3, #0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	623b      	str	r3, [r7, #32]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b966:	f001 ffb7 	bl	800d8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b96a:	f3ef 8211 	mrs	r2, BASEPRI
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	61fa      	str	r2, [r7, #28]
 800b980:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b982:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b984:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98e:	429a      	cmp	r2, r3
 800b990:	d302      	bcc.n	800b998 <xQueueGenericSendFromISR+0xbc>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d12f      	bne.n	800b9f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9ae:	f000 f991 	bl	800bcd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b9b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ba:	d112      	bne.n	800b9e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d016      	beq.n	800b9f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	3324      	adds	r3, #36	; 0x24
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 ff89 	bl	800c8e0 <xTaskRemoveFromEventList>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00e      	beq.n	800b9f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00b      	beq.n	800b9f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	e007      	b.n	800b9f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	b25a      	sxtb	r2, r3
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b9f6:	e001      	b.n	800b9fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3740      	adds	r7, #64	; 0x40
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b08c      	sub	sp, #48	; 0x30
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba20:	2300      	movs	r3, #0
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <xQueueReceive+0x30>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	623b      	str	r3, [r7, #32]
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d103      	bne.n	800ba52 <xQueueReceive+0x3e>
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <xQueueReceive+0x42>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <xQueueReceive+0x44>
 800ba56:	2300      	movs	r3, #0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <xQueueReceive+0x5e>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	61fb      	str	r3, [r7, #28]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba72:	f001 f8f7 	bl	800cc64 <xTaskGetSchedulerState>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <xQueueReceive+0x6e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <xQueueReceive+0x72>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <xQueueReceive+0x74>
 800ba86:	2300      	movs	r3, #0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10a      	bne.n	800baa2 <xQueueReceive+0x8e>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	61bb      	str	r3, [r7, #24]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baa2:	f001 fe37 	bl	800d714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d01f      	beq.n	800baf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bab6:	f000 f977 	bl	800bda8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	1e5a      	subs	r2, r3, #1
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00f      	beq.n	800baea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	3310      	adds	r3, #16
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 ff06 	bl	800c8e0 <xTaskRemoveFromEventList>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d007      	beq.n	800baea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bada:	4b3d      	ldr	r3, [pc, #244]	; (800bbd0 <xQueueReceive+0x1bc>)
 800badc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae0:	601a      	str	r2, [r3, #0]
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800baea:	f001 fe43 	bl	800d774 <vPortExitCritical>
				return pdPASS;
 800baee:	2301      	movs	r3, #1
 800baf0:	e069      	b.n	800bbc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d103      	bne.n	800bb00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800baf8:	f001 fe3c 	bl	800d774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e062      	b.n	800bbc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d106      	bne.n	800bb14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb06:	f107 0310 	add.w	r3, r7, #16
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 ff4c 	bl	800c9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb10:	2301      	movs	r3, #1
 800bb12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb14:	f001 fe2e 	bl	800d774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb18:	f000 fca6 	bl	800c468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb1c:	f001 fdfa 	bl	800d714 <vPortEnterCritical>
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb26:	b25b      	sxtb	r3, r3
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2c:	d103      	bne.n	800bb36 <xQueueReceive+0x122>
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb3c:	b25b      	sxtb	r3, r3
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb42:	d103      	bne.n	800bb4c <xQueueReceive+0x138>
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb4c:	f001 fe12 	bl	800d774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb50:	1d3a      	adds	r2, r7, #4
 800bb52:	f107 0310 	add.w	r3, r7, #16
 800bb56:	4611      	mov	r1, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 ff3b 	bl	800c9d4 <xTaskCheckForTimeOut>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d123      	bne.n	800bbac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb66:	f000 f997 	bl	800be98 <prvIsQueueEmpty>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d017      	beq.n	800bba0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	3324      	adds	r3, #36	; 0x24
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	4611      	mov	r1, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fe61 	bl	800c840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb80:	f000 f938 	bl	800bdf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb84:	f000 fc7e 	bl	800c484 <xTaskResumeAll>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d189      	bne.n	800baa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bb8e:	4b10      	ldr	r3, [pc, #64]	; (800bbd0 <xQueueReceive+0x1bc>)
 800bb90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	e780      	b.n	800baa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bba2:	f000 f927 	bl	800bdf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bba6:	f000 fc6d 	bl	800c484 <xTaskResumeAll>
 800bbaa:	e77a      	b.n	800baa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbae:	f000 f921 	bl	800bdf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbb2:	f000 fc67 	bl	800c484 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb8:	f000 f96e 	bl	800be98 <prvIsQueueEmpty>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f43f af6f 	beq.w	800baa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bbc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3730      	adds	r7, #48	; 0x30
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08e      	sub	sp, #56	; 0x38
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10a      	bne.n	800bc00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	623b      	str	r3, [r7, #32]
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d103      	bne.n	800bc0e <xQueueReceiveFromISR+0x3a>
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <xQueueReceiveFromISR+0x3e>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e000      	b.n	800bc14 <xQueueReceiveFromISR+0x40>
 800bc12:	2300      	movs	r3, #0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	61fb      	str	r3, [r7, #28]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc2e:	f001 fe53 	bl	800d8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800bc32:	f3ef 8211 	mrs	r2, BASEPRI
 800bc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	61ba      	str	r2, [r7, #24]
 800bc48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bc4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d02f      	beq.n	800bcba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc64:	68b9      	ldr	r1, [r7, #8]
 800bc66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc68:	f000 f89e 	bl	800bda8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	1e5a      	subs	r2, r3, #1
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bc74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7c:	d112      	bne.n	800bca4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d016      	beq.n	800bcb4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	3310      	adds	r3, #16
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 fe28 	bl	800c8e0 <xTaskRemoveFromEventList>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00e      	beq.n	800bcb4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00b      	beq.n	800bcb4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	e007      	b.n	800bcb4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca8:	3301      	adds	r3, #1
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	b25a      	sxtb	r2, r3
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb8:	e001      	b.n	800bcbe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	f383 8811 	msr	BASEPRI, r3
}
 800bcc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3738      	adds	r7, #56	; 0x38
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bce0:	2300      	movs	r3, #0
 800bce2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10d      	bne.n	800bd0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d14d      	bne.n	800bd96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 ffce 	bl	800cca0 <xTaskPriorityDisinherit>
 800bd04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	609a      	str	r2, [r3, #8]
 800bd0c:	e043      	b.n	800bd96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d119      	bne.n	800bd48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6858      	ldr	r0, [r3, #4]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	f003 f962 	bl	800efe8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2c:	441a      	add	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d32b      	bcc.n	800bd96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	605a      	str	r2, [r3, #4]
 800bd46:	e026      	b.n	800bd96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68d8      	ldr	r0, [r3, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd50:	461a      	mov	r2, r3
 800bd52:	68b9      	ldr	r1, [r7, #8]
 800bd54:	f003 f948 	bl	800efe8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd60:	425b      	negs	r3, r3
 800bd62:	441a      	add	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d207      	bcs.n	800bd84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	689a      	ldr	r2, [r3, #8]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7c:	425b      	negs	r3, r3
 800bd7e:	441a      	add	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d105      	bne.n	800bd96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd9e:	697b      	ldr	r3, [r7, #20]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d018      	beq.n	800bdec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	441a      	add	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68da      	ldr	r2, [r3, #12]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d303      	bcc.n	800bddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68d9      	ldr	r1, [r3, #12]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde4:	461a      	mov	r2, r3
 800bde6:	6838      	ldr	r0, [r7, #0]
 800bde8:	f003 f8fe 	bl	800efe8 <memcpy>
	}
}
 800bdec:	bf00      	nop
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bdfc:	f001 fc8a 	bl	800d714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be08:	e011      	b.n	800be2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d012      	beq.n	800be38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3324      	adds	r3, #36	; 0x24
 800be16:	4618      	mov	r0, r3
 800be18:	f000 fd62 	bl	800c8e0 <xTaskRemoveFromEventList>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be22:	f000 fe39 	bl	800ca98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	3b01      	subs	r3, #1
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be32:	2b00      	cmp	r3, #0
 800be34:	dce9      	bgt.n	800be0a <prvUnlockQueue+0x16>
 800be36:	e000      	b.n	800be3a <prvUnlockQueue+0x46>
					break;
 800be38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	22ff      	movs	r2, #255	; 0xff
 800be3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be42:	f001 fc97 	bl	800d774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be46:	f001 fc65 	bl	800d714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be52:	e011      	b.n	800be78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d012      	beq.n	800be82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3310      	adds	r3, #16
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fd3d 	bl	800c8e0 <xTaskRemoveFromEventList>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be6c:	f000 fe14 	bl	800ca98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	3b01      	subs	r3, #1
 800be74:	b2db      	uxtb	r3, r3
 800be76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	dce9      	bgt.n	800be54 <prvUnlockQueue+0x60>
 800be80:	e000      	b.n	800be84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	22ff      	movs	r2, #255	; 0xff
 800be88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800be8c:	f001 fc72 	bl	800d774 <vPortExitCritical>
}
 800be90:	bf00      	nop
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bea0:	f001 fc38 	bl	800d714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800beac:	2301      	movs	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
 800beb0:	e001      	b.n	800beb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800beb6:	f001 fc5d 	bl	800d774 <vPortExitCritical>

	return xReturn;
 800beba:	68fb      	ldr	r3, [r7, #12]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800becc:	f001 fc22 	bl	800d714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed8:	429a      	cmp	r2, r3
 800beda:	d102      	bne.n	800bee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bedc:	2301      	movs	r3, #1
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	e001      	b.n	800bee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bee6:	f001 fc45 	bl	800d774 <vPortExitCritical>

	return xReturn;
 800beea:	68fb      	ldr	r3, [r7, #12]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800befe:	2300      	movs	r3, #0
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e014      	b.n	800bf2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf04:	4a0f      	ldr	r2, [pc, #60]	; (800bf44 <vQueueAddToRegistry+0x50>)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10b      	bne.n	800bf28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf10:	490c      	ldr	r1, [pc, #48]	; (800bf44 <vQueueAddToRegistry+0x50>)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	; (800bf44 <vQueueAddToRegistry+0x50>)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4413      	add	r3, r2
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf26:	e006      	b.n	800bf36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b07      	cmp	r3, #7
 800bf32:	d9e7      	bls.n	800bf04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	20001240 	.word	0x20001240

0800bf48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf58:	f001 fbdc 	bl	800d714 <vPortEnterCritical>
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf62:	b25b      	sxtb	r3, r3
 800bf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf68:	d103      	bne.n	800bf72 <vQueueWaitForMessageRestricted+0x2a>
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7e:	d103      	bne.n	800bf88 <vQueueWaitForMessageRestricted+0x40>
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf88:	f001 fbf4 	bl	800d774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	3324      	adds	r3, #36	; 0x24
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 fc73 	bl	800c888 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bfa2:	6978      	ldr	r0, [r7, #20]
 800bfa4:	f7ff ff26 	bl	800bdf4 <prvUnlockQueue>
	}
 800bfa8:	bf00      	nop
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08e      	sub	sp, #56	; 0x38
 800bfb4:	af04      	add	r7, sp, #16
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bfbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <xTaskCreateStatic+0x2a>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	623b      	str	r3, [r7, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10a      	bne.n	800bff6 <xTaskCreateStatic+0x46>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	61fb      	str	r3, [r7, #28]
}
 800bff2:	bf00      	nop
 800bff4:	e7fe      	b.n	800bff4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bff6:	23a8      	movs	r3, #168	; 0xa8
 800bff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2ba8      	cmp	r3, #168	; 0xa8
 800bffe:	d00a      	beq.n	800c016 <xTaskCreateStatic+0x66>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	61bb      	str	r3, [r7, #24]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c016:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d01e      	beq.n	800c05c <xTaskCreateStatic+0xac>
 800c01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01b      	beq.n	800c05c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	2202      	movs	r2, #2
 800c032:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c036:	2300      	movs	r3, #0
 800c038:	9303      	str	r3, [sp, #12]
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	9302      	str	r3, [sp, #8]
 800c03e:	f107 0314 	add.w	r3, r7, #20
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	68b9      	ldr	r1, [r7, #8]
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 f850 	bl	800c0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c056:	f000 f8f3 	bl	800c240 <prvAddNewTaskToReadyList>
 800c05a:	e001      	b.n	800c060 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c05c:	2300      	movs	r3, #0
 800c05e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c060:	697b      	ldr	r3, [r7, #20]
	}
 800c062:	4618      	mov	r0, r3
 800c064:	3728      	adds	r7, #40	; 0x28
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b08c      	sub	sp, #48	; 0x30
 800c06e:	af04      	add	r7, sp, #16
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	603b      	str	r3, [r7, #0]
 800c076:	4613      	mov	r3, r2
 800c078:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4618      	mov	r0, r3
 800c080:	f001 fc6a 	bl	800d958 <pvPortMalloc>
 800c084:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00e      	beq.n	800c0aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c08c:	20a8      	movs	r0, #168	; 0xa8
 800c08e:	f001 fc63 	bl	800d958 <pvPortMalloc>
 800c092:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
 800c0a0:	e005      	b.n	800c0ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0a2:	6978      	ldr	r0, [r7, #20]
 800c0a4:	f001 fd24 	bl	800daf0 <vPortFree>
 800c0a8:	e001      	b.n	800c0ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d017      	beq.n	800c0e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0bc:	88fa      	ldrh	r2, [r7, #6]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9303      	str	r3, [sp, #12]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	9302      	str	r3, [sp, #8]
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	68b9      	ldr	r1, [r7, #8]
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f000 f80e 	bl	800c0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0d8:	69f8      	ldr	r0, [r7, #28]
 800c0da:	f000 f8b1 	bl	800c240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	e002      	b.n	800c0ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3720      	adds	r7, #32
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	461a      	mov	r2, r3
 800c10c:	21a5      	movs	r1, #165	; 0xa5
 800c10e:	f002 fe86 	bl	800ee1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c11c:	3b01      	subs	r3, #1
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	f003 0307 	and.w	r3, r3, #7
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00a      	beq.n	800c14c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	617b      	str	r3, [r7, #20]
}
 800c148:	bf00      	nop
 800c14a:	e7fe      	b.n	800c14a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01f      	beq.n	800c192 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c152:	2300      	movs	r3, #0
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	e012      	b.n	800c17e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	4413      	add	r3, r2
 800c15e:	7819      	ldrb	r1, [r3, #0]
 800c160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	4413      	add	r3, r2
 800c166:	3334      	adds	r3, #52	; 0x34
 800c168:	460a      	mov	r2, r1
 800c16a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	3301      	adds	r3, #1
 800c17c:	61fb      	str	r3, [r7, #28]
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	2b0f      	cmp	r3, #15
 800c182:	d9e9      	bls.n	800c158 <prvInitialiseNewTask+0x64>
 800c184:	e000      	b.n	800c188 <prvInitialiseNewTask+0x94>
			{
				break;
 800c186:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c190:	e003      	b.n	800c19a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19c:	2b37      	cmp	r3, #55	; 0x37
 800c19e:	d901      	bls.n	800c1a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1a0:	2337      	movs	r3, #55	; 0x37
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7ff f8be 	bl	800b33c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	3318      	adds	r3, #24
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff f8b9 	bl	800b33c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	3354      	adds	r3, #84	; 0x54
 800c1f4:	224c      	movs	r2, #76	; 0x4c
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f002 fe10 	bl	800ee1e <memset>
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	4a0c      	ldr	r2, [pc, #48]	; (800c234 <prvInitialiseNewTask+0x140>)
 800c202:	659a      	str	r2, [r3, #88]	; 0x58
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	4a0c      	ldr	r2, [pc, #48]	; (800c238 <prvInitialiseNewTask+0x144>)
 800c208:	65da      	str	r2, [r3, #92]	; 0x5c
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	4a0b      	ldr	r2, [pc, #44]	; (800c23c <prvInitialiseNewTask+0x148>)
 800c20e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	69b8      	ldr	r0, [r7, #24]
 800c216:	f001 f953 	bl	800d4c0 <pxPortInitialiseStack>
 800c21a:	4602      	mov	r2, r0
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c22c:	bf00      	nop
 800c22e:	3720      	adds	r7, #32
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20007034 	.word	0x20007034
 800c238:	2000709c 	.word	0x2000709c
 800c23c:	20007104 	.word	0x20007104

0800c240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c248:	f001 fa64 	bl	800d714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c24c:	4b2d      	ldr	r3, [pc, #180]	; (800c304 <prvAddNewTaskToReadyList+0xc4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3301      	adds	r3, #1
 800c252:	4a2c      	ldr	r2, [pc, #176]	; (800c304 <prvAddNewTaskToReadyList+0xc4>)
 800c254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c256:	4b2c      	ldr	r3, [pc, #176]	; (800c308 <prvAddNewTaskToReadyList+0xc8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d109      	bne.n	800c272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c25e:	4a2a      	ldr	r2, [pc, #168]	; (800c308 <prvAddNewTaskToReadyList+0xc8>)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c264:	4b27      	ldr	r3, [pc, #156]	; (800c304 <prvAddNewTaskToReadyList+0xc4>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d110      	bne.n	800c28e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c26c:	f000 fc38 	bl	800cae0 <prvInitialiseTaskLists>
 800c270:	e00d      	b.n	800c28e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c272:	4b26      	ldr	r3, [pc, #152]	; (800c30c <prvAddNewTaskToReadyList+0xcc>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d109      	bne.n	800c28e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c27a:	4b23      	ldr	r3, [pc, #140]	; (800c308 <prvAddNewTaskToReadyList+0xc8>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	429a      	cmp	r2, r3
 800c286:	d802      	bhi.n	800c28e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c288:	4a1f      	ldr	r2, [pc, #124]	; (800c308 <prvAddNewTaskToReadyList+0xc8>)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c28e:	4b20      	ldr	r3, [pc, #128]	; (800c310 <prvAddNewTaskToReadyList+0xd0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <prvAddNewTaskToReadyList+0xd0>)
 800c296:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c298:	4b1d      	ldr	r3, [pc, #116]	; (800c310 <prvAddNewTaskToReadyList+0xd0>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a4:	4b1b      	ldr	r3, [pc, #108]	; (800c314 <prvAddNewTaskToReadyList+0xd4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d903      	bls.n	800c2b4 <prvAddNewTaskToReadyList+0x74>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	4a18      	ldr	r2, [pc, #96]	; (800c314 <prvAddNewTaskToReadyList+0xd4>)
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4413      	add	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4a15      	ldr	r2, [pc, #84]	; (800c318 <prvAddNewTaskToReadyList+0xd8>)
 800c2c2:	441a      	add	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	4610      	mov	r0, r2
 800c2cc:	f7ff f843 	bl	800b356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2d0:	f001 fa50 	bl	800d774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2d4:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <prvAddNewTaskToReadyList+0xcc>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00e      	beq.n	800c2fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <prvAddNewTaskToReadyList+0xc8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d207      	bcs.n	800c2fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2ea:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <prvAddNewTaskToReadyList+0xdc>)
 800c2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f0:	601a      	str	r2, [r3, #0]
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2fa:	bf00      	nop
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20001754 	.word	0x20001754
 800c308:	20001280 	.word	0x20001280
 800c30c:	20001760 	.word	0x20001760
 800c310:	20001770 	.word	0x20001770
 800c314:	2000175c 	.word	0x2000175c
 800c318:	20001284 	.word	0x20001284
 800c31c:	e000ed04 	.word	0xe000ed04

0800c320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c328:	2300      	movs	r3, #0
 800c32a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d017      	beq.n	800c362 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c332:	4b13      	ldr	r3, [pc, #76]	; (800c380 <vTaskDelay+0x60>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00a      	beq.n	800c350 <vTaskDelay+0x30>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	60bb      	str	r3, [r7, #8]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c350:	f000 f88a 	bl	800c468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c354:	2100      	movs	r1, #0
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fd10 	bl	800cd7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c35c:	f000 f892 	bl	800c484 <xTaskResumeAll>
 800c360:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d107      	bne.n	800c378 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c368:	4b06      	ldr	r3, [pc, #24]	; (800c384 <vTaskDelay+0x64>)
 800c36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	2000177c 	.word	0x2000177c
 800c384:	e000ed04 	.word	0xe000ed04

0800c388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c396:	463a      	mov	r2, r7
 800c398:	1d39      	adds	r1, r7, #4
 800c39a:	f107 0308 	add.w	r3, r7, #8
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe ff78 	bl	800b294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	9202      	str	r2, [sp, #8]
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	460a      	mov	r2, r1
 800c3b6:	4924      	ldr	r1, [pc, #144]	; (800c448 <vTaskStartScheduler+0xc0>)
 800c3b8:	4824      	ldr	r0, [pc, #144]	; (800c44c <vTaskStartScheduler+0xc4>)
 800c3ba:	f7ff fdf9 	bl	800bfb0 <xTaskCreateStatic>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	4a23      	ldr	r2, [pc, #140]	; (800c450 <vTaskStartScheduler+0xc8>)
 800c3c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3c4:	4b22      	ldr	r3, [pc, #136]	; (800c450 <vTaskStartScheduler+0xc8>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	617b      	str	r3, [r7, #20]
 800c3d0:	e001      	b.n	800c3d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d102      	bne.n	800c3e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c3dc:	f000 fd22 	bl	800ce24 <xTimerCreateTimerTask>
 800c3e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d11b      	bne.n	800c420 <vTaskStartScheduler+0x98>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	613b      	str	r3, [r7, #16]
}
 800c3fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3fc:	4b15      	ldr	r3, [pc, #84]	; (800c454 <vTaskStartScheduler+0xcc>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3354      	adds	r3, #84	; 0x54
 800c402:	4a15      	ldr	r2, [pc, #84]	; (800c458 <vTaskStartScheduler+0xd0>)
 800c404:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c406:	4b15      	ldr	r3, [pc, #84]	; (800c45c <vTaskStartScheduler+0xd4>)
 800c408:	f04f 32ff 	mov.w	r2, #4294967295
 800c40c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c40e:	4b14      	ldr	r3, [pc, #80]	; (800c460 <vTaskStartScheduler+0xd8>)
 800c410:	2201      	movs	r2, #1
 800c412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c414:	4b13      	ldr	r3, [pc, #76]	; (800c464 <vTaskStartScheduler+0xdc>)
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c41a:	f001 f8d9 	bl	800d5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c41e:	e00e      	b.n	800c43e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d10a      	bne.n	800c43e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	60fb      	str	r3, [r7, #12]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <vTaskStartScheduler+0xb4>
}
 800c43e:	bf00      	nop
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	08013eec 	.word	0x08013eec
 800c44c:	0800cab1 	.word	0x0800cab1
 800c450:	20001778 	.word	0x20001778
 800c454:	20001280 	.word	0x20001280
 800c458:	2000006c 	.word	0x2000006c
 800c45c:	20001774 	.word	0x20001774
 800c460:	20001760 	.word	0x20001760
 800c464:	20001758 	.word	0x20001758

0800c468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c468:	b480      	push	{r7}
 800c46a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c46c:	4b04      	ldr	r3, [pc, #16]	; (800c480 <vTaskSuspendAll+0x18>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	4a03      	ldr	r2, [pc, #12]	; (800c480 <vTaskSuspendAll+0x18>)
 800c474:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c476:	bf00      	nop
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	2000177c 	.word	0x2000177c

0800c484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c48e:	2300      	movs	r3, #0
 800c490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c492:	4b42      	ldr	r3, [pc, #264]	; (800c59c <xTaskResumeAll+0x118>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10a      	bne.n	800c4b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49e:	f383 8811 	msr	BASEPRI, r3
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	603b      	str	r3, [r7, #0]
}
 800c4ac:	bf00      	nop
 800c4ae:	e7fe      	b.n	800c4ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4b0:	f001 f930 	bl	800d714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4b4:	4b39      	ldr	r3, [pc, #228]	; (800c59c <xTaskResumeAll+0x118>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	4a38      	ldr	r2, [pc, #224]	; (800c59c <xTaskResumeAll+0x118>)
 800c4bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4be:	4b37      	ldr	r3, [pc, #220]	; (800c59c <xTaskResumeAll+0x118>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d162      	bne.n	800c58c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4c6:	4b36      	ldr	r3, [pc, #216]	; (800c5a0 <xTaskResumeAll+0x11c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d05e      	beq.n	800c58c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4ce:	e02f      	b.n	800c530 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d0:	4b34      	ldr	r3, [pc, #208]	; (800c5a4 <xTaskResumeAll+0x120>)
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3318      	adds	r3, #24
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe ff97 	bl	800b410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe ff92 	bl	800b410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f0:	4b2d      	ldr	r3, [pc, #180]	; (800c5a8 <xTaskResumeAll+0x124>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d903      	bls.n	800c500 <xTaskResumeAll+0x7c>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	4a2a      	ldr	r2, [pc, #168]	; (800c5a8 <xTaskResumeAll+0x124>)
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4a27      	ldr	r2, [pc, #156]	; (800c5ac <xTaskResumeAll+0x128>)
 800c50e:	441a      	add	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7fe ff1d 	bl	800b356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c520:	4b23      	ldr	r3, [pc, #140]	; (800c5b0 <xTaskResumeAll+0x12c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	429a      	cmp	r2, r3
 800c528:	d302      	bcc.n	800c530 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c52a:	4b22      	ldr	r3, [pc, #136]	; (800c5b4 <xTaskResumeAll+0x130>)
 800c52c:	2201      	movs	r2, #1
 800c52e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c530:	4b1c      	ldr	r3, [pc, #112]	; (800c5a4 <xTaskResumeAll+0x120>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1cb      	bne.n	800c4d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c53e:	f000 fb71 	bl	800cc24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c542:	4b1d      	ldr	r3, [pc, #116]	; (800c5b8 <xTaskResumeAll+0x134>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d010      	beq.n	800c570 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c54e:	f000 f859 	bl	800c604 <xTaskIncrementTick>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c558:	4b16      	ldr	r3, [pc, #88]	; (800c5b4 <xTaskResumeAll+0x130>)
 800c55a:	2201      	movs	r2, #1
 800c55c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	3b01      	subs	r3, #1
 800c562:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1f1      	bne.n	800c54e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c56a:	4b13      	ldr	r3, [pc, #76]	; (800c5b8 <xTaskResumeAll+0x134>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c570:	4b10      	ldr	r3, [pc, #64]	; (800c5b4 <xTaskResumeAll+0x130>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d009      	beq.n	800c58c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c578:	2301      	movs	r3, #1
 800c57a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c57c:	4b0f      	ldr	r3, [pc, #60]	; (800c5bc <xTaskResumeAll+0x138>)
 800c57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c58c:	f001 f8f2 	bl	800d774 <vPortExitCritical>

	return xAlreadyYielded;
 800c590:	68bb      	ldr	r3, [r7, #8]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	2000177c 	.word	0x2000177c
 800c5a0:	20001754 	.word	0x20001754
 800c5a4:	20001714 	.word	0x20001714
 800c5a8:	2000175c 	.word	0x2000175c
 800c5ac:	20001284 	.word	0x20001284
 800c5b0:	20001280 	.word	0x20001280
 800c5b4:	20001768 	.word	0x20001768
 800c5b8:	20001764 	.word	0x20001764
 800c5bc:	e000ed04 	.word	0xe000ed04

0800c5c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5c6:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <xTaskGetTickCount+0x1c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5cc:	687b      	ldr	r3, [r7, #4]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	20001758 	.word	0x20001758

0800c5e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5e6:	f001 f977 	bl	800d8d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c5ee:	4b04      	ldr	r3, [pc, #16]	; (800c600 <xTaskGetTickCountFromISR+0x20>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5f4:	683b      	ldr	r3, [r7, #0]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	20001758 	.word	0x20001758

0800c604 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c60a:	2300      	movs	r3, #0
 800c60c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c60e:	4b4f      	ldr	r3, [pc, #316]	; (800c74c <xTaskIncrementTick+0x148>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f040 808f 	bne.w	800c736 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c618:	4b4d      	ldr	r3, [pc, #308]	; (800c750 <xTaskIncrementTick+0x14c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3301      	adds	r3, #1
 800c61e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c620:	4a4b      	ldr	r2, [pc, #300]	; (800c750 <xTaskIncrementTick+0x14c>)
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d120      	bne.n	800c66e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c62c:	4b49      	ldr	r3, [pc, #292]	; (800c754 <xTaskIncrementTick+0x150>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00a      	beq.n	800c64c <xTaskIncrementTick+0x48>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	603b      	str	r3, [r7, #0]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <xTaskIncrementTick+0x46>
 800c64c:	4b41      	ldr	r3, [pc, #260]	; (800c754 <xTaskIncrementTick+0x150>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	4b41      	ldr	r3, [pc, #260]	; (800c758 <xTaskIncrementTick+0x154>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a3f      	ldr	r2, [pc, #252]	; (800c754 <xTaskIncrementTick+0x150>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	4a3f      	ldr	r2, [pc, #252]	; (800c758 <xTaskIncrementTick+0x154>)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	4b3e      	ldr	r3, [pc, #248]	; (800c75c <xTaskIncrementTick+0x158>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3301      	adds	r3, #1
 800c666:	4a3d      	ldr	r2, [pc, #244]	; (800c75c <xTaskIncrementTick+0x158>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	f000 fadb 	bl	800cc24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c66e:	4b3c      	ldr	r3, [pc, #240]	; (800c760 <xTaskIncrementTick+0x15c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	429a      	cmp	r2, r3
 800c676:	d349      	bcc.n	800c70c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c678:	4b36      	ldr	r3, [pc, #216]	; (800c754 <xTaskIncrementTick+0x150>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d104      	bne.n	800c68c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c682:	4b37      	ldr	r3, [pc, #220]	; (800c760 <xTaskIncrementTick+0x15c>)
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	601a      	str	r2, [r3, #0]
					break;
 800c68a:	e03f      	b.n	800c70c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68c:	4b31      	ldr	r3, [pc, #196]	; (800c754 <xTaskIncrementTick+0x150>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d203      	bcs.n	800c6ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6a4:	4a2e      	ldr	r2, [pc, #184]	; (800c760 <xTaskIncrementTick+0x15c>)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6aa:	e02f      	b.n	800c70c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fe fead 	bl	800b410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	3318      	adds	r3, #24
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe fea4 	bl	800b410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6cc:	4b25      	ldr	r3, [pc, #148]	; (800c764 <xTaskIncrementTick+0x160>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d903      	bls.n	800c6dc <xTaskIncrementTick+0xd8>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d8:	4a22      	ldr	r2, [pc, #136]	; (800c764 <xTaskIncrementTick+0x160>)
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4a1f      	ldr	r2, [pc, #124]	; (800c768 <xTaskIncrementTick+0x164>)
 800c6ea:	441a      	add	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	f7fe fe2f 	bl	800b356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fc:	4b1b      	ldr	r3, [pc, #108]	; (800c76c <xTaskIncrementTick+0x168>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	429a      	cmp	r2, r3
 800c704:	d3b8      	bcc.n	800c678 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c706:	2301      	movs	r3, #1
 800c708:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c70a:	e7b5      	b.n	800c678 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c70c:	4b17      	ldr	r3, [pc, #92]	; (800c76c <xTaskIncrementTick+0x168>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c712:	4915      	ldr	r1, [pc, #84]	; (800c768 <xTaskIncrementTick+0x164>)
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d901      	bls.n	800c728 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c724:	2301      	movs	r3, #1
 800c726:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c728:	4b11      	ldr	r3, [pc, #68]	; (800c770 <xTaskIncrementTick+0x16c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d007      	beq.n	800c740 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c730:	2301      	movs	r3, #1
 800c732:	617b      	str	r3, [r7, #20]
 800c734:	e004      	b.n	800c740 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c736:	4b0f      	ldr	r3, [pc, #60]	; (800c774 <xTaskIncrementTick+0x170>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	4a0d      	ldr	r2, [pc, #52]	; (800c774 <xTaskIncrementTick+0x170>)
 800c73e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c740:	697b      	ldr	r3, [r7, #20]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	2000177c 	.word	0x2000177c
 800c750:	20001758 	.word	0x20001758
 800c754:	2000170c 	.word	0x2000170c
 800c758:	20001710 	.word	0x20001710
 800c75c:	2000176c 	.word	0x2000176c
 800c760:	20001774 	.word	0x20001774
 800c764:	2000175c 	.word	0x2000175c
 800c768:	20001284 	.word	0x20001284
 800c76c:	20001280 	.word	0x20001280
 800c770:	20001768 	.word	0x20001768
 800c774:	20001764 	.word	0x20001764

0800c778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c77e:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <vTaskSwitchContext+0xb0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c786:	4b29      	ldr	r3, [pc, #164]	; (800c82c <vTaskSwitchContext+0xb4>)
 800c788:	2201      	movs	r2, #1
 800c78a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c78c:	e046      	b.n	800c81c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c78e:	4b27      	ldr	r3, [pc, #156]	; (800c82c <vTaskSwitchContext+0xb4>)
 800c790:	2200      	movs	r2, #0
 800c792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c794:	4b26      	ldr	r3, [pc, #152]	; (800c830 <vTaskSwitchContext+0xb8>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	60fb      	str	r3, [r7, #12]
 800c79a:	e010      	b.n	800c7be <vTaskSwitchContext+0x46>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	607b      	str	r3, [r7, #4]
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <vTaskSwitchContext+0x3e>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	491d      	ldr	r1, [pc, #116]	; (800c834 <vTaskSwitchContext+0xbc>)
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	440b      	add	r3, r1
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0e4      	beq.n	800c79c <vTaskSwitchContext+0x24>
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4a15      	ldr	r2, [pc, #84]	; (800c834 <vTaskSwitchContext+0xbc>)
 800c7de:	4413      	add	r3, r2
 800c7e0:	60bb      	str	r3, [r7, #8]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	605a      	str	r2, [r3, #4]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d104      	bne.n	800c802 <vTaskSwitchContext+0x8a>
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	4a0b      	ldr	r2, [pc, #44]	; (800c838 <vTaskSwitchContext+0xc0>)
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	4a08      	ldr	r2, [pc, #32]	; (800c830 <vTaskSwitchContext+0xb8>)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c812:	4b09      	ldr	r3, [pc, #36]	; (800c838 <vTaskSwitchContext+0xc0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3354      	adds	r3, #84	; 0x54
 800c818:	4a08      	ldr	r2, [pc, #32]	; (800c83c <vTaskSwitchContext+0xc4>)
 800c81a:	6013      	str	r3, [r2, #0]
}
 800c81c:	bf00      	nop
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	2000177c 	.word	0x2000177c
 800c82c:	20001768 	.word	0x20001768
 800c830:	2000175c 	.word	0x2000175c
 800c834:	20001284 	.word	0x20001284
 800c838:	20001280 	.word	0x20001280
 800c83c:	2000006c 	.word	0x2000006c

0800c840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10a      	bne.n	800c866 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	60fb      	str	r3, [r7, #12]
}
 800c862:	bf00      	nop
 800c864:	e7fe      	b.n	800c864 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c866:	4b07      	ldr	r3, [pc, #28]	; (800c884 <vTaskPlaceOnEventList+0x44>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	3318      	adds	r3, #24
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7fe fd95 	bl	800b39e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c874:	2101      	movs	r1, #1
 800c876:	6838      	ldr	r0, [r7, #0]
 800c878:	f000 fa80 	bl	800cd7c <prvAddCurrentTaskToDelayedList>
}
 800c87c:	bf00      	nop
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20001280 	.word	0x20001280

0800c888 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10a      	bne.n	800c8b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	617b      	str	r3, [r7, #20]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8b0:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <vTaskPlaceOnEventListRestricted+0x54>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3318      	adds	r3, #24
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7fe fd4c 	bl	800b356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c8ca:	6879      	ldr	r1, [r7, #4]
 800c8cc:	68b8      	ldr	r0, [r7, #8]
 800c8ce:	f000 fa55 	bl	800cd7c <prvAddCurrentTaskToDelayedList>
	}
 800c8d2:	bf00      	nop
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	20001280 	.word	0x20001280

0800c8e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10a      	bne.n	800c90c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	60fb      	str	r3, [r7, #12]
}
 800c908:	bf00      	nop
 800c90a:	e7fe      	b.n	800c90a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	3318      	adds	r3, #24
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fd7d 	bl	800b410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c916:	4b1e      	ldr	r3, [pc, #120]	; (800c990 <xTaskRemoveFromEventList+0xb0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d11d      	bne.n	800c95a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	3304      	adds	r3, #4
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fd74 	bl	800b410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92c:	4b19      	ldr	r3, [pc, #100]	; (800c994 <xTaskRemoveFromEventList+0xb4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	d903      	bls.n	800c93c <xTaskRemoveFromEventList+0x5c>
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c938:	4a16      	ldr	r2, [pc, #88]	; (800c994 <xTaskRemoveFromEventList+0xb4>)
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c940:	4613      	mov	r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4a13      	ldr	r2, [pc, #76]	; (800c998 <xTaskRemoveFromEventList+0xb8>)
 800c94a:	441a      	add	r2, r3
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	3304      	adds	r3, #4
 800c950:	4619      	mov	r1, r3
 800c952:	4610      	mov	r0, r2
 800c954:	f7fe fcff 	bl	800b356 <vListInsertEnd>
 800c958:	e005      	b.n	800c966 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	3318      	adds	r3, #24
 800c95e:	4619      	mov	r1, r3
 800c960:	480e      	ldr	r0, [pc, #56]	; (800c99c <xTaskRemoveFromEventList+0xbc>)
 800c962:	f7fe fcf8 	bl	800b356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96a:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <xTaskRemoveFromEventList+0xc0>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c970:	429a      	cmp	r2, r3
 800c972:	d905      	bls.n	800c980 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <xTaskRemoveFromEventList+0xc4>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	e001      	b.n	800c984 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c980:	2300      	movs	r3, #0
 800c982:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c984:	697b      	ldr	r3, [r7, #20]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	2000177c 	.word	0x2000177c
 800c994:	2000175c 	.word	0x2000175c
 800c998:	20001284 	.word	0x20001284
 800c99c:	20001714 	.word	0x20001714
 800c9a0:	20001280 	.word	0x20001280
 800c9a4:	20001768 	.word	0x20001768

0800c9a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9b0:	4b06      	ldr	r3, [pc, #24]	; (800c9cc <vTaskInternalSetTimeOutState+0x24>)
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9b8:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <vTaskInternalSetTimeOutState+0x28>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	605a      	str	r2, [r3, #4]
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	2000176c 	.word	0x2000176c
 800c9d0:	20001758 	.word	0x20001758

0800c9d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b088      	sub	sp, #32
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	613b      	str	r3, [r7, #16]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	60fb      	str	r3, [r7, #12]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca16:	f000 fe7d 	bl	800d714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca1a:	4b1d      	ldr	r3, [pc, #116]	; (800ca90 <xTaskCheckForTimeOut+0xbc>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	69ba      	ldr	r2, [r7, #24]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca32:	d102      	bne.n	800ca3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca34:	2300      	movs	r3, #0
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	e023      	b.n	800ca82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	4b15      	ldr	r3, [pc, #84]	; (800ca94 <xTaskCheckForTimeOut+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d007      	beq.n	800ca56 <xTaskCheckForTimeOut+0x82>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	69ba      	ldr	r2, [r7, #24]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d302      	bcc.n	800ca56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca50:	2301      	movs	r3, #1
 800ca52:	61fb      	str	r3, [r7, #28]
 800ca54:	e015      	b.n	800ca82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d20b      	bcs.n	800ca78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	1ad2      	subs	r2, r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7ff ff9b 	bl	800c9a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca72:	2300      	movs	r3, #0
 800ca74:	61fb      	str	r3, [r7, #28]
 800ca76:	e004      	b.n	800ca82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca82:	f000 fe77 	bl	800d774 <vPortExitCritical>

	return xReturn;
 800ca86:	69fb      	ldr	r3, [r7, #28]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3720      	adds	r7, #32
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	20001758 	.word	0x20001758
 800ca94:	2000176c 	.word	0x2000176c

0800ca98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca9c:	4b03      	ldr	r3, [pc, #12]	; (800caac <vTaskMissedYield+0x14>)
 800ca9e:	2201      	movs	r2, #1
 800caa0:	601a      	str	r2, [r3, #0]
}
 800caa2:	bf00      	nop
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	20001768 	.word	0x20001768

0800cab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cab8:	f000 f852 	bl	800cb60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cabc:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <prvIdleTask+0x28>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d9f9      	bls.n	800cab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cac4:	4b05      	ldr	r3, [pc, #20]	; (800cadc <prvIdleTask+0x2c>)
 800cac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cad4:	e7f0      	b.n	800cab8 <prvIdleTask+0x8>
 800cad6:	bf00      	nop
 800cad8:	20001284 	.word	0x20001284
 800cadc:	e000ed04 	.word	0xe000ed04

0800cae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cae6:	2300      	movs	r3, #0
 800cae8:	607b      	str	r3, [r7, #4]
 800caea:	e00c      	b.n	800cb06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	4613      	mov	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4413      	add	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4a12      	ldr	r2, [pc, #72]	; (800cb40 <prvInitialiseTaskLists+0x60>)
 800caf8:	4413      	add	r3, r2
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe fbfe 	bl	800b2fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3301      	adds	r3, #1
 800cb04:	607b      	str	r3, [r7, #4]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b37      	cmp	r3, #55	; 0x37
 800cb0a:	d9ef      	bls.n	800caec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb0c:	480d      	ldr	r0, [pc, #52]	; (800cb44 <prvInitialiseTaskLists+0x64>)
 800cb0e:	f7fe fbf5 	bl	800b2fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb12:	480d      	ldr	r0, [pc, #52]	; (800cb48 <prvInitialiseTaskLists+0x68>)
 800cb14:	f7fe fbf2 	bl	800b2fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb18:	480c      	ldr	r0, [pc, #48]	; (800cb4c <prvInitialiseTaskLists+0x6c>)
 800cb1a:	f7fe fbef 	bl	800b2fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb1e:	480c      	ldr	r0, [pc, #48]	; (800cb50 <prvInitialiseTaskLists+0x70>)
 800cb20:	f7fe fbec 	bl	800b2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb24:	480b      	ldr	r0, [pc, #44]	; (800cb54 <prvInitialiseTaskLists+0x74>)
 800cb26:	f7fe fbe9 	bl	800b2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb2a:	4b0b      	ldr	r3, [pc, #44]	; (800cb58 <prvInitialiseTaskLists+0x78>)
 800cb2c:	4a05      	ldr	r2, [pc, #20]	; (800cb44 <prvInitialiseTaskLists+0x64>)
 800cb2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb30:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <prvInitialiseTaskLists+0x7c>)
 800cb32:	4a05      	ldr	r2, [pc, #20]	; (800cb48 <prvInitialiseTaskLists+0x68>)
 800cb34:	601a      	str	r2, [r3, #0]
}
 800cb36:	bf00      	nop
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20001284 	.word	0x20001284
 800cb44:	200016e4 	.word	0x200016e4
 800cb48:	200016f8 	.word	0x200016f8
 800cb4c:	20001714 	.word	0x20001714
 800cb50:	20001728 	.word	0x20001728
 800cb54:	20001740 	.word	0x20001740
 800cb58:	2000170c 	.word	0x2000170c
 800cb5c:	20001710 	.word	0x20001710

0800cb60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb66:	e019      	b.n	800cb9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb68:	f000 fdd4 	bl	800d714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb6c:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <prvCheckTasksWaitingTermination+0x50>)
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3304      	adds	r3, #4
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe fc49 	bl	800b410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <prvCheckTasksWaitingTermination+0x54>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	4a0b      	ldr	r2, [pc, #44]	; (800cbb4 <prvCheckTasksWaitingTermination+0x54>)
 800cb86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb88:	4b0b      	ldr	r3, [pc, #44]	; (800cbb8 <prvCheckTasksWaitingTermination+0x58>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	4a0a      	ldr	r2, [pc, #40]	; (800cbb8 <prvCheckTasksWaitingTermination+0x58>)
 800cb90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb92:	f000 fdef 	bl	800d774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f810 	bl	800cbbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb9c:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <prvCheckTasksWaitingTermination+0x58>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1e1      	bne.n	800cb68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20001728 	.word	0x20001728
 800cbb4:	20001754 	.word	0x20001754
 800cbb8:	2000173c 	.word	0x2000173c

0800cbbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3354      	adds	r3, #84	; 0x54
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f002 f945 	bl	800ee58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d108      	bne.n	800cbea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 ff87 	bl	800daf0 <vPortFree>
				vPortFree( pxTCB );
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 ff84 	bl	800daf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cbe8:	e018      	b.n	800cc1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d103      	bne.n	800cbfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 ff7b 	bl	800daf0 <vPortFree>
	}
 800cbfa:	e00f      	b.n	800cc1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d00a      	beq.n	800cc1c <prvDeleteTCB+0x60>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	60fb      	str	r3, [r7, #12]
}
 800cc18:	bf00      	nop
 800cc1a:	e7fe      	b.n	800cc1a <prvDeleteTCB+0x5e>
	}
 800cc1c:	bf00      	nop
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc2a:	4b0c      	ldr	r3, [pc, #48]	; (800cc5c <prvResetNextTaskUnblockTime+0x38>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d104      	bne.n	800cc3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc34:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <prvResetNextTaskUnblockTime+0x3c>)
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc3c:	e008      	b.n	800cc50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc3e:	4b07      	ldr	r3, [pc, #28]	; (800cc5c <prvResetNextTaskUnblockTime+0x38>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	4a04      	ldr	r2, [pc, #16]	; (800cc60 <prvResetNextTaskUnblockTime+0x3c>)
 800cc4e:	6013      	str	r3, [r2, #0]
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	2000170c 	.word	0x2000170c
 800cc60:	20001774 	.word	0x20001774

0800cc64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc6a:	4b0b      	ldr	r3, [pc, #44]	; (800cc98 <xTaskGetSchedulerState+0x34>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d102      	bne.n	800cc78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc72:	2301      	movs	r3, #1
 800cc74:	607b      	str	r3, [r7, #4]
 800cc76:	e008      	b.n	800cc8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc78:	4b08      	ldr	r3, [pc, #32]	; (800cc9c <xTaskGetSchedulerState+0x38>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d102      	bne.n	800cc86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cc80:	2302      	movs	r3, #2
 800cc82:	607b      	str	r3, [r7, #4]
 800cc84:	e001      	b.n	800cc8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cc86:	2300      	movs	r3, #0
 800cc88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc8a:	687b      	ldr	r3, [r7, #4]
	}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	20001760 	.word	0x20001760
 800cc9c:	2000177c 	.word	0x2000177c

0800cca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d056      	beq.n	800cd64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ccb6:	4b2e      	ldr	r3, [pc, #184]	; (800cd70 <xTaskPriorityDisinherit+0xd0>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d00a      	beq.n	800ccd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	60bb      	str	r3, [r7, #8]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccf8:	1e5a      	subs	r2, r3, #1
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d02c      	beq.n	800cd64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d128      	bne.n	800cd64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	3304      	adds	r3, #4
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fb7a 	bl	800b410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd34:	4b0f      	ldr	r3, [pc, #60]	; (800cd74 <xTaskPriorityDisinherit+0xd4>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d903      	bls.n	800cd44 <xTaskPriorityDisinherit+0xa4>
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd40:	4a0c      	ldr	r2, [pc, #48]	; (800cd74 <xTaskPriorityDisinherit+0xd4>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd48:	4613      	mov	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4a09      	ldr	r2, [pc, #36]	; (800cd78 <xTaskPriorityDisinherit+0xd8>)
 800cd52:	441a      	add	r2, r3
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	3304      	adds	r3, #4
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4610      	mov	r0, r2
 800cd5c:	f7fe fafb 	bl	800b356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd60:	2301      	movs	r3, #1
 800cd62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd64:	697b      	ldr	r3, [r7, #20]
	}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20001280 	.word	0x20001280
 800cd74:	2000175c 	.word	0x2000175c
 800cd78:	20001284 	.word	0x20001284

0800cd7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd86:	4b21      	ldr	r3, [pc, #132]	; (800ce0c <prvAddCurrentTaskToDelayedList+0x90>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd8c:	4b20      	ldr	r3, [pc, #128]	; (800ce10 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3304      	adds	r3, #4
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7fe fb3c 	bl	800b410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9e:	d10a      	bne.n	800cdb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d007      	beq.n	800cdb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cda6:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <prvAddCurrentTaskToDelayedList+0x94>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3304      	adds	r3, #4
 800cdac:	4619      	mov	r1, r3
 800cdae:	4819      	ldr	r0, [pc, #100]	; (800ce14 <prvAddCurrentTaskToDelayedList+0x98>)
 800cdb0:	f7fe fad1 	bl	800b356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cdb4:	e026      	b.n	800ce04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4413      	add	r3, r2
 800cdbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cdbe:	4b14      	ldr	r3, [pc, #80]	; (800ce10 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d209      	bcs.n	800cde2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdce:	4b12      	ldr	r3, [pc, #72]	; (800ce18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	4b0f      	ldr	r3, [pc, #60]	; (800ce10 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	4619      	mov	r1, r3
 800cdda:	4610      	mov	r0, r2
 800cddc:	f7fe fadf 	bl	800b39e <vListInsert>
}
 800cde0:	e010      	b.n	800ce04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cde2:	4b0e      	ldr	r3, [pc, #56]	; (800ce1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <prvAddCurrentTaskToDelayedList+0x94>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7fe fad5 	bl	800b39e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdf4:	4b0a      	ldr	r3, [pc, #40]	; (800ce20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d202      	bcs.n	800ce04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cdfe:	4a08      	ldr	r2, [pc, #32]	; (800ce20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	6013      	str	r3, [r2, #0]
}
 800ce04:	bf00      	nop
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20001758 	.word	0x20001758
 800ce10:	20001280 	.word	0x20001280
 800ce14:	20001740 	.word	0x20001740
 800ce18:	20001710 	.word	0x20001710
 800ce1c:	2000170c 	.word	0x2000170c
 800ce20:	20001774 	.word	0x20001774

0800ce24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	; 0x28
 800ce28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce2e:	f000 fb07 	bl	800d440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce32:	4b1c      	ldr	r3, [pc, #112]	; (800cea4 <xTimerCreateTimerTask+0x80>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d021      	beq.n	800ce7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce42:	1d3a      	adds	r2, r7, #4
 800ce44:	f107 0108 	add.w	r1, r7, #8
 800ce48:	f107 030c 	add.w	r3, r7, #12
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe fa3b 	bl	800b2c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	9202      	str	r2, [sp, #8]
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	2300      	movs	r3, #0
 800ce62:	460a      	mov	r2, r1
 800ce64:	4910      	ldr	r1, [pc, #64]	; (800cea8 <xTimerCreateTimerTask+0x84>)
 800ce66:	4811      	ldr	r0, [pc, #68]	; (800ceac <xTimerCreateTimerTask+0x88>)
 800ce68:	f7ff f8a2 	bl	800bfb0 <xTaskCreateStatic>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	4a10      	ldr	r2, [pc, #64]	; (800ceb0 <xTimerCreateTimerTask+0x8c>)
 800ce70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce72:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <xTimerCreateTimerTask+0x8c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	613b      	str	r3, [r7, #16]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce9a:	697b      	ldr	r3, [r7, #20]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	200017b0 	.word	0x200017b0
 800cea8:	08013ef4 	.word	0x08013ef4
 800ceac:	0800cfe9 	.word	0x0800cfe9
 800ceb0:	200017b4 	.word	0x200017b4

0800ceb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08a      	sub	sp, #40	; 0x28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10a      	bne.n	800cee2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	623b      	str	r3, [r7, #32]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cee2:	4b1a      	ldr	r3, [pc, #104]	; (800cf4c <xTimerGenericCommand+0x98>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d02a      	beq.n	800cf40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b05      	cmp	r3, #5
 800cefa:	dc18      	bgt.n	800cf2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cefc:	f7ff feb2 	bl	800cc64 <xTaskGetSchedulerState>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d109      	bne.n	800cf1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf06:	4b11      	ldr	r3, [pc, #68]	; (800cf4c <xTimerGenericCommand+0x98>)
 800cf08:	6818      	ldr	r0, [r3, #0]
 800cf0a:	f107 0110 	add.w	r1, r7, #16
 800cf0e:	2300      	movs	r3, #0
 800cf10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf12:	f7fe fbe5 	bl	800b6e0 <xQueueGenericSend>
 800cf16:	6278      	str	r0, [r7, #36]	; 0x24
 800cf18:	e012      	b.n	800cf40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <xTimerGenericCommand+0x98>)
 800cf1c:	6818      	ldr	r0, [r3, #0]
 800cf1e:	f107 0110 	add.w	r1, r7, #16
 800cf22:	2300      	movs	r3, #0
 800cf24:	2200      	movs	r2, #0
 800cf26:	f7fe fbdb 	bl	800b6e0 <xQueueGenericSend>
 800cf2a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf2c:	e008      	b.n	800cf40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf2e:	4b07      	ldr	r3, [pc, #28]	; (800cf4c <xTimerGenericCommand+0x98>)
 800cf30:	6818      	ldr	r0, [r3, #0]
 800cf32:	f107 0110 	add.w	r1, r7, #16
 800cf36:	2300      	movs	r3, #0
 800cf38:	683a      	ldr	r2, [r7, #0]
 800cf3a:	f7fe fccf 	bl	800b8dc <xQueueGenericSendFromISR>
 800cf3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3728      	adds	r7, #40	; 0x28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	200017b0 	.word	0x200017b0

0800cf50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b088      	sub	sp, #32
 800cf54:	af02      	add	r7, sp, #8
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf5a:	4b22      	ldr	r3, [pc, #136]	; (800cfe4 <prvProcessExpiredTimer+0x94>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	3304      	adds	r3, #4
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fa51 	bl	800b410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf74:	f003 0304 	and.w	r3, r3, #4
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d022      	beq.n	800cfc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	18d1      	adds	r1, r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	6978      	ldr	r0, [r7, #20]
 800cf8a:	f000 f8d1 	bl	800d130 <prvInsertTimerInActiveList>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d01f      	beq.n	800cfd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf94:	2300      	movs	r3, #0
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	2300      	movs	r3, #0
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	6978      	ldr	r0, [r7, #20]
 800cfa0:	f7ff ff88 	bl	800ceb4 <xTimerGenericCommand>
 800cfa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d113      	bne.n	800cfd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	60fb      	str	r3, [r7, #12]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfc8:	f023 0301 	bic.w	r3, r3, #1
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	6a1b      	ldr	r3, [r3, #32]
 800cfd8:	6978      	ldr	r0, [r7, #20]
 800cfda:	4798      	blx	r3
}
 800cfdc:	bf00      	nop
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	200017a8 	.word	0x200017a8

0800cfe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cff0:	f107 0308 	add.w	r3, r7, #8
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 f857 	bl	800d0a8 <prvGetNextExpireTime>
 800cffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	4619      	mov	r1, r3
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f000 f803 	bl	800d00c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d006:	f000 f8d5 	bl	800d1b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d00a:	e7f1      	b.n	800cff0 <prvTimerTask+0x8>

0800d00c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d016:	f7ff fa27 	bl	800c468 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d01a:	f107 0308 	add.w	r3, r7, #8
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 f866 	bl	800d0f0 <prvSampleTimeNow>
 800d024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d130      	bne.n	800d08e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <prvProcessTimerOrBlockTask+0x3c>
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	429a      	cmp	r2, r3
 800d038:	d806      	bhi.n	800d048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d03a:	f7ff fa23 	bl	800c484 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7ff ff85 	bl	800cf50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d046:	e024      	b.n	800d092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d008      	beq.n	800d060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <prvProcessTimerOrBlockTask+0x90>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <prvProcessTimerOrBlockTask+0x50>
 800d058:	2301      	movs	r3, #1
 800d05a:	e000      	b.n	800d05e <prvProcessTimerOrBlockTask+0x52>
 800d05c:	2300      	movs	r3, #0
 800d05e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d060:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <prvProcessTimerOrBlockTask+0x94>)
 800d062:	6818      	ldr	r0, [r3, #0]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	4619      	mov	r1, r3
 800d06e:	f7fe ff6b 	bl	800bf48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d072:	f7ff fa07 	bl	800c484 <xTaskResumeAll>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d07c:	4b09      	ldr	r3, [pc, #36]	; (800d0a4 <prvProcessTimerOrBlockTask+0x98>)
 800d07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	f3bf 8f6f 	isb	sy
}
 800d08c:	e001      	b.n	800d092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d08e:	f7ff f9f9 	bl	800c484 <xTaskResumeAll>
}
 800d092:	bf00      	nop
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	200017ac 	.word	0x200017ac
 800d0a0:	200017b0 	.word	0x200017b0
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d0b0:	4b0e      	ldr	r3, [pc, #56]	; (800d0ec <prvGetNextExpireTime+0x44>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <prvGetNextExpireTime+0x16>
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	e000      	b.n	800d0c0 <prvGetNextExpireTime+0x18>
 800d0be:	2200      	movs	r2, #0
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d105      	bne.n	800d0d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0cc:	4b07      	ldr	r3, [pc, #28]	; (800d0ec <prvGetNextExpireTime+0x44>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	e001      	b.n	800d0dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	200017a8 	.word	0x200017a8

0800d0f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0f8:	f7ff fa62 	bl	800c5c0 <xTaskGetTickCount>
 800d0fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0fe:	4b0b      	ldr	r3, [pc, #44]	; (800d12c <prvSampleTimeNow+0x3c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	429a      	cmp	r2, r3
 800d106:	d205      	bcs.n	800d114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d108:	f000 f936 	bl	800d378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	e002      	b.n	800d11a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d11a:	4a04      	ldr	r2, [pc, #16]	; (800d12c <prvSampleTimeNow+0x3c>)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d120:	68fb      	ldr	r3, [r7, #12]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	200017b8 	.word	0x200017b8

0800d130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d13e:	2300      	movs	r3, #0
 800d140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	429a      	cmp	r2, r3
 800d154:	d812      	bhi.n	800d17c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	1ad2      	subs	r2, r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	429a      	cmp	r2, r3
 800d162:	d302      	bcc.n	800d16a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d164:	2301      	movs	r3, #1
 800d166:	617b      	str	r3, [r7, #20]
 800d168:	e01b      	b.n	800d1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d16a:	4b10      	ldr	r3, [pc, #64]	; (800d1ac <prvInsertTimerInActiveList+0x7c>)
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3304      	adds	r3, #4
 800d172:	4619      	mov	r1, r3
 800d174:	4610      	mov	r0, r2
 800d176:	f7fe f912 	bl	800b39e <vListInsert>
 800d17a:	e012      	b.n	800d1a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d206      	bcs.n	800d192 <prvInsertTimerInActiveList+0x62>
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d302      	bcc.n	800d192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d18c:	2301      	movs	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
 800d190:	e007      	b.n	800d1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d192:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <prvInsertTimerInActiveList+0x80>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	3304      	adds	r3, #4
 800d19a:	4619      	mov	r1, r3
 800d19c:	4610      	mov	r0, r2
 800d19e:	f7fe f8fe 	bl	800b39e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d1a2:	697b      	ldr	r3, [r7, #20]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	200017ac 	.word	0x200017ac
 800d1b0:	200017a8 	.word	0x200017a8

0800d1b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08e      	sub	sp, #56	; 0x38
 800d1b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1ba:	e0ca      	b.n	800d352 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	da18      	bge.n	800d1f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d1c2:	1d3b      	adds	r3, r7, #4
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10a      	bne.n	800d1e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	61fb      	str	r3, [r7, #28]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ea:	6850      	ldr	r0, [r2, #4]
 800d1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ee:	6892      	ldr	r2, [r2, #8]
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f2c0 80ab 	blt.w	800d352 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	3304      	adds	r3, #4
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe f8ff 	bl	800b410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d212:	463b      	mov	r3, r7
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff ff6b 	bl	800d0f0 <prvSampleTimeNow>
 800d21a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b09      	cmp	r3, #9
 800d220:	f200 8096 	bhi.w	800d350 <prvProcessReceivedCommands+0x19c>
 800d224:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <prvProcessReceivedCommands+0x78>)
 800d226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22a:	bf00      	nop
 800d22c:	0800d255 	.word	0x0800d255
 800d230:	0800d255 	.word	0x0800d255
 800d234:	0800d255 	.word	0x0800d255
 800d238:	0800d2c9 	.word	0x0800d2c9
 800d23c:	0800d2dd 	.word	0x0800d2dd
 800d240:	0800d327 	.word	0x0800d327
 800d244:	0800d255 	.word	0x0800d255
 800d248:	0800d255 	.word	0x0800d255
 800d24c:	0800d2c9 	.word	0x0800d2c9
 800d250:	0800d2dd 	.word	0x0800d2dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d25a:	f043 0301 	orr.w	r3, r3, #1
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	18d1      	adds	r1, r2, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d274:	f7ff ff5c 	bl	800d130 <prvInsertTimerInActiveList>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d069      	beq.n	800d352 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d284:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d28c:	f003 0304 	and.w	r3, r3, #4
 800d290:	2b00      	cmp	r3, #0
 800d292:	d05e      	beq.n	800d352 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	441a      	add	r2, r3
 800d29c:	2300      	movs	r3, #0
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a6:	f7ff fe05 	bl	800ceb4 <xTimerGenericCommand>
 800d2aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d14f      	bne.n	800d352 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	61bb      	str	r3, [r7, #24]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2ce:	f023 0301 	bic.w	r3, r3, #1
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d2da:	e03a      	b.n	800d352 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2e2:	f043 0301 	orr.w	r3, r3, #1
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10a      	bne.n	800d312 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	617b      	str	r3, [r7, #20]
}
 800d30e:	bf00      	nop
 800d310:	e7fe      	b.n	800d310 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	699a      	ldr	r2, [r3, #24]
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	18d1      	adds	r1, r2, r3
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d320:	f7ff ff06 	bl	800d130 <prvInsertTimerInActiveList>
					break;
 800d324:	e015      	b.n	800d352 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d32c:	f003 0302 	and.w	r3, r3, #2
 800d330:	2b00      	cmp	r3, #0
 800d332:	d103      	bne.n	800d33c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d336:	f000 fbdb 	bl	800daf0 <vPortFree>
 800d33a:	e00a      	b.n	800d352 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d342:	f023 0301 	bic.w	r3, r3, #1
 800d346:	b2da      	uxtb	r2, r3
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d34e:	e000      	b.n	800d352 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <prvProcessReceivedCommands+0x1c0>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	1d39      	adds	r1, r7, #4
 800d358:	2200      	movs	r2, #0
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fe fb5a 	bl	800ba14 <xQueueReceive>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	f47f af2a 	bne.w	800d1bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d368:	bf00      	nop
 800d36a:	bf00      	nop
 800d36c:	3730      	adds	r7, #48	; 0x30
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	200017b0 	.word	0x200017b0

0800d378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d37e:	e048      	b.n	800d412 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d380:	4b2d      	ldr	r3, [pc, #180]	; (800d438 <prvSwitchTimerLists+0xc0>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d38a:	4b2b      	ldr	r3, [pc, #172]	; (800d438 <prvSwitchTimerLists+0xc0>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3304      	adds	r3, #4
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe f839 	bl	800b410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3ac:	f003 0304 	and.w	r3, r3, #4
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d02e      	beq.n	800d412 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d90e      	bls.n	800d3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3d2:	4b19      	ldr	r3, [pc, #100]	; (800d438 <prvSwitchTimerLists+0xc0>)
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f7fd ffde 	bl	800b39e <vListInsert>
 800d3e2:	e016      	b.n	800d412 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	693a      	ldr	r2, [r7, #16]
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f7ff fd60 	bl	800ceb4 <xTimerGenericCommand>
 800d3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10a      	bne.n	800d412 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	603b      	str	r3, [r7, #0]
}
 800d40e:	bf00      	nop
 800d410:	e7fe      	b.n	800d410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d412:	4b09      	ldr	r3, [pc, #36]	; (800d438 <prvSwitchTimerLists+0xc0>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1b1      	bne.n	800d380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d41c:	4b06      	ldr	r3, [pc, #24]	; (800d438 <prvSwitchTimerLists+0xc0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d422:	4b06      	ldr	r3, [pc, #24]	; (800d43c <prvSwitchTimerLists+0xc4>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a04      	ldr	r2, [pc, #16]	; (800d438 <prvSwitchTimerLists+0xc0>)
 800d428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d42a:	4a04      	ldr	r2, [pc, #16]	; (800d43c <prvSwitchTimerLists+0xc4>)
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	6013      	str	r3, [r2, #0]
}
 800d430:	bf00      	nop
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	200017a8 	.word	0x200017a8
 800d43c:	200017ac 	.word	0x200017ac

0800d440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d446:	f000 f965 	bl	800d714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d44a:	4b15      	ldr	r3, [pc, #84]	; (800d4a0 <prvCheckForValidListAndQueue+0x60>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d120      	bne.n	800d494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d452:	4814      	ldr	r0, [pc, #80]	; (800d4a4 <prvCheckForValidListAndQueue+0x64>)
 800d454:	f7fd ff52 	bl	800b2fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d458:	4813      	ldr	r0, [pc, #76]	; (800d4a8 <prvCheckForValidListAndQueue+0x68>)
 800d45a:	f7fd ff4f 	bl	800b2fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d45e:	4b13      	ldr	r3, [pc, #76]	; (800d4ac <prvCheckForValidListAndQueue+0x6c>)
 800d460:	4a10      	ldr	r2, [pc, #64]	; (800d4a4 <prvCheckForValidListAndQueue+0x64>)
 800d462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d464:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <prvCheckForValidListAndQueue+0x70>)
 800d466:	4a10      	ldr	r2, [pc, #64]	; (800d4a8 <prvCheckForValidListAndQueue+0x68>)
 800d468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d46a:	2300      	movs	r3, #0
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	4b11      	ldr	r3, [pc, #68]	; (800d4b4 <prvCheckForValidListAndQueue+0x74>)
 800d470:	4a11      	ldr	r2, [pc, #68]	; (800d4b8 <prvCheckForValidListAndQueue+0x78>)
 800d472:	2110      	movs	r1, #16
 800d474:	200a      	movs	r0, #10
 800d476:	f7fe f85d 	bl	800b534 <xQueueGenericCreateStatic>
 800d47a:	4603      	mov	r3, r0
 800d47c:	4a08      	ldr	r2, [pc, #32]	; (800d4a0 <prvCheckForValidListAndQueue+0x60>)
 800d47e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d480:	4b07      	ldr	r3, [pc, #28]	; (800d4a0 <prvCheckForValidListAndQueue+0x60>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d005      	beq.n	800d494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d488:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <prvCheckForValidListAndQueue+0x60>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	490b      	ldr	r1, [pc, #44]	; (800d4bc <prvCheckForValidListAndQueue+0x7c>)
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe fd30 	bl	800bef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d494:	f000 f96e 	bl	800d774 <vPortExitCritical>
}
 800d498:	bf00      	nop
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	200017b0 	.word	0x200017b0
 800d4a4:	20001780 	.word	0x20001780
 800d4a8:	20001794 	.word	0x20001794
 800d4ac:	200017a8 	.word	0x200017a8
 800d4b0:	200017ac 	.word	0x200017ac
 800d4b4:	2000185c 	.word	0x2000185c
 800d4b8:	200017bc 	.word	0x200017bc
 800d4bc:	08013efc 	.word	0x08013efc

0800d4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3b04      	subs	r3, #4
 800d4d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3b04      	subs	r3, #4
 800d4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f023 0201 	bic.w	r2, r3, #1
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3b04      	subs	r3, #4
 800d4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4f0:	4a0c      	ldr	r2, [pc, #48]	; (800d524 <pxPortInitialiseStack+0x64>)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	3b14      	subs	r3, #20
 800d4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3b04      	subs	r3, #4
 800d506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f06f 0202 	mvn.w	r2, #2
 800d50e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3b20      	subs	r3, #32
 800d514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d516:	68fb      	ldr	r3, [r7, #12]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3714      	adds	r7, #20
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr
 800d524:	0800d529 	.word	0x0800d529

0800d528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d532:	4b12      	ldr	r3, [pc, #72]	; (800d57c <prvTaskExitError+0x54>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53a:	d00a      	beq.n	800d552 <prvTaskExitError+0x2a>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	60fb      	str	r3, [r7, #12]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <prvTaskExitError+0x28>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	60bb      	str	r3, [r7, #8]
}
 800d564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d566:	bf00      	nop
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0fc      	beq.n	800d568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	20000010 	.word	0x20000010

0800d580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d580:	4b07      	ldr	r3, [pc, #28]	; (800d5a0 <pxCurrentTCBConst2>)
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	6808      	ldr	r0, [r1, #0]
 800d586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58a:	f380 8809 	msr	PSP, r0
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8811 	msr	BASEPRI, r0
 800d59a:	4770      	bx	lr
 800d59c:	f3af 8000 	nop.w

0800d5a0 <pxCurrentTCBConst2>:
 800d5a0:	20001280 	.word	0x20001280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop

0800d5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5a8:	4808      	ldr	r0, [pc, #32]	; (800d5cc <prvPortStartFirstTask+0x24>)
 800d5aa:	6800      	ldr	r0, [r0, #0]
 800d5ac:	6800      	ldr	r0, [r0, #0]
 800d5ae:	f380 8808 	msr	MSP, r0
 800d5b2:	f04f 0000 	mov.w	r0, #0
 800d5b6:	f380 8814 	msr	CONTROL, r0
 800d5ba:	b662      	cpsie	i
 800d5bc:	b661      	cpsie	f
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	df00      	svc	0
 800d5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5ca:	bf00      	nop
 800d5cc:	e000ed08 	.word	0xe000ed08

0800d5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5d6:	4b46      	ldr	r3, [pc, #280]	; (800d6f0 <xPortStartScheduler+0x120>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a46      	ldr	r2, [pc, #280]	; (800d6f4 <xPortStartScheduler+0x124>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10a      	bne.n	800d5f6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	613b      	str	r3, [r7, #16]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5f6:	4b3e      	ldr	r3, [pc, #248]	; (800d6f0 <xPortStartScheduler+0x120>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a3f      	ldr	r2, [pc, #252]	; (800d6f8 <xPortStartScheduler+0x128>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d10a      	bne.n	800d616 <xPortStartScheduler+0x46>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	60fb      	str	r3, [r7, #12]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d616:	4b39      	ldr	r3, [pc, #228]	; (800d6fc <xPortStartScheduler+0x12c>)
 800d618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	22ff      	movs	r2, #255	; 0xff
 800d626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	4b31      	ldr	r3, [pc, #196]	; (800d700 <xPortStartScheduler+0x130>)
 800d63c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d63e:	4b31      	ldr	r3, [pc, #196]	; (800d704 <xPortStartScheduler+0x134>)
 800d640:	2207      	movs	r2, #7
 800d642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d644:	e009      	b.n	800d65a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d646:	4b2f      	ldr	r3, [pc, #188]	; (800d704 <xPortStartScheduler+0x134>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	4a2d      	ldr	r2, [pc, #180]	; (800d704 <xPortStartScheduler+0x134>)
 800d64e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d650:	78fb      	ldrb	r3, [r7, #3]
 800d652:	b2db      	uxtb	r3, r3
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d65a:	78fb      	ldrb	r3, [r7, #3]
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d662:	2b80      	cmp	r3, #128	; 0x80
 800d664:	d0ef      	beq.n	800d646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d666:	4b27      	ldr	r3, [pc, #156]	; (800d704 <xPortStartScheduler+0x134>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f1c3 0307 	rsb	r3, r3, #7
 800d66e:	2b04      	cmp	r3, #4
 800d670:	d00a      	beq.n	800d688 <xPortStartScheduler+0xb8>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	60bb      	str	r3, [r7, #8]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d688:	4b1e      	ldr	r3, [pc, #120]	; (800d704 <xPortStartScheduler+0x134>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	021b      	lsls	r3, r3, #8
 800d68e:	4a1d      	ldr	r2, [pc, #116]	; (800d704 <xPortStartScheduler+0x134>)
 800d690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d692:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <xPortStartScheduler+0x134>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d69a:	4a1a      	ldr	r2, [pc, #104]	; (800d704 <xPortStartScheduler+0x134>)
 800d69c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6a6:	4b18      	ldr	r3, [pc, #96]	; (800d708 <xPortStartScheduler+0x138>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a17      	ldr	r2, [pc, #92]	; (800d708 <xPortStartScheduler+0x138>)
 800d6ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6b2:	4b15      	ldr	r3, [pc, #84]	; (800d708 <xPortStartScheduler+0x138>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a14      	ldr	r2, [pc, #80]	; (800d708 <xPortStartScheduler+0x138>)
 800d6b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6be:	f000 f8dd 	bl	800d87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6c2:	4b12      	ldr	r3, [pc, #72]	; (800d70c <xPortStartScheduler+0x13c>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6c8:	f000 f8fc 	bl	800d8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6cc:	4b10      	ldr	r3, [pc, #64]	; (800d710 <xPortStartScheduler+0x140>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a0f      	ldr	r2, [pc, #60]	; (800d710 <xPortStartScheduler+0x140>)
 800d6d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6d8:	f7ff ff66 	bl	800d5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6dc:	f7ff f84c 	bl	800c778 <vTaskSwitchContext>
	prvTaskExitError();
 800d6e0:	f7ff ff22 	bl	800d528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3718      	adds	r7, #24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	e000ed00 	.word	0xe000ed00
 800d6f4:	410fc271 	.word	0x410fc271
 800d6f8:	410fc270 	.word	0x410fc270
 800d6fc:	e000e400 	.word	0xe000e400
 800d700:	200018ac 	.word	0x200018ac
 800d704:	200018b0 	.word	0x200018b0
 800d708:	e000ed20 	.word	0xe000ed20
 800d70c:	20000010 	.word	0x20000010
 800d710:	e000ef34 	.word	0xe000ef34

0800d714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	607b      	str	r3, [r7, #4]
}
 800d72c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d72e:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <vPortEnterCritical+0x58>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3301      	adds	r3, #1
 800d734:	4a0d      	ldr	r2, [pc, #52]	; (800d76c <vPortEnterCritical+0x58>)
 800d736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d738:	4b0c      	ldr	r3, [pc, #48]	; (800d76c <vPortEnterCritical+0x58>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d10f      	bne.n	800d760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d740:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <vPortEnterCritical+0x5c>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00a      	beq.n	800d760 <vPortEnterCritical+0x4c>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	603b      	str	r3, [r7, #0]
}
 800d75c:	bf00      	nop
 800d75e:	e7fe      	b.n	800d75e <vPortEnterCritical+0x4a>
	}
}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr
 800d76c:	20000010 	.word	0x20000010
 800d770:	e000ed04 	.word	0xe000ed04

0800d774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d77a:	4b12      	ldr	r3, [pc, #72]	; (800d7c4 <vPortExitCritical+0x50>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10a      	bne.n	800d798 <vPortExitCritical+0x24>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	607b      	str	r3, [r7, #4]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d798:	4b0a      	ldr	r3, [pc, #40]	; (800d7c4 <vPortExitCritical+0x50>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	4a09      	ldr	r2, [pc, #36]	; (800d7c4 <vPortExitCritical+0x50>)
 800d7a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7a2:	4b08      	ldr	r3, [pc, #32]	; (800d7c4 <vPortExitCritical+0x50>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d105      	bne.n	800d7b6 <vPortExitCritical+0x42>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	f383 8811 	msr	BASEPRI, r3
}
 800d7b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	20000010 	.word	0x20000010
	...

0800d7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7d0:	f3ef 8009 	mrs	r0, PSP
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	4b15      	ldr	r3, [pc, #84]	; (800d830 <pxCurrentTCBConst>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	f01e 0f10 	tst.w	lr, #16
 800d7e0:	bf08      	it	eq
 800d7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ea:	6010      	str	r0, [r2, #0]
 800d7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7f4:	f380 8811 	msr	BASEPRI, r0
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f7fe ffba 	bl	800c778 <vTaskSwitchContext>
 800d804:	f04f 0000 	mov.w	r0, #0
 800d808:	f380 8811 	msr	BASEPRI, r0
 800d80c:	bc09      	pop	{r0, r3}
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	6808      	ldr	r0, [r1, #0]
 800d812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d816:	f01e 0f10 	tst.w	lr, #16
 800d81a:	bf08      	it	eq
 800d81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d820:	f380 8809 	msr	PSP, r0
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w

0800d830 <pxCurrentTCBConst>:
 800d830:	20001280 	.word	0x20001280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop

0800d838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	607b      	str	r3, [r7, #4]
}
 800d850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d852:	f7fe fed7 	bl	800c604 <xTaskIncrementTick>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d85c:	4b06      	ldr	r3, [pc, #24]	; (800d878 <xPortSysTickHandler+0x40>)
 800d85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	2300      	movs	r3, #0
 800d866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	f383 8811 	msr	BASEPRI, r3
}
 800d86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d880:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <vPortSetupTimerInterrupt+0x34>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d886:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <vPortSetupTimerInterrupt+0x38>)
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d88c:	4b0a      	ldr	r3, [pc, #40]	; (800d8b8 <vPortSetupTimerInterrupt+0x3c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a0a      	ldr	r2, [pc, #40]	; (800d8bc <vPortSetupTimerInterrupt+0x40>)
 800d892:	fba2 2303 	umull	r2, r3, r2, r3
 800d896:	099b      	lsrs	r3, r3, #6
 800d898:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <vPortSetupTimerInterrupt+0x44>)
 800d89a:	3b01      	subs	r3, #1
 800d89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d89e:	4b04      	ldr	r3, [pc, #16]	; (800d8b0 <vPortSetupTimerInterrupt+0x34>)
 800d8a0:	2207      	movs	r2, #7
 800d8a2:	601a      	str	r2, [r3, #0]
}
 800d8a4:	bf00      	nop
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	e000e010 	.word	0xe000e010
 800d8b4:	e000e018 	.word	0xe000e018
 800d8b8:	20000004 	.word	0x20000004
 800d8bc:	10624dd3 	.word	0x10624dd3
 800d8c0:	e000e014 	.word	0xe000e014

0800d8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8d4 <vPortEnableVFP+0x10>
 800d8c8:	6801      	ldr	r1, [r0, #0]
 800d8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8ce:	6001      	str	r1, [r0, #0]
 800d8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8d2:	bf00      	nop
 800d8d4:	e000ed88 	.word	0xe000ed88

0800d8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8de:	f3ef 8305 	mrs	r3, IPSR
 800d8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b0f      	cmp	r3, #15
 800d8e8:	d914      	bls.n	800d914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ea:	4a17      	ldr	r2, [pc, #92]	; (800d948 <vPortValidateInterruptPriority+0x70>)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8f4:	4b15      	ldr	r3, [pc, #84]	; (800d94c <vPortValidateInterruptPriority+0x74>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	7afa      	ldrb	r2, [r7, #11]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d20a      	bcs.n	800d914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	607b      	str	r3, [r7, #4]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d914:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <vPortValidateInterruptPriority+0x78>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d91c:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <vPortValidateInterruptPriority+0x7c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	429a      	cmp	r2, r3
 800d922:	d90a      	bls.n	800d93a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	603b      	str	r3, [r7, #0]
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <vPortValidateInterruptPriority+0x60>
	}
 800d93a:	bf00      	nop
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	e000e3f0 	.word	0xe000e3f0
 800d94c:	200018ac 	.word	0x200018ac
 800d950:	e000ed0c 	.word	0xe000ed0c
 800d954:	200018b0 	.word	0x200018b0

0800d958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08a      	sub	sp, #40	; 0x28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d964:	f7fe fd80 	bl	800c468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d968:	4b5b      	ldr	r3, [pc, #364]	; (800dad8 <pvPortMalloc+0x180>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d970:	f000 f920 	bl	800dbb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d974:	4b59      	ldr	r3, [pc, #356]	; (800dadc <pvPortMalloc+0x184>)
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4013      	ands	r3, r2
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f040 8093 	bne.w	800daa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01d      	beq.n	800d9c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d988:	2208      	movs	r2, #8
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4413      	add	r3, r2
 800d98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	2b00      	cmp	r3, #0
 800d998:	d014      	beq.n	800d9c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f023 0307 	bic.w	r3, r3, #7
 800d9a0:	3308      	adds	r3, #8
 800d9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f003 0307 	and.w	r3, r3, #7
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00a      	beq.n	800d9c4 <pvPortMalloc+0x6c>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	617b      	str	r3, [r7, #20]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d06e      	beq.n	800daa8 <pvPortMalloc+0x150>
 800d9ca:	4b45      	ldr	r3, [pc, #276]	; (800dae0 <pvPortMalloc+0x188>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d869      	bhi.n	800daa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9d4:	4b43      	ldr	r3, [pc, #268]	; (800dae4 <pvPortMalloc+0x18c>)
 800d9d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9d8:	4b42      	ldr	r3, [pc, #264]	; (800dae4 <pvPortMalloc+0x18c>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9de:	e004      	b.n	800d9ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d903      	bls.n	800d9fc <pvPortMalloc+0xa4>
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f1      	bne.n	800d9e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9fc:	4b36      	ldr	r3, [pc, #216]	; (800dad8 <pvPortMalloc+0x180>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da02:	429a      	cmp	r2, r3
 800da04:	d050      	beq.n	800daa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da06:	6a3b      	ldr	r3, [r7, #32]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2208      	movs	r2, #8
 800da0c:	4413      	add	r3, r2
 800da0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	1ad2      	subs	r2, r2, r3
 800da20:	2308      	movs	r3, #8
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	429a      	cmp	r2, r3
 800da26:	d91f      	bls.n	800da68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4413      	add	r3, r2
 800da2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00a      	beq.n	800da50 <pvPortMalloc+0xf8>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	613b      	str	r3, [r7, #16]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	685a      	ldr	r2, [r3, #4]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da62:	69b8      	ldr	r0, [r7, #24]
 800da64:	f000 f908 	bl	800dc78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da68:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <pvPortMalloc+0x188>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	4a1b      	ldr	r2, [pc, #108]	; (800dae0 <pvPortMalloc+0x188>)
 800da74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da76:	4b1a      	ldr	r3, [pc, #104]	; (800dae0 <pvPortMalloc+0x188>)
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	4b1b      	ldr	r3, [pc, #108]	; (800dae8 <pvPortMalloc+0x190>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d203      	bcs.n	800da8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da82:	4b17      	ldr	r3, [pc, #92]	; (800dae0 <pvPortMalloc+0x188>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a18      	ldr	r2, [pc, #96]	; (800dae8 <pvPortMalloc+0x190>)
 800da88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <pvPortMalloc+0x184>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	431a      	orrs	r2, r3
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da9e:	4b13      	ldr	r3, [pc, #76]	; (800daec <pvPortMalloc+0x194>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3301      	adds	r3, #1
 800daa4:	4a11      	ldr	r2, [pc, #68]	; (800daec <pvPortMalloc+0x194>)
 800daa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800daa8:	f7fe fcec 	bl	800c484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00a      	beq.n	800dacc <pvPortMalloc+0x174>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	60fb      	str	r3, [r7, #12]
}
 800dac8:	bf00      	nop
 800daca:	e7fe      	b.n	800daca <pvPortMalloc+0x172>
	return pvReturn;
 800dacc:	69fb      	ldr	r3, [r7, #28]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3728      	adds	r7, #40	; 0x28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20007014 	.word	0x20007014
 800dadc:	20007028 	.word	0x20007028
 800dae0:	20007018 	.word	0x20007018
 800dae4:	2000700c 	.word	0x2000700c
 800dae8:	2000701c 	.word	0x2000701c
 800daec:	20007020 	.word	0x20007020

0800daf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d04d      	beq.n	800db9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db02:	2308      	movs	r3, #8
 800db04:	425b      	negs	r3, r3
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	4413      	add	r3, r2
 800db0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	685a      	ldr	r2, [r3, #4]
 800db14:	4b24      	ldr	r3, [pc, #144]	; (800dba8 <vPortFree+0xb8>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4013      	ands	r3, r2
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10a      	bne.n	800db34 <vPortFree+0x44>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	60fb      	str	r3, [r7, #12]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00a      	beq.n	800db52 <vPortFree+0x62>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	60bb      	str	r3, [r7, #8]
}
 800db4e:	bf00      	nop
 800db50:	e7fe      	b.n	800db50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	685a      	ldr	r2, [r3, #4]
 800db56:	4b14      	ldr	r3, [pc, #80]	; (800dba8 <vPortFree+0xb8>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4013      	ands	r3, r2
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01e      	beq.n	800db9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d11a      	bne.n	800db9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	4b0e      	ldr	r3, [pc, #56]	; (800dba8 <vPortFree+0xb8>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	43db      	mvns	r3, r3
 800db72:	401a      	ands	r2, r3
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db78:	f7fe fc76 	bl	800c468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	4b0a      	ldr	r3, [pc, #40]	; (800dbac <vPortFree+0xbc>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4413      	add	r3, r2
 800db86:	4a09      	ldr	r2, [pc, #36]	; (800dbac <vPortFree+0xbc>)
 800db88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db8a:	6938      	ldr	r0, [r7, #16]
 800db8c:	f000 f874 	bl	800dc78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db90:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <vPortFree+0xc0>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3301      	adds	r3, #1
 800db96:	4a06      	ldr	r2, [pc, #24]	; (800dbb0 <vPortFree+0xc0>)
 800db98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db9a:	f7fe fc73 	bl	800c484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db9e:	bf00      	nop
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20007028 	.word	0x20007028
 800dbac:	20007018 	.word	0x20007018
 800dbb0:	20007024 	.word	0x20007024

0800dbb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbba:	f245 7358 	movw	r3, #22360	; 0x5758
 800dbbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dbc0:	4b27      	ldr	r3, [pc, #156]	; (800dc60 <prvHeapInit+0xac>)
 800dbc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f003 0307 	and.w	r3, r3, #7
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00c      	beq.n	800dbe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3307      	adds	r3, #7
 800dbd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f023 0307 	bic.w	r3, r3, #7
 800dbda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	4a1f      	ldr	r2, [pc, #124]	; (800dc60 <prvHeapInit+0xac>)
 800dbe4:	4413      	add	r3, r2
 800dbe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbec:	4a1d      	ldr	r2, [pc, #116]	; (800dc64 <prvHeapInit+0xb0>)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbf2:	4b1c      	ldr	r3, [pc, #112]	; (800dc64 <prvHeapInit+0xb0>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc00:	2208      	movs	r2, #8
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f023 0307 	bic.w	r3, r3, #7
 800dc0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	4a15      	ldr	r2, [pc, #84]	; (800dc68 <prvHeapInit+0xb4>)
 800dc14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc16:	4b14      	ldr	r3, [pc, #80]	; (800dc68 <prvHeapInit+0xb4>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc1e:	4b12      	ldr	r3, [pc, #72]	; (800dc68 <prvHeapInit+0xb4>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	1ad2      	subs	r2, r2, r3
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc34:	4b0c      	ldr	r3, [pc, #48]	; (800dc68 <prvHeapInit+0xb4>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <prvHeapInit+0xb8>)
 800dc42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	4a09      	ldr	r2, [pc, #36]	; (800dc70 <prvHeapInit+0xbc>)
 800dc4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc4c:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <prvHeapInit+0xc0>)
 800dc4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc52:	601a      	str	r2, [r3, #0]
}
 800dc54:	bf00      	nop
 800dc56:	3714      	adds	r7, #20
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	200018b4 	.word	0x200018b4
 800dc64:	2000700c 	.word	0x2000700c
 800dc68:	20007014 	.word	0x20007014
 800dc6c:	2000701c 	.word	0x2000701c
 800dc70:	20007018 	.word	0x20007018
 800dc74:	20007028 	.word	0x20007028

0800dc78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc80:	4b28      	ldr	r3, [pc, #160]	; (800dd24 <prvInsertBlockIntoFreeList+0xac>)
 800dc82:	60fb      	str	r3, [r7, #12]
 800dc84:	e002      	b.n	800dc8c <prvInsertBlockIntoFreeList+0x14>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60fb      	str	r3, [r7, #12]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d8f7      	bhi.n	800dc86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	4413      	add	r3, r2
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d108      	bne.n	800dcba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	441a      	add	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	441a      	add	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d118      	bne.n	800dd00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <prvInsertBlockIntoFreeList+0xb0>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d00d      	beq.n	800dcf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	685a      	ldr	r2, [r3, #4]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	441a      	add	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	e008      	b.n	800dd08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcf6:	4b0c      	ldr	r3, [pc, #48]	; (800dd28 <prvInsertBlockIntoFreeList+0xb0>)
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	e003      	b.n	800dd08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d002      	beq.n	800dd16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd16:	bf00      	nop
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	2000700c 	.word	0x2000700c
 800dd28:	20007014 	.word	0x20007014

0800dd2c <_calloc_r>:
 800dd2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd2e:	fba1 2402 	umull	r2, r4, r1, r2
 800dd32:	b94c      	cbnz	r4, 800dd48 <_calloc_r+0x1c>
 800dd34:	4611      	mov	r1, r2
 800dd36:	9201      	str	r2, [sp, #4]
 800dd38:	f000 f82e 	bl	800dd98 <_malloc_r>
 800dd3c:	9a01      	ldr	r2, [sp, #4]
 800dd3e:	4605      	mov	r5, r0
 800dd40:	b930      	cbnz	r0, 800dd50 <_calloc_r+0x24>
 800dd42:	4628      	mov	r0, r5
 800dd44:	b003      	add	sp, #12
 800dd46:	bd30      	pop	{r4, r5, pc}
 800dd48:	220c      	movs	r2, #12
 800dd4a:	6002      	str	r2, [r0, #0]
 800dd4c:	2500      	movs	r5, #0
 800dd4e:	e7f8      	b.n	800dd42 <_calloc_r+0x16>
 800dd50:	4621      	mov	r1, r4
 800dd52:	f001 f864 	bl	800ee1e <memset>
 800dd56:	e7f4      	b.n	800dd42 <_calloc_r+0x16>

0800dd58 <sbrk_aligned>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	4e0e      	ldr	r6, [pc, #56]	; (800dd94 <sbrk_aligned+0x3c>)
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	6831      	ldr	r1, [r6, #0]
 800dd60:	4605      	mov	r5, r0
 800dd62:	b911      	cbnz	r1, 800dd6a <sbrk_aligned+0x12>
 800dd64:	f001 f8f2 	bl	800ef4c <_sbrk_r>
 800dd68:	6030      	str	r0, [r6, #0]
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f001 f8ed 	bl	800ef4c <_sbrk_r>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	d00a      	beq.n	800dd8c <sbrk_aligned+0x34>
 800dd76:	1cc4      	adds	r4, r0, #3
 800dd78:	f024 0403 	bic.w	r4, r4, #3
 800dd7c:	42a0      	cmp	r0, r4
 800dd7e:	d007      	beq.n	800dd90 <sbrk_aligned+0x38>
 800dd80:	1a21      	subs	r1, r4, r0
 800dd82:	4628      	mov	r0, r5
 800dd84:	f001 f8e2 	bl	800ef4c <_sbrk_r>
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d101      	bne.n	800dd90 <sbrk_aligned+0x38>
 800dd8c:	f04f 34ff 	mov.w	r4, #4294967295
 800dd90:	4620      	mov	r0, r4
 800dd92:	bd70      	pop	{r4, r5, r6, pc}
 800dd94:	20007030 	.word	0x20007030

0800dd98 <_malloc_r>:
 800dd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd9c:	1ccd      	adds	r5, r1, #3
 800dd9e:	f025 0503 	bic.w	r5, r5, #3
 800dda2:	3508      	adds	r5, #8
 800dda4:	2d0c      	cmp	r5, #12
 800dda6:	bf38      	it	cc
 800dda8:	250c      	movcc	r5, #12
 800ddaa:	2d00      	cmp	r5, #0
 800ddac:	4607      	mov	r7, r0
 800ddae:	db01      	blt.n	800ddb4 <_malloc_r+0x1c>
 800ddb0:	42a9      	cmp	r1, r5
 800ddb2:	d905      	bls.n	800ddc0 <_malloc_r+0x28>
 800ddb4:	230c      	movs	r3, #12
 800ddb6:	603b      	str	r3, [r7, #0]
 800ddb8:	2600      	movs	r6, #0
 800ddba:	4630      	mov	r0, r6
 800ddbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800de94 <_malloc_r+0xfc>
 800ddc4:	f000 f868 	bl	800de98 <__malloc_lock>
 800ddc8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddcc:	461c      	mov	r4, r3
 800ddce:	bb5c      	cbnz	r4, 800de28 <_malloc_r+0x90>
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	f7ff ffc0 	bl	800dd58 <sbrk_aligned>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	4604      	mov	r4, r0
 800dddc:	d155      	bne.n	800de8a <_malloc_r+0xf2>
 800ddde:	f8d8 4000 	ldr.w	r4, [r8]
 800dde2:	4626      	mov	r6, r4
 800dde4:	2e00      	cmp	r6, #0
 800dde6:	d145      	bne.n	800de74 <_malloc_r+0xdc>
 800dde8:	2c00      	cmp	r4, #0
 800ddea:	d048      	beq.n	800de7e <_malloc_r+0xe6>
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	4631      	mov	r1, r6
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	eb04 0903 	add.w	r9, r4, r3
 800ddf6:	f001 f8a9 	bl	800ef4c <_sbrk_r>
 800ddfa:	4581      	cmp	r9, r0
 800ddfc:	d13f      	bne.n	800de7e <_malloc_r+0xe6>
 800ddfe:	6821      	ldr	r1, [r4, #0]
 800de00:	1a6d      	subs	r5, r5, r1
 800de02:	4629      	mov	r1, r5
 800de04:	4638      	mov	r0, r7
 800de06:	f7ff ffa7 	bl	800dd58 <sbrk_aligned>
 800de0a:	3001      	adds	r0, #1
 800de0c:	d037      	beq.n	800de7e <_malloc_r+0xe6>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	442b      	add	r3, r5
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	f8d8 3000 	ldr.w	r3, [r8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d038      	beq.n	800de8e <_malloc_r+0xf6>
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	42a2      	cmp	r2, r4
 800de20:	d12b      	bne.n	800de7a <_malloc_r+0xe2>
 800de22:	2200      	movs	r2, #0
 800de24:	605a      	str	r2, [r3, #4]
 800de26:	e00f      	b.n	800de48 <_malloc_r+0xb0>
 800de28:	6822      	ldr	r2, [r4, #0]
 800de2a:	1b52      	subs	r2, r2, r5
 800de2c:	d41f      	bmi.n	800de6e <_malloc_r+0xd6>
 800de2e:	2a0b      	cmp	r2, #11
 800de30:	d917      	bls.n	800de62 <_malloc_r+0xca>
 800de32:	1961      	adds	r1, r4, r5
 800de34:	42a3      	cmp	r3, r4
 800de36:	6025      	str	r5, [r4, #0]
 800de38:	bf18      	it	ne
 800de3a:	6059      	strne	r1, [r3, #4]
 800de3c:	6863      	ldr	r3, [r4, #4]
 800de3e:	bf08      	it	eq
 800de40:	f8c8 1000 	streq.w	r1, [r8]
 800de44:	5162      	str	r2, [r4, r5]
 800de46:	604b      	str	r3, [r1, #4]
 800de48:	4638      	mov	r0, r7
 800de4a:	f104 060b 	add.w	r6, r4, #11
 800de4e:	f000 f829 	bl	800dea4 <__malloc_unlock>
 800de52:	f026 0607 	bic.w	r6, r6, #7
 800de56:	1d23      	adds	r3, r4, #4
 800de58:	1af2      	subs	r2, r6, r3
 800de5a:	d0ae      	beq.n	800ddba <_malloc_r+0x22>
 800de5c:	1b9b      	subs	r3, r3, r6
 800de5e:	50a3      	str	r3, [r4, r2]
 800de60:	e7ab      	b.n	800ddba <_malloc_r+0x22>
 800de62:	42a3      	cmp	r3, r4
 800de64:	6862      	ldr	r2, [r4, #4]
 800de66:	d1dd      	bne.n	800de24 <_malloc_r+0x8c>
 800de68:	f8c8 2000 	str.w	r2, [r8]
 800de6c:	e7ec      	b.n	800de48 <_malloc_r+0xb0>
 800de6e:	4623      	mov	r3, r4
 800de70:	6864      	ldr	r4, [r4, #4]
 800de72:	e7ac      	b.n	800ddce <_malloc_r+0x36>
 800de74:	4634      	mov	r4, r6
 800de76:	6876      	ldr	r6, [r6, #4]
 800de78:	e7b4      	b.n	800dde4 <_malloc_r+0x4c>
 800de7a:	4613      	mov	r3, r2
 800de7c:	e7cc      	b.n	800de18 <_malloc_r+0x80>
 800de7e:	230c      	movs	r3, #12
 800de80:	603b      	str	r3, [r7, #0]
 800de82:	4638      	mov	r0, r7
 800de84:	f000 f80e 	bl	800dea4 <__malloc_unlock>
 800de88:	e797      	b.n	800ddba <_malloc_r+0x22>
 800de8a:	6025      	str	r5, [r4, #0]
 800de8c:	e7dc      	b.n	800de48 <_malloc_r+0xb0>
 800de8e:	605b      	str	r3, [r3, #4]
 800de90:	deff      	udf	#255	; 0xff
 800de92:	bf00      	nop
 800de94:	2000702c 	.word	0x2000702c

0800de98 <__malloc_lock>:
 800de98:	4801      	ldr	r0, [pc, #4]	; (800dea0 <__malloc_lock+0x8>)
 800de9a:	f001 b8a3 	b.w	800efe4 <__retarget_lock_acquire_recursive>
 800de9e:	bf00      	nop
 800dea0:	20007174 	.word	0x20007174

0800dea4 <__malloc_unlock>:
 800dea4:	4801      	ldr	r0, [pc, #4]	; (800deac <__malloc_unlock+0x8>)
 800dea6:	f001 b89e 	b.w	800efe6 <__retarget_lock_release_recursive>
 800deaa:	bf00      	nop
 800deac:	20007174 	.word	0x20007174

0800deb0 <__cvt>:
 800deb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800deb4:	ec55 4b10 	vmov	r4, r5, d0
 800deb8:	2d00      	cmp	r5, #0
 800deba:	460e      	mov	r6, r1
 800debc:	4619      	mov	r1, r3
 800debe:	462b      	mov	r3, r5
 800dec0:	bfbb      	ittet	lt
 800dec2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dec6:	461d      	movlt	r5, r3
 800dec8:	2300      	movge	r3, #0
 800deca:	232d      	movlt	r3, #45	; 0x2d
 800decc:	700b      	strb	r3, [r1, #0]
 800dece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ded0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ded4:	4691      	mov	r9, r2
 800ded6:	f023 0820 	bic.w	r8, r3, #32
 800deda:	bfbc      	itt	lt
 800dedc:	4622      	movlt	r2, r4
 800dede:	4614      	movlt	r4, r2
 800dee0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dee4:	d005      	beq.n	800def2 <__cvt+0x42>
 800dee6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800deea:	d100      	bne.n	800deee <__cvt+0x3e>
 800deec:	3601      	adds	r6, #1
 800deee:	2102      	movs	r1, #2
 800def0:	e000      	b.n	800def4 <__cvt+0x44>
 800def2:	2103      	movs	r1, #3
 800def4:	ab03      	add	r3, sp, #12
 800def6:	9301      	str	r3, [sp, #4]
 800def8:	ab02      	add	r3, sp, #8
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	ec45 4b10 	vmov	d0, r4, r5
 800df00:	4653      	mov	r3, sl
 800df02:	4632      	mov	r2, r6
 800df04:	f001 f90c 	bl	800f120 <_dtoa_r>
 800df08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df0c:	4607      	mov	r7, r0
 800df0e:	d102      	bne.n	800df16 <__cvt+0x66>
 800df10:	f019 0f01 	tst.w	r9, #1
 800df14:	d022      	beq.n	800df5c <__cvt+0xac>
 800df16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df1a:	eb07 0906 	add.w	r9, r7, r6
 800df1e:	d110      	bne.n	800df42 <__cvt+0x92>
 800df20:	783b      	ldrb	r3, [r7, #0]
 800df22:	2b30      	cmp	r3, #48	; 0x30
 800df24:	d10a      	bne.n	800df3c <__cvt+0x8c>
 800df26:	2200      	movs	r2, #0
 800df28:	2300      	movs	r3, #0
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	f7f2 fdeb 	bl	8000b08 <__aeabi_dcmpeq>
 800df32:	b918      	cbnz	r0, 800df3c <__cvt+0x8c>
 800df34:	f1c6 0601 	rsb	r6, r6, #1
 800df38:	f8ca 6000 	str.w	r6, [sl]
 800df3c:	f8da 3000 	ldr.w	r3, [sl]
 800df40:	4499      	add	r9, r3
 800df42:	2200      	movs	r2, #0
 800df44:	2300      	movs	r3, #0
 800df46:	4620      	mov	r0, r4
 800df48:	4629      	mov	r1, r5
 800df4a:	f7f2 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 800df4e:	b108      	cbz	r0, 800df54 <__cvt+0xa4>
 800df50:	f8cd 900c 	str.w	r9, [sp, #12]
 800df54:	2230      	movs	r2, #48	; 0x30
 800df56:	9b03      	ldr	r3, [sp, #12]
 800df58:	454b      	cmp	r3, r9
 800df5a:	d307      	bcc.n	800df6c <__cvt+0xbc>
 800df5c:	9b03      	ldr	r3, [sp, #12]
 800df5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df60:	1bdb      	subs	r3, r3, r7
 800df62:	4638      	mov	r0, r7
 800df64:	6013      	str	r3, [r2, #0]
 800df66:	b004      	add	sp, #16
 800df68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df6c:	1c59      	adds	r1, r3, #1
 800df6e:	9103      	str	r1, [sp, #12]
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	e7f0      	b.n	800df56 <__cvt+0xa6>

0800df74 <__exponent>:
 800df74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df76:	4603      	mov	r3, r0
 800df78:	2900      	cmp	r1, #0
 800df7a:	bfb8      	it	lt
 800df7c:	4249      	neglt	r1, r1
 800df7e:	f803 2b02 	strb.w	r2, [r3], #2
 800df82:	bfb4      	ite	lt
 800df84:	222d      	movlt	r2, #45	; 0x2d
 800df86:	222b      	movge	r2, #43	; 0x2b
 800df88:	2909      	cmp	r1, #9
 800df8a:	7042      	strb	r2, [r0, #1]
 800df8c:	dd2a      	ble.n	800dfe4 <__exponent+0x70>
 800df8e:	f10d 0207 	add.w	r2, sp, #7
 800df92:	4617      	mov	r7, r2
 800df94:	260a      	movs	r6, #10
 800df96:	4694      	mov	ip, r2
 800df98:	fb91 f5f6 	sdiv	r5, r1, r6
 800df9c:	fb06 1415 	mls	r4, r6, r5, r1
 800dfa0:	3430      	adds	r4, #48	; 0x30
 800dfa2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	2c63      	cmp	r4, #99	; 0x63
 800dfaa:	f102 32ff 	add.w	r2, r2, #4294967295
 800dfae:	4629      	mov	r1, r5
 800dfb0:	dcf1      	bgt.n	800df96 <__exponent+0x22>
 800dfb2:	3130      	adds	r1, #48	; 0x30
 800dfb4:	f1ac 0402 	sub.w	r4, ip, #2
 800dfb8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dfbc:	1c41      	adds	r1, r0, #1
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	42ba      	cmp	r2, r7
 800dfc2:	d30a      	bcc.n	800dfda <__exponent+0x66>
 800dfc4:	f10d 0209 	add.w	r2, sp, #9
 800dfc8:	eba2 020c 	sub.w	r2, r2, ip
 800dfcc:	42bc      	cmp	r4, r7
 800dfce:	bf88      	it	hi
 800dfd0:	2200      	movhi	r2, #0
 800dfd2:	4413      	add	r3, r2
 800dfd4:	1a18      	subs	r0, r3, r0
 800dfd6:	b003      	add	sp, #12
 800dfd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfda:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dfde:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dfe2:	e7ed      	b.n	800dfc0 <__exponent+0x4c>
 800dfe4:	2330      	movs	r3, #48	; 0x30
 800dfe6:	3130      	adds	r1, #48	; 0x30
 800dfe8:	7083      	strb	r3, [r0, #2]
 800dfea:	70c1      	strb	r1, [r0, #3]
 800dfec:	1d03      	adds	r3, r0, #4
 800dfee:	e7f1      	b.n	800dfd4 <__exponent+0x60>

0800dff0 <_printf_float>:
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	ed2d 8b02 	vpush	{d8}
 800dff8:	b08d      	sub	sp, #52	; 0x34
 800dffa:	460c      	mov	r4, r1
 800dffc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e000:	4616      	mov	r6, r2
 800e002:	461f      	mov	r7, r3
 800e004:	4605      	mov	r5, r0
 800e006:	f000 ff13 	bl	800ee30 <_localeconv_r>
 800e00a:	f8d0 a000 	ldr.w	sl, [r0]
 800e00e:	4650      	mov	r0, sl
 800e010:	f7f2 f94e 	bl	80002b0 <strlen>
 800e014:	2300      	movs	r3, #0
 800e016:	930a      	str	r3, [sp, #40]	; 0x28
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	9305      	str	r3, [sp, #20]
 800e01c:	f8d8 3000 	ldr.w	r3, [r8]
 800e020:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e024:	3307      	adds	r3, #7
 800e026:	f023 0307 	bic.w	r3, r3, #7
 800e02a:	f103 0208 	add.w	r2, r3, #8
 800e02e:	f8c8 2000 	str.w	r2, [r8]
 800e032:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e03a:	9307      	str	r3, [sp, #28]
 800e03c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e040:	ee08 0a10 	vmov	s16, r0
 800e044:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e04c:	4b9e      	ldr	r3, [pc, #632]	; (800e2c8 <_printf_float+0x2d8>)
 800e04e:	f04f 32ff 	mov.w	r2, #4294967295
 800e052:	f7f2 fd8b 	bl	8000b6c <__aeabi_dcmpun>
 800e056:	bb88      	cbnz	r0, 800e0bc <_printf_float+0xcc>
 800e058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e05c:	4b9a      	ldr	r3, [pc, #616]	; (800e2c8 <_printf_float+0x2d8>)
 800e05e:	f04f 32ff 	mov.w	r2, #4294967295
 800e062:	f7f2 fd65 	bl	8000b30 <__aeabi_dcmple>
 800e066:	bb48      	cbnz	r0, 800e0bc <_printf_float+0xcc>
 800e068:	2200      	movs	r2, #0
 800e06a:	2300      	movs	r3, #0
 800e06c:	4640      	mov	r0, r8
 800e06e:	4649      	mov	r1, r9
 800e070:	f7f2 fd54 	bl	8000b1c <__aeabi_dcmplt>
 800e074:	b110      	cbz	r0, 800e07c <_printf_float+0x8c>
 800e076:	232d      	movs	r3, #45	; 0x2d
 800e078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e07c:	4a93      	ldr	r2, [pc, #588]	; (800e2cc <_printf_float+0x2dc>)
 800e07e:	4b94      	ldr	r3, [pc, #592]	; (800e2d0 <_printf_float+0x2e0>)
 800e080:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e084:	bf94      	ite	ls
 800e086:	4690      	movls	r8, r2
 800e088:	4698      	movhi	r8, r3
 800e08a:	2303      	movs	r3, #3
 800e08c:	6123      	str	r3, [r4, #16]
 800e08e:	9b05      	ldr	r3, [sp, #20]
 800e090:	f023 0304 	bic.w	r3, r3, #4
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	f04f 0900 	mov.w	r9, #0
 800e09a:	9700      	str	r7, [sp, #0]
 800e09c:	4633      	mov	r3, r6
 800e09e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f000 f9da 	bl	800e45c <_printf_common>
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	f040 8090 	bne.w	800e1ce <_printf_float+0x1de>
 800e0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b2:	b00d      	add	sp, #52	; 0x34
 800e0b4:	ecbd 8b02 	vpop	{d8}
 800e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0bc:	4642      	mov	r2, r8
 800e0be:	464b      	mov	r3, r9
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	4649      	mov	r1, r9
 800e0c4:	f7f2 fd52 	bl	8000b6c <__aeabi_dcmpun>
 800e0c8:	b140      	cbz	r0, 800e0dc <_printf_float+0xec>
 800e0ca:	464b      	mov	r3, r9
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	bfbc      	itt	lt
 800e0d0:	232d      	movlt	r3, #45	; 0x2d
 800e0d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e0d6:	4a7f      	ldr	r2, [pc, #508]	; (800e2d4 <_printf_float+0x2e4>)
 800e0d8:	4b7f      	ldr	r3, [pc, #508]	; (800e2d8 <_printf_float+0x2e8>)
 800e0da:	e7d1      	b.n	800e080 <_printf_float+0x90>
 800e0dc:	6863      	ldr	r3, [r4, #4]
 800e0de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e0e2:	9206      	str	r2, [sp, #24]
 800e0e4:	1c5a      	adds	r2, r3, #1
 800e0e6:	d13f      	bne.n	800e168 <_printf_float+0x178>
 800e0e8:	2306      	movs	r3, #6
 800e0ea:	6063      	str	r3, [r4, #4]
 800e0ec:	9b05      	ldr	r3, [sp, #20]
 800e0ee:	6861      	ldr	r1, [r4, #4]
 800e0f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	9303      	str	r3, [sp, #12]
 800e0f8:	ab0a      	add	r3, sp, #40	; 0x28
 800e0fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0fe:	ab09      	add	r3, sp, #36	; 0x24
 800e100:	ec49 8b10 	vmov	d0, r8, r9
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e10c:	4628      	mov	r0, r5
 800e10e:	f7ff fecf 	bl	800deb0 <__cvt>
 800e112:	9b06      	ldr	r3, [sp, #24]
 800e114:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e116:	2b47      	cmp	r3, #71	; 0x47
 800e118:	4680      	mov	r8, r0
 800e11a:	d108      	bne.n	800e12e <_printf_float+0x13e>
 800e11c:	1cc8      	adds	r0, r1, #3
 800e11e:	db02      	blt.n	800e126 <_printf_float+0x136>
 800e120:	6863      	ldr	r3, [r4, #4]
 800e122:	4299      	cmp	r1, r3
 800e124:	dd41      	ble.n	800e1aa <_printf_float+0x1ba>
 800e126:	f1ab 0302 	sub.w	r3, fp, #2
 800e12a:	fa5f fb83 	uxtb.w	fp, r3
 800e12e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e132:	d820      	bhi.n	800e176 <_printf_float+0x186>
 800e134:	3901      	subs	r1, #1
 800e136:	465a      	mov	r2, fp
 800e138:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e13c:	9109      	str	r1, [sp, #36]	; 0x24
 800e13e:	f7ff ff19 	bl	800df74 <__exponent>
 800e142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e144:	1813      	adds	r3, r2, r0
 800e146:	2a01      	cmp	r2, #1
 800e148:	4681      	mov	r9, r0
 800e14a:	6123      	str	r3, [r4, #16]
 800e14c:	dc02      	bgt.n	800e154 <_printf_float+0x164>
 800e14e:	6822      	ldr	r2, [r4, #0]
 800e150:	07d2      	lsls	r2, r2, #31
 800e152:	d501      	bpl.n	800e158 <_printf_float+0x168>
 800e154:	3301      	adds	r3, #1
 800e156:	6123      	str	r3, [r4, #16]
 800e158:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d09c      	beq.n	800e09a <_printf_float+0xaa>
 800e160:	232d      	movs	r3, #45	; 0x2d
 800e162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e166:	e798      	b.n	800e09a <_printf_float+0xaa>
 800e168:	9a06      	ldr	r2, [sp, #24]
 800e16a:	2a47      	cmp	r2, #71	; 0x47
 800e16c:	d1be      	bne.n	800e0ec <_printf_float+0xfc>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1bc      	bne.n	800e0ec <_printf_float+0xfc>
 800e172:	2301      	movs	r3, #1
 800e174:	e7b9      	b.n	800e0ea <_printf_float+0xfa>
 800e176:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e17a:	d118      	bne.n	800e1ae <_printf_float+0x1be>
 800e17c:	2900      	cmp	r1, #0
 800e17e:	6863      	ldr	r3, [r4, #4]
 800e180:	dd0b      	ble.n	800e19a <_printf_float+0x1aa>
 800e182:	6121      	str	r1, [r4, #16]
 800e184:	b913      	cbnz	r3, 800e18c <_printf_float+0x19c>
 800e186:	6822      	ldr	r2, [r4, #0]
 800e188:	07d0      	lsls	r0, r2, #31
 800e18a:	d502      	bpl.n	800e192 <_printf_float+0x1a2>
 800e18c:	3301      	adds	r3, #1
 800e18e:	440b      	add	r3, r1
 800e190:	6123      	str	r3, [r4, #16]
 800e192:	65a1      	str	r1, [r4, #88]	; 0x58
 800e194:	f04f 0900 	mov.w	r9, #0
 800e198:	e7de      	b.n	800e158 <_printf_float+0x168>
 800e19a:	b913      	cbnz	r3, 800e1a2 <_printf_float+0x1b2>
 800e19c:	6822      	ldr	r2, [r4, #0]
 800e19e:	07d2      	lsls	r2, r2, #31
 800e1a0:	d501      	bpl.n	800e1a6 <_printf_float+0x1b6>
 800e1a2:	3302      	adds	r3, #2
 800e1a4:	e7f4      	b.n	800e190 <_printf_float+0x1a0>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e7f2      	b.n	800e190 <_printf_float+0x1a0>
 800e1aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1b0:	4299      	cmp	r1, r3
 800e1b2:	db05      	blt.n	800e1c0 <_printf_float+0x1d0>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	6121      	str	r1, [r4, #16]
 800e1b8:	07d8      	lsls	r0, r3, #31
 800e1ba:	d5ea      	bpl.n	800e192 <_printf_float+0x1a2>
 800e1bc:	1c4b      	adds	r3, r1, #1
 800e1be:	e7e7      	b.n	800e190 <_printf_float+0x1a0>
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	bfd4      	ite	le
 800e1c4:	f1c1 0202 	rsble	r2, r1, #2
 800e1c8:	2201      	movgt	r2, #1
 800e1ca:	4413      	add	r3, r2
 800e1cc:	e7e0      	b.n	800e190 <_printf_float+0x1a0>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	055a      	lsls	r2, r3, #21
 800e1d2:	d407      	bmi.n	800e1e4 <_printf_float+0x1f4>
 800e1d4:	6923      	ldr	r3, [r4, #16]
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4628      	mov	r0, r5
 800e1dc:	47b8      	blx	r7
 800e1de:	3001      	adds	r0, #1
 800e1e0:	d12c      	bne.n	800e23c <_printf_float+0x24c>
 800e1e2:	e764      	b.n	800e0ae <_printf_float+0xbe>
 800e1e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1e8:	f240 80e0 	bls.w	800e3ac <_printf_float+0x3bc>
 800e1ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f7f2 fc88 	bl	8000b08 <__aeabi_dcmpeq>
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d034      	beq.n	800e266 <_printf_float+0x276>
 800e1fc:	4a37      	ldr	r2, [pc, #220]	; (800e2dc <_printf_float+0x2ec>)
 800e1fe:	2301      	movs	r3, #1
 800e200:	4631      	mov	r1, r6
 800e202:	4628      	mov	r0, r5
 800e204:	47b8      	blx	r7
 800e206:	3001      	adds	r0, #1
 800e208:	f43f af51 	beq.w	800e0ae <_printf_float+0xbe>
 800e20c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e210:	429a      	cmp	r2, r3
 800e212:	db02      	blt.n	800e21a <_printf_float+0x22a>
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	07d8      	lsls	r0, r3, #31
 800e218:	d510      	bpl.n	800e23c <_printf_float+0x24c>
 800e21a:	ee18 3a10 	vmov	r3, s16
 800e21e:	4652      	mov	r2, sl
 800e220:	4631      	mov	r1, r6
 800e222:	4628      	mov	r0, r5
 800e224:	47b8      	blx	r7
 800e226:	3001      	adds	r0, #1
 800e228:	f43f af41 	beq.w	800e0ae <_printf_float+0xbe>
 800e22c:	f04f 0800 	mov.w	r8, #0
 800e230:	f104 091a 	add.w	r9, r4, #26
 800e234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e236:	3b01      	subs	r3, #1
 800e238:	4543      	cmp	r3, r8
 800e23a:	dc09      	bgt.n	800e250 <_printf_float+0x260>
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	079b      	lsls	r3, r3, #30
 800e240:	f100 8107 	bmi.w	800e452 <_printf_float+0x462>
 800e244:	68e0      	ldr	r0, [r4, #12]
 800e246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e248:	4298      	cmp	r0, r3
 800e24a:	bfb8      	it	lt
 800e24c:	4618      	movlt	r0, r3
 800e24e:	e730      	b.n	800e0b2 <_printf_float+0xc2>
 800e250:	2301      	movs	r3, #1
 800e252:	464a      	mov	r2, r9
 800e254:	4631      	mov	r1, r6
 800e256:	4628      	mov	r0, r5
 800e258:	47b8      	blx	r7
 800e25a:	3001      	adds	r0, #1
 800e25c:	f43f af27 	beq.w	800e0ae <_printf_float+0xbe>
 800e260:	f108 0801 	add.w	r8, r8, #1
 800e264:	e7e6      	b.n	800e234 <_printf_float+0x244>
 800e266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dc39      	bgt.n	800e2e0 <_printf_float+0x2f0>
 800e26c:	4a1b      	ldr	r2, [pc, #108]	; (800e2dc <_printf_float+0x2ec>)
 800e26e:	2301      	movs	r3, #1
 800e270:	4631      	mov	r1, r6
 800e272:	4628      	mov	r0, r5
 800e274:	47b8      	blx	r7
 800e276:	3001      	adds	r0, #1
 800e278:	f43f af19 	beq.w	800e0ae <_printf_float+0xbe>
 800e27c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e280:	4313      	orrs	r3, r2
 800e282:	d102      	bne.n	800e28a <_printf_float+0x29a>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	07d9      	lsls	r1, r3, #31
 800e288:	d5d8      	bpl.n	800e23c <_printf_float+0x24c>
 800e28a:	ee18 3a10 	vmov	r3, s16
 800e28e:	4652      	mov	r2, sl
 800e290:	4631      	mov	r1, r6
 800e292:	4628      	mov	r0, r5
 800e294:	47b8      	blx	r7
 800e296:	3001      	adds	r0, #1
 800e298:	f43f af09 	beq.w	800e0ae <_printf_float+0xbe>
 800e29c:	f04f 0900 	mov.w	r9, #0
 800e2a0:	f104 0a1a 	add.w	sl, r4, #26
 800e2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a6:	425b      	negs	r3, r3
 800e2a8:	454b      	cmp	r3, r9
 800e2aa:	dc01      	bgt.n	800e2b0 <_printf_float+0x2c0>
 800e2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ae:	e792      	b.n	800e1d6 <_printf_float+0x1e6>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4652      	mov	r2, sl
 800e2b4:	4631      	mov	r1, r6
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	47b8      	blx	r7
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	f43f aef7 	beq.w	800e0ae <_printf_float+0xbe>
 800e2c0:	f109 0901 	add.w	r9, r9, #1
 800e2c4:	e7ee      	b.n	800e2a4 <_printf_float+0x2b4>
 800e2c6:	bf00      	nop
 800e2c8:	7fefffff 	.word	0x7fefffff
 800e2cc:	08014040 	.word	0x08014040
 800e2d0:	08014044 	.word	0x08014044
 800e2d4:	08014048 	.word	0x08014048
 800e2d8:	0801404c 	.word	0x0801404c
 800e2dc:	080143d8 	.word	0x080143d8
 800e2e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	bfa8      	it	ge
 800e2e8:	461a      	movge	r2, r3
 800e2ea:	2a00      	cmp	r2, #0
 800e2ec:	4691      	mov	r9, r2
 800e2ee:	dc37      	bgt.n	800e360 <_printf_float+0x370>
 800e2f0:	f04f 0b00 	mov.w	fp, #0
 800e2f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2f8:	f104 021a 	add.w	r2, r4, #26
 800e2fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2fe:	9305      	str	r3, [sp, #20]
 800e300:	eba3 0309 	sub.w	r3, r3, r9
 800e304:	455b      	cmp	r3, fp
 800e306:	dc33      	bgt.n	800e370 <_printf_float+0x380>
 800e308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e30c:	429a      	cmp	r2, r3
 800e30e:	db3b      	blt.n	800e388 <_printf_float+0x398>
 800e310:	6823      	ldr	r3, [r4, #0]
 800e312:	07da      	lsls	r2, r3, #31
 800e314:	d438      	bmi.n	800e388 <_printf_float+0x398>
 800e316:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e31a:	eba2 0903 	sub.w	r9, r2, r3
 800e31e:	9b05      	ldr	r3, [sp, #20]
 800e320:	1ad2      	subs	r2, r2, r3
 800e322:	4591      	cmp	r9, r2
 800e324:	bfa8      	it	ge
 800e326:	4691      	movge	r9, r2
 800e328:	f1b9 0f00 	cmp.w	r9, #0
 800e32c:	dc35      	bgt.n	800e39a <_printf_float+0x3aa>
 800e32e:	f04f 0800 	mov.w	r8, #0
 800e332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e336:	f104 0a1a 	add.w	sl, r4, #26
 800e33a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e33e:	1a9b      	subs	r3, r3, r2
 800e340:	eba3 0309 	sub.w	r3, r3, r9
 800e344:	4543      	cmp	r3, r8
 800e346:	f77f af79 	ble.w	800e23c <_printf_float+0x24c>
 800e34a:	2301      	movs	r3, #1
 800e34c:	4652      	mov	r2, sl
 800e34e:	4631      	mov	r1, r6
 800e350:	4628      	mov	r0, r5
 800e352:	47b8      	blx	r7
 800e354:	3001      	adds	r0, #1
 800e356:	f43f aeaa 	beq.w	800e0ae <_printf_float+0xbe>
 800e35a:	f108 0801 	add.w	r8, r8, #1
 800e35e:	e7ec      	b.n	800e33a <_printf_float+0x34a>
 800e360:	4613      	mov	r3, r2
 800e362:	4631      	mov	r1, r6
 800e364:	4642      	mov	r2, r8
 800e366:	4628      	mov	r0, r5
 800e368:	47b8      	blx	r7
 800e36a:	3001      	adds	r0, #1
 800e36c:	d1c0      	bne.n	800e2f0 <_printf_float+0x300>
 800e36e:	e69e      	b.n	800e0ae <_printf_float+0xbe>
 800e370:	2301      	movs	r3, #1
 800e372:	4631      	mov	r1, r6
 800e374:	4628      	mov	r0, r5
 800e376:	9205      	str	r2, [sp, #20]
 800e378:	47b8      	blx	r7
 800e37a:	3001      	adds	r0, #1
 800e37c:	f43f ae97 	beq.w	800e0ae <_printf_float+0xbe>
 800e380:	9a05      	ldr	r2, [sp, #20]
 800e382:	f10b 0b01 	add.w	fp, fp, #1
 800e386:	e7b9      	b.n	800e2fc <_printf_float+0x30c>
 800e388:	ee18 3a10 	vmov	r3, s16
 800e38c:	4652      	mov	r2, sl
 800e38e:	4631      	mov	r1, r6
 800e390:	4628      	mov	r0, r5
 800e392:	47b8      	blx	r7
 800e394:	3001      	adds	r0, #1
 800e396:	d1be      	bne.n	800e316 <_printf_float+0x326>
 800e398:	e689      	b.n	800e0ae <_printf_float+0xbe>
 800e39a:	9a05      	ldr	r2, [sp, #20]
 800e39c:	464b      	mov	r3, r9
 800e39e:	4442      	add	r2, r8
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	47b8      	blx	r7
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	d1c1      	bne.n	800e32e <_printf_float+0x33e>
 800e3aa:	e680      	b.n	800e0ae <_printf_float+0xbe>
 800e3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3ae:	2a01      	cmp	r2, #1
 800e3b0:	dc01      	bgt.n	800e3b6 <_printf_float+0x3c6>
 800e3b2:	07db      	lsls	r3, r3, #31
 800e3b4:	d53a      	bpl.n	800e42c <_printf_float+0x43c>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	4642      	mov	r2, r8
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4628      	mov	r0, r5
 800e3be:	47b8      	blx	r7
 800e3c0:	3001      	adds	r0, #1
 800e3c2:	f43f ae74 	beq.w	800e0ae <_printf_float+0xbe>
 800e3c6:	ee18 3a10 	vmov	r3, s16
 800e3ca:	4652      	mov	r2, sl
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	47b8      	blx	r7
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	f43f ae6b 	beq.w	800e0ae <_printf_float+0xbe>
 800e3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e3e4:	f7f2 fb90 	bl	8000b08 <__aeabi_dcmpeq>
 800e3e8:	b9d8      	cbnz	r0, 800e422 <_printf_float+0x432>
 800e3ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e3ee:	f108 0201 	add.w	r2, r8, #1
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d10e      	bne.n	800e41a <_printf_float+0x42a>
 800e3fc:	e657      	b.n	800e0ae <_printf_float+0xbe>
 800e3fe:	2301      	movs	r3, #1
 800e400:	4652      	mov	r2, sl
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	f43f ae50 	beq.w	800e0ae <_printf_float+0xbe>
 800e40e:	f108 0801 	add.w	r8, r8, #1
 800e412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e414:	3b01      	subs	r3, #1
 800e416:	4543      	cmp	r3, r8
 800e418:	dcf1      	bgt.n	800e3fe <_printf_float+0x40e>
 800e41a:	464b      	mov	r3, r9
 800e41c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e420:	e6da      	b.n	800e1d8 <_printf_float+0x1e8>
 800e422:	f04f 0800 	mov.w	r8, #0
 800e426:	f104 0a1a 	add.w	sl, r4, #26
 800e42a:	e7f2      	b.n	800e412 <_printf_float+0x422>
 800e42c:	2301      	movs	r3, #1
 800e42e:	4642      	mov	r2, r8
 800e430:	e7df      	b.n	800e3f2 <_printf_float+0x402>
 800e432:	2301      	movs	r3, #1
 800e434:	464a      	mov	r2, r9
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	47b8      	blx	r7
 800e43c:	3001      	adds	r0, #1
 800e43e:	f43f ae36 	beq.w	800e0ae <_printf_float+0xbe>
 800e442:	f108 0801 	add.w	r8, r8, #1
 800e446:	68e3      	ldr	r3, [r4, #12]
 800e448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e44a:	1a5b      	subs	r3, r3, r1
 800e44c:	4543      	cmp	r3, r8
 800e44e:	dcf0      	bgt.n	800e432 <_printf_float+0x442>
 800e450:	e6f8      	b.n	800e244 <_printf_float+0x254>
 800e452:	f04f 0800 	mov.w	r8, #0
 800e456:	f104 0919 	add.w	r9, r4, #25
 800e45a:	e7f4      	b.n	800e446 <_printf_float+0x456>

0800e45c <_printf_common>:
 800e45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e460:	4616      	mov	r6, r2
 800e462:	4699      	mov	r9, r3
 800e464:	688a      	ldr	r2, [r1, #8]
 800e466:	690b      	ldr	r3, [r1, #16]
 800e468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e46c:	4293      	cmp	r3, r2
 800e46e:	bfb8      	it	lt
 800e470:	4613      	movlt	r3, r2
 800e472:	6033      	str	r3, [r6, #0]
 800e474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e478:	4607      	mov	r7, r0
 800e47a:	460c      	mov	r4, r1
 800e47c:	b10a      	cbz	r2, 800e482 <_printf_common+0x26>
 800e47e:	3301      	adds	r3, #1
 800e480:	6033      	str	r3, [r6, #0]
 800e482:	6823      	ldr	r3, [r4, #0]
 800e484:	0699      	lsls	r1, r3, #26
 800e486:	bf42      	ittt	mi
 800e488:	6833      	ldrmi	r3, [r6, #0]
 800e48a:	3302      	addmi	r3, #2
 800e48c:	6033      	strmi	r3, [r6, #0]
 800e48e:	6825      	ldr	r5, [r4, #0]
 800e490:	f015 0506 	ands.w	r5, r5, #6
 800e494:	d106      	bne.n	800e4a4 <_printf_common+0x48>
 800e496:	f104 0a19 	add.w	sl, r4, #25
 800e49a:	68e3      	ldr	r3, [r4, #12]
 800e49c:	6832      	ldr	r2, [r6, #0]
 800e49e:	1a9b      	subs	r3, r3, r2
 800e4a0:	42ab      	cmp	r3, r5
 800e4a2:	dc26      	bgt.n	800e4f2 <_printf_common+0x96>
 800e4a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4a8:	1e13      	subs	r3, r2, #0
 800e4aa:	6822      	ldr	r2, [r4, #0]
 800e4ac:	bf18      	it	ne
 800e4ae:	2301      	movne	r3, #1
 800e4b0:	0692      	lsls	r2, r2, #26
 800e4b2:	d42b      	bmi.n	800e50c <_printf_common+0xb0>
 800e4b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4b8:	4649      	mov	r1, r9
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	47c0      	blx	r8
 800e4be:	3001      	adds	r0, #1
 800e4c0:	d01e      	beq.n	800e500 <_printf_common+0xa4>
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	f003 0306 	and.w	r3, r3, #6
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	bf02      	ittt	eq
 800e4ce:	68e5      	ldreq	r5, [r4, #12]
 800e4d0:	6833      	ldreq	r3, [r6, #0]
 800e4d2:	1aed      	subeq	r5, r5, r3
 800e4d4:	68a3      	ldr	r3, [r4, #8]
 800e4d6:	bf0c      	ite	eq
 800e4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4dc:	2500      	movne	r5, #0
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	bfc4      	itt	gt
 800e4e2:	1a9b      	subgt	r3, r3, r2
 800e4e4:	18ed      	addgt	r5, r5, r3
 800e4e6:	2600      	movs	r6, #0
 800e4e8:	341a      	adds	r4, #26
 800e4ea:	42b5      	cmp	r5, r6
 800e4ec:	d11a      	bne.n	800e524 <_printf_common+0xc8>
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	e008      	b.n	800e504 <_printf_common+0xa8>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4652      	mov	r2, sl
 800e4f6:	4649      	mov	r1, r9
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	47c0      	blx	r8
 800e4fc:	3001      	adds	r0, #1
 800e4fe:	d103      	bne.n	800e508 <_printf_common+0xac>
 800e500:	f04f 30ff 	mov.w	r0, #4294967295
 800e504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e508:	3501      	adds	r5, #1
 800e50a:	e7c6      	b.n	800e49a <_printf_common+0x3e>
 800e50c:	18e1      	adds	r1, r4, r3
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	2030      	movs	r0, #48	; 0x30
 800e512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e516:	4422      	add	r2, r4
 800e518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e51c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e520:	3302      	adds	r3, #2
 800e522:	e7c7      	b.n	800e4b4 <_printf_common+0x58>
 800e524:	2301      	movs	r3, #1
 800e526:	4622      	mov	r2, r4
 800e528:	4649      	mov	r1, r9
 800e52a:	4638      	mov	r0, r7
 800e52c:	47c0      	blx	r8
 800e52e:	3001      	adds	r0, #1
 800e530:	d0e6      	beq.n	800e500 <_printf_common+0xa4>
 800e532:	3601      	adds	r6, #1
 800e534:	e7d9      	b.n	800e4ea <_printf_common+0x8e>
	...

0800e538 <_printf_i>:
 800e538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e53c:	7e0f      	ldrb	r7, [r1, #24]
 800e53e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e540:	2f78      	cmp	r7, #120	; 0x78
 800e542:	4691      	mov	r9, r2
 800e544:	4680      	mov	r8, r0
 800e546:	460c      	mov	r4, r1
 800e548:	469a      	mov	sl, r3
 800e54a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e54e:	d807      	bhi.n	800e560 <_printf_i+0x28>
 800e550:	2f62      	cmp	r7, #98	; 0x62
 800e552:	d80a      	bhi.n	800e56a <_printf_i+0x32>
 800e554:	2f00      	cmp	r7, #0
 800e556:	f000 80d4 	beq.w	800e702 <_printf_i+0x1ca>
 800e55a:	2f58      	cmp	r7, #88	; 0x58
 800e55c:	f000 80c0 	beq.w	800e6e0 <_printf_i+0x1a8>
 800e560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e568:	e03a      	b.n	800e5e0 <_printf_i+0xa8>
 800e56a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e56e:	2b15      	cmp	r3, #21
 800e570:	d8f6      	bhi.n	800e560 <_printf_i+0x28>
 800e572:	a101      	add	r1, pc, #4	; (adr r1, 800e578 <_printf_i+0x40>)
 800e574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e578:	0800e5d1 	.word	0x0800e5d1
 800e57c:	0800e5e5 	.word	0x0800e5e5
 800e580:	0800e561 	.word	0x0800e561
 800e584:	0800e561 	.word	0x0800e561
 800e588:	0800e561 	.word	0x0800e561
 800e58c:	0800e561 	.word	0x0800e561
 800e590:	0800e5e5 	.word	0x0800e5e5
 800e594:	0800e561 	.word	0x0800e561
 800e598:	0800e561 	.word	0x0800e561
 800e59c:	0800e561 	.word	0x0800e561
 800e5a0:	0800e561 	.word	0x0800e561
 800e5a4:	0800e6e9 	.word	0x0800e6e9
 800e5a8:	0800e611 	.word	0x0800e611
 800e5ac:	0800e6a3 	.word	0x0800e6a3
 800e5b0:	0800e561 	.word	0x0800e561
 800e5b4:	0800e561 	.word	0x0800e561
 800e5b8:	0800e70b 	.word	0x0800e70b
 800e5bc:	0800e561 	.word	0x0800e561
 800e5c0:	0800e611 	.word	0x0800e611
 800e5c4:	0800e561 	.word	0x0800e561
 800e5c8:	0800e561 	.word	0x0800e561
 800e5cc:	0800e6ab 	.word	0x0800e6ab
 800e5d0:	682b      	ldr	r3, [r5, #0]
 800e5d2:	1d1a      	adds	r2, r3, #4
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	602a      	str	r2, [r5, #0]
 800e5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e09f      	b.n	800e724 <_printf_i+0x1ec>
 800e5e4:	6820      	ldr	r0, [r4, #0]
 800e5e6:	682b      	ldr	r3, [r5, #0]
 800e5e8:	0607      	lsls	r7, r0, #24
 800e5ea:	f103 0104 	add.w	r1, r3, #4
 800e5ee:	6029      	str	r1, [r5, #0]
 800e5f0:	d501      	bpl.n	800e5f6 <_printf_i+0xbe>
 800e5f2:	681e      	ldr	r6, [r3, #0]
 800e5f4:	e003      	b.n	800e5fe <_printf_i+0xc6>
 800e5f6:	0646      	lsls	r6, r0, #25
 800e5f8:	d5fb      	bpl.n	800e5f2 <_printf_i+0xba>
 800e5fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e5fe:	2e00      	cmp	r6, #0
 800e600:	da03      	bge.n	800e60a <_printf_i+0xd2>
 800e602:	232d      	movs	r3, #45	; 0x2d
 800e604:	4276      	negs	r6, r6
 800e606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e60a:	485a      	ldr	r0, [pc, #360]	; (800e774 <_printf_i+0x23c>)
 800e60c:	230a      	movs	r3, #10
 800e60e:	e012      	b.n	800e636 <_printf_i+0xfe>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	6820      	ldr	r0, [r4, #0]
 800e614:	1d19      	adds	r1, r3, #4
 800e616:	6029      	str	r1, [r5, #0]
 800e618:	0605      	lsls	r5, r0, #24
 800e61a:	d501      	bpl.n	800e620 <_printf_i+0xe8>
 800e61c:	681e      	ldr	r6, [r3, #0]
 800e61e:	e002      	b.n	800e626 <_printf_i+0xee>
 800e620:	0641      	lsls	r1, r0, #25
 800e622:	d5fb      	bpl.n	800e61c <_printf_i+0xe4>
 800e624:	881e      	ldrh	r6, [r3, #0]
 800e626:	4853      	ldr	r0, [pc, #332]	; (800e774 <_printf_i+0x23c>)
 800e628:	2f6f      	cmp	r7, #111	; 0x6f
 800e62a:	bf0c      	ite	eq
 800e62c:	2308      	moveq	r3, #8
 800e62e:	230a      	movne	r3, #10
 800e630:	2100      	movs	r1, #0
 800e632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e636:	6865      	ldr	r5, [r4, #4]
 800e638:	60a5      	str	r5, [r4, #8]
 800e63a:	2d00      	cmp	r5, #0
 800e63c:	bfa2      	ittt	ge
 800e63e:	6821      	ldrge	r1, [r4, #0]
 800e640:	f021 0104 	bicge.w	r1, r1, #4
 800e644:	6021      	strge	r1, [r4, #0]
 800e646:	b90e      	cbnz	r6, 800e64c <_printf_i+0x114>
 800e648:	2d00      	cmp	r5, #0
 800e64a:	d04b      	beq.n	800e6e4 <_printf_i+0x1ac>
 800e64c:	4615      	mov	r5, r2
 800e64e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e652:	fb03 6711 	mls	r7, r3, r1, r6
 800e656:	5dc7      	ldrb	r7, [r0, r7]
 800e658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e65c:	4637      	mov	r7, r6
 800e65e:	42bb      	cmp	r3, r7
 800e660:	460e      	mov	r6, r1
 800e662:	d9f4      	bls.n	800e64e <_printf_i+0x116>
 800e664:	2b08      	cmp	r3, #8
 800e666:	d10b      	bne.n	800e680 <_printf_i+0x148>
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	07de      	lsls	r6, r3, #31
 800e66c:	d508      	bpl.n	800e680 <_printf_i+0x148>
 800e66e:	6923      	ldr	r3, [r4, #16]
 800e670:	6861      	ldr	r1, [r4, #4]
 800e672:	4299      	cmp	r1, r3
 800e674:	bfde      	ittt	le
 800e676:	2330      	movle	r3, #48	; 0x30
 800e678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e67c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e680:	1b52      	subs	r2, r2, r5
 800e682:	6122      	str	r2, [r4, #16]
 800e684:	f8cd a000 	str.w	sl, [sp]
 800e688:	464b      	mov	r3, r9
 800e68a:	aa03      	add	r2, sp, #12
 800e68c:	4621      	mov	r1, r4
 800e68e:	4640      	mov	r0, r8
 800e690:	f7ff fee4 	bl	800e45c <_printf_common>
 800e694:	3001      	adds	r0, #1
 800e696:	d14a      	bne.n	800e72e <_printf_i+0x1f6>
 800e698:	f04f 30ff 	mov.w	r0, #4294967295
 800e69c:	b004      	add	sp, #16
 800e69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	f043 0320 	orr.w	r3, r3, #32
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	4833      	ldr	r0, [pc, #204]	; (800e778 <_printf_i+0x240>)
 800e6ac:	2778      	movs	r7, #120	; 0x78
 800e6ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	6829      	ldr	r1, [r5, #0]
 800e6b6:	061f      	lsls	r7, r3, #24
 800e6b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6bc:	d402      	bmi.n	800e6c4 <_printf_i+0x18c>
 800e6be:	065f      	lsls	r7, r3, #25
 800e6c0:	bf48      	it	mi
 800e6c2:	b2b6      	uxthmi	r6, r6
 800e6c4:	07df      	lsls	r7, r3, #31
 800e6c6:	bf48      	it	mi
 800e6c8:	f043 0320 	orrmi.w	r3, r3, #32
 800e6cc:	6029      	str	r1, [r5, #0]
 800e6ce:	bf48      	it	mi
 800e6d0:	6023      	strmi	r3, [r4, #0]
 800e6d2:	b91e      	cbnz	r6, 800e6dc <_printf_i+0x1a4>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	f023 0320 	bic.w	r3, r3, #32
 800e6da:	6023      	str	r3, [r4, #0]
 800e6dc:	2310      	movs	r3, #16
 800e6de:	e7a7      	b.n	800e630 <_printf_i+0xf8>
 800e6e0:	4824      	ldr	r0, [pc, #144]	; (800e774 <_printf_i+0x23c>)
 800e6e2:	e7e4      	b.n	800e6ae <_printf_i+0x176>
 800e6e4:	4615      	mov	r5, r2
 800e6e6:	e7bd      	b.n	800e664 <_printf_i+0x12c>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	6826      	ldr	r6, [r4, #0]
 800e6ec:	6961      	ldr	r1, [r4, #20]
 800e6ee:	1d18      	adds	r0, r3, #4
 800e6f0:	6028      	str	r0, [r5, #0]
 800e6f2:	0635      	lsls	r5, r6, #24
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	d501      	bpl.n	800e6fc <_printf_i+0x1c4>
 800e6f8:	6019      	str	r1, [r3, #0]
 800e6fa:	e002      	b.n	800e702 <_printf_i+0x1ca>
 800e6fc:	0670      	lsls	r0, r6, #25
 800e6fe:	d5fb      	bpl.n	800e6f8 <_printf_i+0x1c0>
 800e700:	8019      	strh	r1, [r3, #0]
 800e702:	2300      	movs	r3, #0
 800e704:	6123      	str	r3, [r4, #16]
 800e706:	4615      	mov	r5, r2
 800e708:	e7bc      	b.n	800e684 <_printf_i+0x14c>
 800e70a:	682b      	ldr	r3, [r5, #0]
 800e70c:	1d1a      	adds	r2, r3, #4
 800e70e:	602a      	str	r2, [r5, #0]
 800e710:	681d      	ldr	r5, [r3, #0]
 800e712:	6862      	ldr	r2, [r4, #4]
 800e714:	2100      	movs	r1, #0
 800e716:	4628      	mov	r0, r5
 800e718:	f7f1 fd7a 	bl	8000210 <memchr>
 800e71c:	b108      	cbz	r0, 800e722 <_printf_i+0x1ea>
 800e71e:	1b40      	subs	r0, r0, r5
 800e720:	6060      	str	r0, [r4, #4]
 800e722:	6863      	ldr	r3, [r4, #4]
 800e724:	6123      	str	r3, [r4, #16]
 800e726:	2300      	movs	r3, #0
 800e728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e72c:	e7aa      	b.n	800e684 <_printf_i+0x14c>
 800e72e:	6923      	ldr	r3, [r4, #16]
 800e730:	462a      	mov	r2, r5
 800e732:	4649      	mov	r1, r9
 800e734:	4640      	mov	r0, r8
 800e736:	47d0      	blx	sl
 800e738:	3001      	adds	r0, #1
 800e73a:	d0ad      	beq.n	800e698 <_printf_i+0x160>
 800e73c:	6823      	ldr	r3, [r4, #0]
 800e73e:	079b      	lsls	r3, r3, #30
 800e740:	d413      	bmi.n	800e76a <_printf_i+0x232>
 800e742:	68e0      	ldr	r0, [r4, #12]
 800e744:	9b03      	ldr	r3, [sp, #12]
 800e746:	4298      	cmp	r0, r3
 800e748:	bfb8      	it	lt
 800e74a:	4618      	movlt	r0, r3
 800e74c:	e7a6      	b.n	800e69c <_printf_i+0x164>
 800e74e:	2301      	movs	r3, #1
 800e750:	4632      	mov	r2, r6
 800e752:	4649      	mov	r1, r9
 800e754:	4640      	mov	r0, r8
 800e756:	47d0      	blx	sl
 800e758:	3001      	adds	r0, #1
 800e75a:	d09d      	beq.n	800e698 <_printf_i+0x160>
 800e75c:	3501      	adds	r5, #1
 800e75e:	68e3      	ldr	r3, [r4, #12]
 800e760:	9903      	ldr	r1, [sp, #12]
 800e762:	1a5b      	subs	r3, r3, r1
 800e764:	42ab      	cmp	r3, r5
 800e766:	dcf2      	bgt.n	800e74e <_printf_i+0x216>
 800e768:	e7eb      	b.n	800e742 <_printf_i+0x20a>
 800e76a:	2500      	movs	r5, #0
 800e76c:	f104 0619 	add.w	r6, r4, #25
 800e770:	e7f5      	b.n	800e75e <_printf_i+0x226>
 800e772:	bf00      	nop
 800e774:	08014050 	.word	0x08014050
 800e778:	08014061 	.word	0x08014061

0800e77c <_scanf_float>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	b087      	sub	sp, #28
 800e782:	4617      	mov	r7, r2
 800e784:	9303      	str	r3, [sp, #12]
 800e786:	688b      	ldr	r3, [r1, #8]
 800e788:	1e5a      	subs	r2, r3, #1
 800e78a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e78e:	bf83      	ittte	hi
 800e790:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e794:	195b      	addhi	r3, r3, r5
 800e796:	9302      	strhi	r3, [sp, #8]
 800e798:	2300      	movls	r3, #0
 800e79a:	bf86      	itte	hi
 800e79c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e7a0:	608b      	strhi	r3, [r1, #8]
 800e7a2:	9302      	strls	r3, [sp, #8]
 800e7a4:	680b      	ldr	r3, [r1, #0]
 800e7a6:	468b      	mov	fp, r1
 800e7a8:	2500      	movs	r5, #0
 800e7aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e7ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800e7b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e7b6:	4680      	mov	r8, r0
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	465e      	mov	r6, fp
 800e7bc:	46aa      	mov	sl, r5
 800e7be:	46a9      	mov	r9, r5
 800e7c0:	9501      	str	r5, [sp, #4]
 800e7c2:	68a2      	ldr	r2, [r4, #8]
 800e7c4:	b152      	cbz	r2, 800e7dc <_scanf_float+0x60>
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	2b4e      	cmp	r3, #78	; 0x4e
 800e7cc:	d864      	bhi.n	800e898 <_scanf_float+0x11c>
 800e7ce:	2b40      	cmp	r3, #64	; 0x40
 800e7d0:	d83c      	bhi.n	800e84c <_scanf_float+0xd0>
 800e7d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e7d6:	b2c8      	uxtb	r0, r1
 800e7d8:	280e      	cmp	r0, #14
 800e7da:	d93a      	bls.n	800e852 <_scanf_float+0xd6>
 800e7dc:	f1b9 0f00 	cmp.w	r9, #0
 800e7e0:	d003      	beq.n	800e7ea <_scanf_float+0x6e>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7ee:	f1ba 0f01 	cmp.w	sl, #1
 800e7f2:	f200 8113 	bhi.w	800ea1c <_scanf_float+0x2a0>
 800e7f6:	455e      	cmp	r6, fp
 800e7f8:	f200 8105 	bhi.w	800ea06 <_scanf_float+0x28a>
 800e7fc:	2501      	movs	r5, #1
 800e7fe:	4628      	mov	r0, r5
 800e800:	b007      	add	sp, #28
 800e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e80a:	2a0d      	cmp	r2, #13
 800e80c:	d8e6      	bhi.n	800e7dc <_scanf_float+0x60>
 800e80e:	a101      	add	r1, pc, #4	; (adr r1, 800e814 <_scanf_float+0x98>)
 800e810:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e814:	0800e953 	.word	0x0800e953
 800e818:	0800e7dd 	.word	0x0800e7dd
 800e81c:	0800e7dd 	.word	0x0800e7dd
 800e820:	0800e7dd 	.word	0x0800e7dd
 800e824:	0800e9b3 	.word	0x0800e9b3
 800e828:	0800e98b 	.word	0x0800e98b
 800e82c:	0800e7dd 	.word	0x0800e7dd
 800e830:	0800e7dd 	.word	0x0800e7dd
 800e834:	0800e961 	.word	0x0800e961
 800e838:	0800e7dd 	.word	0x0800e7dd
 800e83c:	0800e7dd 	.word	0x0800e7dd
 800e840:	0800e7dd 	.word	0x0800e7dd
 800e844:	0800e7dd 	.word	0x0800e7dd
 800e848:	0800e919 	.word	0x0800e919
 800e84c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e850:	e7db      	b.n	800e80a <_scanf_float+0x8e>
 800e852:	290e      	cmp	r1, #14
 800e854:	d8c2      	bhi.n	800e7dc <_scanf_float+0x60>
 800e856:	a001      	add	r0, pc, #4	; (adr r0, 800e85c <_scanf_float+0xe0>)
 800e858:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e85c:	0800e90b 	.word	0x0800e90b
 800e860:	0800e7dd 	.word	0x0800e7dd
 800e864:	0800e90b 	.word	0x0800e90b
 800e868:	0800e99f 	.word	0x0800e99f
 800e86c:	0800e7dd 	.word	0x0800e7dd
 800e870:	0800e8b9 	.word	0x0800e8b9
 800e874:	0800e8f5 	.word	0x0800e8f5
 800e878:	0800e8f5 	.word	0x0800e8f5
 800e87c:	0800e8f5 	.word	0x0800e8f5
 800e880:	0800e8f5 	.word	0x0800e8f5
 800e884:	0800e8f5 	.word	0x0800e8f5
 800e888:	0800e8f5 	.word	0x0800e8f5
 800e88c:	0800e8f5 	.word	0x0800e8f5
 800e890:	0800e8f5 	.word	0x0800e8f5
 800e894:	0800e8f5 	.word	0x0800e8f5
 800e898:	2b6e      	cmp	r3, #110	; 0x6e
 800e89a:	d809      	bhi.n	800e8b0 <_scanf_float+0x134>
 800e89c:	2b60      	cmp	r3, #96	; 0x60
 800e89e:	d8b2      	bhi.n	800e806 <_scanf_float+0x8a>
 800e8a0:	2b54      	cmp	r3, #84	; 0x54
 800e8a2:	d077      	beq.n	800e994 <_scanf_float+0x218>
 800e8a4:	2b59      	cmp	r3, #89	; 0x59
 800e8a6:	d199      	bne.n	800e7dc <_scanf_float+0x60>
 800e8a8:	2d07      	cmp	r5, #7
 800e8aa:	d197      	bne.n	800e7dc <_scanf_float+0x60>
 800e8ac:	2508      	movs	r5, #8
 800e8ae:	e029      	b.n	800e904 <_scanf_float+0x188>
 800e8b0:	2b74      	cmp	r3, #116	; 0x74
 800e8b2:	d06f      	beq.n	800e994 <_scanf_float+0x218>
 800e8b4:	2b79      	cmp	r3, #121	; 0x79
 800e8b6:	e7f6      	b.n	800e8a6 <_scanf_float+0x12a>
 800e8b8:	6821      	ldr	r1, [r4, #0]
 800e8ba:	05c8      	lsls	r0, r1, #23
 800e8bc:	d51a      	bpl.n	800e8f4 <_scanf_float+0x178>
 800e8be:	9b02      	ldr	r3, [sp, #8]
 800e8c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e8c4:	6021      	str	r1, [r4, #0]
 800e8c6:	f109 0901 	add.w	r9, r9, #1
 800e8ca:	b11b      	cbz	r3, 800e8d4 <_scanf_float+0x158>
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	3201      	adds	r2, #1
 800e8d0:	9302      	str	r3, [sp, #8]
 800e8d2:	60a2      	str	r2, [r4, #8]
 800e8d4:	68a3      	ldr	r3, [r4, #8]
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	60a3      	str	r3, [r4, #8]
 800e8da:	6923      	ldr	r3, [r4, #16]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	6123      	str	r3, [r4, #16]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3b01      	subs	r3, #1
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	607b      	str	r3, [r7, #4]
 800e8e8:	f340 8084 	ble.w	800e9f4 <_scanf_float+0x278>
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	603b      	str	r3, [r7, #0]
 800e8f2:	e766      	b.n	800e7c2 <_scanf_float+0x46>
 800e8f4:	eb1a 0f05 	cmn.w	sl, r5
 800e8f8:	f47f af70 	bne.w	800e7dc <_scanf_float+0x60>
 800e8fc:	6822      	ldr	r2, [r4, #0]
 800e8fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e902:	6022      	str	r2, [r4, #0]
 800e904:	f806 3b01 	strb.w	r3, [r6], #1
 800e908:	e7e4      	b.n	800e8d4 <_scanf_float+0x158>
 800e90a:	6822      	ldr	r2, [r4, #0]
 800e90c:	0610      	lsls	r0, r2, #24
 800e90e:	f57f af65 	bpl.w	800e7dc <_scanf_float+0x60>
 800e912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e916:	e7f4      	b.n	800e902 <_scanf_float+0x186>
 800e918:	f1ba 0f00 	cmp.w	sl, #0
 800e91c:	d10e      	bne.n	800e93c <_scanf_float+0x1c0>
 800e91e:	f1b9 0f00 	cmp.w	r9, #0
 800e922:	d10e      	bne.n	800e942 <_scanf_float+0x1c6>
 800e924:	6822      	ldr	r2, [r4, #0]
 800e926:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e92a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e92e:	d108      	bne.n	800e942 <_scanf_float+0x1c6>
 800e930:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e934:	6022      	str	r2, [r4, #0]
 800e936:	f04f 0a01 	mov.w	sl, #1
 800e93a:	e7e3      	b.n	800e904 <_scanf_float+0x188>
 800e93c:	f1ba 0f02 	cmp.w	sl, #2
 800e940:	d055      	beq.n	800e9ee <_scanf_float+0x272>
 800e942:	2d01      	cmp	r5, #1
 800e944:	d002      	beq.n	800e94c <_scanf_float+0x1d0>
 800e946:	2d04      	cmp	r5, #4
 800e948:	f47f af48 	bne.w	800e7dc <_scanf_float+0x60>
 800e94c:	3501      	adds	r5, #1
 800e94e:	b2ed      	uxtb	r5, r5
 800e950:	e7d8      	b.n	800e904 <_scanf_float+0x188>
 800e952:	f1ba 0f01 	cmp.w	sl, #1
 800e956:	f47f af41 	bne.w	800e7dc <_scanf_float+0x60>
 800e95a:	f04f 0a02 	mov.w	sl, #2
 800e95e:	e7d1      	b.n	800e904 <_scanf_float+0x188>
 800e960:	b97d      	cbnz	r5, 800e982 <_scanf_float+0x206>
 800e962:	f1b9 0f00 	cmp.w	r9, #0
 800e966:	f47f af3c 	bne.w	800e7e2 <_scanf_float+0x66>
 800e96a:	6822      	ldr	r2, [r4, #0]
 800e96c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e970:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e974:	f47f af39 	bne.w	800e7ea <_scanf_float+0x6e>
 800e978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e97c:	6022      	str	r2, [r4, #0]
 800e97e:	2501      	movs	r5, #1
 800e980:	e7c0      	b.n	800e904 <_scanf_float+0x188>
 800e982:	2d03      	cmp	r5, #3
 800e984:	d0e2      	beq.n	800e94c <_scanf_float+0x1d0>
 800e986:	2d05      	cmp	r5, #5
 800e988:	e7de      	b.n	800e948 <_scanf_float+0x1cc>
 800e98a:	2d02      	cmp	r5, #2
 800e98c:	f47f af26 	bne.w	800e7dc <_scanf_float+0x60>
 800e990:	2503      	movs	r5, #3
 800e992:	e7b7      	b.n	800e904 <_scanf_float+0x188>
 800e994:	2d06      	cmp	r5, #6
 800e996:	f47f af21 	bne.w	800e7dc <_scanf_float+0x60>
 800e99a:	2507      	movs	r5, #7
 800e99c:	e7b2      	b.n	800e904 <_scanf_float+0x188>
 800e99e:	6822      	ldr	r2, [r4, #0]
 800e9a0:	0591      	lsls	r1, r2, #22
 800e9a2:	f57f af1b 	bpl.w	800e7dc <_scanf_float+0x60>
 800e9a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e9aa:	6022      	str	r2, [r4, #0]
 800e9ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9b0:	e7a8      	b.n	800e904 <_scanf_float+0x188>
 800e9b2:	6822      	ldr	r2, [r4, #0]
 800e9b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e9b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e9bc:	d006      	beq.n	800e9cc <_scanf_float+0x250>
 800e9be:	0550      	lsls	r0, r2, #21
 800e9c0:	f57f af0c 	bpl.w	800e7dc <_scanf_float+0x60>
 800e9c4:	f1b9 0f00 	cmp.w	r9, #0
 800e9c8:	f43f af0f 	beq.w	800e7ea <_scanf_float+0x6e>
 800e9cc:	0591      	lsls	r1, r2, #22
 800e9ce:	bf58      	it	pl
 800e9d0:	9901      	ldrpl	r1, [sp, #4]
 800e9d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e9d6:	bf58      	it	pl
 800e9d8:	eba9 0101 	subpl.w	r1, r9, r1
 800e9dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e9e0:	bf58      	it	pl
 800e9e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e9e6:	6022      	str	r2, [r4, #0]
 800e9e8:	f04f 0900 	mov.w	r9, #0
 800e9ec:	e78a      	b.n	800e904 <_scanf_float+0x188>
 800e9ee:	f04f 0a03 	mov.w	sl, #3
 800e9f2:	e787      	b.n	800e904 <_scanf_float+0x188>
 800e9f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e9f8:	4639      	mov	r1, r7
 800e9fa:	4640      	mov	r0, r8
 800e9fc:	4798      	blx	r3
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f43f aedf 	beq.w	800e7c2 <_scanf_float+0x46>
 800ea04:	e6ea      	b.n	800e7dc <_scanf_float+0x60>
 800ea06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea0e:	463a      	mov	r2, r7
 800ea10:	4640      	mov	r0, r8
 800ea12:	4798      	blx	r3
 800ea14:	6923      	ldr	r3, [r4, #16]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	6123      	str	r3, [r4, #16]
 800ea1a:	e6ec      	b.n	800e7f6 <_scanf_float+0x7a>
 800ea1c:	1e6b      	subs	r3, r5, #1
 800ea1e:	2b06      	cmp	r3, #6
 800ea20:	d825      	bhi.n	800ea6e <_scanf_float+0x2f2>
 800ea22:	2d02      	cmp	r5, #2
 800ea24:	d836      	bhi.n	800ea94 <_scanf_float+0x318>
 800ea26:	455e      	cmp	r6, fp
 800ea28:	f67f aee8 	bls.w	800e7fc <_scanf_float+0x80>
 800ea2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea34:	463a      	mov	r2, r7
 800ea36:	4640      	mov	r0, r8
 800ea38:	4798      	blx	r3
 800ea3a:	6923      	ldr	r3, [r4, #16]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	6123      	str	r3, [r4, #16]
 800ea40:	e7f1      	b.n	800ea26 <_scanf_float+0x2aa>
 800ea42:	9802      	ldr	r0, [sp, #8]
 800ea44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ea4c:	9002      	str	r0, [sp, #8]
 800ea4e:	463a      	mov	r2, r7
 800ea50:	4640      	mov	r0, r8
 800ea52:	4798      	blx	r3
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	3b01      	subs	r3, #1
 800ea58:	6123      	str	r3, [r4, #16]
 800ea5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea5e:	fa5f fa8a 	uxtb.w	sl, sl
 800ea62:	f1ba 0f02 	cmp.w	sl, #2
 800ea66:	d1ec      	bne.n	800ea42 <_scanf_float+0x2c6>
 800ea68:	3d03      	subs	r5, #3
 800ea6a:	b2ed      	uxtb	r5, r5
 800ea6c:	1b76      	subs	r6, r6, r5
 800ea6e:	6823      	ldr	r3, [r4, #0]
 800ea70:	05da      	lsls	r2, r3, #23
 800ea72:	d52f      	bpl.n	800ead4 <_scanf_float+0x358>
 800ea74:	055b      	lsls	r3, r3, #21
 800ea76:	d510      	bpl.n	800ea9a <_scanf_float+0x31e>
 800ea78:	455e      	cmp	r6, fp
 800ea7a:	f67f aebf 	bls.w	800e7fc <_scanf_float+0x80>
 800ea7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea86:	463a      	mov	r2, r7
 800ea88:	4640      	mov	r0, r8
 800ea8a:	4798      	blx	r3
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	6123      	str	r3, [r4, #16]
 800ea92:	e7f1      	b.n	800ea78 <_scanf_float+0x2fc>
 800ea94:	46aa      	mov	sl, r5
 800ea96:	9602      	str	r6, [sp, #8]
 800ea98:	e7df      	b.n	800ea5a <_scanf_float+0x2de>
 800ea9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	2965      	cmp	r1, #101	; 0x65
 800eaa2:	f103 33ff 	add.w	r3, r3, #4294967295
 800eaa6:	f106 35ff 	add.w	r5, r6, #4294967295
 800eaaa:	6123      	str	r3, [r4, #16]
 800eaac:	d00c      	beq.n	800eac8 <_scanf_float+0x34c>
 800eaae:	2945      	cmp	r1, #69	; 0x45
 800eab0:	d00a      	beq.n	800eac8 <_scanf_float+0x34c>
 800eab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eab6:	463a      	mov	r2, r7
 800eab8:	4640      	mov	r0, r8
 800eaba:	4798      	blx	r3
 800eabc:	6923      	ldr	r3, [r4, #16]
 800eabe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eac2:	3b01      	subs	r3, #1
 800eac4:	1eb5      	subs	r5, r6, #2
 800eac6:	6123      	str	r3, [r4, #16]
 800eac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eacc:	463a      	mov	r2, r7
 800eace:	4640      	mov	r0, r8
 800ead0:	4798      	blx	r3
 800ead2:	462e      	mov	r6, r5
 800ead4:	6825      	ldr	r5, [r4, #0]
 800ead6:	f015 0510 	ands.w	r5, r5, #16
 800eada:	d158      	bne.n	800eb8e <_scanf_float+0x412>
 800eadc:	7035      	strb	r5, [r6, #0]
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eae8:	d11c      	bne.n	800eb24 <_scanf_float+0x3a8>
 800eaea:	9b01      	ldr	r3, [sp, #4]
 800eaec:	454b      	cmp	r3, r9
 800eaee:	eba3 0209 	sub.w	r2, r3, r9
 800eaf2:	d124      	bne.n	800eb3e <_scanf_float+0x3c2>
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	4659      	mov	r1, fp
 800eaf8:	4640      	mov	r0, r8
 800eafa:	f002 fc11 	bl	8011320 <_strtod_r>
 800eafe:	9b03      	ldr	r3, [sp, #12]
 800eb00:	6821      	ldr	r1, [r4, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f011 0f02 	tst.w	r1, #2
 800eb08:	ec57 6b10 	vmov	r6, r7, d0
 800eb0c:	f103 0204 	add.w	r2, r3, #4
 800eb10:	d020      	beq.n	800eb54 <_scanf_float+0x3d8>
 800eb12:	9903      	ldr	r1, [sp, #12]
 800eb14:	600a      	str	r2, [r1, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	e9c3 6700 	strd	r6, r7, [r3]
 800eb1c:	68e3      	ldr	r3, [r4, #12]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	60e3      	str	r3, [r4, #12]
 800eb22:	e66c      	b.n	800e7fe <_scanf_float+0x82>
 800eb24:	9b04      	ldr	r3, [sp, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d0e4      	beq.n	800eaf4 <_scanf_float+0x378>
 800eb2a:	9905      	ldr	r1, [sp, #20]
 800eb2c:	230a      	movs	r3, #10
 800eb2e:	462a      	mov	r2, r5
 800eb30:	3101      	adds	r1, #1
 800eb32:	4640      	mov	r0, r8
 800eb34:	f002 fc7c 	bl	8011430 <_strtol_r>
 800eb38:	9b04      	ldr	r3, [sp, #16]
 800eb3a:	9e05      	ldr	r6, [sp, #20]
 800eb3c:	1ac2      	subs	r2, r0, r3
 800eb3e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eb42:	429e      	cmp	r6, r3
 800eb44:	bf28      	it	cs
 800eb46:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eb4a:	4912      	ldr	r1, [pc, #72]	; (800eb94 <_scanf_float+0x418>)
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f000 f8d5 	bl	800ecfc <siprintf>
 800eb52:	e7cf      	b.n	800eaf4 <_scanf_float+0x378>
 800eb54:	f011 0f04 	tst.w	r1, #4
 800eb58:	9903      	ldr	r1, [sp, #12]
 800eb5a:	600a      	str	r2, [r1, #0]
 800eb5c:	d1db      	bne.n	800eb16 <_scanf_float+0x39a>
 800eb5e:	f8d3 8000 	ldr.w	r8, [r3]
 800eb62:	ee10 2a10 	vmov	r2, s0
 800eb66:	ee10 0a10 	vmov	r0, s0
 800eb6a:	463b      	mov	r3, r7
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	f7f1 fffd 	bl	8000b6c <__aeabi_dcmpun>
 800eb72:	b128      	cbz	r0, 800eb80 <_scanf_float+0x404>
 800eb74:	4808      	ldr	r0, [pc, #32]	; (800eb98 <_scanf_float+0x41c>)
 800eb76:	f000 fa45 	bl	800f004 <nanf>
 800eb7a:	ed88 0a00 	vstr	s0, [r8]
 800eb7e:	e7cd      	b.n	800eb1c <_scanf_float+0x3a0>
 800eb80:	4630      	mov	r0, r6
 800eb82:	4639      	mov	r1, r7
 800eb84:	f7f2 f850 	bl	8000c28 <__aeabi_d2f>
 800eb88:	f8c8 0000 	str.w	r0, [r8]
 800eb8c:	e7c6      	b.n	800eb1c <_scanf_float+0x3a0>
 800eb8e:	2500      	movs	r5, #0
 800eb90:	e635      	b.n	800e7fe <_scanf_float+0x82>
 800eb92:	bf00      	nop
 800eb94:	08014072 	.word	0x08014072
 800eb98:	08014420 	.word	0x08014420

0800eb9c <std>:
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	4604      	mov	r4, r0
 800eba2:	e9c0 3300 	strd	r3, r3, [r0]
 800eba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebaa:	6083      	str	r3, [r0, #8]
 800ebac:	8181      	strh	r1, [r0, #12]
 800ebae:	6643      	str	r3, [r0, #100]	; 0x64
 800ebb0:	81c2      	strh	r2, [r0, #14]
 800ebb2:	6183      	str	r3, [r0, #24]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	2208      	movs	r2, #8
 800ebb8:	305c      	adds	r0, #92	; 0x5c
 800ebba:	f000 f930 	bl	800ee1e <memset>
 800ebbe:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <std+0x38>)
 800ebc0:	6263      	str	r3, [r4, #36]	; 0x24
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <std+0x3c>)
 800ebc4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebc6:	4b05      	ldr	r3, [pc, #20]	; (800ebdc <std+0x40>)
 800ebc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebca:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <std+0x44>)
 800ebcc:	6224      	str	r4, [r4, #32]
 800ebce:	6323      	str	r3, [r4, #48]	; 0x30
 800ebd0:	bd10      	pop	{r4, pc}
 800ebd2:	bf00      	nop
 800ebd4:	0800ed95 	.word	0x0800ed95
 800ebd8:	0800edbb 	.word	0x0800edbb
 800ebdc:	0800edf3 	.word	0x0800edf3
 800ebe0:	0800ee17 	.word	0x0800ee17

0800ebe4 <stdio_exit_handler>:
 800ebe4:	4a02      	ldr	r2, [pc, #8]	; (800ebf0 <stdio_exit_handler+0xc>)
 800ebe6:	4903      	ldr	r1, [pc, #12]	; (800ebf4 <stdio_exit_handler+0x10>)
 800ebe8:	4803      	ldr	r0, [pc, #12]	; (800ebf8 <stdio_exit_handler+0x14>)
 800ebea:	f000 b869 	b.w	800ecc0 <_fwalk_sglue>
 800ebee:	bf00      	nop
 800ebf0:	20000014 	.word	0x20000014
 800ebf4:	08011e31 	.word	0x08011e31
 800ebf8:	20000020 	.word	0x20000020

0800ebfc <cleanup_stdio>:
 800ebfc:	6841      	ldr	r1, [r0, #4]
 800ebfe:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <cleanup_stdio+0x34>)
 800ec00:	4299      	cmp	r1, r3
 800ec02:	b510      	push	{r4, lr}
 800ec04:	4604      	mov	r4, r0
 800ec06:	d001      	beq.n	800ec0c <cleanup_stdio+0x10>
 800ec08:	f003 f912 	bl	8011e30 <_fflush_r>
 800ec0c:	68a1      	ldr	r1, [r4, #8]
 800ec0e:	4b09      	ldr	r3, [pc, #36]	; (800ec34 <cleanup_stdio+0x38>)
 800ec10:	4299      	cmp	r1, r3
 800ec12:	d002      	beq.n	800ec1a <cleanup_stdio+0x1e>
 800ec14:	4620      	mov	r0, r4
 800ec16:	f003 f90b 	bl	8011e30 <_fflush_r>
 800ec1a:	68e1      	ldr	r1, [r4, #12]
 800ec1c:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <cleanup_stdio+0x3c>)
 800ec1e:	4299      	cmp	r1, r3
 800ec20:	d004      	beq.n	800ec2c <cleanup_stdio+0x30>
 800ec22:	4620      	mov	r0, r4
 800ec24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec28:	f003 b902 	b.w	8011e30 <_fflush_r>
 800ec2c:	bd10      	pop	{r4, pc}
 800ec2e:	bf00      	nop
 800ec30:	20007034 	.word	0x20007034
 800ec34:	2000709c 	.word	0x2000709c
 800ec38:	20007104 	.word	0x20007104

0800ec3c <global_stdio_init.part.0>:
 800ec3c:	b510      	push	{r4, lr}
 800ec3e:	4b0b      	ldr	r3, [pc, #44]	; (800ec6c <global_stdio_init.part.0+0x30>)
 800ec40:	4c0b      	ldr	r4, [pc, #44]	; (800ec70 <global_stdio_init.part.0+0x34>)
 800ec42:	4a0c      	ldr	r2, [pc, #48]	; (800ec74 <global_stdio_init.part.0+0x38>)
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	4620      	mov	r0, r4
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2104      	movs	r1, #4
 800ec4c:	f7ff ffa6 	bl	800eb9c <std>
 800ec50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ec54:	2201      	movs	r2, #1
 800ec56:	2109      	movs	r1, #9
 800ec58:	f7ff ffa0 	bl	800eb9c <std>
 800ec5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ec60:	2202      	movs	r2, #2
 800ec62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec66:	2112      	movs	r1, #18
 800ec68:	f7ff bf98 	b.w	800eb9c <std>
 800ec6c:	2000716c 	.word	0x2000716c
 800ec70:	20007034 	.word	0x20007034
 800ec74:	0800ebe5 	.word	0x0800ebe5

0800ec78 <__sfp_lock_acquire>:
 800ec78:	4801      	ldr	r0, [pc, #4]	; (800ec80 <__sfp_lock_acquire+0x8>)
 800ec7a:	f000 b9b3 	b.w	800efe4 <__retarget_lock_acquire_recursive>
 800ec7e:	bf00      	nop
 800ec80:	20007175 	.word	0x20007175

0800ec84 <__sfp_lock_release>:
 800ec84:	4801      	ldr	r0, [pc, #4]	; (800ec8c <__sfp_lock_release+0x8>)
 800ec86:	f000 b9ae 	b.w	800efe6 <__retarget_lock_release_recursive>
 800ec8a:	bf00      	nop
 800ec8c:	20007175 	.word	0x20007175

0800ec90 <__sinit>:
 800ec90:	b510      	push	{r4, lr}
 800ec92:	4604      	mov	r4, r0
 800ec94:	f7ff fff0 	bl	800ec78 <__sfp_lock_acquire>
 800ec98:	6a23      	ldr	r3, [r4, #32]
 800ec9a:	b11b      	cbz	r3, 800eca4 <__sinit+0x14>
 800ec9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca0:	f7ff bff0 	b.w	800ec84 <__sfp_lock_release>
 800eca4:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <__sinit+0x28>)
 800eca6:	6223      	str	r3, [r4, #32]
 800eca8:	4b04      	ldr	r3, [pc, #16]	; (800ecbc <__sinit+0x2c>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f5      	bne.n	800ec9c <__sinit+0xc>
 800ecb0:	f7ff ffc4 	bl	800ec3c <global_stdio_init.part.0>
 800ecb4:	e7f2      	b.n	800ec9c <__sinit+0xc>
 800ecb6:	bf00      	nop
 800ecb8:	0800ebfd 	.word	0x0800ebfd
 800ecbc:	2000716c 	.word	0x2000716c

0800ecc0 <_fwalk_sglue>:
 800ecc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	4688      	mov	r8, r1
 800ecc8:	4614      	mov	r4, r2
 800ecca:	2600      	movs	r6, #0
 800eccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecd0:	f1b9 0901 	subs.w	r9, r9, #1
 800ecd4:	d505      	bpl.n	800ece2 <_fwalk_sglue+0x22>
 800ecd6:	6824      	ldr	r4, [r4, #0]
 800ecd8:	2c00      	cmp	r4, #0
 800ecda:	d1f7      	bne.n	800eccc <_fwalk_sglue+0xc>
 800ecdc:	4630      	mov	r0, r6
 800ecde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece2:	89ab      	ldrh	r3, [r5, #12]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d907      	bls.n	800ecf8 <_fwalk_sglue+0x38>
 800ece8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecec:	3301      	adds	r3, #1
 800ecee:	d003      	beq.n	800ecf8 <_fwalk_sglue+0x38>
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	47c0      	blx	r8
 800ecf6:	4306      	orrs	r6, r0
 800ecf8:	3568      	adds	r5, #104	; 0x68
 800ecfa:	e7e9      	b.n	800ecd0 <_fwalk_sglue+0x10>

0800ecfc <siprintf>:
 800ecfc:	b40e      	push	{r1, r2, r3}
 800ecfe:	b500      	push	{lr}
 800ed00:	b09c      	sub	sp, #112	; 0x70
 800ed02:	ab1d      	add	r3, sp, #116	; 0x74
 800ed04:	9002      	str	r0, [sp, #8]
 800ed06:	9006      	str	r0, [sp, #24]
 800ed08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed0c:	4809      	ldr	r0, [pc, #36]	; (800ed34 <siprintf+0x38>)
 800ed0e:	9107      	str	r1, [sp, #28]
 800ed10:	9104      	str	r1, [sp, #16]
 800ed12:	4909      	ldr	r1, [pc, #36]	; (800ed38 <siprintf+0x3c>)
 800ed14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed18:	9105      	str	r1, [sp, #20]
 800ed1a:	6800      	ldr	r0, [r0, #0]
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	a902      	add	r1, sp, #8
 800ed20:	f002 fbe2 	bl	80114e8 <_svfiprintf_r>
 800ed24:	9b02      	ldr	r3, [sp, #8]
 800ed26:	2200      	movs	r2, #0
 800ed28:	701a      	strb	r2, [r3, #0]
 800ed2a:	b01c      	add	sp, #112	; 0x70
 800ed2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed30:	b003      	add	sp, #12
 800ed32:	4770      	bx	lr
 800ed34:	2000006c 	.word	0x2000006c
 800ed38:	ffff0208 	.word	0xffff0208

0800ed3c <siscanf>:
 800ed3c:	b40e      	push	{r1, r2, r3}
 800ed3e:	b510      	push	{r4, lr}
 800ed40:	b09f      	sub	sp, #124	; 0x7c
 800ed42:	ac21      	add	r4, sp, #132	; 0x84
 800ed44:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ed48:	f854 2b04 	ldr.w	r2, [r4], #4
 800ed4c:	9201      	str	r2, [sp, #4]
 800ed4e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ed52:	9004      	str	r0, [sp, #16]
 800ed54:	9008      	str	r0, [sp, #32]
 800ed56:	f7f1 faab 	bl	80002b0 <strlen>
 800ed5a:	4b0c      	ldr	r3, [pc, #48]	; (800ed8c <siscanf+0x50>)
 800ed5c:	9005      	str	r0, [sp, #20]
 800ed5e:	9009      	str	r0, [sp, #36]	; 0x24
 800ed60:	930d      	str	r3, [sp, #52]	; 0x34
 800ed62:	480b      	ldr	r0, [pc, #44]	; (800ed90 <siscanf+0x54>)
 800ed64:	9a01      	ldr	r2, [sp, #4]
 800ed66:	6800      	ldr	r0, [r0, #0]
 800ed68:	9403      	str	r4, [sp, #12]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9311      	str	r3, [sp, #68]	; 0x44
 800ed6e:	9316      	str	r3, [sp, #88]	; 0x58
 800ed70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed74:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ed78:	a904      	add	r1, sp, #16
 800ed7a:	4623      	mov	r3, r4
 800ed7c:	f002 fd0c 	bl	8011798 <__ssvfiscanf_r>
 800ed80:	b01f      	add	sp, #124	; 0x7c
 800ed82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed86:	b003      	add	sp, #12
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop
 800ed8c:	0800edb7 	.word	0x0800edb7
 800ed90:	2000006c 	.word	0x2000006c

0800ed94 <__sread>:
 800ed94:	b510      	push	{r4, lr}
 800ed96:	460c      	mov	r4, r1
 800ed98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed9c:	f000 f8c4 	bl	800ef28 <_read_r>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	bfab      	itete	ge
 800eda4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eda6:	89a3      	ldrhlt	r3, [r4, #12]
 800eda8:	181b      	addge	r3, r3, r0
 800edaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edae:	bfac      	ite	ge
 800edb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800edb2:	81a3      	strhlt	r3, [r4, #12]
 800edb4:	bd10      	pop	{r4, pc}

0800edb6 <__seofread>:
 800edb6:	2000      	movs	r0, #0
 800edb8:	4770      	bx	lr

0800edba <__swrite>:
 800edba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edbe:	461f      	mov	r7, r3
 800edc0:	898b      	ldrh	r3, [r1, #12]
 800edc2:	05db      	lsls	r3, r3, #23
 800edc4:	4605      	mov	r5, r0
 800edc6:	460c      	mov	r4, r1
 800edc8:	4616      	mov	r6, r2
 800edca:	d505      	bpl.n	800edd8 <__swrite+0x1e>
 800edcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edd0:	2302      	movs	r3, #2
 800edd2:	2200      	movs	r2, #0
 800edd4:	f000 f896 	bl	800ef04 <_lseek_r>
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ede2:	81a3      	strh	r3, [r4, #12]
 800ede4:	4632      	mov	r2, r6
 800ede6:	463b      	mov	r3, r7
 800ede8:	4628      	mov	r0, r5
 800edea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edee:	f000 b8bd 	b.w	800ef6c <_write_r>

0800edf2 <__sseek>:
 800edf2:	b510      	push	{r4, lr}
 800edf4:	460c      	mov	r4, r1
 800edf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edfa:	f000 f883 	bl	800ef04 <_lseek_r>
 800edfe:	1c43      	adds	r3, r0, #1
 800ee00:	89a3      	ldrh	r3, [r4, #12]
 800ee02:	bf15      	itete	ne
 800ee04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee0e:	81a3      	strheq	r3, [r4, #12]
 800ee10:	bf18      	it	ne
 800ee12:	81a3      	strhne	r3, [r4, #12]
 800ee14:	bd10      	pop	{r4, pc}

0800ee16 <__sclose>:
 800ee16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1a:	f000 b80d 	b.w	800ee38 <_close_r>

0800ee1e <memset>:
 800ee1e:	4402      	add	r2, r0
 800ee20:	4603      	mov	r3, r0
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d100      	bne.n	800ee28 <memset+0xa>
 800ee26:	4770      	bx	lr
 800ee28:	f803 1b01 	strb.w	r1, [r3], #1
 800ee2c:	e7f9      	b.n	800ee22 <memset+0x4>
	...

0800ee30 <_localeconv_r>:
 800ee30:	4800      	ldr	r0, [pc, #0]	; (800ee34 <_localeconv_r+0x4>)
 800ee32:	4770      	bx	lr
 800ee34:	20000160 	.word	0x20000160

0800ee38 <_close_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4d06      	ldr	r5, [pc, #24]	; (800ee54 <_close_r+0x1c>)
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	4604      	mov	r4, r0
 800ee40:	4608      	mov	r0, r1
 800ee42:	602b      	str	r3, [r5, #0]
 800ee44:	f7f3 fa2d 	bl	80022a2 <_close>
 800ee48:	1c43      	adds	r3, r0, #1
 800ee4a:	d102      	bne.n	800ee52 <_close_r+0x1a>
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	b103      	cbz	r3, 800ee52 <_close_r+0x1a>
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	bd38      	pop	{r3, r4, r5, pc}
 800ee54:	20007170 	.word	0x20007170

0800ee58 <_reclaim_reent>:
 800ee58:	4b29      	ldr	r3, [pc, #164]	; (800ef00 <_reclaim_reent+0xa8>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4283      	cmp	r3, r0
 800ee5e:	b570      	push	{r4, r5, r6, lr}
 800ee60:	4604      	mov	r4, r0
 800ee62:	d04b      	beq.n	800eefc <_reclaim_reent+0xa4>
 800ee64:	69c3      	ldr	r3, [r0, #28]
 800ee66:	b143      	cbz	r3, 800ee7a <_reclaim_reent+0x22>
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d144      	bne.n	800eef8 <_reclaim_reent+0xa0>
 800ee6e:	69e3      	ldr	r3, [r4, #28]
 800ee70:	6819      	ldr	r1, [r3, #0]
 800ee72:	b111      	cbz	r1, 800ee7a <_reclaim_reent+0x22>
 800ee74:	4620      	mov	r0, r4
 800ee76:	f000 ff45 	bl	800fd04 <_free_r>
 800ee7a:	6961      	ldr	r1, [r4, #20]
 800ee7c:	b111      	cbz	r1, 800ee84 <_reclaim_reent+0x2c>
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 ff40 	bl	800fd04 <_free_r>
 800ee84:	69e1      	ldr	r1, [r4, #28]
 800ee86:	b111      	cbz	r1, 800ee8e <_reclaim_reent+0x36>
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f000 ff3b 	bl	800fd04 <_free_r>
 800ee8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ee90:	b111      	cbz	r1, 800ee98 <_reclaim_reent+0x40>
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 ff36 	bl	800fd04 <_free_r>
 800ee98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee9a:	b111      	cbz	r1, 800eea2 <_reclaim_reent+0x4a>
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 ff31 	bl	800fd04 <_free_r>
 800eea2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eea4:	b111      	cbz	r1, 800eeac <_reclaim_reent+0x54>
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 ff2c 	bl	800fd04 <_free_r>
 800eeac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eeae:	b111      	cbz	r1, 800eeb6 <_reclaim_reent+0x5e>
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f000 ff27 	bl	800fd04 <_free_r>
 800eeb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eeb8:	b111      	cbz	r1, 800eec0 <_reclaim_reent+0x68>
 800eeba:	4620      	mov	r0, r4
 800eebc:	f000 ff22 	bl	800fd04 <_free_r>
 800eec0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eec2:	b111      	cbz	r1, 800eeca <_reclaim_reent+0x72>
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 ff1d 	bl	800fd04 <_free_r>
 800eeca:	6a23      	ldr	r3, [r4, #32]
 800eecc:	b1b3      	cbz	r3, 800eefc <_reclaim_reent+0xa4>
 800eece:	4620      	mov	r0, r4
 800eed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eed4:	4718      	bx	r3
 800eed6:	5949      	ldr	r1, [r1, r5]
 800eed8:	b941      	cbnz	r1, 800eeec <_reclaim_reent+0x94>
 800eeda:	3504      	adds	r5, #4
 800eedc:	69e3      	ldr	r3, [r4, #28]
 800eede:	2d80      	cmp	r5, #128	; 0x80
 800eee0:	68d9      	ldr	r1, [r3, #12]
 800eee2:	d1f8      	bne.n	800eed6 <_reclaim_reent+0x7e>
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 ff0d 	bl	800fd04 <_free_r>
 800eeea:	e7c0      	b.n	800ee6e <_reclaim_reent+0x16>
 800eeec:	680e      	ldr	r6, [r1, #0]
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 ff08 	bl	800fd04 <_free_r>
 800eef4:	4631      	mov	r1, r6
 800eef6:	e7ef      	b.n	800eed8 <_reclaim_reent+0x80>
 800eef8:	2500      	movs	r5, #0
 800eefa:	e7ef      	b.n	800eedc <_reclaim_reent+0x84>
 800eefc:	bd70      	pop	{r4, r5, r6, pc}
 800eefe:	bf00      	nop
 800ef00:	2000006c 	.word	0x2000006c

0800ef04 <_lseek_r>:
 800ef04:	b538      	push	{r3, r4, r5, lr}
 800ef06:	4d07      	ldr	r5, [pc, #28]	; (800ef24 <_lseek_r+0x20>)
 800ef08:	4604      	mov	r4, r0
 800ef0a:	4608      	mov	r0, r1
 800ef0c:	4611      	mov	r1, r2
 800ef0e:	2200      	movs	r2, #0
 800ef10:	602a      	str	r2, [r5, #0]
 800ef12:	461a      	mov	r2, r3
 800ef14:	f7f3 f9ec 	bl	80022f0 <_lseek>
 800ef18:	1c43      	adds	r3, r0, #1
 800ef1a:	d102      	bne.n	800ef22 <_lseek_r+0x1e>
 800ef1c:	682b      	ldr	r3, [r5, #0]
 800ef1e:	b103      	cbz	r3, 800ef22 <_lseek_r+0x1e>
 800ef20:	6023      	str	r3, [r4, #0]
 800ef22:	bd38      	pop	{r3, r4, r5, pc}
 800ef24:	20007170 	.word	0x20007170

0800ef28 <_read_r>:
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4d07      	ldr	r5, [pc, #28]	; (800ef48 <_read_r+0x20>)
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	4608      	mov	r0, r1
 800ef30:	4611      	mov	r1, r2
 800ef32:	2200      	movs	r2, #0
 800ef34:	602a      	str	r2, [r5, #0]
 800ef36:	461a      	mov	r2, r3
 800ef38:	f7f3 f97a 	bl	8002230 <_read>
 800ef3c:	1c43      	adds	r3, r0, #1
 800ef3e:	d102      	bne.n	800ef46 <_read_r+0x1e>
 800ef40:	682b      	ldr	r3, [r5, #0]
 800ef42:	b103      	cbz	r3, 800ef46 <_read_r+0x1e>
 800ef44:	6023      	str	r3, [r4, #0]
 800ef46:	bd38      	pop	{r3, r4, r5, pc}
 800ef48:	20007170 	.word	0x20007170

0800ef4c <_sbrk_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d06      	ldr	r5, [pc, #24]	; (800ef68 <_sbrk_r+0x1c>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	602b      	str	r3, [r5, #0]
 800ef58:	f7f3 f9d8 	bl	800230c <_sbrk>
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	d102      	bne.n	800ef66 <_sbrk_r+0x1a>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	b103      	cbz	r3, 800ef66 <_sbrk_r+0x1a>
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	bd38      	pop	{r3, r4, r5, pc}
 800ef68:	20007170 	.word	0x20007170

0800ef6c <_write_r>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	4d07      	ldr	r5, [pc, #28]	; (800ef8c <_write_r+0x20>)
 800ef70:	4604      	mov	r4, r0
 800ef72:	4608      	mov	r0, r1
 800ef74:	4611      	mov	r1, r2
 800ef76:	2200      	movs	r2, #0
 800ef78:	602a      	str	r2, [r5, #0]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f7f3 f975 	bl	800226a <_write>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	d102      	bne.n	800ef8a <_write_r+0x1e>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	b103      	cbz	r3, 800ef8a <_write_r+0x1e>
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	bd38      	pop	{r3, r4, r5, pc}
 800ef8c:	20007170 	.word	0x20007170

0800ef90 <__errno>:
 800ef90:	4b01      	ldr	r3, [pc, #4]	; (800ef98 <__errno+0x8>)
 800ef92:	6818      	ldr	r0, [r3, #0]
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	2000006c 	.word	0x2000006c

0800ef9c <__libc_init_array>:
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	4d0d      	ldr	r5, [pc, #52]	; (800efd4 <__libc_init_array+0x38>)
 800efa0:	4c0d      	ldr	r4, [pc, #52]	; (800efd8 <__libc_init_array+0x3c>)
 800efa2:	1b64      	subs	r4, r4, r5
 800efa4:	10a4      	asrs	r4, r4, #2
 800efa6:	2600      	movs	r6, #0
 800efa8:	42a6      	cmp	r6, r4
 800efaa:	d109      	bne.n	800efc0 <__libc_init_array+0x24>
 800efac:	4d0b      	ldr	r5, [pc, #44]	; (800efdc <__libc_init_array+0x40>)
 800efae:	4c0c      	ldr	r4, [pc, #48]	; (800efe0 <__libc_init_array+0x44>)
 800efb0:	f004 fe6c 	bl	8013c8c <_init>
 800efb4:	1b64      	subs	r4, r4, r5
 800efb6:	10a4      	asrs	r4, r4, #2
 800efb8:	2600      	movs	r6, #0
 800efba:	42a6      	cmp	r6, r4
 800efbc:	d105      	bne.n	800efca <__libc_init_array+0x2e>
 800efbe:	bd70      	pop	{r4, r5, r6, pc}
 800efc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800efc4:	4798      	blx	r3
 800efc6:	3601      	adds	r6, #1
 800efc8:	e7ee      	b.n	800efa8 <__libc_init_array+0xc>
 800efca:	f855 3b04 	ldr.w	r3, [r5], #4
 800efce:	4798      	blx	r3
 800efd0:	3601      	adds	r6, #1
 800efd2:	e7f2      	b.n	800efba <__libc_init_array+0x1e>
 800efd4:	080144c0 	.word	0x080144c0
 800efd8:	080144c0 	.word	0x080144c0
 800efdc:	080144c0 	.word	0x080144c0
 800efe0:	080144c4 	.word	0x080144c4

0800efe4 <__retarget_lock_acquire_recursive>:
 800efe4:	4770      	bx	lr

0800efe6 <__retarget_lock_release_recursive>:
 800efe6:	4770      	bx	lr

0800efe8 <memcpy>:
 800efe8:	440a      	add	r2, r1
 800efea:	4291      	cmp	r1, r2
 800efec:	f100 33ff 	add.w	r3, r0, #4294967295
 800eff0:	d100      	bne.n	800eff4 <memcpy+0xc>
 800eff2:	4770      	bx	lr
 800eff4:	b510      	push	{r4, lr}
 800eff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800effa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800effe:	4291      	cmp	r1, r2
 800f000:	d1f9      	bne.n	800eff6 <memcpy+0xe>
 800f002:	bd10      	pop	{r4, pc}

0800f004 <nanf>:
 800f004:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f00c <nanf+0x8>
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	7fc00000 	.word	0x7fc00000

0800f010 <quorem>:
 800f010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	6903      	ldr	r3, [r0, #16]
 800f016:	690c      	ldr	r4, [r1, #16]
 800f018:	42a3      	cmp	r3, r4
 800f01a:	4607      	mov	r7, r0
 800f01c:	db7e      	blt.n	800f11c <quorem+0x10c>
 800f01e:	3c01      	subs	r4, #1
 800f020:	f101 0814 	add.w	r8, r1, #20
 800f024:	f100 0514 	add.w	r5, r0, #20
 800f028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f02c:	9301      	str	r3, [sp, #4]
 800f02e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f036:	3301      	adds	r3, #1
 800f038:	429a      	cmp	r2, r3
 800f03a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f03e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f042:	fbb2 f6f3 	udiv	r6, r2, r3
 800f046:	d331      	bcc.n	800f0ac <quorem+0x9c>
 800f048:	f04f 0e00 	mov.w	lr, #0
 800f04c:	4640      	mov	r0, r8
 800f04e:	46ac      	mov	ip, r5
 800f050:	46f2      	mov	sl, lr
 800f052:	f850 2b04 	ldr.w	r2, [r0], #4
 800f056:	b293      	uxth	r3, r2
 800f058:	fb06 e303 	mla	r3, r6, r3, lr
 800f05c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f060:	0c1a      	lsrs	r2, r3, #16
 800f062:	b29b      	uxth	r3, r3
 800f064:	ebaa 0303 	sub.w	r3, sl, r3
 800f068:	f8dc a000 	ldr.w	sl, [ip]
 800f06c:	fa13 f38a 	uxtah	r3, r3, sl
 800f070:	fb06 220e 	mla	r2, r6, lr, r2
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	9b00      	ldr	r3, [sp, #0]
 800f078:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f07c:	b292      	uxth	r2, r2
 800f07e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f082:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f086:	f8bd 3000 	ldrh.w	r3, [sp]
 800f08a:	4581      	cmp	r9, r0
 800f08c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f090:	f84c 3b04 	str.w	r3, [ip], #4
 800f094:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f098:	d2db      	bcs.n	800f052 <quorem+0x42>
 800f09a:	f855 300b 	ldr.w	r3, [r5, fp]
 800f09e:	b92b      	cbnz	r3, 800f0ac <quorem+0x9c>
 800f0a0:	9b01      	ldr	r3, [sp, #4]
 800f0a2:	3b04      	subs	r3, #4
 800f0a4:	429d      	cmp	r5, r3
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	d32c      	bcc.n	800f104 <quorem+0xf4>
 800f0aa:	613c      	str	r4, [r7, #16]
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f001 f943 	bl	8010338 <__mcmp>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	db22      	blt.n	800f0fc <quorem+0xec>
 800f0b6:	3601      	adds	r6, #1
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	2000      	movs	r0, #0
 800f0bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0c0:	f8d1 c000 	ldr.w	ip, [r1]
 800f0c4:	b293      	uxth	r3, r2
 800f0c6:	1ac3      	subs	r3, r0, r3
 800f0c8:	0c12      	lsrs	r2, r2, #16
 800f0ca:	fa13 f38c 	uxtah	r3, r3, ip
 800f0ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f0d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0dc:	45c1      	cmp	r9, r8
 800f0de:	f841 3b04 	str.w	r3, [r1], #4
 800f0e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f0e6:	d2e9      	bcs.n	800f0bc <quorem+0xac>
 800f0e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0f0:	b922      	cbnz	r2, 800f0fc <quorem+0xec>
 800f0f2:	3b04      	subs	r3, #4
 800f0f4:	429d      	cmp	r5, r3
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	d30a      	bcc.n	800f110 <quorem+0x100>
 800f0fa:	613c      	str	r4, [r7, #16]
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	b003      	add	sp, #12
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	6812      	ldr	r2, [r2, #0]
 800f106:	3b04      	subs	r3, #4
 800f108:	2a00      	cmp	r2, #0
 800f10a:	d1ce      	bne.n	800f0aa <quorem+0x9a>
 800f10c:	3c01      	subs	r4, #1
 800f10e:	e7c9      	b.n	800f0a4 <quorem+0x94>
 800f110:	6812      	ldr	r2, [r2, #0]
 800f112:	3b04      	subs	r3, #4
 800f114:	2a00      	cmp	r2, #0
 800f116:	d1f0      	bne.n	800f0fa <quorem+0xea>
 800f118:	3c01      	subs	r4, #1
 800f11a:	e7eb      	b.n	800f0f4 <quorem+0xe4>
 800f11c:	2000      	movs	r0, #0
 800f11e:	e7ee      	b.n	800f0fe <quorem+0xee>

0800f120 <_dtoa_r>:
 800f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f124:	ed2d 8b04 	vpush	{d8-d9}
 800f128:	69c5      	ldr	r5, [r0, #28]
 800f12a:	b093      	sub	sp, #76	; 0x4c
 800f12c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f130:	ec57 6b10 	vmov	r6, r7, d0
 800f134:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f138:	9107      	str	r1, [sp, #28]
 800f13a:	4604      	mov	r4, r0
 800f13c:	920a      	str	r2, [sp, #40]	; 0x28
 800f13e:	930d      	str	r3, [sp, #52]	; 0x34
 800f140:	b975      	cbnz	r5, 800f160 <_dtoa_r+0x40>
 800f142:	2010      	movs	r0, #16
 800f144:	f000 fe2a 	bl	800fd9c <malloc>
 800f148:	4602      	mov	r2, r0
 800f14a:	61e0      	str	r0, [r4, #28]
 800f14c:	b920      	cbnz	r0, 800f158 <_dtoa_r+0x38>
 800f14e:	4bae      	ldr	r3, [pc, #696]	; (800f408 <_dtoa_r+0x2e8>)
 800f150:	21ef      	movs	r1, #239	; 0xef
 800f152:	48ae      	ldr	r0, [pc, #696]	; (800f40c <_dtoa_r+0x2ec>)
 800f154:	f002 ff3c 	bl	8011fd0 <__assert_func>
 800f158:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f15c:	6005      	str	r5, [r0, #0]
 800f15e:	60c5      	str	r5, [r0, #12]
 800f160:	69e3      	ldr	r3, [r4, #28]
 800f162:	6819      	ldr	r1, [r3, #0]
 800f164:	b151      	cbz	r1, 800f17c <_dtoa_r+0x5c>
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	604a      	str	r2, [r1, #4]
 800f16a:	2301      	movs	r3, #1
 800f16c:	4093      	lsls	r3, r2
 800f16e:	608b      	str	r3, [r1, #8]
 800f170:	4620      	mov	r0, r4
 800f172:	f000 fe5b 	bl	800fe2c <_Bfree>
 800f176:	69e3      	ldr	r3, [r4, #28]
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	1e3b      	subs	r3, r7, #0
 800f17e:	bfbb      	ittet	lt
 800f180:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f184:	9303      	strlt	r3, [sp, #12]
 800f186:	2300      	movge	r3, #0
 800f188:	2201      	movlt	r2, #1
 800f18a:	bfac      	ite	ge
 800f18c:	f8c8 3000 	strge.w	r3, [r8]
 800f190:	f8c8 2000 	strlt.w	r2, [r8]
 800f194:	4b9e      	ldr	r3, [pc, #632]	; (800f410 <_dtoa_r+0x2f0>)
 800f196:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f19a:	ea33 0308 	bics.w	r3, r3, r8
 800f19e:	d11b      	bne.n	800f1d8 <_dtoa_r+0xb8>
 800f1a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1a6:	6013      	str	r3, [r2, #0]
 800f1a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f1ac:	4333      	orrs	r3, r6
 800f1ae:	f000 8593 	beq.w	800fcd8 <_dtoa_r+0xbb8>
 800f1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1b4:	b963      	cbnz	r3, 800f1d0 <_dtoa_r+0xb0>
 800f1b6:	4b97      	ldr	r3, [pc, #604]	; (800f414 <_dtoa_r+0x2f4>)
 800f1b8:	e027      	b.n	800f20a <_dtoa_r+0xea>
 800f1ba:	4b97      	ldr	r3, [pc, #604]	; (800f418 <_dtoa_r+0x2f8>)
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	3308      	adds	r3, #8
 800f1c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	9800      	ldr	r0, [sp, #0]
 800f1c6:	b013      	add	sp, #76	; 0x4c
 800f1c8:	ecbd 8b04 	vpop	{d8-d9}
 800f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d0:	4b90      	ldr	r3, [pc, #576]	; (800f414 <_dtoa_r+0x2f4>)
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	3303      	adds	r3, #3
 800f1d6:	e7f3      	b.n	800f1c0 <_dtoa_r+0xa0>
 800f1d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	ec51 0b17 	vmov	r0, r1, d7
 800f1e2:	eeb0 8a47 	vmov.f32	s16, s14
 800f1e6:	eef0 8a67 	vmov.f32	s17, s15
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	f7f1 fc8c 	bl	8000b08 <__aeabi_dcmpeq>
 800f1f0:	4681      	mov	r9, r0
 800f1f2:	b160      	cbz	r0, 800f20e <_dtoa_r+0xee>
 800f1f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	6013      	str	r3, [r2, #0]
 800f1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f000 8568 	beq.w	800fcd2 <_dtoa_r+0xbb2>
 800f202:	4b86      	ldr	r3, [pc, #536]	; (800f41c <_dtoa_r+0x2fc>)
 800f204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f206:	6013      	str	r3, [r2, #0]
 800f208:	3b01      	subs	r3, #1
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	e7da      	b.n	800f1c4 <_dtoa_r+0xa4>
 800f20e:	aa10      	add	r2, sp, #64	; 0x40
 800f210:	a911      	add	r1, sp, #68	; 0x44
 800f212:	4620      	mov	r0, r4
 800f214:	eeb0 0a48 	vmov.f32	s0, s16
 800f218:	eef0 0a68 	vmov.f32	s1, s17
 800f21c:	f001 f9a2 	bl	8010564 <__d2b>
 800f220:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f224:	4682      	mov	sl, r0
 800f226:	2d00      	cmp	r5, #0
 800f228:	d07f      	beq.n	800f32a <_dtoa_r+0x20a>
 800f22a:	ee18 3a90 	vmov	r3, s17
 800f22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f232:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f236:	ec51 0b18 	vmov	r0, r1, d8
 800f23a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f23e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f242:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f246:	4619      	mov	r1, r3
 800f248:	2200      	movs	r2, #0
 800f24a:	4b75      	ldr	r3, [pc, #468]	; (800f420 <_dtoa_r+0x300>)
 800f24c:	f7f1 f83c 	bl	80002c8 <__aeabi_dsub>
 800f250:	a367      	add	r3, pc, #412	; (adr r3, 800f3f0 <_dtoa_r+0x2d0>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f7f1 f9ef 	bl	8000638 <__aeabi_dmul>
 800f25a:	a367      	add	r3, pc, #412	; (adr r3, 800f3f8 <_dtoa_r+0x2d8>)
 800f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f260:	f7f1 f834 	bl	80002cc <__adddf3>
 800f264:	4606      	mov	r6, r0
 800f266:	4628      	mov	r0, r5
 800f268:	460f      	mov	r7, r1
 800f26a:	f7f1 f97b 	bl	8000564 <__aeabi_i2d>
 800f26e:	a364      	add	r3, pc, #400	; (adr r3, 800f400 <_dtoa_r+0x2e0>)
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	f7f1 f9e0 	bl	8000638 <__aeabi_dmul>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	f7f1 f824 	bl	80002cc <__adddf3>
 800f284:	4606      	mov	r6, r0
 800f286:	460f      	mov	r7, r1
 800f288:	f7f1 fc86 	bl	8000b98 <__aeabi_d2iz>
 800f28c:	2200      	movs	r2, #0
 800f28e:	4683      	mov	fp, r0
 800f290:	2300      	movs	r3, #0
 800f292:	4630      	mov	r0, r6
 800f294:	4639      	mov	r1, r7
 800f296:	f7f1 fc41 	bl	8000b1c <__aeabi_dcmplt>
 800f29a:	b148      	cbz	r0, 800f2b0 <_dtoa_r+0x190>
 800f29c:	4658      	mov	r0, fp
 800f29e:	f7f1 f961 	bl	8000564 <__aeabi_i2d>
 800f2a2:	4632      	mov	r2, r6
 800f2a4:	463b      	mov	r3, r7
 800f2a6:	f7f1 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 800f2aa:	b908      	cbnz	r0, 800f2b0 <_dtoa_r+0x190>
 800f2ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b0:	f1bb 0f16 	cmp.w	fp, #22
 800f2b4:	d857      	bhi.n	800f366 <_dtoa_r+0x246>
 800f2b6:	4b5b      	ldr	r3, [pc, #364]	; (800f424 <_dtoa_r+0x304>)
 800f2b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	ec51 0b18 	vmov	r0, r1, d8
 800f2c4:	f7f1 fc2a 	bl	8000b1c <__aeabi_dcmplt>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d04e      	beq.n	800f36a <_dtoa_r+0x24a>
 800f2cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2d6:	1b5b      	subs	r3, r3, r5
 800f2d8:	1e5a      	subs	r2, r3, #1
 800f2da:	bf45      	ittet	mi
 800f2dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800f2e0:	9305      	strmi	r3, [sp, #20]
 800f2e2:	2300      	movpl	r3, #0
 800f2e4:	2300      	movmi	r3, #0
 800f2e6:	9206      	str	r2, [sp, #24]
 800f2e8:	bf54      	ite	pl
 800f2ea:	9305      	strpl	r3, [sp, #20]
 800f2ec:	9306      	strmi	r3, [sp, #24]
 800f2ee:	f1bb 0f00 	cmp.w	fp, #0
 800f2f2:	db3c      	blt.n	800f36e <_dtoa_r+0x24e>
 800f2f4:	9b06      	ldr	r3, [sp, #24]
 800f2f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f2fa:	445b      	add	r3, fp
 800f2fc:	9306      	str	r3, [sp, #24]
 800f2fe:	2300      	movs	r3, #0
 800f300:	9308      	str	r3, [sp, #32]
 800f302:	9b07      	ldr	r3, [sp, #28]
 800f304:	2b09      	cmp	r3, #9
 800f306:	d868      	bhi.n	800f3da <_dtoa_r+0x2ba>
 800f308:	2b05      	cmp	r3, #5
 800f30a:	bfc4      	itt	gt
 800f30c:	3b04      	subgt	r3, #4
 800f30e:	9307      	strgt	r3, [sp, #28]
 800f310:	9b07      	ldr	r3, [sp, #28]
 800f312:	f1a3 0302 	sub.w	r3, r3, #2
 800f316:	bfcc      	ite	gt
 800f318:	2500      	movgt	r5, #0
 800f31a:	2501      	movle	r5, #1
 800f31c:	2b03      	cmp	r3, #3
 800f31e:	f200 8085 	bhi.w	800f42c <_dtoa_r+0x30c>
 800f322:	e8df f003 	tbb	[pc, r3]
 800f326:	3b2e      	.short	0x3b2e
 800f328:	5839      	.short	0x5839
 800f32a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f32e:	441d      	add	r5, r3
 800f330:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f334:	2b20      	cmp	r3, #32
 800f336:	bfc1      	itttt	gt
 800f338:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f33c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f340:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f344:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f348:	bfd6      	itet	le
 800f34a:	f1c3 0320 	rsble	r3, r3, #32
 800f34e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f352:	fa06 f003 	lslle.w	r0, r6, r3
 800f356:	f7f1 f8f5 	bl	8000544 <__aeabi_ui2d>
 800f35a:	2201      	movs	r2, #1
 800f35c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f360:	3d01      	subs	r5, #1
 800f362:	920e      	str	r2, [sp, #56]	; 0x38
 800f364:	e76f      	b.n	800f246 <_dtoa_r+0x126>
 800f366:	2301      	movs	r3, #1
 800f368:	e7b3      	b.n	800f2d2 <_dtoa_r+0x1b2>
 800f36a:	900c      	str	r0, [sp, #48]	; 0x30
 800f36c:	e7b2      	b.n	800f2d4 <_dtoa_r+0x1b4>
 800f36e:	9b05      	ldr	r3, [sp, #20]
 800f370:	eba3 030b 	sub.w	r3, r3, fp
 800f374:	9305      	str	r3, [sp, #20]
 800f376:	f1cb 0300 	rsb	r3, fp, #0
 800f37a:	9308      	str	r3, [sp, #32]
 800f37c:	2300      	movs	r3, #0
 800f37e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f380:	e7bf      	b.n	800f302 <_dtoa_r+0x1e2>
 800f382:	2300      	movs	r3, #0
 800f384:	9309      	str	r3, [sp, #36]	; 0x24
 800f386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f388:	2b00      	cmp	r3, #0
 800f38a:	dc52      	bgt.n	800f432 <_dtoa_r+0x312>
 800f38c:	2301      	movs	r3, #1
 800f38e:	9301      	str	r3, [sp, #4]
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	461a      	mov	r2, r3
 800f394:	920a      	str	r2, [sp, #40]	; 0x28
 800f396:	e00b      	b.n	800f3b0 <_dtoa_r+0x290>
 800f398:	2301      	movs	r3, #1
 800f39a:	e7f3      	b.n	800f384 <_dtoa_r+0x264>
 800f39c:	2300      	movs	r3, #0
 800f39e:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a2:	445b      	add	r3, fp
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	9304      	str	r3, [sp, #16]
 800f3ac:	bfb8      	it	lt
 800f3ae:	2301      	movlt	r3, #1
 800f3b0:	69e0      	ldr	r0, [r4, #28]
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	2204      	movs	r2, #4
 800f3b6:	f102 0614 	add.w	r6, r2, #20
 800f3ba:	429e      	cmp	r6, r3
 800f3bc:	d93d      	bls.n	800f43a <_dtoa_r+0x31a>
 800f3be:	6041      	str	r1, [r0, #4]
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 fcf3 	bl	800fdac <_Balloc>
 800f3c6:	9000      	str	r0, [sp, #0]
 800f3c8:	2800      	cmp	r0, #0
 800f3ca:	d139      	bne.n	800f440 <_dtoa_r+0x320>
 800f3cc:	4b16      	ldr	r3, [pc, #88]	; (800f428 <_dtoa_r+0x308>)
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	f240 11af 	movw	r1, #431	; 0x1af
 800f3d4:	e6bd      	b.n	800f152 <_dtoa_r+0x32>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e7e1      	b.n	800f39e <_dtoa_r+0x27e>
 800f3da:	2501      	movs	r5, #1
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9307      	str	r3, [sp, #28]
 800f3e0:	9509      	str	r5, [sp, #36]	; 0x24
 800f3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e6:	9301      	str	r3, [sp, #4]
 800f3e8:	9304      	str	r3, [sp, #16]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	2312      	movs	r3, #18
 800f3ee:	e7d1      	b.n	800f394 <_dtoa_r+0x274>
 800f3f0:	636f4361 	.word	0x636f4361
 800f3f4:	3fd287a7 	.word	0x3fd287a7
 800f3f8:	8b60c8b3 	.word	0x8b60c8b3
 800f3fc:	3fc68a28 	.word	0x3fc68a28
 800f400:	509f79fb 	.word	0x509f79fb
 800f404:	3fd34413 	.word	0x3fd34413
 800f408:	08014084 	.word	0x08014084
 800f40c:	0801409b 	.word	0x0801409b
 800f410:	7ff00000 	.word	0x7ff00000
 800f414:	08014080 	.word	0x08014080
 800f418:	08014077 	.word	0x08014077
 800f41c:	080143d9 	.word	0x080143d9
 800f420:	3ff80000 	.word	0x3ff80000
 800f424:	08014188 	.word	0x08014188
 800f428:	080140f3 	.word	0x080140f3
 800f42c:	2301      	movs	r3, #1
 800f42e:	9309      	str	r3, [sp, #36]	; 0x24
 800f430:	e7d7      	b.n	800f3e2 <_dtoa_r+0x2c2>
 800f432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f434:	9301      	str	r3, [sp, #4]
 800f436:	9304      	str	r3, [sp, #16]
 800f438:	e7ba      	b.n	800f3b0 <_dtoa_r+0x290>
 800f43a:	3101      	adds	r1, #1
 800f43c:	0052      	lsls	r2, r2, #1
 800f43e:	e7ba      	b.n	800f3b6 <_dtoa_r+0x296>
 800f440:	69e3      	ldr	r3, [r4, #28]
 800f442:	9a00      	ldr	r2, [sp, #0]
 800f444:	601a      	str	r2, [r3, #0]
 800f446:	9b04      	ldr	r3, [sp, #16]
 800f448:	2b0e      	cmp	r3, #14
 800f44a:	f200 80a8 	bhi.w	800f59e <_dtoa_r+0x47e>
 800f44e:	2d00      	cmp	r5, #0
 800f450:	f000 80a5 	beq.w	800f59e <_dtoa_r+0x47e>
 800f454:	f1bb 0f00 	cmp.w	fp, #0
 800f458:	dd38      	ble.n	800f4cc <_dtoa_r+0x3ac>
 800f45a:	4bc0      	ldr	r3, [pc, #768]	; (800f75c <_dtoa_r+0x63c>)
 800f45c:	f00b 020f 	and.w	r2, fp, #15
 800f460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f464:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f468:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f46c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f470:	d019      	beq.n	800f4a6 <_dtoa_r+0x386>
 800f472:	4bbb      	ldr	r3, [pc, #748]	; (800f760 <_dtoa_r+0x640>)
 800f474:	ec51 0b18 	vmov	r0, r1, d8
 800f478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f47c:	f7f1 fa06 	bl	800088c <__aeabi_ddiv>
 800f480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f484:	f008 080f 	and.w	r8, r8, #15
 800f488:	2503      	movs	r5, #3
 800f48a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f760 <_dtoa_r+0x640>
 800f48e:	f1b8 0f00 	cmp.w	r8, #0
 800f492:	d10a      	bne.n	800f4aa <_dtoa_r+0x38a>
 800f494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f498:	4632      	mov	r2, r6
 800f49a:	463b      	mov	r3, r7
 800f49c:	f7f1 f9f6 	bl	800088c <__aeabi_ddiv>
 800f4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a4:	e02b      	b.n	800f4fe <_dtoa_r+0x3de>
 800f4a6:	2502      	movs	r5, #2
 800f4a8:	e7ef      	b.n	800f48a <_dtoa_r+0x36a>
 800f4aa:	f018 0f01 	tst.w	r8, #1
 800f4ae:	d008      	beq.n	800f4c2 <_dtoa_r+0x3a2>
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	4639      	mov	r1, r7
 800f4b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f4b8:	f7f1 f8be 	bl	8000638 <__aeabi_dmul>
 800f4bc:	3501      	adds	r5, #1
 800f4be:	4606      	mov	r6, r0
 800f4c0:	460f      	mov	r7, r1
 800f4c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f4c6:	f109 0908 	add.w	r9, r9, #8
 800f4ca:	e7e0      	b.n	800f48e <_dtoa_r+0x36e>
 800f4cc:	f000 809f 	beq.w	800f60e <_dtoa_r+0x4ee>
 800f4d0:	f1cb 0600 	rsb	r6, fp, #0
 800f4d4:	4ba1      	ldr	r3, [pc, #644]	; (800f75c <_dtoa_r+0x63c>)
 800f4d6:	4fa2      	ldr	r7, [pc, #648]	; (800f760 <_dtoa_r+0x640>)
 800f4d8:	f006 020f 	and.w	r2, r6, #15
 800f4dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	ec51 0b18 	vmov	r0, r1, d8
 800f4e8:	f7f1 f8a6 	bl	8000638 <__aeabi_dmul>
 800f4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f0:	1136      	asrs	r6, r6, #4
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	2502      	movs	r5, #2
 800f4f6:	2e00      	cmp	r6, #0
 800f4f8:	d17e      	bne.n	800f5f8 <_dtoa_r+0x4d8>
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1d0      	bne.n	800f4a0 <_dtoa_r+0x380>
 800f4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f500:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 8084 	beq.w	800f612 <_dtoa_r+0x4f2>
 800f50a:	4b96      	ldr	r3, [pc, #600]	; (800f764 <_dtoa_r+0x644>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	4640      	mov	r0, r8
 800f510:	4649      	mov	r1, r9
 800f512:	f7f1 fb03 	bl	8000b1c <__aeabi_dcmplt>
 800f516:	2800      	cmp	r0, #0
 800f518:	d07b      	beq.n	800f612 <_dtoa_r+0x4f2>
 800f51a:	9b04      	ldr	r3, [sp, #16]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d078      	beq.n	800f612 <_dtoa_r+0x4f2>
 800f520:	9b01      	ldr	r3, [sp, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	dd39      	ble.n	800f59a <_dtoa_r+0x47a>
 800f526:	4b90      	ldr	r3, [pc, #576]	; (800f768 <_dtoa_r+0x648>)
 800f528:	2200      	movs	r2, #0
 800f52a:	4640      	mov	r0, r8
 800f52c:	4649      	mov	r1, r9
 800f52e:	f7f1 f883 	bl	8000638 <__aeabi_dmul>
 800f532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f536:	9e01      	ldr	r6, [sp, #4]
 800f538:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f53c:	3501      	adds	r5, #1
 800f53e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f542:	4628      	mov	r0, r5
 800f544:	f7f1 f80e 	bl	8000564 <__aeabi_i2d>
 800f548:	4642      	mov	r2, r8
 800f54a:	464b      	mov	r3, r9
 800f54c:	f7f1 f874 	bl	8000638 <__aeabi_dmul>
 800f550:	4b86      	ldr	r3, [pc, #536]	; (800f76c <_dtoa_r+0x64c>)
 800f552:	2200      	movs	r2, #0
 800f554:	f7f0 feba 	bl	80002cc <__adddf3>
 800f558:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f560:	9303      	str	r3, [sp, #12]
 800f562:	2e00      	cmp	r6, #0
 800f564:	d158      	bne.n	800f618 <_dtoa_r+0x4f8>
 800f566:	4b82      	ldr	r3, [pc, #520]	; (800f770 <_dtoa_r+0x650>)
 800f568:	2200      	movs	r2, #0
 800f56a:	4640      	mov	r0, r8
 800f56c:	4649      	mov	r1, r9
 800f56e:	f7f0 feab 	bl	80002c8 <__aeabi_dsub>
 800f572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f576:	4680      	mov	r8, r0
 800f578:	4689      	mov	r9, r1
 800f57a:	f7f1 faed 	bl	8000b58 <__aeabi_dcmpgt>
 800f57e:	2800      	cmp	r0, #0
 800f580:	f040 8296 	bne.w	800fab0 <_dtoa_r+0x990>
 800f584:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f588:	4640      	mov	r0, r8
 800f58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f58e:	4649      	mov	r1, r9
 800f590:	f7f1 fac4 	bl	8000b1c <__aeabi_dcmplt>
 800f594:	2800      	cmp	r0, #0
 800f596:	f040 8289 	bne.w	800faac <_dtoa_r+0x98c>
 800f59a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f2c0 814e 	blt.w	800f842 <_dtoa_r+0x722>
 800f5a6:	f1bb 0f0e 	cmp.w	fp, #14
 800f5aa:	f300 814a 	bgt.w	800f842 <_dtoa_r+0x722>
 800f5ae:	4b6b      	ldr	r3, [pc, #428]	; (800f75c <_dtoa_r+0x63c>)
 800f5b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f5b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f280 80dc 	bge.w	800f778 <_dtoa_r+0x658>
 800f5c0:	9b04      	ldr	r3, [sp, #16]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f300 80d8 	bgt.w	800f778 <_dtoa_r+0x658>
 800f5c8:	f040 826f 	bne.w	800faaa <_dtoa_r+0x98a>
 800f5cc:	4b68      	ldr	r3, [pc, #416]	; (800f770 <_dtoa_r+0x650>)
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	4649      	mov	r1, r9
 800f5d4:	f7f1 f830 	bl	8000638 <__aeabi_dmul>
 800f5d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5dc:	f7f1 fab2 	bl	8000b44 <__aeabi_dcmpge>
 800f5e0:	9e04      	ldr	r6, [sp, #16]
 800f5e2:	4637      	mov	r7, r6
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	f040 8245 	bne.w	800fa74 <_dtoa_r+0x954>
 800f5ea:	9d00      	ldr	r5, [sp, #0]
 800f5ec:	2331      	movs	r3, #49	; 0x31
 800f5ee:	f805 3b01 	strb.w	r3, [r5], #1
 800f5f2:	f10b 0b01 	add.w	fp, fp, #1
 800f5f6:	e241      	b.n	800fa7c <_dtoa_r+0x95c>
 800f5f8:	07f2      	lsls	r2, r6, #31
 800f5fa:	d505      	bpl.n	800f608 <_dtoa_r+0x4e8>
 800f5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f600:	f7f1 f81a 	bl	8000638 <__aeabi_dmul>
 800f604:	3501      	adds	r5, #1
 800f606:	2301      	movs	r3, #1
 800f608:	1076      	asrs	r6, r6, #1
 800f60a:	3708      	adds	r7, #8
 800f60c:	e773      	b.n	800f4f6 <_dtoa_r+0x3d6>
 800f60e:	2502      	movs	r5, #2
 800f610:	e775      	b.n	800f4fe <_dtoa_r+0x3de>
 800f612:	9e04      	ldr	r6, [sp, #16]
 800f614:	465f      	mov	r7, fp
 800f616:	e792      	b.n	800f53e <_dtoa_r+0x41e>
 800f618:	9900      	ldr	r1, [sp, #0]
 800f61a:	4b50      	ldr	r3, [pc, #320]	; (800f75c <_dtoa_r+0x63c>)
 800f61c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f620:	4431      	add	r1, r6
 800f622:	9102      	str	r1, [sp, #8]
 800f624:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f626:	eeb0 9a47 	vmov.f32	s18, s14
 800f62a:	eef0 9a67 	vmov.f32	s19, s15
 800f62e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f632:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f636:	2900      	cmp	r1, #0
 800f638:	d044      	beq.n	800f6c4 <_dtoa_r+0x5a4>
 800f63a:	494e      	ldr	r1, [pc, #312]	; (800f774 <_dtoa_r+0x654>)
 800f63c:	2000      	movs	r0, #0
 800f63e:	f7f1 f925 	bl	800088c <__aeabi_ddiv>
 800f642:	ec53 2b19 	vmov	r2, r3, d9
 800f646:	f7f0 fe3f 	bl	80002c8 <__aeabi_dsub>
 800f64a:	9d00      	ldr	r5, [sp, #0]
 800f64c:	ec41 0b19 	vmov	d9, r0, r1
 800f650:	4649      	mov	r1, r9
 800f652:	4640      	mov	r0, r8
 800f654:	f7f1 faa0 	bl	8000b98 <__aeabi_d2iz>
 800f658:	4606      	mov	r6, r0
 800f65a:	f7f0 ff83 	bl	8000564 <__aeabi_i2d>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	4640      	mov	r0, r8
 800f664:	4649      	mov	r1, r9
 800f666:	f7f0 fe2f 	bl	80002c8 <__aeabi_dsub>
 800f66a:	3630      	adds	r6, #48	; 0x30
 800f66c:	f805 6b01 	strb.w	r6, [r5], #1
 800f670:	ec53 2b19 	vmov	r2, r3, d9
 800f674:	4680      	mov	r8, r0
 800f676:	4689      	mov	r9, r1
 800f678:	f7f1 fa50 	bl	8000b1c <__aeabi_dcmplt>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d164      	bne.n	800f74a <_dtoa_r+0x62a>
 800f680:	4642      	mov	r2, r8
 800f682:	464b      	mov	r3, r9
 800f684:	4937      	ldr	r1, [pc, #220]	; (800f764 <_dtoa_r+0x644>)
 800f686:	2000      	movs	r0, #0
 800f688:	f7f0 fe1e 	bl	80002c8 <__aeabi_dsub>
 800f68c:	ec53 2b19 	vmov	r2, r3, d9
 800f690:	f7f1 fa44 	bl	8000b1c <__aeabi_dcmplt>
 800f694:	2800      	cmp	r0, #0
 800f696:	f040 80b6 	bne.w	800f806 <_dtoa_r+0x6e6>
 800f69a:	9b02      	ldr	r3, [sp, #8]
 800f69c:	429d      	cmp	r5, r3
 800f69e:	f43f af7c 	beq.w	800f59a <_dtoa_r+0x47a>
 800f6a2:	4b31      	ldr	r3, [pc, #196]	; (800f768 <_dtoa_r+0x648>)
 800f6a4:	ec51 0b19 	vmov	r0, r1, d9
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f7f0 ffc5 	bl	8000638 <__aeabi_dmul>
 800f6ae:	4b2e      	ldr	r3, [pc, #184]	; (800f768 <_dtoa_r+0x648>)
 800f6b0:	ec41 0b19 	vmov	d9, r0, r1
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	4640      	mov	r0, r8
 800f6b8:	4649      	mov	r1, r9
 800f6ba:	f7f0 ffbd 	bl	8000638 <__aeabi_dmul>
 800f6be:	4680      	mov	r8, r0
 800f6c0:	4689      	mov	r9, r1
 800f6c2:	e7c5      	b.n	800f650 <_dtoa_r+0x530>
 800f6c4:	ec51 0b17 	vmov	r0, r1, d7
 800f6c8:	f7f0 ffb6 	bl	8000638 <__aeabi_dmul>
 800f6cc:	9b02      	ldr	r3, [sp, #8]
 800f6ce:	9d00      	ldr	r5, [sp, #0]
 800f6d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6d2:	ec41 0b19 	vmov	d9, r0, r1
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	4640      	mov	r0, r8
 800f6da:	f7f1 fa5d 	bl	8000b98 <__aeabi_d2iz>
 800f6de:	4606      	mov	r6, r0
 800f6e0:	f7f0 ff40 	bl	8000564 <__aeabi_i2d>
 800f6e4:	3630      	adds	r6, #48	; 0x30
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	f7f0 fdeb 	bl	80002c8 <__aeabi_dsub>
 800f6f2:	f805 6b01 	strb.w	r6, [r5], #1
 800f6f6:	9b02      	ldr	r3, [sp, #8]
 800f6f8:	429d      	cmp	r5, r3
 800f6fa:	4680      	mov	r8, r0
 800f6fc:	4689      	mov	r9, r1
 800f6fe:	f04f 0200 	mov.w	r2, #0
 800f702:	d124      	bne.n	800f74e <_dtoa_r+0x62e>
 800f704:	4b1b      	ldr	r3, [pc, #108]	; (800f774 <_dtoa_r+0x654>)
 800f706:	ec51 0b19 	vmov	r0, r1, d9
 800f70a:	f7f0 fddf 	bl	80002cc <__adddf3>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4640      	mov	r0, r8
 800f714:	4649      	mov	r1, r9
 800f716:	f7f1 fa1f 	bl	8000b58 <__aeabi_dcmpgt>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d173      	bne.n	800f806 <_dtoa_r+0x6e6>
 800f71e:	ec53 2b19 	vmov	r2, r3, d9
 800f722:	4914      	ldr	r1, [pc, #80]	; (800f774 <_dtoa_r+0x654>)
 800f724:	2000      	movs	r0, #0
 800f726:	f7f0 fdcf 	bl	80002c8 <__aeabi_dsub>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	4640      	mov	r0, r8
 800f730:	4649      	mov	r1, r9
 800f732:	f7f1 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 800f736:	2800      	cmp	r0, #0
 800f738:	f43f af2f 	beq.w	800f59a <_dtoa_r+0x47a>
 800f73c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f73e:	1e6b      	subs	r3, r5, #1
 800f740:	930f      	str	r3, [sp, #60]	; 0x3c
 800f742:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f746:	2b30      	cmp	r3, #48	; 0x30
 800f748:	d0f8      	beq.n	800f73c <_dtoa_r+0x61c>
 800f74a:	46bb      	mov	fp, r7
 800f74c:	e04a      	b.n	800f7e4 <_dtoa_r+0x6c4>
 800f74e:	4b06      	ldr	r3, [pc, #24]	; (800f768 <_dtoa_r+0x648>)
 800f750:	f7f0 ff72 	bl	8000638 <__aeabi_dmul>
 800f754:	4680      	mov	r8, r0
 800f756:	4689      	mov	r9, r1
 800f758:	e7bd      	b.n	800f6d6 <_dtoa_r+0x5b6>
 800f75a:	bf00      	nop
 800f75c:	08014188 	.word	0x08014188
 800f760:	08014160 	.word	0x08014160
 800f764:	3ff00000 	.word	0x3ff00000
 800f768:	40240000 	.word	0x40240000
 800f76c:	401c0000 	.word	0x401c0000
 800f770:	40140000 	.word	0x40140000
 800f774:	3fe00000 	.word	0x3fe00000
 800f778:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f77c:	9d00      	ldr	r5, [sp, #0]
 800f77e:	4642      	mov	r2, r8
 800f780:	464b      	mov	r3, r9
 800f782:	4630      	mov	r0, r6
 800f784:	4639      	mov	r1, r7
 800f786:	f7f1 f881 	bl	800088c <__aeabi_ddiv>
 800f78a:	f7f1 fa05 	bl	8000b98 <__aeabi_d2iz>
 800f78e:	9001      	str	r0, [sp, #4]
 800f790:	f7f0 fee8 	bl	8000564 <__aeabi_i2d>
 800f794:	4642      	mov	r2, r8
 800f796:	464b      	mov	r3, r9
 800f798:	f7f0 ff4e 	bl	8000638 <__aeabi_dmul>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	4639      	mov	r1, r7
 800f7a4:	f7f0 fd90 	bl	80002c8 <__aeabi_dsub>
 800f7a8:	9e01      	ldr	r6, [sp, #4]
 800f7aa:	9f04      	ldr	r7, [sp, #16]
 800f7ac:	3630      	adds	r6, #48	; 0x30
 800f7ae:	f805 6b01 	strb.w	r6, [r5], #1
 800f7b2:	9e00      	ldr	r6, [sp, #0]
 800f7b4:	1bae      	subs	r6, r5, r6
 800f7b6:	42b7      	cmp	r7, r6
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	d134      	bne.n	800f828 <_dtoa_r+0x708>
 800f7be:	f7f0 fd85 	bl	80002cc <__adddf3>
 800f7c2:	4642      	mov	r2, r8
 800f7c4:	464b      	mov	r3, r9
 800f7c6:	4606      	mov	r6, r0
 800f7c8:	460f      	mov	r7, r1
 800f7ca:	f7f1 f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 800f7ce:	b9c8      	cbnz	r0, 800f804 <_dtoa_r+0x6e4>
 800f7d0:	4642      	mov	r2, r8
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	f7f1 f996 	bl	8000b08 <__aeabi_dcmpeq>
 800f7dc:	b110      	cbz	r0, 800f7e4 <_dtoa_r+0x6c4>
 800f7de:	9b01      	ldr	r3, [sp, #4]
 800f7e0:	07db      	lsls	r3, r3, #31
 800f7e2:	d40f      	bmi.n	800f804 <_dtoa_r+0x6e4>
 800f7e4:	4651      	mov	r1, sl
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f000 fb20 	bl	800fe2c <_Bfree>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7f0:	702b      	strb	r3, [r5, #0]
 800f7f2:	f10b 0301 	add.w	r3, fp, #1
 800f7f6:	6013      	str	r3, [r2, #0]
 800f7f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f43f ace2 	beq.w	800f1c4 <_dtoa_r+0xa4>
 800f800:	601d      	str	r5, [r3, #0]
 800f802:	e4df      	b.n	800f1c4 <_dtoa_r+0xa4>
 800f804:	465f      	mov	r7, fp
 800f806:	462b      	mov	r3, r5
 800f808:	461d      	mov	r5, r3
 800f80a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f80e:	2a39      	cmp	r2, #57	; 0x39
 800f810:	d106      	bne.n	800f820 <_dtoa_r+0x700>
 800f812:	9a00      	ldr	r2, [sp, #0]
 800f814:	429a      	cmp	r2, r3
 800f816:	d1f7      	bne.n	800f808 <_dtoa_r+0x6e8>
 800f818:	9900      	ldr	r1, [sp, #0]
 800f81a:	2230      	movs	r2, #48	; 0x30
 800f81c:	3701      	adds	r7, #1
 800f81e:	700a      	strb	r2, [r1, #0]
 800f820:	781a      	ldrb	r2, [r3, #0]
 800f822:	3201      	adds	r2, #1
 800f824:	701a      	strb	r2, [r3, #0]
 800f826:	e790      	b.n	800f74a <_dtoa_r+0x62a>
 800f828:	4ba3      	ldr	r3, [pc, #652]	; (800fab8 <_dtoa_r+0x998>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	f7f0 ff04 	bl	8000638 <__aeabi_dmul>
 800f830:	2200      	movs	r2, #0
 800f832:	2300      	movs	r3, #0
 800f834:	4606      	mov	r6, r0
 800f836:	460f      	mov	r7, r1
 800f838:	f7f1 f966 	bl	8000b08 <__aeabi_dcmpeq>
 800f83c:	2800      	cmp	r0, #0
 800f83e:	d09e      	beq.n	800f77e <_dtoa_r+0x65e>
 800f840:	e7d0      	b.n	800f7e4 <_dtoa_r+0x6c4>
 800f842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f844:	2a00      	cmp	r2, #0
 800f846:	f000 80ca 	beq.w	800f9de <_dtoa_r+0x8be>
 800f84a:	9a07      	ldr	r2, [sp, #28]
 800f84c:	2a01      	cmp	r2, #1
 800f84e:	f300 80ad 	bgt.w	800f9ac <_dtoa_r+0x88c>
 800f852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f854:	2a00      	cmp	r2, #0
 800f856:	f000 80a5 	beq.w	800f9a4 <_dtoa_r+0x884>
 800f85a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f85e:	9e08      	ldr	r6, [sp, #32]
 800f860:	9d05      	ldr	r5, [sp, #20]
 800f862:	9a05      	ldr	r2, [sp, #20]
 800f864:	441a      	add	r2, r3
 800f866:	9205      	str	r2, [sp, #20]
 800f868:	9a06      	ldr	r2, [sp, #24]
 800f86a:	2101      	movs	r1, #1
 800f86c:	441a      	add	r2, r3
 800f86e:	4620      	mov	r0, r4
 800f870:	9206      	str	r2, [sp, #24]
 800f872:	f000 fbdb 	bl	801002c <__i2b>
 800f876:	4607      	mov	r7, r0
 800f878:	b165      	cbz	r5, 800f894 <_dtoa_r+0x774>
 800f87a:	9b06      	ldr	r3, [sp, #24]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	dd09      	ble.n	800f894 <_dtoa_r+0x774>
 800f880:	42ab      	cmp	r3, r5
 800f882:	9a05      	ldr	r2, [sp, #20]
 800f884:	bfa8      	it	ge
 800f886:	462b      	movge	r3, r5
 800f888:	1ad2      	subs	r2, r2, r3
 800f88a:	9205      	str	r2, [sp, #20]
 800f88c:	9a06      	ldr	r2, [sp, #24]
 800f88e:	1aed      	subs	r5, r5, r3
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	9306      	str	r3, [sp, #24]
 800f894:	9b08      	ldr	r3, [sp, #32]
 800f896:	b1f3      	cbz	r3, 800f8d6 <_dtoa_r+0x7b6>
 800f898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 80a3 	beq.w	800f9e6 <_dtoa_r+0x8c6>
 800f8a0:	2e00      	cmp	r6, #0
 800f8a2:	dd10      	ble.n	800f8c6 <_dtoa_r+0x7a6>
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	4632      	mov	r2, r6
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 fc7f 	bl	80101ac <__pow5mult>
 800f8ae:	4652      	mov	r2, sl
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	4607      	mov	r7, r0
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f000 fbcf 	bl	8010058 <__multiply>
 800f8ba:	4651      	mov	r1, sl
 800f8bc:	4680      	mov	r8, r0
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f000 fab4 	bl	800fe2c <_Bfree>
 800f8c4:	46c2      	mov	sl, r8
 800f8c6:	9b08      	ldr	r3, [sp, #32]
 800f8c8:	1b9a      	subs	r2, r3, r6
 800f8ca:	d004      	beq.n	800f8d6 <_dtoa_r+0x7b6>
 800f8cc:	4651      	mov	r1, sl
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 fc6c 	bl	80101ac <__pow5mult>
 800f8d4:	4682      	mov	sl, r0
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 fba7 	bl	801002c <__i2b>
 800f8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	f340 8081 	ble.w	800f9ea <_dtoa_r+0x8ca>
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	4601      	mov	r1, r0
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f000 fc5d 	bl	80101ac <__pow5mult>
 800f8f2:	9b07      	ldr	r3, [sp, #28]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	dd7a      	ble.n	800f9f0 <_dtoa_r+0x8d0>
 800f8fa:	f04f 0800 	mov.w	r8, #0
 800f8fe:	6933      	ldr	r3, [r6, #16]
 800f900:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f904:	6918      	ldr	r0, [r3, #16]
 800f906:	f000 fb43 	bl	800ff90 <__hi0bits>
 800f90a:	f1c0 0020 	rsb	r0, r0, #32
 800f90e:	9b06      	ldr	r3, [sp, #24]
 800f910:	4418      	add	r0, r3
 800f912:	f010 001f 	ands.w	r0, r0, #31
 800f916:	f000 8094 	beq.w	800fa42 <_dtoa_r+0x922>
 800f91a:	f1c0 0320 	rsb	r3, r0, #32
 800f91e:	2b04      	cmp	r3, #4
 800f920:	f340 8085 	ble.w	800fa2e <_dtoa_r+0x90e>
 800f924:	9b05      	ldr	r3, [sp, #20]
 800f926:	f1c0 001c 	rsb	r0, r0, #28
 800f92a:	4403      	add	r3, r0
 800f92c:	9305      	str	r3, [sp, #20]
 800f92e:	9b06      	ldr	r3, [sp, #24]
 800f930:	4403      	add	r3, r0
 800f932:	4405      	add	r5, r0
 800f934:	9306      	str	r3, [sp, #24]
 800f936:	9b05      	ldr	r3, [sp, #20]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dd05      	ble.n	800f948 <_dtoa_r+0x828>
 800f93c:	4651      	mov	r1, sl
 800f93e:	461a      	mov	r2, r3
 800f940:	4620      	mov	r0, r4
 800f942:	f000 fc8d 	bl	8010260 <__lshift>
 800f946:	4682      	mov	sl, r0
 800f948:	9b06      	ldr	r3, [sp, #24]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	dd05      	ble.n	800f95a <_dtoa_r+0x83a>
 800f94e:	4631      	mov	r1, r6
 800f950:	461a      	mov	r2, r3
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fc84 	bl	8010260 <__lshift>
 800f958:	4606      	mov	r6, r0
 800f95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d072      	beq.n	800fa46 <_dtoa_r+0x926>
 800f960:	4631      	mov	r1, r6
 800f962:	4650      	mov	r0, sl
 800f964:	f000 fce8 	bl	8010338 <__mcmp>
 800f968:	2800      	cmp	r0, #0
 800f96a:	da6c      	bge.n	800fa46 <_dtoa_r+0x926>
 800f96c:	2300      	movs	r3, #0
 800f96e:	4651      	mov	r1, sl
 800f970:	220a      	movs	r2, #10
 800f972:	4620      	mov	r0, r4
 800f974:	f000 fa7c 	bl	800fe70 <__multadd>
 800f978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f97a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f97e:	4682      	mov	sl, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	f000 81b0 	beq.w	800fce6 <_dtoa_r+0xbc6>
 800f986:	2300      	movs	r3, #0
 800f988:	4639      	mov	r1, r7
 800f98a:	220a      	movs	r2, #10
 800f98c:	4620      	mov	r0, r4
 800f98e:	f000 fa6f 	bl	800fe70 <__multadd>
 800f992:	9b01      	ldr	r3, [sp, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	4607      	mov	r7, r0
 800f998:	f300 8096 	bgt.w	800fac8 <_dtoa_r+0x9a8>
 800f99c:	9b07      	ldr	r3, [sp, #28]
 800f99e:	2b02      	cmp	r3, #2
 800f9a0:	dc59      	bgt.n	800fa56 <_dtoa_r+0x936>
 800f9a2:	e091      	b.n	800fac8 <_dtoa_r+0x9a8>
 800f9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9aa:	e758      	b.n	800f85e <_dtoa_r+0x73e>
 800f9ac:	9b04      	ldr	r3, [sp, #16]
 800f9ae:	1e5e      	subs	r6, r3, #1
 800f9b0:	9b08      	ldr	r3, [sp, #32]
 800f9b2:	42b3      	cmp	r3, r6
 800f9b4:	bfbf      	itttt	lt
 800f9b6:	9b08      	ldrlt	r3, [sp, #32]
 800f9b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f9ba:	9608      	strlt	r6, [sp, #32]
 800f9bc:	1af3      	sublt	r3, r6, r3
 800f9be:	bfb4      	ite	lt
 800f9c0:	18d2      	addlt	r2, r2, r3
 800f9c2:	1b9e      	subge	r6, r3, r6
 800f9c4:	9b04      	ldr	r3, [sp, #16]
 800f9c6:	bfbc      	itt	lt
 800f9c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f9ca:	2600      	movlt	r6, #0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bfb7      	itett	lt
 800f9d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f9d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f9d8:	1a9d      	sublt	r5, r3, r2
 800f9da:	2300      	movlt	r3, #0
 800f9dc:	e741      	b.n	800f862 <_dtoa_r+0x742>
 800f9de:	9e08      	ldr	r6, [sp, #32]
 800f9e0:	9d05      	ldr	r5, [sp, #20]
 800f9e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f9e4:	e748      	b.n	800f878 <_dtoa_r+0x758>
 800f9e6:	9a08      	ldr	r2, [sp, #32]
 800f9e8:	e770      	b.n	800f8cc <_dtoa_r+0x7ac>
 800f9ea:	9b07      	ldr	r3, [sp, #28]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	dc19      	bgt.n	800fa24 <_dtoa_r+0x904>
 800f9f0:	9b02      	ldr	r3, [sp, #8]
 800f9f2:	b9bb      	cbnz	r3, 800fa24 <_dtoa_r+0x904>
 800f9f4:	9b03      	ldr	r3, [sp, #12]
 800f9f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9fa:	b99b      	cbnz	r3, 800fa24 <_dtoa_r+0x904>
 800f9fc:	9b03      	ldr	r3, [sp, #12]
 800f9fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa02:	0d1b      	lsrs	r3, r3, #20
 800fa04:	051b      	lsls	r3, r3, #20
 800fa06:	b183      	cbz	r3, 800fa2a <_dtoa_r+0x90a>
 800fa08:	9b05      	ldr	r3, [sp, #20]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	9305      	str	r3, [sp, #20]
 800fa0e:	9b06      	ldr	r3, [sp, #24]
 800fa10:	3301      	adds	r3, #1
 800fa12:	9306      	str	r3, [sp, #24]
 800fa14:	f04f 0801 	mov.w	r8, #1
 800fa18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f47f af6f 	bne.w	800f8fe <_dtoa_r+0x7de>
 800fa20:	2001      	movs	r0, #1
 800fa22:	e774      	b.n	800f90e <_dtoa_r+0x7ee>
 800fa24:	f04f 0800 	mov.w	r8, #0
 800fa28:	e7f6      	b.n	800fa18 <_dtoa_r+0x8f8>
 800fa2a:	4698      	mov	r8, r3
 800fa2c:	e7f4      	b.n	800fa18 <_dtoa_r+0x8f8>
 800fa2e:	d082      	beq.n	800f936 <_dtoa_r+0x816>
 800fa30:	9a05      	ldr	r2, [sp, #20]
 800fa32:	331c      	adds	r3, #28
 800fa34:	441a      	add	r2, r3
 800fa36:	9205      	str	r2, [sp, #20]
 800fa38:	9a06      	ldr	r2, [sp, #24]
 800fa3a:	441a      	add	r2, r3
 800fa3c:	441d      	add	r5, r3
 800fa3e:	9206      	str	r2, [sp, #24]
 800fa40:	e779      	b.n	800f936 <_dtoa_r+0x816>
 800fa42:	4603      	mov	r3, r0
 800fa44:	e7f4      	b.n	800fa30 <_dtoa_r+0x910>
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	dc37      	bgt.n	800fabc <_dtoa_r+0x99c>
 800fa4c:	9b07      	ldr	r3, [sp, #28]
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	dd34      	ble.n	800fabc <_dtoa_r+0x99c>
 800fa52:	9b04      	ldr	r3, [sp, #16]
 800fa54:	9301      	str	r3, [sp, #4]
 800fa56:	9b01      	ldr	r3, [sp, #4]
 800fa58:	b963      	cbnz	r3, 800fa74 <_dtoa_r+0x954>
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	2205      	movs	r2, #5
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 fa06 	bl	800fe70 <__multadd>
 800fa64:	4601      	mov	r1, r0
 800fa66:	4606      	mov	r6, r0
 800fa68:	4650      	mov	r0, sl
 800fa6a:	f000 fc65 	bl	8010338 <__mcmp>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	f73f adbb 	bgt.w	800f5ea <_dtoa_r+0x4ca>
 800fa74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa76:	9d00      	ldr	r5, [sp, #0]
 800fa78:	ea6f 0b03 	mvn.w	fp, r3
 800fa7c:	f04f 0800 	mov.w	r8, #0
 800fa80:	4631      	mov	r1, r6
 800fa82:	4620      	mov	r0, r4
 800fa84:	f000 f9d2 	bl	800fe2c <_Bfree>
 800fa88:	2f00      	cmp	r7, #0
 800fa8a:	f43f aeab 	beq.w	800f7e4 <_dtoa_r+0x6c4>
 800fa8e:	f1b8 0f00 	cmp.w	r8, #0
 800fa92:	d005      	beq.n	800faa0 <_dtoa_r+0x980>
 800fa94:	45b8      	cmp	r8, r7
 800fa96:	d003      	beq.n	800faa0 <_dtoa_r+0x980>
 800fa98:	4641      	mov	r1, r8
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f000 f9c6 	bl	800fe2c <_Bfree>
 800faa0:	4639      	mov	r1, r7
 800faa2:	4620      	mov	r0, r4
 800faa4:	f000 f9c2 	bl	800fe2c <_Bfree>
 800faa8:	e69c      	b.n	800f7e4 <_dtoa_r+0x6c4>
 800faaa:	2600      	movs	r6, #0
 800faac:	4637      	mov	r7, r6
 800faae:	e7e1      	b.n	800fa74 <_dtoa_r+0x954>
 800fab0:	46bb      	mov	fp, r7
 800fab2:	4637      	mov	r7, r6
 800fab4:	e599      	b.n	800f5ea <_dtoa_r+0x4ca>
 800fab6:	bf00      	nop
 800fab8:	40240000 	.word	0x40240000
 800fabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f000 80c8 	beq.w	800fc54 <_dtoa_r+0xb34>
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	2d00      	cmp	r5, #0
 800faca:	dd05      	ble.n	800fad8 <_dtoa_r+0x9b8>
 800facc:	4639      	mov	r1, r7
 800face:	462a      	mov	r2, r5
 800fad0:	4620      	mov	r0, r4
 800fad2:	f000 fbc5 	bl	8010260 <__lshift>
 800fad6:	4607      	mov	r7, r0
 800fad8:	f1b8 0f00 	cmp.w	r8, #0
 800fadc:	d05b      	beq.n	800fb96 <_dtoa_r+0xa76>
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	4620      	mov	r0, r4
 800fae2:	f000 f963 	bl	800fdac <_Balloc>
 800fae6:	4605      	mov	r5, r0
 800fae8:	b928      	cbnz	r0, 800faf6 <_dtoa_r+0x9d6>
 800faea:	4b83      	ldr	r3, [pc, #524]	; (800fcf8 <_dtoa_r+0xbd8>)
 800faec:	4602      	mov	r2, r0
 800faee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800faf2:	f7ff bb2e 	b.w	800f152 <_dtoa_r+0x32>
 800faf6:	693a      	ldr	r2, [r7, #16]
 800faf8:	3202      	adds	r2, #2
 800fafa:	0092      	lsls	r2, r2, #2
 800fafc:	f107 010c 	add.w	r1, r7, #12
 800fb00:	300c      	adds	r0, #12
 800fb02:	f7ff fa71 	bl	800efe8 <memcpy>
 800fb06:	2201      	movs	r2, #1
 800fb08:	4629      	mov	r1, r5
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f000 fba8 	bl	8010260 <__lshift>
 800fb10:	9b00      	ldr	r3, [sp, #0]
 800fb12:	3301      	adds	r3, #1
 800fb14:	9304      	str	r3, [sp, #16]
 800fb16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	9308      	str	r3, [sp, #32]
 800fb1e:	9b02      	ldr	r3, [sp, #8]
 800fb20:	f003 0301 	and.w	r3, r3, #1
 800fb24:	46b8      	mov	r8, r7
 800fb26:	9306      	str	r3, [sp, #24]
 800fb28:	4607      	mov	r7, r0
 800fb2a:	9b04      	ldr	r3, [sp, #16]
 800fb2c:	4631      	mov	r1, r6
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	4650      	mov	r0, sl
 800fb32:	9301      	str	r3, [sp, #4]
 800fb34:	f7ff fa6c 	bl	800f010 <quorem>
 800fb38:	4641      	mov	r1, r8
 800fb3a:	9002      	str	r0, [sp, #8]
 800fb3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fb40:	4650      	mov	r0, sl
 800fb42:	f000 fbf9 	bl	8010338 <__mcmp>
 800fb46:	463a      	mov	r2, r7
 800fb48:	9005      	str	r0, [sp, #20]
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 fc0f 	bl	8010370 <__mdiff>
 800fb52:	68c2      	ldr	r2, [r0, #12]
 800fb54:	4605      	mov	r5, r0
 800fb56:	bb02      	cbnz	r2, 800fb9a <_dtoa_r+0xa7a>
 800fb58:	4601      	mov	r1, r0
 800fb5a:	4650      	mov	r0, sl
 800fb5c:	f000 fbec 	bl	8010338 <__mcmp>
 800fb60:	4602      	mov	r2, r0
 800fb62:	4629      	mov	r1, r5
 800fb64:	4620      	mov	r0, r4
 800fb66:	9209      	str	r2, [sp, #36]	; 0x24
 800fb68:	f000 f960 	bl	800fe2c <_Bfree>
 800fb6c:	9b07      	ldr	r3, [sp, #28]
 800fb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb70:	9d04      	ldr	r5, [sp, #16]
 800fb72:	ea43 0102 	orr.w	r1, r3, r2
 800fb76:	9b06      	ldr	r3, [sp, #24]
 800fb78:	4319      	orrs	r1, r3
 800fb7a:	d110      	bne.n	800fb9e <_dtoa_r+0xa7e>
 800fb7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb80:	d029      	beq.n	800fbd6 <_dtoa_r+0xab6>
 800fb82:	9b05      	ldr	r3, [sp, #20]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dd02      	ble.n	800fb8e <_dtoa_r+0xa6e>
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fb8e:	9b01      	ldr	r3, [sp, #4]
 800fb90:	f883 9000 	strb.w	r9, [r3]
 800fb94:	e774      	b.n	800fa80 <_dtoa_r+0x960>
 800fb96:	4638      	mov	r0, r7
 800fb98:	e7ba      	b.n	800fb10 <_dtoa_r+0x9f0>
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	e7e1      	b.n	800fb62 <_dtoa_r+0xa42>
 800fb9e:	9b05      	ldr	r3, [sp, #20]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	db04      	blt.n	800fbae <_dtoa_r+0xa8e>
 800fba4:	9907      	ldr	r1, [sp, #28]
 800fba6:	430b      	orrs	r3, r1
 800fba8:	9906      	ldr	r1, [sp, #24]
 800fbaa:	430b      	orrs	r3, r1
 800fbac:	d120      	bne.n	800fbf0 <_dtoa_r+0xad0>
 800fbae:	2a00      	cmp	r2, #0
 800fbb0:	dded      	ble.n	800fb8e <_dtoa_r+0xa6e>
 800fbb2:	4651      	mov	r1, sl
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f000 fb52 	bl	8010260 <__lshift>
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	4682      	mov	sl, r0
 800fbc0:	f000 fbba 	bl	8010338 <__mcmp>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	dc03      	bgt.n	800fbd0 <_dtoa_r+0xab0>
 800fbc8:	d1e1      	bne.n	800fb8e <_dtoa_r+0xa6e>
 800fbca:	f019 0f01 	tst.w	r9, #1
 800fbce:	d0de      	beq.n	800fb8e <_dtoa_r+0xa6e>
 800fbd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbd4:	d1d8      	bne.n	800fb88 <_dtoa_r+0xa68>
 800fbd6:	9a01      	ldr	r2, [sp, #4]
 800fbd8:	2339      	movs	r3, #57	; 0x39
 800fbda:	7013      	strb	r3, [r2, #0]
 800fbdc:	462b      	mov	r3, r5
 800fbde:	461d      	mov	r5, r3
 800fbe0:	3b01      	subs	r3, #1
 800fbe2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbe6:	2a39      	cmp	r2, #57	; 0x39
 800fbe8:	d06c      	beq.n	800fcc4 <_dtoa_r+0xba4>
 800fbea:	3201      	adds	r2, #1
 800fbec:	701a      	strb	r2, [r3, #0]
 800fbee:	e747      	b.n	800fa80 <_dtoa_r+0x960>
 800fbf0:	2a00      	cmp	r2, #0
 800fbf2:	dd07      	ble.n	800fc04 <_dtoa_r+0xae4>
 800fbf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbf8:	d0ed      	beq.n	800fbd6 <_dtoa_r+0xab6>
 800fbfa:	9a01      	ldr	r2, [sp, #4]
 800fbfc:	f109 0301 	add.w	r3, r9, #1
 800fc00:	7013      	strb	r3, [r2, #0]
 800fc02:	e73d      	b.n	800fa80 <_dtoa_r+0x960>
 800fc04:	9b04      	ldr	r3, [sp, #16]
 800fc06:	9a08      	ldr	r2, [sp, #32]
 800fc08:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d043      	beq.n	800fc98 <_dtoa_r+0xb78>
 800fc10:	4651      	mov	r1, sl
 800fc12:	2300      	movs	r3, #0
 800fc14:	220a      	movs	r2, #10
 800fc16:	4620      	mov	r0, r4
 800fc18:	f000 f92a 	bl	800fe70 <__multadd>
 800fc1c:	45b8      	cmp	r8, r7
 800fc1e:	4682      	mov	sl, r0
 800fc20:	f04f 0300 	mov.w	r3, #0
 800fc24:	f04f 020a 	mov.w	r2, #10
 800fc28:	4641      	mov	r1, r8
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	d107      	bne.n	800fc3e <_dtoa_r+0xb1e>
 800fc2e:	f000 f91f 	bl	800fe70 <__multadd>
 800fc32:	4680      	mov	r8, r0
 800fc34:	4607      	mov	r7, r0
 800fc36:	9b04      	ldr	r3, [sp, #16]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	9304      	str	r3, [sp, #16]
 800fc3c:	e775      	b.n	800fb2a <_dtoa_r+0xa0a>
 800fc3e:	f000 f917 	bl	800fe70 <__multadd>
 800fc42:	4639      	mov	r1, r7
 800fc44:	4680      	mov	r8, r0
 800fc46:	2300      	movs	r3, #0
 800fc48:	220a      	movs	r2, #10
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f000 f910 	bl	800fe70 <__multadd>
 800fc50:	4607      	mov	r7, r0
 800fc52:	e7f0      	b.n	800fc36 <_dtoa_r+0xb16>
 800fc54:	9b04      	ldr	r3, [sp, #16]
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	9d00      	ldr	r5, [sp, #0]
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	4650      	mov	r0, sl
 800fc5e:	f7ff f9d7 	bl	800f010 <quorem>
 800fc62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fc66:	9b00      	ldr	r3, [sp, #0]
 800fc68:	f805 9b01 	strb.w	r9, [r5], #1
 800fc6c:	1aea      	subs	r2, r5, r3
 800fc6e:	9b01      	ldr	r3, [sp, #4]
 800fc70:	4293      	cmp	r3, r2
 800fc72:	dd07      	ble.n	800fc84 <_dtoa_r+0xb64>
 800fc74:	4651      	mov	r1, sl
 800fc76:	2300      	movs	r3, #0
 800fc78:	220a      	movs	r2, #10
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f000 f8f8 	bl	800fe70 <__multadd>
 800fc80:	4682      	mov	sl, r0
 800fc82:	e7ea      	b.n	800fc5a <_dtoa_r+0xb3a>
 800fc84:	9b01      	ldr	r3, [sp, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	bfc8      	it	gt
 800fc8a:	461d      	movgt	r5, r3
 800fc8c:	9b00      	ldr	r3, [sp, #0]
 800fc8e:	bfd8      	it	le
 800fc90:	2501      	movle	r5, #1
 800fc92:	441d      	add	r5, r3
 800fc94:	f04f 0800 	mov.w	r8, #0
 800fc98:	4651      	mov	r1, sl
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 fadf 	bl	8010260 <__lshift>
 800fca2:	4631      	mov	r1, r6
 800fca4:	4682      	mov	sl, r0
 800fca6:	f000 fb47 	bl	8010338 <__mcmp>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	dc96      	bgt.n	800fbdc <_dtoa_r+0xabc>
 800fcae:	d102      	bne.n	800fcb6 <_dtoa_r+0xb96>
 800fcb0:	f019 0f01 	tst.w	r9, #1
 800fcb4:	d192      	bne.n	800fbdc <_dtoa_r+0xabc>
 800fcb6:	462b      	mov	r3, r5
 800fcb8:	461d      	mov	r5, r3
 800fcba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcbe:	2a30      	cmp	r2, #48	; 0x30
 800fcc0:	d0fa      	beq.n	800fcb8 <_dtoa_r+0xb98>
 800fcc2:	e6dd      	b.n	800fa80 <_dtoa_r+0x960>
 800fcc4:	9a00      	ldr	r2, [sp, #0]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d189      	bne.n	800fbde <_dtoa_r+0xabe>
 800fcca:	f10b 0b01 	add.w	fp, fp, #1
 800fcce:	2331      	movs	r3, #49	; 0x31
 800fcd0:	e796      	b.n	800fc00 <_dtoa_r+0xae0>
 800fcd2:	4b0a      	ldr	r3, [pc, #40]	; (800fcfc <_dtoa_r+0xbdc>)
 800fcd4:	f7ff ba99 	b.w	800f20a <_dtoa_r+0xea>
 800fcd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f47f aa6d 	bne.w	800f1ba <_dtoa_r+0x9a>
 800fce0:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <_dtoa_r+0xbe0>)
 800fce2:	f7ff ba92 	b.w	800f20a <_dtoa_r+0xea>
 800fce6:	9b01      	ldr	r3, [sp, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	dcb5      	bgt.n	800fc58 <_dtoa_r+0xb38>
 800fcec:	9b07      	ldr	r3, [sp, #28]
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	f73f aeb1 	bgt.w	800fa56 <_dtoa_r+0x936>
 800fcf4:	e7b0      	b.n	800fc58 <_dtoa_r+0xb38>
 800fcf6:	bf00      	nop
 800fcf8:	080140f3 	.word	0x080140f3
 800fcfc:	080143d8 	.word	0x080143d8
 800fd00:	08014077 	.word	0x08014077

0800fd04 <_free_r>:
 800fd04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd06:	2900      	cmp	r1, #0
 800fd08:	d044      	beq.n	800fd94 <_free_r+0x90>
 800fd0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd0e:	9001      	str	r0, [sp, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f1a1 0404 	sub.w	r4, r1, #4
 800fd16:	bfb8      	it	lt
 800fd18:	18e4      	addlt	r4, r4, r3
 800fd1a:	f7fe f8bd 	bl	800de98 <__malloc_lock>
 800fd1e:	4a1e      	ldr	r2, [pc, #120]	; (800fd98 <_free_r+0x94>)
 800fd20:	9801      	ldr	r0, [sp, #4]
 800fd22:	6813      	ldr	r3, [r2, #0]
 800fd24:	b933      	cbnz	r3, 800fd34 <_free_r+0x30>
 800fd26:	6063      	str	r3, [r4, #4]
 800fd28:	6014      	str	r4, [r2, #0]
 800fd2a:	b003      	add	sp, #12
 800fd2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd30:	f7fe b8b8 	b.w	800dea4 <__malloc_unlock>
 800fd34:	42a3      	cmp	r3, r4
 800fd36:	d908      	bls.n	800fd4a <_free_r+0x46>
 800fd38:	6825      	ldr	r5, [r4, #0]
 800fd3a:	1961      	adds	r1, r4, r5
 800fd3c:	428b      	cmp	r3, r1
 800fd3e:	bf01      	itttt	eq
 800fd40:	6819      	ldreq	r1, [r3, #0]
 800fd42:	685b      	ldreq	r3, [r3, #4]
 800fd44:	1949      	addeq	r1, r1, r5
 800fd46:	6021      	streq	r1, [r4, #0]
 800fd48:	e7ed      	b.n	800fd26 <_free_r+0x22>
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	b10b      	cbz	r3, 800fd54 <_free_r+0x50>
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	d9fa      	bls.n	800fd4a <_free_r+0x46>
 800fd54:	6811      	ldr	r1, [r2, #0]
 800fd56:	1855      	adds	r5, r2, r1
 800fd58:	42a5      	cmp	r5, r4
 800fd5a:	d10b      	bne.n	800fd74 <_free_r+0x70>
 800fd5c:	6824      	ldr	r4, [r4, #0]
 800fd5e:	4421      	add	r1, r4
 800fd60:	1854      	adds	r4, r2, r1
 800fd62:	42a3      	cmp	r3, r4
 800fd64:	6011      	str	r1, [r2, #0]
 800fd66:	d1e0      	bne.n	800fd2a <_free_r+0x26>
 800fd68:	681c      	ldr	r4, [r3, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	6053      	str	r3, [r2, #4]
 800fd6e:	440c      	add	r4, r1
 800fd70:	6014      	str	r4, [r2, #0]
 800fd72:	e7da      	b.n	800fd2a <_free_r+0x26>
 800fd74:	d902      	bls.n	800fd7c <_free_r+0x78>
 800fd76:	230c      	movs	r3, #12
 800fd78:	6003      	str	r3, [r0, #0]
 800fd7a:	e7d6      	b.n	800fd2a <_free_r+0x26>
 800fd7c:	6825      	ldr	r5, [r4, #0]
 800fd7e:	1961      	adds	r1, r4, r5
 800fd80:	428b      	cmp	r3, r1
 800fd82:	bf04      	itt	eq
 800fd84:	6819      	ldreq	r1, [r3, #0]
 800fd86:	685b      	ldreq	r3, [r3, #4]
 800fd88:	6063      	str	r3, [r4, #4]
 800fd8a:	bf04      	itt	eq
 800fd8c:	1949      	addeq	r1, r1, r5
 800fd8e:	6021      	streq	r1, [r4, #0]
 800fd90:	6054      	str	r4, [r2, #4]
 800fd92:	e7ca      	b.n	800fd2a <_free_r+0x26>
 800fd94:	b003      	add	sp, #12
 800fd96:	bd30      	pop	{r4, r5, pc}
 800fd98:	2000702c 	.word	0x2000702c

0800fd9c <malloc>:
 800fd9c:	4b02      	ldr	r3, [pc, #8]	; (800fda8 <malloc+0xc>)
 800fd9e:	4601      	mov	r1, r0
 800fda0:	6818      	ldr	r0, [r3, #0]
 800fda2:	f7fd bff9 	b.w	800dd98 <_malloc_r>
 800fda6:	bf00      	nop
 800fda8:	2000006c 	.word	0x2000006c

0800fdac <_Balloc>:
 800fdac:	b570      	push	{r4, r5, r6, lr}
 800fdae:	69c6      	ldr	r6, [r0, #28]
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	460d      	mov	r5, r1
 800fdb4:	b976      	cbnz	r6, 800fdd4 <_Balloc+0x28>
 800fdb6:	2010      	movs	r0, #16
 800fdb8:	f7ff fff0 	bl	800fd9c <malloc>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	61e0      	str	r0, [r4, #28]
 800fdc0:	b920      	cbnz	r0, 800fdcc <_Balloc+0x20>
 800fdc2:	4b18      	ldr	r3, [pc, #96]	; (800fe24 <_Balloc+0x78>)
 800fdc4:	4818      	ldr	r0, [pc, #96]	; (800fe28 <_Balloc+0x7c>)
 800fdc6:	216b      	movs	r1, #107	; 0x6b
 800fdc8:	f002 f902 	bl	8011fd0 <__assert_func>
 800fdcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd0:	6006      	str	r6, [r0, #0]
 800fdd2:	60c6      	str	r6, [r0, #12]
 800fdd4:	69e6      	ldr	r6, [r4, #28]
 800fdd6:	68f3      	ldr	r3, [r6, #12]
 800fdd8:	b183      	cbz	r3, 800fdfc <_Balloc+0x50>
 800fdda:	69e3      	ldr	r3, [r4, #28]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fde2:	b9b8      	cbnz	r0, 800fe14 <_Balloc+0x68>
 800fde4:	2101      	movs	r1, #1
 800fde6:	fa01 f605 	lsl.w	r6, r1, r5
 800fdea:	1d72      	adds	r2, r6, #5
 800fdec:	0092      	lsls	r2, r2, #2
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7fd ff9c 	bl	800dd2c <_calloc_r>
 800fdf4:	b160      	cbz	r0, 800fe10 <_Balloc+0x64>
 800fdf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fdfa:	e00e      	b.n	800fe1a <_Balloc+0x6e>
 800fdfc:	2221      	movs	r2, #33	; 0x21
 800fdfe:	2104      	movs	r1, #4
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7fd ff93 	bl	800dd2c <_calloc_r>
 800fe06:	69e3      	ldr	r3, [r4, #28]
 800fe08:	60f0      	str	r0, [r6, #12]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1e4      	bne.n	800fdda <_Balloc+0x2e>
 800fe10:	2000      	movs	r0, #0
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	6802      	ldr	r2, [r0, #0]
 800fe16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe20:	e7f7      	b.n	800fe12 <_Balloc+0x66>
 800fe22:	bf00      	nop
 800fe24:	08014084 	.word	0x08014084
 800fe28:	08014104 	.word	0x08014104

0800fe2c <_Bfree>:
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	69c6      	ldr	r6, [r0, #28]
 800fe30:	4605      	mov	r5, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	b976      	cbnz	r6, 800fe54 <_Bfree+0x28>
 800fe36:	2010      	movs	r0, #16
 800fe38:	f7ff ffb0 	bl	800fd9c <malloc>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	61e8      	str	r0, [r5, #28]
 800fe40:	b920      	cbnz	r0, 800fe4c <_Bfree+0x20>
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <_Bfree+0x3c>)
 800fe44:	4809      	ldr	r0, [pc, #36]	; (800fe6c <_Bfree+0x40>)
 800fe46:	218f      	movs	r1, #143	; 0x8f
 800fe48:	f002 f8c2 	bl	8011fd0 <__assert_func>
 800fe4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe50:	6006      	str	r6, [r0, #0]
 800fe52:	60c6      	str	r6, [r0, #12]
 800fe54:	b13c      	cbz	r4, 800fe66 <_Bfree+0x3a>
 800fe56:	69eb      	ldr	r3, [r5, #28]
 800fe58:	6862      	ldr	r2, [r4, #4]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe60:	6021      	str	r1, [r4, #0]
 800fe62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe66:	bd70      	pop	{r4, r5, r6, pc}
 800fe68:	08014084 	.word	0x08014084
 800fe6c:	08014104 	.word	0x08014104

0800fe70 <__multadd>:
 800fe70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe74:	690d      	ldr	r5, [r1, #16]
 800fe76:	4607      	mov	r7, r0
 800fe78:	460c      	mov	r4, r1
 800fe7a:	461e      	mov	r6, r3
 800fe7c:	f101 0c14 	add.w	ip, r1, #20
 800fe80:	2000      	movs	r0, #0
 800fe82:	f8dc 3000 	ldr.w	r3, [ip]
 800fe86:	b299      	uxth	r1, r3
 800fe88:	fb02 6101 	mla	r1, r2, r1, r6
 800fe8c:	0c1e      	lsrs	r6, r3, #16
 800fe8e:	0c0b      	lsrs	r3, r1, #16
 800fe90:	fb02 3306 	mla	r3, r2, r6, r3
 800fe94:	b289      	uxth	r1, r1
 800fe96:	3001      	adds	r0, #1
 800fe98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe9c:	4285      	cmp	r5, r0
 800fe9e:	f84c 1b04 	str.w	r1, [ip], #4
 800fea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fea6:	dcec      	bgt.n	800fe82 <__multadd+0x12>
 800fea8:	b30e      	cbz	r6, 800feee <__multadd+0x7e>
 800feaa:	68a3      	ldr	r3, [r4, #8]
 800feac:	42ab      	cmp	r3, r5
 800feae:	dc19      	bgt.n	800fee4 <__multadd+0x74>
 800feb0:	6861      	ldr	r1, [r4, #4]
 800feb2:	4638      	mov	r0, r7
 800feb4:	3101      	adds	r1, #1
 800feb6:	f7ff ff79 	bl	800fdac <_Balloc>
 800feba:	4680      	mov	r8, r0
 800febc:	b928      	cbnz	r0, 800feca <__multadd+0x5a>
 800febe:	4602      	mov	r2, r0
 800fec0:	4b0c      	ldr	r3, [pc, #48]	; (800fef4 <__multadd+0x84>)
 800fec2:	480d      	ldr	r0, [pc, #52]	; (800fef8 <__multadd+0x88>)
 800fec4:	21ba      	movs	r1, #186	; 0xba
 800fec6:	f002 f883 	bl	8011fd0 <__assert_func>
 800feca:	6922      	ldr	r2, [r4, #16]
 800fecc:	3202      	adds	r2, #2
 800fece:	f104 010c 	add.w	r1, r4, #12
 800fed2:	0092      	lsls	r2, r2, #2
 800fed4:	300c      	adds	r0, #12
 800fed6:	f7ff f887 	bl	800efe8 <memcpy>
 800feda:	4621      	mov	r1, r4
 800fedc:	4638      	mov	r0, r7
 800fede:	f7ff ffa5 	bl	800fe2c <_Bfree>
 800fee2:	4644      	mov	r4, r8
 800fee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fee8:	3501      	adds	r5, #1
 800feea:	615e      	str	r6, [r3, #20]
 800feec:	6125      	str	r5, [r4, #16]
 800feee:	4620      	mov	r0, r4
 800fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef4:	080140f3 	.word	0x080140f3
 800fef8:	08014104 	.word	0x08014104

0800fefc <__s2b>:
 800fefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff00:	460c      	mov	r4, r1
 800ff02:	4615      	mov	r5, r2
 800ff04:	461f      	mov	r7, r3
 800ff06:	2209      	movs	r2, #9
 800ff08:	3308      	adds	r3, #8
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff10:	2100      	movs	r1, #0
 800ff12:	2201      	movs	r2, #1
 800ff14:	429a      	cmp	r2, r3
 800ff16:	db09      	blt.n	800ff2c <__s2b+0x30>
 800ff18:	4630      	mov	r0, r6
 800ff1a:	f7ff ff47 	bl	800fdac <_Balloc>
 800ff1e:	b940      	cbnz	r0, 800ff32 <__s2b+0x36>
 800ff20:	4602      	mov	r2, r0
 800ff22:	4b19      	ldr	r3, [pc, #100]	; (800ff88 <__s2b+0x8c>)
 800ff24:	4819      	ldr	r0, [pc, #100]	; (800ff8c <__s2b+0x90>)
 800ff26:	21d3      	movs	r1, #211	; 0xd3
 800ff28:	f002 f852 	bl	8011fd0 <__assert_func>
 800ff2c:	0052      	lsls	r2, r2, #1
 800ff2e:	3101      	adds	r1, #1
 800ff30:	e7f0      	b.n	800ff14 <__s2b+0x18>
 800ff32:	9b08      	ldr	r3, [sp, #32]
 800ff34:	6143      	str	r3, [r0, #20]
 800ff36:	2d09      	cmp	r5, #9
 800ff38:	f04f 0301 	mov.w	r3, #1
 800ff3c:	6103      	str	r3, [r0, #16]
 800ff3e:	dd16      	ble.n	800ff6e <__s2b+0x72>
 800ff40:	f104 0909 	add.w	r9, r4, #9
 800ff44:	46c8      	mov	r8, r9
 800ff46:	442c      	add	r4, r5
 800ff48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff4c:	4601      	mov	r1, r0
 800ff4e:	3b30      	subs	r3, #48	; 0x30
 800ff50:	220a      	movs	r2, #10
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7ff ff8c 	bl	800fe70 <__multadd>
 800ff58:	45a0      	cmp	r8, r4
 800ff5a:	d1f5      	bne.n	800ff48 <__s2b+0x4c>
 800ff5c:	f1a5 0408 	sub.w	r4, r5, #8
 800ff60:	444c      	add	r4, r9
 800ff62:	1b2d      	subs	r5, r5, r4
 800ff64:	1963      	adds	r3, r4, r5
 800ff66:	42bb      	cmp	r3, r7
 800ff68:	db04      	blt.n	800ff74 <__s2b+0x78>
 800ff6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff6e:	340a      	adds	r4, #10
 800ff70:	2509      	movs	r5, #9
 800ff72:	e7f6      	b.n	800ff62 <__s2b+0x66>
 800ff74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff78:	4601      	mov	r1, r0
 800ff7a:	3b30      	subs	r3, #48	; 0x30
 800ff7c:	220a      	movs	r2, #10
 800ff7e:	4630      	mov	r0, r6
 800ff80:	f7ff ff76 	bl	800fe70 <__multadd>
 800ff84:	e7ee      	b.n	800ff64 <__s2b+0x68>
 800ff86:	bf00      	nop
 800ff88:	080140f3 	.word	0x080140f3
 800ff8c:	08014104 	.word	0x08014104

0800ff90 <__hi0bits>:
 800ff90:	0c03      	lsrs	r3, r0, #16
 800ff92:	041b      	lsls	r3, r3, #16
 800ff94:	b9d3      	cbnz	r3, 800ffcc <__hi0bits+0x3c>
 800ff96:	0400      	lsls	r0, r0, #16
 800ff98:	2310      	movs	r3, #16
 800ff9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff9e:	bf04      	itt	eq
 800ffa0:	0200      	lsleq	r0, r0, #8
 800ffa2:	3308      	addeq	r3, #8
 800ffa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ffa8:	bf04      	itt	eq
 800ffaa:	0100      	lsleq	r0, r0, #4
 800ffac:	3304      	addeq	r3, #4
 800ffae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ffb2:	bf04      	itt	eq
 800ffb4:	0080      	lsleq	r0, r0, #2
 800ffb6:	3302      	addeq	r3, #2
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	db05      	blt.n	800ffc8 <__hi0bits+0x38>
 800ffbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ffc0:	f103 0301 	add.w	r3, r3, #1
 800ffc4:	bf08      	it	eq
 800ffc6:	2320      	moveq	r3, #32
 800ffc8:	4618      	mov	r0, r3
 800ffca:	4770      	bx	lr
 800ffcc:	2300      	movs	r3, #0
 800ffce:	e7e4      	b.n	800ff9a <__hi0bits+0xa>

0800ffd0 <__lo0bits>:
 800ffd0:	6803      	ldr	r3, [r0, #0]
 800ffd2:	f013 0207 	ands.w	r2, r3, #7
 800ffd6:	d00c      	beq.n	800fff2 <__lo0bits+0x22>
 800ffd8:	07d9      	lsls	r1, r3, #31
 800ffda:	d422      	bmi.n	8010022 <__lo0bits+0x52>
 800ffdc:	079a      	lsls	r2, r3, #30
 800ffde:	bf49      	itett	mi
 800ffe0:	085b      	lsrmi	r3, r3, #1
 800ffe2:	089b      	lsrpl	r3, r3, #2
 800ffe4:	6003      	strmi	r3, [r0, #0]
 800ffe6:	2201      	movmi	r2, #1
 800ffe8:	bf5c      	itt	pl
 800ffea:	6003      	strpl	r3, [r0, #0]
 800ffec:	2202      	movpl	r2, #2
 800ffee:	4610      	mov	r0, r2
 800fff0:	4770      	bx	lr
 800fff2:	b299      	uxth	r1, r3
 800fff4:	b909      	cbnz	r1, 800fffa <__lo0bits+0x2a>
 800fff6:	0c1b      	lsrs	r3, r3, #16
 800fff8:	2210      	movs	r2, #16
 800fffa:	b2d9      	uxtb	r1, r3
 800fffc:	b909      	cbnz	r1, 8010002 <__lo0bits+0x32>
 800fffe:	3208      	adds	r2, #8
 8010000:	0a1b      	lsrs	r3, r3, #8
 8010002:	0719      	lsls	r1, r3, #28
 8010004:	bf04      	itt	eq
 8010006:	091b      	lsreq	r3, r3, #4
 8010008:	3204      	addeq	r2, #4
 801000a:	0799      	lsls	r1, r3, #30
 801000c:	bf04      	itt	eq
 801000e:	089b      	lsreq	r3, r3, #2
 8010010:	3202      	addeq	r2, #2
 8010012:	07d9      	lsls	r1, r3, #31
 8010014:	d403      	bmi.n	801001e <__lo0bits+0x4e>
 8010016:	085b      	lsrs	r3, r3, #1
 8010018:	f102 0201 	add.w	r2, r2, #1
 801001c:	d003      	beq.n	8010026 <__lo0bits+0x56>
 801001e:	6003      	str	r3, [r0, #0]
 8010020:	e7e5      	b.n	800ffee <__lo0bits+0x1e>
 8010022:	2200      	movs	r2, #0
 8010024:	e7e3      	b.n	800ffee <__lo0bits+0x1e>
 8010026:	2220      	movs	r2, #32
 8010028:	e7e1      	b.n	800ffee <__lo0bits+0x1e>
	...

0801002c <__i2b>:
 801002c:	b510      	push	{r4, lr}
 801002e:	460c      	mov	r4, r1
 8010030:	2101      	movs	r1, #1
 8010032:	f7ff febb 	bl	800fdac <_Balloc>
 8010036:	4602      	mov	r2, r0
 8010038:	b928      	cbnz	r0, 8010046 <__i2b+0x1a>
 801003a:	4b05      	ldr	r3, [pc, #20]	; (8010050 <__i2b+0x24>)
 801003c:	4805      	ldr	r0, [pc, #20]	; (8010054 <__i2b+0x28>)
 801003e:	f240 1145 	movw	r1, #325	; 0x145
 8010042:	f001 ffc5 	bl	8011fd0 <__assert_func>
 8010046:	2301      	movs	r3, #1
 8010048:	6144      	str	r4, [r0, #20]
 801004a:	6103      	str	r3, [r0, #16]
 801004c:	bd10      	pop	{r4, pc}
 801004e:	bf00      	nop
 8010050:	080140f3 	.word	0x080140f3
 8010054:	08014104 	.word	0x08014104

08010058 <__multiply>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	4691      	mov	r9, r2
 801005e:	690a      	ldr	r2, [r1, #16]
 8010060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010064:	429a      	cmp	r2, r3
 8010066:	bfb8      	it	lt
 8010068:	460b      	movlt	r3, r1
 801006a:	460c      	mov	r4, r1
 801006c:	bfbc      	itt	lt
 801006e:	464c      	movlt	r4, r9
 8010070:	4699      	movlt	r9, r3
 8010072:	6927      	ldr	r7, [r4, #16]
 8010074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010078:	68a3      	ldr	r3, [r4, #8]
 801007a:	6861      	ldr	r1, [r4, #4]
 801007c:	eb07 060a 	add.w	r6, r7, sl
 8010080:	42b3      	cmp	r3, r6
 8010082:	b085      	sub	sp, #20
 8010084:	bfb8      	it	lt
 8010086:	3101      	addlt	r1, #1
 8010088:	f7ff fe90 	bl	800fdac <_Balloc>
 801008c:	b930      	cbnz	r0, 801009c <__multiply+0x44>
 801008e:	4602      	mov	r2, r0
 8010090:	4b44      	ldr	r3, [pc, #272]	; (80101a4 <__multiply+0x14c>)
 8010092:	4845      	ldr	r0, [pc, #276]	; (80101a8 <__multiply+0x150>)
 8010094:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010098:	f001 ff9a 	bl	8011fd0 <__assert_func>
 801009c:	f100 0514 	add.w	r5, r0, #20
 80100a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100a4:	462b      	mov	r3, r5
 80100a6:	2200      	movs	r2, #0
 80100a8:	4543      	cmp	r3, r8
 80100aa:	d321      	bcc.n	80100f0 <__multiply+0x98>
 80100ac:	f104 0314 	add.w	r3, r4, #20
 80100b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80100b4:	f109 0314 	add.w	r3, r9, #20
 80100b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80100bc:	9202      	str	r2, [sp, #8]
 80100be:	1b3a      	subs	r2, r7, r4
 80100c0:	3a15      	subs	r2, #21
 80100c2:	f022 0203 	bic.w	r2, r2, #3
 80100c6:	3204      	adds	r2, #4
 80100c8:	f104 0115 	add.w	r1, r4, #21
 80100cc:	428f      	cmp	r7, r1
 80100ce:	bf38      	it	cc
 80100d0:	2204      	movcc	r2, #4
 80100d2:	9201      	str	r2, [sp, #4]
 80100d4:	9a02      	ldr	r2, [sp, #8]
 80100d6:	9303      	str	r3, [sp, #12]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d80c      	bhi.n	80100f6 <__multiply+0x9e>
 80100dc:	2e00      	cmp	r6, #0
 80100de:	dd03      	ble.n	80100e8 <__multiply+0x90>
 80100e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d05b      	beq.n	80101a0 <__multiply+0x148>
 80100e8:	6106      	str	r6, [r0, #16]
 80100ea:	b005      	add	sp, #20
 80100ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f0:	f843 2b04 	str.w	r2, [r3], #4
 80100f4:	e7d8      	b.n	80100a8 <__multiply+0x50>
 80100f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80100fa:	f1ba 0f00 	cmp.w	sl, #0
 80100fe:	d024      	beq.n	801014a <__multiply+0xf2>
 8010100:	f104 0e14 	add.w	lr, r4, #20
 8010104:	46a9      	mov	r9, r5
 8010106:	f04f 0c00 	mov.w	ip, #0
 801010a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801010e:	f8d9 1000 	ldr.w	r1, [r9]
 8010112:	fa1f fb82 	uxth.w	fp, r2
 8010116:	b289      	uxth	r1, r1
 8010118:	fb0a 110b 	mla	r1, sl, fp, r1
 801011c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010120:	f8d9 2000 	ldr.w	r2, [r9]
 8010124:	4461      	add	r1, ip
 8010126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801012a:	fb0a c20b 	mla	r2, sl, fp, ip
 801012e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010132:	b289      	uxth	r1, r1
 8010134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010138:	4577      	cmp	r7, lr
 801013a:	f849 1b04 	str.w	r1, [r9], #4
 801013e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010142:	d8e2      	bhi.n	801010a <__multiply+0xb2>
 8010144:	9a01      	ldr	r2, [sp, #4]
 8010146:	f845 c002 	str.w	ip, [r5, r2]
 801014a:	9a03      	ldr	r2, [sp, #12]
 801014c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010150:	3304      	adds	r3, #4
 8010152:	f1b9 0f00 	cmp.w	r9, #0
 8010156:	d021      	beq.n	801019c <__multiply+0x144>
 8010158:	6829      	ldr	r1, [r5, #0]
 801015a:	f104 0c14 	add.w	ip, r4, #20
 801015e:	46ae      	mov	lr, r5
 8010160:	f04f 0a00 	mov.w	sl, #0
 8010164:	f8bc b000 	ldrh.w	fp, [ip]
 8010168:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801016c:	fb09 220b 	mla	r2, r9, fp, r2
 8010170:	4452      	add	r2, sl
 8010172:	b289      	uxth	r1, r1
 8010174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010178:	f84e 1b04 	str.w	r1, [lr], #4
 801017c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010180:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010184:	f8be 1000 	ldrh.w	r1, [lr]
 8010188:	fb09 110a 	mla	r1, r9, sl, r1
 801018c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010190:	4567      	cmp	r7, ip
 8010192:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010196:	d8e5      	bhi.n	8010164 <__multiply+0x10c>
 8010198:	9a01      	ldr	r2, [sp, #4]
 801019a:	50a9      	str	r1, [r5, r2]
 801019c:	3504      	adds	r5, #4
 801019e:	e799      	b.n	80100d4 <__multiply+0x7c>
 80101a0:	3e01      	subs	r6, #1
 80101a2:	e79b      	b.n	80100dc <__multiply+0x84>
 80101a4:	080140f3 	.word	0x080140f3
 80101a8:	08014104 	.word	0x08014104

080101ac <__pow5mult>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	4615      	mov	r5, r2
 80101b2:	f012 0203 	ands.w	r2, r2, #3
 80101b6:	4606      	mov	r6, r0
 80101b8:	460f      	mov	r7, r1
 80101ba:	d007      	beq.n	80101cc <__pow5mult+0x20>
 80101bc:	4c25      	ldr	r4, [pc, #148]	; (8010254 <__pow5mult+0xa8>)
 80101be:	3a01      	subs	r2, #1
 80101c0:	2300      	movs	r3, #0
 80101c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101c6:	f7ff fe53 	bl	800fe70 <__multadd>
 80101ca:	4607      	mov	r7, r0
 80101cc:	10ad      	asrs	r5, r5, #2
 80101ce:	d03d      	beq.n	801024c <__pow5mult+0xa0>
 80101d0:	69f4      	ldr	r4, [r6, #28]
 80101d2:	b97c      	cbnz	r4, 80101f4 <__pow5mult+0x48>
 80101d4:	2010      	movs	r0, #16
 80101d6:	f7ff fde1 	bl	800fd9c <malloc>
 80101da:	4602      	mov	r2, r0
 80101dc:	61f0      	str	r0, [r6, #28]
 80101de:	b928      	cbnz	r0, 80101ec <__pow5mult+0x40>
 80101e0:	4b1d      	ldr	r3, [pc, #116]	; (8010258 <__pow5mult+0xac>)
 80101e2:	481e      	ldr	r0, [pc, #120]	; (801025c <__pow5mult+0xb0>)
 80101e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80101e8:	f001 fef2 	bl	8011fd0 <__assert_func>
 80101ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101f0:	6004      	str	r4, [r0, #0]
 80101f2:	60c4      	str	r4, [r0, #12]
 80101f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80101f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101fc:	b94c      	cbnz	r4, 8010212 <__pow5mult+0x66>
 80101fe:	f240 2171 	movw	r1, #625	; 0x271
 8010202:	4630      	mov	r0, r6
 8010204:	f7ff ff12 	bl	801002c <__i2b>
 8010208:	2300      	movs	r3, #0
 801020a:	f8c8 0008 	str.w	r0, [r8, #8]
 801020e:	4604      	mov	r4, r0
 8010210:	6003      	str	r3, [r0, #0]
 8010212:	f04f 0900 	mov.w	r9, #0
 8010216:	07eb      	lsls	r3, r5, #31
 8010218:	d50a      	bpl.n	8010230 <__pow5mult+0x84>
 801021a:	4639      	mov	r1, r7
 801021c:	4622      	mov	r2, r4
 801021e:	4630      	mov	r0, r6
 8010220:	f7ff ff1a 	bl	8010058 <__multiply>
 8010224:	4639      	mov	r1, r7
 8010226:	4680      	mov	r8, r0
 8010228:	4630      	mov	r0, r6
 801022a:	f7ff fdff 	bl	800fe2c <_Bfree>
 801022e:	4647      	mov	r7, r8
 8010230:	106d      	asrs	r5, r5, #1
 8010232:	d00b      	beq.n	801024c <__pow5mult+0xa0>
 8010234:	6820      	ldr	r0, [r4, #0]
 8010236:	b938      	cbnz	r0, 8010248 <__pow5mult+0x9c>
 8010238:	4622      	mov	r2, r4
 801023a:	4621      	mov	r1, r4
 801023c:	4630      	mov	r0, r6
 801023e:	f7ff ff0b 	bl	8010058 <__multiply>
 8010242:	6020      	str	r0, [r4, #0]
 8010244:	f8c0 9000 	str.w	r9, [r0]
 8010248:	4604      	mov	r4, r0
 801024a:	e7e4      	b.n	8010216 <__pow5mult+0x6a>
 801024c:	4638      	mov	r0, r7
 801024e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010252:	bf00      	nop
 8010254:	08014250 	.word	0x08014250
 8010258:	08014084 	.word	0x08014084
 801025c:	08014104 	.word	0x08014104

08010260 <__lshift>:
 8010260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010264:	460c      	mov	r4, r1
 8010266:	6849      	ldr	r1, [r1, #4]
 8010268:	6923      	ldr	r3, [r4, #16]
 801026a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801026e:	68a3      	ldr	r3, [r4, #8]
 8010270:	4607      	mov	r7, r0
 8010272:	4691      	mov	r9, r2
 8010274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010278:	f108 0601 	add.w	r6, r8, #1
 801027c:	42b3      	cmp	r3, r6
 801027e:	db0b      	blt.n	8010298 <__lshift+0x38>
 8010280:	4638      	mov	r0, r7
 8010282:	f7ff fd93 	bl	800fdac <_Balloc>
 8010286:	4605      	mov	r5, r0
 8010288:	b948      	cbnz	r0, 801029e <__lshift+0x3e>
 801028a:	4602      	mov	r2, r0
 801028c:	4b28      	ldr	r3, [pc, #160]	; (8010330 <__lshift+0xd0>)
 801028e:	4829      	ldr	r0, [pc, #164]	; (8010334 <__lshift+0xd4>)
 8010290:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010294:	f001 fe9c 	bl	8011fd0 <__assert_func>
 8010298:	3101      	adds	r1, #1
 801029a:	005b      	lsls	r3, r3, #1
 801029c:	e7ee      	b.n	801027c <__lshift+0x1c>
 801029e:	2300      	movs	r3, #0
 80102a0:	f100 0114 	add.w	r1, r0, #20
 80102a4:	f100 0210 	add.w	r2, r0, #16
 80102a8:	4618      	mov	r0, r3
 80102aa:	4553      	cmp	r3, sl
 80102ac:	db33      	blt.n	8010316 <__lshift+0xb6>
 80102ae:	6920      	ldr	r0, [r4, #16]
 80102b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102b4:	f104 0314 	add.w	r3, r4, #20
 80102b8:	f019 091f 	ands.w	r9, r9, #31
 80102bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102c4:	d02b      	beq.n	801031e <__lshift+0xbe>
 80102c6:	f1c9 0e20 	rsb	lr, r9, #32
 80102ca:	468a      	mov	sl, r1
 80102cc:	2200      	movs	r2, #0
 80102ce:	6818      	ldr	r0, [r3, #0]
 80102d0:	fa00 f009 	lsl.w	r0, r0, r9
 80102d4:	4310      	orrs	r0, r2
 80102d6:	f84a 0b04 	str.w	r0, [sl], #4
 80102da:	f853 2b04 	ldr.w	r2, [r3], #4
 80102de:	459c      	cmp	ip, r3
 80102e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80102e4:	d8f3      	bhi.n	80102ce <__lshift+0x6e>
 80102e6:	ebac 0304 	sub.w	r3, ip, r4
 80102ea:	3b15      	subs	r3, #21
 80102ec:	f023 0303 	bic.w	r3, r3, #3
 80102f0:	3304      	adds	r3, #4
 80102f2:	f104 0015 	add.w	r0, r4, #21
 80102f6:	4584      	cmp	ip, r0
 80102f8:	bf38      	it	cc
 80102fa:	2304      	movcc	r3, #4
 80102fc:	50ca      	str	r2, [r1, r3]
 80102fe:	b10a      	cbz	r2, 8010304 <__lshift+0xa4>
 8010300:	f108 0602 	add.w	r6, r8, #2
 8010304:	3e01      	subs	r6, #1
 8010306:	4638      	mov	r0, r7
 8010308:	612e      	str	r6, [r5, #16]
 801030a:	4621      	mov	r1, r4
 801030c:	f7ff fd8e 	bl	800fe2c <_Bfree>
 8010310:	4628      	mov	r0, r5
 8010312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010316:	f842 0f04 	str.w	r0, [r2, #4]!
 801031a:	3301      	adds	r3, #1
 801031c:	e7c5      	b.n	80102aa <__lshift+0x4a>
 801031e:	3904      	subs	r1, #4
 8010320:	f853 2b04 	ldr.w	r2, [r3], #4
 8010324:	f841 2f04 	str.w	r2, [r1, #4]!
 8010328:	459c      	cmp	ip, r3
 801032a:	d8f9      	bhi.n	8010320 <__lshift+0xc0>
 801032c:	e7ea      	b.n	8010304 <__lshift+0xa4>
 801032e:	bf00      	nop
 8010330:	080140f3 	.word	0x080140f3
 8010334:	08014104 	.word	0x08014104

08010338 <__mcmp>:
 8010338:	b530      	push	{r4, r5, lr}
 801033a:	6902      	ldr	r2, [r0, #16]
 801033c:	690c      	ldr	r4, [r1, #16]
 801033e:	1b12      	subs	r2, r2, r4
 8010340:	d10e      	bne.n	8010360 <__mcmp+0x28>
 8010342:	f100 0314 	add.w	r3, r0, #20
 8010346:	3114      	adds	r1, #20
 8010348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801034c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010358:	42a5      	cmp	r5, r4
 801035a:	d003      	beq.n	8010364 <__mcmp+0x2c>
 801035c:	d305      	bcc.n	801036a <__mcmp+0x32>
 801035e:	2201      	movs	r2, #1
 8010360:	4610      	mov	r0, r2
 8010362:	bd30      	pop	{r4, r5, pc}
 8010364:	4283      	cmp	r3, r0
 8010366:	d3f3      	bcc.n	8010350 <__mcmp+0x18>
 8010368:	e7fa      	b.n	8010360 <__mcmp+0x28>
 801036a:	f04f 32ff 	mov.w	r2, #4294967295
 801036e:	e7f7      	b.n	8010360 <__mcmp+0x28>

08010370 <__mdiff>:
 8010370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	460c      	mov	r4, r1
 8010376:	4606      	mov	r6, r0
 8010378:	4611      	mov	r1, r2
 801037a:	4620      	mov	r0, r4
 801037c:	4690      	mov	r8, r2
 801037e:	f7ff ffdb 	bl	8010338 <__mcmp>
 8010382:	1e05      	subs	r5, r0, #0
 8010384:	d110      	bne.n	80103a8 <__mdiff+0x38>
 8010386:	4629      	mov	r1, r5
 8010388:	4630      	mov	r0, r6
 801038a:	f7ff fd0f 	bl	800fdac <_Balloc>
 801038e:	b930      	cbnz	r0, 801039e <__mdiff+0x2e>
 8010390:	4b3a      	ldr	r3, [pc, #232]	; (801047c <__mdiff+0x10c>)
 8010392:	4602      	mov	r2, r0
 8010394:	f240 2137 	movw	r1, #567	; 0x237
 8010398:	4839      	ldr	r0, [pc, #228]	; (8010480 <__mdiff+0x110>)
 801039a:	f001 fe19 	bl	8011fd0 <__assert_func>
 801039e:	2301      	movs	r3, #1
 80103a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a8:	bfa4      	itt	ge
 80103aa:	4643      	movge	r3, r8
 80103ac:	46a0      	movge	r8, r4
 80103ae:	4630      	mov	r0, r6
 80103b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80103b4:	bfa6      	itte	ge
 80103b6:	461c      	movge	r4, r3
 80103b8:	2500      	movge	r5, #0
 80103ba:	2501      	movlt	r5, #1
 80103bc:	f7ff fcf6 	bl	800fdac <_Balloc>
 80103c0:	b920      	cbnz	r0, 80103cc <__mdiff+0x5c>
 80103c2:	4b2e      	ldr	r3, [pc, #184]	; (801047c <__mdiff+0x10c>)
 80103c4:	4602      	mov	r2, r0
 80103c6:	f240 2145 	movw	r1, #581	; 0x245
 80103ca:	e7e5      	b.n	8010398 <__mdiff+0x28>
 80103cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80103d0:	6926      	ldr	r6, [r4, #16]
 80103d2:	60c5      	str	r5, [r0, #12]
 80103d4:	f104 0914 	add.w	r9, r4, #20
 80103d8:	f108 0514 	add.w	r5, r8, #20
 80103dc:	f100 0e14 	add.w	lr, r0, #20
 80103e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80103e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80103e8:	f108 0210 	add.w	r2, r8, #16
 80103ec:	46f2      	mov	sl, lr
 80103ee:	2100      	movs	r1, #0
 80103f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80103f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80103f8:	fa11 f88b 	uxtah	r8, r1, fp
 80103fc:	b299      	uxth	r1, r3
 80103fe:	0c1b      	lsrs	r3, r3, #16
 8010400:	eba8 0801 	sub.w	r8, r8, r1
 8010404:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010408:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801040c:	fa1f f888 	uxth.w	r8, r8
 8010410:	1419      	asrs	r1, r3, #16
 8010412:	454e      	cmp	r6, r9
 8010414:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010418:	f84a 3b04 	str.w	r3, [sl], #4
 801041c:	d8e8      	bhi.n	80103f0 <__mdiff+0x80>
 801041e:	1b33      	subs	r3, r6, r4
 8010420:	3b15      	subs	r3, #21
 8010422:	f023 0303 	bic.w	r3, r3, #3
 8010426:	3304      	adds	r3, #4
 8010428:	3415      	adds	r4, #21
 801042a:	42a6      	cmp	r6, r4
 801042c:	bf38      	it	cc
 801042e:	2304      	movcc	r3, #4
 8010430:	441d      	add	r5, r3
 8010432:	4473      	add	r3, lr
 8010434:	469e      	mov	lr, r3
 8010436:	462e      	mov	r6, r5
 8010438:	4566      	cmp	r6, ip
 801043a:	d30e      	bcc.n	801045a <__mdiff+0xea>
 801043c:	f10c 0203 	add.w	r2, ip, #3
 8010440:	1b52      	subs	r2, r2, r5
 8010442:	f022 0203 	bic.w	r2, r2, #3
 8010446:	3d03      	subs	r5, #3
 8010448:	45ac      	cmp	ip, r5
 801044a:	bf38      	it	cc
 801044c:	2200      	movcc	r2, #0
 801044e:	4413      	add	r3, r2
 8010450:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010454:	b17a      	cbz	r2, 8010476 <__mdiff+0x106>
 8010456:	6107      	str	r7, [r0, #16]
 8010458:	e7a4      	b.n	80103a4 <__mdiff+0x34>
 801045a:	f856 8b04 	ldr.w	r8, [r6], #4
 801045e:	fa11 f288 	uxtah	r2, r1, r8
 8010462:	1414      	asrs	r4, r2, #16
 8010464:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010468:	b292      	uxth	r2, r2
 801046a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801046e:	f84e 2b04 	str.w	r2, [lr], #4
 8010472:	1421      	asrs	r1, r4, #16
 8010474:	e7e0      	b.n	8010438 <__mdiff+0xc8>
 8010476:	3f01      	subs	r7, #1
 8010478:	e7ea      	b.n	8010450 <__mdiff+0xe0>
 801047a:	bf00      	nop
 801047c:	080140f3 	.word	0x080140f3
 8010480:	08014104 	.word	0x08014104

08010484 <__ulp>:
 8010484:	b082      	sub	sp, #8
 8010486:	ed8d 0b00 	vstr	d0, [sp]
 801048a:	9a01      	ldr	r2, [sp, #4]
 801048c:	4b0f      	ldr	r3, [pc, #60]	; (80104cc <__ulp+0x48>)
 801048e:	4013      	ands	r3, r2
 8010490:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010494:	2b00      	cmp	r3, #0
 8010496:	dc08      	bgt.n	80104aa <__ulp+0x26>
 8010498:	425b      	negs	r3, r3
 801049a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801049e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104a2:	da04      	bge.n	80104ae <__ulp+0x2a>
 80104a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80104a8:	4113      	asrs	r3, r2
 80104aa:	2200      	movs	r2, #0
 80104ac:	e008      	b.n	80104c0 <__ulp+0x3c>
 80104ae:	f1a2 0314 	sub.w	r3, r2, #20
 80104b2:	2b1e      	cmp	r3, #30
 80104b4:	bfda      	itte	le
 80104b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80104ba:	40da      	lsrle	r2, r3
 80104bc:	2201      	movgt	r2, #1
 80104be:	2300      	movs	r3, #0
 80104c0:	4619      	mov	r1, r3
 80104c2:	4610      	mov	r0, r2
 80104c4:	ec41 0b10 	vmov	d0, r0, r1
 80104c8:	b002      	add	sp, #8
 80104ca:	4770      	bx	lr
 80104cc:	7ff00000 	.word	0x7ff00000

080104d0 <__b2d>:
 80104d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d4:	6906      	ldr	r6, [r0, #16]
 80104d6:	f100 0814 	add.w	r8, r0, #20
 80104da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80104de:	1f37      	subs	r7, r6, #4
 80104e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80104e4:	4610      	mov	r0, r2
 80104e6:	f7ff fd53 	bl	800ff90 <__hi0bits>
 80104ea:	f1c0 0320 	rsb	r3, r0, #32
 80104ee:	280a      	cmp	r0, #10
 80104f0:	600b      	str	r3, [r1, #0]
 80104f2:	491b      	ldr	r1, [pc, #108]	; (8010560 <__b2d+0x90>)
 80104f4:	dc15      	bgt.n	8010522 <__b2d+0x52>
 80104f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80104fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80104fe:	45b8      	cmp	r8, r7
 8010500:	ea43 0501 	orr.w	r5, r3, r1
 8010504:	bf34      	ite	cc
 8010506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801050a:	2300      	movcs	r3, #0
 801050c:	3015      	adds	r0, #21
 801050e:	fa02 f000 	lsl.w	r0, r2, r0
 8010512:	fa23 f30c 	lsr.w	r3, r3, ip
 8010516:	4303      	orrs	r3, r0
 8010518:	461c      	mov	r4, r3
 801051a:	ec45 4b10 	vmov	d0, r4, r5
 801051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010522:	45b8      	cmp	r8, r7
 8010524:	bf3a      	itte	cc
 8010526:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801052a:	f1a6 0708 	subcc.w	r7, r6, #8
 801052e:	2300      	movcs	r3, #0
 8010530:	380b      	subs	r0, #11
 8010532:	d012      	beq.n	801055a <__b2d+0x8a>
 8010534:	f1c0 0120 	rsb	r1, r0, #32
 8010538:	fa23 f401 	lsr.w	r4, r3, r1
 801053c:	4082      	lsls	r2, r0
 801053e:	4322      	orrs	r2, r4
 8010540:	4547      	cmp	r7, r8
 8010542:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010546:	bf8c      	ite	hi
 8010548:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801054c:	2200      	movls	r2, #0
 801054e:	4083      	lsls	r3, r0
 8010550:	40ca      	lsrs	r2, r1
 8010552:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010556:	4313      	orrs	r3, r2
 8010558:	e7de      	b.n	8010518 <__b2d+0x48>
 801055a:	ea42 0501 	orr.w	r5, r2, r1
 801055e:	e7db      	b.n	8010518 <__b2d+0x48>
 8010560:	3ff00000 	.word	0x3ff00000

08010564 <__d2b>:
 8010564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010568:	460f      	mov	r7, r1
 801056a:	2101      	movs	r1, #1
 801056c:	ec59 8b10 	vmov	r8, r9, d0
 8010570:	4616      	mov	r6, r2
 8010572:	f7ff fc1b 	bl	800fdac <_Balloc>
 8010576:	4604      	mov	r4, r0
 8010578:	b930      	cbnz	r0, 8010588 <__d2b+0x24>
 801057a:	4602      	mov	r2, r0
 801057c:	4b24      	ldr	r3, [pc, #144]	; (8010610 <__d2b+0xac>)
 801057e:	4825      	ldr	r0, [pc, #148]	; (8010614 <__d2b+0xb0>)
 8010580:	f240 310f 	movw	r1, #783	; 0x30f
 8010584:	f001 fd24 	bl	8011fd0 <__assert_func>
 8010588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801058c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010590:	bb2d      	cbnz	r5, 80105de <__d2b+0x7a>
 8010592:	9301      	str	r3, [sp, #4]
 8010594:	f1b8 0300 	subs.w	r3, r8, #0
 8010598:	d026      	beq.n	80105e8 <__d2b+0x84>
 801059a:	4668      	mov	r0, sp
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	f7ff fd17 	bl	800ffd0 <__lo0bits>
 80105a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105a6:	b1e8      	cbz	r0, 80105e4 <__d2b+0x80>
 80105a8:	f1c0 0320 	rsb	r3, r0, #32
 80105ac:	fa02 f303 	lsl.w	r3, r2, r3
 80105b0:	430b      	orrs	r3, r1
 80105b2:	40c2      	lsrs	r2, r0
 80105b4:	6163      	str	r3, [r4, #20]
 80105b6:	9201      	str	r2, [sp, #4]
 80105b8:	9b01      	ldr	r3, [sp, #4]
 80105ba:	61a3      	str	r3, [r4, #24]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	bf14      	ite	ne
 80105c0:	2202      	movne	r2, #2
 80105c2:	2201      	moveq	r2, #1
 80105c4:	6122      	str	r2, [r4, #16]
 80105c6:	b1bd      	cbz	r5, 80105f8 <__d2b+0x94>
 80105c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80105cc:	4405      	add	r5, r0
 80105ce:	603d      	str	r5, [r7, #0]
 80105d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80105d4:	6030      	str	r0, [r6, #0]
 80105d6:	4620      	mov	r0, r4
 80105d8:	b003      	add	sp, #12
 80105da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105e2:	e7d6      	b.n	8010592 <__d2b+0x2e>
 80105e4:	6161      	str	r1, [r4, #20]
 80105e6:	e7e7      	b.n	80105b8 <__d2b+0x54>
 80105e8:	a801      	add	r0, sp, #4
 80105ea:	f7ff fcf1 	bl	800ffd0 <__lo0bits>
 80105ee:	9b01      	ldr	r3, [sp, #4]
 80105f0:	6163      	str	r3, [r4, #20]
 80105f2:	3020      	adds	r0, #32
 80105f4:	2201      	movs	r2, #1
 80105f6:	e7e5      	b.n	80105c4 <__d2b+0x60>
 80105f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010600:	6038      	str	r0, [r7, #0]
 8010602:	6918      	ldr	r0, [r3, #16]
 8010604:	f7ff fcc4 	bl	800ff90 <__hi0bits>
 8010608:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801060c:	e7e2      	b.n	80105d4 <__d2b+0x70>
 801060e:	bf00      	nop
 8010610:	080140f3 	.word	0x080140f3
 8010614:	08014104 	.word	0x08014104

08010618 <__ratio>:
 8010618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061c:	4688      	mov	r8, r1
 801061e:	4669      	mov	r1, sp
 8010620:	4681      	mov	r9, r0
 8010622:	f7ff ff55 	bl	80104d0 <__b2d>
 8010626:	a901      	add	r1, sp, #4
 8010628:	4640      	mov	r0, r8
 801062a:	ec55 4b10 	vmov	r4, r5, d0
 801062e:	f7ff ff4f 	bl	80104d0 <__b2d>
 8010632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010636:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801063a:	eba3 0c02 	sub.w	ip, r3, r2
 801063e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010642:	1a9b      	subs	r3, r3, r2
 8010644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010648:	ec51 0b10 	vmov	r0, r1, d0
 801064c:	2b00      	cmp	r3, #0
 801064e:	bfd6      	itet	le
 8010650:	460a      	movle	r2, r1
 8010652:	462a      	movgt	r2, r5
 8010654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010658:	468b      	mov	fp, r1
 801065a:	462f      	mov	r7, r5
 801065c:	bfd4      	ite	le
 801065e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010662:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010666:	4620      	mov	r0, r4
 8010668:	ee10 2a10 	vmov	r2, s0
 801066c:	465b      	mov	r3, fp
 801066e:	4639      	mov	r1, r7
 8010670:	f7f0 f90c 	bl	800088c <__aeabi_ddiv>
 8010674:	ec41 0b10 	vmov	d0, r0, r1
 8010678:	b003      	add	sp, #12
 801067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801067e <__copybits>:
 801067e:	3901      	subs	r1, #1
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	1149      	asrs	r1, r1, #5
 8010684:	6914      	ldr	r4, [r2, #16]
 8010686:	3101      	adds	r1, #1
 8010688:	f102 0314 	add.w	r3, r2, #20
 801068c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010690:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010694:	1f05      	subs	r5, r0, #4
 8010696:	42a3      	cmp	r3, r4
 8010698:	d30c      	bcc.n	80106b4 <__copybits+0x36>
 801069a:	1aa3      	subs	r3, r4, r2
 801069c:	3b11      	subs	r3, #17
 801069e:	f023 0303 	bic.w	r3, r3, #3
 80106a2:	3211      	adds	r2, #17
 80106a4:	42a2      	cmp	r2, r4
 80106a6:	bf88      	it	hi
 80106a8:	2300      	movhi	r3, #0
 80106aa:	4418      	add	r0, r3
 80106ac:	2300      	movs	r3, #0
 80106ae:	4288      	cmp	r0, r1
 80106b0:	d305      	bcc.n	80106be <__copybits+0x40>
 80106b2:	bd70      	pop	{r4, r5, r6, pc}
 80106b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80106b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80106bc:	e7eb      	b.n	8010696 <__copybits+0x18>
 80106be:	f840 3b04 	str.w	r3, [r0], #4
 80106c2:	e7f4      	b.n	80106ae <__copybits+0x30>

080106c4 <__any_on>:
 80106c4:	f100 0214 	add.w	r2, r0, #20
 80106c8:	6900      	ldr	r0, [r0, #16]
 80106ca:	114b      	asrs	r3, r1, #5
 80106cc:	4298      	cmp	r0, r3
 80106ce:	b510      	push	{r4, lr}
 80106d0:	db11      	blt.n	80106f6 <__any_on+0x32>
 80106d2:	dd0a      	ble.n	80106ea <__any_on+0x26>
 80106d4:	f011 011f 	ands.w	r1, r1, #31
 80106d8:	d007      	beq.n	80106ea <__any_on+0x26>
 80106da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80106de:	fa24 f001 	lsr.w	r0, r4, r1
 80106e2:	fa00 f101 	lsl.w	r1, r0, r1
 80106e6:	428c      	cmp	r4, r1
 80106e8:	d10b      	bne.n	8010702 <__any_on+0x3e>
 80106ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d803      	bhi.n	80106fa <__any_on+0x36>
 80106f2:	2000      	movs	r0, #0
 80106f4:	bd10      	pop	{r4, pc}
 80106f6:	4603      	mov	r3, r0
 80106f8:	e7f7      	b.n	80106ea <__any_on+0x26>
 80106fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80106fe:	2900      	cmp	r1, #0
 8010700:	d0f5      	beq.n	80106ee <__any_on+0x2a>
 8010702:	2001      	movs	r0, #1
 8010704:	e7f6      	b.n	80106f4 <__any_on+0x30>

08010706 <sulp>:
 8010706:	b570      	push	{r4, r5, r6, lr}
 8010708:	4604      	mov	r4, r0
 801070a:	460d      	mov	r5, r1
 801070c:	ec45 4b10 	vmov	d0, r4, r5
 8010710:	4616      	mov	r6, r2
 8010712:	f7ff feb7 	bl	8010484 <__ulp>
 8010716:	ec51 0b10 	vmov	r0, r1, d0
 801071a:	b17e      	cbz	r6, 801073c <sulp+0x36>
 801071c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010724:	2b00      	cmp	r3, #0
 8010726:	dd09      	ble.n	801073c <sulp+0x36>
 8010728:	051b      	lsls	r3, r3, #20
 801072a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801072e:	2400      	movs	r4, #0
 8010730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010734:	4622      	mov	r2, r4
 8010736:	462b      	mov	r3, r5
 8010738:	f7ef ff7e 	bl	8000638 <__aeabi_dmul>
 801073c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010740 <_strtod_l>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	ed2d 8b02 	vpush	{d8}
 8010748:	b09b      	sub	sp, #108	; 0x6c
 801074a:	4604      	mov	r4, r0
 801074c:	9213      	str	r2, [sp, #76]	; 0x4c
 801074e:	2200      	movs	r2, #0
 8010750:	9216      	str	r2, [sp, #88]	; 0x58
 8010752:	460d      	mov	r5, r1
 8010754:	f04f 0800 	mov.w	r8, #0
 8010758:	f04f 0900 	mov.w	r9, #0
 801075c:	460a      	mov	r2, r1
 801075e:	9215      	str	r2, [sp, #84]	; 0x54
 8010760:	7811      	ldrb	r1, [r2, #0]
 8010762:	292b      	cmp	r1, #43	; 0x2b
 8010764:	d04c      	beq.n	8010800 <_strtod_l+0xc0>
 8010766:	d83a      	bhi.n	80107de <_strtod_l+0x9e>
 8010768:	290d      	cmp	r1, #13
 801076a:	d834      	bhi.n	80107d6 <_strtod_l+0x96>
 801076c:	2908      	cmp	r1, #8
 801076e:	d834      	bhi.n	80107da <_strtod_l+0x9a>
 8010770:	2900      	cmp	r1, #0
 8010772:	d03d      	beq.n	80107f0 <_strtod_l+0xb0>
 8010774:	2200      	movs	r2, #0
 8010776:	920a      	str	r2, [sp, #40]	; 0x28
 8010778:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801077a:	7832      	ldrb	r2, [r6, #0]
 801077c:	2a30      	cmp	r2, #48	; 0x30
 801077e:	f040 80b4 	bne.w	80108ea <_strtod_l+0x1aa>
 8010782:	7872      	ldrb	r2, [r6, #1]
 8010784:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010788:	2a58      	cmp	r2, #88	; 0x58
 801078a:	d170      	bne.n	801086e <_strtod_l+0x12e>
 801078c:	9302      	str	r3, [sp, #8]
 801078e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	ab16      	add	r3, sp, #88	; 0x58
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	4a8e      	ldr	r2, [pc, #568]	; (80109d0 <_strtod_l+0x290>)
 8010798:	ab17      	add	r3, sp, #92	; 0x5c
 801079a:	a915      	add	r1, sp, #84	; 0x54
 801079c:	4620      	mov	r0, r4
 801079e:	f001 fc9d 	bl	80120dc <__gethex>
 80107a2:	f010 070f 	ands.w	r7, r0, #15
 80107a6:	4605      	mov	r5, r0
 80107a8:	d005      	beq.n	80107b6 <_strtod_l+0x76>
 80107aa:	2f06      	cmp	r7, #6
 80107ac:	d12a      	bne.n	8010804 <_strtod_l+0xc4>
 80107ae:	3601      	adds	r6, #1
 80107b0:	2300      	movs	r3, #0
 80107b2:	9615      	str	r6, [sp, #84]	; 0x54
 80107b4:	930a      	str	r3, [sp, #40]	; 0x28
 80107b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f040 857f 	bne.w	80112bc <_strtod_l+0xb7c>
 80107be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c0:	b1db      	cbz	r3, 80107fa <_strtod_l+0xba>
 80107c2:	4642      	mov	r2, r8
 80107c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80107c8:	ec43 2b10 	vmov	d0, r2, r3
 80107cc:	b01b      	add	sp, #108	; 0x6c
 80107ce:	ecbd 8b02 	vpop	{d8}
 80107d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d6:	2920      	cmp	r1, #32
 80107d8:	d1cc      	bne.n	8010774 <_strtod_l+0x34>
 80107da:	3201      	adds	r2, #1
 80107dc:	e7bf      	b.n	801075e <_strtod_l+0x1e>
 80107de:	292d      	cmp	r1, #45	; 0x2d
 80107e0:	d1c8      	bne.n	8010774 <_strtod_l+0x34>
 80107e2:	2101      	movs	r1, #1
 80107e4:	910a      	str	r1, [sp, #40]	; 0x28
 80107e6:	1c51      	adds	r1, r2, #1
 80107e8:	9115      	str	r1, [sp, #84]	; 0x54
 80107ea:	7852      	ldrb	r2, [r2, #1]
 80107ec:	2a00      	cmp	r2, #0
 80107ee:	d1c3      	bne.n	8010778 <_strtod_l+0x38>
 80107f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107f2:	9515      	str	r5, [sp, #84]	; 0x54
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f040 855f 	bne.w	80112b8 <_strtod_l+0xb78>
 80107fa:	4642      	mov	r2, r8
 80107fc:	464b      	mov	r3, r9
 80107fe:	e7e3      	b.n	80107c8 <_strtod_l+0x88>
 8010800:	2100      	movs	r1, #0
 8010802:	e7ef      	b.n	80107e4 <_strtod_l+0xa4>
 8010804:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010806:	b13a      	cbz	r2, 8010818 <_strtod_l+0xd8>
 8010808:	2135      	movs	r1, #53	; 0x35
 801080a:	a818      	add	r0, sp, #96	; 0x60
 801080c:	f7ff ff37 	bl	801067e <__copybits>
 8010810:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010812:	4620      	mov	r0, r4
 8010814:	f7ff fb0a 	bl	800fe2c <_Bfree>
 8010818:	3f01      	subs	r7, #1
 801081a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801081c:	2f04      	cmp	r7, #4
 801081e:	d806      	bhi.n	801082e <_strtod_l+0xee>
 8010820:	e8df f007 	tbb	[pc, r7]
 8010824:	201d0314 	.word	0x201d0314
 8010828:	14          	.byte	0x14
 8010829:	00          	.byte	0x00
 801082a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801082e:	05e9      	lsls	r1, r5, #23
 8010830:	bf48      	it	mi
 8010832:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801083a:	0d1b      	lsrs	r3, r3, #20
 801083c:	051b      	lsls	r3, r3, #20
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1b9      	bne.n	80107b6 <_strtod_l+0x76>
 8010842:	f7fe fba5 	bl	800ef90 <__errno>
 8010846:	2322      	movs	r3, #34	; 0x22
 8010848:	6003      	str	r3, [r0, #0]
 801084a:	e7b4      	b.n	80107b6 <_strtod_l+0x76>
 801084c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010850:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010858:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801085c:	e7e7      	b.n	801082e <_strtod_l+0xee>
 801085e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80109d8 <_strtod_l+0x298>
 8010862:	e7e4      	b.n	801082e <_strtod_l+0xee>
 8010864:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010868:	f04f 38ff 	mov.w	r8, #4294967295
 801086c:	e7df      	b.n	801082e <_strtod_l+0xee>
 801086e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010870:	1c5a      	adds	r2, r3, #1
 8010872:	9215      	str	r2, [sp, #84]	; 0x54
 8010874:	785b      	ldrb	r3, [r3, #1]
 8010876:	2b30      	cmp	r3, #48	; 0x30
 8010878:	d0f9      	beq.n	801086e <_strtod_l+0x12e>
 801087a:	2b00      	cmp	r3, #0
 801087c:	d09b      	beq.n	80107b6 <_strtod_l+0x76>
 801087e:	2301      	movs	r3, #1
 8010880:	f04f 0a00 	mov.w	sl, #0
 8010884:	9304      	str	r3, [sp, #16]
 8010886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010888:	930b      	str	r3, [sp, #44]	; 0x2c
 801088a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801088e:	46d3      	mov	fp, sl
 8010890:	220a      	movs	r2, #10
 8010892:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010894:	7806      	ldrb	r6, [r0, #0]
 8010896:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801089a:	b2d9      	uxtb	r1, r3
 801089c:	2909      	cmp	r1, #9
 801089e:	d926      	bls.n	80108ee <_strtod_l+0x1ae>
 80108a0:	494c      	ldr	r1, [pc, #304]	; (80109d4 <_strtod_l+0x294>)
 80108a2:	2201      	movs	r2, #1
 80108a4:	f001 fb79 	bl	8011f9a <strncmp>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	d030      	beq.n	801090e <_strtod_l+0x1ce>
 80108ac:	2000      	movs	r0, #0
 80108ae:	4632      	mov	r2, r6
 80108b0:	9005      	str	r0, [sp, #20]
 80108b2:	465e      	mov	r6, fp
 80108b4:	4603      	mov	r3, r0
 80108b6:	2a65      	cmp	r2, #101	; 0x65
 80108b8:	d001      	beq.n	80108be <_strtod_l+0x17e>
 80108ba:	2a45      	cmp	r2, #69	; 0x45
 80108bc:	d113      	bne.n	80108e6 <_strtod_l+0x1a6>
 80108be:	b91e      	cbnz	r6, 80108c8 <_strtod_l+0x188>
 80108c0:	9a04      	ldr	r2, [sp, #16]
 80108c2:	4302      	orrs	r2, r0
 80108c4:	d094      	beq.n	80107f0 <_strtod_l+0xb0>
 80108c6:	2600      	movs	r6, #0
 80108c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80108ca:	1c6a      	adds	r2, r5, #1
 80108cc:	9215      	str	r2, [sp, #84]	; 0x54
 80108ce:	786a      	ldrb	r2, [r5, #1]
 80108d0:	2a2b      	cmp	r2, #43	; 0x2b
 80108d2:	d074      	beq.n	80109be <_strtod_l+0x27e>
 80108d4:	2a2d      	cmp	r2, #45	; 0x2d
 80108d6:	d078      	beq.n	80109ca <_strtod_l+0x28a>
 80108d8:	f04f 0c00 	mov.w	ip, #0
 80108dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80108e0:	2909      	cmp	r1, #9
 80108e2:	d97f      	bls.n	80109e4 <_strtod_l+0x2a4>
 80108e4:	9515      	str	r5, [sp, #84]	; 0x54
 80108e6:	2700      	movs	r7, #0
 80108e8:	e09e      	b.n	8010a28 <_strtod_l+0x2e8>
 80108ea:	2300      	movs	r3, #0
 80108ec:	e7c8      	b.n	8010880 <_strtod_l+0x140>
 80108ee:	f1bb 0f08 	cmp.w	fp, #8
 80108f2:	bfd8      	it	le
 80108f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80108f6:	f100 0001 	add.w	r0, r0, #1
 80108fa:	bfda      	itte	le
 80108fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8010900:	9309      	strle	r3, [sp, #36]	; 0x24
 8010902:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010906:	f10b 0b01 	add.w	fp, fp, #1
 801090a:	9015      	str	r0, [sp, #84]	; 0x54
 801090c:	e7c1      	b.n	8010892 <_strtod_l+0x152>
 801090e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	9215      	str	r2, [sp, #84]	; 0x54
 8010914:	785a      	ldrb	r2, [r3, #1]
 8010916:	f1bb 0f00 	cmp.w	fp, #0
 801091a:	d037      	beq.n	801098c <_strtod_l+0x24c>
 801091c:	9005      	str	r0, [sp, #20]
 801091e:	465e      	mov	r6, fp
 8010920:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010924:	2b09      	cmp	r3, #9
 8010926:	d912      	bls.n	801094e <_strtod_l+0x20e>
 8010928:	2301      	movs	r3, #1
 801092a:	e7c4      	b.n	80108b6 <_strtod_l+0x176>
 801092c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	9215      	str	r2, [sp, #84]	; 0x54
 8010932:	785a      	ldrb	r2, [r3, #1]
 8010934:	3001      	adds	r0, #1
 8010936:	2a30      	cmp	r2, #48	; 0x30
 8010938:	d0f8      	beq.n	801092c <_strtod_l+0x1ec>
 801093a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801093e:	2b08      	cmp	r3, #8
 8010940:	f200 84c1 	bhi.w	80112c6 <_strtod_l+0xb86>
 8010944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010946:	9005      	str	r0, [sp, #20]
 8010948:	2000      	movs	r0, #0
 801094a:	930b      	str	r3, [sp, #44]	; 0x2c
 801094c:	4606      	mov	r6, r0
 801094e:	3a30      	subs	r2, #48	; 0x30
 8010950:	f100 0301 	add.w	r3, r0, #1
 8010954:	d014      	beq.n	8010980 <_strtod_l+0x240>
 8010956:	9905      	ldr	r1, [sp, #20]
 8010958:	4419      	add	r1, r3
 801095a:	9105      	str	r1, [sp, #20]
 801095c:	4633      	mov	r3, r6
 801095e:	eb00 0c06 	add.w	ip, r0, r6
 8010962:	210a      	movs	r1, #10
 8010964:	4563      	cmp	r3, ip
 8010966:	d113      	bne.n	8010990 <_strtod_l+0x250>
 8010968:	1833      	adds	r3, r6, r0
 801096a:	2b08      	cmp	r3, #8
 801096c:	f106 0601 	add.w	r6, r6, #1
 8010970:	4406      	add	r6, r0
 8010972:	dc1a      	bgt.n	80109aa <_strtod_l+0x26a>
 8010974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010976:	230a      	movs	r3, #10
 8010978:	fb03 2301 	mla	r3, r3, r1, r2
 801097c:	9309      	str	r3, [sp, #36]	; 0x24
 801097e:	2300      	movs	r3, #0
 8010980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010982:	1c51      	adds	r1, r2, #1
 8010984:	9115      	str	r1, [sp, #84]	; 0x54
 8010986:	7852      	ldrb	r2, [r2, #1]
 8010988:	4618      	mov	r0, r3
 801098a:	e7c9      	b.n	8010920 <_strtod_l+0x1e0>
 801098c:	4658      	mov	r0, fp
 801098e:	e7d2      	b.n	8010936 <_strtod_l+0x1f6>
 8010990:	2b08      	cmp	r3, #8
 8010992:	f103 0301 	add.w	r3, r3, #1
 8010996:	dc03      	bgt.n	80109a0 <_strtod_l+0x260>
 8010998:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801099a:	434f      	muls	r7, r1
 801099c:	9709      	str	r7, [sp, #36]	; 0x24
 801099e:	e7e1      	b.n	8010964 <_strtod_l+0x224>
 80109a0:	2b10      	cmp	r3, #16
 80109a2:	bfd8      	it	le
 80109a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80109a8:	e7dc      	b.n	8010964 <_strtod_l+0x224>
 80109aa:	2e10      	cmp	r6, #16
 80109ac:	bfdc      	itt	le
 80109ae:	230a      	movle	r3, #10
 80109b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80109b4:	e7e3      	b.n	801097e <_strtod_l+0x23e>
 80109b6:	2300      	movs	r3, #0
 80109b8:	9305      	str	r3, [sp, #20]
 80109ba:	2301      	movs	r3, #1
 80109bc:	e780      	b.n	80108c0 <_strtod_l+0x180>
 80109be:	f04f 0c00 	mov.w	ip, #0
 80109c2:	1caa      	adds	r2, r5, #2
 80109c4:	9215      	str	r2, [sp, #84]	; 0x54
 80109c6:	78aa      	ldrb	r2, [r5, #2]
 80109c8:	e788      	b.n	80108dc <_strtod_l+0x19c>
 80109ca:	f04f 0c01 	mov.w	ip, #1
 80109ce:	e7f8      	b.n	80109c2 <_strtod_l+0x282>
 80109d0:	08014260 	.word	0x08014260
 80109d4:	0801425c 	.word	0x0801425c
 80109d8:	7ff00000 	.word	0x7ff00000
 80109dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109de:	1c51      	adds	r1, r2, #1
 80109e0:	9115      	str	r1, [sp, #84]	; 0x54
 80109e2:	7852      	ldrb	r2, [r2, #1]
 80109e4:	2a30      	cmp	r2, #48	; 0x30
 80109e6:	d0f9      	beq.n	80109dc <_strtod_l+0x29c>
 80109e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80109ec:	2908      	cmp	r1, #8
 80109ee:	f63f af7a 	bhi.w	80108e6 <_strtod_l+0x1a6>
 80109f2:	3a30      	subs	r2, #48	; 0x30
 80109f4:	9208      	str	r2, [sp, #32]
 80109f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109f8:	920c      	str	r2, [sp, #48]	; 0x30
 80109fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109fc:	1c57      	adds	r7, r2, #1
 80109fe:	9715      	str	r7, [sp, #84]	; 0x54
 8010a00:	7852      	ldrb	r2, [r2, #1]
 8010a02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010a06:	f1be 0f09 	cmp.w	lr, #9
 8010a0a:	d938      	bls.n	8010a7e <_strtod_l+0x33e>
 8010a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a0e:	1a7f      	subs	r7, r7, r1
 8010a10:	2f08      	cmp	r7, #8
 8010a12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010a16:	dc03      	bgt.n	8010a20 <_strtod_l+0x2e0>
 8010a18:	9908      	ldr	r1, [sp, #32]
 8010a1a:	428f      	cmp	r7, r1
 8010a1c:	bfa8      	it	ge
 8010a1e:	460f      	movge	r7, r1
 8010a20:	f1bc 0f00 	cmp.w	ip, #0
 8010a24:	d000      	beq.n	8010a28 <_strtod_l+0x2e8>
 8010a26:	427f      	negs	r7, r7
 8010a28:	2e00      	cmp	r6, #0
 8010a2a:	d14f      	bne.n	8010acc <_strtod_l+0x38c>
 8010a2c:	9904      	ldr	r1, [sp, #16]
 8010a2e:	4301      	orrs	r1, r0
 8010a30:	f47f aec1 	bne.w	80107b6 <_strtod_l+0x76>
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f47f aedb 	bne.w	80107f0 <_strtod_l+0xb0>
 8010a3a:	2a69      	cmp	r2, #105	; 0x69
 8010a3c:	d029      	beq.n	8010a92 <_strtod_l+0x352>
 8010a3e:	dc26      	bgt.n	8010a8e <_strtod_l+0x34e>
 8010a40:	2a49      	cmp	r2, #73	; 0x49
 8010a42:	d026      	beq.n	8010a92 <_strtod_l+0x352>
 8010a44:	2a4e      	cmp	r2, #78	; 0x4e
 8010a46:	f47f aed3 	bne.w	80107f0 <_strtod_l+0xb0>
 8010a4a:	499b      	ldr	r1, [pc, #620]	; (8010cb8 <_strtod_l+0x578>)
 8010a4c:	a815      	add	r0, sp, #84	; 0x54
 8010a4e:	f001 fd85 	bl	801255c <__match>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	f43f aecc 	beq.w	80107f0 <_strtod_l+0xb0>
 8010a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	2b28      	cmp	r3, #40	; 0x28
 8010a5e:	d12f      	bne.n	8010ac0 <_strtod_l+0x380>
 8010a60:	4996      	ldr	r1, [pc, #600]	; (8010cbc <_strtod_l+0x57c>)
 8010a62:	aa18      	add	r2, sp, #96	; 0x60
 8010a64:	a815      	add	r0, sp, #84	; 0x54
 8010a66:	f001 fd8d 	bl	8012584 <__hexnan>
 8010a6a:	2805      	cmp	r0, #5
 8010a6c:	d128      	bne.n	8010ac0 <_strtod_l+0x380>
 8010a6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010a74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010a78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010a7c:	e69b      	b.n	80107b6 <_strtod_l+0x76>
 8010a7e:	9f08      	ldr	r7, [sp, #32]
 8010a80:	210a      	movs	r1, #10
 8010a82:	fb01 2107 	mla	r1, r1, r7, r2
 8010a86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010a8a:	9208      	str	r2, [sp, #32]
 8010a8c:	e7b5      	b.n	80109fa <_strtod_l+0x2ba>
 8010a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8010a90:	e7d9      	b.n	8010a46 <_strtod_l+0x306>
 8010a92:	498b      	ldr	r1, [pc, #556]	; (8010cc0 <_strtod_l+0x580>)
 8010a94:	a815      	add	r0, sp, #84	; 0x54
 8010a96:	f001 fd61 	bl	801255c <__match>
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	f43f aea8 	beq.w	80107f0 <_strtod_l+0xb0>
 8010aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aa2:	4988      	ldr	r1, [pc, #544]	; (8010cc4 <_strtod_l+0x584>)
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	a815      	add	r0, sp, #84	; 0x54
 8010aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8010aaa:	f001 fd57 	bl	801255c <__match>
 8010aae:	b910      	cbnz	r0, 8010ab6 <_strtod_l+0x376>
 8010ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	9315      	str	r3, [sp, #84]	; 0x54
 8010ab6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010cd4 <_strtod_l+0x594>
 8010aba:	f04f 0800 	mov.w	r8, #0
 8010abe:	e67a      	b.n	80107b6 <_strtod_l+0x76>
 8010ac0:	4881      	ldr	r0, [pc, #516]	; (8010cc8 <_strtod_l+0x588>)
 8010ac2:	f001 fa7d 	bl	8011fc0 <nan>
 8010ac6:	ec59 8b10 	vmov	r8, r9, d0
 8010aca:	e674      	b.n	80107b6 <_strtod_l+0x76>
 8010acc:	9b05      	ldr	r3, [sp, #20]
 8010ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ad0:	1afb      	subs	r3, r7, r3
 8010ad2:	f1bb 0f00 	cmp.w	fp, #0
 8010ad6:	bf08      	it	eq
 8010ad8:	46b3      	moveq	fp, r6
 8010ada:	2e10      	cmp	r6, #16
 8010adc:	9308      	str	r3, [sp, #32]
 8010ade:	4635      	mov	r5, r6
 8010ae0:	bfa8      	it	ge
 8010ae2:	2510      	movge	r5, #16
 8010ae4:	f7ef fd2e 	bl	8000544 <__aeabi_ui2d>
 8010ae8:	2e09      	cmp	r6, #9
 8010aea:	4680      	mov	r8, r0
 8010aec:	4689      	mov	r9, r1
 8010aee:	dd13      	ble.n	8010b18 <_strtod_l+0x3d8>
 8010af0:	4b76      	ldr	r3, [pc, #472]	; (8010ccc <_strtod_l+0x58c>)
 8010af2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010af6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010afa:	f7ef fd9d 	bl	8000638 <__aeabi_dmul>
 8010afe:	4680      	mov	r8, r0
 8010b00:	4650      	mov	r0, sl
 8010b02:	4689      	mov	r9, r1
 8010b04:	f7ef fd1e 	bl	8000544 <__aeabi_ui2d>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	4640      	mov	r0, r8
 8010b0e:	4649      	mov	r1, r9
 8010b10:	f7ef fbdc 	bl	80002cc <__adddf3>
 8010b14:	4680      	mov	r8, r0
 8010b16:	4689      	mov	r9, r1
 8010b18:	2e0f      	cmp	r6, #15
 8010b1a:	dc38      	bgt.n	8010b8e <_strtod_l+0x44e>
 8010b1c:	9b08      	ldr	r3, [sp, #32]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f43f ae49 	beq.w	80107b6 <_strtod_l+0x76>
 8010b24:	dd24      	ble.n	8010b70 <_strtod_l+0x430>
 8010b26:	2b16      	cmp	r3, #22
 8010b28:	dc0b      	bgt.n	8010b42 <_strtod_l+0x402>
 8010b2a:	4968      	ldr	r1, [pc, #416]	; (8010ccc <_strtod_l+0x58c>)
 8010b2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b34:	4642      	mov	r2, r8
 8010b36:	464b      	mov	r3, r9
 8010b38:	f7ef fd7e 	bl	8000638 <__aeabi_dmul>
 8010b3c:	4680      	mov	r8, r0
 8010b3e:	4689      	mov	r9, r1
 8010b40:	e639      	b.n	80107b6 <_strtod_l+0x76>
 8010b42:	9a08      	ldr	r2, [sp, #32]
 8010b44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	db20      	blt.n	8010b8e <_strtod_l+0x44e>
 8010b4c:	4c5f      	ldr	r4, [pc, #380]	; (8010ccc <_strtod_l+0x58c>)
 8010b4e:	f1c6 060f 	rsb	r6, r6, #15
 8010b52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010b56:	4642      	mov	r2, r8
 8010b58:	464b      	mov	r3, r9
 8010b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b5e:	f7ef fd6b 	bl	8000638 <__aeabi_dmul>
 8010b62:	9b08      	ldr	r3, [sp, #32]
 8010b64:	1b9e      	subs	r6, r3, r6
 8010b66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010b6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b6e:	e7e3      	b.n	8010b38 <_strtod_l+0x3f8>
 8010b70:	9b08      	ldr	r3, [sp, #32]
 8010b72:	3316      	adds	r3, #22
 8010b74:	db0b      	blt.n	8010b8e <_strtod_l+0x44e>
 8010b76:	9b05      	ldr	r3, [sp, #20]
 8010b78:	1bdf      	subs	r7, r3, r7
 8010b7a:	4b54      	ldr	r3, [pc, #336]	; (8010ccc <_strtod_l+0x58c>)
 8010b7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b84:	4640      	mov	r0, r8
 8010b86:	4649      	mov	r1, r9
 8010b88:	f7ef fe80 	bl	800088c <__aeabi_ddiv>
 8010b8c:	e7d6      	b.n	8010b3c <_strtod_l+0x3fc>
 8010b8e:	9b08      	ldr	r3, [sp, #32]
 8010b90:	1b75      	subs	r5, r6, r5
 8010b92:	441d      	add	r5, r3
 8010b94:	2d00      	cmp	r5, #0
 8010b96:	dd70      	ble.n	8010c7a <_strtod_l+0x53a>
 8010b98:	f015 030f 	ands.w	r3, r5, #15
 8010b9c:	d00a      	beq.n	8010bb4 <_strtod_l+0x474>
 8010b9e:	494b      	ldr	r1, [pc, #300]	; (8010ccc <_strtod_l+0x58c>)
 8010ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ba4:	4642      	mov	r2, r8
 8010ba6:	464b      	mov	r3, r9
 8010ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bac:	f7ef fd44 	bl	8000638 <__aeabi_dmul>
 8010bb0:	4680      	mov	r8, r0
 8010bb2:	4689      	mov	r9, r1
 8010bb4:	f035 050f 	bics.w	r5, r5, #15
 8010bb8:	d04d      	beq.n	8010c56 <_strtod_l+0x516>
 8010bba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010bbe:	dd22      	ble.n	8010c06 <_strtod_l+0x4c6>
 8010bc0:	2500      	movs	r5, #0
 8010bc2:	46ab      	mov	fp, r5
 8010bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8010bc6:	9505      	str	r5, [sp, #20]
 8010bc8:	2322      	movs	r3, #34	; 0x22
 8010bca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010cd4 <_strtod_l+0x594>
 8010bce:	6023      	str	r3, [r4, #0]
 8010bd0:	f04f 0800 	mov.w	r8, #0
 8010bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f43f aded 	beq.w	80107b6 <_strtod_l+0x76>
 8010bdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010bde:	4620      	mov	r0, r4
 8010be0:	f7ff f924 	bl	800fe2c <_Bfree>
 8010be4:	9905      	ldr	r1, [sp, #20]
 8010be6:	4620      	mov	r0, r4
 8010be8:	f7ff f920 	bl	800fe2c <_Bfree>
 8010bec:	4659      	mov	r1, fp
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7ff f91c 	bl	800fe2c <_Bfree>
 8010bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f7ff f918 	bl	800fe2c <_Bfree>
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f7ff f914 	bl	800fe2c <_Bfree>
 8010c04:	e5d7      	b.n	80107b6 <_strtod_l+0x76>
 8010c06:	4b32      	ldr	r3, [pc, #200]	; (8010cd0 <_strtod_l+0x590>)
 8010c08:	9304      	str	r3, [sp, #16]
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	112d      	asrs	r5, r5, #4
 8010c0e:	4640      	mov	r0, r8
 8010c10:	4649      	mov	r1, r9
 8010c12:	469a      	mov	sl, r3
 8010c14:	2d01      	cmp	r5, #1
 8010c16:	dc21      	bgt.n	8010c5c <_strtod_l+0x51c>
 8010c18:	b10b      	cbz	r3, 8010c1e <_strtod_l+0x4de>
 8010c1a:	4680      	mov	r8, r0
 8010c1c:	4689      	mov	r9, r1
 8010c1e:	492c      	ldr	r1, [pc, #176]	; (8010cd0 <_strtod_l+0x590>)
 8010c20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010c24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010c28:	4642      	mov	r2, r8
 8010c2a:	464b      	mov	r3, r9
 8010c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c30:	f7ef fd02 	bl	8000638 <__aeabi_dmul>
 8010c34:	4b27      	ldr	r3, [pc, #156]	; (8010cd4 <_strtod_l+0x594>)
 8010c36:	460a      	mov	r2, r1
 8010c38:	400b      	ands	r3, r1
 8010c3a:	4927      	ldr	r1, [pc, #156]	; (8010cd8 <_strtod_l+0x598>)
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	4680      	mov	r8, r0
 8010c40:	d8be      	bhi.n	8010bc0 <_strtod_l+0x480>
 8010c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c46:	428b      	cmp	r3, r1
 8010c48:	bf86      	itte	hi
 8010c4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010cdc <_strtod_l+0x59c>
 8010c4e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010c52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010c56:	2300      	movs	r3, #0
 8010c58:	9304      	str	r3, [sp, #16]
 8010c5a:	e07b      	b.n	8010d54 <_strtod_l+0x614>
 8010c5c:	07ea      	lsls	r2, r5, #31
 8010c5e:	d505      	bpl.n	8010c6c <_strtod_l+0x52c>
 8010c60:	9b04      	ldr	r3, [sp, #16]
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	f7ef fce7 	bl	8000638 <__aeabi_dmul>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	9a04      	ldr	r2, [sp, #16]
 8010c6e:	3208      	adds	r2, #8
 8010c70:	f10a 0a01 	add.w	sl, sl, #1
 8010c74:	106d      	asrs	r5, r5, #1
 8010c76:	9204      	str	r2, [sp, #16]
 8010c78:	e7cc      	b.n	8010c14 <_strtod_l+0x4d4>
 8010c7a:	d0ec      	beq.n	8010c56 <_strtod_l+0x516>
 8010c7c:	426d      	negs	r5, r5
 8010c7e:	f015 020f 	ands.w	r2, r5, #15
 8010c82:	d00a      	beq.n	8010c9a <_strtod_l+0x55a>
 8010c84:	4b11      	ldr	r3, [pc, #68]	; (8010ccc <_strtod_l+0x58c>)
 8010c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c8a:	4640      	mov	r0, r8
 8010c8c:	4649      	mov	r1, r9
 8010c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c92:	f7ef fdfb 	bl	800088c <__aeabi_ddiv>
 8010c96:	4680      	mov	r8, r0
 8010c98:	4689      	mov	r9, r1
 8010c9a:	112d      	asrs	r5, r5, #4
 8010c9c:	d0db      	beq.n	8010c56 <_strtod_l+0x516>
 8010c9e:	2d1f      	cmp	r5, #31
 8010ca0:	dd1e      	ble.n	8010ce0 <_strtod_l+0x5a0>
 8010ca2:	2500      	movs	r5, #0
 8010ca4:	46ab      	mov	fp, r5
 8010ca6:	9509      	str	r5, [sp, #36]	; 0x24
 8010ca8:	9505      	str	r5, [sp, #20]
 8010caa:	2322      	movs	r3, #34	; 0x22
 8010cac:	f04f 0800 	mov.w	r8, #0
 8010cb0:	f04f 0900 	mov.w	r9, #0
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	e78d      	b.n	8010bd4 <_strtod_l+0x494>
 8010cb8:	0801404d 	.word	0x0801404d
 8010cbc:	08014274 	.word	0x08014274
 8010cc0:	08014045 	.word	0x08014045
 8010cc4:	0801407a 	.word	0x0801407a
 8010cc8:	08014420 	.word	0x08014420
 8010ccc:	08014188 	.word	0x08014188
 8010cd0:	08014160 	.word	0x08014160
 8010cd4:	7ff00000 	.word	0x7ff00000
 8010cd8:	7ca00000 	.word	0x7ca00000
 8010cdc:	7fefffff 	.word	0x7fefffff
 8010ce0:	f015 0310 	ands.w	r3, r5, #16
 8010ce4:	bf18      	it	ne
 8010ce6:	236a      	movne	r3, #106	; 0x6a
 8010ce8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801108c <_strtod_l+0x94c>
 8010cec:	9304      	str	r3, [sp, #16]
 8010cee:	4640      	mov	r0, r8
 8010cf0:	4649      	mov	r1, r9
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	07ea      	lsls	r2, r5, #31
 8010cf6:	d504      	bpl.n	8010d02 <_strtod_l+0x5c2>
 8010cf8:	e9da 2300 	ldrd	r2, r3, [sl]
 8010cfc:	f7ef fc9c 	bl	8000638 <__aeabi_dmul>
 8010d00:	2301      	movs	r3, #1
 8010d02:	106d      	asrs	r5, r5, #1
 8010d04:	f10a 0a08 	add.w	sl, sl, #8
 8010d08:	d1f4      	bne.n	8010cf4 <_strtod_l+0x5b4>
 8010d0a:	b10b      	cbz	r3, 8010d10 <_strtod_l+0x5d0>
 8010d0c:	4680      	mov	r8, r0
 8010d0e:	4689      	mov	r9, r1
 8010d10:	9b04      	ldr	r3, [sp, #16]
 8010d12:	b1bb      	cbz	r3, 8010d44 <_strtod_l+0x604>
 8010d14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010d18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	4649      	mov	r1, r9
 8010d20:	dd10      	ble.n	8010d44 <_strtod_l+0x604>
 8010d22:	2b1f      	cmp	r3, #31
 8010d24:	f340 811e 	ble.w	8010f64 <_strtod_l+0x824>
 8010d28:	2b34      	cmp	r3, #52	; 0x34
 8010d2a:	bfde      	ittt	le
 8010d2c:	f04f 33ff 	movle.w	r3, #4294967295
 8010d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010d34:	4093      	lslle	r3, r2
 8010d36:	f04f 0800 	mov.w	r8, #0
 8010d3a:	bfcc      	ite	gt
 8010d3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010d40:	ea03 0901 	andle.w	r9, r3, r1
 8010d44:	2200      	movs	r2, #0
 8010d46:	2300      	movs	r3, #0
 8010d48:	4640      	mov	r0, r8
 8010d4a:	4649      	mov	r1, r9
 8010d4c:	f7ef fedc 	bl	8000b08 <__aeabi_dcmpeq>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d1a6      	bne.n	8010ca2 <_strtod_l+0x562>
 8010d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d5a:	4633      	mov	r3, r6
 8010d5c:	465a      	mov	r2, fp
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f7ff f8cc 	bl	800fefc <__s2b>
 8010d64:	9009      	str	r0, [sp, #36]	; 0x24
 8010d66:	2800      	cmp	r0, #0
 8010d68:	f43f af2a 	beq.w	8010bc0 <_strtod_l+0x480>
 8010d6c:	9a08      	ldr	r2, [sp, #32]
 8010d6e:	9b05      	ldr	r3, [sp, #20]
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	eba3 0307 	sub.w	r3, r3, r7
 8010d76:	bfa8      	it	ge
 8010d78:	2300      	movge	r3, #0
 8010d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d7c:	2500      	movs	r5, #0
 8010d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010d82:	9312      	str	r3, [sp, #72]	; 0x48
 8010d84:	46ab      	mov	fp, r5
 8010d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d88:	4620      	mov	r0, r4
 8010d8a:	6859      	ldr	r1, [r3, #4]
 8010d8c:	f7ff f80e 	bl	800fdac <_Balloc>
 8010d90:	9005      	str	r0, [sp, #20]
 8010d92:	2800      	cmp	r0, #0
 8010d94:	f43f af18 	beq.w	8010bc8 <_strtod_l+0x488>
 8010d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9a:	691a      	ldr	r2, [r3, #16]
 8010d9c:	3202      	adds	r2, #2
 8010d9e:	f103 010c 	add.w	r1, r3, #12
 8010da2:	0092      	lsls	r2, r2, #2
 8010da4:	300c      	adds	r0, #12
 8010da6:	f7fe f91f 	bl	800efe8 <memcpy>
 8010daa:	ec49 8b10 	vmov	d0, r8, r9
 8010dae:	aa18      	add	r2, sp, #96	; 0x60
 8010db0:	a917      	add	r1, sp, #92	; 0x5c
 8010db2:	4620      	mov	r0, r4
 8010db4:	f7ff fbd6 	bl	8010564 <__d2b>
 8010db8:	ec49 8b18 	vmov	d8, r8, r9
 8010dbc:	9016      	str	r0, [sp, #88]	; 0x58
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f43f af02 	beq.w	8010bc8 <_strtod_l+0x488>
 8010dc4:	2101      	movs	r1, #1
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f7ff f930 	bl	801002c <__i2b>
 8010dcc:	4683      	mov	fp, r0
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	f43f aefa 	beq.w	8010bc8 <_strtod_l+0x488>
 8010dd4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010dd6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dd8:	2e00      	cmp	r6, #0
 8010dda:	bfab      	itete	ge
 8010ddc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010dde:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010de0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010de2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010de6:	bfac      	ite	ge
 8010de8:	eb06 0a03 	addge.w	sl, r6, r3
 8010dec:	1b9f      	sublt	r7, r3, r6
 8010dee:	9b04      	ldr	r3, [sp, #16]
 8010df0:	1af6      	subs	r6, r6, r3
 8010df2:	4416      	add	r6, r2
 8010df4:	4ba0      	ldr	r3, [pc, #640]	; (8011078 <_strtod_l+0x938>)
 8010df6:	3e01      	subs	r6, #1
 8010df8:	429e      	cmp	r6, r3
 8010dfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010dfe:	f280 80c4 	bge.w	8010f8a <_strtod_l+0x84a>
 8010e02:	1b9b      	subs	r3, r3, r6
 8010e04:	2b1f      	cmp	r3, #31
 8010e06:	eba2 0203 	sub.w	r2, r2, r3
 8010e0a:	f04f 0101 	mov.w	r1, #1
 8010e0e:	f300 80b0 	bgt.w	8010f72 <_strtod_l+0x832>
 8010e12:	fa01 f303 	lsl.w	r3, r1, r3
 8010e16:	930e      	str	r3, [sp, #56]	; 0x38
 8010e18:	2300      	movs	r3, #0
 8010e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8010e1c:	eb0a 0602 	add.w	r6, sl, r2
 8010e20:	9b04      	ldr	r3, [sp, #16]
 8010e22:	45b2      	cmp	sl, r6
 8010e24:	4417      	add	r7, r2
 8010e26:	441f      	add	r7, r3
 8010e28:	4653      	mov	r3, sl
 8010e2a:	bfa8      	it	ge
 8010e2c:	4633      	movge	r3, r6
 8010e2e:	42bb      	cmp	r3, r7
 8010e30:	bfa8      	it	ge
 8010e32:	463b      	movge	r3, r7
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	bfc2      	ittt	gt
 8010e38:	1af6      	subgt	r6, r6, r3
 8010e3a:	1aff      	subgt	r7, r7, r3
 8010e3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	dd17      	ble.n	8010e76 <_strtod_l+0x736>
 8010e46:	4659      	mov	r1, fp
 8010e48:	461a      	mov	r2, r3
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f7ff f9ae 	bl	80101ac <__pow5mult>
 8010e50:	4683      	mov	fp, r0
 8010e52:	2800      	cmp	r0, #0
 8010e54:	f43f aeb8 	beq.w	8010bc8 <_strtod_l+0x488>
 8010e58:	4601      	mov	r1, r0
 8010e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7ff f8fb 	bl	8010058 <__multiply>
 8010e62:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e64:	2800      	cmp	r0, #0
 8010e66:	f43f aeaf 	beq.w	8010bc8 <_strtod_l+0x488>
 8010e6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7fe ffdd 	bl	800fe2c <_Bfree>
 8010e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e74:	9316      	str	r3, [sp, #88]	; 0x58
 8010e76:	2e00      	cmp	r6, #0
 8010e78:	f300 808c 	bgt.w	8010f94 <_strtod_l+0x854>
 8010e7c:	9b08      	ldr	r3, [sp, #32]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	dd08      	ble.n	8010e94 <_strtod_l+0x754>
 8010e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e84:	9905      	ldr	r1, [sp, #20]
 8010e86:	4620      	mov	r0, r4
 8010e88:	f7ff f990 	bl	80101ac <__pow5mult>
 8010e8c:	9005      	str	r0, [sp, #20]
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	f43f ae9a 	beq.w	8010bc8 <_strtod_l+0x488>
 8010e94:	2f00      	cmp	r7, #0
 8010e96:	dd08      	ble.n	8010eaa <_strtod_l+0x76a>
 8010e98:	9905      	ldr	r1, [sp, #20]
 8010e9a:	463a      	mov	r2, r7
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f7ff f9df 	bl	8010260 <__lshift>
 8010ea2:	9005      	str	r0, [sp, #20]
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	f43f ae8f 	beq.w	8010bc8 <_strtod_l+0x488>
 8010eaa:	f1ba 0f00 	cmp.w	sl, #0
 8010eae:	dd08      	ble.n	8010ec2 <_strtod_l+0x782>
 8010eb0:	4659      	mov	r1, fp
 8010eb2:	4652      	mov	r2, sl
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f7ff f9d3 	bl	8010260 <__lshift>
 8010eba:	4683      	mov	fp, r0
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	f43f ae83 	beq.w	8010bc8 <_strtod_l+0x488>
 8010ec2:	9a05      	ldr	r2, [sp, #20]
 8010ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f7ff fa52 	bl	8010370 <__mdiff>
 8010ecc:	4605      	mov	r5, r0
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	f43f ae7a 	beq.w	8010bc8 <_strtod_l+0x488>
 8010ed4:	68c3      	ldr	r3, [r0, #12]
 8010ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ed8:	2300      	movs	r3, #0
 8010eda:	60c3      	str	r3, [r0, #12]
 8010edc:	4659      	mov	r1, fp
 8010ede:	f7ff fa2b 	bl	8010338 <__mcmp>
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	da60      	bge.n	8010fa8 <_strtod_l+0x868>
 8010ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ee8:	ea53 0308 	orrs.w	r3, r3, r8
 8010eec:	f040 8084 	bne.w	8010ff8 <_strtod_l+0x8b8>
 8010ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d17f      	bne.n	8010ff8 <_strtod_l+0x8b8>
 8010ef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010efc:	0d1b      	lsrs	r3, r3, #20
 8010efe:	051b      	lsls	r3, r3, #20
 8010f00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010f04:	d978      	bls.n	8010ff8 <_strtod_l+0x8b8>
 8010f06:	696b      	ldr	r3, [r5, #20]
 8010f08:	b913      	cbnz	r3, 8010f10 <_strtod_l+0x7d0>
 8010f0a:	692b      	ldr	r3, [r5, #16]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	dd73      	ble.n	8010ff8 <_strtod_l+0x8b8>
 8010f10:	4629      	mov	r1, r5
 8010f12:	2201      	movs	r2, #1
 8010f14:	4620      	mov	r0, r4
 8010f16:	f7ff f9a3 	bl	8010260 <__lshift>
 8010f1a:	4659      	mov	r1, fp
 8010f1c:	4605      	mov	r5, r0
 8010f1e:	f7ff fa0b 	bl	8010338 <__mcmp>
 8010f22:	2800      	cmp	r0, #0
 8010f24:	dd68      	ble.n	8010ff8 <_strtod_l+0x8b8>
 8010f26:	9904      	ldr	r1, [sp, #16]
 8010f28:	4a54      	ldr	r2, [pc, #336]	; (801107c <_strtod_l+0x93c>)
 8010f2a:	464b      	mov	r3, r9
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	f000 8084 	beq.w	801103a <_strtod_l+0x8fa>
 8010f32:	ea02 0109 	and.w	r1, r2, r9
 8010f36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f3a:	dc7e      	bgt.n	801103a <_strtod_l+0x8fa>
 8010f3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f40:	f77f aeb3 	ble.w	8010caa <_strtod_l+0x56a>
 8010f44:	4b4e      	ldr	r3, [pc, #312]	; (8011080 <_strtod_l+0x940>)
 8010f46:	4640      	mov	r0, r8
 8010f48:	4649      	mov	r1, r9
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f7ef fb74 	bl	8000638 <__aeabi_dmul>
 8010f50:	4b4a      	ldr	r3, [pc, #296]	; (801107c <_strtod_l+0x93c>)
 8010f52:	400b      	ands	r3, r1
 8010f54:	4680      	mov	r8, r0
 8010f56:	4689      	mov	r9, r1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f47f ae3f 	bne.w	8010bdc <_strtod_l+0x49c>
 8010f5e:	2322      	movs	r3, #34	; 0x22
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	e63b      	b.n	8010bdc <_strtod_l+0x49c>
 8010f64:	f04f 32ff 	mov.w	r2, #4294967295
 8010f68:	fa02 f303 	lsl.w	r3, r2, r3
 8010f6c:	ea03 0808 	and.w	r8, r3, r8
 8010f70:	e6e8      	b.n	8010d44 <_strtod_l+0x604>
 8010f72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010f76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010f7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010f7e:	36e2      	adds	r6, #226	; 0xe2
 8010f80:	fa01 f306 	lsl.w	r3, r1, r6
 8010f84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010f88:	e748      	b.n	8010e1c <_strtod_l+0x6dc>
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010f92:	e743      	b.n	8010e1c <_strtod_l+0x6dc>
 8010f94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f96:	4632      	mov	r2, r6
 8010f98:	4620      	mov	r0, r4
 8010f9a:	f7ff f961 	bl	8010260 <__lshift>
 8010f9e:	9016      	str	r0, [sp, #88]	; 0x58
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	f47f af6b 	bne.w	8010e7c <_strtod_l+0x73c>
 8010fa6:	e60f      	b.n	8010bc8 <_strtod_l+0x488>
 8010fa8:	46ca      	mov	sl, r9
 8010faa:	d171      	bne.n	8011090 <_strtod_l+0x950>
 8010fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fb2:	b352      	cbz	r2, 801100a <_strtod_l+0x8ca>
 8010fb4:	4a33      	ldr	r2, [pc, #204]	; (8011084 <_strtod_l+0x944>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d12a      	bne.n	8011010 <_strtod_l+0x8d0>
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	4641      	mov	r1, r8
 8010fbe:	b1fb      	cbz	r3, 8011000 <_strtod_l+0x8c0>
 8010fc0:	4b2e      	ldr	r3, [pc, #184]	; (801107c <_strtod_l+0x93c>)
 8010fc2:	ea09 0303 	and.w	r3, r9, r3
 8010fc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010fca:	f04f 32ff 	mov.w	r2, #4294967295
 8010fce:	d81a      	bhi.n	8011006 <_strtod_l+0x8c6>
 8010fd0:	0d1b      	lsrs	r3, r3, #20
 8010fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fda:	4299      	cmp	r1, r3
 8010fdc:	d118      	bne.n	8011010 <_strtod_l+0x8d0>
 8010fde:	4b2a      	ldr	r3, [pc, #168]	; (8011088 <_strtod_l+0x948>)
 8010fe0:	459a      	cmp	sl, r3
 8010fe2:	d102      	bne.n	8010fea <_strtod_l+0x8aa>
 8010fe4:	3101      	adds	r1, #1
 8010fe6:	f43f adef 	beq.w	8010bc8 <_strtod_l+0x488>
 8010fea:	4b24      	ldr	r3, [pc, #144]	; (801107c <_strtod_l+0x93c>)
 8010fec:	ea0a 0303 	and.w	r3, sl, r3
 8010ff0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010ff4:	f04f 0800 	mov.w	r8, #0
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1a2      	bne.n	8010f44 <_strtod_l+0x804>
 8010ffe:	e5ed      	b.n	8010bdc <_strtod_l+0x49c>
 8011000:	f04f 33ff 	mov.w	r3, #4294967295
 8011004:	e7e9      	b.n	8010fda <_strtod_l+0x89a>
 8011006:	4613      	mov	r3, r2
 8011008:	e7e7      	b.n	8010fda <_strtod_l+0x89a>
 801100a:	ea53 0308 	orrs.w	r3, r3, r8
 801100e:	d08a      	beq.n	8010f26 <_strtod_l+0x7e6>
 8011010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011012:	b1e3      	cbz	r3, 801104e <_strtod_l+0x90e>
 8011014:	ea13 0f0a 	tst.w	r3, sl
 8011018:	d0ee      	beq.n	8010ff8 <_strtod_l+0x8b8>
 801101a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801101c:	9a04      	ldr	r2, [sp, #16]
 801101e:	4640      	mov	r0, r8
 8011020:	4649      	mov	r1, r9
 8011022:	b1c3      	cbz	r3, 8011056 <_strtod_l+0x916>
 8011024:	f7ff fb6f 	bl	8010706 <sulp>
 8011028:	4602      	mov	r2, r0
 801102a:	460b      	mov	r3, r1
 801102c:	ec51 0b18 	vmov	r0, r1, d8
 8011030:	f7ef f94c 	bl	80002cc <__adddf3>
 8011034:	4680      	mov	r8, r0
 8011036:	4689      	mov	r9, r1
 8011038:	e7de      	b.n	8010ff8 <_strtod_l+0x8b8>
 801103a:	4013      	ands	r3, r2
 801103c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011040:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011044:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011048:	f04f 38ff 	mov.w	r8, #4294967295
 801104c:	e7d4      	b.n	8010ff8 <_strtod_l+0x8b8>
 801104e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011050:	ea13 0f08 	tst.w	r3, r8
 8011054:	e7e0      	b.n	8011018 <_strtod_l+0x8d8>
 8011056:	f7ff fb56 	bl	8010706 <sulp>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	ec51 0b18 	vmov	r0, r1, d8
 8011062:	f7ef f931 	bl	80002c8 <__aeabi_dsub>
 8011066:	2200      	movs	r2, #0
 8011068:	2300      	movs	r3, #0
 801106a:	4680      	mov	r8, r0
 801106c:	4689      	mov	r9, r1
 801106e:	f7ef fd4b 	bl	8000b08 <__aeabi_dcmpeq>
 8011072:	2800      	cmp	r0, #0
 8011074:	d0c0      	beq.n	8010ff8 <_strtod_l+0x8b8>
 8011076:	e618      	b.n	8010caa <_strtod_l+0x56a>
 8011078:	fffffc02 	.word	0xfffffc02
 801107c:	7ff00000 	.word	0x7ff00000
 8011080:	39500000 	.word	0x39500000
 8011084:	000fffff 	.word	0x000fffff
 8011088:	7fefffff 	.word	0x7fefffff
 801108c:	08014288 	.word	0x08014288
 8011090:	4659      	mov	r1, fp
 8011092:	4628      	mov	r0, r5
 8011094:	f7ff fac0 	bl	8010618 <__ratio>
 8011098:	ec57 6b10 	vmov	r6, r7, d0
 801109c:	ee10 0a10 	vmov	r0, s0
 80110a0:	2200      	movs	r2, #0
 80110a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110a6:	4639      	mov	r1, r7
 80110a8:	f7ef fd42 	bl	8000b30 <__aeabi_dcmple>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d071      	beq.n	8011194 <_strtod_l+0xa54>
 80110b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d17c      	bne.n	80111b0 <_strtod_l+0xa70>
 80110b6:	f1b8 0f00 	cmp.w	r8, #0
 80110ba:	d15a      	bne.n	8011172 <_strtod_l+0xa32>
 80110bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d15d      	bne.n	8011180 <_strtod_l+0xa40>
 80110c4:	4b90      	ldr	r3, [pc, #576]	; (8011308 <_strtod_l+0xbc8>)
 80110c6:	2200      	movs	r2, #0
 80110c8:	4630      	mov	r0, r6
 80110ca:	4639      	mov	r1, r7
 80110cc:	f7ef fd26 	bl	8000b1c <__aeabi_dcmplt>
 80110d0:	2800      	cmp	r0, #0
 80110d2:	d15c      	bne.n	801118e <_strtod_l+0xa4e>
 80110d4:	4630      	mov	r0, r6
 80110d6:	4639      	mov	r1, r7
 80110d8:	4b8c      	ldr	r3, [pc, #560]	; (801130c <_strtod_l+0xbcc>)
 80110da:	2200      	movs	r2, #0
 80110dc:	f7ef faac 	bl	8000638 <__aeabi_dmul>
 80110e0:	4606      	mov	r6, r0
 80110e2:	460f      	mov	r7, r1
 80110e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80110e8:	9606      	str	r6, [sp, #24]
 80110ea:	9307      	str	r3, [sp, #28]
 80110ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80110f4:	4b86      	ldr	r3, [pc, #536]	; (8011310 <_strtod_l+0xbd0>)
 80110f6:	ea0a 0303 	and.w	r3, sl, r3
 80110fa:	930d      	str	r3, [sp, #52]	; 0x34
 80110fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110fe:	4b85      	ldr	r3, [pc, #532]	; (8011314 <_strtod_l+0xbd4>)
 8011100:	429a      	cmp	r2, r3
 8011102:	f040 8090 	bne.w	8011226 <_strtod_l+0xae6>
 8011106:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801110a:	ec49 8b10 	vmov	d0, r8, r9
 801110e:	f7ff f9b9 	bl	8010484 <__ulp>
 8011112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011116:	ec51 0b10 	vmov	r0, r1, d0
 801111a:	f7ef fa8d 	bl	8000638 <__aeabi_dmul>
 801111e:	4642      	mov	r2, r8
 8011120:	464b      	mov	r3, r9
 8011122:	f7ef f8d3 	bl	80002cc <__adddf3>
 8011126:	460b      	mov	r3, r1
 8011128:	4979      	ldr	r1, [pc, #484]	; (8011310 <_strtod_l+0xbd0>)
 801112a:	4a7b      	ldr	r2, [pc, #492]	; (8011318 <_strtod_l+0xbd8>)
 801112c:	4019      	ands	r1, r3
 801112e:	4291      	cmp	r1, r2
 8011130:	4680      	mov	r8, r0
 8011132:	d944      	bls.n	80111be <_strtod_l+0xa7e>
 8011134:	ee18 2a90 	vmov	r2, s17
 8011138:	4b78      	ldr	r3, [pc, #480]	; (801131c <_strtod_l+0xbdc>)
 801113a:	429a      	cmp	r2, r3
 801113c:	d104      	bne.n	8011148 <_strtod_l+0xa08>
 801113e:	ee18 3a10 	vmov	r3, s16
 8011142:	3301      	adds	r3, #1
 8011144:	f43f ad40 	beq.w	8010bc8 <_strtod_l+0x488>
 8011148:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801131c <_strtod_l+0xbdc>
 801114c:	f04f 38ff 	mov.w	r8, #4294967295
 8011150:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011152:	4620      	mov	r0, r4
 8011154:	f7fe fe6a 	bl	800fe2c <_Bfree>
 8011158:	9905      	ldr	r1, [sp, #20]
 801115a:	4620      	mov	r0, r4
 801115c:	f7fe fe66 	bl	800fe2c <_Bfree>
 8011160:	4659      	mov	r1, fp
 8011162:	4620      	mov	r0, r4
 8011164:	f7fe fe62 	bl	800fe2c <_Bfree>
 8011168:	4629      	mov	r1, r5
 801116a:	4620      	mov	r0, r4
 801116c:	f7fe fe5e 	bl	800fe2c <_Bfree>
 8011170:	e609      	b.n	8010d86 <_strtod_l+0x646>
 8011172:	f1b8 0f01 	cmp.w	r8, #1
 8011176:	d103      	bne.n	8011180 <_strtod_l+0xa40>
 8011178:	f1b9 0f00 	cmp.w	r9, #0
 801117c:	f43f ad95 	beq.w	8010caa <_strtod_l+0x56a>
 8011180:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80112d8 <_strtod_l+0xb98>
 8011184:	4f60      	ldr	r7, [pc, #384]	; (8011308 <_strtod_l+0xbc8>)
 8011186:	ed8d 7b06 	vstr	d7, [sp, #24]
 801118a:	2600      	movs	r6, #0
 801118c:	e7ae      	b.n	80110ec <_strtod_l+0x9ac>
 801118e:	4f5f      	ldr	r7, [pc, #380]	; (801130c <_strtod_l+0xbcc>)
 8011190:	2600      	movs	r6, #0
 8011192:	e7a7      	b.n	80110e4 <_strtod_l+0x9a4>
 8011194:	4b5d      	ldr	r3, [pc, #372]	; (801130c <_strtod_l+0xbcc>)
 8011196:	4630      	mov	r0, r6
 8011198:	4639      	mov	r1, r7
 801119a:	2200      	movs	r2, #0
 801119c:	f7ef fa4c 	bl	8000638 <__aeabi_dmul>
 80111a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111a2:	4606      	mov	r6, r0
 80111a4:	460f      	mov	r7, r1
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d09c      	beq.n	80110e4 <_strtod_l+0x9a4>
 80111aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80111ae:	e79d      	b.n	80110ec <_strtod_l+0x9ac>
 80111b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80112e0 <_strtod_l+0xba0>
 80111b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111b8:	ec57 6b17 	vmov	r6, r7, d7
 80111bc:	e796      	b.n	80110ec <_strtod_l+0x9ac>
 80111be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80111c2:	9b04      	ldr	r3, [sp, #16]
 80111c4:	46ca      	mov	sl, r9
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d1c2      	bne.n	8011150 <_strtod_l+0xa10>
 80111ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111d0:	0d1b      	lsrs	r3, r3, #20
 80111d2:	051b      	lsls	r3, r3, #20
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d1bb      	bne.n	8011150 <_strtod_l+0xa10>
 80111d8:	4630      	mov	r0, r6
 80111da:	4639      	mov	r1, r7
 80111dc:	f7ef fd8c 	bl	8000cf8 <__aeabi_d2lz>
 80111e0:	f7ef f9fc 	bl	80005dc <__aeabi_l2d>
 80111e4:	4602      	mov	r2, r0
 80111e6:	460b      	mov	r3, r1
 80111e8:	4630      	mov	r0, r6
 80111ea:	4639      	mov	r1, r7
 80111ec:	f7ef f86c 	bl	80002c8 <__aeabi_dsub>
 80111f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111f6:	ea43 0308 	orr.w	r3, r3, r8
 80111fa:	4313      	orrs	r3, r2
 80111fc:	4606      	mov	r6, r0
 80111fe:	460f      	mov	r7, r1
 8011200:	d054      	beq.n	80112ac <_strtod_l+0xb6c>
 8011202:	a339      	add	r3, pc, #228	; (adr r3, 80112e8 <_strtod_l+0xba8>)
 8011204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011208:	f7ef fc88 	bl	8000b1c <__aeabi_dcmplt>
 801120c:	2800      	cmp	r0, #0
 801120e:	f47f ace5 	bne.w	8010bdc <_strtod_l+0x49c>
 8011212:	a337      	add	r3, pc, #220	; (adr r3, 80112f0 <_strtod_l+0xbb0>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	4630      	mov	r0, r6
 801121a:	4639      	mov	r1, r7
 801121c:	f7ef fc9c 	bl	8000b58 <__aeabi_dcmpgt>
 8011220:	2800      	cmp	r0, #0
 8011222:	d095      	beq.n	8011150 <_strtod_l+0xa10>
 8011224:	e4da      	b.n	8010bdc <_strtod_l+0x49c>
 8011226:	9b04      	ldr	r3, [sp, #16]
 8011228:	b333      	cbz	r3, 8011278 <_strtod_l+0xb38>
 801122a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801122c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011230:	d822      	bhi.n	8011278 <_strtod_l+0xb38>
 8011232:	a331      	add	r3, pc, #196	; (adr r3, 80112f8 <_strtod_l+0xbb8>)
 8011234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011238:	4630      	mov	r0, r6
 801123a:	4639      	mov	r1, r7
 801123c:	f7ef fc78 	bl	8000b30 <__aeabi_dcmple>
 8011240:	b1a0      	cbz	r0, 801126c <_strtod_l+0xb2c>
 8011242:	4639      	mov	r1, r7
 8011244:	4630      	mov	r0, r6
 8011246:	f7ef fccf 	bl	8000be8 <__aeabi_d2uiz>
 801124a:	2801      	cmp	r0, #1
 801124c:	bf38      	it	cc
 801124e:	2001      	movcc	r0, #1
 8011250:	f7ef f978 	bl	8000544 <__aeabi_ui2d>
 8011254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011256:	4606      	mov	r6, r0
 8011258:	460f      	mov	r7, r1
 801125a:	bb23      	cbnz	r3, 80112a6 <_strtod_l+0xb66>
 801125c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011260:	9010      	str	r0, [sp, #64]	; 0x40
 8011262:	9311      	str	r3, [sp, #68]	; 0x44
 8011264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801126c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801126e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011274:	1a9b      	subs	r3, r3, r2
 8011276:	930f      	str	r3, [sp, #60]	; 0x3c
 8011278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801127c:	eeb0 0a48 	vmov.f32	s0, s16
 8011280:	eef0 0a68 	vmov.f32	s1, s17
 8011284:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011288:	f7ff f8fc 	bl	8010484 <__ulp>
 801128c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011290:	ec53 2b10 	vmov	r2, r3, d0
 8011294:	f7ef f9d0 	bl	8000638 <__aeabi_dmul>
 8011298:	ec53 2b18 	vmov	r2, r3, d8
 801129c:	f7ef f816 	bl	80002cc <__adddf3>
 80112a0:	4680      	mov	r8, r0
 80112a2:	4689      	mov	r9, r1
 80112a4:	e78d      	b.n	80111c2 <_strtod_l+0xa82>
 80112a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80112aa:	e7db      	b.n	8011264 <_strtod_l+0xb24>
 80112ac:	a314      	add	r3, pc, #80	; (adr r3, 8011300 <_strtod_l+0xbc0>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ef fc33 	bl	8000b1c <__aeabi_dcmplt>
 80112b6:	e7b3      	b.n	8011220 <_strtod_l+0xae0>
 80112b8:	2300      	movs	r3, #0
 80112ba:	930a      	str	r3, [sp, #40]	; 0x28
 80112bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80112be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112c0:	6013      	str	r3, [r2, #0]
 80112c2:	f7ff ba7c 	b.w	80107be <_strtod_l+0x7e>
 80112c6:	2a65      	cmp	r2, #101	; 0x65
 80112c8:	f43f ab75 	beq.w	80109b6 <_strtod_l+0x276>
 80112cc:	2a45      	cmp	r2, #69	; 0x45
 80112ce:	f43f ab72 	beq.w	80109b6 <_strtod_l+0x276>
 80112d2:	2301      	movs	r3, #1
 80112d4:	f7ff bbaa 	b.w	8010a2c <_strtod_l+0x2ec>
 80112d8:	00000000 	.word	0x00000000
 80112dc:	bff00000 	.word	0xbff00000
 80112e0:	00000000 	.word	0x00000000
 80112e4:	3ff00000 	.word	0x3ff00000
 80112e8:	94a03595 	.word	0x94a03595
 80112ec:	3fdfffff 	.word	0x3fdfffff
 80112f0:	35afe535 	.word	0x35afe535
 80112f4:	3fe00000 	.word	0x3fe00000
 80112f8:	ffc00000 	.word	0xffc00000
 80112fc:	41dfffff 	.word	0x41dfffff
 8011300:	94a03595 	.word	0x94a03595
 8011304:	3fcfffff 	.word	0x3fcfffff
 8011308:	3ff00000 	.word	0x3ff00000
 801130c:	3fe00000 	.word	0x3fe00000
 8011310:	7ff00000 	.word	0x7ff00000
 8011314:	7fe00000 	.word	0x7fe00000
 8011318:	7c9fffff 	.word	0x7c9fffff
 801131c:	7fefffff 	.word	0x7fefffff

08011320 <_strtod_r>:
 8011320:	4b01      	ldr	r3, [pc, #4]	; (8011328 <_strtod_r+0x8>)
 8011322:	f7ff ba0d 	b.w	8010740 <_strtod_l>
 8011326:	bf00      	nop
 8011328:	20000070 	.word	0x20000070

0801132c <_strtol_l.constprop.0>:
 801132c:	2b01      	cmp	r3, #1
 801132e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011332:	d001      	beq.n	8011338 <_strtol_l.constprop.0+0xc>
 8011334:	2b24      	cmp	r3, #36	; 0x24
 8011336:	d906      	bls.n	8011346 <_strtol_l.constprop.0+0x1a>
 8011338:	f7fd fe2a 	bl	800ef90 <__errno>
 801133c:	2316      	movs	r3, #22
 801133e:	6003      	str	r3, [r0, #0]
 8011340:	2000      	movs	r0, #0
 8011342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011346:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801142c <_strtol_l.constprop.0+0x100>
 801134a:	460d      	mov	r5, r1
 801134c:	462e      	mov	r6, r5
 801134e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011352:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011356:	f017 0708 	ands.w	r7, r7, #8
 801135a:	d1f7      	bne.n	801134c <_strtol_l.constprop.0+0x20>
 801135c:	2c2d      	cmp	r4, #45	; 0x2d
 801135e:	d132      	bne.n	80113c6 <_strtol_l.constprop.0+0x9a>
 8011360:	782c      	ldrb	r4, [r5, #0]
 8011362:	2701      	movs	r7, #1
 8011364:	1cb5      	adds	r5, r6, #2
 8011366:	2b00      	cmp	r3, #0
 8011368:	d05b      	beq.n	8011422 <_strtol_l.constprop.0+0xf6>
 801136a:	2b10      	cmp	r3, #16
 801136c:	d109      	bne.n	8011382 <_strtol_l.constprop.0+0x56>
 801136e:	2c30      	cmp	r4, #48	; 0x30
 8011370:	d107      	bne.n	8011382 <_strtol_l.constprop.0+0x56>
 8011372:	782c      	ldrb	r4, [r5, #0]
 8011374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011378:	2c58      	cmp	r4, #88	; 0x58
 801137a:	d14d      	bne.n	8011418 <_strtol_l.constprop.0+0xec>
 801137c:	786c      	ldrb	r4, [r5, #1]
 801137e:	2310      	movs	r3, #16
 8011380:	3502      	adds	r5, #2
 8011382:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011386:	f108 38ff 	add.w	r8, r8, #4294967295
 801138a:	f04f 0e00 	mov.w	lr, #0
 801138e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011392:	4676      	mov	r6, lr
 8011394:	fb03 8a19 	mls	sl, r3, r9, r8
 8011398:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801139c:	f1bc 0f09 	cmp.w	ip, #9
 80113a0:	d816      	bhi.n	80113d0 <_strtol_l.constprop.0+0xa4>
 80113a2:	4664      	mov	r4, ip
 80113a4:	42a3      	cmp	r3, r4
 80113a6:	dd24      	ble.n	80113f2 <_strtol_l.constprop.0+0xc6>
 80113a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80113ac:	d008      	beq.n	80113c0 <_strtol_l.constprop.0+0x94>
 80113ae:	45b1      	cmp	r9, r6
 80113b0:	d31c      	bcc.n	80113ec <_strtol_l.constprop.0+0xc0>
 80113b2:	d101      	bne.n	80113b8 <_strtol_l.constprop.0+0x8c>
 80113b4:	45a2      	cmp	sl, r4
 80113b6:	db19      	blt.n	80113ec <_strtol_l.constprop.0+0xc0>
 80113b8:	fb06 4603 	mla	r6, r6, r3, r4
 80113bc:	f04f 0e01 	mov.w	lr, #1
 80113c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113c4:	e7e8      	b.n	8011398 <_strtol_l.constprop.0+0x6c>
 80113c6:	2c2b      	cmp	r4, #43	; 0x2b
 80113c8:	bf04      	itt	eq
 80113ca:	782c      	ldrbeq	r4, [r5, #0]
 80113cc:	1cb5      	addeq	r5, r6, #2
 80113ce:	e7ca      	b.n	8011366 <_strtol_l.constprop.0+0x3a>
 80113d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80113d4:	f1bc 0f19 	cmp.w	ip, #25
 80113d8:	d801      	bhi.n	80113de <_strtol_l.constprop.0+0xb2>
 80113da:	3c37      	subs	r4, #55	; 0x37
 80113dc:	e7e2      	b.n	80113a4 <_strtol_l.constprop.0+0x78>
 80113de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80113e2:	f1bc 0f19 	cmp.w	ip, #25
 80113e6:	d804      	bhi.n	80113f2 <_strtol_l.constprop.0+0xc6>
 80113e8:	3c57      	subs	r4, #87	; 0x57
 80113ea:	e7db      	b.n	80113a4 <_strtol_l.constprop.0+0x78>
 80113ec:	f04f 3eff 	mov.w	lr, #4294967295
 80113f0:	e7e6      	b.n	80113c0 <_strtol_l.constprop.0+0x94>
 80113f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80113f6:	d105      	bne.n	8011404 <_strtol_l.constprop.0+0xd8>
 80113f8:	2322      	movs	r3, #34	; 0x22
 80113fa:	6003      	str	r3, [r0, #0]
 80113fc:	4646      	mov	r6, r8
 80113fe:	b942      	cbnz	r2, 8011412 <_strtol_l.constprop.0+0xe6>
 8011400:	4630      	mov	r0, r6
 8011402:	e79e      	b.n	8011342 <_strtol_l.constprop.0+0x16>
 8011404:	b107      	cbz	r7, 8011408 <_strtol_l.constprop.0+0xdc>
 8011406:	4276      	negs	r6, r6
 8011408:	2a00      	cmp	r2, #0
 801140a:	d0f9      	beq.n	8011400 <_strtol_l.constprop.0+0xd4>
 801140c:	f1be 0f00 	cmp.w	lr, #0
 8011410:	d000      	beq.n	8011414 <_strtol_l.constprop.0+0xe8>
 8011412:	1e69      	subs	r1, r5, #1
 8011414:	6011      	str	r1, [r2, #0]
 8011416:	e7f3      	b.n	8011400 <_strtol_l.constprop.0+0xd4>
 8011418:	2430      	movs	r4, #48	; 0x30
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1b1      	bne.n	8011382 <_strtol_l.constprop.0+0x56>
 801141e:	2308      	movs	r3, #8
 8011420:	e7af      	b.n	8011382 <_strtol_l.constprop.0+0x56>
 8011422:	2c30      	cmp	r4, #48	; 0x30
 8011424:	d0a5      	beq.n	8011372 <_strtol_l.constprop.0+0x46>
 8011426:	230a      	movs	r3, #10
 8011428:	e7ab      	b.n	8011382 <_strtol_l.constprop.0+0x56>
 801142a:	bf00      	nop
 801142c:	080142b1 	.word	0x080142b1

08011430 <_strtol_r>:
 8011430:	f7ff bf7c 	b.w	801132c <_strtol_l.constprop.0>

08011434 <__ssputs_r>:
 8011434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011438:	688e      	ldr	r6, [r1, #8]
 801143a:	461f      	mov	r7, r3
 801143c:	42be      	cmp	r6, r7
 801143e:	680b      	ldr	r3, [r1, #0]
 8011440:	4682      	mov	sl, r0
 8011442:	460c      	mov	r4, r1
 8011444:	4690      	mov	r8, r2
 8011446:	d82c      	bhi.n	80114a2 <__ssputs_r+0x6e>
 8011448:	898a      	ldrh	r2, [r1, #12]
 801144a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801144e:	d026      	beq.n	801149e <__ssputs_r+0x6a>
 8011450:	6965      	ldr	r5, [r4, #20]
 8011452:	6909      	ldr	r1, [r1, #16]
 8011454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011458:	eba3 0901 	sub.w	r9, r3, r1
 801145c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011460:	1c7b      	adds	r3, r7, #1
 8011462:	444b      	add	r3, r9
 8011464:	106d      	asrs	r5, r5, #1
 8011466:	429d      	cmp	r5, r3
 8011468:	bf38      	it	cc
 801146a:	461d      	movcc	r5, r3
 801146c:	0553      	lsls	r3, r2, #21
 801146e:	d527      	bpl.n	80114c0 <__ssputs_r+0x8c>
 8011470:	4629      	mov	r1, r5
 8011472:	f7fc fc91 	bl	800dd98 <_malloc_r>
 8011476:	4606      	mov	r6, r0
 8011478:	b360      	cbz	r0, 80114d4 <__ssputs_r+0xa0>
 801147a:	6921      	ldr	r1, [r4, #16]
 801147c:	464a      	mov	r2, r9
 801147e:	f7fd fdb3 	bl	800efe8 <memcpy>
 8011482:	89a3      	ldrh	r3, [r4, #12]
 8011484:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148c:	81a3      	strh	r3, [r4, #12]
 801148e:	6126      	str	r6, [r4, #16]
 8011490:	6165      	str	r5, [r4, #20]
 8011492:	444e      	add	r6, r9
 8011494:	eba5 0509 	sub.w	r5, r5, r9
 8011498:	6026      	str	r6, [r4, #0]
 801149a:	60a5      	str	r5, [r4, #8]
 801149c:	463e      	mov	r6, r7
 801149e:	42be      	cmp	r6, r7
 80114a0:	d900      	bls.n	80114a4 <__ssputs_r+0x70>
 80114a2:	463e      	mov	r6, r7
 80114a4:	6820      	ldr	r0, [r4, #0]
 80114a6:	4632      	mov	r2, r6
 80114a8:	4641      	mov	r1, r8
 80114aa:	f000 fd5c 	bl	8011f66 <memmove>
 80114ae:	68a3      	ldr	r3, [r4, #8]
 80114b0:	1b9b      	subs	r3, r3, r6
 80114b2:	60a3      	str	r3, [r4, #8]
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	4433      	add	r3, r6
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	2000      	movs	r0, #0
 80114bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c0:	462a      	mov	r2, r5
 80114c2:	f001 f90c 	bl	80126de <_realloc_r>
 80114c6:	4606      	mov	r6, r0
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d1e0      	bne.n	801148e <__ssputs_r+0x5a>
 80114cc:	6921      	ldr	r1, [r4, #16]
 80114ce:	4650      	mov	r0, sl
 80114d0:	f7fe fc18 	bl	800fd04 <_free_r>
 80114d4:	230c      	movs	r3, #12
 80114d6:	f8ca 3000 	str.w	r3, [sl]
 80114da:	89a3      	ldrh	r3, [r4, #12]
 80114dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114e0:	81a3      	strh	r3, [r4, #12]
 80114e2:	f04f 30ff 	mov.w	r0, #4294967295
 80114e6:	e7e9      	b.n	80114bc <__ssputs_r+0x88>

080114e8 <_svfiprintf_r>:
 80114e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ec:	4698      	mov	r8, r3
 80114ee:	898b      	ldrh	r3, [r1, #12]
 80114f0:	061b      	lsls	r3, r3, #24
 80114f2:	b09d      	sub	sp, #116	; 0x74
 80114f4:	4607      	mov	r7, r0
 80114f6:	460d      	mov	r5, r1
 80114f8:	4614      	mov	r4, r2
 80114fa:	d50e      	bpl.n	801151a <_svfiprintf_r+0x32>
 80114fc:	690b      	ldr	r3, [r1, #16]
 80114fe:	b963      	cbnz	r3, 801151a <_svfiprintf_r+0x32>
 8011500:	2140      	movs	r1, #64	; 0x40
 8011502:	f7fc fc49 	bl	800dd98 <_malloc_r>
 8011506:	6028      	str	r0, [r5, #0]
 8011508:	6128      	str	r0, [r5, #16]
 801150a:	b920      	cbnz	r0, 8011516 <_svfiprintf_r+0x2e>
 801150c:	230c      	movs	r3, #12
 801150e:	603b      	str	r3, [r7, #0]
 8011510:	f04f 30ff 	mov.w	r0, #4294967295
 8011514:	e0d0      	b.n	80116b8 <_svfiprintf_r+0x1d0>
 8011516:	2340      	movs	r3, #64	; 0x40
 8011518:	616b      	str	r3, [r5, #20]
 801151a:	2300      	movs	r3, #0
 801151c:	9309      	str	r3, [sp, #36]	; 0x24
 801151e:	2320      	movs	r3, #32
 8011520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011524:	f8cd 800c 	str.w	r8, [sp, #12]
 8011528:	2330      	movs	r3, #48	; 0x30
 801152a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116d0 <_svfiprintf_r+0x1e8>
 801152e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011532:	f04f 0901 	mov.w	r9, #1
 8011536:	4623      	mov	r3, r4
 8011538:	469a      	mov	sl, r3
 801153a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801153e:	b10a      	cbz	r2, 8011544 <_svfiprintf_r+0x5c>
 8011540:	2a25      	cmp	r2, #37	; 0x25
 8011542:	d1f9      	bne.n	8011538 <_svfiprintf_r+0x50>
 8011544:	ebba 0b04 	subs.w	fp, sl, r4
 8011548:	d00b      	beq.n	8011562 <_svfiprintf_r+0x7a>
 801154a:	465b      	mov	r3, fp
 801154c:	4622      	mov	r2, r4
 801154e:	4629      	mov	r1, r5
 8011550:	4638      	mov	r0, r7
 8011552:	f7ff ff6f 	bl	8011434 <__ssputs_r>
 8011556:	3001      	adds	r0, #1
 8011558:	f000 80a9 	beq.w	80116ae <_svfiprintf_r+0x1c6>
 801155c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801155e:	445a      	add	r2, fp
 8011560:	9209      	str	r2, [sp, #36]	; 0x24
 8011562:	f89a 3000 	ldrb.w	r3, [sl]
 8011566:	2b00      	cmp	r3, #0
 8011568:	f000 80a1 	beq.w	80116ae <_svfiprintf_r+0x1c6>
 801156c:	2300      	movs	r3, #0
 801156e:	f04f 32ff 	mov.w	r2, #4294967295
 8011572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011576:	f10a 0a01 	add.w	sl, sl, #1
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	9307      	str	r3, [sp, #28]
 801157e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011582:	931a      	str	r3, [sp, #104]	; 0x68
 8011584:	4654      	mov	r4, sl
 8011586:	2205      	movs	r2, #5
 8011588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801158c:	4850      	ldr	r0, [pc, #320]	; (80116d0 <_svfiprintf_r+0x1e8>)
 801158e:	f7ee fe3f 	bl	8000210 <memchr>
 8011592:	9a04      	ldr	r2, [sp, #16]
 8011594:	b9d8      	cbnz	r0, 80115ce <_svfiprintf_r+0xe6>
 8011596:	06d0      	lsls	r0, r2, #27
 8011598:	bf44      	itt	mi
 801159a:	2320      	movmi	r3, #32
 801159c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115a0:	0711      	lsls	r1, r2, #28
 80115a2:	bf44      	itt	mi
 80115a4:	232b      	movmi	r3, #43	; 0x2b
 80115a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115aa:	f89a 3000 	ldrb.w	r3, [sl]
 80115ae:	2b2a      	cmp	r3, #42	; 0x2a
 80115b0:	d015      	beq.n	80115de <_svfiprintf_r+0xf6>
 80115b2:	9a07      	ldr	r2, [sp, #28]
 80115b4:	4654      	mov	r4, sl
 80115b6:	2000      	movs	r0, #0
 80115b8:	f04f 0c0a 	mov.w	ip, #10
 80115bc:	4621      	mov	r1, r4
 80115be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115c2:	3b30      	subs	r3, #48	; 0x30
 80115c4:	2b09      	cmp	r3, #9
 80115c6:	d94d      	bls.n	8011664 <_svfiprintf_r+0x17c>
 80115c8:	b1b0      	cbz	r0, 80115f8 <_svfiprintf_r+0x110>
 80115ca:	9207      	str	r2, [sp, #28]
 80115cc:	e014      	b.n	80115f8 <_svfiprintf_r+0x110>
 80115ce:	eba0 0308 	sub.w	r3, r0, r8
 80115d2:	fa09 f303 	lsl.w	r3, r9, r3
 80115d6:	4313      	orrs	r3, r2
 80115d8:	9304      	str	r3, [sp, #16]
 80115da:	46a2      	mov	sl, r4
 80115dc:	e7d2      	b.n	8011584 <_svfiprintf_r+0x9c>
 80115de:	9b03      	ldr	r3, [sp, #12]
 80115e0:	1d19      	adds	r1, r3, #4
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	9103      	str	r1, [sp, #12]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	bfbb      	ittet	lt
 80115ea:	425b      	neglt	r3, r3
 80115ec:	f042 0202 	orrlt.w	r2, r2, #2
 80115f0:	9307      	strge	r3, [sp, #28]
 80115f2:	9307      	strlt	r3, [sp, #28]
 80115f4:	bfb8      	it	lt
 80115f6:	9204      	strlt	r2, [sp, #16]
 80115f8:	7823      	ldrb	r3, [r4, #0]
 80115fa:	2b2e      	cmp	r3, #46	; 0x2e
 80115fc:	d10c      	bne.n	8011618 <_svfiprintf_r+0x130>
 80115fe:	7863      	ldrb	r3, [r4, #1]
 8011600:	2b2a      	cmp	r3, #42	; 0x2a
 8011602:	d134      	bne.n	801166e <_svfiprintf_r+0x186>
 8011604:	9b03      	ldr	r3, [sp, #12]
 8011606:	1d1a      	adds	r2, r3, #4
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	9203      	str	r2, [sp, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	bfb8      	it	lt
 8011610:	f04f 33ff 	movlt.w	r3, #4294967295
 8011614:	3402      	adds	r4, #2
 8011616:	9305      	str	r3, [sp, #20]
 8011618:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80116e0 <_svfiprintf_r+0x1f8>
 801161c:	7821      	ldrb	r1, [r4, #0]
 801161e:	2203      	movs	r2, #3
 8011620:	4650      	mov	r0, sl
 8011622:	f7ee fdf5 	bl	8000210 <memchr>
 8011626:	b138      	cbz	r0, 8011638 <_svfiprintf_r+0x150>
 8011628:	9b04      	ldr	r3, [sp, #16]
 801162a:	eba0 000a 	sub.w	r0, r0, sl
 801162e:	2240      	movs	r2, #64	; 0x40
 8011630:	4082      	lsls	r2, r0
 8011632:	4313      	orrs	r3, r2
 8011634:	3401      	adds	r4, #1
 8011636:	9304      	str	r3, [sp, #16]
 8011638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801163c:	4825      	ldr	r0, [pc, #148]	; (80116d4 <_svfiprintf_r+0x1ec>)
 801163e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011642:	2206      	movs	r2, #6
 8011644:	f7ee fde4 	bl	8000210 <memchr>
 8011648:	2800      	cmp	r0, #0
 801164a:	d038      	beq.n	80116be <_svfiprintf_r+0x1d6>
 801164c:	4b22      	ldr	r3, [pc, #136]	; (80116d8 <_svfiprintf_r+0x1f0>)
 801164e:	bb1b      	cbnz	r3, 8011698 <_svfiprintf_r+0x1b0>
 8011650:	9b03      	ldr	r3, [sp, #12]
 8011652:	3307      	adds	r3, #7
 8011654:	f023 0307 	bic.w	r3, r3, #7
 8011658:	3308      	adds	r3, #8
 801165a:	9303      	str	r3, [sp, #12]
 801165c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801165e:	4433      	add	r3, r6
 8011660:	9309      	str	r3, [sp, #36]	; 0x24
 8011662:	e768      	b.n	8011536 <_svfiprintf_r+0x4e>
 8011664:	fb0c 3202 	mla	r2, ip, r2, r3
 8011668:	460c      	mov	r4, r1
 801166a:	2001      	movs	r0, #1
 801166c:	e7a6      	b.n	80115bc <_svfiprintf_r+0xd4>
 801166e:	2300      	movs	r3, #0
 8011670:	3401      	adds	r4, #1
 8011672:	9305      	str	r3, [sp, #20]
 8011674:	4619      	mov	r1, r3
 8011676:	f04f 0c0a 	mov.w	ip, #10
 801167a:	4620      	mov	r0, r4
 801167c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011680:	3a30      	subs	r2, #48	; 0x30
 8011682:	2a09      	cmp	r2, #9
 8011684:	d903      	bls.n	801168e <_svfiprintf_r+0x1a6>
 8011686:	2b00      	cmp	r3, #0
 8011688:	d0c6      	beq.n	8011618 <_svfiprintf_r+0x130>
 801168a:	9105      	str	r1, [sp, #20]
 801168c:	e7c4      	b.n	8011618 <_svfiprintf_r+0x130>
 801168e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011692:	4604      	mov	r4, r0
 8011694:	2301      	movs	r3, #1
 8011696:	e7f0      	b.n	801167a <_svfiprintf_r+0x192>
 8011698:	ab03      	add	r3, sp, #12
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	462a      	mov	r2, r5
 801169e:	4b0f      	ldr	r3, [pc, #60]	; (80116dc <_svfiprintf_r+0x1f4>)
 80116a0:	a904      	add	r1, sp, #16
 80116a2:	4638      	mov	r0, r7
 80116a4:	f7fc fca4 	bl	800dff0 <_printf_float>
 80116a8:	1c42      	adds	r2, r0, #1
 80116aa:	4606      	mov	r6, r0
 80116ac:	d1d6      	bne.n	801165c <_svfiprintf_r+0x174>
 80116ae:	89ab      	ldrh	r3, [r5, #12]
 80116b0:	065b      	lsls	r3, r3, #25
 80116b2:	f53f af2d 	bmi.w	8011510 <_svfiprintf_r+0x28>
 80116b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116b8:	b01d      	add	sp, #116	; 0x74
 80116ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116be:	ab03      	add	r3, sp, #12
 80116c0:	9300      	str	r3, [sp, #0]
 80116c2:	462a      	mov	r2, r5
 80116c4:	4b05      	ldr	r3, [pc, #20]	; (80116dc <_svfiprintf_r+0x1f4>)
 80116c6:	a904      	add	r1, sp, #16
 80116c8:	4638      	mov	r0, r7
 80116ca:	f7fc ff35 	bl	800e538 <_printf_i>
 80116ce:	e7eb      	b.n	80116a8 <_svfiprintf_r+0x1c0>
 80116d0:	080143b1 	.word	0x080143b1
 80116d4:	080143bb 	.word	0x080143bb
 80116d8:	0800dff1 	.word	0x0800dff1
 80116dc:	08011435 	.word	0x08011435
 80116e0:	080143b7 	.word	0x080143b7

080116e4 <_sungetc_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	1c4b      	adds	r3, r1, #1
 80116e8:	4614      	mov	r4, r2
 80116ea:	d103      	bne.n	80116f4 <_sungetc_r+0x10>
 80116ec:	f04f 35ff 	mov.w	r5, #4294967295
 80116f0:	4628      	mov	r0, r5
 80116f2:	bd38      	pop	{r3, r4, r5, pc}
 80116f4:	8993      	ldrh	r3, [r2, #12]
 80116f6:	f023 0320 	bic.w	r3, r3, #32
 80116fa:	8193      	strh	r3, [r2, #12]
 80116fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116fe:	6852      	ldr	r2, [r2, #4]
 8011700:	b2cd      	uxtb	r5, r1
 8011702:	b18b      	cbz	r3, 8011728 <_sungetc_r+0x44>
 8011704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011706:	4293      	cmp	r3, r2
 8011708:	dd08      	ble.n	801171c <_sungetc_r+0x38>
 801170a:	6823      	ldr	r3, [r4, #0]
 801170c:	1e5a      	subs	r2, r3, #1
 801170e:	6022      	str	r2, [r4, #0]
 8011710:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011714:	6863      	ldr	r3, [r4, #4]
 8011716:	3301      	adds	r3, #1
 8011718:	6063      	str	r3, [r4, #4]
 801171a:	e7e9      	b.n	80116f0 <_sungetc_r+0xc>
 801171c:	4621      	mov	r1, r4
 801171e:	f000 fbe8 	bl	8011ef2 <__submore>
 8011722:	2800      	cmp	r0, #0
 8011724:	d0f1      	beq.n	801170a <_sungetc_r+0x26>
 8011726:	e7e1      	b.n	80116ec <_sungetc_r+0x8>
 8011728:	6921      	ldr	r1, [r4, #16]
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	b151      	cbz	r1, 8011744 <_sungetc_r+0x60>
 801172e:	4299      	cmp	r1, r3
 8011730:	d208      	bcs.n	8011744 <_sungetc_r+0x60>
 8011732:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011736:	42a9      	cmp	r1, r5
 8011738:	d104      	bne.n	8011744 <_sungetc_r+0x60>
 801173a:	3b01      	subs	r3, #1
 801173c:	3201      	adds	r2, #1
 801173e:	6023      	str	r3, [r4, #0]
 8011740:	6062      	str	r2, [r4, #4]
 8011742:	e7d5      	b.n	80116f0 <_sungetc_r+0xc>
 8011744:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801174c:	6363      	str	r3, [r4, #52]	; 0x34
 801174e:	2303      	movs	r3, #3
 8011750:	63a3      	str	r3, [r4, #56]	; 0x38
 8011752:	4623      	mov	r3, r4
 8011754:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011758:	6023      	str	r3, [r4, #0]
 801175a:	2301      	movs	r3, #1
 801175c:	e7dc      	b.n	8011718 <_sungetc_r+0x34>

0801175e <__ssrefill_r>:
 801175e:	b510      	push	{r4, lr}
 8011760:	460c      	mov	r4, r1
 8011762:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011764:	b169      	cbz	r1, 8011782 <__ssrefill_r+0x24>
 8011766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801176a:	4299      	cmp	r1, r3
 801176c:	d001      	beq.n	8011772 <__ssrefill_r+0x14>
 801176e:	f7fe fac9 	bl	800fd04 <_free_r>
 8011772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011774:	6063      	str	r3, [r4, #4]
 8011776:	2000      	movs	r0, #0
 8011778:	6360      	str	r0, [r4, #52]	; 0x34
 801177a:	b113      	cbz	r3, 8011782 <__ssrefill_r+0x24>
 801177c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801177e:	6023      	str	r3, [r4, #0]
 8011780:	bd10      	pop	{r4, pc}
 8011782:	6923      	ldr	r3, [r4, #16]
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	2300      	movs	r3, #0
 8011788:	6063      	str	r3, [r4, #4]
 801178a:	89a3      	ldrh	r3, [r4, #12]
 801178c:	f043 0320 	orr.w	r3, r3, #32
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	f04f 30ff 	mov.w	r0, #4294967295
 8011796:	e7f3      	b.n	8011780 <__ssrefill_r+0x22>

08011798 <__ssvfiscanf_r>:
 8011798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801179c:	460c      	mov	r4, r1
 801179e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80117a2:	2100      	movs	r1, #0
 80117a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80117a8:	49a6      	ldr	r1, [pc, #664]	; (8011a44 <__ssvfiscanf_r+0x2ac>)
 80117aa:	91a0      	str	r1, [sp, #640]	; 0x280
 80117ac:	f10d 0804 	add.w	r8, sp, #4
 80117b0:	49a5      	ldr	r1, [pc, #660]	; (8011a48 <__ssvfiscanf_r+0x2b0>)
 80117b2:	4fa6      	ldr	r7, [pc, #664]	; (8011a4c <__ssvfiscanf_r+0x2b4>)
 80117b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011a50 <__ssvfiscanf_r+0x2b8>
 80117b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80117bc:	4606      	mov	r6, r0
 80117be:	91a1      	str	r1, [sp, #644]	; 0x284
 80117c0:	9300      	str	r3, [sp, #0]
 80117c2:	7813      	ldrb	r3, [r2, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f000 815a 	beq.w	8011a7e <__ssvfiscanf_r+0x2e6>
 80117ca:	5cf9      	ldrb	r1, [r7, r3]
 80117cc:	f011 0108 	ands.w	r1, r1, #8
 80117d0:	f102 0501 	add.w	r5, r2, #1
 80117d4:	d019      	beq.n	801180a <__ssvfiscanf_r+0x72>
 80117d6:	6863      	ldr	r3, [r4, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	dd0f      	ble.n	80117fc <__ssvfiscanf_r+0x64>
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	781a      	ldrb	r2, [r3, #0]
 80117e0:	5cba      	ldrb	r2, [r7, r2]
 80117e2:	0712      	lsls	r2, r2, #28
 80117e4:	d401      	bmi.n	80117ea <__ssvfiscanf_r+0x52>
 80117e6:	462a      	mov	r2, r5
 80117e8:	e7eb      	b.n	80117c2 <__ssvfiscanf_r+0x2a>
 80117ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80117ec:	3201      	adds	r2, #1
 80117ee:	9245      	str	r2, [sp, #276]	; 0x114
 80117f0:	6862      	ldr	r2, [r4, #4]
 80117f2:	3301      	adds	r3, #1
 80117f4:	3a01      	subs	r2, #1
 80117f6:	6062      	str	r2, [r4, #4]
 80117f8:	6023      	str	r3, [r4, #0]
 80117fa:	e7ec      	b.n	80117d6 <__ssvfiscanf_r+0x3e>
 80117fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80117fe:	4621      	mov	r1, r4
 8011800:	4630      	mov	r0, r6
 8011802:	4798      	blx	r3
 8011804:	2800      	cmp	r0, #0
 8011806:	d0e9      	beq.n	80117dc <__ssvfiscanf_r+0x44>
 8011808:	e7ed      	b.n	80117e6 <__ssvfiscanf_r+0x4e>
 801180a:	2b25      	cmp	r3, #37	; 0x25
 801180c:	d012      	beq.n	8011834 <__ssvfiscanf_r+0x9c>
 801180e:	469a      	mov	sl, r3
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	f340 8091 	ble.w	801193a <__ssvfiscanf_r+0x1a2>
 8011818:	6822      	ldr	r2, [r4, #0]
 801181a:	7813      	ldrb	r3, [r2, #0]
 801181c:	4553      	cmp	r3, sl
 801181e:	f040 812e 	bne.w	8011a7e <__ssvfiscanf_r+0x2e6>
 8011822:	6863      	ldr	r3, [r4, #4]
 8011824:	3b01      	subs	r3, #1
 8011826:	6063      	str	r3, [r4, #4]
 8011828:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801182a:	3201      	adds	r2, #1
 801182c:	3301      	adds	r3, #1
 801182e:	6022      	str	r2, [r4, #0]
 8011830:	9345      	str	r3, [sp, #276]	; 0x114
 8011832:	e7d8      	b.n	80117e6 <__ssvfiscanf_r+0x4e>
 8011834:	9141      	str	r1, [sp, #260]	; 0x104
 8011836:	9143      	str	r1, [sp, #268]	; 0x10c
 8011838:	7853      	ldrb	r3, [r2, #1]
 801183a:	2b2a      	cmp	r3, #42	; 0x2a
 801183c:	bf02      	ittt	eq
 801183e:	2310      	moveq	r3, #16
 8011840:	1c95      	addeq	r5, r2, #2
 8011842:	9341      	streq	r3, [sp, #260]	; 0x104
 8011844:	220a      	movs	r2, #10
 8011846:	46aa      	mov	sl, r5
 8011848:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801184c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011850:	2b09      	cmp	r3, #9
 8011852:	d91c      	bls.n	801188e <__ssvfiscanf_r+0xf6>
 8011854:	487e      	ldr	r0, [pc, #504]	; (8011a50 <__ssvfiscanf_r+0x2b8>)
 8011856:	2203      	movs	r2, #3
 8011858:	f7ee fcda 	bl	8000210 <memchr>
 801185c:	b138      	cbz	r0, 801186e <__ssvfiscanf_r+0xd6>
 801185e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011860:	eba0 0009 	sub.w	r0, r0, r9
 8011864:	2301      	movs	r3, #1
 8011866:	4083      	lsls	r3, r0
 8011868:	4313      	orrs	r3, r2
 801186a:	9341      	str	r3, [sp, #260]	; 0x104
 801186c:	4655      	mov	r5, sl
 801186e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011872:	2b78      	cmp	r3, #120	; 0x78
 8011874:	d806      	bhi.n	8011884 <__ssvfiscanf_r+0xec>
 8011876:	2b57      	cmp	r3, #87	; 0x57
 8011878:	d810      	bhi.n	801189c <__ssvfiscanf_r+0x104>
 801187a:	2b25      	cmp	r3, #37	; 0x25
 801187c:	d0c7      	beq.n	801180e <__ssvfiscanf_r+0x76>
 801187e:	d857      	bhi.n	8011930 <__ssvfiscanf_r+0x198>
 8011880:	2b00      	cmp	r3, #0
 8011882:	d065      	beq.n	8011950 <__ssvfiscanf_r+0x1b8>
 8011884:	2303      	movs	r3, #3
 8011886:	9347      	str	r3, [sp, #284]	; 0x11c
 8011888:	230a      	movs	r3, #10
 801188a:	9342      	str	r3, [sp, #264]	; 0x108
 801188c:	e076      	b.n	801197c <__ssvfiscanf_r+0x1e4>
 801188e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011890:	fb02 1103 	mla	r1, r2, r3, r1
 8011894:	3930      	subs	r1, #48	; 0x30
 8011896:	9143      	str	r1, [sp, #268]	; 0x10c
 8011898:	4655      	mov	r5, sl
 801189a:	e7d4      	b.n	8011846 <__ssvfiscanf_r+0xae>
 801189c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80118a0:	2a20      	cmp	r2, #32
 80118a2:	d8ef      	bhi.n	8011884 <__ssvfiscanf_r+0xec>
 80118a4:	a101      	add	r1, pc, #4	; (adr r1, 80118ac <__ssvfiscanf_r+0x114>)
 80118a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80118aa:	bf00      	nop
 80118ac:	0801195f 	.word	0x0801195f
 80118b0:	08011885 	.word	0x08011885
 80118b4:	08011885 	.word	0x08011885
 80118b8:	080119bd 	.word	0x080119bd
 80118bc:	08011885 	.word	0x08011885
 80118c0:	08011885 	.word	0x08011885
 80118c4:	08011885 	.word	0x08011885
 80118c8:	08011885 	.word	0x08011885
 80118cc:	08011885 	.word	0x08011885
 80118d0:	08011885 	.word	0x08011885
 80118d4:	08011885 	.word	0x08011885
 80118d8:	080119d3 	.word	0x080119d3
 80118dc:	080119b9 	.word	0x080119b9
 80118e0:	08011937 	.word	0x08011937
 80118e4:	08011937 	.word	0x08011937
 80118e8:	08011937 	.word	0x08011937
 80118ec:	08011885 	.word	0x08011885
 80118f0:	08011975 	.word	0x08011975
 80118f4:	08011885 	.word	0x08011885
 80118f8:	08011885 	.word	0x08011885
 80118fc:	08011885 	.word	0x08011885
 8011900:	08011885 	.word	0x08011885
 8011904:	080119e3 	.word	0x080119e3
 8011908:	080119b1 	.word	0x080119b1
 801190c:	08011957 	.word	0x08011957
 8011910:	08011885 	.word	0x08011885
 8011914:	08011885 	.word	0x08011885
 8011918:	080119df 	.word	0x080119df
 801191c:	08011885 	.word	0x08011885
 8011920:	080119b9 	.word	0x080119b9
 8011924:	08011885 	.word	0x08011885
 8011928:	08011885 	.word	0x08011885
 801192c:	0801195f 	.word	0x0801195f
 8011930:	3b45      	subs	r3, #69	; 0x45
 8011932:	2b02      	cmp	r3, #2
 8011934:	d8a6      	bhi.n	8011884 <__ssvfiscanf_r+0xec>
 8011936:	2305      	movs	r3, #5
 8011938:	e01f      	b.n	801197a <__ssvfiscanf_r+0x1e2>
 801193a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801193c:	4621      	mov	r1, r4
 801193e:	4630      	mov	r0, r6
 8011940:	4798      	blx	r3
 8011942:	2800      	cmp	r0, #0
 8011944:	f43f af68 	beq.w	8011818 <__ssvfiscanf_r+0x80>
 8011948:	9844      	ldr	r0, [sp, #272]	; 0x110
 801194a:	2800      	cmp	r0, #0
 801194c:	f040 808d 	bne.w	8011a6a <__ssvfiscanf_r+0x2d2>
 8011950:	f04f 30ff 	mov.w	r0, #4294967295
 8011954:	e08f      	b.n	8011a76 <__ssvfiscanf_r+0x2de>
 8011956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011958:	f042 0220 	orr.w	r2, r2, #32
 801195c:	9241      	str	r2, [sp, #260]	; 0x104
 801195e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011964:	9241      	str	r2, [sp, #260]	; 0x104
 8011966:	2210      	movs	r2, #16
 8011968:	2b6f      	cmp	r3, #111	; 0x6f
 801196a:	9242      	str	r2, [sp, #264]	; 0x108
 801196c:	bf34      	ite	cc
 801196e:	2303      	movcc	r3, #3
 8011970:	2304      	movcs	r3, #4
 8011972:	e002      	b.n	801197a <__ssvfiscanf_r+0x1e2>
 8011974:	2300      	movs	r3, #0
 8011976:	9342      	str	r3, [sp, #264]	; 0x108
 8011978:	2303      	movs	r3, #3
 801197a:	9347      	str	r3, [sp, #284]	; 0x11c
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	dd3d      	ble.n	80119fe <__ssvfiscanf_r+0x266>
 8011982:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011984:	0659      	lsls	r1, r3, #25
 8011986:	d404      	bmi.n	8011992 <__ssvfiscanf_r+0x1fa>
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	781a      	ldrb	r2, [r3, #0]
 801198c:	5cba      	ldrb	r2, [r7, r2]
 801198e:	0712      	lsls	r2, r2, #28
 8011990:	d43c      	bmi.n	8011a0c <__ssvfiscanf_r+0x274>
 8011992:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011994:	2b02      	cmp	r3, #2
 8011996:	dc4b      	bgt.n	8011a30 <__ssvfiscanf_r+0x298>
 8011998:	466b      	mov	r3, sp
 801199a:	4622      	mov	r2, r4
 801199c:	a941      	add	r1, sp, #260	; 0x104
 801199e:	4630      	mov	r0, r6
 80119a0:	f000 f872 	bl	8011a88 <_scanf_chars>
 80119a4:	2801      	cmp	r0, #1
 80119a6:	d06a      	beq.n	8011a7e <__ssvfiscanf_r+0x2e6>
 80119a8:	2802      	cmp	r0, #2
 80119aa:	f47f af1c 	bne.w	80117e6 <__ssvfiscanf_r+0x4e>
 80119ae:	e7cb      	b.n	8011948 <__ssvfiscanf_r+0x1b0>
 80119b0:	2308      	movs	r3, #8
 80119b2:	9342      	str	r3, [sp, #264]	; 0x108
 80119b4:	2304      	movs	r3, #4
 80119b6:	e7e0      	b.n	801197a <__ssvfiscanf_r+0x1e2>
 80119b8:	220a      	movs	r2, #10
 80119ba:	e7d5      	b.n	8011968 <__ssvfiscanf_r+0x1d0>
 80119bc:	4629      	mov	r1, r5
 80119be:	4640      	mov	r0, r8
 80119c0:	f000 fa5e 	bl	8011e80 <__sccl>
 80119c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80119c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119ca:	9341      	str	r3, [sp, #260]	; 0x104
 80119cc:	4605      	mov	r5, r0
 80119ce:	2301      	movs	r3, #1
 80119d0:	e7d3      	b.n	801197a <__ssvfiscanf_r+0x1e2>
 80119d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80119d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d8:	9341      	str	r3, [sp, #260]	; 0x104
 80119da:	2300      	movs	r3, #0
 80119dc:	e7cd      	b.n	801197a <__ssvfiscanf_r+0x1e2>
 80119de:	2302      	movs	r3, #2
 80119e0:	e7cb      	b.n	801197a <__ssvfiscanf_r+0x1e2>
 80119e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80119e4:	06c3      	lsls	r3, r0, #27
 80119e6:	f53f aefe 	bmi.w	80117e6 <__ssvfiscanf_r+0x4e>
 80119ea:	9b00      	ldr	r3, [sp, #0]
 80119ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80119ee:	1d19      	adds	r1, r3, #4
 80119f0:	9100      	str	r1, [sp, #0]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	07c0      	lsls	r0, r0, #31
 80119f6:	bf4c      	ite	mi
 80119f8:	801a      	strhmi	r2, [r3, #0]
 80119fa:	601a      	strpl	r2, [r3, #0]
 80119fc:	e6f3      	b.n	80117e6 <__ssvfiscanf_r+0x4e>
 80119fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011a00:	4621      	mov	r1, r4
 8011a02:	4630      	mov	r0, r6
 8011a04:	4798      	blx	r3
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d0bb      	beq.n	8011982 <__ssvfiscanf_r+0x1ea>
 8011a0a:	e79d      	b.n	8011948 <__ssvfiscanf_r+0x1b0>
 8011a0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011a0e:	3201      	adds	r2, #1
 8011a10:	9245      	str	r2, [sp, #276]	; 0x114
 8011a12:	6862      	ldr	r2, [r4, #4]
 8011a14:	3a01      	subs	r2, #1
 8011a16:	2a00      	cmp	r2, #0
 8011a18:	6062      	str	r2, [r4, #4]
 8011a1a:	dd02      	ble.n	8011a22 <__ssvfiscanf_r+0x28a>
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	6023      	str	r3, [r4, #0]
 8011a20:	e7b2      	b.n	8011988 <__ssvfiscanf_r+0x1f0>
 8011a22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011a24:	4621      	mov	r1, r4
 8011a26:	4630      	mov	r0, r6
 8011a28:	4798      	blx	r3
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d0ac      	beq.n	8011988 <__ssvfiscanf_r+0x1f0>
 8011a2e:	e78b      	b.n	8011948 <__ssvfiscanf_r+0x1b0>
 8011a30:	2b04      	cmp	r3, #4
 8011a32:	dc0f      	bgt.n	8011a54 <__ssvfiscanf_r+0x2bc>
 8011a34:	466b      	mov	r3, sp
 8011a36:	4622      	mov	r2, r4
 8011a38:	a941      	add	r1, sp, #260	; 0x104
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	f000 f87e 	bl	8011b3c <_scanf_i>
 8011a40:	e7b0      	b.n	80119a4 <__ssvfiscanf_r+0x20c>
 8011a42:	bf00      	nop
 8011a44:	080116e5 	.word	0x080116e5
 8011a48:	0801175f 	.word	0x0801175f
 8011a4c:	080142b1 	.word	0x080142b1
 8011a50:	080143b7 	.word	0x080143b7
 8011a54:	4b0b      	ldr	r3, [pc, #44]	; (8011a84 <__ssvfiscanf_r+0x2ec>)
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f43f aec5 	beq.w	80117e6 <__ssvfiscanf_r+0x4e>
 8011a5c:	466b      	mov	r3, sp
 8011a5e:	4622      	mov	r2, r4
 8011a60:	a941      	add	r1, sp, #260	; 0x104
 8011a62:	4630      	mov	r0, r6
 8011a64:	f7fc fe8a 	bl	800e77c <_scanf_float>
 8011a68:	e79c      	b.n	80119a4 <__ssvfiscanf_r+0x20c>
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011a70:	bf18      	it	ne
 8011a72:	f04f 30ff 	movne.w	r0, #4294967295
 8011a76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011a80:	e7f9      	b.n	8011a76 <__ssvfiscanf_r+0x2de>
 8011a82:	bf00      	nop
 8011a84:	0800e77d 	.word	0x0800e77d

08011a88 <_scanf_chars>:
 8011a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a8c:	4615      	mov	r5, r2
 8011a8e:	688a      	ldr	r2, [r1, #8]
 8011a90:	4680      	mov	r8, r0
 8011a92:	460c      	mov	r4, r1
 8011a94:	b932      	cbnz	r2, 8011aa4 <_scanf_chars+0x1c>
 8011a96:	698a      	ldr	r2, [r1, #24]
 8011a98:	2a00      	cmp	r2, #0
 8011a9a:	bf0c      	ite	eq
 8011a9c:	2201      	moveq	r2, #1
 8011a9e:	f04f 32ff 	movne.w	r2, #4294967295
 8011aa2:	608a      	str	r2, [r1, #8]
 8011aa4:	6822      	ldr	r2, [r4, #0]
 8011aa6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011b38 <_scanf_chars+0xb0>
 8011aaa:	06d1      	lsls	r1, r2, #27
 8011aac:	bf5f      	itttt	pl
 8011aae:	681a      	ldrpl	r2, [r3, #0]
 8011ab0:	1d11      	addpl	r1, r2, #4
 8011ab2:	6019      	strpl	r1, [r3, #0]
 8011ab4:	6816      	ldrpl	r6, [r2, #0]
 8011ab6:	2700      	movs	r7, #0
 8011ab8:	69a0      	ldr	r0, [r4, #24]
 8011aba:	b188      	cbz	r0, 8011ae0 <_scanf_chars+0x58>
 8011abc:	2801      	cmp	r0, #1
 8011abe:	d107      	bne.n	8011ad0 <_scanf_chars+0x48>
 8011ac0:	682a      	ldr	r2, [r5, #0]
 8011ac2:	7811      	ldrb	r1, [r2, #0]
 8011ac4:	6962      	ldr	r2, [r4, #20]
 8011ac6:	5c52      	ldrb	r2, [r2, r1]
 8011ac8:	b952      	cbnz	r2, 8011ae0 <_scanf_chars+0x58>
 8011aca:	2f00      	cmp	r7, #0
 8011acc:	d031      	beq.n	8011b32 <_scanf_chars+0xaa>
 8011ace:	e022      	b.n	8011b16 <_scanf_chars+0x8e>
 8011ad0:	2802      	cmp	r0, #2
 8011ad2:	d120      	bne.n	8011b16 <_scanf_chars+0x8e>
 8011ad4:	682b      	ldr	r3, [r5, #0]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011adc:	071b      	lsls	r3, r3, #28
 8011ade:	d41a      	bmi.n	8011b16 <_scanf_chars+0x8e>
 8011ae0:	6823      	ldr	r3, [r4, #0]
 8011ae2:	06da      	lsls	r2, r3, #27
 8011ae4:	bf5e      	ittt	pl
 8011ae6:	682b      	ldrpl	r3, [r5, #0]
 8011ae8:	781b      	ldrbpl	r3, [r3, #0]
 8011aea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011aee:	682a      	ldr	r2, [r5, #0]
 8011af0:	686b      	ldr	r3, [r5, #4]
 8011af2:	3201      	adds	r2, #1
 8011af4:	602a      	str	r2, [r5, #0]
 8011af6:	68a2      	ldr	r2, [r4, #8]
 8011af8:	3b01      	subs	r3, #1
 8011afa:	3a01      	subs	r2, #1
 8011afc:	606b      	str	r3, [r5, #4]
 8011afe:	3701      	adds	r7, #1
 8011b00:	60a2      	str	r2, [r4, #8]
 8011b02:	b142      	cbz	r2, 8011b16 <_scanf_chars+0x8e>
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	dcd7      	bgt.n	8011ab8 <_scanf_chars+0x30>
 8011b08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	4640      	mov	r0, r8
 8011b10:	4798      	blx	r3
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d0d0      	beq.n	8011ab8 <_scanf_chars+0x30>
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	f013 0310 	ands.w	r3, r3, #16
 8011b1c:	d105      	bne.n	8011b2a <_scanf_chars+0xa2>
 8011b1e:	68e2      	ldr	r2, [r4, #12]
 8011b20:	3201      	adds	r2, #1
 8011b22:	60e2      	str	r2, [r4, #12]
 8011b24:	69a2      	ldr	r2, [r4, #24]
 8011b26:	b102      	cbz	r2, 8011b2a <_scanf_chars+0xa2>
 8011b28:	7033      	strb	r3, [r6, #0]
 8011b2a:	6923      	ldr	r3, [r4, #16]
 8011b2c:	443b      	add	r3, r7
 8011b2e:	6123      	str	r3, [r4, #16]
 8011b30:	2000      	movs	r0, #0
 8011b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b36:	bf00      	nop
 8011b38:	080142b1 	.word	0x080142b1

08011b3c <_scanf_i>:
 8011b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	4698      	mov	r8, r3
 8011b42:	4b74      	ldr	r3, [pc, #464]	; (8011d14 <_scanf_i+0x1d8>)
 8011b44:	460c      	mov	r4, r1
 8011b46:	4682      	mov	sl, r0
 8011b48:	4616      	mov	r6, r2
 8011b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b4e:	b087      	sub	sp, #28
 8011b50:	ab03      	add	r3, sp, #12
 8011b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011b56:	4b70      	ldr	r3, [pc, #448]	; (8011d18 <_scanf_i+0x1dc>)
 8011b58:	69a1      	ldr	r1, [r4, #24]
 8011b5a:	4a70      	ldr	r2, [pc, #448]	; (8011d1c <_scanf_i+0x1e0>)
 8011b5c:	2903      	cmp	r1, #3
 8011b5e:	bf18      	it	ne
 8011b60:	461a      	movne	r2, r3
 8011b62:	68a3      	ldr	r3, [r4, #8]
 8011b64:	9201      	str	r2, [sp, #4]
 8011b66:	1e5a      	subs	r2, r3, #1
 8011b68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011b6c:	bf88      	it	hi
 8011b6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011b72:	4627      	mov	r7, r4
 8011b74:	bf82      	ittt	hi
 8011b76:	eb03 0905 	addhi.w	r9, r3, r5
 8011b7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011b7e:	60a3      	strhi	r3, [r4, #8]
 8011b80:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011b84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011b88:	bf98      	it	ls
 8011b8a:	f04f 0900 	movls.w	r9, #0
 8011b8e:	6023      	str	r3, [r4, #0]
 8011b90:	463d      	mov	r5, r7
 8011b92:	f04f 0b00 	mov.w	fp, #0
 8011b96:	6831      	ldr	r1, [r6, #0]
 8011b98:	ab03      	add	r3, sp, #12
 8011b9a:	7809      	ldrb	r1, [r1, #0]
 8011b9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011ba0:	2202      	movs	r2, #2
 8011ba2:	f7ee fb35 	bl	8000210 <memchr>
 8011ba6:	b328      	cbz	r0, 8011bf4 <_scanf_i+0xb8>
 8011ba8:	f1bb 0f01 	cmp.w	fp, #1
 8011bac:	d159      	bne.n	8011c62 <_scanf_i+0x126>
 8011bae:	6862      	ldr	r2, [r4, #4]
 8011bb0:	b92a      	cbnz	r2, 8011bbe <_scanf_i+0x82>
 8011bb2:	6822      	ldr	r2, [r4, #0]
 8011bb4:	2308      	movs	r3, #8
 8011bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011bba:	6063      	str	r3, [r4, #4]
 8011bbc:	6022      	str	r2, [r4, #0]
 8011bbe:	6822      	ldr	r2, [r4, #0]
 8011bc0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011bc4:	6022      	str	r2, [r4, #0]
 8011bc6:	68a2      	ldr	r2, [r4, #8]
 8011bc8:	1e51      	subs	r1, r2, #1
 8011bca:	60a1      	str	r1, [r4, #8]
 8011bcc:	b192      	cbz	r2, 8011bf4 <_scanf_i+0xb8>
 8011bce:	6832      	ldr	r2, [r6, #0]
 8011bd0:	1c51      	adds	r1, r2, #1
 8011bd2:	6031      	str	r1, [r6, #0]
 8011bd4:	7812      	ldrb	r2, [r2, #0]
 8011bd6:	f805 2b01 	strb.w	r2, [r5], #1
 8011bda:	6872      	ldr	r2, [r6, #4]
 8011bdc:	3a01      	subs	r2, #1
 8011bde:	2a00      	cmp	r2, #0
 8011be0:	6072      	str	r2, [r6, #4]
 8011be2:	dc07      	bgt.n	8011bf4 <_scanf_i+0xb8>
 8011be4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011be8:	4631      	mov	r1, r6
 8011bea:	4650      	mov	r0, sl
 8011bec:	4790      	blx	r2
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	f040 8085 	bne.w	8011cfe <_scanf_i+0x1c2>
 8011bf4:	f10b 0b01 	add.w	fp, fp, #1
 8011bf8:	f1bb 0f03 	cmp.w	fp, #3
 8011bfc:	d1cb      	bne.n	8011b96 <_scanf_i+0x5a>
 8011bfe:	6863      	ldr	r3, [r4, #4]
 8011c00:	b90b      	cbnz	r3, 8011c06 <_scanf_i+0xca>
 8011c02:	230a      	movs	r3, #10
 8011c04:	6063      	str	r3, [r4, #4]
 8011c06:	6863      	ldr	r3, [r4, #4]
 8011c08:	4945      	ldr	r1, [pc, #276]	; (8011d20 <_scanf_i+0x1e4>)
 8011c0a:	6960      	ldr	r0, [r4, #20]
 8011c0c:	1ac9      	subs	r1, r1, r3
 8011c0e:	f000 f937 	bl	8011e80 <__sccl>
 8011c12:	f04f 0b00 	mov.w	fp, #0
 8011c16:	68a3      	ldr	r3, [r4, #8]
 8011c18:	6822      	ldr	r2, [r4, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d03d      	beq.n	8011c9a <_scanf_i+0x15e>
 8011c1e:	6831      	ldr	r1, [r6, #0]
 8011c20:	6960      	ldr	r0, [r4, #20]
 8011c22:	f891 c000 	ldrb.w	ip, [r1]
 8011c26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d035      	beq.n	8011c9a <_scanf_i+0x15e>
 8011c2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011c32:	d124      	bne.n	8011c7e <_scanf_i+0x142>
 8011c34:	0510      	lsls	r0, r2, #20
 8011c36:	d522      	bpl.n	8011c7e <_scanf_i+0x142>
 8011c38:	f10b 0b01 	add.w	fp, fp, #1
 8011c3c:	f1b9 0f00 	cmp.w	r9, #0
 8011c40:	d003      	beq.n	8011c4a <_scanf_i+0x10e>
 8011c42:	3301      	adds	r3, #1
 8011c44:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c48:	60a3      	str	r3, [r4, #8]
 8011c4a:	6873      	ldr	r3, [r6, #4]
 8011c4c:	3b01      	subs	r3, #1
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	6073      	str	r3, [r6, #4]
 8011c52:	dd1b      	ble.n	8011c8c <_scanf_i+0x150>
 8011c54:	6833      	ldr	r3, [r6, #0]
 8011c56:	3301      	adds	r3, #1
 8011c58:	6033      	str	r3, [r6, #0]
 8011c5a:	68a3      	ldr	r3, [r4, #8]
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	60a3      	str	r3, [r4, #8]
 8011c60:	e7d9      	b.n	8011c16 <_scanf_i+0xda>
 8011c62:	f1bb 0f02 	cmp.w	fp, #2
 8011c66:	d1ae      	bne.n	8011bc6 <_scanf_i+0x8a>
 8011c68:	6822      	ldr	r2, [r4, #0]
 8011c6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011c6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011c72:	d1bf      	bne.n	8011bf4 <_scanf_i+0xb8>
 8011c74:	2310      	movs	r3, #16
 8011c76:	6063      	str	r3, [r4, #4]
 8011c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011c7c:	e7a2      	b.n	8011bc4 <_scanf_i+0x88>
 8011c7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011c82:	6022      	str	r2, [r4, #0]
 8011c84:	780b      	ldrb	r3, [r1, #0]
 8011c86:	f805 3b01 	strb.w	r3, [r5], #1
 8011c8a:	e7de      	b.n	8011c4a <_scanf_i+0x10e>
 8011c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011c90:	4631      	mov	r1, r6
 8011c92:	4650      	mov	r0, sl
 8011c94:	4798      	blx	r3
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d0df      	beq.n	8011c5a <_scanf_i+0x11e>
 8011c9a:	6823      	ldr	r3, [r4, #0]
 8011c9c:	05d9      	lsls	r1, r3, #23
 8011c9e:	d50d      	bpl.n	8011cbc <_scanf_i+0x180>
 8011ca0:	42bd      	cmp	r5, r7
 8011ca2:	d909      	bls.n	8011cb8 <_scanf_i+0x17c>
 8011ca4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011cac:	4632      	mov	r2, r6
 8011cae:	4650      	mov	r0, sl
 8011cb0:	4798      	blx	r3
 8011cb2:	f105 39ff 	add.w	r9, r5, #4294967295
 8011cb6:	464d      	mov	r5, r9
 8011cb8:	42bd      	cmp	r5, r7
 8011cba:	d028      	beq.n	8011d0e <_scanf_i+0x1d2>
 8011cbc:	6822      	ldr	r2, [r4, #0]
 8011cbe:	f012 0210 	ands.w	r2, r2, #16
 8011cc2:	d113      	bne.n	8011cec <_scanf_i+0x1b0>
 8011cc4:	702a      	strb	r2, [r5, #0]
 8011cc6:	6863      	ldr	r3, [r4, #4]
 8011cc8:	9e01      	ldr	r6, [sp, #4]
 8011cca:	4639      	mov	r1, r7
 8011ccc:	4650      	mov	r0, sl
 8011cce:	47b0      	blx	r6
 8011cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8011cd4:	6821      	ldr	r1, [r4, #0]
 8011cd6:	1d1a      	adds	r2, r3, #4
 8011cd8:	f8c8 2000 	str.w	r2, [r8]
 8011cdc:	f011 0f20 	tst.w	r1, #32
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	d00f      	beq.n	8011d04 <_scanf_i+0x1c8>
 8011ce4:	6018      	str	r0, [r3, #0]
 8011ce6:	68e3      	ldr	r3, [r4, #12]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	60e3      	str	r3, [r4, #12]
 8011cec:	6923      	ldr	r3, [r4, #16]
 8011cee:	1bed      	subs	r5, r5, r7
 8011cf0:	445d      	add	r5, fp
 8011cf2:	442b      	add	r3, r5
 8011cf4:	6123      	str	r3, [r4, #16]
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	b007      	add	sp, #28
 8011cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfe:	f04f 0b00 	mov.w	fp, #0
 8011d02:	e7ca      	b.n	8011c9a <_scanf_i+0x15e>
 8011d04:	07ca      	lsls	r2, r1, #31
 8011d06:	bf4c      	ite	mi
 8011d08:	8018      	strhmi	r0, [r3, #0]
 8011d0a:	6018      	strpl	r0, [r3, #0]
 8011d0c:	e7eb      	b.n	8011ce6 <_scanf_i+0x1aa>
 8011d0e:	2001      	movs	r0, #1
 8011d10:	e7f2      	b.n	8011cf8 <_scanf_i+0x1bc>
 8011d12:	bf00      	nop
 8011d14:	08013f04 	.word	0x08013f04
 8011d18:	08012821 	.word	0x08012821
 8011d1c:	08011431 	.word	0x08011431
 8011d20:	080143d2 	.word	0x080143d2

08011d24 <__sflush_r>:
 8011d24:	898a      	ldrh	r2, [r1, #12]
 8011d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2a:	4605      	mov	r5, r0
 8011d2c:	0710      	lsls	r0, r2, #28
 8011d2e:	460c      	mov	r4, r1
 8011d30:	d458      	bmi.n	8011de4 <__sflush_r+0xc0>
 8011d32:	684b      	ldr	r3, [r1, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dc05      	bgt.n	8011d44 <__sflush_r+0x20>
 8011d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	dc02      	bgt.n	8011d44 <__sflush_r+0x20>
 8011d3e:	2000      	movs	r0, #0
 8011d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d46:	2e00      	cmp	r6, #0
 8011d48:	d0f9      	beq.n	8011d3e <__sflush_r+0x1a>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d50:	682f      	ldr	r7, [r5, #0]
 8011d52:	6a21      	ldr	r1, [r4, #32]
 8011d54:	602b      	str	r3, [r5, #0]
 8011d56:	d032      	beq.n	8011dbe <__sflush_r+0x9a>
 8011d58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	075a      	lsls	r2, r3, #29
 8011d5e:	d505      	bpl.n	8011d6c <__sflush_r+0x48>
 8011d60:	6863      	ldr	r3, [r4, #4]
 8011d62:	1ac0      	subs	r0, r0, r3
 8011d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d66:	b10b      	cbz	r3, 8011d6c <__sflush_r+0x48>
 8011d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d6a:	1ac0      	subs	r0, r0, r3
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4602      	mov	r2, r0
 8011d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d72:	6a21      	ldr	r1, [r4, #32]
 8011d74:	4628      	mov	r0, r5
 8011d76:	47b0      	blx	r6
 8011d78:	1c43      	adds	r3, r0, #1
 8011d7a:	89a3      	ldrh	r3, [r4, #12]
 8011d7c:	d106      	bne.n	8011d8c <__sflush_r+0x68>
 8011d7e:	6829      	ldr	r1, [r5, #0]
 8011d80:	291d      	cmp	r1, #29
 8011d82:	d82b      	bhi.n	8011ddc <__sflush_r+0xb8>
 8011d84:	4a29      	ldr	r2, [pc, #164]	; (8011e2c <__sflush_r+0x108>)
 8011d86:	410a      	asrs	r2, r1
 8011d88:	07d6      	lsls	r6, r2, #31
 8011d8a:	d427      	bmi.n	8011ddc <__sflush_r+0xb8>
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	6062      	str	r2, [r4, #4]
 8011d90:	04d9      	lsls	r1, r3, #19
 8011d92:	6922      	ldr	r2, [r4, #16]
 8011d94:	6022      	str	r2, [r4, #0]
 8011d96:	d504      	bpl.n	8011da2 <__sflush_r+0x7e>
 8011d98:	1c42      	adds	r2, r0, #1
 8011d9a:	d101      	bne.n	8011da0 <__sflush_r+0x7c>
 8011d9c:	682b      	ldr	r3, [r5, #0]
 8011d9e:	b903      	cbnz	r3, 8011da2 <__sflush_r+0x7e>
 8011da0:	6560      	str	r0, [r4, #84]	; 0x54
 8011da2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011da4:	602f      	str	r7, [r5, #0]
 8011da6:	2900      	cmp	r1, #0
 8011da8:	d0c9      	beq.n	8011d3e <__sflush_r+0x1a>
 8011daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dae:	4299      	cmp	r1, r3
 8011db0:	d002      	beq.n	8011db8 <__sflush_r+0x94>
 8011db2:	4628      	mov	r0, r5
 8011db4:	f7fd ffa6 	bl	800fd04 <_free_r>
 8011db8:	2000      	movs	r0, #0
 8011dba:	6360      	str	r0, [r4, #52]	; 0x34
 8011dbc:	e7c0      	b.n	8011d40 <__sflush_r+0x1c>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	47b0      	blx	r6
 8011dc4:	1c41      	adds	r1, r0, #1
 8011dc6:	d1c8      	bne.n	8011d5a <__sflush_r+0x36>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d0c5      	beq.n	8011d5a <__sflush_r+0x36>
 8011dce:	2b1d      	cmp	r3, #29
 8011dd0:	d001      	beq.n	8011dd6 <__sflush_r+0xb2>
 8011dd2:	2b16      	cmp	r3, #22
 8011dd4:	d101      	bne.n	8011dda <__sflush_r+0xb6>
 8011dd6:	602f      	str	r7, [r5, #0]
 8011dd8:	e7b1      	b.n	8011d3e <__sflush_r+0x1a>
 8011dda:	89a3      	ldrh	r3, [r4, #12]
 8011ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de0:	81a3      	strh	r3, [r4, #12]
 8011de2:	e7ad      	b.n	8011d40 <__sflush_r+0x1c>
 8011de4:	690f      	ldr	r7, [r1, #16]
 8011de6:	2f00      	cmp	r7, #0
 8011de8:	d0a9      	beq.n	8011d3e <__sflush_r+0x1a>
 8011dea:	0793      	lsls	r3, r2, #30
 8011dec:	680e      	ldr	r6, [r1, #0]
 8011dee:	bf08      	it	eq
 8011df0:	694b      	ldreq	r3, [r1, #20]
 8011df2:	600f      	str	r7, [r1, #0]
 8011df4:	bf18      	it	ne
 8011df6:	2300      	movne	r3, #0
 8011df8:	eba6 0807 	sub.w	r8, r6, r7
 8011dfc:	608b      	str	r3, [r1, #8]
 8011dfe:	f1b8 0f00 	cmp.w	r8, #0
 8011e02:	dd9c      	ble.n	8011d3e <__sflush_r+0x1a>
 8011e04:	6a21      	ldr	r1, [r4, #32]
 8011e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e08:	4643      	mov	r3, r8
 8011e0a:	463a      	mov	r2, r7
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	47b0      	blx	r6
 8011e10:	2800      	cmp	r0, #0
 8011e12:	dc06      	bgt.n	8011e22 <__sflush_r+0xfe>
 8011e14:	89a3      	ldrh	r3, [r4, #12]
 8011e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e1a:	81a3      	strh	r3, [r4, #12]
 8011e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e20:	e78e      	b.n	8011d40 <__sflush_r+0x1c>
 8011e22:	4407      	add	r7, r0
 8011e24:	eba8 0800 	sub.w	r8, r8, r0
 8011e28:	e7e9      	b.n	8011dfe <__sflush_r+0xda>
 8011e2a:	bf00      	nop
 8011e2c:	dfbffffe 	.word	0xdfbffffe

08011e30 <_fflush_r>:
 8011e30:	b538      	push	{r3, r4, r5, lr}
 8011e32:	690b      	ldr	r3, [r1, #16]
 8011e34:	4605      	mov	r5, r0
 8011e36:	460c      	mov	r4, r1
 8011e38:	b913      	cbnz	r3, 8011e40 <_fflush_r+0x10>
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	b118      	cbz	r0, 8011e4a <_fflush_r+0x1a>
 8011e42:	6a03      	ldr	r3, [r0, #32]
 8011e44:	b90b      	cbnz	r3, 8011e4a <_fflush_r+0x1a>
 8011e46:	f7fc ff23 	bl	800ec90 <__sinit>
 8011e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d0f3      	beq.n	8011e3a <_fflush_r+0xa>
 8011e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e54:	07d0      	lsls	r0, r2, #31
 8011e56:	d404      	bmi.n	8011e62 <_fflush_r+0x32>
 8011e58:	0599      	lsls	r1, r3, #22
 8011e5a:	d402      	bmi.n	8011e62 <_fflush_r+0x32>
 8011e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e5e:	f7fd f8c1 	bl	800efe4 <__retarget_lock_acquire_recursive>
 8011e62:	4628      	mov	r0, r5
 8011e64:	4621      	mov	r1, r4
 8011e66:	f7ff ff5d 	bl	8011d24 <__sflush_r>
 8011e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e6c:	07da      	lsls	r2, r3, #31
 8011e6e:	4605      	mov	r5, r0
 8011e70:	d4e4      	bmi.n	8011e3c <_fflush_r+0xc>
 8011e72:	89a3      	ldrh	r3, [r4, #12]
 8011e74:	059b      	lsls	r3, r3, #22
 8011e76:	d4e1      	bmi.n	8011e3c <_fflush_r+0xc>
 8011e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e7a:	f7fd f8b4 	bl	800efe6 <__retarget_lock_release_recursive>
 8011e7e:	e7dd      	b.n	8011e3c <_fflush_r+0xc>

08011e80 <__sccl>:
 8011e80:	b570      	push	{r4, r5, r6, lr}
 8011e82:	780b      	ldrb	r3, [r1, #0]
 8011e84:	4604      	mov	r4, r0
 8011e86:	2b5e      	cmp	r3, #94	; 0x5e
 8011e88:	bf0b      	itete	eq
 8011e8a:	784b      	ldrbeq	r3, [r1, #1]
 8011e8c:	1c4a      	addne	r2, r1, #1
 8011e8e:	1c8a      	addeq	r2, r1, #2
 8011e90:	2100      	movne	r1, #0
 8011e92:	bf08      	it	eq
 8011e94:	2101      	moveq	r1, #1
 8011e96:	3801      	subs	r0, #1
 8011e98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011e9c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011ea0:	42a8      	cmp	r0, r5
 8011ea2:	d1fb      	bne.n	8011e9c <__sccl+0x1c>
 8011ea4:	b90b      	cbnz	r3, 8011eaa <__sccl+0x2a>
 8011ea6:	1e50      	subs	r0, r2, #1
 8011ea8:	bd70      	pop	{r4, r5, r6, pc}
 8011eaa:	f081 0101 	eor.w	r1, r1, #1
 8011eae:	54e1      	strb	r1, [r4, r3]
 8011eb0:	4610      	mov	r0, r2
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011eb8:	2d2d      	cmp	r5, #45	; 0x2d
 8011eba:	d005      	beq.n	8011ec8 <__sccl+0x48>
 8011ebc:	2d5d      	cmp	r5, #93	; 0x5d
 8011ebe:	d016      	beq.n	8011eee <__sccl+0x6e>
 8011ec0:	2d00      	cmp	r5, #0
 8011ec2:	d0f1      	beq.n	8011ea8 <__sccl+0x28>
 8011ec4:	462b      	mov	r3, r5
 8011ec6:	e7f2      	b.n	8011eae <__sccl+0x2e>
 8011ec8:	7846      	ldrb	r6, [r0, #1]
 8011eca:	2e5d      	cmp	r6, #93	; 0x5d
 8011ecc:	d0fa      	beq.n	8011ec4 <__sccl+0x44>
 8011ece:	42b3      	cmp	r3, r6
 8011ed0:	dcf8      	bgt.n	8011ec4 <__sccl+0x44>
 8011ed2:	3002      	adds	r0, #2
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	3201      	adds	r2, #1
 8011ed8:	4296      	cmp	r6, r2
 8011eda:	54a1      	strb	r1, [r4, r2]
 8011edc:	dcfb      	bgt.n	8011ed6 <__sccl+0x56>
 8011ede:	1af2      	subs	r2, r6, r3
 8011ee0:	3a01      	subs	r2, #1
 8011ee2:	1c5d      	adds	r5, r3, #1
 8011ee4:	42b3      	cmp	r3, r6
 8011ee6:	bfa8      	it	ge
 8011ee8:	2200      	movge	r2, #0
 8011eea:	18ab      	adds	r3, r5, r2
 8011eec:	e7e1      	b.n	8011eb2 <__sccl+0x32>
 8011eee:	4610      	mov	r0, r2
 8011ef0:	e7da      	b.n	8011ea8 <__sccl+0x28>

08011ef2 <__submore>:
 8011ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011efe:	4299      	cmp	r1, r3
 8011f00:	d11d      	bne.n	8011f3e <__submore+0x4c>
 8011f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011f06:	f7fb ff47 	bl	800dd98 <_malloc_r>
 8011f0a:	b918      	cbnz	r0, 8011f14 <__submore+0x22>
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f18:	63a3      	str	r3, [r4, #56]	; 0x38
 8011f1a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011f1e:	6360      	str	r0, [r4, #52]	; 0x34
 8011f20:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011f24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011f28:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011f2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f30:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011f34:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011f38:	6020      	str	r0, [r4, #0]
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	e7e8      	b.n	8011f10 <__submore+0x1e>
 8011f3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011f40:	0077      	lsls	r7, r6, #1
 8011f42:	463a      	mov	r2, r7
 8011f44:	f000 fbcb 	bl	80126de <_realloc_r>
 8011f48:	4605      	mov	r5, r0
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d0de      	beq.n	8011f0c <__submore+0x1a>
 8011f4e:	eb00 0806 	add.w	r8, r0, r6
 8011f52:	4601      	mov	r1, r0
 8011f54:	4632      	mov	r2, r6
 8011f56:	4640      	mov	r0, r8
 8011f58:	f7fd f846 	bl	800efe8 <memcpy>
 8011f5c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011f60:	f8c4 8000 	str.w	r8, [r4]
 8011f64:	e7e9      	b.n	8011f3a <__submore+0x48>

08011f66 <memmove>:
 8011f66:	4288      	cmp	r0, r1
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	eb01 0402 	add.w	r4, r1, r2
 8011f6e:	d902      	bls.n	8011f76 <memmove+0x10>
 8011f70:	4284      	cmp	r4, r0
 8011f72:	4623      	mov	r3, r4
 8011f74:	d807      	bhi.n	8011f86 <memmove+0x20>
 8011f76:	1e43      	subs	r3, r0, #1
 8011f78:	42a1      	cmp	r1, r4
 8011f7a:	d008      	beq.n	8011f8e <memmove+0x28>
 8011f7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f84:	e7f8      	b.n	8011f78 <memmove+0x12>
 8011f86:	4402      	add	r2, r0
 8011f88:	4601      	mov	r1, r0
 8011f8a:	428a      	cmp	r2, r1
 8011f8c:	d100      	bne.n	8011f90 <memmove+0x2a>
 8011f8e:	bd10      	pop	{r4, pc}
 8011f90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f98:	e7f7      	b.n	8011f8a <memmove+0x24>

08011f9a <strncmp>:
 8011f9a:	b510      	push	{r4, lr}
 8011f9c:	b16a      	cbz	r2, 8011fba <strncmp+0x20>
 8011f9e:	3901      	subs	r1, #1
 8011fa0:	1884      	adds	r4, r0, r2
 8011fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fa6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d103      	bne.n	8011fb6 <strncmp+0x1c>
 8011fae:	42a0      	cmp	r0, r4
 8011fb0:	d001      	beq.n	8011fb6 <strncmp+0x1c>
 8011fb2:	2a00      	cmp	r2, #0
 8011fb4:	d1f5      	bne.n	8011fa2 <strncmp+0x8>
 8011fb6:	1ad0      	subs	r0, r2, r3
 8011fb8:	bd10      	pop	{r4, pc}
 8011fba:	4610      	mov	r0, r2
 8011fbc:	e7fc      	b.n	8011fb8 <strncmp+0x1e>
	...

08011fc0 <nan>:
 8011fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011fc8 <nan+0x8>
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	00000000 	.word	0x00000000
 8011fcc:	7ff80000 	.word	0x7ff80000

08011fd0 <__assert_func>:
 8011fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fd2:	4614      	mov	r4, r2
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <__assert_func+0x2c>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4605      	mov	r5, r0
 8011fdc:	68d8      	ldr	r0, [r3, #12]
 8011fde:	b14c      	cbz	r4, 8011ff4 <__assert_func+0x24>
 8011fe0:	4b07      	ldr	r3, [pc, #28]	; (8012000 <__assert_func+0x30>)
 8011fe2:	9100      	str	r1, [sp, #0]
 8011fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fe8:	4906      	ldr	r1, [pc, #24]	; (8012004 <__assert_func+0x34>)
 8011fea:	462b      	mov	r3, r5
 8011fec:	f000 fc28 	bl	8012840 <fiprintf>
 8011ff0:	f000 fc38 	bl	8012864 <abort>
 8011ff4:	4b04      	ldr	r3, [pc, #16]	; (8012008 <__assert_func+0x38>)
 8011ff6:	461c      	mov	r4, r3
 8011ff8:	e7f3      	b.n	8011fe2 <__assert_func+0x12>
 8011ffa:	bf00      	nop
 8011ffc:	2000006c 	.word	0x2000006c
 8012000:	080143e5 	.word	0x080143e5
 8012004:	080143f2 	.word	0x080143f2
 8012008:	08014420 	.word	0x08014420

0801200c <rshift>:
 801200c:	6903      	ldr	r3, [r0, #16]
 801200e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012016:	ea4f 1261 	mov.w	r2, r1, asr #5
 801201a:	f100 0414 	add.w	r4, r0, #20
 801201e:	dd45      	ble.n	80120ac <rshift+0xa0>
 8012020:	f011 011f 	ands.w	r1, r1, #31
 8012024:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012028:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801202c:	d10c      	bne.n	8012048 <rshift+0x3c>
 801202e:	f100 0710 	add.w	r7, r0, #16
 8012032:	4629      	mov	r1, r5
 8012034:	42b1      	cmp	r1, r6
 8012036:	d334      	bcc.n	80120a2 <rshift+0x96>
 8012038:	1a9b      	subs	r3, r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	1eea      	subs	r2, r5, #3
 801203e:	4296      	cmp	r6, r2
 8012040:	bf38      	it	cc
 8012042:	2300      	movcc	r3, #0
 8012044:	4423      	add	r3, r4
 8012046:	e015      	b.n	8012074 <rshift+0x68>
 8012048:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801204c:	f1c1 0820 	rsb	r8, r1, #32
 8012050:	40cf      	lsrs	r7, r1
 8012052:	f105 0e04 	add.w	lr, r5, #4
 8012056:	46a1      	mov	r9, r4
 8012058:	4576      	cmp	r6, lr
 801205a:	46f4      	mov	ip, lr
 801205c:	d815      	bhi.n	801208a <rshift+0x7e>
 801205e:	1a9a      	subs	r2, r3, r2
 8012060:	0092      	lsls	r2, r2, #2
 8012062:	3a04      	subs	r2, #4
 8012064:	3501      	adds	r5, #1
 8012066:	42ae      	cmp	r6, r5
 8012068:	bf38      	it	cc
 801206a:	2200      	movcc	r2, #0
 801206c:	18a3      	adds	r3, r4, r2
 801206e:	50a7      	str	r7, [r4, r2]
 8012070:	b107      	cbz	r7, 8012074 <rshift+0x68>
 8012072:	3304      	adds	r3, #4
 8012074:	1b1a      	subs	r2, r3, r4
 8012076:	42a3      	cmp	r3, r4
 8012078:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801207c:	bf08      	it	eq
 801207e:	2300      	moveq	r3, #0
 8012080:	6102      	str	r2, [r0, #16]
 8012082:	bf08      	it	eq
 8012084:	6143      	streq	r3, [r0, #20]
 8012086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208a:	f8dc c000 	ldr.w	ip, [ip]
 801208e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012092:	ea4c 0707 	orr.w	r7, ip, r7
 8012096:	f849 7b04 	str.w	r7, [r9], #4
 801209a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801209e:	40cf      	lsrs	r7, r1
 80120a0:	e7da      	b.n	8012058 <rshift+0x4c>
 80120a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80120a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80120aa:	e7c3      	b.n	8012034 <rshift+0x28>
 80120ac:	4623      	mov	r3, r4
 80120ae:	e7e1      	b.n	8012074 <rshift+0x68>

080120b0 <__hexdig_fun>:
 80120b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80120b4:	2b09      	cmp	r3, #9
 80120b6:	d802      	bhi.n	80120be <__hexdig_fun+0xe>
 80120b8:	3820      	subs	r0, #32
 80120ba:	b2c0      	uxtb	r0, r0
 80120bc:	4770      	bx	lr
 80120be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80120c2:	2b05      	cmp	r3, #5
 80120c4:	d801      	bhi.n	80120ca <__hexdig_fun+0x1a>
 80120c6:	3847      	subs	r0, #71	; 0x47
 80120c8:	e7f7      	b.n	80120ba <__hexdig_fun+0xa>
 80120ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80120ce:	2b05      	cmp	r3, #5
 80120d0:	d801      	bhi.n	80120d6 <__hexdig_fun+0x26>
 80120d2:	3827      	subs	r0, #39	; 0x27
 80120d4:	e7f1      	b.n	80120ba <__hexdig_fun+0xa>
 80120d6:	2000      	movs	r0, #0
 80120d8:	4770      	bx	lr
	...

080120dc <__gethex>:
 80120dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e0:	4617      	mov	r7, r2
 80120e2:	680a      	ldr	r2, [r1, #0]
 80120e4:	b085      	sub	sp, #20
 80120e6:	f102 0b02 	add.w	fp, r2, #2
 80120ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80120ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80120f2:	4681      	mov	r9, r0
 80120f4:	468a      	mov	sl, r1
 80120f6:	9302      	str	r3, [sp, #8]
 80120f8:	32fe      	adds	r2, #254	; 0xfe
 80120fa:	eb02 030b 	add.w	r3, r2, fp
 80120fe:	46d8      	mov	r8, fp
 8012100:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	2830      	cmp	r0, #48	; 0x30
 8012108:	d0f7      	beq.n	80120fa <__gethex+0x1e>
 801210a:	f7ff ffd1 	bl	80120b0 <__hexdig_fun>
 801210e:	4604      	mov	r4, r0
 8012110:	2800      	cmp	r0, #0
 8012112:	d138      	bne.n	8012186 <__gethex+0xaa>
 8012114:	49a7      	ldr	r1, [pc, #668]	; (80123b4 <__gethex+0x2d8>)
 8012116:	2201      	movs	r2, #1
 8012118:	4640      	mov	r0, r8
 801211a:	f7ff ff3e 	bl	8011f9a <strncmp>
 801211e:	4606      	mov	r6, r0
 8012120:	2800      	cmp	r0, #0
 8012122:	d169      	bne.n	80121f8 <__gethex+0x11c>
 8012124:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012128:	465d      	mov	r5, fp
 801212a:	f7ff ffc1 	bl	80120b0 <__hexdig_fun>
 801212e:	2800      	cmp	r0, #0
 8012130:	d064      	beq.n	80121fc <__gethex+0x120>
 8012132:	465a      	mov	r2, fp
 8012134:	7810      	ldrb	r0, [r2, #0]
 8012136:	2830      	cmp	r0, #48	; 0x30
 8012138:	4690      	mov	r8, r2
 801213a:	f102 0201 	add.w	r2, r2, #1
 801213e:	d0f9      	beq.n	8012134 <__gethex+0x58>
 8012140:	f7ff ffb6 	bl	80120b0 <__hexdig_fun>
 8012144:	2301      	movs	r3, #1
 8012146:	fab0 f480 	clz	r4, r0
 801214a:	0964      	lsrs	r4, r4, #5
 801214c:	465e      	mov	r6, fp
 801214e:	9301      	str	r3, [sp, #4]
 8012150:	4642      	mov	r2, r8
 8012152:	4615      	mov	r5, r2
 8012154:	3201      	adds	r2, #1
 8012156:	7828      	ldrb	r0, [r5, #0]
 8012158:	f7ff ffaa 	bl	80120b0 <__hexdig_fun>
 801215c:	2800      	cmp	r0, #0
 801215e:	d1f8      	bne.n	8012152 <__gethex+0x76>
 8012160:	4994      	ldr	r1, [pc, #592]	; (80123b4 <__gethex+0x2d8>)
 8012162:	2201      	movs	r2, #1
 8012164:	4628      	mov	r0, r5
 8012166:	f7ff ff18 	bl	8011f9a <strncmp>
 801216a:	b978      	cbnz	r0, 801218c <__gethex+0xb0>
 801216c:	b946      	cbnz	r6, 8012180 <__gethex+0xa4>
 801216e:	1c6e      	adds	r6, r5, #1
 8012170:	4632      	mov	r2, r6
 8012172:	4615      	mov	r5, r2
 8012174:	3201      	adds	r2, #1
 8012176:	7828      	ldrb	r0, [r5, #0]
 8012178:	f7ff ff9a 	bl	80120b0 <__hexdig_fun>
 801217c:	2800      	cmp	r0, #0
 801217e:	d1f8      	bne.n	8012172 <__gethex+0x96>
 8012180:	1b73      	subs	r3, r6, r5
 8012182:	009e      	lsls	r6, r3, #2
 8012184:	e004      	b.n	8012190 <__gethex+0xb4>
 8012186:	2400      	movs	r4, #0
 8012188:	4626      	mov	r6, r4
 801218a:	e7e1      	b.n	8012150 <__gethex+0x74>
 801218c:	2e00      	cmp	r6, #0
 801218e:	d1f7      	bne.n	8012180 <__gethex+0xa4>
 8012190:	782b      	ldrb	r3, [r5, #0]
 8012192:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012196:	2b50      	cmp	r3, #80	; 0x50
 8012198:	d13d      	bne.n	8012216 <__gethex+0x13a>
 801219a:	786b      	ldrb	r3, [r5, #1]
 801219c:	2b2b      	cmp	r3, #43	; 0x2b
 801219e:	d02f      	beq.n	8012200 <__gethex+0x124>
 80121a0:	2b2d      	cmp	r3, #45	; 0x2d
 80121a2:	d031      	beq.n	8012208 <__gethex+0x12c>
 80121a4:	1c69      	adds	r1, r5, #1
 80121a6:	f04f 0b00 	mov.w	fp, #0
 80121aa:	7808      	ldrb	r0, [r1, #0]
 80121ac:	f7ff ff80 	bl	80120b0 <__hexdig_fun>
 80121b0:	1e42      	subs	r2, r0, #1
 80121b2:	b2d2      	uxtb	r2, r2
 80121b4:	2a18      	cmp	r2, #24
 80121b6:	d82e      	bhi.n	8012216 <__gethex+0x13a>
 80121b8:	f1a0 0210 	sub.w	r2, r0, #16
 80121bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80121c0:	f7ff ff76 	bl	80120b0 <__hexdig_fun>
 80121c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80121c8:	fa5f fc8c 	uxtb.w	ip, ip
 80121cc:	f1bc 0f18 	cmp.w	ip, #24
 80121d0:	d91d      	bls.n	801220e <__gethex+0x132>
 80121d2:	f1bb 0f00 	cmp.w	fp, #0
 80121d6:	d000      	beq.n	80121da <__gethex+0xfe>
 80121d8:	4252      	negs	r2, r2
 80121da:	4416      	add	r6, r2
 80121dc:	f8ca 1000 	str.w	r1, [sl]
 80121e0:	b1dc      	cbz	r4, 801221a <__gethex+0x13e>
 80121e2:	9b01      	ldr	r3, [sp, #4]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	bf14      	ite	ne
 80121e8:	f04f 0800 	movne.w	r8, #0
 80121ec:	f04f 0806 	moveq.w	r8, #6
 80121f0:	4640      	mov	r0, r8
 80121f2:	b005      	add	sp, #20
 80121f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f8:	4645      	mov	r5, r8
 80121fa:	4626      	mov	r6, r4
 80121fc:	2401      	movs	r4, #1
 80121fe:	e7c7      	b.n	8012190 <__gethex+0xb4>
 8012200:	f04f 0b00 	mov.w	fp, #0
 8012204:	1ca9      	adds	r1, r5, #2
 8012206:	e7d0      	b.n	80121aa <__gethex+0xce>
 8012208:	f04f 0b01 	mov.w	fp, #1
 801220c:	e7fa      	b.n	8012204 <__gethex+0x128>
 801220e:	230a      	movs	r3, #10
 8012210:	fb03 0002 	mla	r0, r3, r2, r0
 8012214:	e7d0      	b.n	80121b8 <__gethex+0xdc>
 8012216:	4629      	mov	r1, r5
 8012218:	e7e0      	b.n	80121dc <__gethex+0x100>
 801221a:	eba5 0308 	sub.w	r3, r5, r8
 801221e:	3b01      	subs	r3, #1
 8012220:	4621      	mov	r1, r4
 8012222:	2b07      	cmp	r3, #7
 8012224:	dc0a      	bgt.n	801223c <__gethex+0x160>
 8012226:	4648      	mov	r0, r9
 8012228:	f7fd fdc0 	bl	800fdac <_Balloc>
 801222c:	4604      	mov	r4, r0
 801222e:	b940      	cbnz	r0, 8012242 <__gethex+0x166>
 8012230:	4b61      	ldr	r3, [pc, #388]	; (80123b8 <__gethex+0x2dc>)
 8012232:	4602      	mov	r2, r0
 8012234:	21e4      	movs	r1, #228	; 0xe4
 8012236:	4861      	ldr	r0, [pc, #388]	; (80123bc <__gethex+0x2e0>)
 8012238:	f7ff feca 	bl	8011fd0 <__assert_func>
 801223c:	3101      	adds	r1, #1
 801223e:	105b      	asrs	r3, r3, #1
 8012240:	e7ef      	b.n	8012222 <__gethex+0x146>
 8012242:	f100 0a14 	add.w	sl, r0, #20
 8012246:	2300      	movs	r3, #0
 8012248:	495a      	ldr	r1, [pc, #360]	; (80123b4 <__gethex+0x2d8>)
 801224a:	f8cd a004 	str.w	sl, [sp, #4]
 801224e:	469b      	mov	fp, r3
 8012250:	45a8      	cmp	r8, r5
 8012252:	d342      	bcc.n	80122da <__gethex+0x1fe>
 8012254:	9801      	ldr	r0, [sp, #4]
 8012256:	f840 bb04 	str.w	fp, [r0], #4
 801225a:	eba0 000a 	sub.w	r0, r0, sl
 801225e:	1080      	asrs	r0, r0, #2
 8012260:	6120      	str	r0, [r4, #16]
 8012262:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012266:	4658      	mov	r0, fp
 8012268:	f7fd fe92 	bl	800ff90 <__hi0bits>
 801226c:	683d      	ldr	r5, [r7, #0]
 801226e:	eba8 0000 	sub.w	r0, r8, r0
 8012272:	42a8      	cmp	r0, r5
 8012274:	dd59      	ble.n	801232a <__gethex+0x24e>
 8012276:	eba0 0805 	sub.w	r8, r0, r5
 801227a:	4641      	mov	r1, r8
 801227c:	4620      	mov	r0, r4
 801227e:	f7fe fa21 	bl	80106c4 <__any_on>
 8012282:	4683      	mov	fp, r0
 8012284:	b1b8      	cbz	r0, 80122b6 <__gethex+0x1da>
 8012286:	f108 33ff 	add.w	r3, r8, #4294967295
 801228a:	1159      	asrs	r1, r3, #5
 801228c:	f003 021f 	and.w	r2, r3, #31
 8012290:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012294:	f04f 0b01 	mov.w	fp, #1
 8012298:	fa0b f202 	lsl.w	r2, fp, r2
 801229c:	420a      	tst	r2, r1
 801229e:	d00a      	beq.n	80122b6 <__gethex+0x1da>
 80122a0:	455b      	cmp	r3, fp
 80122a2:	dd06      	ble.n	80122b2 <__gethex+0x1d6>
 80122a4:	f1a8 0102 	sub.w	r1, r8, #2
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7fe fa0b 	bl	80106c4 <__any_on>
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d138      	bne.n	8012324 <__gethex+0x248>
 80122b2:	f04f 0b02 	mov.w	fp, #2
 80122b6:	4641      	mov	r1, r8
 80122b8:	4620      	mov	r0, r4
 80122ba:	f7ff fea7 	bl	801200c <rshift>
 80122be:	4446      	add	r6, r8
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	42b3      	cmp	r3, r6
 80122c4:	da41      	bge.n	801234a <__gethex+0x26e>
 80122c6:	4621      	mov	r1, r4
 80122c8:	4648      	mov	r0, r9
 80122ca:	f7fd fdaf 	bl	800fe2c <_Bfree>
 80122ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122d0:	2300      	movs	r3, #0
 80122d2:	6013      	str	r3, [r2, #0]
 80122d4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80122d8:	e78a      	b.n	80121f0 <__gethex+0x114>
 80122da:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80122de:	2a2e      	cmp	r2, #46	; 0x2e
 80122e0:	d014      	beq.n	801230c <__gethex+0x230>
 80122e2:	2b20      	cmp	r3, #32
 80122e4:	d106      	bne.n	80122f4 <__gethex+0x218>
 80122e6:	9b01      	ldr	r3, [sp, #4]
 80122e8:	f843 bb04 	str.w	fp, [r3], #4
 80122ec:	f04f 0b00 	mov.w	fp, #0
 80122f0:	9301      	str	r3, [sp, #4]
 80122f2:	465b      	mov	r3, fp
 80122f4:	7828      	ldrb	r0, [r5, #0]
 80122f6:	9303      	str	r3, [sp, #12]
 80122f8:	f7ff feda 	bl	80120b0 <__hexdig_fun>
 80122fc:	9b03      	ldr	r3, [sp, #12]
 80122fe:	f000 000f 	and.w	r0, r0, #15
 8012302:	4098      	lsls	r0, r3
 8012304:	ea4b 0b00 	orr.w	fp, fp, r0
 8012308:	3304      	adds	r3, #4
 801230a:	e7a1      	b.n	8012250 <__gethex+0x174>
 801230c:	45a8      	cmp	r8, r5
 801230e:	d8e8      	bhi.n	80122e2 <__gethex+0x206>
 8012310:	2201      	movs	r2, #1
 8012312:	4628      	mov	r0, r5
 8012314:	9303      	str	r3, [sp, #12]
 8012316:	f7ff fe40 	bl	8011f9a <strncmp>
 801231a:	4926      	ldr	r1, [pc, #152]	; (80123b4 <__gethex+0x2d8>)
 801231c:	9b03      	ldr	r3, [sp, #12]
 801231e:	2800      	cmp	r0, #0
 8012320:	d1df      	bne.n	80122e2 <__gethex+0x206>
 8012322:	e795      	b.n	8012250 <__gethex+0x174>
 8012324:	f04f 0b03 	mov.w	fp, #3
 8012328:	e7c5      	b.n	80122b6 <__gethex+0x1da>
 801232a:	da0b      	bge.n	8012344 <__gethex+0x268>
 801232c:	eba5 0800 	sub.w	r8, r5, r0
 8012330:	4621      	mov	r1, r4
 8012332:	4642      	mov	r2, r8
 8012334:	4648      	mov	r0, r9
 8012336:	f7fd ff93 	bl	8010260 <__lshift>
 801233a:	eba6 0608 	sub.w	r6, r6, r8
 801233e:	4604      	mov	r4, r0
 8012340:	f100 0a14 	add.w	sl, r0, #20
 8012344:	f04f 0b00 	mov.w	fp, #0
 8012348:	e7ba      	b.n	80122c0 <__gethex+0x1e4>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	42b3      	cmp	r3, r6
 801234e:	dd73      	ble.n	8012438 <__gethex+0x35c>
 8012350:	1b9e      	subs	r6, r3, r6
 8012352:	42b5      	cmp	r5, r6
 8012354:	dc34      	bgt.n	80123c0 <__gethex+0x2e4>
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2b02      	cmp	r3, #2
 801235a:	d023      	beq.n	80123a4 <__gethex+0x2c8>
 801235c:	2b03      	cmp	r3, #3
 801235e:	d025      	beq.n	80123ac <__gethex+0x2d0>
 8012360:	2b01      	cmp	r3, #1
 8012362:	d115      	bne.n	8012390 <__gethex+0x2b4>
 8012364:	42b5      	cmp	r5, r6
 8012366:	d113      	bne.n	8012390 <__gethex+0x2b4>
 8012368:	2d01      	cmp	r5, #1
 801236a:	d10b      	bne.n	8012384 <__gethex+0x2a8>
 801236c:	9a02      	ldr	r2, [sp, #8]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6013      	str	r3, [r2, #0]
 8012372:	2301      	movs	r3, #1
 8012374:	6123      	str	r3, [r4, #16]
 8012376:	f8ca 3000 	str.w	r3, [sl]
 801237a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801237c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012380:	601c      	str	r4, [r3, #0]
 8012382:	e735      	b.n	80121f0 <__gethex+0x114>
 8012384:	1e69      	subs	r1, r5, #1
 8012386:	4620      	mov	r0, r4
 8012388:	f7fe f99c 	bl	80106c4 <__any_on>
 801238c:	2800      	cmp	r0, #0
 801238e:	d1ed      	bne.n	801236c <__gethex+0x290>
 8012390:	4621      	mov	r1, r4
 8012392:	4648      	mov	r0, r9
 8012394:	f7fd fd4a 	bl	800fe2c <_Bfree>
 8012398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801239a:	2300      	movs	r3, #0
 801239c:	6013      	str	r3, [r2, #0]
 801239e:	f04f 0850 	mov.w	r8, #80	; 0x50
 80123a2:	e725      	b.n	80121f0 <__gethex+0x114>
 80123a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d1f2      	bne.n	8012390 <__gethex+0x2b4>
 80123aa:	e7df      	b.n	801236c <__gethex+0x290>
 80123ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1dc      	bne.n	801236c <__gethex+0x290>
 80123b2:	e7ed      	b.n	8012390 <__gethex+0x2b4>
 80123b4:	0801425c 	.word	0x0801425c
 80123b8:	080140f3 	.word	0x080140f3
 80123bc:	08014421 	.word	0x08014421
 80123c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80123c4:	f1bb 0f00 	cmp.w	fp, #0
 80123c8:	d133      	bne.n	8012432 <__gethex+0x356>
 80123ca:	f1b8 0f00 	cmp.w	r8, #0
 80123ce:	d004      	beq.n	80123da <__gethex+0x2fe>
 80123d0:	4641      	mov	r1, r8
 80123d2:	4620      	mov	r0, r4
 80123d4:	f7fe f976 	bl	80106c4 <__any_on>
 80123d8:	4683      	mov	fp, r0
 80123da:	ea4f 1268 	mov.w	r2, r8, asr #5
 80123de:	2301      	movs	r3, #1
 80123e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80123e4:	f008 081f 	and.w	r8, r8, #31
 80123e8:	fa03 f308 	lsl.w	r3, r3, r8
 80123ec:	4213      	tst	r3, r2
 80123ee:	4631      	mov	r1, r6
 80123f0:	4620      	mov	r0, r4
 80123f2:	bf18      	it	ne
 80123f4:	f04b 0b02 	orrne.w	fp, fp, #2
 80123f8:	1bad      	subs	r5, r5, r6
 80123fa:	f7ff fe07 	bl	801200c <rshift>
 80123fe:	687e      	ldr	r6, [r7, #4]
 8012400:	f04f 0802 	mov.w	r8, #2
 8012404:	f1bb 0f00 	cmp.w	fp, #0
 8012408:	d04a      	beq.n	80124a0 <__gethex+0x3c4>
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2b02      	cmp	r3, #2
 801240e:	d016      	beq.n	801243e <__gethex+0x362>
 8012410:	2b03      	cmp	r3, #3
 8012412:	d018      	beq.n	8012446 <__gethex+0x36a>
 8012414:	2b01      	cmp	r3, #1
 8012416:	d109      	bne.n	801242c <__gethex+0x350>
 8012418:	f01b 0f02 	tst.w	fp, #2
 801241c:	d006      	beq.n	801242c <__gethex+0x350>
 801241e:	f8da 3000 	ldr.w	r3, [sl]
 8012422:	ea4b 0b03 	orr.w	fp, fp, r3
 8012426:	f01b 0f01 	tst.w	fp, #1
 801242a:	d10f      	bne.n	801244c <__gethex+0x370>
 801242c:	f048 0810 	orr.w	r8, r8, #16
 8012430:	e036      	b.n	80124a0 <__gethex+0x3c4>
 8012432:	f04f 0b01 	mov.w	fp, #1
 8012436:	e7d0      	b.n	80123da <__gethex+0x2fe>
 8012438:	f04f 0801 	mov.w	r8, #1
 801243c:	e7e2      	b.n	8012404 <__gethex+0x328>
 801243e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012440:	f1c3 0301 	rsb	r3, r3, #1
 8012444:	930f      	str	r3, [sp, #60]	; 0x3c
 8012446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012448:	2b00      	cmp	r3, #0
 801244a:	d0ef      	beq.n	801242c <__gethex+0x350>
 801244c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012450:	f104 0214 	add.w	r2, r4, #20
 8012454:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012458:	9301      	str	r3, [sp, #4]
 801245a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801245e:	2300      	movs	r3, #0
 8012460:	4694      	mov	ip, r2
 8012462:	f852 1b04 	ldr.w	r1, [r2], #4
 8012466:	f1b1 3fff 	cmp.w	r1, #4294967295
 801246a:	d01e      	beq.n	80124aa <__gethex+0x3ce>
 801246c:	3101      	adds	r1, #1
 801246e:	f8cc 1000 	str.w	r1, [ip]
 8012472:	f1b8 0f02 	cmp.w	r8, #2
 8012476:	f104 0214 	add.w	r2, r4, #20
 801247a:	d13d      	bne.n	80124f8 <__gethex+0x41c>
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	3b01      	subs	r3, #1
 8012480:	42ab      	cmp	r3, r5
 8012482:	d10b      	bne.n	801249c <__gethex+0x3c0>
 8012484:	1169      	asrs	r1, r5, #5
 8012486:	2301      	movs	r3, #1
 8012488:	f005 051f 	and.w	r5, r5, #31
 801248c:	fa03 f505 	lsl.w	r5, r3, r5
 8012490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012494:	421d      	tst	r5, r3
 8012496:	bf18      	it	ne
 8012498:	f04f 0801 	movne.w	r8, #1
 801249c:	f048 0820 	orr.w	r8, r8, #32
 80124a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a2:	601c      	str	r4, [r3, #0]
 80124a4:	9b02      	ldr	r3, [sp, #8]
 80124a6:	601e      	str	r6, [r3, #0]
 80124a8:	e6a2      	b.n	80121f0 <__gethex+0x114>
 80124aa:	4290      	cmp	r0, r2
 80124ac:	f842 3c04 	str.w	r3, [r2, #-4]
 80124b0:	d8d6      	bhi.n	8012460 <__gethex+0x384>
 80124b2:	68a2      	ldr	r2, [r4, #8]
 80124b4:	4593      	cmp	fp, r2
 80124b6:	db17      	blt.n	80124e8 <__gethex+0x40c>
 80124b8:	6861      	ldr	r1, [r4, #4]
 80124ba:	4648      	mov	r0, r9
 80124bc:	3101      	adds	r1, #1
 80124be:	f7fd fc75 	bl	800fdac <_Balloc>
 80124c2:	4682      	mov	sl, r0
 80124c4:	b918      	cbnz	r0, 80124ce <__gethex+0x3f2>
 80124c6:	4b1b      	ldr	r3, [pc, #108]	; (8012534 <__gethex+0x458>)
 80124c8:	4602      	mov	r2, r0
 80124ca:	2184      	movs	r1, #132	; 0x84
 80124cc:	e6b3      	b.n	8012236 <__gethex+0x15a>
 80124ce:	6922      	ldr	r2, [r4, #16]
 80124d0:	3202      	adds	r2, #2
 80124d2:	f104 010c 	add.w	r1, r4, #12
 80124d6:	0092      	lsls	r2, r2, #2
 80124d8:	300c      	adds	r0, #12
 80124da:	f7fc fd85 	bl	800efe8 <memcpy>
 80124de:	4621      	mov	r1, r4
 80124e0:	4648      	mov	r0, r9
 80124e2:	f7fd fca3 	bl	800fe2c <_Bfree>
 80124e6:	4654      	mov	r4, sl
 80124e8:	6922      	ldr	r2, [r4, #16]
 80124ea:	1c51      	adds	r1, r2, #1
 80124ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80124f0:	6121      	str	r1, [r4, #16]
 80124f2:	2101      	movs	r1, #1
 80124f4:	6151      	str	r1, [r2, #20]
 80124f6:	e7bc      	b.n	8012472 <__gethex+0x396>
 80124f8:	6921      	ldr	r1, [r4, #16]
 80124fa:	4559      	cmp	r1, fp
 80124fc:	dd0b      	ble.n	8012516 <__gethex+0x43a>
 80124fe:	2101      	movs	r1, #1
 8012500:	4620      	mov	r0, r4
 8012502:	f7ff fd83 	bl	801200c <rshift>
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	3601      	adds	r6, #1
 801250a:	42b3      	cmp	r3, r6
 801250c:	f6ff aedb 	blt.w	80122c6 <__gethex+0x1ea>
 8012510:	f04f 0801 	mov.w	r8, #1
 8012514:	e7c2      	b.n	801249c <__gethex+0x3c0>
 8012516:	f015 051f 	ands.w	r5, r5, #31
 801251a:	d0f9      	beq.n	8012510 <__gethex+0x434>
 801251c:	9b01      	ldr	r3, [sp, #4]
 801251e:	441a      	add	r2, r3
 8012520:	f1c5 0520 	rsb	r5, r5, #32
 8012524:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012528:	f7fd fd32 	bl	800ff90 <__hi0bits>
 801252c:	42a8      	cmp	r0, r5
 801252e:	dbe6      	blt.n	80124fe <__gethex+0x422>
 8012530:	e7ee      	b.n	8012510 <__gethex+0x434>
 8012532:	bf00      	nop
 8012534:	080140f3 	.word	0x080140f3

08012538 <L_shift>:
 8012538:	f1c2 0208 	rsb	r2, r2, #8
 801253c:	0092      	lsls	r2, r2, #2
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	f1c2 0620 	rsb	r6, r2, #32
 8012544:	6843      	ldr	r3, [r0, #4]
 8012546:	6804      	ldr	r4, [r0, #0]
 8012548:	fa03 f506 	lsl.w	r5, r3, r6
 801254c:	432c      	orrs	r4, r5
 801254e:	40d3      	lsrs	r3, r2
 8012550:	6004      	str	r4, [r0, #0]
 8012552:	f840 3f04 	str.w	r3, [r0, #4]!
 8012556:	4288      	cmp	r0, r1
 8012558:	d3f4      	bcc.n	8012544 <L_shift+0xc>
 801255a:	bd70      	pop	{r4, r5, r6, pc}

0801255c <__match>:
 801255c:	b530      	push	{r4, r5, lr}
 801255e:	6803      	ldr	r3, [r0, #0]
 8012560:	3301      	adds	r3, #1
 8012562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012566:	b914      	cbnz	r4, 801256e <__match+0x12>
 8012568:	6003      	str	r3, [r0, #0]
 801256a:	2001      	movs	r0, #1
 801256c:	bd30      	pop	{r4, r5, pc}
 801256e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012572:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012576:	2d19      	cmp	r5, #25
 8012578:	bf98      	it	ls
 801257a:	3220      	addls	r2, #32
 801257c:	42a2      	cmp	r2, r4
 801257e:	d0f0      	beq.n	8012562 <__match+0x6>
 8012580:	2000      	movs	r0, #0
 8012582:	e7f3      	b.n	801256c <__match+0x10>

08012584 <__hexnan>:
 8012584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012588:	680b      	ldr	r3, [r1, #0]
 801258a:	6801      	ldr	r1, [r0, #0]
 801258c:	115e      	asrs	r6, r3, #5
 801258e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012592:	f013 031f 	ands.w	r3, r3, #31
 8012596:	b087      	sub	sp, #28
 8012598:	bf18      	it	ne
 801259a:	3604      	addne	r6, #4
 801259c:	2500      	movs	r5, #0
 801259e:	1f37      	subs	r7, r6, #4
 80125a0:	4682      	mov	sl, r0
 80125a2:	4690      	mov	r8, r2
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80125aa:	46b9      	mov	r9, r7
 80125ac:	463c      	mov	r4, r7
 80125ae:	9502      	str	r5, [sp, #8]
 80125b0:	46ab      	mov	fp, r5
 80125b2:	784a      	ldrb	r2, [r1, #1]
 80125b4:	1c4b      	adds	r3, r1, #1
 80125b6:	9303      	str	r3, [sp, #12]
 80125b8:	b342      	cbz	r2, 801260c <__hexnan+0x88>
 80125ba:	4610      	mov	r0, r2
 80125bc:	9105      	str	r1, [sp, #20]
 80125be:	9204      	str	r2, [sp, #16]
 80125c0:	f7ff fd76 	bl	80120b0 <__hexdig_fun>
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d14f      	bne.n	8012668 <__hexnan+0xe4>
 80125c8:	9a04      	ldr	r2, [sp, #16]
 80125ca:	9905      	ldr	r1, [sp, #20]
 80125cc:	2a20      	cmp	r2, #32
 80125ce:	d818      	bhi.n	8012602 <__hexnan+0x7e>
 80125d0:	9b02      	ldr	r3, [sp, #8]
 80125d2:	459b      	cmp	fp, r3
 80125d4:	dd13      	ble.n	80125fe <__hexnan+0x7a>
 80125d6:	454c      	cmp	r4, r9
 80125d8:	d206      	bcs.n	80125e8 <__hexnan+0x64>
 80125da:	2d07      	cmp	r5, #7
 80125dc:	dc04      	bgt.n	80125e8 <__hexnan+0x64>
 80125de:	462a      	mov	r2, r5
 80125e0:	4649      	mov	r1, r9
 80125e2:	4620      	mov	r0, r4
 80125e4:	f7ff ffa8 	bl	8012538 <L_shift>
 80125e8:	4544      	cmp	r4, r8
 80125ea:	d950      	bls.n	801268e <__hexnan+0x10a>
 80125ec:	2300      	movs	r3, #0
 80125ee:	f1a4 0904 	sub.w	r9, r4, #4
 80125f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80125f6:	f8cd b008 	str.w	fp, [sp, #8]
 80125fa:	464c      	mov	r4, r9
 80125fc:	461d      	mov	r5, r3
 80125fe:	9903      	ldr	r1, [sp, #12]
 8012600:	e7d7      	b.n	80125b2 <__hexnan+0x2e>
 8012602:	2a29      	cmp	r2, #41	; 0x29
 8012604:	d155      	bne.n	80126b2 <__hexnan+0x12e>
 8012606:	3102      	adds	r1, #2
 8012608:	f8ca 1000 	str.w	r1, [sl]
 801260c:	f1bb 0f00 	cmp.w	fp, #0
 8012610:	d04f      	beq.n	80126b2 <__hexnan+0x12e>
 8012612:	454c      	cmp	r4, r9
 8012614:	d206      	bcs.n	8012624 <__hexnan+0xa0>
 8012616:	2d07      	cmp	r5, #7
 8012618:	dc04      	bgt.n	8012624 <__hexnan+0xa0>
 801261a:	462a      	mov	r2, r5
 801261c:	4649      	mov	r1, r9
 801261e:	4620      	mov	r0, r4
 8012620:	f7ff ff8a 	bl	8012538 <L_shift>
 8012624:	4544      	cmp	r4, r8
 8012626:	d934      	bls.n	8012692 <__hexnan+0x10e>
 8012628:	f1a8 0204 	sub.w	r2, r8, #4
 801262c:	4623      	mov	r3, r4
 801262e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012632:	f842 1f04 	str.w	r1, [r2, #4]!
 8012636:	429f      	cmp	r7, r3
 8012638:	d2f9      	bcs.n	801262e <__hexnan+0xaa>
 801263a:	1b3b      	subs	r3, r7, r4
 801263c:	f023 0303 	bic.w	r3, r3, #3
 8012640:	3304      	adds	r3, #4
 8012642:	3e03      	subs	r6, #3
 8012644:	3401      	adds	r4, #1
 8012646:	42a6      	cmp	r6, r4
 8012648:	bf38      	it	cc
 801264a:	2304      	movcc	r3, #4
 801264c:	4443      	add	r3, r8
 801264e:	2200      	movs	r2, #0
 8012650:	f843 2b04 	str.w	r2, [r3], #4
 8012654:	429f      	cmp	r7, r3
 8012656:	d2fb      	bcs.n	8012650 <__hexnan+0xcc>
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	b91b      	cbnz	r3, 8012664 <__hexnan+0xe0>
 801265c:	4547      	cmp	r7, r8
 801265e:	d126      	bne.n	80126ae <__hexnan+0x12a>
 8012660:	2301      	movs	r3, #1
 8012662:	603b      	str	r3, [r7, #0]
 8012664:	2005      	movs	r0, #5
 8012666:	e025      	b.n	80126b4 <__hexnan+0x130>
 8012668:	3501      	adds	r5, #1
 801266a:	2d08      	cmp	r5, #8
 801266c:	f10b 0b01 	add.w	fp, fp, #1
 8012670:	dd06      	ble.n	8012680 <__hexnan+0xfc>
 8012672:	4544      	cmp	r4, r8
 8012674:	d9c3      	bls.n	80125fe <__hexnan+0x7a>
 8012676:	2300      	movs	r3, #0
 8012678:	f844 3c04 	str.w	r3, [r4, #-4]
 801267c:	2501      	movs	r5, #1
 801267e:	3c04      	subs	r4, #4
 8012680:	6822      	ldr	r2, [r4, #0]
 8012682:	f000 000f 	and.w	r0, r0, #15
 8012686:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801268a:	6020      	str	r0, [r4, #0]
 801268c:	e7b7      	b.n	80125fe <__hexnan+0x7a>
 801268e:	2508      	movs	r5, #8
 8012690:	e7b5      	b.n	80125fe <__hexnan+0x7a>
 8012692:	9b01      	ldr	r3, [sp, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d0df      	beq.n	8012658 <__hexnan+0xd4>
 8012698:	f1c3 0320 	rsb	r3, r3, #32
 801269c:	f04f 32ff 	mov.w	r2, #4294967295
 80126a0:	40da      	lsrs	r2, r3
 80126a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126a6:	4013      	ands	r3, r2
 80126a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80126ac:	e7d4      	b.n	8012658 <__hexnan+0xd4>
 80126ae:	3f04      	subs	r7, #4
 80126b0:	e7d2      	b.n	8012658 <__hexnan+0xd4>
 80126b2:	2004      	movs	r0, #4
 80126b4:	b007      	add	sp, #28
 80126b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126ba <__ascii_mbtowc>:
 80126ba:	b082      	sub	sp, #8
 80126bc:	b901      	cbnz	r1, 80126c0 <__ascii_mbtowc+0x6>
 80126be:	a901      	add	r1, sp, #4
 80126c0:	b142      	cbz	r2, 80126d4 <__ascii_mbtowc+0x1a>
 80126c2:	b14b      	cbz	r3, 80126d8 <__ascii_mbtowc+0x1e>
 80126c4:	7813      	ldrb	r3, [r2, #0]
 80126c6:	600b      	str	r3, [r1, #0]
 80126c8:	7812      	ldrb	r2, [r2, #0]
 80126ca:	1e10      	subs	r0, r2, #0
 80126cc:	bf18      	it	ne
 80126ce:	2001      	movne	r0, #1
 80126d0:	b002      	add	sp, #8
 80126d2:	4770      	bx	lr
 80126d4:	4610      	mov	r0, r2
 80126d6:	e7fb      	b.n	80126d0 <__ascii_mbtowc+0x16>
 80126d8:	f06f 0001 	mvn.w	r0, #1
 80126dc:	e7f8      	b.n	80126d0 <__ascii_mbtowc+0x16>

080126de <_realloc_r>:
 80126de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e2:	4680      	mov	r8, r0
 80126e4:	4614      	mov	r4, r2
 80126e6:	460e      	mov	r6, r1
 80126e8:	b921      	cbnz	r1, 80126f4 <_realloc_r+0x16>
 80126ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126ee:	4611      	mov	r1, r2
 80126f0:	f7fb bb52 	b.w	800dd98 <_malloc_r>
 80126f4:	b92a      	cbnz	r2, 8012702 <_realloc_r+0x24>
 80126f6:	f7fd fb05 	bl	800fd04 <_free_r>
 80126fa:	4625      	mov	r5, r4
 80126fc:	4628      	mov	r0, r5
 80126fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012702:	f000 f8b6 	bl	8012872 <_malloc_usable_size_r>
 8012706:	4284      	cmp	r4, r0
 8012708:	4607      	mov	r7, r0
 801270a:	d802      	bhi.n	8012712 <_realloc_r+0x34>
 801270c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012710:	d812      	bhi.n	8012738 <_realloc_r+0x5a>
 8012712:	4621      	mov	r1, r4
 8012714:	4640      	mov	r0, r8
 8012716:	f7fb fb3f 	bl	800dd98 <_malloc_r>
 801271a:	4605      	mov	r5, r0
 801271c:	2800      	cmp	r0, #0
 801271e:	d0ed      	beq.n	80126fc <_realloc_r+0x1e>
 8012720:	42bc      	cmp	r4, r7
 8012722:	4622      	mov	r2, r4
 8012724:	4631      	mov	r1, r6
 8012726:	bf28      	it	cs
 8012728:	463a      	movcs	r2, r7
 801272a:	f7fc fc5d 	bl	800efe8 <memcpy>
 801272e:	4631      	mov	r1, r6
 8012730:	4640      	mov	r0, r8
 8012732:	f7fd fae7 	bl	800fd04 <_free_r>
 8012736:	e7e1      	b.n	80126fc <_realloc_r+0x1e>
 8012738:	4635      	mov	r5, r6
 801273a:	e7df      	b.n	80126fc <_realloc_r+0x1e>

0801273c <_strtoul_l.constprop.0>:
 801273c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012740:	4f36      	ldr	r7, [pc, #216]	; (801281c <_strtoul_l.constprop.0+0xe0>)
 8012742:	4686      	mov	lr, r0
 8012744:	460d      	mov	r5, r1
 8012746:	4628      	mov	r0, r5
 8012748:	f815 4b01 	ldrb.w	r4, [r5], #1
 801274c:	5d3e      	ldrb	r6, [r7, r4]
 801274e:	f016 0608 	ands.w	r6, r6, #8
 8012752:	d1f8      	bne.n	8012746 <_strtoul_l.constprop.0+0xa>
 8012754:	2c2d      	cmp	r4, #45	; 0x2d
 8012756:	d130      	bne.n	80127ba <_strtoul_l.constprop.0+0x7e>
 8012758:	782c      	ldrb	r4, [r5, #0]
 801275a:	2601      	movs	r6, #1
 801275c:	1c85      	adds	r5, r0, #2
 801275e:	2b00      	cmp	r3, #0
 8012760:	d057      	beq.n	8012812 <_strtoul_l.constprop.0+0xd6>
 8012762:	2b10      	cmp	r3, #16
 8012764:	d109      	bne.n	801277a <_strtoul_l.constprop.0+0x3e>
 8012766:	2c30      	cmp	r4, #48	; 0x30
 8012768:	d107      	bne.n	801277a <_strtoul_l.constprop.0+0x3e>
 801276a:	7828      	ldrb	r0, [r5, #0]
 801276c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012770:	2858      	cmp	r0, #88	; 0x58
 8012772:	d149      	bne.n	8012808 <_strtoul_l.constprop.0+0xcc>
 8012774:	786c      	ldrb	r4, [r5, #1]
 8012776:	2310      	movs	r3, #16
 8012778:	3502      	adds	r5, #2
 801277a:	f04f 38ff 	mov.w	r8, #4294967295
 801277e:	2700      	movs	r7, #0
 8012780:	fbb8 f8f3 	udiv	r8, r8, r3
 8012784:	fb03 f908 	mul.w	r9, r3, r8
 8012788:	ea6f 0909 	mvn.w	r9, r9
 801278c:	4638      	mov	r0, r7
 801278e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012792:	f1bc 0f09 	cmp.w	ip, #9
 8012796:	d815      	bhi.n	80127c4 <_strtoul_l.constprop.0+0x88>
 8012798:	4664      	mov	r4, ip
 801279a:	42a3      	cmp	r3, r4
 801279c:	dd23      	ble.n	80127e6 <_strtoul_l.constprop.0+0xaa>
 801279e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80127a2:	d007      	beq.n	80127b4 <_strtoul_l.constprop.0+0x78>
 80127a4:	4580      	cmp	r8, r0
 80127a6:	d31b      	bcc.n	80127e0 <_strtoul_l.constprop.0+0xa4>
 80127a8:	d101      	bne.n	80127ae <_strtoul_l.constprop.0+0x72>
 80127aa:	45a1      	cmp	r9, r4
 80127ac:	db18      	blt.n	80127e0 <_strtoul_l.constprop.0+0xa4>
 80127ae:	fb00 4003 	mla	r0, r0, r3, r4
 80127b2:	2701      	movs	r7, #1
 80127b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80127b8:	e7e9      	b.n	801278e <_strtoul_l.constprop.0+0x52>
 80127ba:	2c2b      	cmp	r4, #43	; 0x2b
 80127bc:	bf04      	itt	eq
 80127be:	782c      	ldrbeq	r4, [r5, #0]
 80127c0:	1c85      	addeq	r5, r0, #2
 80127c2:	e7cc      	b.n	801275e <_strtoul_l.constprop.0+0x22>
 80127c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80127c8:	f1bc 0f19 	cmp.w	ip, #25
 80127cc:	d801      	bhi.n	80127d2 <_strtoul_l.constprop.0+0x96>
 80127ce:	3c37      	subs	r4, #55	; 0x37
 80127d0:	e7e3      	b.n	801279a <_strtoul_l.constprop.0+0x5e>
 80127d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80127d6:	f1bc 0f19 	cmp.w	ip, #25
 80127da:	d804      	bhi.n	80127e6 <_strtoul_l.constprop.0+0xaa>
 80127dc:	3c57      	subs	r4, #87	; 0x57
 80127de:	e7dc      	b.n	801279a <_strtoul_l.constprop.0+0x5e>
 80127e0:	f04f 37ff 	mov.w	r7, #4294967295
 80127e4:	e7e6      	b.n	80127b4 <_strtoul_l.constprop.0+0x78>
 80127e6:	1c7b      	adds	r3, r7, #1
 80127e8:	d106      	bne.n	80127f8 <_strtoul_l.constprop.0+0xbc>
 80127ea:	2322      	movs	r3, #34	; 0x22
 80127ec:	f8ce 3000 	str.w	r3, [lr]
 80127f0:	4638      	mov	r0, r7
 80127f2:	b932      	cbnz	r2, 8012802 <_strtoul_l.constprop.0+0xc6>
 80127f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127f8:	b106      	cbz	r6, 80127fc <_strtoul_l.constprop.0+0xc0>
 80127fa:	4240      	negs	r0, r0
 80127fc:	2a00      	cmp	r2, #0
 80127fe:	d0f9      	beq.n	80127f4 <_strtoul_l.constprop.0+0xb8>
 8012800:	b107      	cbz	r7, 8012804 <_strtoul_l.constprop.0+0xc8>
 8012802:	1e69      	subs	r1, r5, #1
 8012804:	6011      	str	r1, [r2, #0]
 8012806:	e7f5      	b.n	80127f4 <_strtoul_l.constprop.0+0xb8>
 8012808:	2430      	movs	r4, #48	; 0x30
 801280a:	2b00      	cmp	r3, #0
 801280c:	d1b5      	bne.n	801277a <_strtoul_l.constprop.0+0x3e>
 801280e:	2308      	movs	r3, #8
 8012810:	e7b3      	b.n	801277a <_strtoul_l.constprop.0+0x3e>
 8012812:	2c30      	cmp	r4, #48	; 0x30
 8012814:	d0a9      	beq.n	801276a <_strtoul_l.constprop.0+0x2e>
 8012816:	230a      	movs	r3, #10
 8012818:	e7af      	b.n	801277a <_strtoul_l.constprop.0+0x3e>
 801281a:	bf00      	nop
 801281c:	080142b1 	.word	0x080142b1

08012820 <_strtoul_r>:
 8012820:	f7ff bf8c 	b.w	801273c <_strtoul_l.constprop.0>

08012824 <__ascii_wctomb>:
 8012824:	b149      	cbz	r1, 801283a <__ascii_wctomb+0x16>
 8012826:	2aff      	cmp	r2, #255	; 0xff
 8012828:	bf85      	ittet	hi
 801282a:	238a      	movhi	r3, #138	; 0x8a
 801282c:	6003      	strhi	r3, [r0, #0]
 801282e:	700a      	strbls	r2, [r1, #0]
 8012830:	f04f 30ff 	movhi.w	r0, #4294967295
 8012834:	bf98      	it	ls
 8012836:	2001      	movls	r0, #1
 8012838:	4770      	bx	lr
 801283a:	4608      	mov	r0, r1
 801283c:	4770      	bx	lr
	...

08012840 <fiprintf>:
 8012840:	b40e      	push	{r1, r2, r3}
 8012842:	b503      	push	{r0, r1, lr}
 8012844:	4601      	mov	r1, r0
 8012846:	ab03      	add	r3, sp, #12
 8012848:	4805      	ldr	r0, [pc, #20]	; (8012860 <fiprintf+0x20>)
 801284a:	f853 2b04 	ldr.w	r2, [r3], #4
 801284e:	6800      	ldr	r0, [r0, #0]
 8012850:	9301      	str	r3, [sp, #4]
 8012852:	f000 f83f 	bl	80128d4 <_vfiprintf_r>
 8012856:	b002      	add	sp, #8
 8012858:	f85d eb04 	ldr.w	lr, [sp], #4
 801285c:	b003      	add	sp, #12
 801285e:	4770      	bx	lr
 8012860:	2000006c 	.word	0x2000006c

08012864 <abort>:
 8012864:	b508      	push	{r3, lr}
 8012866:	2006      	movs	r0, #6
 8012868:	f000 fa0c 	bl	8012c84 <raise>
 801286c:	2001      	movs	r0, #1
 801286e:	f7ef fcd5 	bl	800221c <_exit>

08012872 <_malloc_usable_size_r>:
 8012872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012876:	1f18      	subs	r0, r3, #4
 8012878:	2b00      	cmp	r3, #0
 801287a:	bfbc      	itt	lt
 801287c:	580b      	ldrlt	r3, [r1, r0]
 801287e:	18c0      	addlt	r0, r0, r3
 8012880:	4770      	bx	lr

08012882 <__sfputc_r>:
 8012882:	6893      	ldr	r3, [r2, #8]
 8012884:	3b01      	subs	r3, #1
 8012886:	2b00      	cmp	r3, #0
 8012888:	b410      	push	{r4}
 801288a:	6093      	str	r3, [r2, #8]
 801288c:	da08      	bge.n	80128a0 <__sfputc_r+0x1e>
 801288e:	6994      	ldr	r4, [r2, #24]
 8012890:	42a3      	cmp	r3, r4
 8012892:	db01      	blt.n	8012898 <__sfputc_r+0x16>
 8012894:	290a      	cmp	r1, #10
 8012896:	d103      	bne.n	80128a0 <__sfputc_r+0x1e>
 8012898:	f85d 4b04 	ldr.w	r4, [sp], #4
 801289c:	f000 b934 	b.w	8012b08 <__swbuf_r>
 80128a0:	6813      	ldr	r3, [r2, #0]
 80128a2:	1c58      	adds	r0, r3, #1
 80128a4:	6010      	str	r0, [r2, #0]
 80128a6:	7019      	strb	r1, [r3, #0]
 80128a8:	4608      	mov	r0, r1
 80128aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128ae:	4770      	bx	lr

080128b0 <__sfputs_r>:
 80128b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b2:	4606      	mov	r6, r0
 80128b4:	460f      	mov	r7, r1
 80128b6:	4614      	mov	r4, r2
 80128b8:	18d5      	adds	r5, r2, r3
 80128ba:	42ac      	cmp	r4, r5
 80128bc:	d101      	bne.n	80128c2 <__sfputs_r+0x12>
 80128be:	2000      	movs	r0, #0
 80128c0:	e007      	b.n	80128d2 <__sfputs_r+0x22>
 80128c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128c6:	463a      	mov	r2, r7
 80128c8:	4630      	mov	r0, r6
 80128ca:	f7ff ffda 	bl	8012882 <__sfputc_r>
 80128ce:	1c43      	adds	r3, r0, #1
 80128d0:	d1f3      	bne.n	80128ba <__sfputs_r+0xa>
 80128d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080128d4 <_vfiprintf_r>:
 80128d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d8:	460d      	mov	r5, r1
 80128da:	b09d      	sub	sp, #116	; 0x74
 80128dc:	4614      	mov	r4, r2
 80128de:	4698      	mov	r8, r3
 80128e0:	4606      	mov	r6, r0
 80128e2:	b118      	cbz	r0, 80128ec <_vfiprintf_r+0x18>
 80128e4:	6a03      	ldr	r3, [r0, #32]
 80128e6:	b90b      	cbnz	r3, 80128ec <_vfiprintf_r+0x18>
 80128e8:	f7fc f9d2 	bl	800ec90 <__sinit>
 80128ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128ee:	07d9      	lsls	r1, r3, #31
 80128f0:	d405      	bmi.n	80128fe <_vfiprintf_r+0x2a>
 80128f2:	89ab      	ldrh	r3, [r5, #12]
 80128f4:	059a      	lsls	r2, r3, #22
 80128f6:	d402      	bmi.n	80128fe <_vfiprintf_r+0x2a>
 80128f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128fa:	f7fc fb73 	bl	800efe4 <__retarget_lock_acquire_recursive>
 80128fe:	89ab      	ldrh	r3, [r5, #12]
 8012900:	071b      	lsls	r3, r3, #28
 8012902:	d501      	bpl.n	8012908 <_vfiprintf_r+0x34>
 8012904:	692b      	ldr	r3, [r5, #16]
 8012906:	b99b      	cbnz	r3, 8012930 <_vfiprintf_r+0x5c>
 8012908:	4629      	mov	r1, r5
 801290a:	4630      	mov	r0, r6
 801290c:	f000 f93a 	bl	8012b84 <__swsetup_r>
 8012910:	b170      	cbz	r0, 8012930 <_vfiprintf_r+0x5c>
 8012912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012914:	07dc      	lsls	r4, r3, #31
 8012916:	d504      	bpl.n	8012922 <_vfiprintf_r+0x4e>
 8012918:	f04f 30ff 	mov.w	r0, #4294967295
 801291c:	b01d      	add	sp, #116	; 0x74
 801291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012922:	89ab      	ldrh	r3, [r5, #12]
 8012924:	0598      	lsls	r0, r3, #22
 8012926:	d4f7      	bmi.n	8012918 <_vfiprintf_r+0x44>
 8012928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801292a:	f7fc fb5c 	bl	800efe6 <__retarget_lock_release_recursive>
 801292e:	e7f3      	b.n	8012918 <_vfiprintf_r+0x44>
 8012930:	2300      	movs	r3, #0
 8012932:	9309      	str	r3, [sp, #36]	; 0x24
 8012934:	2320      	movs	r3, #32
 8012936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801293a:	f8cd 800c 	str.w	r8, [sp, #12]
 801293e:	2330      	movs	r3, #48	; 0x30
 8012940:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012af4 <_vfiprintf_r+0x220>
 8012944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012948:	f04f 0901 	mov.w	r9, #1
 801294c:	4623      	mov	r3, r4
 801294e:	469a      	mov	sl, r3
 8012950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012954:	b10a      	cbz	r2, 801295a <_vfiprintf_r+0x86>
 8012956:	2a25      	cmp	r2, #37	; 0x25
 8012958:	d1f9      	bne.n	801294e <_vfiprintf_r+0x7a>
 801295a:	ebba 0b04 	subs.w	fp, sl, r4
 801295e:	d00b      	beq.n	8012978 <_vfiprintf_r+0xa4>
 8012960:	465b      	mov	r3, fp
 8012962:	4622      	mov	r2, r4
 8012964:	4629      	mov	r1, r5
 8012966:	4630      	mov	r0, r6
 8012968:	f7ff ffa2 	bl	80128b0 <__sfputs_r>
 801296c:	3001      	adds	r0, #1
 801296e:	f000 80a9 	beq.w	8012ac4 <_vfiprintf_r+0x1f0>
 8012972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012974:	445a      	add	r2, fp
 8012976:	9209      	str	r2, [sp, #36]	; 0x24
 8012978:	f89a 3000 	ldrb.w	r3, [sl]
 801297c:	2b00      	cmp	r3, #0
 801297e:	f000 80a1 	beq.w	8012ac4 <_vfiprintf_r+0x1f0>
 8012982:	2300      	movs	r3, #0
 8012984:	f04f 32ff 	mov.w	r2, #4294967295
 8012988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801298c:	f10a 0a01 	add.w	sl, sl, #1
 8012990:	9304      	str	r3, [sp, #16]
 8012992:	9307      	str	r3, [sp, #28]
 8012994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012998:	931a      	str	r3, [sp, #104]	; 0x68
 801299a:	4654      	mov	r4, sl
 801299c:	2205      	movs	r2, #5
 801299e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129a2:	4854      	ldr	r0, [pc, #336]	; (8012af4 <_vfiprintf_r+0x220>)
 80129a4:	f7ed fc34 	bl	8000210 <memchr>
 80129a8:	9a04      	ldr	r2, [sp, #16]
 80129aa:	b9d8      	cbnz	r0, 80129e4 <_vfiprintf_r+0x110>
 80129ac:	06d1      	lsls	r1, r2, #27
 80129ae:	bf44      	itt	mi
 80129b0:	2320      	movmi	r3, #32
 80129b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129b6:	0713      	lsls	r3, r2, #28
 80129b8:	bf44      	itt	mi
 80129ba:	232b      	movmi	r3, #43	; 0x2b
 80129bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129c0:	f89a 3000 	ldrb.w	r3, [sl]
 80129c4:	2b2a      	cmp	r3, #42	; 0x2a
 80129c6:	d015      	beq.n	80129f4 <_vfiprintf_r+0x120>
 80129c8:	9a07      	ldr	r2, [sp, #28]
 80129ca:	4654      	mov	r4, sl
 80129cc:	2000      	movs	r0, #0
 80129ce:	f04f 0c0a 	mov.w	ip, #10
 80129d2:	4621      	mov	r1, r4
 80129d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129d8:	3b30      	subs	r3, #48	; 0x30
 80129da:	2b09      	cmp	r3, #9
 80129dc:	d94d      	bls.n	8012a7a <_vfiprintf_r+0x1a6>
 80129de:	b1b0      	cbz	r0, 8012a0e <_vfiprintf_r+0x13a>
 80129e0:	9207      	str	r2, [sp, #28]
 80129e2:	e014      	b.n	8012a0e <_vfiprintf_r+0x13a>
 80129e4:	eba0 0308 	sub.w	r3, r0, r8
 80129e8:	fa09 f303 	lsl.w	r3, r9, r3
 80129ec:	4313      	orrs	r3, r2
 80129ee:	9304      	str	r3, [sp, #16]
 80129f0:	46a2      	mov	sl, r4
 80129f2:	e7d2      	b.n	801299a <_vfiprintf_r+0xc6>
 80129f4:	9b03      	ldr	r3, [sp, #12]
 80129f6:	1d19      	adds	r1, r3, #4
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	9103      	str	r1, [sp, #12]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	bfbb      	ittet	lt
 8012a00:	425b      	neglt	r3, r3
 8012a02:	f042 0202 	orrlt.w	r2, r2, #2
 8012a06:	9307      	strge	r3, [sp, #28]
 8012a08:	9307      	strlt	r3, [sp, #28]
 8012a0a:	bfb8      	it	lt
 8012a0c:	9204      	strlt	r2, [sp, #16]
 8012a0e:	7823      	ldrb	r3, [r4, #0]
 8012a10:	2b2e      	cmp	r3, #46	; 0x2e
 8012a12:	d10c      	bne.n	8012a2e <_vfiprintf_r+0x15a>
 8012a14:	7863      	ldrb	r3, [r4, #1]
 8012a16:	2b2a      	cmp	r3, #42	; 0x2a
 8012a18:	d134      	bne.n	8012a84 <_vfiprintf_r+0x1b0>
 8012a1a:	9b03      	ldr	r3, [sp, #12]
 8012a1c:	1d1a      	adds	r2, r3, #4
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	9203      	str	r2, [sp, #12]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	bfb8      	it	lt
 8012a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a2a:	3402      	adds	r4, #2
 8012a2c:	9305      	str	r3, [sp, #20]
 8012a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012b04 <_vfiprintf_r+0x230>
 8012a32:	7821      	ldrb	r1, [r4, #0]
 8012a34:	2203      	movs	r2, #3
 8012a36:	4650      	mov	r0, sl
 8012a38:	f7ed fbea 	bl	8000210 <memchr>
 8012a3c:	b138      	cbz	r0, 8012a4e <_vfiprintf_r+0x17a>
 8012a3e:	9b04      	ldr	r3, [sp, #16]
 8012a40:	eba0 000a 	sub.w	r0, r0, sl
 8012a44:	2240      	movs	r2, #64	; 0x40
 8012a46:	4082      	lsls	r2, r0
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	3401      	adds	r4, #1
 8012a4c:	9304      	str	r3, [sp, #16]
 8012a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a52:	4829      	ldr	r0, [pc, #164]	; (8012af8 <_vfiprintf_r+0x224>)
 8012a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a58:	2206      	movs	r2, #6
 8012a5a:	f7ed fbd9 	bl	8000210 <memchr>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d03f      	beq.n	8012ae2 <_vfiprintf_r+0x20e>
 8012a62:	4b26      	ldr	r3, [pc, #152]	; (8012afc <_vfiprintf_r+0x228>)
 8012a64:	bb1b      	cbnz	r3, 8012aae <_vfiprintf_r+0x1da>
 8012a66:	9b03      	ldr	r3, [sp, #12]
 8012a68:	3307      	adds	r3, #7
 8012a6a:	f023 0307 	bic.w	r3, r3, #7
 8012a6e:	3308      	adds	r3, #8
 8012a70:	9303      	str	r3, [sp, #12]
 8012a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a74:	443b      	add	r3, r7
 8012a76:	9309      	str	r3, [sp, #36]	; 0x24
 8012a78:	e768      	b.n	801294c <_vfiprintf_r+0x78>
 8012a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a7e:	460c      	mov	r4, r1
 8012a80:	2001      	movs	r0, #1
 8012a82:	e7a6      	b.n	80129d2 <_vfiprintf_r+0xfe>
 8012a84:	2300      	movs	r3, #0
 8012a86:	3401      	adds	r4, #1
 8012a88:	9305      	str	r3, [sp, #20]
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	f04f 0c0a 	mov.w	ip, #10
 8012a90:	4620      	mov	r0, r4
 8012a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a96:	3a30      	subs	r2, #48	; 0x30
 8012a98:	2a09      	cmp	r2, #9
 8012a9a:	d903      	bls.n	8012aa4 <_vfiprintf_r+0x1d0>
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d0c6      	beq.n	8012a2e <_vfiprintf_r+0x15a>
 8012aa0:	9105      	str	r1, [sp, #20]
 8012aa2:	e7c4      	b.n	8012a2e <_vfiprintf_r+0x15a>
 8012aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	2301      	movs	r3, #1
 8012aac:	e7f0      	b.n	8012a90 <_vfiprintf_r+0x1bc>
 8012aae:	ab03      	add	r3, sp, #12
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	462a      	mov	r2, r5
 8012ab4:	4b12      	ldr	r3, [pc, #72]	; (8012b00 <_vfiprintf_r+0x22c>)
 8012ab6:	a904      	add	r1, sp, #16
 8012ab8:	4630      	mov	r0, r6
 8012aba:	f7fb fa99 	bl	800dff0 <_printf_float>
 8012abe:	4607      	mov	r7, r0
 8012ac0:	1c78      	adds	r0, r7, #1
 8012ac2:	d1d6      	bne.n	8012a72 <_vfiprintf_r+0x19e>
 8012ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ac6:	07d9      	lsls	r1, r3, #31
 8012ac8:	d405      	bmi.n	8012ad6 <_vfiprintf_r+0x202>
 8012aca:	89ab      	ldrh	r3, [r5, #12]
 8012acc:	059a      	lsls	r2, r3, #22
 8012ace:	d402      	bmi.n	8012ad6 <_vfiprintf_r+0x202>
 8012ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ad2:	f7fc fa88 	bl	800efe6 <__retarget_lock_release_recursive>
 8012ad6:	89ab      	ldrh	r3, [r5, #12]
 8012ad8:	065b      	lsls	r3, r3, #25
 8012ada:	f53f af1d 	bmi.w	8012918 <_vfiprintf_r+0x44>
 8012ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ae0:	e71c      	b.n	801291c <_vfiprintf_r+0x48>
 8012ae2:	ab03      	add	r3, sp, #12
 8012ae4:	9300      	str	r3, [sp, #0]
 8012ae6:	462a      	mov	r2, r5
 8012ae8:	4b05      	ldr	r3, [pc, #20]	; (8012b00 <_vfiprintf_r+0x22c>)
 8012aea:	a904      	add	r1, sp, #16
 8012aec:	4630      	mov	r0, r6
 8012aee:	f7fb fd23 	bl	800e538 <_printf_i>
 8012af2:	e7e4      	b.n	8012abe <_vfiprintf_r+0x1ea>
 8012af4:	080143b1 	.word	0x080143b1
 8012af8:	080143bb 	.word	0x080143bb
 8012afc:	0800dff1 	.word	0x0800dff1
 8012b00:	080128b1 	.word	0x080128b1
 8012b04:	080143b7 	.word	0x080143b7

08012b08 <__swbuf_r>:
 8012b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b0a:	460e      	mov	r6, r1
 8012b0c:	4614      	mov	r4, r2
 8012b0e:	4605      	mov	r5, r0
 8012b10:	b118      	cbz	r0, 8012b1a <__swbuf_r+0x12>
 8012b12:	6a03      	ldr	r3, [r0, #32]
 8012b14:	b90b      	cbnz	r3, 8012b1a <__swbuf_r+0x12>
 8012b16:	f7fc f8bb 	bl	800ec90 <__sinit>
 8012b1a:	69a3      	ldr	r3, [r4, #24]
 8012b1c:	60a3      	str	r3, [r4, #8]
 8012b1e:	89a3      	ldrh	r3, [r4, #12]
 8012b20:	071a      	lsls	r2, r3, #28
 8012b22:	d525      	bpl.n	8012b70 <__swbuf_r+0x68>
 8012b24:	6923      	ldr	r3, [r4, #16]
 8012b26:	b31b      	cbz	r3, 8012b70 <__swbuf_r+0x68>
 8012b28:	6823      	ldr	r3, [r4, #0]
 8012b2a:	6922      	ldr	r2, [r4, #16]
 8012b2c:	1a98      	subs	r0, r3, r2
 8012b2e:	6963      	ldr	r3, [r4, #20]
 8012b30:	b2f6      	uxtb	r6, r6
 8012b32:	4283      	cmp	r3, r0
 8012b34:	4637      	mov	r7, r6
 8012b36:	dc04      	bgt.n	8012b42 <__swbuf_r+0x3a>
 8012b38:	4621      	mov	r1, r4
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f7ff f978 	bl	8011e30 <_fflush_r>
 8012b40:	b9e0      	cbnz	r0, 8012b7c <__swbuf_r+0x74>
 8012b42:	68a3      	ldr	r3, [r4, #8]
 8012b44:	3b01      	subs	r3, #1
 8012b46:	60a3      	str	r3, [r4, #8]
 8012b48:	6823      	ldr	r3, [r4, #0]
 8012b4a:	1c5a      	adds	r2, r3, #1
 8012b4c:	6022      	str	r2, [r4, #0]
 8012b4e:	701e      	strb	r6, [r3, #0]
 8012b50:	6962      	ldr	r2, [r4, #20]
 8012b52:	1c43      	adds	r3, r0, #1
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d004      	beq.n	8012b62 <__swbuf_r+0x5a>
 8012b58:	89a3      	ldrh	r3, [r4, #12]
 8012b5a:	07db      	lsls	r3, r3, #31
 8012b5c:	d506      	bpl.n	8012b6c <__swbuf_r+0x64>
 8012b5e:	2e0a      	cmp	r6, #10
 8012b60:	d104      	bne.n	8012b6c <__swbuf_r+0x64>
 8012b62:	4621      	mov	r1, r4
 8012b64:	4628      	mov	r0, r5
 8012b66:	f7ff f963 	bl	8011e30 <_fflush_r>
 8012b6a:	b938      	cbnz	r0, 8012b7c <__swbuf_r+0x74>
 8012b6c:	4638      	mov	r0, r7
 8012b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b70:	4621      	mov	r1, r4
 8012b72:	4628      	mov	r0, r5
 8012b74:	f000 f806 	bl	8012b84 <__swsetup_r>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d0d5      	beq.n	8012b28 <__swbuf_r+0x20>
 8012b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8012b80:	e7f4      	b.n	8012b6c <__swbuf_r+0x64>
	...

08012b84 <__swsetup_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4b2a      	ldr	r3, [pc, #168]	; (8012c30 <__swsetup_r+0xac>)
 8012b88:	4605      	mov	r5, r0
 8012b8a:	6818      	ldr	r0, [r3, #0]
 8012b8c:	460c      	mov	r4, r1
 8012b8e:	b118      	cbz	r0, 8012b98 <__swsetup_r+0x14>
 8012b90:	6a03      	ldr	r3, [r0, #32]
 8012b92:	b90b      	cbnz	r3, 8012b98 <__swsetup_r+0x14>
 8012b94:	f7fc f87c 	bl	800ec90 <__sinit>
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b9e:	0718      	lsls	r0, r3, #28
 8012ba0:	d422      	bmi.n	8012be8 <__swsetup_r+0x64>
 8012ba2:	06d9      	lsls	r1, r3, #27
 8012ba4:	d407      	bmi.n	8012bb6 <__swsetup_r+0x32>
 8012ba6:	2309      	movs	r3, #9
 8012ba8:	602b      	str	r3, [r5, #0]
 8012baa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bae:	81a3      	strh	r3, [r4, #12]
 8012bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb4:	e034      	b.n	8012c20 <__swsetup_r+0x9c>
 8012bb6:	0758      	lsls	r0, r3, #29
 8012bb8:	d512      	bpl.n	8012be0 <__swsetup_r+0x5c>
 8012bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bbc:	b141      	cbz	r1, 8012bd0 <__swsetup_r+0x4c>
 8012bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bc2:	4299      	cmp	r1, r3
 8012bc4:	d002      	beq.n	8012bcc <__swsetup_r+0x48>
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f7fd f89c 	bl	800fd04 <_free_r>
 8012bcc:	2300      	movs	r3, #0
 8012bce:	6363      	str	r3, [r4, #52]	; 0x34
 8012bd0:	89a3      	ldrh	r3, [r4, #12]
 8012bd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012bd6:	81a3      	strh	r3, [r4, #12]
 8012bd8:	2300      	movs	r3, #0
 8012bda:	6063      	str	r3, [r4, #4]
 8012bdc:	6923      	ldr	r3, [r4, #16]
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	f043 0308 	orr.w	r3, r3, #8
 8012be6:	81a3      	strh	r3, [r4, #12]
 8012be8:	6923      	ldr	r3, [r4, #16]
 8012bea:	b94b      	cbnz	r3, 8012c00 <__swsetup_r+0x7c>
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bf6:	d003      	beq.n	8012c00 <__swsetup_r+0x7c>
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f000 f884 	bl	8012d08 <__smakebuf_r>
 8012c00:	89a0      	ldrh	r0, [r4, #12]
 8012c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c06:	f010 0301 	ands.w	r3, r0, #1
 8012c0a:	d00a      	beq.n	8012c22 <__swsetup_r+0x9e>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	60a3      	str	r3, [r4, #8]
 8012c10:	6963      	ldr	r3, [r4, #20]
 8012c12:	425b      	negs	r3, r3
 8012c14:	61a3      	str	r3, [r4, #24]
 8012c16:	6923      	ldr	r3, [r4, #16]
 8012c18:	b943      	cbnz	r3, 8012c2c <__swsetup_r+0xa8>
 8012c1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c1e:	d1c4      	bne.n	8012baa <__swsetup_r+0x26>
 8012c20:	bd38      	pop	{r3, r4, r5, pc}
 8012c22:	0781      	lsls	r1, r0, #30
 8012c24:	bf58      	it	pl
 8012c26:	6963      	ldrpl	r3, [r4, #20]
 8012c28:	60a3      	str	r3, [r4, #8]
 8012c2a:	e7f4      	b.n	8012c16 <__swsetup_r+0x92>
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	e7f7      	b.n	8012c20 <__swsetup_r+0x9c>
 8012c30:	2000006c 	.word	0x2000006c

08012c34 <_raise_r>:
 8012c34:	291f      	cmp	r1, #31
 8012c36:	b538      	push	{r3, r4, r5, lr}
 8012c38:	4604      	mov	r4, r0
 8012c3a:	460d      	mov	r5, r1
 8012c3c:	d904      	bls.n	8012c48 <_raise_r+0x14>
 8012c3e:	2316      	movs	r3, #22
 8012c40:	6003      	str	r3, [r0, #0]
 8012c42:	f04f 30ff 	mov.w	r0, #4294967295
 8012c46:	bd38      	pop	{r3, r4, r5, pc}
 8012c48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012c4a:	b112      	cbz	r2, 8012c52 <_raise_r+0x1e>
 8012c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c50:	b94b      	cbnz	r3, 8012c66 <_raise_r+0x32>
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 f830 	bl	8012cb8 <_getpid_r>
 8012c58:	462a      	mov	r2, r5
 8012c5a:	4601      	mov	r1, r0
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c62:	f000 b817 	b.w	8012c94 <_kill_r>
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d00a      	beq.n	8012c80 <_raise_r+0x4c>
 8012c6a:	1c59      	adds	r1, r3, #1
 8012c6c:	d103      	bne.n	8012c76 <_raise_r+0x42>
 8012c6e:	2316      	movs	r3, #22
 8012c70:	6003      	str	r3, [r0, #0]
 8012c72:	2001      	movs	r0, #1
 8012c74:	e7e7      	b.n	8012c46 <_raise_r+0x12>
 8012c76:	2400      	movs	r4, #0
 8012c78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	4798      	blx	r3
 8012c80:	2000      	movs	r0, #0
 8012c82:	e7e0      	b.n	8012c46 <_raise_r+0x12>

08012c84 <raise>:
 8012c84:	4b02      	ldr	r3, [pc, #8]	; (8012c90 <raise+0xc>)
 8012c86:	4601      	mov	r1, r0
 8012c88:	6818      	ldr	r0, [r3, #0]
 8012c8a:	f7ff bfd3 	b.w	8012c34 <_raise_r>
 8012c8e:	bf00      	nop
 8012c90:	2000006c 	.word	0x2000006c

08012c94 <_kill_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	4d07      	ldr	r5, [pc, #28]	; (8012cb4 <_kill_r+0x20>)
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	4608      	mov	r0, r1
 8012c9e:	4611      	mov	r1, r2
 8012ca0:	602b      	str	r3, [r5, #0]
 8012ca2:	f7ef faab 	bl	80021fc <_kill>
 8012ca6:	1c43      	adds	r3, r0, #1
 8012ca8:	d102      	bne.n	8012cb0 <_kill_r+0x1c>
 8012caa:	682b      	ldr	r3, [r5, #0]
 8012cac:	b103      	cbz	r3, 8012cb0 <_kill_r+0x1c>
 8012cae:	6023      	str	r3, [r4, #0]
 8012cb0:	bd38      	pop	{r3, r4, r5, pc}
 8012cb2:	bf00      	nop
 8012cb4:	20007170 	.word	0x20007170

08012cb8 <_getpid_r>:
 8012cb8:	f7ef ba98 	b.w	80021ec <_getpid>

08012cbc <__swhatbuf_r>:
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	460c      	mov	r4, r1
 8012cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cc4:	2900      	cmp	r1, #0
 8012cc6:	b096      	sub	sp, #88	; 0x58
 8012cc8:	4615      	mov	r5, r2
 8012cca:	461e      	mov	r6, r3
 8012ccc:	da0d      	bge.n	8012cea <__swhatbuf_r+0x2e>
 8012cce:	89a3      	ldrh	r3, [r4, #12]
 8012cd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012cd4:	f04f 0100 	mov.w	r1, #0
 8012cd8:	bf0c      	ite	eq
 8012cda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012cde:	2340      	movne	r3, #64	; 0x40
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	6031      	str	r1, [r6, #0]
 8012ce4:	602b      	str	r3, [r5, #0]
 8012ce6:	b016      	add	sp, #88	; 0x58
 8012ce8:	bd70      	pop	{r4, r5, r6, pc}
 8012cea:	466a      	mov	r2, sp
 8012cec:	f000 f848 	bl	8012d80 <_fstat_r>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	dbec      	blt.n	8012cce <__swhatbuf_r+0x12>
 8012cf4:	9901      	ldr	r1, [sp, #4]
 8012cf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012cfa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012cfe:	4259      	negs	r1, r3
 8012d00:	4159      	adcs	r1, r3
 8012d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d06:	e7eb      	b.n	8012ce0 <__swhatbuf_r+0x24>

08012d08 <__smakebuf_r>:
 8012d08:	898b      	ldrh	r3, [r1, #12]
 8012d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d0c:	079d      	lsls	r5, r3, #30
 8012d0e:	4606      	mov	r6, r0
 8012d10:	460c      	mov	r4, r1
 8012d12:	d507      	bpl.n	8012d24 <__smakebuf_r+0x1c>
 8012d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d18:	6023      	str	r3, [r4, #0]
 8012d1a:	6123      	str	r3, [r4, #16]
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	6163      	str	r3, [r4, #20]
 8012d20:	b002      	add	sp, #8
 8012d22:	bd70      	pop	{r4, r5, r6, pc}
 8012d24:	ab01      	add	r3, sp, #4
 8012d26:	466a      	mov	r2, sp
 8012d28:	f7ff ffc8 	bl	8012cbc <__swhatbuf_r>
 8012d2c:	9900      	ldr	r1, [sp, #0]
 8012d2e:	4605      	mov	r5, r0
 8012d30:	4630      	mov	r0, r6
 8012d32:	f7fb f831 	bl	800dd98 <_malloc_r>
 8012d36:	b948      	cbnz	r0, 8012d4c <__smakebuf_r+0x44>
 8012d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d3c:	059a      	lsls	r2, r3, #22
 8012d3e:	d4ef      	bmi.n	8012d20 <__smakebuf_r+0x18>
 8012d40:	f023 0303 	bic.w	r3, r3, #3
 8012d44:	f043 0302 	orr.w	r3, r3, #2
 8012d48:	81a3      	strh	r3, [r4, #12]
 8012d4a:	e7e3      	b.n	8012d14 <__smakebuf_r+0xc>
 8012d4c:	89a3      	ldrh	r3, [r4, #12]
 8012d4e:	6020      	str	r0, [r4, #0]
 8012d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d54:	81a3      	strh	r3, [r4, #12]
 8012d56:	9b00      	ldr	r3, [sp, #0]
 8012d58:	6163      	str	r3, [r4, #20]
 8012d5a:	9b01      	ldr	r3, [sp, #4]
 8012d5c:	6120      	str	r0, [r4, #16]
 8012d5e:	b15b      	cbz	r3, 8012d78 <__smakebuf_r+0x70>
 8012d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d64:	4630      	mov	r0, r6
 8012d66:	f000 f81d 	bl	8012da4 <_isatty_r>
 8012d6a:	b128      	cbz	r0, 8012d78 <__smakebuf_r+0x70>
 8012d6c:	89a3      	ldrh	r3, [r4, #12]
 8012d6e:	f023 0303 	bic.w	r3, r3, #3
 8012d72:	f043 0301 	orr.w	r3, r3, #1
 8012d76:	81a3      	strh	r3, [r4, #12]
 8012d78:	89a3      	ldrh	r3, [r4, #12]
 8012d7a:	431d      	orrs	r5, r3
 8012d7c:	81a5      	strh	r5, [r4, #12]
 8012d7e:	e7cf      	b.n	8012d20 <__smakebuf_r+0x18>

08012d80 <_fstat_r>:
 8012d80:	b538      	push	{r3, r4, r5, lr}
 8012d82:	4d07      	ldr	r5, [pc, #28]	; (8012da0 <_fstat_r+0x20>)
 8012d84:	2300      	movs	r3, #0
 8012d86:	4604      	mov	r4, r0
 8012d88:	4608      	mov	r0, r1
 8012d8a:	4611      	mov	r1, r2
 8012d8c:	602b      	str	r3, [r5, #0]
 8012d8e:	f7ef fa94 	bl	80022ba <_fstat>
 8012d92:	1c43      	adds	r3, r0, #1
 8012d94:	d102      	bne.n	8012d9c <_fstat_r+0x1c>
 8012d96:	682b      	ldr	r3, [r5, #0]
 8012d98:	b103      	cbz	r3, 8012d9c <_fstat_r+0x1c>
 8012d9a:	6023      	str	r3, [r4, #0]
 8012d9c:	bd38      	pop	{r3, r4, r5, pc}
 8012d9e:	bf00      	nop
 8012da0:	20007170 	.word	0x20007170

08012da4 <_isatty_r>:
 8012da4:	b538      	push	{r3, r4, r5, lr}
 8012da6:	4d06      	ldr	r5, [pc, #24]	; (8012dc0 <_isatty_r+0x1c>)
 8012da8:	2300      	movs	r3, #0
 8012daa:	4604      	mov	r4, r0
 8012dac:	4608      	mov	r0, r1
 8012dae:	602b      	str	r3, [r5, #0]
 8012db0:	f7ef fa93 	bl	80022da <_isatty>
 8012db4:	1c43      	adds	r3, r0, #1
 8012db6:	d102      	bne.n	8012dbe <_isatty_r+0x1a>
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	b103      	cbz	r3, 8012dbe <_isatty_r+0x1a>
 8012dbc:	6023      	str	r3, [r4, #0]
 8012dbe:	bd38      	pop	{r3, r4, r5, pc}
 8012dc0:	20007170 	.word	0x20007170

08012dc4 <pow>:
 8012dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc6:	ed2d 8b02 	vpush	{d8}
 8012dca:	eeb0 8a40 	vmov.f32	s16, s0
 8012dce:	eef0 8a60 	vmov.f32	s17, s1
 8012dd2:	ec55 4b11 	vmov	r4, r5, d1
 8012dd6:	f000 f97f 	bl	80130d8 <__ieee754_pow>
 8012dda:	4622      	mov	r2, r4
 8012ddc:	462b      	mov	r3, r5
 8012dde:	4620      	mov	r0, r4
 8012de0:	4629      	mov	r1, r5
 8012de2:	ec57 6b10 	vmov	r6, r7, d0
 8012de6:	f7ed fec1 	bl	8000b6c <__aeabi_dcmpun>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	d13b      	bne.n	8012e66 <pow+0xa2>
 8012dee:	ec51 0b18 	vmov	r0, r1, d8
 8012df2:	2200      	movs	r2, #0
 8012df4:	2300      	movs	r3, #0
 8012df6:	f7ed fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8012dfa:	b1b8      	cbz	r0, 8012e2c <pow+0x68>
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	2300      	movs	r3, #0
 8012e00:	4620      	mov	r0, r4
 8012e02:	4629      	mov	r1, r5
 8012e04:	f7ed fe80 	bl	8000b08 <__aeabi_dcmpeq>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d146      	bne.n	8012e9a <pow+0xd6>
 8012e0c:	ec45 4b10 	vmov	d0, r4, r5
 8012e10:	f000 f87d 	bl	8012f0e <finite>
 8012e14:	b338      	cbz	r0, 8012e66 <pow+0xa2>
 8012e16:	2200      	movs	r2, #0
 8012e18:	2300      	movs	r3, #0
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	f7ed fe7d 	bl	8000b1c <__aeabi_dcmplt>
 8012e22:	b300      	cbz	r0, 8012e66 <pow+0xa2>
 8012e24:	f7fc f8b4 	bl	800ef90 <__errno>
 8012e28:	2322      	movs	r3, #34	; 0x22
 8012e2a:	e01b      	b.n	8012e64 <pow+0xa0>
 8012e2c:	ec47 6b10 	vmov	d0, r6, r7
 8012e30:	f000 f86d 	bl	8012f0e <finite>
 8012e34:	b9e0      	cbnz	r0, 8012e70 <pow+0xac>
 8012e36:	eeb0 0a48 	vmov.f32	s0, s16
 8012e3a:	eef0 0a68 	vmov.f32	s1, s17
 8012e3e:	f000 f866 	bl	8012f0e <finite>
 8012e42:	b1a8      	cbz	r0, 8012e70 <pow+0xac>
 8012e44:	ec45 4b10 	vmov	d0, r4, r5
 8012e48:	f000 f861 	bl	8012f0e <finite>
 8012e4c:	b180      	cbz	r0, 8012e70 <pow+0xac>
 8012e4e:	4632      	mov	r2, r6
 8012e50:	463b      	mov	r3, r7
 8012e52:	4630      	mov	r0, r6
 8012e54:	4639      	mov	r1, r7
 8012e56:	f7ed fe89 	bl	8000b6c <__aeabi_dcmpun>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d0e2      	beq.n	8012e24 <pow+0x60>
 8012e5e:	f7fc f897 	bl	800ef90 <__errno>
 8012e62:	2321      	movs	r3, #33	; 0x21
 8012e64:	6003      	str	r3, [r0, #0]
 8012e66:	ecbd 8b02 	vpop	{d8}
 8012e6a:	ec47 6b10 	vmov	d0, r6, r7
 8012e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e70:	2200      	movs	r2, #0
 8012e72:	2300      	movs	r3, #0
 8012e74:	4630      	mov	r0, r6
 8012e76:	4639      	mov	r1, r7
 8012e78:	f7ed fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d0f2      	beq.n	8012e66 <pow+0xa2>
 8012e80:	eeb0 0a48 	vmov.f32	s0, s16
 8012e84:	eef0 0a68 	vmov.f32	s1, s17
 8012e88:	f000 f841 	bl	8012f0e <finite>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d0ea      	beq.n	8012e66 <pow+0xa2>
 8012e90:	ec45 4b10 	vmov	d0, r4, r5
 8012e94:	f000 f83b 	bl	8012f0e <finite>
 8012e98:	e7c3      	b.n	8012e22 <pow+0x5e>
 8012e9a:	4f01      	ldr	r7, [pc, #4]	; (8012ea0 <pow+0xdc>)
 8012e9c:	2600      	movs	r6, #0
 8012e9e:	e7e2      	b.n	8012e66 <pow+0xa2>
 8012ea0:	3ff00000 	.word	0x3ff00000

08012ea4 <sqrt>:
 8012ea4:	b538      	push	{r3, r4, r5, lr}
 8012ea6:	ed2d 8b02 	vpush	{d8}
 8012eaa:	ec55 4b10 	vmov	r4, r5, d0
 8012eae:	f000 f839 	bl	8012f24 <__ieee754_sqrt>
 8012eb2:	4622      	mov	r2, r4
 8012eb4:	462b      	mov	r3, r5
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	4629      	mov	r1, r5
 8012eba:	eeb0 8a40 	vmov.f32	s16, s0
 8012ebe:	eef0 8a60 	vmov.f32	s17, s1
 8012ec2:	f7ed fe53 	bl	8000b6c <__aeabi_dcmpun>
 8012ec6:	b990      	cbnz	r0, 8012eee <sqrt+0x4a>
 8012ec8:	2200      	movs	r2, #0
 8012eca:	2300      	movs	r3, #0
 8012ecc:	4620      	mov	r0, r4
 8012ece:	4629      	mov	r1, r5
 8012ed0:	f7ed fe24 	bl	8000b1c <__aeabi_dcmplt>
 8012ed4:	b158      	cbz	r0, 8012eee <sqrt+0x4a>
 8012ed6:	f7fc f85b 	bl	800ef90 <__errno>
 8012eda:	2321      	movs	r3, #33	; 0x21
 8012edc:	6003      	str	r3, [r0, #0]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	4610      	mov	r0, r2
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	f7ed fcd1 	bl	800088c <__aeabi_ddiv>
 8012eea:	ec41 0b18 	vmov	d8, r0, r1
 8012eee:	eeb0 0a48 	vmov.f32	s0, s16
 8012ef2:	eef0 0a68 	vmov.f32	s1, s17
 8012ef6:	ecbd 8b02 	vpop	{d8}
 8012efa:	bd38      	pop	{r3, r4, r5, pc}

08012efc <fabs>:
 8012efc:	ec51 0b10 	vmov	r0, r1, d0
 8012f00:	ee10 2a10 	vmov	r2, s0
 8012f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f08:	ec43 2b10 	vmov	d0, r2, r3
 8012f0c:	4770      	bx	lr

08012f0e <finite>:
 8012f0e:	b082      	sub	sp, #8
 8012f10:	ed8d 0b00 	vstr	d0, [sp]
 8012f14:	9801      	ldr	r0, [sp, #4]
 8012f16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012f1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012f1e:	0fc0      	lsrs	r0, r0, #31
 8012f20:	b002      	add	sp, #8
 8012f22:	4770      	bx	lr

08012f24 <__ieee754_sqrt>:
 8012f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f28:	ec55 4b10 	vmov	r4, r5, d0
 8012f2c:	4e67      	ldr	r6, [pc, #412]	; (80130cc <__ieee754_sqrt+0x1a8>)
 8012f2e:	43ae      	bics	r6, r5
 8012f30:	ee10 0a10 	vmov	r0, s0
 8012f34:	ee10 2a10 	vmov	r2, s0
 8012f38:	4629      	mov	r1, r5
 8012f3a:	462b      	mov	r3, r5
 8012f3c:	d10d      	bne.n	8012f5a <__ieee754_sqrt+0x36>
 8012f3e:	f7ed fb7b 	bl	8000638 <__aeabi_dmul>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4620      	mov	r0, r4
 8012f48:	4629      	mov	r1, r5
 8012f4a:	f7ed f9bf 	bl	80002cc <__adddf3>
 8012f4e:	4604      	mov	r4, r0
 8012f50:	460d      	mov	r5, r1
 8012f52:	ec45 4b10 	vmov	d0, r4, r5
 8012f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5a:	2d00      	cmp	r5, #0
 8012f5c:	dc0b      	bgt.n	8012f76 <__ieee754_sqrt+0x52>
 8012f5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012f62:	4326      	orrs	r6, r4
 8012f64:	d0f5      	beq.n	8012f52 <__ieee754_sqrt+0x2e>
 8012f66:	b135      	cbz	r5, 8012f76 <__ieee754_sqrt+0x52>
 8012f68:	f7ed f9ae 	bl	80002c8 <__aeabi_dsub>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	460b      	mov	r3, r1
 8012f70:	f7ed fc8c 	bl	800088c <__aeabi_ddiv>
 8012f74:	e7eb      	b.n	8012f4e <__ieee754_sqrt+0x2a>
 8012f76:	1509      	asrs	r1, r1, #20
 8012f78:	f000 808d 	beq.w	8013096 <__ieee754_sqrt+0x172>
 8012f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f80:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f88:	07c9      	lsls	r1, r1, #31
 8012f8a:	bf5c      	itt	pl
 8012f8c:	005b      	lslpl	r3, r3, #1
 8012f8e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012f92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012f96:	bf58      	it	pl
 8012f98:	0052      	lslpl	r2, r2, #1
 8012f9a:	2500      	movs	r5, #0
 8012f9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012fa0:	1076      	asrs	r6, r6, #1
 8012fa2:	0052      	lsls	r2, r2, #1
 8012fa4:	f04f 0e16 	mov.w	lr, #22
 8012fa8:	46ac      	mov	ip, r5
 8012faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012fae:	eb0c 0001 	add.w	r0, ip, r1
 8012fb2:	4298      	cmp	r0, r3
 8012fb4:	bfde      	ittt	le
 8012fb6:	1a1b      	suble	r3, r3, r0
 8012fb8:	eb00 0c01 	addle.w	ip, r0, r1
 8012fbc:	186d      	addle	r5, r5, r1
 8012fbe:	005b      	lsls	r3, r3, #1
 8012fc0:	f1be 0e01 	subs.w	lr, lr, #1
 8012fc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012fc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012fcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012fd0:	d1ed      	bne.n	8012fae <__ieee754_sqrt+0x8a>
 8012fd2:	4674      	mov	r4, lr
 8012fd4:	2720      	movs	r7, #32
 8012fd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012fda:	4563      	cmp	r3, ip
 8012fdc:	eb01 000e 	add.w	r0, r1, lr
 8012fe0:	dc02      	bgt.n	8012fe8 <__ieee754_sqrt+0xc4>
 8012fe2:	d113      	bne.n	801300c <__ieee754_sqrt+0xe8>
 8012fe4:	4290      	cmp	r0, r2
 8012fe6:	d811      	bhi.n	801300c <__ieee754_sqrt+0xe8>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	eb00 0e01 	add.w	lr, r0, r1
 8012fee:	da57      	bge.n	80130a0 <__ieee754_sqrt+0x17c>
 8012ff0:	f1be 0f00 	cmp.w	lr, #0
 8012ff4:	db54      	blt.n	80130a0 <__ieee754_sqrt+0x17c>
 8012ff6:	f10c 0801 	add.w	r8, ip, #1
 8012ffa:	eba3 030c 	sub.w	r3, r3, ip
 8012ffe:	4290      	cmp	r0, r2
 8013000:	bf88      	it	hi
 8013002:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013006:	1a12      	subs	r2, r2, r0
 8013008:	440c      	add	r4, r1
 801300a:	46c4      	mov	ip, r8
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	3f01      	subs	r7, #1
 8013010:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013014:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013018:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801301c:	d1dd      	bne.n	8012fda <__ieee754_sqrt+0xb6>
 801301e:	4313      	orrs	r3, r2
 8013020:	d01b      	beq.n	801305a <__ieee754_sqrt+0x136>
 8013022:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80130d0 <__ieee754_sqrt+0x1ac>
 8013026:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80130d4 <__ieee754_sqrt+0x1b0>
 801302a:	e9da 0100 	ldrd	r0, r1, [sl]
 801302e:	e9db 2300 	ldrd	r2, r3, [fp]
 8013032:	f7ed f949 	bl	80002c8 <__aeabi_dsub>
 8013036:	e9da 8900 	ldrd	r8, r9, [sl]
 801303a:	4602      	mov	r2, r0
 801303c:	460b      	mov	r3, r1
 801303e:	4640      	mov	r0, r8
 8013040:	4649      	mov	r1, r9
 8013042:	f7ed fd75 	bl	8000b30 <__aeabi_dcmple>
 8013046:	b140      	cbz	r0, 801305a <__ieee754_sqrt+0x136>
 8013048:	f1b4 3fff 	cmp.w	r4, #4294967295
 801304c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013050:	e9db 2300 	ldrd	r2, r3, [fp]
 8013054:	d126      	bne.n	80130a4 <__ieee754_sqrt+0x180>
 8013056:	3501      	adds	r5, #1
 8013058:	463c      	mov	r4, r7
 801305a:	106a      	asrs	r2, r5, #1
 801305c:	0863      	lsrs	r3, r4, #1
 801305e:	07e9      	lsls	r1, r5, #31
 8013060:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013064:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013068:	bf48      	it	mi
 801306a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801306e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8013072:	461c      	mov	r4, r3
 8013074:	e76d      	b.n	8012f52 <__ieee754_sqrt+0x2e>
 8013076:	0ad3      	lsrs	r3, r2, #11
 8013078:	3815      	subs	r0, #21
 801307a:	0552      	lsls	r2, r2, #21
 801307c:	2b00      	cmp	r3, #0
 801307e:	d0fa      	beq.n	8013076 <__ieee754_sqrt+0x152>
 8013080:	02dc      	lsls	r4, r3, #11
 8013082:	d50a      	bpl.n	801309a <__ieee754_sqrt+0x176>
 8013084:	f1c1 0420 	rsb	r4, r1, #32
 8013088:	fa22 f404 	lsr.w	r4, r2, r4
 801308c:	1e4d      	subs	r5, r1, #1
 801308e:	408a      	lsls	r2, r1
 8013090:	4323      	orrs	r3, r4
 8013092:	1b41      	subs	r1, r0, r5
 8013094:	e772      	b.n	8012f7c <__ieee754_sqrt+0x58>
 8013096:	4608      	mov	r0, r1
 8013098:	e7f0      	b.n	801307c <__ieee754_sqrt+0x158>
 801309a:	005b      	lsls	r3, r3, #1
 801309c:	3101      	adds	r1, #1
 801309e:	e7ef      	b.n	8013080 <__ieee754_sqrt+0x15c>
 80130a0:	46e0      	mov	r8, ip
 80130a2:	e7aa      	b.n	8012ffa <__ieee754_sqrt+0xd6>
 80130a4:	f7ed f912 	bl	80002cc <__adddf3>
 80130a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80130ac:	4602      	mov	r2, r0
 80130ae:	460b      	mov	r3, r1
 80130b0:	4640      	mov	r0, r8
 80130b2:	4649      	mov	r1, r9
 80130b4:	f7ed fd32 	bl	8000b1c <__aeabi_dcmplt>
 80130b8:	b120      	cbz	r0, 80130c4 <__ieee754_sqrt+0x1a0>
 80130ba:	1ca0      	adds	r0, r4, #2
 80130bc:	bf08      	it	eq
 80130be:	3501      	addeq	r5, #1
 80130c0:	3402      	adds	r4, #2
 80130c2:	e7ca      	b.n	801305a <__ieee754_sqrt+0x136>
 80130c4:	3401      	adds	r4, #1
 80130c6:	f024 0401 	bic.w	r4, r4, #1
 80130ca:	e7c6      	b.n	801305a <__ieee754_sqrt+0x136>
 80130cc:	7ff00000 	.word	0x7ff00000
 80130d0:	200001e0 	.word	0x200001e0
 80130d4:	200001e8 	.word	0x200001e8

080130d8 <__ieee754_pow>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	ed2d 8b06 	vpush	{d8-d10}
 80130e0:	b089      	sub	sp, #36	; 0x24
 80130e2:	ed8d 1b00 	vstr	d1, [sp]
 80130e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80130ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80130ee:	ea58 0102 	orrs.w	r1, r8, r2
 80130f2:	ec57 6b10 	vmov	r6, r7, d0
 80130f6:	d115      	bne.n	8013124 <__ieee754_pow+0x4c>
 80130f8:	19b3      	adds	r3, r6, r6
 80130fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80130fe:	4152      	adcs	r2, r2
 8013100:	4299      	cmp	r1, r3
 8013102:	4b89      	ldr	r3, [pc, #548]	; (8013328 <__ieee754_pow+0x250>)
 8013104:	4193      	sbcs	r3, r2
 8013106:	f080 84d1 	bcs.w	8013aac <__ieee754_pow+0x9d4>
 801310a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801310e:	4630      	mov	r0, r6
 8013110:	4639      	mov	r1, r7
 8013112:	f7ed f8db 	bl	80002cc <__adddf3>
 8013116:	ec41 0b10 	vmov	d0, r0, r1
 801311a:	b009      	add	sp, #36	; 0x24
 801311c:	ecbd 8b06 	vpop	{d8-d10}
 8013120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013124:	4b81      	ldr	r3, [pc, #516]	; (801332c <__ieee754_pow+0x254>)
 8013126:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801312a:	429c      	cmp	r4, r3
 801312c:	ee10 aa10 	vmov	sl, s0
 8013130:	463d      	mov	r5, r7
 8013132:	dc06      	bgt.n	8013142 <__ieee754_pow+0x6a>
 8013134:	d101      	bne.n	801313a <__ieee754_pow+0x62>
 8013136:	2e00      	cmp	r6, #0
 8013138:	d1e7      	bne.n	801310a <__ieee754_pow+0x32>
 801313a:	4598      	cmp	r8, r3
 801313c:	dc01      	bgt.n	8013142 <__ieee754_pow+0x6a>
 801313e:	d10f      	bne.n	8013160 <__ieee754_pow+0x88>
 8013140:	b172      	cbz	r2, 8013160 <__ieee754_pow+0x88>
 8013142:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013146:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801314a:	ea55 050a 	orrs.w	r5, r5, sl
 801314e:	d1dc      	bne.n	801310a <__ieee754_pow+0x32>
 8013150:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013154:	18db      	adds	r3, r3, r3
 8013156:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801315a:	4152      	adcs	r2, r2
 801315c:	429d      	cmp	r5, r3
 801315e:	e7d0      	b.n	8013102 <__ieee754_pow+0x2a>
 8013160:	2d00      	cmp	r5, #0
 8013162:	da3b      	bge.n	80131dc <__ieee754_pow+0x104>
 8013164:	4b72      	ldr	r3, [pc, #456]	; (8013330 <__ieee754_pow+0x258>)
 8013166:	4598      	cmp	r8, r3
 8013168:	dc51      	bgt.n	801320e <__ieee754_pow+0x136>
 801316a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801316e:	4598      	cmp	r8, r3
 8013170:	f340 84ab 	ble.w	8013aca <__ieee754_pow+0x9f2>
 8013174:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801317c:	2b14      	cmp	r3, #20
 801317e:	dd0f      	ble.n	80131a0 <__ieee754_pow+0xc8>
 8013180:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013184:	fa22 f103 	lsr.w	r1, r2, r3
 8013188:	fa01 f303 	lsl.w	r3, r1, r3
 801318c:	4293      	cmp	r3, r2
 801318e:	f040 849c 	bne.w	8013aca <__ieee754_pow+0x9f2>
 8013192:	f001 0101 	and.w	r1, r1, #1
 8013196:	f1c1 0302 	rsb	r3, r1, #2
 801319a:	9304      	str	r3, [sp, #16]
 801319c:	b182      	cbz	r2, 80131c0 <__ieee754_pow+0xe8>
 801319e:	e05f      	b.n	8013260 <__ieee754_pow+0x188>
 80131a0:	2a00      	cmp	r2, #0
 80131a2:	d15b      	bne.n	801325c <__ieee754_pow+0x184>
 80131a4:	f1c3 0314 	rsb	r3, r3, #20
 80131a8:	fa48 f103 	asr.w	r1, r8, r3
 80131ac:	fa01 f303 	lsl.w	r3, r1, r3
 80131b0:	4543      	cmp	r3, r8
 80131b2:	f040 8487 	bne.w	8013ac4 <__ieee754_pow+0x9ec>
 80131b6:	f001 0101 	and.w	r1, r1, #1
 80131ba:	f1c1 0302 	rsb	r3, r1, #2
 80131be:	9304      	str	r3, [sp, #16]
 80131c0:	4b5c      	ldr	r3, [pc, #368]	; (8013334 <__ieee754_pow+0x25c>)
 80131c2:	4598      	cmp	r8, r3
 80131c4:	d132      	bne.n	801322c <__ieee754_pow+0x154>
 80131c6:	f1b9 0f00 	cmp.w	r9, #0
 80131ca:	f280 8477 	bge.w	8013abc <__ieee754_pow+0x9e4>
 80131ce:	4959      	ldr	r1, [pc, #356]	; (8013334 <__ieee754_pow+0x25c>)
 80131d0:	4632      	mov	r2, r6
 80131d2:	463b      	mov	r3, r7
 80131d4:	2000      	movs	r0, #0
 80131d6:	f7ed fb59 	bl	800088c <__aeabi_ddiv>
 80131da:	e79c      	b.n	8013116 <__ieee754_pow+0x3e>
 80131dc:	2300      	movs	r3, #0
 80131de:	9304      	str	r3, [sp, #16]
 80131e0:	2a00      	cmp	r2, #0
 80131e2:	d13d      	bne.n	8013260 <__ieee754_pow+0x188>
 80131e4:	4b51      	ldr	r3, [pc, #324]	; (801332c <__ieee754_pow+0x254>)
 80131e6:	4598      	cmp	r8, r3
 80131e8:	d1ea      	bne.n	80131c0 <__ieee754_pow+0xe8>
 80131ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80131ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80131f2:	ea53 030a 	orrs.w	r3, r3, sl
 80131f6:	f000 8459 	beq.w	8013aac <__ieee754_pow+0x9d4>
 80131fa:	4b4f      	ldr	r3, [pc, #316]	; (8013338 <__ieee754_pow+0x260>)
 80131fc:	429c      	cmp	r4, r3
 80131fe:	dd08      	ble.n	8013212 <__ieee754_pow+0x13a>
 8013200:	f1b9 0f00 	cmp.w	r9, #0
 8013204:	f2c0 8456 	blt.w	8013ab4 <__ieee754_pow+0x9dc>
 8013208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801320c:	e783      	b.n	8013116 <__ieee754_pow+0x3e>
 801320e:	2302      	movs	r3, #2
 8013210:	e7e5      	b.n	80131de <__ieee754_pow+0x106>
 8013212:	f1b9 0f00 	cmp.w	r9, #0
 8013216:	f04f 0000 	mov.w	r0, #0
 801321a:	f04f 0100 	mov.w	r1, #0
 801321e:	f6bf af7a 	bge.w	8013116 <__ieee754_pow+0x3e>
 8013222:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801322a:	e774      	b.n	8013116 <__ieee754_pow+0x3e>
 801322c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013230:	d106      	bne.n	8013240 <__ieee754_pow+0x168>
 8013232:	4632      	mov	r2, r6
 8013234:	463b      	mov	r3, r7
 8013236:	4630      	mov	r0, r6
 8013238:	4639      	mov	r1, r7
 801323a:	f7ed f9fd 	bl	8000638 <__aeabi_dmul>
 801323e:	e76a      	b.n	8013116 <__ieee754_pow+0x3e>
 8013240:	4b3e      	ldr	r3, [pc, #248]	; (801333c <__ieee754_pow+0x264>)
 8013242:	4599      	cmp	r9, r3
 8013244:	d10c      	bne.n	8013260 <__ieee754_pow+0x188>
 8013246:	2d00      	cmp	r5, #0
 8013248:	db0a      	blt.n	8013260 <__ieee754_pow+0x188>
 801324a:	ec47 6b10 	vmov	d0, r6, r7
 801324e:	b009      	add	sp, #36	; 0x24
 8013250:	ecbd 8b06 	vpop	{d8-d10}
 8013254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013258:	f7ff be64 	b.w	8012f24 <__ieee754_sqrt>
 801325c:	2300      	movs	r3, #0
 801325e:	9304      	str	r3, [sp, #16]
 8013260:	ec47 6b10 	vmov	d0, r6, r7
 8013264:	f7ff fe4a 	bl	8012efc <fabs>
 8013268:	ec51 0b10 	vmov	r0, r1, d0
 801326c:	f1ba 0f00 	cmp.w	sl, #0
 8013270:	d129      	bne.n	80132c6 <__ieee754_pow+0x1ee>
 8013272:	b124      	cbz	r4, 801327e <__ieee754_pow+0x1a6>
 8013274:	4b2f      	ldr	r3, [pc, #188]	; (8013334 <__ieee754_pow+0x25c>)
 8013276:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801327a:	429a      	cmp	r2, r3
 801327c:	d123      	bne.n	80132c6 <__ieee754_pow+0x1ee>
 801327e:	f1b9 0f00 	cmp.w	r9, #0
 8013282:	da05      	bge.n	8013290 <__ieee754_pow+0x1b8>
 8013284:	4602      	mov	r2, r0
 8013286:	460b      	mov	r3, r1
 8013288:	2000      	movs	r0, #0
 801328a:	492a      	ldr	r1, [pc, #168]	; (8013334 <__ieee754_pow+0x25c>)
 801328c:	f7ed fafe 	bl	800088c <__aeabi_ddiv>
 8013290:	2d00      	cmp	r5, #0
 8013292:	f6bf af40 	bge.w	8013116 <__ieee754_pow+0x3e>
 8013296:	9b04      	ldr	r3, [sp, #16]
 8013298:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801329c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80132a0:	431c      	orrs	r4, r3
 80132a2:	d108      	bne.n	80132b6 <__ieee754_pow+0x1de>
 80132a4:	4602      	mov	r2, r0
 80132a6:	460b      	mov	r3, r1
 80132a8:	4610      	mov	r0, r2
 80132aa:	4619      	mov	r1, r3
 80132ac:	f7ed f80c 	bl	80002c8 <__aeabi_dsub>
 80132b0:	4602      	mov	r2, r0
 80132b2:	460b      	mov	r3, r1
 80132b4:	e78f      	b.n	80131d6 <__ieee754_pow+0xfe>
 80132b6:	9b04      	ldr	r3, [sp, #16]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	f47f af2c 	bne.w	8013116 <__ieee754_pow+0x3e>
 80132be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132c2:	4619      	mov	r1, r3
 80132c4:	e727      	b.n	8013116 <__ieee754_pow+0x3e>
 80132c6:	0feb      	lsrs	r3, r5, #31
 80132c8:	3b01      	subs	r3, #1
 80132ca:	9306      	str	r3, [sp, #24]
 80132cc:	9a06      	ldr	r2, [sp, #24]
 80132ce:	9b04      	ldr	r3, [sp, #16]
 80132d0:	4313      	orrs	r3, r2
 80132d2:	d102      	bne.n	80132da <__ieee754_pow+0x202>
 80132d4:	4632      	mov	r2, r6
 80132d6:	463b      	mov	r3, r7
 80132d8:	e7e6      	b.n	80132a8 <__ieee754_pow+0x1d0>
 80132da:	4b19      	ldr	r3, [pc, #100]	; (8013340 <__ieee754_pow+0x268>)
 80132dc:	4598      	cmp	r8, r3
 80132de:	f340 80fb 	ble.w	80134d8 <__ieee754_pow+0x400>
 80132e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80132e6:	4598      	cmp	r8, r3
 80132e8:	4b13      	ldr	r3, [pc, #76]	; (8013338 <__ieee754_pow+0x260>)
 80132ea:	dd0c      	ble.n	8013306 <__ieee754_pow+0x22e>
 80132ec:	429c      	cmp	r4, r3
 80132ee:	dc0f      	bgt.n	8013310 <__ieee754_pow+0x238>
 80132f0:	f1b9 0f00 	cmp.w	r9, #0
 80132f4:	da0f      	bge.n	8013316 <__ieee754_pow+0x23e>
 80132f6:	2000      	movs	r0, #0
 80132f8:	b009      	add	sp, #36	; 0x24
 80132fa:	ecbd 8b06 	vpop	{d8-d10}
 80132fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013302:	f000 bcba 	b.w	8013c7a <__math_oflow>
 8013306:	429c      	cmp	r4, r3
 8013308:	dbf2      	blt.n	80132f0 <__ieee754_pow+0x218>
 801330a:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <__ieee754_pow+0x25c>)
 801330c:	429c      	cmp	r4, r3
 801330e:	dd19      	ble.n	8013344 <__ieee754_pow+0x26c>
 8013310:	f1b9 0f00 	cmp.w	r9, #0
 8013314:	dcef      	bgt.n	80132f6 <__ieee754_pow+0x21e>
 8013316:	2000      	movs	r0, #0
 8013318:	b009      	add	sp, #36	; 0x24
 801331a:	ecbd 8b06 	vpop	{d8-d10}
 801331e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013322:	f000 bca1 	b.w	8013c68 <__math_uflow>
 8013326:	bf00      	nop
 8013328:	fff00000 	.word	0xfff00000
 801332c:	7ff00000 	.word	0x7ff00000
 8013330:	433fffff 	.word	0x433fffff
 8013334:	3ff00000 	.word	0x3ff00000
 8013338:	3fefffff 	.word	0x3fefffff
 801333c:	3fe00000 	.word	0x3fe00000
 8013340:	41e00000 	.word	0x41e00000
 8013344:	4b60      	ldr	r3, [pc, #384]	; (80134c8 <__ieee754_pow+0x3f0>)
 8013346:	2200      	movs	r2, #0
 8013348:	f7ec ffbe 	bl	80002c8 <__aeabi_dsub>
 801334c:	a354      	add	r3, pc, #336	; (adr r3, 80134a0 <__ieee754_pow+0x3c8>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	4604      	mov	r4, r0
 8013354:	460d      	mov	r5, r1
 8013356:	f7ed f96f 	bl	8000638 <__aeabi_dmul>
 801335a:	a353      	add	r3, pc, #332	; (adr r3, 80134a8 <__ieee754_pow+0x3d0>)
 801335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013360:	4606      	mov	r6, r0
 8013362:	460f      	mov	r7, r1
 8013364:	4620      	mov	r0, r4
 8013366:	4629      	mov	r1, r5
 8013368:	f7ed f966 	bl	8000638 <__aeabi_dmul>
 801336c:	4b57      	ldr	r3, [pc, #348]	; (80134cc <__ieee754_pow+0x3f4>)
 801336e:	4682      	mov	sl, r0
 8013370:	468b      	mov	fp, r1
 8013372:	2200      	movs	r2, #0
 8013374:	4620      	mov	r0, r4
 8013376:	4629      	mov	r1, r5
 8013378:	f7ed f95e 	bl	8000638 <__aeabi_dmul>
 801337c:	4602      	mov	r2, r0
 801337e:	460b      	mov	r3, r1
 8013380:	a14b      	add	r1, pc, #300	; (adr r1, 80134b0 <__ieee754_pow+0x3d8>)
 8013382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013386:	f7ec ff9f 	bl	80002c8 <__aeabi_dsub>
 801338a:	4622      	mov	r2, r4
 801338c:	462b      	mov	r3, r5
 801338e:	f7ed f953 	bl	8000638 <__aeabi_dmul>
 8013392:	4602      	mov	r2, r0
 8013394:	460b      	mov	r3, r1
 8013396:	2000      	movs	r0, #0
 8013398:	494d      	ldr	r1, [pc, #308]	; (80134d0 <__ieee754_pow+0x3f8>)
 801339a:	f7ec ff95 	bl	80002c8 <__aeabi_dsub>
 801339e:	4622      	mov	r2, r4
 80133a0:	4680      	mov	r8, r0
 80133a2:	4689      	mov	r9, r1
 80133a4:	462b      	mov	r3, r5
 80133a6:	4620      	mov	r0, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	f7ed f945 	bl	8000638 <__aeabi_dmul>
 80133ae:	4602      	mov	r2, r0
 80133b0:	460b      	mov	r3, r1
 80133b2:	4640      	mov	r0, r8
 80133b4:	4649      	mov	r1, r9
 80133b6:	f7ed f93f 	bl	8000638 <__aeabi_dmul>
 80133ba:	a33f      	add	r3, pc, #252	; (adr r3, 80134b8 <__ieee754_pow+0x3e0>)
 80133bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c0:	f7ed f93a 	bl	8000638 <__aeabi_dmul>
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	4650      	mov	r0, sl
 80133ca:	4659      	mov	r1, fp
 80133cc:	f7ec ff7c 	bl	80002c8 <__aeabi_dsub>
 80133d0:	4602      	mov	r2, r0
 80133d2:	460b      	mov	r3, r1
 80133d4:	4680      	mov	r8, r0
 80133d6:	4689      	mov	r9, r1
 80133d8:	4630      	mov	r0, r6
 80133da:	4639      	mov	r1, r7
 80133dc:	f7ec ff76 	bl	80002cc <__adddf3>
 80133e0:	2000      	movs	r0, #0
 80133e2:	4632      	mov	r2, r6
 80133e4:	463b      	mov	r3, r7
 80133e6:	4604      	mov	r4, r0
 80133e8:	460d      	mov	r5, r1
 80133ea:	f7ec ff6d 	bl	80002c8 <__aeabi_dsub>
 80133ee:	4602      	mov	r2, r0
 80133f0:	460b      	mov	r3, r1
 80133f2:	4640      	mov	r0, r8
 80133f4:	4649      	mov	r1, r9
 80133f6:	f7ec ff67 	bl	80002c8 <__aeabi_dsub>
 80133fa:	9b04      	ldr	r3, [sp, #16]
 80133fc:	9a06      	ldr	r2, [sp, #24]
 80133fe:	3b01      	subs	r3, #1
 8013400:	4313      	orrs	r3, r2
 8013402:	4682      	mov	sl, r0
 8013404:	468b      	mov	fp, r1
 8013406:	f040 81e7 	bne.w	80137d8 <__ieee754_pow+0x700>
 801340a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80134c0 <__ieee754_pow+0x3e8>
 801340e:	eeb0 8a47 	vmov.f32	s16, s14
 8013412:	eef0 8a67 	vmov.f32	s17, s15
 8013416:	e9dd 6700 	ldrd	r6, r7, [sp]
 801341a:	2600      	movs	r6, #0
 801341c:	4632      	mov	r2, r6
 801341e:	463b      	mov	r3, r7
 8013420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013424:	f7ec ff50 	bl	80002c8 <__aeabi_dsub>
 8013428:	4622      	mov	r2, r4
 801342a:	462b      	mov	r3, r5
 801342c:	f7ed f904 	bl	8000638 <__aeabi_dmul>
 8013430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013434:	4680      	mov	r8, r0
 8013436:	4689      	mov	r9, r1
 8013438:	4650      	mov	r0, sl
 801343a:	4659      	mov	r1, fp
 801343c:	f7ed f8fc 	bl	8000638 <__aeabi_dmul>
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	4640      	mov	r0, r8
 8013446:	4649      	mov	r1, r9
 8013448:	f7ec ff40 	bl	80002cc <__adddf3>
 801344c:	4632      	mov	r2, r6
 801344e:	463b      	mov	r3, r7
 8013450:	4680      	mov	r8, r0
 8013452:	4689      	mov	r9, r1
 8013454:	4620      	mov	r0, r4
 8013456:	4629      	mov	r1, r5
 8013458:	f7ed f8ee 	bl	8000638 <__aeabi_dmul>
 801345c:	460b      	mov	r3, r1
 801345e:	4604      	mov	r4, r0
 8013460:	460d      	mov	r5, r1
 8013462:	4602      	mov	r2, r0
 8013464:	4649      	mov	r1, r9
 8013466:	4640      	mov	r0, r8
 8013468:	f7ec ff30 	bl	80002cc <__adddf3>
 801346c:	4b19      	ldr	r3, [pc, #100]	; (80134d4 <__ieee754_pow+0x3fc>)
 801346e:	4299      	cmp	r1, r3
 8013470:	ec45 4b19 	vmov	d9, r4, r5
 8013474:	4606      	mov	r6, r0
 8013476:	460f      	mov	r7, r1
 8013478:	468b      	mov	fp, r1
 801347a:	f340 82f0 	ble.w	8013a5e <__ieee754_pow+0x986>
 801347e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013486:	4303      	orrs	r3, r0
 8013488:	f000 81e4 	beq.w	8013854 <__ieee754_pow+0x77c>
 801348c:	ec51 0b18 	vmov	r0, r1, d8
 8013490:	2200      	movs	r2, #0
 8013492:	2300      	movs	r3, #0
 8013494:	f7ed fb42 	bl	8000b1c <__aeabi_dcmplt>
 8013498:	3800      	subs	r0, #0
 801349a:	bf18      	it	ne
 801349c:	2001      	movne	r0, #1
 801349e:	e72b      	b.n	80132f8 <__ieee754_pow+0x220>
 80134a0:	60000000 	.word	0x60000000
 80134a4:	3ff71547 	.word	0x3ff71547
 80134a8:	f85ddf44 	.word	0xf85ddf44
 80134ac:	3e54ae0b 	.word	0x3e54ae0b
 80134b0:	55555555 	.word	0x55555555
 80134b4:	3fd55555 	.word	0x3fd55555
 80134b8:	652b82fe 	.word	0x652b82fe
 80134bc:	3ff71547 	.word	0x3ff71547
 80134c0:	00000000 	.word	0x00000000
 80134c4:	bff00000 	.word	0xbff00000
 80134c8:	3ff00000 	.word	0x3ff00000
 80134cc:	3fd00000 	.word	0x3fd00000
 80134d0:	3fe00000 	.word	0x3fe00000
 80134d4:	408fffff 	.word	0x408fffff
 80134d8:	4bd5      	ldr	r3, [pc, #852]	; (8013830 <__ieee754_pow+0x758>)
 80134da:	402b      	ands	r3, r5
 80134dc:	2200      	movs	r2, #0
 80134de:	b92b      	cbnz	r3, 80134ec <__ieee754_pow+0x414>
 80134e0:	4bd4      	ldr	r3, [pc, #848]	; (8013834 <__ieee754_pow+0x75c>)
 80134e2:	f7ed f8a9 	bl	8000638 <__aeabi_dmul>
 80134e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80134ea:	460c      	mov	r4, r1
 80134ec:	1523      	asrs	r3, r4, #20
 80134ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80134f2:	4413      	add	r3, r2
 80134f4:	9305      	str	r3, [sp, #20]
 80134f6:	4bd0      	ldr	r3, [pc, #832]	; (8013838 <__ieee754_pow+0x760>)
 80134f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80134fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013500:	429c      	cmp	r4, r3
 8013502:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013506:	dd08      	ble.n	801351a <__ieee754_pow+0x442>
 8013508:	4bcc      	ldr	r3, [pc, #816]	; (801383c <__ieee754_pow+0x764>)
 801350a:	429c      	cmp	r4, r3
 801350c:	f340 8162 	ble.w	80137d4 <__ieee754_pow+0x6fc>
 8013510:	9b05      	ldr	r3, [sp, #20]
 8013512:	3301      	adds	r3, #1
 8013514:	9305      	str	r3, [sp, #20]
 8013516:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801351a:	2400      	movs	r4, #0
 801351c:	00e3      	lsls	r3, r4, #3
 801351e:	9307      	str	r3, [sp, #28]
 8013520:	4bc7      	ldr	r3, [pc, #796]	; (8013840 <__ieee754_pow+0x768>)
 8013522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013526:	ed93 7b00 	vldr	d7, [r3]
 801352a:	4629      	mov	r1, r5
 801352c:	ec53 2b17 	vmov	r2, r3, d7
 8013530:	eeb0 9a47 	vmov.f32	s18, s14
 8013534:	eef0 9a67 	vmov.f32	s19, s15
 8013538:	4682      	mov	sl, r0
 801353a:	f7ec fec5 	bl	80002c8 <__aeabi_dsub>
 801353e:	4652      	mov	r2, sl
 8013540:	4606      	mov	r6, r0
 8013542:	460f      	mov	r7, r1
 8013544:	462b      	mov	r3, r5
 8013546:	ec51 0b19 	vmov	r0, r1, d9
 801354a:	f7ec febf 	bl	80002cc <__adddf3>
 801354e:	4602      	mov	r2, r0
 8013550:	460b      	mov	r3, r1
 8013552:	2000      	movs	r0, #0
 8013554:	49bb      	ldr	r1, [pc, #748]	; (8013844 <__ieee754_pow+0x76c>)
 8013556:	f7ed f999 	bl	800088c <__aeabi_ddiv>
 801355a:	ec41 0b1a 	vmov	d10, r0, r1
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	4630      	mov	r0, r6
 8013564:	4639      	mov	r1, r7
 8013566:	f7ed f867 	bl	8000638 <__aeabi_dmul>
 801356a:	2300      	movs	r3, #0
 801356c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013570:	9302      	str	r3, [sp, #8]
 8013572:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013576:	46ab      	mov	fp, r5
 8013578:	106d      	asrs	r5, r5, #1
 801357a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801357e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013582:	ec41 0b18 	vmov	d8, r0, r1
 8013586:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801358a:	2200      	movs	r2, #0
 801358c:	4640      	mov	r0, r8
 801358e:	4649      	mov	r1, r9
 8013590:	4614      	mov	r4, r2
 8013592:	461d      	mov	r5, r3
 8013594:	f7ed f850 	bl	8000638 <__aeabi_dmul>
 8013598:	4602      	mov	r2, r0
 801359a:	460b      	mov	r3, r1
 801359c:	4630      	mov	r0, r6
 801359e:	4639      	mov	r1, r7
 80135a0:	f7ec fe92 	bl	80002c8 <__aeabi_dsub>
 80135a4:	ec53 2b19 	vmov	r2, r3, d9
 80135a8:	4606      	mov	r6, r0
 80135aa:	460f      	mov	r7, r1
 80135ac:	4620      	mov	r0, r4
 80135ae:	4629      	mov	r1, r5
 80135b0:	f7ec fe8a 	bl	80002c8 <__aeabi_dsub>
 80135b4:	4602      	mov	r2, r0
 80135b6:	460b      	mov	r3, r1
 80135b8:	4650      	mov	r0, sl
 80135ba:	4659      	mov	r1, fp
 80135bc:	f7ec fe84 	bl	80002c8 <__aeabi_dsub>
 80135c0:	4642      	mov	r2, r8
 80135c2:	464b      	mov	r3, r9
 80135c4:	f7ed f838 	bl	8000638 <__aeabi_dmul>
 80135c8:	4602      	mov	r2, r0
 80135ca:	460b      	mov	r3, r1
 80135cc:	4630      	mov	r0, r6
 80135ce:	4639      	mov	r1, r7
 80135d0:	f7ec fe7a 	bl	80002c8 <__aeabi_dsub>
 80135d4:	ec53 2b1a 	vmov	r2, r3, d10
 80135d8:	f7ed f82e 	bl	8000638 <__aeabi_dmul>
 80135dc:	ec53 2b18 	vmov	r2, r3, d8
 80135e0:	ec41 0b19 	vmov	d9, r0, r1
 80135e4:	ec51 0b18 	vmov	r0, r1, d8
 80135e8:	f7ed f826 	bl	8000638 <__aeabi_dmul>
 80135ec:	a37c      	add	r3, pc, #496	; (adr r3, 80137e0 <__ieee754_pow+0x708>)
 80135ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f2:	4604      	mov	r4, r0
 80135f4:	460d      	mov	r5, r1
 80135f6:	f7ed f81f 	bl	8000638 <__aeabi_dmul>
 80135fa:	a37b      	add	r3, pc, #492	; (adr r3, 80137e8 <__ieee754_pow+0x710>)
 80135fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013600:	f7ec fe64 	bl	80002cc <__adddf3>
 8013604:	4622      	mov	r2, r4
 8013606:	462b      	mov	r3, r5
 8013608:	f7ed f816 	bl	8000638 <__aeabi_dmul>
 801360c:	a378      	add	r3, pc, #480	; (adr r3, 80137f0 <__ieee754_pow+0x718>)
 801360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013612:	f7ec fe5b 	bl	80002cc <__adddf3>
 8013616:	4622      	mov	r2, r4
 8013618:	462b      	mov	r3, r5
 801361a:	f7ed f80d 	bl	8000638 <__aeabi_dmul>
 801361e:	a376      	add	r3, pc, #472	; (adr r3, 80137f8 <__ieee754_pow+0x720>)
 8013620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013624:	f7ec fe52 	bl	80002cc <__adddf3>
 8013628:	4622      	mov	r2, r4
 801362a:	462b      	mov	r3, r5
 801362c:	f7ed f804 	bl	8000638 <__aeabi_dmul>
 8013630:	a373      	add	r3, pc, #460	; (adr r3, 8013800 <__ieee754_pow+0x728>)
 8013632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013636:	f7ec fe49 	bl	80002cc <__adddf3>
 801363a:	4622      	mov	r2, r4
 801363c:	462b      	mov	r3, r5
 801363e:	f7ec fffb 	bl	8000638 <__aeabi_dmul>
 8013642:	a371      	add	r3, pc, #452	; (adr r3, 8013808 <__ieee754_pow+0x730>)
 8013644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013648:	f7ec fe40 	bl	80002cc <__adddf3>
 801364c:	4622      	mov	r2, r4
 801364e:	4606      	mov	r6, r0
 8013650:	460f      	mov	r7, r1
 8013652:	462b      	mov	r3, r5
 8013654:	4620      	mov	r0, r4
 8013656:	4629      	mov	r1, r5
 8013658:	f7ec ffee 	bl	8000638 <__aeabi_dmul>
 801365c:	4602      	mov	r2, r0
 801365e:	460b      	mov	r3, r1
 8013660:	4630      	mov	r0, r6
 8013662:	4639      	mov	r1, r7
 8013664:	f7ec ffe8 	bl	8000638 <__aeabi_dmul>
 8013668:	4642      	mov	r2, r8
 801366a:	4604      	mov	r4, r0
 801366c:	460d      	mov	r5, r1
 801366e:	464b      	mov	r3, r9
 8013670:	ec51 0b18 	vmov	r0, r1, d8
 8013674:	f7ec fe2a 	bl	80002cc <__adddf3>
 8013678:	ec53 2b19 	vmov	r2, r3, d9
 801367c:	f7ec ffdc 	bl	8000638 <__aeabi_dmul>
 8013680:	4622      	mov	r2, r4
 8013682:	462b      	mov	r3, r5
 8013684:	f7ec fe22 	bl	80002cc <__adddf3>
 8013688:	4642      	mov	r2, r8
 801368a:	4682      	mov	sl, r0
 801368c:	468b      	mov	fp, r1
 801368e:	464b      	mov	r3, r9
 8013690:	4640      	mov	r0, r8
 8013692:	4649      	mov	r1, r9
 8013694:	f7ec ffd0 	bl	8000638 <__aeabi_dmul>
 8013698:	4b6b      	ldr	r3, [pc, #428]	; (8013848 <__ieee754_pow+0x770>)
 801369a:	2200      	movs	r2, #0
 801369c:	4606      	mov	r6, r0
 801369e:	460f      	mov	r7, r1
 80136a0:	f7ec fe14 	bl	80002cc <__adddf3>
 80136a4:	4652      	mov	r2, sl
 80136a6:	465b      	mov	r3, fp
 80136a8:	f7ec fe10 	bl	80002cc <__adddf3>
 80136ac:	2000      	movs	r0, #0
 80136ae:	4604      	mov	r4, r0
 80136b0:	460d      	mov	r5, r1
 80136b2:	4602      	mov	r2, r0
 80136b4:	460b      	mov	r3, r1
 80136b6:	4640      	mov	r0, r8
 80136b8:	4649      	mov	r1, r9
 80136ba:	f7ec ffbd 	bl	8000638 <__aeabi_dmul>
 80136be:	4b62      	ldr	r3, [pc, #392]	; (8013848 <__ieee754_pow+0x770>)
 80136c0:	4680      	mov	r8, r0
 80136c2:	4689      	mov	r9, r1
 80136c4:	2200      	movs	r2, #0
 80136c6:	4620      	mov	r0, r4
 80136c8:	4629      	mov	r1, r5
 80136ca:	f7ec fdfd 	bl	80002c8 <__aeabi_dsub>
 80136ce:	4632      	mov	r2, r6
 80136d0:	463b      	mov	r3, r7
 80136d2:	f7ec fdf9 	bl	80002c8 <__aeabi_dsub>
 80136d6:	4602      	mov	r2, r0
 80136d8:	460b      	mov	r3, r1
 80136da:	4650      	mov	r0, sl
 80136dc:	4659      	mov	r1, fp
 80136de:	f7ec fdf3 	bl	80002c8 <__aeabi_dsub>
 80136e2:	ec53 2b18 	vmov	r2, r3, d8
 80136e6:	f7ec ffa7 	bl	8000638 <__aeabi_dmul>
 80136ea:	4622      	mov	r2, r4
 80136ec:	4606      	mov	r6, r0
 80136ee:	460f      	mov	r7, r1
 80136f0:	462b      	mov	r3, r5
 80136f2:	ec51 0b19 	vmov	r0, r1, d9
 80136f6:	f7ec ff9f 	bl	8000638 <__aeabi_dmul>
 80136fa:	4602      	mov	r2, r0
 80136fc:	460b      	mov	r3, r1
 80136fe:	4630      	mov	r0, r6
 8013700:	4639      	mov	r1, r7
 8013702:	f7ec fde3 	bl	80002cc <__adddf3>
 8013706:	4606      	mov	r6, r0
 8013708:	460f      	mov	r7, r1
 801370a:	4602      	mov	r2, r0
 801370c:	460b      	mov	r3, r1
 801370e:	4640      	mov	r0, r8
 8013710:	4649      	mov	r1, r9
 8013712:	f7ec fddb 	bl	80002cc <__adddf3>
 8013716:	a33e      	add	r3, pc, #248	; (adr r3, 8013810 <__ieee754_pow+0x738>)
 8013718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371c:	2000      	movs	r0, #0
 801371e:	4604      	mov	r4, r0
 8013720:	460d      	mov	r5, r1
 8013722:	f7ec ff89 	bl	8000638 <__aeabi_dmul>
 8013726:	4642      	mov	r2, r8
 8013728:	ec41 0b18 	vmov	d8, r0, r1
 801372c:	464b      	mov	r3, r9
 801372e:	4620      	mov	r0, r4
 8013730:	4629      	mov	r1, r5
 8013732:	f7ec fdc9 	bl	80002c8 <__aeabi_dsub>
 8013736:	4602      	mov	r2, r0
 8013738:	460b      	mov	r3, r1
 801373a:	4630      	mov	r0, r6
 801373c:	4639      	mov	r1, r7
 801373e:	f7ec fdc3 	bl	80002c8 <__aeabi_dsub>
 8013742:	a335      	add	r3, pc, #212	; (adr r3, 8013818 <__ieee754_pow+0x740>)
 8013744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013748:	f7ec ff76 	bl	8000638 <__aeabi_dmul>
 801374c:	a334      	add	r3, pc, #208	; (adr r3, 8013820 <__ieee754_pow+0x748>)
 801374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013752:	4606      	mov	r6, r0
 8013754:	460f      	mov	r7, r1
 8013756:	4620      	mov	r0, r4
 8013758:	4629      	mov	r1, r5
 801375a:	f7ec ff6d 	bl	8000638 <__aeabi_dmul>
 801375e:	4602      	mov	r2, r0
 8013760:	460b      	mov	r3, r1
 8013762:	4630      	mov	r0, r6
 8013764:	4639      	mov	r1, r7
 8013766:	f7ec fdb1 	bl	80002cc <__adddf3>
 801376a:	9a07      	ldr	r2, [sp, #28]
 801376c:	4b37      	ldr	r3, [pc, #220]	; (801384c <__ieee754_pow+0x774>)
 801376e:	4413      	add	r3, r2
 8013770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013774:	f7ec fdaa 	bl	80002cc <__adddf3>
 8013778:	4682      	mov	sl, r0
 801377a:	9805      	ldr	r0, [sp, #20]
 801377c:	468b      	mov	fp, r1
 801377e:	f7ec fef1 	bl	8000564 <__aeabi_i2d>
 8013782:	9a07      	ldr	r2, [sp, #28]
 8013784:	4b32      	ldr	r3, [pc, #200]	; (8013850 <__ieee754_pow+0x778>)
 8013786:	4413      	add	r3, r2
 8013788:	e9d3 8900 	ldrd	r8, r9, [r3]
 801378c:	4606      	mov	r6, r0
 801378e:	460f      	mov	r7, r1
 8013790:	4652      	mov	r2, sl
 8013792:	465b      	mov	r3, fp
 8013794:	ec51 0b18 	vmov	r0, r1, d8
 8013798:	f7ec fd98 	bl	80002cc <__adddf3>
 801379c:	4642      	mov	r2, r8
 801379e:	464b      	mov	r3, r9
 80137a0:	f7ec fd94 	bl	80002cc <__adddf3>
 80137a4:	4632      	mov	r2, r6
 80137a6:	463b      	mov	r3, r7
 80137a8:	f7ec fd90 	bl	80002cc <__adddf3>
 80137ac:	2000      	movs	r0, #0
 80137ae:	4632      	mov	r2, r6
 80137b0:	463b      	mov	r3, r7
 80137b2:	4604      	mov	r4, r0
 80137b4:	460d      	mov	r5, r1
 80137b6:	f7ec fd87 	bl	80002c8 <__aeabi_dsub>
 80137ba:	4642      	mov	r2, r8
 80137bc:	464b      	mov	r3, r9
 80137be:	f7ec fd83 	bl	80002c8 <__aeabi_dsub>
 80137c2:	ec53 2b18 	vmov	r2, r3, d8
 80137c6:	f7ec fd7f 	bl	80002c8 <__aeabi_dsub>
 80137ca:	4602      	mov	r2, r0
 80137cc:	460b      	mov	r3, r1
 80137ce:	4650      	mov	r0, sl
 80137d0:	4659      	mov	r1, fp
 80137d2:	e610      	b.n	80133f6 <__ieee754_pow+0x31e>
 80137d4:	2401      	movs	r4, #1
 80137d6:	e6a1      	b.n	801351c <__ieee754_pow+0x444>
 80137d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013828 <__ieee754_pow+0x750>
 80137dc:	e617      	b.n	801340e <__ieee754_pow+0x336>
 80137de:	bf00      	nop
 80137e0:	4a454eef 	.word	0x4a454eef
 80137e4:	3fca7e28 	.word	0x3fca7e28
 80137e8:	93c9db65 	.word	0x93c9db65
 80137ec:	3fcd864a 	.word	0x3fcd864a
 80137f0:	a91d4101 	.word	0xa91d4101
 80137f4:	3fd17460 	.word	0x3fd17460
 80137f8:	518f264d 	.word	0x518f264d
 80137fc:	3fd55555 	.word	0x3fd55555
 8013800:	db6fabff 	.word	0xdb6fabff
 8013804:	3fdb6db6 	.word	0x3fdb6db6
 8013808:	33333303 	.word	0x33333303
 801380c:	3fe33333 	.word	0x3fe33333
 8013810:	e0000000 	.word	0xe0000000
 8013814:	3feec709 	.word	0x3feec709
 8013818:	dc3a03fd 	.word	0xdc3a03fd
 801381c:	3feec709 	.word	0x3feec709
 8013820:	145b01f5 	.word	0x145b01f5
 8013824:	be3e2fe0 	.word	0xbe3e2fe0
 8013828:	00000000 	.word	0x00000000
 801382c:	3ff00000 	.word	0x3ff00000
 8013830:	7ff00000 	.word	0x7ff00000
 8013834:	43400000 	.word	0x43400000
 8013838:	0003988e 	.word	0x0003988e
 801383c:	000bb679 	.word	0x000bb679
 8013840:	08014488 	.word	0x08014488
 8013844:	3ff00000 	.word	0x3ff00000
 8013848:	40080000 	.word	0x40080000
 801384c:	080144a8 	.word	0x080144a8
 8013850:	08014498 	.word	0x08014498
 8013854:	a3b3      	add	r3, pc, #716	; (adr r3, 8013b24 <__ieee754_pow+0xa4c>)
 8013856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385a:	4640      	mov	r0, r8
 801385c:	4649      	mov	r1, r9
 801385e:	f7ec fd35 	bl	80002cc <__adddf3>
 8013862:	4622      	mov	r2, r4
 8013864:	ec41 0b1a 	vmov	d10, r0, r1
 8013868:	462b      	mov	r3, r5
 801386a:	4630      	mov	r0, r6
 801386c:	4639      	mov	r1, r7
 801386e:	f7ec fd2b 	bl	80002c8 <__aeabi_dsub>
 8013872:	4602      	mov	r2, r0
 8013874:	460b      	mov	r3, r1
 8013876:	ec51 0b1a 	vmov	r0, r1, d10
 801387a:	f7ed f96d 	bl	8000b58 <__aeabi_dcmpgt>
 801387e:	2800      	cmp	r0, #0
 8013880:	f47f ae04 	bne.w	801348c <__ieee754_pow+0x3b4>
 8013884:	4aa2      	ldr	r2, [pc, #648]	; (8013b10 <__ieee754_pow+0xa38>)
 8013886:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801388a:	4293      	cmp	r3, r2
 801388c:	f340 8107 	ble.w	8013a9e <__ieee754_pow+0x9c6>
 8013890:	151b      	asrs	r3, r3, #20
 8013892:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013896:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801389a:	fa4a fa03 	asr.w	sl, sl, r3
 801389e:	44da      	add	sl, fp
 80138a0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80138a4:	489b      	ldr	r0, [pc, #620]	; (8013b14 <__ieee754_pow+0xa3c>)
 80138a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80138aa:	4108      	asrs	r0, r1
 80138ac:	ea00 030a 	and.w	r3, r0, sl
 80138b0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80138b4:	f1c1 0114 	rsb	r1, r1, #20
 80138b8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80138bc:	fa4a fa01 	asr.w	sl, sl, r1
 80138c0:	f1bb 0f00 	cmp.w	fp, #0
 80138c4:	f04f 0200 	mov.w	r2, #0
 80138c8:	4620      	mov	r0, r4
 80138ca:	4629      	mov	r1, r5
 80138cc:	bfb8      	it	lt
 80138ce:	f1ca 0a00 	rsblt	sl, sl, #0
 80138d2:	f7ec fcf9 	bl	80002c8 <__aeabi_dsub>
 80138d6:	ec41 0b19 	vmov	d9, r0, r1
 80138da:	4642      	mov	r2, r8
 80138dc:	464b      	mov	r3, r9
 80138de:	ec51 0b19 	vmov	r0, r1, d9
 80138e2:	f7ec fcf3 	bl	80002cc <__adddf3>
 80138e6:	a37a      	add	r3, pc, #488	; (adr r3, 8013ad0 <__ieee754_pow+0x9f8>)
 80138e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ec:	2000      	movs	r0, #0
 80138ee:	4604      	mov	r4, r0
 80138f0:	460d      	mov	r5, r1
 80138f2:	f7ec fea1 	bl	8000638 <__aeabi_dmul>
 80138f6:	ec53 2b19 	vmov	r2, r3, d9
 80138fa:	4606      	mov	r6, r0
 80138fc:	460f      	mov	r7, r1
 80138fe:	4620      	mov	r0, r4
 8013900:	4629      	mov	r1, r5
 8013902:	f7ec fce1 	bl	80002c8 <__aeabi_dsub>
 8013906:	4602      	mov	r2, r0
 8013908:	460b      	mov	r3, r1
 801390a:	4640      	mov	r0, r8
 801390c:	4649      	mov	r1, r9
 801390e:	f7ec fcdb 	bl	80002c8 <__aeabi_dsub>
 8013912:	a371      	add	r3, pc, #452	; (adr r3, 8013ad8 <__ieee754_pow+0xa00>)
 8013914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013918:	f7ec fe8e 	bl	8000638 <__aeabi_dmul>
 801391c:	a370      	add	r3, pc, #448	; (adr r3, 8013ae0 <__ieee754_pow+0xa08>)
 801391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013922:	4680      	mov	r8, r0
 8013924:	4689      	mov	r9, r1
 8013926:	4620      	mov	r0, r4
 8013928:	4629      	mov	r1, r5
 801392a:	f7ec fe85 	bl	8000638 <__aeabi_dmul>
 801392e:	4602      	mov	r2, r0
 8013930:	460b      	mov	r3, r1
 8013932:	4640      	mov	r0, r8
 8013934:	4649      	mov	r1, r9
 8013936:	f7ec fcc9 	bl	80002cc <__adddf3>
 801393a:	4604      	mov	r4, r0
 801393c:	460d      	mov	r5, r1
 801393e:	4602      	mov	r2, r0
 8013940:	460b      	mov	r3, r1
 8013942:	4630      	mov	r0, r6
 8013944:	4639      	mov	r1, r7
 8013946:	f7ec fcc1 	bl	80002cc <__adddf3>
 801394a:	4632      	mov	r2, r6
 801394c:	463b      	mov	r3, r7
 801394e:	4680      	mov	r8, r0
 8013950:	4689      	mov	r9, r1
 8013952:	f7ec fcb9 	bl	80002c8 <__aeabi_dsub>
 8013956:	4602      	mov	r2, r0
 8013958:	460b      	mov	r3, r1
 801395a:	4620      	mov	r0, r4
 801395c:	4629      	mov	r1, r5
 801395e:	f7ec fcb3 	bl	80002c8 <__aeabi_dsub>
 8013962:	4642      	mov	r2, r8
 8013964:	4606      	mov	r6, r0
 8013966:	460f      	mov	r7, r1
 8013968:	464b      	mov	r3, r9
 801396a:	4640      	mov	r0, r8
 801396c:	4649      	mov	r1, r9
 801396e:	f7ec fe63 	bl	8000638 <__aeabi_dmul>
 8013972:	a35d      	add	r3, pc, #372	; (adr r3, 8013ae8 <__ieee754_pow+0xa10>)
 8013974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013978:	4604      	mov	r4, r0
 801397a:	460d      	mov	r5, r1
 801397c:	f7ec fe5c 	bl	8000638 <__aeabi_dmul>
 8013980:	a35b      	add	r3, pc, #364	; (adr r3, 8013af0 <__ieee754_pow+0xa18>)
 8013982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013986:	f7ec fc9f 	bl	80002c8 <__aeabi_dsub>
 801398a:	4622      	mov	r2, r4
 801398c:	462b      	mov	r3, r5
 801398e:	f7ec fe53 	bl	8000638 <__aeabi_dmul>
 8013992:	a359      	add	r3, pc, #356	; (adr r3, 8013af8 <__ieee754_pow+0xa20>)
 8013994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013998:	f7ec fc98 	bl	80002cc <__adddf3>
 801399c:	4622      	mov	r2, r4
 801399e:	462b      	mov	r3, r5
 80139a0:	f7ec fe4a 	bl	8000638 <__aeabi_dmul>
 80139a4:	a356      	add	r3, pc, #344	; (adr r3, 8013b00 <__ieee754_pow+0xa28>)
 80139a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139aa:	f7ec fc8d 	bl	80002c8 <__aeabi_dsub>
 80139ae:	4622      	mov	r2, r4
 80139b0:	462b      	mov	r3, r5
 80139b2:	f7ec fe41 	bl	8000638 <__aeabi_dmul>
 80139b6:	a354      	add	r3, pc, #336	; (adr r3, 8013b08 <__ieee754_pow+0xa30>)
 80139b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139bc:	f7ec fc86 	bl	80002cc <__adddf3>
 80139c0:	4622      	mov	r2, r4
 80139c2:	462b      	mov	r3, r5
 80139c4:	f7ec fe38 	bl	8000638 <__aeabi_dmul>
 80139c8:	4602      	mov	r2, r0
 80139ca:	460b      	mov	r3, r1
 80139cc:	4640      	mov	r0, r8
 80139ce:	4649      	mov	r1, r9
 80139d0:	f7ec fc7a 	bl	80002c8 <__aeabi_dsub>
 80139d4:	4604      	mov	r4, r0
 80139d6:	460d      	mov	r5, r1
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	4640      	mov	r0, r8
 80139de:	4649      	mov	r1, r9
 80139e0:	f7ec fe2a 	bl	8000638 <__aeabi_dmul>
 80139e4:	2200      	movs	r2, #0
 80139e6:	ec41 0b19 	vmov	d9, r0, r1
 80139ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80139ee:	4620      	mov	r0, r4
 80139f0:	4629      	mov	r1, r5
 80139f2:	f7ec fc69 	bl	80002c8 <__aeabi_dsub>
 80139f6:	4602      	mov	r2, r0
 80139f8:	460b      	mov	r3, r1
 80139fa:	ec51 0b19 	vmov	r0, r1, d9
 80139fe:	f7ec ff45 	bl	800088c <__aeabi_ddiv>
 8013a02:	4632      	mov	r2, r6
 8013a04:	4604      	mov	r4, r0
 8013a06:	460d      	mov	r5, r1
 8013a08:	463b      	mov	r3, r7
 8013a0a:	4640      	mov	r0, r8
 8013a0c:	4649      	mov	r1, r9
 8013a0e:	f7ec fe13 	bl	8000638 <__aeabi_dmul>
 8013a12:	4632      	mov	r2, r6
 8013a14:	463b      	mov	r3, r7
 8013a16:	f7ec fc59 	bl	80002cc <__adddf3>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	4620      	mov	r0, r4
 8013a20:	4629      	mov	r1, r5
 8013a22:	f7ec fc51 	bl	80002c8 <__aeabi_dsub>
 8013a26:	4642      	mov	r2, r8
 8013a28:	464b      	mov	r3, r9
 8013a2a:	f7ec fc4d 	bl	80002c8 <__aeabi_dsub>
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4602      	mov	r2, r0
 8013a32:	4939      	ldr	r1, [pc, #228]	; (8013b18 <__ieee754_pow+0xa40>)
 8013a34:	2000      	movs	r0, #0
 8013a36:	f7ec fc47 	bl	80002c8 <__aeabi_dsub>
 8013a3a:	ec41 0b10 	vmov	d0, r0, r1
 8013a3e:	ee10 3a90 	vmov	r3, s1
 8013a42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a4a:	da2b      	bge.n	8013aa4 <__ieee754_pow+0x9cc>
 8013a4c:	4650      	mov	r0, sl
 8013a4e:	f000 f86f 	bl	8013b30 <scalbn>
 8013a52:	ec51 0b10 	vmov	r0, r1, d0
 8013a56:	ec53 2b18 	vmov	r2, r3, d8
 8013a5a:	f7ff bbee 	b.w	801323a <__ieee754_pow+0x162>
 8013a5e:	4b2f      	ldr	r3, [pc, #188]	; (8013b1c <__ieee754_pow+0xa44>)
 8013a60:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013a64:	429e      	cmp	r6, r3
 8013a66:	f77f af0d 	ble.w	8013884 <__ieee754_pow+0x7ac>
 8013a6a:	4b2d      	ldr	r3, [pc, #180]	; (8013b20 <__ieee754_pow+0xa48>)
 8013a6c:	440b      	add	r3, r1
 8013a6e:	4303      	orrs	r3, r0
 8013a70:	d009      	beq.n	8013a86 <__ieee754_pow+0x9ae>
 8013a72:	ec51 0b18 	vmov	r0, r1, d8
 8013a76:	2200      	movs	r2, #0
 8013a78:	2300      	movs	r3, #0
 8013a7a:	f7ed f84f 	bl	8000b1c <__aeabi_dcmplt>
 8013a7e:	3800      	subs	r0, #0
 8013a80:	bf18      	it	ne
 8013a82:	2001      	movne	r0, #1
 8013a84:	e448      	b.n	8013318 <__ieee754_pow+0x240>
 8013a86:	4622      	mov	r2, r4
 8013a88:	462b      	mov	r3, r5
 8013a8a:	f7ec fc1d 	bl	80002c8 <__aeabi_dsub>
 8013a8e:	4642      	mov	r2, r8
 8013a90:	464b      	mov	r3, r9
 8013a92:	f7ed f857 	bl	8000b44 <__aeabi_dcmpge>
 8013a96:	2800      	cmp	r0, #0
 8013a98:	f43f aef4 	beq.w	8013884 <__ieee754_pow+0x7ac>
 8013a9c:	e7e9      	b.n	8013a72 <__ieee754_pow+0x99a>
 8013a9e:	f04f 0a00 	mov.w	sl, #0
 8013aa2:	e71a      	b.n	80138da <__ieee754_pow+0x802>
 8013aa4:	ec51 0b10 	vmov	r0, r1, d0
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	e7d4      	b.n	8013a56 <__ieee754_pow+0x97e>
 8013aac:	491a      	ldr	r1, [pc, #104]	; (8013b18 <__ieee754_pow+0xa40>)
 8013aae:	2000      	movs	r0, #0
 8013ab0:	f7ff bb31 	b.w	8013116 <__ieee754_pow+0x3e>
 8013ab4:	2000      	movs	r0, #0
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	f7ff bb2d 	b.w	8013116 <__ieee754_pow+0x3e>
 8013abc:	4630      	mov	r0, r6
 8013abe:	4639      	mov	r1, r7
 8013ac0:	f7ff bb29 	b.w	8013116 <__ieee754_pow+0x3e>
 8013ac4:	9204      	str	r2, [sp, #16]
 8013ac6:	f7ff bb7b 	b.w	80131c0 <__ieee754_pow+0xe8>
 8013aca:	2300      	movs	r3, #0
 8013acc:	f7ff bb65 	b.w	801319a <__ieee754_pow+0xc2>
 8013ad0:	00000000 	.word	0x00000000
 8013ad4:	3fe62e43 	.word	0x3fe62e43
 8013ad8:	fefa39ef 	.word	0xfefa39ef
 8013adc:	3fe62e42 	.word	0x3fe62e42
 8013ae0:	0ca86c39 	.word	0x0ca86c39
 8013ae4:	be205c61 	.word	0xbe205c61
 8013ae8:	72bea4d0 	.word	0x72bea4d0
 8013aec:	3e663769 	.word	0x3e663769
 8013af0:	c5d26bf1 	.word	0xc5d26bf1
 8013af4:	3ebbbd41 	.word	0x3ebbbd41
 8013af8:	af25de2c 	.word	0xaf25de2c
 8013afc:	3f11566a 	.word	0x3f11566a
 8013b00:	16bebd93 	.word	0x16bebd93
 8013b04:	3f66c16c 	.word	0x3f66c16c
 8013b08:	5555553e 	.word	0x5555553e
 8013b0c:	3fc55555 	.word	0x3fc55555
 8013b10:	3fe00000 	.word	0x3fe00000
 8013b14:	fff00000 	.word	0xfff00000
 8013b18:	3ff00000 	.word	0x3ff00000
 8013b1c:	4090cbff 	.word	0x4090cbff
 8013b20:	3f6f3400 	.word	0x3f6f3400
 8013b24:	652b82fe 	.word	0x652b82fe
 8013b28:	3c971547 	.word	0x3c971547
 8013b2c:	00000000 	.word	0x00000000

08013b30 <scalbn>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	ec55 4b10 	vmov	r4, r5, d0
 8013b36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013b3a:	4606      	mov	r6, r0
 8013b3c:	462b      	mov	r3, r5
 8013b3e:	b999      	cbnz	r1, 8013b68 <scalbn+0x38>
 8013b40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b44:	4323      	orrs	r3, r4
 8013b46:	d03f      	beq.n	8013bc8 <scalbn+0x98>
 8013b48:	4b35      	ldr	r3, [pc, #212]	; (8013c20 <scalbn+0xf0>)
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	ee10 0a10 	vmov	r0, s0
 8013b50:	2200      	movs	r2, #0
 8013b52:	f7ec fd71 	bl	8000638 <__aeabi_dmul>
 8013b56:	4b33      	ldr	r3, [pc, #204]	; (8013c24 <scalbn+0xf4>)
 8013b58:	429e      	cmp	r6, r3
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	460d      	mov	r5, r1
 8013b5e:	da10      	bge.n	8013b82 <scalbn+0x52>
 8013b60:	a327      	add	r3, pc, #156	; (adr r3, 8013c00 <scalbn+0xd0>)
 8013b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b66:	e01f      	b.n	8013ba8 <scalbn+0x78>
 8013b68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013b6c:	4291      	cmp	r1, r2
 8013b6e:	d10c      	bne.n	8013b8a <scalbn+0x5a>
 8013b70:	ee10 2a10 	vmov	r2, s0
 8013b74:	4620      	mov	r0, r4
 8013b76:	4629      	mov	r1, r5
 8013b78:	f7ec fba8 	bl	80002cc <__adddf3>
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	460d      	mov	r5, r1
 8013b80:	e022      	b.n	8013bc8 <scalbn+0x98>
 8013b82:	460b      	mov	r3, r1
 8013b84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013b88:	3936      	subs	r1, #54	; 0x36
 8013b8a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013b8e:	4296      	cmp	r6, r2
 8013b90:	dd0d      	ble.n	8013bae <scalbn+0x7e>
 8013b92:	2d00      	cmp	r5, #0
 8013b94:	a11c      	add	r1, pc, #112	; (adr r1, 8013c08 <scalbn+0xd8>)
 8013b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b9a:	da02      	bge.n	8013ba2 <scalbn+0x72>
 8013b9c:	a11c      	add	r1, pc, #112	; (adr r1, 8013c10 <scalbn+0xe0>)
 8013b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ba2:	a319      	add	r3, pc, #100	; (adr r3, 8013c08 <scalbn+0xd8>)
 8013ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba8:	f7ec fd46 	bl	8000638 <__aeabi_dmul>
 8013bac:	e7e6      	b.n	8013b7c <scalbn+0x4c>
 8013bae:	1872      	adds	r2, r6, r1
 8013bb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013bb4:	428a      	cmp	r2, r1
 8013bb6:	dcec      	bgt.n	8013b92 <scalbn+0x62>
 8013bb8:	2a00      	cmp	r2, #0
 8013bba:	dd08      	ble.n	8013bce <scalbn+0x9e>
 8013bbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013bc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013bc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013bc8:	ec45 4b10 	vmov	d0, r4, r5
 8013bcc:	bd70      	pop	{r4, r5, r6, pc}
 8013bce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013bd2:	da08      	bge.n	8013be6 <scalbn+0xb6>
 8013bd4:	2d00      	cmp	r5, #0
 8013bd6:	a10a      	add	r1, pc, #40	; (adr r1, 8013c00 <scalbn+0xd0>)
 8013bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bdc:	dac0      	bge.n	8013b60 <scalbn+0x30>
 8013bde:	a10e      	add	r1, pc, #56	; (adr r1, 8013c18 <scalbn+0xe8>)
 8013be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013be4:	e7bc      	b.n	8013b60 <scalbn+0x30>
 8013be6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013bea:	3236      	adds	r2, #54	; 0x36
 8013bec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013bf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	4b0c      	ldr	r3, [pc, #48]	; (8013c28 <scalbn+0xf8>)
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	e7d5      	b.n	8013ba8 <scalbn+0x78>
 8013bfc:	f3af 8000 	nop.w
 8013c00:	c2f8f359 	.word	0xc2f8f359
 8013c04:	01a56e1f 	.word	0x01a56e1f
 8013c08:	8800759c 	.word	0x8800759c
 8013c0c:	7e37e43c 	.word	0x7e37e43c
 8013c10:	8800759c 	.word	0x8800759c
 8013c14:	fe37e43c 	.word	0xfe37e43c
 8013c18:	c2f8f359 	.word	0xc2f8f359
 8013c1c:	81a56e1f 	.word	0x81a56e1f
 8013c20:	43500000 	.word	0x43500000
 8013c24:	ffff3cb0 	.word	0xffff3cb0
 8013c28:	3c900000 	.word	0x3c900000

08013c2c <with_errno>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	4604      	mov	r4, r0
 8013c30:	460d      	mov	r5, r1
 8013c32:	4616      	mov	r6, r2
 8013c34:	f7fb f9ac 	bl	800ef90 <__errno>
 8013c38:	4629      	mov	r1, r5
 8013c3a:	6006      	str	r6, [r0, #0]
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	bd70      	pop	{r4, r5, r6, pc}

08013c40 <xflow>:
 8013c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c42:	4614      	mov	r4, r2
 8013c44:	461d      	mov	r5, r3
 8013c46:	b108      	cbz	r0, 8013c4c <xflow+0xc>
 8013c48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013c4c:	e9cd 2300 	strd	r2, r3, [sp]
 8013c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c54:	4620      	mov	r0, r4
 8013c56:	4629      	mov	r1, r5
 8013c58:	f7ec fcee 	bl	8000638 <__aeabi_dmul>
 8013c5c:	2222      	movs	r2, #34	; 0x22
 8013c5e:	b003      	add	sp, #12
 8013c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c64:	f7ff bfe2 	b.w	8013c2c <with_errno>

08013c68 <__math_uflow>:
 8013c68:	b508      	push	{r3, lr}
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013c70:	f7ff ffe6 	bl	8013c40 <xflow>
 8013c74:	ec41 0b10 	vmov	d0, r0, r1
 8013c78:	bd08      	pop	{r3, pc}

08013c7a <__math_oflow>:
 8013c7a:	b508      	push	{r3, lr}
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013c82:	f7ff ffdd 	bl	8013c40 <xflow>
 8013c86:	ec41 0b10 	vmov	d0, r0, r1
 8013c8a:	bd08      	pop	{r3, pc}

08013c8c <_init>:
 8013c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c8e:	bf00      	nop
 8013c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c92:	bc08      	pop	{r3}
 8013c94:	469e      	mov	lr, r3
 8013c96:	4770      	bx	lr

08013c98 <_fini>:
 8013c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c9a:	bf00      	nop
 8013c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c9e:	bc08      	pop	{r3}
 8013ca0:	469e      	mov	lr, r3
 8013ca2:	4770      	bx	lr
