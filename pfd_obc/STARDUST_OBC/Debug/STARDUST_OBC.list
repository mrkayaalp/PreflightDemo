
STARDUST_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001246c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08012640  08012640  00022640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012dfc  08012dfc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012dfc  08012dfc  00022dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e04  08012e04  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e04  08012e04  00022e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e08  08012e08  00022e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012e0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e5c  200001e0  08012fe8  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  2000703c  08012fe8  0003703c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002980c  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006108  00000000  00000000  00059a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002120  00000000  00000000  0005fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001982  00000000  00000000  00061c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000097cf  00000000  00000000  0006360a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002af52  00000000  00000000  0006cdd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea9bf  00000000  00000000  00097d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009f84  00000000  00000000  001826ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012624 	.word	0x08012624

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08012624 	.word	0x08012624

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <checkLiftoff>:
#include "checking.h"

#include "system.h"

uint8_t checkLiftoff()
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    if (fabs((double)accel.absG) > LIFTOFF_ACCELERATION &&
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <checkLiftoff+0x40>)
 8001036:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800103a:	eef0 7ae7 	vabs.f32	s15, s15
 800103e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd0b      	ble.n	8001064 <checkLiftoff+0x34>
        altitude.altitude > LIFTOFF_ALTITUDE)
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <checkLiftoff+0x44>)
 800104e:	edd3 7a03 	vldr	s15, [r3, #12]
    if (fabs((double)accel.absG) > LIFTOFF_ACCELERATION &&
 8001052:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001078 <checkLiftoff+0x48>
 8001056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd01      	ble.n	8001064 <checkLiftoff+0x34>
    {
        return 1;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <checkLiftoff+0x36>
    }
    else
        return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000844 	.word	0x20000844
 8001074:	200008c0 	.word	0x200008c0
 8001078:	437a0000 	.word	0x437a0000

0800107c <checkBurnout>:

uint8_t checkBurnout()
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
    if (fabs((double)accel.absG) < BURNOUT_ACCELERATION &&
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <checkBurnout+0x40>)
 8001082:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001086:	eef0 7ae7 	vabs.f32	s15, s15
 800108a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800108e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d50b      	bpl.n	80010b0 <checkBurnout+0x34>
        altitude.altitude > BURNOUT_ALTITUDE)
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <checkBurnout+0x44>)
 800109a:	edd3 7a03 	vldr	s15, [r3, #12]
    if (fabs((double)accel.absG) < BURNOUT_ACCELERATION &&
 800109e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010c4 <checkBurnout+0x48>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd01      	ble.n	80010b0 <checkBurnout+0x34>
    {
        return 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <checkBurnout+0x36>
    }
    else
        return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000844 	.word	0x20000844
 80010c0:	200008c0 	.word	0x200008c0
 80010c4:	44480000 	.word	0x44480000

080010c8 <checkApogee>:

uint8_t checkApogee()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    if (altitude.altitude > APOGEE_ALTITUDE &&
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <checkApogee+0x80>)
 80010ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800114c <checkApogee+0x84>
 80010d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dd2d      	ble.n	800113c <checkApogee+0x74>
        velocity.verticalVelocity < APOGEE_VERTICAL_VELOCITY &&
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <checkApogee+0x88>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
    if (altitude.altitude > APOGEE_ALTITUDE &&
 80010e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d523      	bpl.n	800113c <checkApogee+0x74>
        accel.x < 0.5 && (fabs(accel.y) > 0.5 || fabs(accel.z) > 0.5))
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <checkApogee+0x8c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
        velocity.verticalVelocity < APOGEE_VERTICAL_VELOCITY &&
 80010fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d519      	bpl.n	800113c <checkApogee+0x74>
        accel.x < 0.5 && (fabs(accel.y) > 0.5 || fabs(accel.z) > 0.5))
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <checkApogee+0x8c>)
 800110a:	edd3 7a01 	vldr	s15, [r3, #4]
 800110e:	eef0 7ae7 	vabs.f32	s15, s15
 8001112:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dc0b      	bgt.n	8001138 <checkApogee+0x70>
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <checkApogee+0x8c>)
 8001122:	edd3 7a02 	vldr	s15, [r3, #8]
 8001126:	eef0 7ae7 	vabs.f32	s15, s15
 800112a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	dd01      	ble.n	800113c <checkApogee+0x74>
    {
        return 1;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <checkApogee+0x76>
    }
    else
        return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200008c0 	.word	0x200008c0
 800114c:	45bb8000 	.word	0x45bb8000
 8001150:	20000878 	.word	0x20000878
 8001154:	20000844 	.word	0x20000844

08001158 <checkMainParachute>:

uint8_t checkMainParachute()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
    if (altitude.altitude < MAIN_PARACHUTE_ALTITUDE)
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <checkMainParachute+0x28>)
 800115e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001162:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001184 <checkMainParachute+0x2c>
 8001166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d501      	bpl.n	8001174 <checkMainParachute+0x1c>
    {
        return 1;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <checkMainParachute+0x1e>
    }
    else
        return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	200008c0 	.word	0x200008c0
 8001184:	447a0000 	.word	0x447a0000

08001188 <checkLanding>:

uint8_t checkLanding()
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    if (velocity.verticalVelocity > -1 && velocity.verticalVelocity < 1 &&
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <checkLanding+0x50>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	dd15      	ble.n	80011cc <checkLanding+0x44>
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <checkLanding+0x50>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d50b      	bpl.n	80011cc <checkLanding+0x44>
        altitude.altitude < 100)
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <checkLanding+0x54>)
 80011b6:	edd3 7a03 	vldr	s15, [r3, #12]
    if (velocity.verticalVelocity > -1 && velocity.verticalVelocity < 1 &&
 80011ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011e0 <checkLanding+0x58>
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d501      	bpl.n	80011cc <checkLanding+0x44>
    {
        return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <checkLanding+0x46>
    }
    else
        return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000878 	.word	0x20000878
 80011dc:	200008c0 	.word	0x200008c0
 80011e0:	42c80000 	.word	0x42c80000

080011e4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <BSP_I2C2_Init+0x58>)
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <BSP_I2C2_Init+0x5c>)
 80011f2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <BSP_I2C2_Init+0x60>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	4912      	ldr	r1, [pc, #72]	; (8001244 <BSP_I2C2_Init+0x60>)
 80011fc:	600a      	str	r2, [r1, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d117      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <BSP_I2C2_Init+0x58>)
 8001204:	f003 f8b3 	bl	800436e <HAL_I2C_GetState>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d111      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <BSP_I2C2_Init+0x58>)
 8001210:	f000 f84e 	bl	80012b0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <BSP_I2C2_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <BSP_I2C2_Init+0x58>)
 800121c:	f000 f814 	bl	8001248 <MX_I2C2_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001226:	f06f 0307 	mvn.w	r3, #7
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <BSP_I2C2_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001fc 	.word	0x200001fc
 8001240:	40005800 	.word	0x40005800
 8001244:	20000250 	.word	0x20000250

08001248 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <MX_I2C2_Init+0x60>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C2_Init+0x64>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f002 fa25 	bl	80036dc <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005800 	.word	0x40005800
 80012ac:	00061a80 	.word	0x00061a80

080012b0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <I2C2_MspInit+0xb8>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a29      	ldr	r2, [pc, #164]	; (8001368 <I2C2_MspInit+0xb8>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <I2C2_MspInit+0xb8>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <I2C2_MspInit+0xb8>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <I2C2_MspInit+0xb8>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <I2C2_MspInit+0xb8>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001302:	2304      	movs	r3, #4
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <I2C2_MspInit+0xbc>)
 800130e:	f001 fffb 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001324:	2304      	movs	r3, #4
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <I2C2_MspInit+0xc0>)
 8001330:	f001 ffea 	bl	8003308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <I2C2_MspInit+0xb8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <I2C2_MspInit+0xb8>)
 800133e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <I2C2_MspInit+0xb8>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2021      	movs	r0, #33	; 0x21
 8001356:	f001 fb91 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800135a:	2021      	movs	r0, #33	; 0x21
 800135c:	f001 fbaa 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800

08001374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_DMA_Init+0x4c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_DMA_Init+0x4c>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_DMA_Init+0x4c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	203b      	movs	r0, #59	; 0x3b
 800139c:	f001 fb6e 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013a0:	203b      	movs	r0, #59	; 0x3b
 80013a2:	f001 fb87 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	2045      	movs	r0, #69	; 0x45
 80013ac:	f001 fb66 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013b0:	2045      	movs	r0, #69	; 0x45
 80013b2:	f001 fb7f 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle =
        osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <MX_FREERTOS_Init+0x78>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_FREERTOS_Init+0x7c>)
 80013ce:	f009 f9ae 	bl	800a72e <osThreadNew>
 80013d2:	4603      	mov	r3, r0
    defaultTaskHandle =
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_FREERTOS_Init+0x80>)
 80013d6:	6013      	str	r3, [r2, #0]

    /* creation of runCommand */
    runCommandHandle =
        osThreadNew(runCommandEntry, NULL, &runCommand_attributes);
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_FREERTOS_Init+0x84>)
 80013da:	2100      	movs	r1, #0
 80013dc:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_FREERTOS_Init+0x88>)
 80013de:	f009 f9a6 	bl	800a72e <osThreadNew>
 80013e2:	4603      	mov	r3, r0
    runCommandHandle =
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <MX_FREERTOS_Init+0x8c>)
 80013e6:	6013      	str	r3, [r2, #0]

    /* creation of sendTelemetry */
    sendTelemetryHandle =
        osThreadNew(sendTelemetryEntry, NULL, &sendTelemetry_attributes);
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <MX_FREERTOS_Init+0x90>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_FREERTOS_Init+0x94>)
 80013ee:	f009 f99e 	bl	800a72e <osThreadNew>
 80013f2:	4603      	mov	r3, r0
    sendTelemetryHandle =
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <MX_FREERTOS_Init+0x98>)
 80013f6:	6013      	str	r3, [r2, #0]

    /* creation of checkState */
    checkStateHandle =
        osThreadNew(checkStateEntry, NULL, &checkState_attributes);
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <MX_FREERTOS_Init+0x9c>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4819      	ldr	r0, [pc, #100]	; (8001464 <MX_FREERTOS_Init+0xa0>)
 80013fe:	f009 f996 	bl	800a72e <osThreadNew>
 8001402:	4603      	mov	r3, r0
    checkStateHandle =
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <MX_FREERTOS_Init+0xa4>)
 8001406:	6013      	str	r3, [r2, #0]

    /* creation of someLoop */
    someLoopHandle = osThreadNew(someLoopEntry, NULL, &someLoop_attributes);
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_FREERTOS_Init+0xa8>)
 800140a:	2100      	movs	r1, #0
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <MX_FREERTOS_Init+0xac>)
 800140e:	f009 f98e 	bl	800a72e <osThreadNew>
 8001412:	4603      	mov	r3, r0
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_FREERTOS_Init+0xb0>)
 8001416:	6013      	str	r3, [r2, #0]

    /* creation of sdLog */
    sdLogHandle = osThreadNew(sdLogEnrty, NULL, &sdLog_attributes);
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <MX_FREERTOS_Init+0xb4>)
 800141a:	2100      	movs	r1, #0
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <MX_FREERTOS_Init+0xb8>)
 800141e:	f009 f986 	bl	800a72e <osThreadNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a16      	ldr	r2, [pc, #88]	; (8001480 <MX_FREERTOS_Init+0xbc>)
 8001426:	6013      	str	r3, [r2, #0]

    /* creation of dataTask */
    dataTaskHandle = osThreadNew(dataTaskEntry, NULL, &dataTask_attributes);
 8001428:	4a16      	ldr	r2, [pc, #88]	; (8001484 <MX_FREERTOS_Init+0xc0>)
 800142a:	2100      	movs	r1, #0
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <MX_FREERTOS_Init+0xc4>)
 800142e:	f009 f97e 	bl	800a72e <osThreadNew>
 8001432:	4603      	mov	r3, r0
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_FREERTOS_Init+0xc8>)
 8001436:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_THREADS */

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08012888 	.word	0x08012888
 8001440:	08001491 	.word	0x08001491
 8001444:	20000258 	.word	0x20000258
 8001448:	080128ac 	.word	0x080128ac
 800144c:	080014a1 	.word	0x080014a1
 8001450:	2000025c 	.word	0x2000025c
 8001454:	080128d0 	.word	0x080128d0
 8001458:	080014b1 	.word	0x080014b1
 800145c:	20000260 	.word	0x20000260
 8001460:	080128f4 	.word	0x080128f4
 8001464:	080014c1 	.word	0x080014c1
 8001468:	20000264 	.word	0x20000264
 800146c:	08012918 	.word	0x08012918
 8001470:	08001655 	.word	0x08001655
 8001474:	20000268 	.word	0x20000268
 8001478:	0801293c 	.word	0x0801293c
 800147c:	08001665 	.word	0x08001665
 8001480:	2000026c 	.word	0x2000026c
 8001484:	08012960 	.word	0x08012960
 8001488:	080016a9 	.word	0x080016a9
 800148c:	20000270 	.word	0x20000270

08001490 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f009 f9da 	bl	800a852 <osDelay>
 800149e:	e7fb      	b.n	8001498 <StartDefaultTask+0x8>

080014a0 <runCommandEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCommandEntry */
void runCommandEntry(void *argument)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
        //            HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin,
        //            GPIO_PIN_SET); HAL_GPIO_WritePin(MAINP_GPIO_Port,
        //            MAINP_Pin, GPIO_PIN_SET);
        //        }

        osDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f009 f9d2 	bl	800a852 <osDelay>
 80014ae:	e7fb      	b.n	80014a8 <runCommandEntry+0x8>

080014b0 <sendTelemetryEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sendTelemetryEntry */
void sendTelemetryEntry(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
//        createTxString();
//        HAL_UART_Transmit(&huart2, (uint8_t *)tlcTxString, strlen(tlcTxString),
//                          100);
//        HAL_UART_Transmit(&huart4, (uint8_t *)tlcTxString, strlen(tlcTxString),
//                          100);
        osDelay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f009 f9ca 	bl	800a852 <osDelay>
 80014be:	e7fb      	b.n	80014b8 <sendTelemetryEntry+0x8>

080014c0 <checkStateEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_checkStateEntry */
void checkStateEntry(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN checkStateEntry */
    /* Infinite loop */
    for (;;)
    {
        if(time.current != time.prevTime){
 80014c8:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <checkStateEntry+0x180>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <checkStateEntry+0x180>)
 80014d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d00f      	beq.n	80014fe <checkStateEntry+0x3e>
    		sprintf(flightStateData, "%d\n", flightState);
 80014de:	4b59      	ldr	r3, [pc, #356]	; (8001644 <checkStateEntry+0x184>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4958      	ldr	r1, [pc, #352]	; (8001648 <checkStateEntry+0x188>)
 80014e6:	4859      	ldr	r0, [pc, #356]	; (800164c <checkStateEntry+0x18c>)
 80014e8:	f00d f838 	bl	800e55c <siprintf>
    		HAL_UART_Transmit_IT(&huart2, flightStateData, sizeof(flightStateData));
 80014ec:	2202      	movs	r2, #2
 80014ee:	4957      	ldr	r1, [pc, #348]	; (800164c <checkStateEntry+0x18c>)
 80014f0:	4857      	ldr	r0, [pc, #348]	; (8001650 <checkStateEntry+0x190>)
 80014f2:	f007 f8f6 	bl	80086e2 <HAL_UART_Transmit_IT>
    		time.prevTime = time.current;
 80014f6:	4b52      	ldr	r3, [pc, #328]	; (8001640 <checkStateEntry+0x180>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a51      	ldr	r2, [pc, #324]	; (8001640 <checkStateEntry+0x180>)
 80014fc:	6053      	str	r3, [r2, #4]
        }
        switch (flightState)
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <checkStateEntry+0x184>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3b01      	subs	r3, #1
 8001504:	2b08      	cmp	r3, #8
 8001506:	f200 808b 	bhi.w	8001620 <checkStateEntry+0x160>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <checkStateEntry+0x50>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001535 	.word	0x08001535
 8001514:	08001621 	.word	0x08001621
 8001518:	08001621 	.word	0x08001621
 800151c:	08001559 	.word	0x08001559
 8001520:	0800157d 	.word	0x0800157d
 8001524:	080015a7 	.word	0x080015a7
 8001528:	080015d1 	.word	0x080015d1
 800152c:	080015f5 	.word	0x080015f5
 8001530:	08001617 	.word	0x08001617
        {
        case START:
            if (checkLiftoff() == 1)
 8001534:	f7ff fd7c 	bl	8001030 <checkLiftoff>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d172      	bne.n	8001624 <checkStateEntry+0x164>
            {
                time.liftoffTime = HAL_GetTick();
 800153e:	f001 f9b5 	bl	80028ac <HAL_GetTick>
 8001542:	ee07 0a90 	vmov	s15, r0
 8001546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <checkStateEntry+0x180>)
 800154c:	edc3 7a02 	vstr	s15, [r3, #8]
                flightState = AFTER_LIFTOFF;
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <checkStateEntry+0x184>)
 8001552:	2204      	movs	r2, #4
 8001554:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001556:	e065      	b.n	8001624 <checkStateEntry+0x164>

        case AFTER_LIFTOFF:
            if (checkBurnout() == 1)
 8001558:	f7ff fd90 	bl	800107c <checkBurnout>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d162      	bne.n	8001628 <checkStateEntry+0x168>
            {
                time.burnoutTime = HAL_GetTick();
 8001562:	f001 f9a3 	bl	80028ac <HAL_GetTick>
 8001566:	ee07 0a90 	vmov	s15, r0
 800156a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <checkStateEntry+0x180>)
 8001570:	edc3 7a03 	vstr	s15, [r3, #12]
                flightState = AFTER_BURNOUT;
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <checkStateEntry+0x184>)
 8001576:	2205      	movs	r2, #5
 8001578:	701a      	strb	r2, [r3, #0]
            }
            break;
 800157a:	e055      	b.n	8001628 <checkStateEntry+0x168>

        case AFTER_BURNOUT:
            if (checkApogee() == 1)
 800157c:	f7ff fda4 	bl	80010c8 <checkApogee>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d152      	bne.n	800162c <checkStateEntry+0x16c>
            {
                time.apogeeTime = HAL_GetTick();
 8001586:	f001 f991 	bl	80028ac <HAL_GetTick>
 800158a:	ee07 0a90 	vmov	s15, r0
 800158e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <checkStateEntry+0x180>)
 8001594:	edc3 7a04 	vstr	s15, [r3, #16]
                flightState = AFTER_APOGEE;
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <checkStateEntry+0x184>)
 800159a:	2206      	movs	r2, #6
 800159c:	701a      	strb	r2, [r3, #0]
                dragSchute(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 ffc8 	bl	8002534 <dragSchute>
            }
            break;
 80015a4:	e042      	b.n	800162c <checkStateEntry+0x16c>

        case AFTER_APOGEE:
            if (checkMainParachute() == 1)
 80015a6:	f7ff fdd7 	bl	8001158 <checkMainParachute>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d13f      	bne.n	8001630 <checkStateEntry+0x170>
            {
                time.mainParachuteTime = HAL_GetTick();
 80015b0:	f001 f97c 	bl	80028ac <HAL_GetTick>
 80015b4:	ee07 0a90 	vmov	s15, r0
 80015b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <checkStateEntry+0x180>)
 80015be:	edc3 7a05 	vstr	s15, [r3, #20]
                flightState = AFTER_MAIN_PAR;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <checkStateEntry+0x184>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	701a      	strb	r2, [r3, #0]
                mainSchute(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f000 ffcd 	bl	8002568 <mainSchute>
            }
            break;
 80015ce:	e02f      	b.n	8001630 <checkStateEntry+0x170>

        case AFTER_MAIN_PAR:
            if (checkLanding() == 1)
 80015d0:	f7ff fdda 	bl	8001188 <checkLanding>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d12c      	bne.n	8001634 <checkStateEntry+0x174>
            {
                time.landingTime = HAL_GetTick();
 80015da:	f001 f967 	bl	80028ac <HAL_GetTick>
 80015de:	ee07 0a90 	vmov	s15, r0
 80015e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <checkStateEntry+0x180>)
 80015e8:	edc3 7a08 	vstr	s15, [r3, #32]
                flightState = LANDED;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <checkStateEntry+0x184>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80015f2:	e01f      	b.n	8001634 <checkStateEntry+0x174>

        case LANDED:
            if (time.landingTime == 0.0f)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <checkStateEntry+0x180>)
 80015f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80015fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d103      	bne.n	800160c <checkStateEntry+0x14c>
            {
                time.landingTime = time.current;
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <checkStateEntry+0x180>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <checkStateEntry+0x180>)
 800160a:	6213      	str	r3, [r2, #32]
            }
            osDelay(10000); /* TODO: Something for saving power*/
 800160c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001610:	f009 f91f 	bl	800a852 <osDelay>
            break;
 8001614:	e00f      	b.n	8001636 <checkStateEntry+0x176>

        case FLIGHT_FAILURE:
            osDelay(10000); /* TODO: Something for saving power*/
 8001616:	f242 7010 	movw	r0, #10000	; 0x2710
 800161a:	f009 f91a 	bl	800a852 <osDelay>
            break;
 800161e:	e00a      	b.n	8001636 <checkStateEntry+0x176>

        default:
            // DEBUG_PROFILE_X
            break;
 8001620:	bf00      	nop
 8001622:	e008      	b.n	8001636 <checkStateEntry+0x176>
            break;
 8001624:	bf00      	nop
 8001626:	e006      	b.n	8001636 <checkStateEntry+0x176>
            break;
 8001628:	bf00      	nop
 800162a:	e004      	b.n	8001636 <checkStateEntry+0x176>
            break;
 800162c:	bf00      	nop
 800162e:	e002      	b.n	8001636 <checkStateEntry+0x176>
            break;
 8001630:	bf00      	nop
 8001632:	e000      	b.n	8001636 <checkStateEntry+0x176>
            break;
 8001634:	bf00      	nop
        }
        osDelay(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f009 f90b 	bl	800a852 <osDelay>
        if(time.current != time.prevTime){
 800163c:	e744      	b.n	80014c8 <checkStateEntry+0x8>
 800163e:	bf00      	nop
 8001640:	20000820 	.word	0x20000820
 8001644:	20000000 	.word	0x20000000
 8001648:	08012694 	.word	0x08012694
 800164c:	20000254 	.word	0x20000254
 8001650:	20000950 	.word	0x20000950

08001654 <someLoopEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_someLoopEntry */
void someLoopEntry(void *argument)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
        //        strlen(tlcTxString),
        //                          100);
        //        HAL_UART_Transmit(&huart2, (uint8_t *)tlcTxString,
        //        strlen(tlcTxString),
        //                          100);
        osDelay(10);
 800165c:	200a      	movs	r0, #10
 800165e:	f009 f8f8 	bl	800a852 <osDelay>
 8001662:	e7fb      	b.n	800165c <someLoopEntry+0x8>

08001664 <sdLogEnrty>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sdLogEnrty */
void sdLogEnrty(void *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN sdLogEnrty */
    // initSD();
    // fram_init();

    int fram_flight_state = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
    fram_flight_state = fram_read8(FRAM_FLIGHT_STATE_ADDR);
 8001670:	2050      	movs	r0, #80	; 0x50
 8001672:	f001 f8a7 	bl	80027c4 <fram_read8>
 8001676:	4603      	mov	r3, r0
 8001678:	617b      	str	r3, [r7, #20]
    if (fram_flight_state == LANDED)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d101      	bne.n	8001684 <sdLogEnrty+0x20>
    {
        fram_flight_state = START;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
    }
    if (fram_flight_state != START)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d003      	beq.n	8001692 <sdLogEnrty+0x2e>
    {
        flightState = fram_flight_state;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <sdLogEnrty+0x40>)
 8001690:	701a      	strb	r2, [r3, #0]
    }

    float test_float = 0.0f;
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
    int tick_t = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
        // fram_write8(FRAM_SYS_TICK_ADDR, fram_test8);
        // osDelay(10);

        // fram_debug_data = fram_read8(FRAM_SYS_TICK_ADDR);

        osDelay(1);
 800169c:	2001      	movs	r0, #1
 800169e:	f009 f8d8 	bl	800a852 <osDelay>
 80016a2:	e7fb      	b.n	800169c <sdLogEnrty+0x38>
 80016a4:	20000000 	.word	0x20000000

080016a8 <dataTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_dataTaskEntry */
void dataTaskEntry(void *argument)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
        // HAL_GPIO_TogglePin(USERL_GPIO_Port, USERL_Pin);

        //altitudeApogee();
        //velocityCalculated();
        // dataCollectingTime = HAL_GetTick() - temp;
        osDelay(1);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f009 f8ce 	bl	800a852 <osDelay>
 80016b6:	e7fb      	b.n	80016b0 <dataTaskEntry+0x8>

080016b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <MX_GPIO_Init+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <MX_GPIO_Init+0x120>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAINP_Pin|DRAGP_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2103      	movs	r1, #3
 8001742:	4826      	ldr	r0, [pc, #152]	; (80017dc <MX_GPIO_Init+0x124>)
 8001744:	f001 ff8c 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USERL_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2118      	movs	r1, #24
 800174c:	4824      	ldr	r0, [pc, #144]	; (80017e0 <MX_GPIO_Init+0x128>)
 800174e:	f001 ff87 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USERB_Pin;
 8001752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001758:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USERB_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481c      	ldr	r0, [pc, #112]	; (80017dc <MX_GPIO_Init+0x124>)
 800176a:	f001 fdcd 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800176e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4816      	ldr	r0, [pc, #88]	; (80017dc <MX_GPIO_Init+0x124>)
 8001784:	f001 fdc0 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAINP_Pin|DRAGP_Pin;
 8001788:	2303      	movs	r3, #3
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480f      	ldr	r0, [pc, #60]	; (80017dc <MX_GPIO_Init+0x124>)
 80017a0:	f001 fdb2 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USERL_Pin|BUZZER_Pin;
 80017a4:	2318      	movs	r3, #24
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <MX_GPIO_Init+0x128>)
 80017bc:	f001 fda4 	bl	8003308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2105      	movs	r1, #5
 80017c4:	2028      	movs	r0, #40	; 0x28
 80017c6:	f001 f959 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ca:	2028      	movs	r0, #40	; 0x28
 80017cc:	f001 f972 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020400 	.word	0x40020400

080017e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C1_Init+0x50>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_I2C1_Init+0x54>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C1_Init+0x50>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_I2C1_Init+0x58>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_I2C1_Init+0x50>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C1_Init+0x50>)
 8001822:	f001 ff5b 	bl	80036dc <HAL_I2C_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 fa67 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000274 	.word	0x20000274
 8001838:	40005400 	.word	0x40005400
 800183c:	00061a80 	.word	0x00061a80

08001840 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_I2C3_Init+0x50>)
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <MX_I2C3_Init+0x54>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_I2C3_Init+0x50>)
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_I2C3_Init+0x58>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_I2C3_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_I2C3_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_I2C3_Init+0x50>)
 800185e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001862:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_I2C3_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_I2C3_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_I2C3_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_I2C3_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_I2C3_Init+0x50>)
 800187e:	f001 ff2d 	bl	80036dc <HAL_I2C_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001888:	f000 fa39 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200002c8 	.word	0x200002c8
 8001894:	40005c00 	.word	0x40005c00
 8001898:	000186a0 	.word	0x000186a0

0800189c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_I2C_MspInit+0x148>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d134      	bne.n	8001928 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	; 0xc0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ea:	2304      	movs	r3, #4
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	483d      	ldr	r0, [pc, #244]	; (80019ec <HAL_I2C_MspInit+0x150>)
 80018f6:	f001 fd07 	bl	8003308 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	201f      	movs	r0, #31
 800191c:	f001 f8ae 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001920:	201f      	movs	r0, #31
 8001922:	f001 f8c7 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001926:	e058      	b.n	80019da <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <HAL_I2C_MspInit+0x154>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d153      	bne.n	80019da <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800197c:	2304      	movs	r3, #4
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	481b      	ldr	r0, [pc, #108]	; (80019f4 <HAL_I2C_MspInit+0x158>)
 8001988:	f001 fcbe 	bl	8003308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001992:	2312      	movs	r3, #18
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800199e:	2304      	movs	r3, #4
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4813      	ldr	r0, [pc, #76]	; (80019f8 <HAL_I2C_MspInit+0x15c>)
 80019aa:	f001 fcad 	bl	8003308 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 80019b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_I2C_MspInit+0x14c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	2048      	movs	r0, #72	; 0x48
 80019d0:	f001 f854 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80019d4:	2048      	movs	r0, #72	; 0x48
 80019d6:	f001 f86d 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40005c00 	.word	0x40005c00
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020000 	.word	0x40020000

080019fc <HAL_I2C_MemRxCpltCallback>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d004      	beq.n	8001a1a <HAL_I2C_MemRxCpltCallback+0x1e>
    {
        /* BMP280 IT*/
    }
    else if (hi2c->Instance == hi2c2.Instance)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_I2C_MemRxCpltCallback+0x30>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
    }
    else if (hi2c->Instance == hi2c3.Instance)
    {
        /* LIS & MB85R  IT*/
    }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000274 	.word	0x20000274
 8001a2c:	200001fc 	.word	0x200001fc

08001a30 <HAL_UART_RxCpltCallback>:
uint8_t rxBuffer[2];
uint8_t rxIndex = 0;
uint8_t rxStr[270];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart4.Instance)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_UART_RxCpltCallback+0x118>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d14b      	bne.n	8001adc <HAL_UART_RxCpltCallback+0xac>
    {
        // receive telemetry strong that ends with '\n' then parse
        if (tlcRxByte == '\n')
 8001a44:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_UART_RxCpltCallback+0x11c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d11f      	bne.n	8001a8c <HAL_UART_RxCpltCallback+0x5c>
        {
            tlcRxString[tlcRxIndex] = '\n';
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_UART_RxCpltCallback+0x124>)
 8001a52:	210a      	movs	r1, #10
 8001a54:	54d1      	strb	r1, [r2, r3]
            tlcRxIndex++;
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001a5e:	6013      	str	r3, [r2, #0]
            // parse telemetry string
            parseTlcString(tlcRxString);
 8001a60:	483c      	ldr	r0, [pc, #240]	; (8001b54 <HAL_UART_RxCpltCallback+0x124>)
 8001a62:	f000 fd0f 	bl	8002484 <parseTlcString>
            tlcRxIndex = 0;
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
            // clear telemetry string
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e007      	b.n	8001a82 <HAL_UART_RxCpltCallback+0x52>
            {
                tlcRxString[i] = '\0';
 8001a72:	4a38      	ldr	r2, [pc, #224]	; (8001b54 <HAL_UART_RxCpltCallback+0x124>)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4413      	add	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a88:	d3f3      	bcc.n	8001a72 <HAL_UART_RxCpltCallback+0x42>
 8001a8a:	e00a      	b.n	8001aa2 <HAL_UART_RxCpltCallback+0x72>
            }
        }
        else
        {
            tlcRxString[tlcRxIndex] = tlcRxByte;
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2e      	ldr	r2, [pc, #184]	; (8001b4c <HAL_UART_RxCpltCallback+0x11c>)
 8001a92:	7811      	ldrb	r1, [r2, #0]
 8001a94:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <HAL_UART_RxCpltCallback+0x124>)
 8001a96:	54d1      	strb	r1, [r2, r3]
            tlcRxIndex++;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001aa0:	6013      	str	r3, [r2, #0]
        }

        if (tlcRxIndex > STRING_BUFFER_SIZE)
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001aaa:	dd11      	ble.n	8001ad0 <HAL_UART_RxCpltCallback+0xa0>
        {
            tlcRxIndex = 0;
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_UART_RxCpltCallback+0x120>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e007      	b.n	8001ac8 <HAL_UART_RxCpltCallback+0x98>
            {
                tlcRxString[i] = '\0';
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_UART_RxCpltCallback+0x124>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(tlcRxString); i++)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ace:	d3f3      	bcc.n	8001ab8 <HAL_UART_RxCpltCallback+0x88>
            }
        }
        HAL_UART_Receive_IT(&huart4, &tlcRxByte, 1);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	491e      	ldr	r1, [pc, #120]	; (8001b4c <HAL_UART_RxCpltCallback+0x11c>)
 8001ad4:	481c      	ldr	r0, [pc, #112]	; (8001b48 <HAL_UART_RxCpltCallback+0x118>)
 8001ad6:	f006 fe49 	bl	800876c <HAL_UART_Receive_IT>
 8001ada:	e02c      	b.n	8001b36 <HAL_UART_RxCpltCallback+0x106>
    }
    else if (huart->Instance == huart2.Instance)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_UART_RxCpltCallback+0x128>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d126      	bne.n	8001b36 <HAL_UART_RxCpltCallback+0x106>
    {
        if (rxBuffer[0] != '\n')
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_UART_RxCpltCallback+0x12c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b0a      	cmp	r3, #10
 8001aee:	d00d      	beq.n	8001b0c <HAL_UART_RxCpltCallback+0xdc>
        {
            rxStr[rxIndex] = rxBuffer[0];
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_UART_RxCpltCallback+0x130>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_UART_RxCpltCallback+0x12c>)
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_UART_RxCpltCallback+0x134>)
 8001afc:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_UART_RxCpltCallback+0x130>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_UART_RxCpltCallback+0x130>)
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e014      	b.n	8001b36 <HAL_UART_RxCpltCallback+0x106>
        }
        else
        {
            // parseData(rxStr);
            parseKongrulData(rxStr);
 8001b0c:	4815      	ldr	r0, [pc, #84]	; (8001b64 <HAL_UART_RxCpltCallback+0x134>)
 8001b0e:	f000 fc91 	bl	8002434 <parseKongrulData>
            rxIndex = 0;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_UART_RxCpltCallback+0x130>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(rxStr); i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e007      	b.n	8001b2e <HAL_UART_RxCpltCallback+0xfe>
            {
                rxStr[i] = '\0';
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_UART_RxCpltCallback+0x134>)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < sizeof(rxStr); i++)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001b34:	d3f3      	bcc.n	8001b1e <HAL_UART_RxCpltCallback+0xee>
            }
        }
    }
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	4908      	ldr	r1, [pc, #32]	; (8001b5c <HAL_UART_RxCpltCallback+0x12c>)
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <HAL_UART_RxCpltCallback+0x128>)
 8001b3c:	f006 fe16 	bl	800876c <HAL_UART_Receive_IT>
}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000090c 	.word	0x2000090c
 8001b4c:	2000031c 	.word	0x2000031c
 8001b50:	20000320 	.word	0x20000320
 8001b54:	200005c8 	.word	0x200005c8
 8001b58:	20000950 	.word	0x20000950
 8001b5c:	20000324 	.word	0x20000324
 8001b60:	20000326 	.word	0x20000326
 8001b64:	20000328 	.word	0x20000328

08001b68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001b6e:	f000 fe67 	bl	8002840 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001b72:	f000 f843 	bl	8001bfc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001b76:	f7ff fd9f 	bl	80016b8 <MX_GPIO_Init>
    MX_DMA_Init();
 8001b7a:	f7ff fbfb 	bl	8001374 <MX_DMA_Init>
    MX_I2C1_Init();
 8001b7e:	f7ff fe31 	bl	80017e4 <MX_I2C1_Init>
    MX_SDIO_SD_Init();
 8001b82:	f000 f8c5 	bl	8001d10 <MX_SDIO_SD_Init>
    MX_UART4_Init();
 8001b86:	f000 fd1b 	bl	80025c0 <MX_UART4_Init>
    MX_USART2_UART_Init();
 8001b8a:	f000 fd43 	bl	8002614 <MX_USART2_UART_Init>
    MX_FATFS_Init();
 8001b8e:	f008 fa49 	bl	800a024 <MX_FATFS_Init>
    MX_I2C3_Init();
 8001b92:	f7ff fe55 	bl	8001840 <MX_I2C3_Init>
    /* USER CODE BEGIN 2 */
    led(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 fcb2 	bl	8002500 <led>
    BSP_I2C2_Init();
 8001b9c:	f7ff fb22 	bl	80011e4 <BSP_I2C2_Init>

    openingThemeSong(400);
 8001ba0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ba4:	f000 fbf6 	bl	8002394 <openingThemeSong>

    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <main+0x88>)
 8001bac:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <main+0x8c>)
 8001bae:	f006 fddd 	bl	800876c <HAL_UART_Receive_IT>

    //     i2c address scan
    for (int i = 0; i < 0xFF + 1; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	e011      	b.n	8001bdc <main+0x74>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c3, i, 2, 10) == HAL_OK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <main+0x90>)
 8001bc2:	f002 f8f5 	bl	8003db0 <HAL_I2C_IsDeviceReady>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <main+0x6e>
        {
            int a = i >> 1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	105b      	asrs	r3, r3, #1
 8001bd0:	603b      	str	r3, [r7, #0]
            a = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 0xFF + 1; i++)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	ddea      	ble.n	8001bb8 <main+0x50>
    }

    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize(); /* Call init function for freertos objects (in
 8001be2:	f008 fd23 	bl	800a62c <osKernelInitialize>
                             freertos.c) */
    MX_FREERTOS_Init();
 8001be6:	f7ff fbed 	bl	80013c4 <MX_FREERTOS_Init>

    /* Start scheduler */
    osKernelStart();
 8001bea:	f008 fd65 	bl	800a6b8 <osKernelStart>
    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8001bee:	e7fe      	b.n	8001bee <main+0x86>
 8001bf0:	20000324 	.word	0x20000324
 8001bf4:	20000950 	.word	0x20000950
 8001bf8:	200002c8 	.word	0x200002c8

08001bfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2234      	movs	r2, #52	; 0x34
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00c fd37 	bl	800e67e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <SystemClock_Config+0xdc>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <SystemClock_Config+0xdc>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <SystemClock_Config+0xdc>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <SystemClock_Config+0xe0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <SystemClock_Config+0xe0>)
 8001c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <SystemClock_Config+0xe0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c60:	2310      	movs	r3, #16
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c64:	2302      	movs	r3, #2
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 180;
 8001c70:	23b4      	movs	r3, #180	; 0xb4
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 fe79 	bl	800697c <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x98>
    {
        Error_Handler();
 8001c90:	f000 f835 	bl	8001cfe <Error_Handler>
    }

    /** Activate the Over-Drive mode
     */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c94:	f004 f802 	bl	8005c9c <HAL_PWREx_EnableOverDrive>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0xa6>
    {
        Error_Handler();
 8001c9e:	f000 f82e 	bl	8001cfe <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	60bb      	str	r3, [r7, #8]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb8:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 f83b 	bl	8005d3c <HAL_RCC_ClockConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0xd4>
    {
        Error_Handler();
 8001ccc:	f000 f817 	bl	8001cfe <Error_Handler>
    }
}
 8001cd0:	bf00      	nop
 8001cd2:	3750      	adds	r7, #80	; 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8001cf2:	f000 fdc7 	bl	8002884 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d02:	b672      	cpsid	i
}
 8001d04:	bf00      	nop
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
    {
        led(0);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 fbfa 	bl	8002500 <led>
 8001d0c:	e7fb      	b.n	8001d06 <Error_Handler+0x8>
	...

08001d10 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d16:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d18:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20000438 	.word	0x20000438
 8001d4c:	40012c00 	.word	0x40012c00

08001d50 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0a2      	sub	sp, #136	; 0x88
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	225c      	movs	r2, #92	; 0x5c
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00c fc84 	bl	800e67e <memset>
  if(sdHandle->Instance==SDIO)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a83      	ldr	r2, [pc, #524]	; (8001f88 <HAL_SD_MspInit+0x238>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f040 80fe 	bne.w	8001f7e <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 f91d 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001da0:	f7ff ffad 	bl	8001cfe <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	4b78      	ldr	r3, [pc, #480]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	4a77      	ldr	r2, [pc, #476]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001dae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db2:	6453      	str	r3, [r2, #68]	; 0x44
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a70      	ldr	r2, [pc, #448]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a69      	ldr	r2, [pc, #420]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <HAL_SD_MspInit+0x23c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e14:	2304      	movs	r3, #4
 8001e16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e26:	230c      	movs	r3, #12
 8001e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e30:	4619      	mov	r1, r3
 8001e32:	4857      	ldr	r0, [pc, #348]	; (8001f90 <HAL_SD_MspInit+0x240>)
 8001e34:	f001 fa68 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e56:	4619      	mov	r1, r3
 8001e58:	484e      	ldr	r0, [pc, #312]	; (8001f94 <HAL_SD_MspInit+0x244>)
 8001e5a:	f001 fa55 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e70:	230c      	movs	r3, #12
 8001e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4846      	ldr	r0, [pc, #280]	; (8001f98 <HAL_SD_MspInit+0x248>)
 8001e7e:	f001 fa43 	bl	8003308 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001e84:	4a46      	ldr	r2, [pc, #280]	; (8001fa0 <HAL_SD_MspInit+0x250>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ec6:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ec8:	2203      	movs	r2, #3
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ed6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001edc:	482f      	ldr	r0, [pc, #188]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ede:	f000 fdf7 	bl	8002ad0 <HAL_DMA_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001ee8:	f7ff ff09 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <HAL_SD_MspInit+0x24c>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001efa:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_SD_MspInit+0x258>)
 8001efc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f04:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f06:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f18:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f20:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f28:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f38:	2204      	movs	r2, #4
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f3e:	2203      	movs	r2, #3
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f54:	f000 fdbc 	bl	8002ad0 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8001f5e:	f7ff fece 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_SD_MspInit+0x254>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2105      	movs	r1, #5
 8001f72:	2031      	movs	r0, #49	; 0x31
 8001f74:	f000 fd82 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001f78:	2031      	movs	r0, #49	; 0x31
 8001f7a:	f000 fd9b 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3788      	adds	r7, #136	; 0x88
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	200004bc 	.word	0x200004bc
 8001fa0:	40026458 	.word	0x40026458
 8001fa4:	2000051c 	.word	0x2000051c
 8001fa8:	400264a0 	.word	0x400264a0

08001fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_MspInit+0x64>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a15      	ldr	r2, [pc, #84]	; (8002010 <HAL_MspInit+0x64>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_MspInit+0x64>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_MspInit+0x64>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_MspInit+0x64>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_MspInit+0x64>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	210f      	movs	r1, #15
 8001fee:	f06f 0001 	mvn.w	r0, #1
 8001ff2:	f000 fd43 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 fd3e 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002000:	2001      	movs	r0, #1
 8002002:	f000 fd57 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_InitTick+0xe8>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a33      	ldr	r2, [pc, #204]	; (80020fc <HAL_InitTick+0xe8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_InitTick+0xe8>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002040:	f107 0210 	add.w	r2, r7, #16
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 ff90 	bl	8005f70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800205a:	f003 ff61 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 800205e:	6378      	str	r0, [r7, #52]	; 0x34
 8002060:	e004      	b.n	800206c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002062:	f003 ff5d 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8002066:	4603      	mov	r3, r0
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_InitTick+0xec>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	3b01      	subs	r3, #1
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_InitTick+0xf0>)
 800207c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_InitTick+0xf0>)
 8002084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002088:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_InitTick+0xf0>)
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_InitTick+0xf0>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_InitTick+0xf0>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_InitTick+0xf0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80020a2:	4818      	ldr	r0, [pc, #96]	; (8002104 <HAL_InitTick+0xf0>)
 80020a4:	f006 f822 	bl	80080ec <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11b      	bne.n	80020ee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80020b6:	4813      	ldr	r0, [pc, #76]	; (8002104 <HAL_InitTick+0xf0>)
 80020b8:	f006 f872 	bl	80081a0 <HAL_TIM_Base_Start_IT>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d111      	bne.n	80020ee <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ca:	201c      	movs	r0, #28
 80020cc:	f000 fcf2 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	d808      	bhi.n	80020e8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80020d6:	2200      	movs	r2, #0
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	201c      	movs	r0, #28
 80020dc:	f000 fcce 	bl	8002a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_InitTick+0xf4>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e002      	b.n	80020ee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3738      	adds	r7, #56	; 0x38
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	431bde83 	.word	0x431bde83
 8002104:	2000057c 	.word	0x2000057c
 8002108:	20000008 	.word	0x20000008

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <NMI_Handler+0x4>

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800213c:	f003 fd94 	bl	8005c68 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <TIM2_IRQHandler+0x10>)
 800214a:	f006 f899 	bl	8008280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000057c 	.word	0x2000057c

08002158 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <I2C1_EV_IRQHandler+0x10>)
 800215e:	f001 ff55 	bl	800400c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000274 	.word	0x20000274

0800216c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <I2C2_EV_IRQHandler+0x10>)
 8002172:	f001 ff4b 	bl	800400c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200001fc 	.word	0x200001fc

08002180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <USART2_IRQHandler+0x10>)
 8002186:	f006 fb21 	bl	80087cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000950 	.word	0x20000950

08002194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USERB_Pin);
 8002198:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800219c:	f001 fa7a 	bl	8003694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <SDIO_IRQHandler+0x10>)
 80021aa:	f005 f8f7 	bl	800739c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000438 	.word	0x20000438

080021b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <UART4_IRQHandler+0x10>)
 80021be:	f006 fb05 	bl	80087cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000090c 	.word	0x2000090c

080021cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <DMA2_Stream3_IRQHandler+0x10>)
 80021d2:	f000 fe15 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200004bc 	.word	0x200004bc

080021e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA2_Stream6_IRQHandler+0x10>)
 80021e6:	f000 fe0b 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000051c 	.word	0x2000051c

080021f4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <I2C3_EV_IRQHandler+0x10>)
 80021fa:	f001 ff07 	bl	800400c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200002c8 	.word	0x200002c8

08002208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_kill>:

int _kill(int pid, int sig)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002222:	f00c fae5 	bl	800e7f0 <__errno>
 8002226:	4603      	mov	r3, r0
 8002228:	2216      	movs	r2, #22
 800222a:	601a      	str	r2, [r3, #0]
  return -1;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_exit>:

void _exit (int status)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffe7 	bl	8002218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800224a:	e7fe      	b.n	800224a <_exit+0x12>

0800224c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e00a      	b.n	8002274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800225e:	f3af 8000 	nop.w
 8002262:	4601      	mov	r1, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	60ba      	str	r2, [r7, #8]
 800226a:	b2ca      	uxtb	r2, r1
 800226c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf0      	blt.n	800225e <_read+0x12>
  }

  return len;
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e009      	b.n	80022ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60ba      	str	r2, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dbf1      	blt.n	8002298 <_write+0x12>
  }
  return len;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_close>:

int _close(int file)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e6:	605a      	str	r2, [r3, #4]
  return 0;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_isatty>:

int _isatty(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <_sbrk+0x5c>)
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <_sbrk+0x60>)
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <_sbrk+0x64>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <_sbrk+0x68>)
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d207      	bcs.n	8002368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002358:	f00c fa4a 	bl	800e7f0 <__errno>
 800235c:	4603      	mov	r3, r0
 800235e:	220c      	movs	r2, #12
 8002360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e009      	b.n	800237c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <_sbrk+0x64>)
 8002378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20020000 	.word	0x20020000
 8002388:	00000800 	.word	0x00000800
 800238c:	200005c4 	.word	0x200005c4
 8002390:	20007040 	.word	0x20007040

08002394 <openingThemeSong>:
uint32_t byteswritten, bytesread;             /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[512];                           /* File read buffer */

void openingThemeSong(uint32_t time)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    buzzer(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f000 f895 	bl	80024cc <buzzer>
    led(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f000 f8ac 	bl	8002500 <led>
    HAL_Delay(time / 5);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <openingThemeSong+0x98>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa86 	bl	80028c4 <HAL_Delay>
    buzzer(0);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 f887 	bl	80024cc <buzzer>
    led(0);
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f89e 	bl	8002500 <led>
    HAL_Delay(time / 6);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <openingThemeSong+0x9c>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fa78 	bl	80028c4 <HAL_Delay>
    buzzer(1);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f000 f879 	bl	80024cc <buzzer>
    led(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 f890 	bl	8002500 <led>
    HAL_Delay(time / 4);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fa6d 	bl	80028c4 <HAL_Delay>
    buzzer(0);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f000 f86e 	bl	80024cc <buzzer>
    led(0);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f000 f885 	bl	8002500 <led>
    HAL_Delay(time / 2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fa62 	bl	80028c4 <HAL_Delay>
    buzzer(1);
 8002400:	2001      	movs	r0, #1
 8002402:	f000 f863 	bl	80024cc <buzzer>
    led(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f000 f87a 	bl	8002500 <led>
    HAL_Delay(time / 4);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fa57 	bl	80028c4 <HAL_Delay>
    buzzer(0);
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f858 	bl	80024cc <buzzer>
    led(0);
 800241c:	2000      	movs	r0, #0
 800241e:	f000 f86f 	bl	8002500 <led>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	cccccccd 	.word	0xcccccccd
 8002430:	aaaaaaab 	.word	0xaaaaaaab

08002434 <parseKongrulData>:
//            &bpc.mag.y, &bpc.mag.z,
//            &bpc.gyro.x, &bpc.gyro.y, &bpc.gyro.z);
// }

void parseKongrulData(uint8_t *data)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af06      	add	r7, sp, #24
 800243a:	6078      	str	r0, [r7, #4]
    sscanf(data, "%f, %f, %f, %f, %f, %f, %f",
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <parseKongrulData+0x30>)
 800243e:	9304      	str	r3, [sp, #16]
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <parseKongrulData+0x34>)
 8002442:	9303      	str	r3, [sp, #12]
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <parseKongrulData+0x38>)
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <parseKongrulData+0x3c>)
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <parseKongrulData+0x40>)
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <parseKongrulData+0x44>)
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <parseKongrulData+0x48>)
 8002454:	490a      	ldr	r1, [pc, #40]	; (8002480 <parseKongrulData+0x4c>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f00c f8a0 	bl	800e59c <siscanf>
           &altitude.altitude, &velocity.verticalVelocity,
           &altitude.temperature, &altitude.humidity,
           &gps.latitude, &gps.longtitude, &time.current);
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000820 	.word	0x20000820
 8002468:	200008ac 	.word	0x200008ac
 800246c:	200008a8 	.word	0x200008a8
 8002470:	200008e0 	.word	0x200008e0
 8002474:	200008c8 	.word	0x200008c8
 8002478:	20000878 	.word	0x20000878
 800247c:	200008cc 	.word	0x200008cc
 8002480:	08012698 	.word	0x08012698

08002484 <parseTlcString>:
    res = f_close(&SDFile);
    return;
}

void parseTlcString(char *data)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af04      	add	r7, sp, #16
 800248a:	6078      	str	r0, [r7, #4]
    // parse string with sscanf
    // time(float), tlcStatus, bpcStatus, latitude, longitude, gps.altitude
    sscanf(data, "%f,%d,%d,%f,%f,%f\n", &tlcTime, &tlcStatus, &bpcStatus,
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <parseTlcString+0x2c>)
 800248e:	9303      	str	r3, [sp, #12]
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <parseTlcString+0x30>)
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <parseTlcString+0x34>)
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <parseTlcString+0x38>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <parseTlcString+0x3c>)
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <parseTlcString+0x40>)
 80024a0:	4909      	ldr	r1, [pc, #36]	; (80024c8 <parseTlcString+0x44>)
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f00c f87a 	bl	800e59c <siscanf>
           &gps.latitude, &gps.longtitude, &gps.altitude);
    return;
 80024a8:	bf00      	nop
}
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200008b0 	.word	0x200008b0
 80024b4:	200008ac 	.word	0x200008ac
 80024b8:	200008a8 	.word	0x200008a8
 80024bc:	20000909 	.word	0x20000909
 80024c0:	20000908 	.word	0x20000908
 80024c4:	200008e4 	.word	0x200008e4
 80024c8:	08012844 	.word	0x08012844

080024cc <buzzer>:

    yrt_simpleKalman_init(&barometerKalman, 1, 1, 0.25);
}

void buzzer(uint8_t state)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
    if (state)
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <buzzer+0x1c>
    {
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	2110      	movs	r1, #16
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <buzzer+0x30>)
 80024e2:	f001 f8bd 	bl	8003660 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
    }
}
 80024e6:	e004      	b.n	80024f2 <buzzer+0x26>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2110      	movs	r1, #16
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <buzzer+0x30>)
 80024ee:	f001 f8b7 	bl	8003660 <HAL_GPIO_WritePin>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40020400 	.word	0x40020400

08002500 <led>:

void led(uint8_t state)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
    if (state)
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <led+0x1c>
    {
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	2108      	movs	r1, #8
 8002514:	4806      	ldr	r0, [pc, #24]	; (8002530 <led+0x30>)
 8002516:	f001 f8a3 	bl	8003660 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_RESET);
    }
}
 800251a:	e004      	b.n	8002526 <led+0x26>
        HAL_GPIO_WritePin(USERL_GPIO_Port, USERL_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	2108      	movs	r1, #8
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <led+0x30>)
 8002522:	f001 f89d 	bl	8003660 <HAL_GPIO_WritePin>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40020400 	.word	0x40020400

08002534 <dragSchute>:

void dragSchute(uint8_t state)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
    if (state == 1)
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <dragSchute+0x1c>
    {
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_SET);
 8002544:	2201      	movs	r2, #1
 8002546:	2102      	movs	r1, #2
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <dragSchute+0x30>)
 800254a:	f001 f889 	bl	8003660 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_RESET);
    }
}
 800254e:	e004      	b.n	800255a <dragSchute+0x26>
        HAL_GPIO_WritePin(DRAGP_GPIO_Port, DRAGP_Pin, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	2102      	movs	r1, #2
 8002554:	4803      	ldr	r0, [pc, #12]	; (8002564 <dragSchute+0x30>)
 8002556:	f001 f883 	bl	8003660 <HAL_GPIO_WritePin>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40020800 	.word	0x40020800

08002568 <mainSchute>:

void mainSchute(uint8_t state)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
    if (state == 1)
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <mainSchute+0x1c>
    {
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_SET);
 8002578:	2201      	movs	r2, #1
 800257a:	2101      	movs	r1, #1
 800257c:	4806      	ldr	r0, [pc, #24]	; (8002598 <mainSchute+0x30>)
 800257e:	f001 f86f 	bl	8003660 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_RESET);
    }
}
 8002582:	e004      	b.n	800258e <mainSchute+0x26>
        HAL_GPIO_WritePin(MAINP_GPIO_Port, MAINP_Pin, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	2101      	movs	r1, #1
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <mainSchute+0x30>)
 800258a:	f001 f869 	bl	8003660 <HAL_GPIO_WritePin>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40020800 	.word	0x40020800

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_UART4_Init+0x4c>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <MX_UART4_Init+0x50>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_UART4_Init+0x4c>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_UART4_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_UART4_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_UART4_Init+0x4c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_UART4_Init+0x4c>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_UART4_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_UART4_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_UART4_Init+0x4c>)
 80025f8:	f006 f826 	bl	8008648 <HAL_UART_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002602:	f7ff fb7c 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000090c 	.word	0x2000090c
 8002610:	40004c00 	.word	0x40004c00

08002614 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <MX_USART2_UART_Init+0x50>)
 800261c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 8002620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 800263a:	220c      	movs	r2, #12
 800263c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_USART2_UART_Init+0x4c>)
 800264c:	f005 fffc 	bl	8008648 <HAL_UART_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002656:	f7ff fb52 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000950 	.word	0x20000950
 8002664:	40004400 	.word	0x40004400

08002668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3a      	ldr	r2, [pc, #232]	; (8002770 <HAL_UART_MspInit+0x108>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d134      	bne.n	80026f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_UART_MspInit+0x10c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_UART_MspInit+0x10c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a31      	ldr	r2, [pc, #196]	; (8002774 <HAL_UART_MspInit+0x10c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_UART_MspInit+0x10c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026c2:	2303      	movs	r3, #3
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026d2:	2308      	movs	r3, #8
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4619      	mov	r1, r3
 80026dc:	4826      	ldr	r0, [pc, #152]	; (8002778 <HAL_UART_MspInit+0x110>)
 80026de:	f000 fe13 	bl	8003308 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2105      	movs	r1, #5
 80026e6:	2034      	movs	r0, #52	; 0x34
 80026e8:	f000 f9c8 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80026ec:	2034      	movs	r0, #52	; 0x34
 80026ee:	f000 f9e1 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026f2:	e038      	b.n	8002766 <HAL_UART_MspInit+0xfe>
  else if(uartHandle->Instance==USART2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a20      	ldr	r2, [pc, #128]	; (800277c <HAL_UART_MspInit+0x114>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d133      	bne.n	8002766 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_UART_MspInit+0x10c>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_UART_MspInit+0x10c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002736:	230c      	movs	r3, #12
 8002738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002746:	2307      	movs	r3, #7
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	4619      	mov	r1, r3
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <HAL_UART_MspInit+0x110>)
 8002752:	f000 fdd9 	bl	8003308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2105      	movs	r1, #5
 800275a:	2026      	movs	r0, #38	; 0x26
 800275c:	f000 f98e 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002760:	2026      	movs	r0, #38	; 0x26
 8002762:	f000 f9a7 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3730      	adds	r7, #48	; 0x30
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40004c00 	.word	0x40004c00
 8002774:	40023800 	.word	0x40023800
 8002778:	40020000 	.word	0x40020000
 800277c:	40004400 	.word	0x40004400

08002780 <ms5611_i2c_read_byte>:
    } else {
        return 0;
    }
}

static uint8_t ms5611_i2c_read_byte(uint16_t reg, uint8_t *data){
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af04      	add	r7, sp, #16
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Mem_Read(FRAM_I2C, FRAM_ADDRESS_READ, reg, I2C_MEMADD_SIZE_16BIT,
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	2364      	movs	r3, #100	; 0x64
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	2301      	movs	r3, #1
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2310      	movs	r3, #16
 800279c:	21a1      	movs	r1, #161	; 0xa1
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <ms5611_i2c_read_byte+0x40>)
 80027a0:	f001 f8e0 	bl	8003964 <HAL_I2C_Mem_Read>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
                     data, 1, 100);

    // return data if success
    if (res == HAL_OK) {
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <ms5611_i2c_read_byte+0x34>
        return *data;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	e000      	b.n	80027b6 <ms5611_i2c_read_byte+0x36>
    } else {
        return 0;
 80027b4:	2300      	movs	r3, #0
    }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200001fc 	.word	0x200001fc

080027c4 <fram_read8>:
    }
    return data;

}

uint8_t fram_read8(uint16_t framAddr){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
    ms5611_i2c_read_byte(framAddr, &data);
 80027d2:	f107 020f 	add.w	r2, r7, #15
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ffd0 	bl	8002780 <ms5611_i2c_read_byte>
    return data;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002808:	4c0b      	ldr	r4, [pc, #44]	; (8002838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002816:	f7ff fec1 	bl	800259c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f00b ffef 	bl	800e7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7ff f9a3 	bl	8001b68 <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002830:	08012e0c 	.word	0x08012e0c
  ldr r2, =_sbss
 8002834:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002838:	2000703c 	.word	0x2000703c

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_Init+0x40>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_Init+0x40>)
 8002856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x40>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f8fc 	bl	8002a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff fbd0 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff fb9a 	bl	8001fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000000c 	.word	0x2000000c
 80028a8:	20000994 	.word	0x20000994

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000994 	.word	0x20000994

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000000c 	.word	0x2000000c

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff4c 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8e:	f7ff ff61 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f7ff ffb1 	bl	8002a00 <NVIC_EncodePriority>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff80 	bl	80029ac <__NVIC_SetPriority>
}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff54 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fee6 	bl	80028ac <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e099      	b.n	8002c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0c:	e00f      	b.n	8002b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0e:	f7ff fecd 	bl	80028ac <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d908      	bls.n	8002b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e078      	b.n	8002c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e8      	bne.n	8002b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <HAL_DMA_Init+0x158>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d107      	bne.n	8002b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	4313      	orrs	r3, r2
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0307 	bic.w	r3, r3, #7
 8002bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d117      	bne.n	8002bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fb1b 	bl	8003210 <DMA_CheckFifoParam>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e016      	b.n	8002c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fad2 	bl	80031a4 <DMA_CalcBaseAndBitshift>
 8002c00:	4603      	mov	r3, r0
 8002c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	223f      	movs	r2, #63	; 0x3f
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	f010803f 	.word	0xf010803f

08002c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_DMA_Start_IT+0x26>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e040      	b.n	8002cd4 <HAL_DMA_Start_IT+0xa8>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12f      	bne.n	8002cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fa64 	bl	8003148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	223f      	movs	r2, #63	; 0x3f
 8002c86:	409a      	lsls	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0216 	orr.w	r2, r2, #22
 8002c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0208 	orr.w	r2, r2, #8
 8002cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e005      	b.n	8002cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cea:	f7ff fddf 	bl	80028ac <HAL_GetTick>
 8002cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d008      	beq.n	8002d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e052      	b.n	8002db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0216 	bic.w	r2, r2, #22
 8002d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <HAL_DMA_Abort+0x62>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5e:	e013      	b.n	8002d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d60:	f7ff fda4 	bl	80028ac <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d90c      	bls.n	8002d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2203      	movs	r2, #3
 8002d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e015      	b.n	8002db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e4      	bne.n	8002d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	223f      	movs	r2, #63	; 0x3f
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00c      	b.n	8002df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2205      	movs	r2, #5
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e0c:	4b8e      	ldr	r3, [pc, #568]	; (8003048 <HAL_DMA_IRQHandler+0x248>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a8e      	ldr	r2, [pc, #568]	; (800304c <HAL_DMA_IRQHandler+0x24c>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2208      	movs	r2, #8
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2210      	movs	r2, #16
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d043      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03c      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2210      	movs	r2, #16
 8002efc:	409a      	lsls	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d024      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
 8002f2e:	e01f      	b.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e016      	b.n	8002f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0208 	bic.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2220      	movs	r2, #32
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 808f 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8087 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2220      	movs	r2, #32
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d136      	bne.n	8003018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0216 	bic.w	r2, r2, #22
 8002fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_DMA_IRQHandler+0x1da>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	223f      	movs	r2, #63	; 0x3f
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d07e      	beq.n	800310c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
        }
        return;
 8003016:	e079      	b.n	800310c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	2b00      	cmp	r3, #0
 800303a:	d031      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
 8003044:	e02c      	b.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
 8003046:	bf00      	nop
 8003048:	20000004 	.word	0x20000004
 800304c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e01e      	b.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d032      	beq.n	800310e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2205      	movs	r2, #5
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d307      	bcc.n	80030e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f2      	bne.n	80030cc <HAL_DMA_IRQHandler+0x2cc>
 80030e6:	e000      	b.n	80030ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
 800310a:	e000      	b.n	800310e <HAL_DMA_IRQHandler+0x30e>
        return;
 800310c:	bf00      	nop
    }
  }
}
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003122:	b2db      	uxtb	r3, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d108      	bne.n	8003188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003186:	e007      	b.n	8003198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3b10      	subs	r3, #16
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <DMA_CalcBaseAndBitshift+0x64>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <DMA_CalcBaseAndBitshift+0x68>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d909      	bls.n	80031e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
 80031e4:	e007      	b.n	80031f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	aaaaaaab 	.word	0xaaaaaaab
 800320c:	0801299c 	.word	0x0801299c

08003210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11f      	bne.n	800326a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d856      	bhi.n	80032de <DMA_CheckFifoParam+0xce>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <DMA_CheckFifoParam+0x28>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003249 	.word	0x08003249
 800323c:	0800325b 	.word	0x0800325b
 8003240:	08003249 	.word	0x08003249
 8003244:	080032df 	.word	0x080032df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d046      	beq.n	80032e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e043      	b.n	80032e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003262:	d140      	bne.n	80032e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003268:	e03d      	b.n	80032e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003272:	d121      	bne.n	80032b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d837      	bhi.n	80032ea <DMA_CheckFifoParam+0xda>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <DMA_CheckFifoParam+0x70>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	08003291 	.word	0x08003291
 8003284:	08003297 	.word	0x08003297
 8003288:	08003291 	.word	0x08003291
 800328c:	080032a9 	.word	0x080032a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e030      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d025      	beq.n	80032ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a6:	e022      	b.n	80032ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032b6:	e01c      	b.n	80032f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d903      	bls.n	80032c6 <DMA_CheckFifoParam+0xb6>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d003      	beq.n	80032cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032c4:	e018      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ca:	e015      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e00b      	b.n	80032f6 <DMA_CheckFifoParam+0xe6>
      break;
 80032de:	bf00      	nop
 80032e0:	e00a      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
 80032e4:	e008      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e006      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e004      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
    }
  } 
  
  return status; 
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e165      	b.n	80035f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	f040 8154 	bne.w	80035ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	2b02      	cmp	r3, #2
 8003358:	d130      	bne.n	80033bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0201 	and.w	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d017      	beq.n	80033f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80ae 	beq.w	80035ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <HAL_GPIO_Init+0x300>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_GPIO_Init+0x300>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <HAL_GPIO_Init+0x300>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034aa:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_GPIO_Init+0x304>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_GPIO_Init+0x308>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d025      	beq.n	8003522 <HAL_GPIO_Init+0x21a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4e      	ldr	r2, [pc, #312]	; (8003614 <HAL_GPIO_Init+0x30c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01f      	beq.n	800351e <HAL_GPIO_Init+0x216>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4d      	ldr	r2, [pc, #308]	; (8003618 <HAL_GPIO_Init+0x310>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d019      	beq.n	800351a <HAL_GPIO_Init+0x212>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4c      	ldr	r2, [pc, #304]	; (800361c <HAL_GPIO_Init+0x314>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_GPIO_Init+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	; (8003620 <HAL_GPIO_Init+0x318>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00d      	beq.n	8003512 <HAL_GPIO_Init+0x20a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4a      	ldr	r2, [pc, #296]	; (8003624 <HAL_GPIO_Init+0x31c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <HAL_GPIO_Init+0x206>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a49      	ldr	r2, [pc, #292]	; (8003628 <HAL_GPIO_Init+0x320>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_GPIO_Init+0x202>
 8003506:	2306      	movs	r3, #6
 8003508:	e00c      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800350a:	2307      	movs	r3, #7
 800350c:	e00a      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800350e:	2305      	movs	r3, #5
 8003510:	e008      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 8003512:	2304      	movs	r3, #4
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 8003516:	2303      	movs	r3, #3
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800351a:	2302      	movs	r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 8003522:	2300      	movs	r3, #0
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f002 0203 	and.w	r2, r2, #3
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	4093      	lsls	r3, r2
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003534:	4935      	ldr	r1, [pc, #212]	; (800360c <HAL_GPIO_Init+0x304>)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003542:	4b3a      	ldr	r3, [pc, #232]	; (800362c <HAL_GPIO_Init+0x324>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003566:	4a31      	ldr	r2, [pc, #196]	; (800362c <HAL_GPIO_Init+0x324>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356c:	4b2f      	ldr	r3, [pc, #188]	; (800362c <HAL_GPIO_Init+0x324>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <HAL_GPIO_Init+0x324>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_GPIO_Init+0x324>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_GPIO_Init+0x324>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_GPIO_Init+0x324>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e4:	4a11      	ldr	r2, [pc, #68]	; (800362c <HAL_GPIO_Init+0x324>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	f67f ae96 	bls.w	8003324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	3724      	adds	r7, #36	; 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40013800 	.word	0x40013800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400
 8003618:	40020800 	.word	0x40020800
 800361c:	40020c00 	.word	0x40020c00
 8003620:	40021000 	.word	0x40021000
 8003624:	40021400 	.word	0x40021400
 8003628:	40021800 	.word	0x40021800
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e001      	b.n	8003652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003652:	7bfb      	ldrb	r3, [r7, #15]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003670:	787b      	ldrb	r3, [r7, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800367c:	e003      	b.n	8003686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036aa:	4a05      	ldr	r2, [pc, #20]	; (80036c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f806 	bl	80036c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e12b      	b.n	8003946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe f8ca 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003740:	f002 fbee 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8003744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a81      	ldr	r2, [pc, #516]	; (8003950 <HAL_I2C_Init+0x274>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d807      	bhi.n	8003760 <HAL_I2C_Init+0x84>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a80      	ldr	r2, [pc, #512]	; (8003954 <HAL_I2C_Init+0x278>)
 8003754:	4293      	cmp	r3, r2
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e006      	b.n	800376e <HAL_I2C_Init+0x92>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a7d      	ldr	r2, [pc, #500]	; (8003958 <HAL_I2C_Init+0x27c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	bf94      	ite	ls
 8003768:	2301      	movls	r3, #1
 800376a:	2300      	movhi	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0e7      	b.n	8003946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a78      	ldr	r2, [pc, #480]	; (800395c <HAL_I2C_Init+0x280>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0c9b      	lsrs	r3, r3, #18
 8003780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_I2C_Init+0x274>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d802      	bhi.n	80037b0 <HAL_I2C_Init+0xd4>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	e009      	b.n	80037c4 <HAL_I2C_Init+0xe8>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	4a69      	ldr	r2, [pc, #420]	; (8003960 <HAL_I2C_Init+0x284>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	3301      	adds	r3, #1
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	495c      	ldr	r1, [pc, #368]	; (8003950 <HAL_I2C_Init+0x274>)
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d819      	bhi.n	8003818 <HAL_I2C_Init+0x13c>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e59      	subs	r1, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037f8:	400b      	ands	r3, r1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_I2C_Init+0x138>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1e59      	subs	r1, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fbb1 f3f3 	udiv	r3, r1, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	e051      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003814:	2304      	movs	r3, #4
 8003816:	e04f      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d111      	bne.n	8003844 <HAL_I2C_Init+0x168>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e012      	b.n	800386a <HAL_I2C_Init+0x18e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	0099      	lsls	r1, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	fbb0 f3f3 	udiv	r3, r0, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Init+0x196>
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10e      	bne.n	8003898 <HAL_I2C_Init+0x1bc>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e58      	subs	r0, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	440b      	add	r3, r1
 8003888:	fbb0 f3f3 	udiv	r3, r0, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003896:	e00f      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	0099      	lsls	r1, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	6809      	ldr	r1, [r1, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6911      	ldr	r1, [r2, #16]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	000186a0 	.word	0x000186a0
 8003954:	001e847f 	.word	0x001e847f
 8003958:	003d08ff 	.word	0x003d08ff
 800395c:	431bde83 	.word	0x431bde83
 8003960:	10624dd3 	.word	0x10624dd3

08003964 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800397e:	f7fe ff95 	bl	80028ac <HAL_GetTick>
 8003982:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b20      	cmp	r3, #32
 800398e:	f040 8208 	bne.w	8003da2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2319      	movs	r3, #25
 8003998:	2201      	movs	r2, #1
 800399a:	497b      	ldr	r1, [pc, #492]	; (8003b88 <HAL_I2C_Mem_Read+0x224>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f001 ff79 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
 80039aa:	e1fb      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_Mem_Read+0x56>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e1f4      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d007      	beq.n	80039e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2222      	movs	r2, #34	; 0x22
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a5b      	ldr	r2, [pc, #364]	; (8003b8c <HAL_I2C_Mem_Read+0x228>)
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a22:	88f8      	ldrh	r0, [r7, #6]
 8003a24:	893a      	ldrh	r2, [r7, #8]
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4603      	mov	r3, r0
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f001 fd9e 	bl	8005574 <I2C_RequestMemoryRead>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e1b0      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d113      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e184      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d11b      	bne.n	8003ab2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e164      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d11b      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	e144      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b08:	e138      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	f200 80f1 	bhi.w	8003cf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d123      	bne.n	8003b64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f002 f801 	bl	8005b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e139      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b62:	e10b      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d14e      	bne.n	8003c0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	2200      	movs	r2, #0
 8003b74:	4906      	ldr	r1, [pc, #24]	; (8003b90 <HAL_I2C_Mem_Read+0x22c>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f001 fe8c 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e10e      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
 8003b86:	bf00      	nop
 8003b88:	00100002 	.word	0x00100002
 8003b8c:	ffff0000 	.word	0xffff0000
 8003b90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c08:	e0b8      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	2200      	movs	r2, #0
 8003c12:	4966      	ldr	r1, [pc, #408]	; (8003dac <HAL_I2C_Mem_Read+0x448>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f001 fe3d 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0bf      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	494f      	ldr	r1, [pc, #316]	; (8003dac <HAL_I2C_Mem_Read+0x448>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f001 fe0f 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e091      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf4:	e042      	b.n	8003d7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f001 ff14 	bl	8005b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e04c      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d118      	bne.n	8003d7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f aec2 	bne.w	8003b0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	00010004 	.word	0x00010004

08003db0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7fe fd74 	bl	80028ac <HAL_GetTick>
 8003dc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 8111 	bne.w	8003ffa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2319      	movs	r3, #25
 8003dde:	2201      	movs	r2, #1
 8003de0:	4988      	ldr	r1, [pc, #544]	; (8004004 <HAL_I2C_IsDeviceReady+0x254>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f001 fd56 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	e104      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2C_IsDeviceReady+0x50>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0fd      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d007      	beq.n	8003e26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2224      	movs	r2, #36	; 0x24
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a70      	ldr	r2, [pc, #448]	; (8004008 <HAL_I2C_IsDeviceReady+0x258>)
 8003e48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f001 fd14 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e80:	d103      	bne.n	8003e8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0b6      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe fd05 	bl	80028ac <HAL_GetTick>
 8003ea2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	bf0c      	ite	eq
 8003eca:	2301      	moveq	r3, #1
 8003ecc:	2300      	movne	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ed2:	e025      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ed4:	f7fe fcea 	bl	80028ac <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <HAL_I2C_IsDeviceReady+0x13a>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	22a0      	movs	r2, #160	; 0xa0
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2ba0      	cmp	r3, #160	; 0xa0
 8003f2a:	d005      	beq.n	8003f38 <HAL_I2C_IsDeviceReady+0x188>
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_I2C_IsDeviceReady+0x188>
 8003f32:	7dbb      	ldrb	r3, [r7, #22]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0cd      	beq.n	8003ed4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d129      	bne.n	8003fa2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4921      	ldr	r1, [pc, #132]	; (8004004 <HAL_I2C_IsDeviceReady+0x254>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f001 fc88 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e036      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e02c      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2319      	movs	r3, #25
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	490f      	ldr	r1, [pc, #60]	; (8004004 <HAL_I2C_IsDeviceReady+0x254>)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f001 fc64 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e012      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f4ff af32 	bcc.w	8003e4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	00100002 	.word	0x00100002
 8004008:	ffff0000 	.word	0xffff0000

0800400c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b10      	cmp	r3, #16
 800403a:	d003      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0x38>
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	f040 80b1 	bne.w	80041a6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <HAL_I2C_EV_IRQHandler+0x6e>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004064:	d003      	beq.n	800406e <HAL_I2C_EV_IRQHandler+0x62>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800406c:	d101      	bne.n	8004072 <HAL_I2C_EV_IRQHandler+0x66>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_I2C_EV_IRQHandler+0x68>
 8004072:	2300      	movs	r3, #0
 8004074:	2b01      	cmp	r3, #1
 8004076:	f000 8114 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_I2C_EV_IRQHandler+0x90>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f001 fdcf 	bl	8005c32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fcc3 	bl	8004a20 <I2C_Master_SB>
 800409a:	e083      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_I2C_EV_IRQHandler+0xac>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fd3b 	bl	8004b2c <I2C_Master_ADD10>
 80040b6:	e075      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_I2C_EV_IRQHandler+0xc8>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fd57 	bl	8004b80 <I2C_Master_ADDR>
 80040d2:	e067      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d036      	beq.n	800414c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ec:	f000 80db 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_I2C_EV_IRQHandler+0x10a>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_I2C_EV_IRQHandler+0x10a>
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f93b 	bl	800438a <I2C_MasterTransmit_TXE>
 8004114:	e046      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80c2 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80bc 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800412e:	7bbb      	ldrb	r3, [r7, #14]
 8004130:	2b21      	cmp	r3, #33	; 0x21
 8004132:	d103      	bne.n	800413c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f9c4 	bl	80044c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800413a:	e0b4      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	f040 80b1 	bne.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa32 	bl	80045ae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800414a:	e0ac      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	f000 80a4 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x178>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x178>
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 faaa 	bl	80046d6 <I2C_MasterReceive_RXNE>
 8004182:	e00f      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 808b 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8085 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb55 	bl	800484c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a2:	e080      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
 80041a4:	e07f      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e007      	b.n	80041c8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00c      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 ff15 	bl	800501e <I2C_Slave_ADDR>
 80041f4:	e05a      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x206>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ff50 	bl	80050b0 <I2C_Slave_STOPF>
 8004210:	e04c      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d002      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x212>
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b29      	cmp	r3, #41	; 0x29
 800421c:	d120      	bne.n	8004260 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_I2C_EV_IRQHandler+0x238>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_I2C_EV_IRQHandler+0x238>
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fe30 	bl	8004ea2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004242:	e032      	b.n	80042aa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02d      	beq.n	80042aa <HAL_I2C_EV_IRQHandler+0x29e>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004254:	2b00      	cmp	r3, #0
 8004256:	d028      	beq.n	80042aa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fe5f 	bl	8004f1c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425e:	e024      	b.n	80042aa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0x27a>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0x27a>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fe6d 	bl	8004f5e <I2C_SlaveReceive_RXNE>
 8004284:	e012      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fe9d 	bl	8004fda <I2C_SlaveReceive_BTF>
 80042a0:	e004      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
 800430e:	4613      	mov	r3, r2
 8004310:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d150      	bne.n	8004452 <I2C_MasterTransmit_TXE+0xc8>
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b21      	cmp	r3, #33	; 0x21
 80043b4:	d14d      	bne.n	8004452 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d01d      	beq.n	80043f8 <I2C_MasterTransmit_TXE+0x6e>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d01a      	beq.n	80043f8 <I2C_MasterTransmit_TXE+0x6e>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043c8:	d016      	beq.n	80043f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2211      	movs	r2, #17
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff5e 	bl	80042b2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043f6:	e060      	b.n	80044ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004406:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004416:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d107      	bne.n	8004442 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ff79 	bl	8004332 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004440:	e03b      	b.n	80044ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff31 	bl	80042b2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004450:	e033      	b.n	80044ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b21      	cmp	r3, #33	; 0x21
 8004456:	d005      	beq.n	8004464 <I2C_MasterTransmit_TXE+0xda>
 8004458:	7bbb      	ldrb	r3, [r7, #14]
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d12d      	bne.n	80044ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b22      	cmp	r3, #34	; 0x22
 8004462:	d12a      	bne.n	80044ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800447e:	e01c      	b.n	80044ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d103      	bne.n	8004494 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f88e 	bl	80045ae <I2C_MemoryTransmit_TXE_BTF>
}
 8004492:	e012      	b.n	80044ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044b8:	e7ff      	b.n	80044ba <I2C_MasterTransmit_TXE+0x130>
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b21      	cmp	r3, #33	; 0x21
 80044da:	d164      	bne.n	80045a6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800450a:	e04c      	b.n	80045a6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d01d      	beq.n	800454e <I2C_MasterTransmit_BTF+0x8c>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b20      	cmp	r3, #32
 8004516:	d01a      	beq.n	800454e <I2C_MasterTransmit_BTF+0x8c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451e:	d016      	beq.n	800454e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800452e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2211      	movs	r2, #17
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff feb3 	bl	80042b2 <HAL_I2C_MasterTxCpltCallback>
}
 800454c:	e02b      	b.n	80045a6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d107      	bne.n	8004598 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fece 	bl	8004332 <HAL_I2C_MemTxCpltCallback>
}
 8004596:	e006      	b.n	80045a6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fe86 	bl	80042b2 <HAL_I2C_MasterTxCpltCallback>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11d      	bne.n	8004602 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10b      	bne.n	80045e6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045e4:	e073      	b.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	121b      	asrs	r3, r3, #8
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004600:	e065      	b.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	2b01      	cmp	r3, #1
 8004608:	d10b      	bne.n	8004622 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	b2da      	uxtb	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004620:	e055      	b.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	2b02      	cmp	r3, #2
 8004628:	d151      	bne.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b22      	cmp	r3, #34	; 0x22
 800462e:	d10d      	bne.n	800464c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	651a      	str	r2, [r3, #80]	; 0x50
}
 800464a:	e040      	b.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d015      	beq.n	8004682 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b21      	cmp	r3, #33	; 0x21
 800465a:	d112      	bne.n	8004682 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004680:	e025      	b.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d120      	bne.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b21      	cmp	r3, #33	; 0x21
 8004690:	d11d      	bne.n	80046ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fe32 	bl	8004332 <HAL_I2C_MemTxCpltCallback>
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b22      	cmp	r3, #34	; 0x22
 80046e8:	f040 80ac 	bne.w	8004844 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d921      	bls.n	800473e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b03      	cmp	r3, #3
 8004728:	f040 808c 	bne.w	8004844 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800473c:	e082      	b.n	8004844 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	2b02      	cmp	r3, #2
 8004744:	d075      	beq.n	8004832 <I2C_MasterReceive_RXNE+0x15c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <I2C_MasterReceive_RXNE+0x7c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d16f      	bne.n	8004832 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f001 f9b6 	bl	8005ac4 <I2C_WaitOnSTOPRequestThroughIT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d142      	bne.n	80047e4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800477c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d10a      	bne.n	80047ce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd f918 	bl	80019fc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047cc:	e03a      	b.n	8004844 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2212      	movs	r2, #18
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fd72 	bl	80042c6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047e2:	e02f      	b.n	8004844 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fd8b 	bl	8004346 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004830:	e008      	b.n	8004844 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	605a      	str	r2, [r3, #4]
}
 8004842:	e7ff      	b.n	8004844 <I2C_MasterReceive_RXNE+0x16e>
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b04      	cmp	r3, #4
 8004862:	d11b      	bne.n	800489c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800489a:	e0bd      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d129      	bne.n	80048fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d00a      	beq.n	80048d2 <I2C_MasterReceive_BTF+0x86>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d007      	beq.n	80048d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048f8:	e08e      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d176      	bne.n	80049f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <I2C_MasterReceive_BTF+0xc4>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b10      	cmp	r3, #16
 800490e:	d108      	bne.n	8004922 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e019      	b.n	8004956 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d002      	beq.n	800492e <I2C_MasterReceive_BTF+0xe2>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d108      	bne.n	8004940 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e00a      	b.n	8004956 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d007      	beq.n	8004956 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d10a      	bne.n	80049dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fd f811 	bl	80019fc <HAL_I2C_MemRxCpltCallback>
}
 80049da:	e01d      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2212      	movs	r2, #18
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fc6b 	bl	80042c6 <HAL_I2C_MasterRxCpltCallback>
}
 80049f0:	e012      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d117      	bne.n	8004a64 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a4c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a4e:	e067      	b.n	8004b20 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]
}
 8004a62:	e05d      	b.n	8004b20 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6c:	d133      	bne.n	8004ad6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b21      	cmp	r3, #33	; 0x21
 8004a78:	d109      	bne.n	8004a8e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a8a:	611a      	str	r2, [r3, #16]
 8004a8c:	e008      	b.n	8004aa0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <I2C_Master_SB+0x92>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d032      	beq.n	8004b20 <I2C_Master_SB+0x100>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02d      	beq.n	8004b20 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad2:	605a      	str	r2, [r3, #4]
}
 8004ad4:	e024      	b.n	8004b20 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	11db      	asrs	r3, r3, #7
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0306 	and.w	r3, r3, #6
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f063 030f 	orn	r3, r3, #15
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]
}
 8004afa:	e011      	b.n	8004b20 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10d      	bne.n	8004b20 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	11db      	asrs	r3, r3, #7
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0306 	and.w	r3, r3, #6
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f063 030e 	orn	r3, r3, #14
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <I2C_Master_ADD10+0x26>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <I2C_Master_ADD10+0x48>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b72:	605a      	str	r2, [r3, #4]
  }
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b091      	sub	sp, #68	; 0x44
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b22      	cmp	r3, #34	; 0x22
 8004ba8:	f040 8169 	bne.w	8004e7e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <I2C_Master_ADDR+0x54>
 8004bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10b      	bne.n	8004bd4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	e160      	b.n	8004e96 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11d      	bne.n	8004c18 <I2C_Master_ADDR+0x98>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004be4:	d118      	bne.n	8004c18 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
 8004c16:	e13e      	b.n	8004e96 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d113      	bne.n	8004c4a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c22:	2300      	movs	r3, #0
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e115      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 808a 	bne.w	8004d6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c5c:	d137      	bne.n	8004cce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d113      	bne.n	8004ca6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	e0e7      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	623b      	str	r3, [r7, #32]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e0d3      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d02e      	beq.n	8004d32 <I2C_Master_ADDR+0x1b2>
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d02b      	beq.n	8004d32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	2b12      	cmp	r3, #18
 8004cde:	d102      	bne.n	8004ce6 <I2C_Master_ADDR+0x166>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d125      	bne.n	8004d32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d00e      	beq.n	8004d0a <I2C_Master_ADDR+0x18a>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d00b      	beq.n	8004d0a <I2C_Master_ADDR+0x18a>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d008      	beq.n	8004d0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e007      	b.n	8004d1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	e0a1      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e085      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d14d      	bne.n	8004e10 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d016      	beq.n	8004da8 <I2C_Master_ADDR+0x228>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d013      	beq.n	8004da8 <I2C_Master_ADDR+0x228>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d010      	beq.n	8004da8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc6:	d117      	bne.n	8004df8 <I2C_Master_ADDR+0x278>
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dce:	d00b      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d008      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d005      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d002      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d107      	bne.n	8004df8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004df6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	e032      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e1e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2e:	d117      	bne.n	8004e60 <I2C_Master_ADDR+0x2e0>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e36:	d00b      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d008      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d005      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d002      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d107      	bne.n	8004e60 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e5e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e7c:	e00b      	b.n	8004e96 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	e7ff      	b.n	8004e96 <I2C_Master_ADDR+0x316>
 8004e96:	bf00      	nop
 8004e98:	3744      	adds	r7, #68	; 0x44
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02b      	beq.n	8004f14 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	781a      	ldrb	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d114      	bne.n	8004f14 <I2C_SlaveTransmit_TXE+0x72>
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b29      	cmp	r3, #41	; 0x29
 8004eee:	d111      	bne.n	8004f14 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2228      	movs	r2, #40	; 0x28
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff f9e3 	bl	80042da <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d011      	beq.n	8004f52 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02c      	beq.n	8004fd2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d114      	bne.n	8004fd2 <I2C_SlaveReceive_RXNE+0x74>
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b2a      	cmp	r3, #42	; 0x2a
 8004fac:	d111      	bne.n	8004fd2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2222      	movs	r2, #34	; 0x22
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2228      	movs	r2, #40	; 0x28
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff f98e 	bl	80042ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005028:	2300      	movs	r3, #0
 800502a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005038:	2b28      	cmp	r3, #40	; 0x28
 800503a:	d125      	bne.n	8005088 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b00      	cmp	r3, #0
 8005062:	d103      	bne.n	800506c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	81bb      	strh	r3, [r7, #12]
 800506a:	e002      	b.n	8005072 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800507a:	89ba      	ldrh	r2, [r7, #12]
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff f93e 	bl	8004302 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005086:	e00e      	b.n	80050a6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510c:	d172      	bne.n	80051f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b22      	cmp	r3, #34	; 0x22
 8005112:	d002      	beq.n	800511a <I2C_Slave_STOPF+0x6a>
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b2a      	cmp	r3, #42	; 0x2a
 8005118:	d135      	bne.n	8005186 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd ffde 	bl	8003114 <HAL_DMA_GetState>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d049      	beq.n	80051f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	4a69      	ldr	r2, [pc, #420]	; (8005308 <I2C_Slave_STOPF+0x258>)
 8005164:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fe26 	bl	8002dbc <HAL_DMA_Abort_IT>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d03d      	beq.n	80051f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005184:	e035      	b.n	80051f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd ffa8 	bl	8003114 <HAL_DMA_GetState>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d014      	beq.n	80051f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ce:	4a4e      	ldr	r2, [pc, #312]	; (8005308 <I2C_Slave_STOPF+0x258>)
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fdf0 	bl	8002dbc <HAL_DMA_Abort_IT>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051ec:	4610      	mov	r0, r2
 80051ee:	4798      	blx	r3
 80051f0:	e000      	b.n	80051f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d03e      	beq.n	800527c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d112      	bne.n	8005232 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d112      	bne.n	8005266 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f043 0204 	orr.w	r2, r3, #4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f843 	bl	8005310 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800528a:	e039      	b.n	8005300 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b2a      	cmp	r3, #42	; 0x2a
 8005290:	d109      	bne.n	80052a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2228      	movs	r2, #40	; 0x28
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff f824 	bl	80042ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b28      	cmp	r3, #40	; 0x28
 80052b0:	d111      	bne.n	80052d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <I2C_Slave_STOPF+0x25c>)
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff f825 	bl	800431e <HAL_I2C_ListenCpltCallback>
}
 80052d4:	e014      	b.n	8005300 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	2b22      	cmp	r3, #34	; 0x22
 80052dc:	d002      	beq.n	80052e4 <I2C_Slave_STOPF+0x234>
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b22      	cmp	r3, #34	; 0x22
 80052e2:	d10d      	bne.n	8005300 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe fff7 	bl	80042ee <HAL_I2C_SlaveRxCpltCallback>
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08005745 	.word	0x08005745
 800530c:	ffff0000 	.word	0xffff0000

08005310 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005326:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	2b10      	cmp	r3, #16
 800532c:	d002      	beq.n	8005334 <I2C_ITError+0x24>
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d10a      	bne.n	800534a <I2C_ITError+0x3a>
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b22      	cmp	r3, #34	; 0x22
 8005338:	d107      	bne.n	800534a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005348:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005350:	2b28      	cmp	r3, #40	; 0x28
 8005352:	d107      	bne.n	8005364 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2228      	movs	r2, #40	; 0x28
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005362:	e015      	b.n	8005390 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005372:	d00a      	beq.n	800538a <I2C_ITError+0x7a>
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b60      	cmp	r3, #96	; 0x60
 8005378:	d007      	beq.n	800538a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d162      	bne.n	8005466 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d020      	beq.n	8005400 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	4a6a      	ldr	r2, [pc, #424]	; (800556c <I2C_ITError+0x25c>)
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fd fcf6 	bl	8002dbc <HAL_DMA_Abort_IT>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8089 	beq.w	80054ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053fa:	4610      	mov	r0, r2
 80053fc:	4798      	blx	r3
 80053fe:	e074      	b.n	80054ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	4a59      	ldr	r2, [pc, #356]	; (800556c <I2C_ITError+0x25c>)
 8005406:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	4618      	mov	r0, r3
 800540e:	f7fd fcd5 	bl	8002dbc <HAL_DMA_Abort_IT>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d068      	beq.n	80054ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d10b      	bne.n	800543e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
 8005464:	e041      	b.n	80054ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b60      	cmp	r3, #96	; 0x60
 8005470:	d125      	bne.n	80054be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d10b      	bne.n	80054a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fe ff4f 	bl	800435a <HAL_I2C_AbortCpltCallback>
 80054bc:	e015      	b.n	80054ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d10b      	bne.n	80054e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fe ff2e 	bl	8004346 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10e      	bne.n	8005518 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d113      	bne.n	8005564 <I2C_ITError+0x254>
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b28      	cmp	r3, #40	; 0x28
 8005540:	d110      	bne.n	8005564 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <I2C_ITError+0x260>)
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fe fedd 	bl	800431e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	08005745 	.word	0x08005745
 8005570:	ffff0000 	.word	0xffff0000

08005574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4603      	mov	r3, r0
 8005584:	817b      	strh	r3, [r7, #10]
 8005586:	460b      	mov	r3, r1
 8005588:	813b      	strh	r3, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f96a 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d4:	d103      	bne.n	80055de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0aa      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	4952      	ldr	r1, [pc, #328]	; (8005740 <I2C_RequestMemoryRead+0x1cc>)
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f9a2 	bl	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e097      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fa0c 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b04      	cmp	r3, #4
 8005634:	d107      	bne.n	8005646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e076      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005650:	893b      	ldrh	r3, [r7, #8]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	e021      	b.n	80056a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800565c:	893b      	ldrh	r3, [r7, #8]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	b29b      	uxth	r3, r3
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	6a39      	ldr	r1, [r7, #32]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f9e6 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b04      	cmp	r3, #4
 8005680:	d107      	bne.n	8005692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e050      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005696:	893b      	ldrh	r3, [r7, #8]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	6a39      	ldr	r1, [r7, #32]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f9cb 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00d      	beq.n	80056cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d107      	bne.n	80056c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e035      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f8d3 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005702:	d103      	bne.n	800570c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e013      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005710:	897b      	ldrh	r3, [r7, #10]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	4906      	ldr	r1, [pc, #24]	; (8005740 <I2C_RequestMemoryRead+0x1cc>)
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f90b 	bl	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	00010002 	.word	0x00010002

08005744 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800575e:	4b4b      	ldr	r3, [pc, #300]	; (800588c <I2C_DMAAbort+0x148>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	08db      	lsrs	r3, r3, #3
 8005764:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <I2C_DMAAbort+0x14c>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	0a1a      	lsrs	r2, r3, #8
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00da      	lsls	r2, r3, #3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800578a:	e00a      	b.n	80057a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3b01      	subs	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a0:	d0ea      	beq.n	8005778 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	2200      	movs	r2, #0
 80057b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	2200      	movs	r2, #0
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	2200      	movs	r2, #0
 80057e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	2200      	movs	r2, #0
 80057f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b60      	cmp	r3, #96	; 0x60
 8005812:	d10e      	bne.n	8005832 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800582a:	6978      	ldr	r0, [r7, #20]
 800582c:	f7fe fd95 	bl	800435a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005830:	e027      	b.n	8005882 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005832:	7cfb      	ldrb	r3, [r7, #19]
 8005834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005838:	2b28      	cmp	r3, #40	; 0x28
 800583a:	d117      	bne.n	800586c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800585a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2228      	movs	r2, #40	; 0x28
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800586a:	e007      	b.n	800587c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800587c:	6978      	ldr	r0, [r7, #20]
 800587e:	f7fe fd62 	bl	8004346 <HAL_I2C_ErrorCallback>
}
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000004 	.word	0x20000004
 8005890:	14f8b589 	.word	0x14f8b589

08005894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a4:	e025      	b.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d021      	beq.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ae:	f7fc fffd 	bl	80028ac <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d116      	bne.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e023      	b.n	800593a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	0c1b      	lsrs	r3, r3, #16
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10d      	bne.n	8005918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	43da      	mvns	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4013      	ands	r3, r2
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	e00c      	b.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	43da      	mvns	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d0b6      	beq.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005950:	e051      	b.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005960:	d123      	bne.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800597a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e046      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d021      	beq.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fc ff7b 	bl	80028ac <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d116      	bne.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e020      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10c      	bne.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	43da      	mvns	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	e00b      	b.n	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	43da      	mvns	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4013      	ands	r3, r2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d18d      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a4c:	e02d      	b.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f8c0 	bl	8005bd4 <I2C_IsAcknowledgeFailed>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e02d      	b.n	8005aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d021      	beq.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fc ff21 	bl	80028ac <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e007      	b.n	8005aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d1ca      	bne.n	8005a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	08db      	lsrs	r3, r3, #3
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	0a1a      	lsrs	r2, r3, #8
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d107      	bne.n	8005b02 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e008      	b.n	8005b14 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b10:	d0e9      	beq.n	8005ae6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	20000004 	.word	0x20000004
 8005b24:	14f8b589 	.word	0x14f8b589

08005b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b34:	e042      	b.n	8005bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d119      	bne.n	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0210 	mvn.w	r2, #16
 8005b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e029      	b.n	8005bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b78:	f7fc fe98 	bl	80028ac <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d302      	bcc.n	8005b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d116      	bne.n	8005bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	f043 0220 	orr.w	r2, r3, #32
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e007      	b.n	8005bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d1b5      	bne.n	8005b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bea:	d11b      	bne.n	8005c24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f043 0204 	orr.w	r2, r3, #4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c42:	d103      	bne.n	8005c4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c4a:	e007      	b.n	8005c5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c54:	d102      	bne.n	8005c5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005c78:	f000 f808 	bl	8005c8c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005c7c:	4b02      	ldr	r3, [pc, #8]	; (8005c88 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c82:	615a      	str	r2, [r3, #20]
  }
}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40013c00 	.word	0x40013c00

08005c8c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	4b20      	ldr	r3, [pc, #128]	; (8005d2c <HAL_PWREx_EnableOverDrive+0x90>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <HAL_PWREx_EnableOverDrive+0x90>)
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_PWREx_EnableOverDrive+0x90>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <HAL_PWREx_EnableOverDrive+0x94>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cc8:	f7fc fdf0 	bl	80028ac <HAL_GetTick>
 8005ccc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cce:	e009      	b.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cd0:	f7fc fdec 	bl	80028ac <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cde:	d901      	bls.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e01f      	b.n	8005d24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf0:	d1ee      	bne.n	8005cd0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf8:	f7fc fdd8 	bl	80028ac <HAL_GetTick>
 8005cfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cfe:	e009      	b.n	8005d14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d00:	f7fc fdd4 	bl	80028ac <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d0e:	d901      	bls.n	8005d14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e007      	b.n	8005d24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d14:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d20:	d1ee      	bne.n	8005d00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	420e0040 	.word	0x420e0040
 8005d34:	40007000 	.word	0x40007000
 8005d38:	420e0044 	.word	0x420e0044

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0cc      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d50:	4b68      	ldr	r3, [pc, #416]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d90c      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b63      	ldr	r3, [pc, #396]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0b8      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d90:	4b59      	ldr	r3, [pc, #356]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a58      	ldr	r2, [pc, #352]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da8:	4b53      	ldr	r3, [pc, #332]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b50      	ldr	r3, [pc, #320]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	494d      	ldr	r1, [pc, #308]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d044      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d107      	bne.n	8005dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b47      	ldr	r3, [pc, #284]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d119      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e07f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d003      	beq.n	8005dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e06f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e067      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 0203 	bic.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4934      	ldr	r1, [pc, #208]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fc fd3e 	bl	80028ac <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e34:	f7fc fd3a 	bl	80028ac <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e04f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 020c 	and.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d1eb      	bne.n	8005e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d20c      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e032      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4916      	ldr	r1, [pc, #88]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	490e      	ldr	r1, [pc, #56]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ec2:	f000 fbb1 	bl	8006628 <HAL_RCC_GetSysClockFreq>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	490a      	ldr	r1, [pc, #40]	; (8005efc <HAL_RCC_ClockConfig+0x1c0>)
 8005ed4:	5ccb      	ldrb	r3, [r1, r3]
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fc f896 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40023c00 	.word	0x40023c00
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	08012984 	.word	0x08012984
 8005f00:	20000004 	.word	0x20000004
 8005f04:	20000008 	.word	0x20000008

08005f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000004 	.word	0x20000004

08005f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f24:	f7ff fff0 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	0a9b      	lsrs	r3, r3, #10
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4903      	ldr	r1, [pc, #12]	; (8005f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40023800 	.word	0x40023800
 8005f44:	08012994 	.word	0x08012994

08005f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f4c:	f7ff ffdc 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0b5b      	lsrs	r3, r3, #13
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	08012994 	.word	0x08012994

08005f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	220f      	movs	r2, #15
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0203 	and.w	r2, r3, #3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	08db      	lsrs	r3, r3, #3
 8005faa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <HAL_RCC_GetClockConfig+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 020f 	and.w	r2, r3, #15
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	601a      	str	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40023c00 	.word	0x40023c00

08005fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	; 0x30
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d010      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800600c:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800600e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006012:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	496c      	ldr	r1, [pc, #432]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800602a:	2301      	movs	r3, #1
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d010      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800603a:	4b64      	ldr	r3, [pc, #400]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006040:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006048:	4960      	ldr	r1, [pc, #384]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006058:	2301      	movs	r3, #1
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006068:	4b58      	ldr	r3, [pc, #352]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800606a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800606e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	4955      	ldr	r1, [pc, #340]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006086:	d101      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006088:	2301      	movs	r3, #1
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006094:	2301      	movs	r3, #1
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d017      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060a4:	4b49      	ldr	r3, [pc, #292]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	4946      	ldr	r1, [pc, #280]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c2:	d101      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80060c4:	2301      	movs	r3, #1
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80060d0:	2301      	movs	r3, #1
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 808a 	beq.w	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	4a38      	ldr	r2, [pc, #224]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6413      	str	r3, [r2, #64]	; 0x40
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fa:	60bb      	str	r3, [r7, #8]
 80060fc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a33      	ldr	r2, [pc, #204]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006108:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800610a:	f7fc fbcf 	bl	80028ac <HAL_GetTick>
 800610e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006112:	f7fc fbcb 	bl	80028ac <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e278      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006124:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f0      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006130:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006138:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d02f      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	429a      	cmp	r2, r3
 800614c:	d028      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800614e:	4b1f      	ldr	r3, [pc, #124]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006156:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800616a:	4b18      	ldr	r3, [pc, #96]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800616c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b01      	cmp	r3, #1
 8006174:	d114      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006176:	f7fc fb99 	bl	80028ac <HAL_GetTick>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617c:	e00a      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800617e:	f7fc fb95 	bl	80028ac <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	f241 3288 	movw	r2, #5000	; 0x1388
 800618c:	4293      	cmp	r3, r2
 800618e:	d901      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e240      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ee      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ac:	d114      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	4902      	ldr	r1, [pc, #8]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	608b      	str	r3, [r1, #8]
 80061c8:	e00c      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40007000 	.word	0x40007000
 80061d4:	42470e40 	.word	0x42470e40
 80061d8:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a49      	ldr	r2, [pc, #292]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061e2:	6093      	str	r3, [r2, #8]
 80061e4:	4b47      	ldr	r3, [pc, #284]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f0:	4944      	ldr	r1, [pc, #272]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006208:	4b3f      	ldr	r3, [pc, #252]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800620a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006218:	4b3a      	ldr	r3, [pc, #232]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800621a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800621e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	4937      	ldr	r1, [pc, #220]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800623a:	4b32      	ldr	r3, [pc, #200]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800623c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006240:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006248:	492e      	ldr	r1, [pc, #184]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d011      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800625c:	4b29      	ldr	r3, [pc, #164]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800625e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006262:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	4926      	ldr	r1, [pc, #152]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800627a:	d101      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800627c:	2301      	movs	r3, #1
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800628c:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800628e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006292:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	491a      	ldr	r1, [pc, #104]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d011      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80062ae:	4b15      	ldr	r3, [pc, #84]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	4911      	ldr	r1, [pc, #68]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062cc:	d101      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80062ce:	2301      	movs	r3, #1
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d005      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e0:	f040 80ff 	bne.w	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062ea:	f7fc fadf 	bl	80028ac <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062f0:	e00e      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062f2:	f7fc fadb 	bl	80028ac <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d907      	bls.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e188      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006304:	40023800 	.word	0x40023800
 8006308:	424711e0 	.word	0x424711e0
 800630c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006310:	4b7e      	ldr	r3, [pc, #504]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ea      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006338:	2b00      	cmp	r3, #0
 800633a:	d028      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d124      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006344:	4b71      	ldr	r3, [pc, #452]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	3301      	adds	r3, #1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006356:	4b6d      	ldr	r3, [pc, #436]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635c:	0e1b      	lsrs	r3, r3, #24
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	019b      	lsls	r3, r3, #6
 800636e:	431a      	orrs	r2, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	3b01      	subs	r3, #1
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	431a      	orrs	r2, r3
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	061b      	lsls	r3, r3, #24
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	071b      	lsls	r3, r3, #28
 8006386:	4961      	ldr	r1, [pc, #388]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d035      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b8:	d130      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80063ba:	4b54      	ldr	r3, [pc, #336]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	3301      	adds	r3, #1
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063cc:	4b4f      	ldr	r3, [pc, #316]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d2:	0f1b      	lsrs	r3, r3, #28
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	019b      	lsls	r3, r3, #6
 80063e4:	431a      	orrs	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	3b01      	subs	r3, #1
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	061b      	lsls	r3, r3, #24
 80063f6:	431a      	orrs	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	071b      	lsls	r3, r3, #28
 80063fc:	4943      	ldr	r1, [pc, #268]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006404:	4b41      	ldr	r3, [pc, #260]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640a:	f023 021f 	bic.w	r2, r3, #31
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	3b01      	subs	r3, #1
 8006414:	493d      	ldr	r1, [pc, #244]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006424:	2b00      	cmp	r3, #0
 8006426:	d029      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006430:	d124      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006432:	4b36      	ldr	r3, [pc, #216]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	3301      	adds	r3, #1
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006444:	4b31      	ldr	r3, [pc, #196]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644a:	0f1b      	lsrs	r3, r3, #28
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	019b      	lsls	r3, r3, #6
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	3b01      	subs	r3, #1
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	431a      	orrs	r2, r3
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	061b      	lsls	r3, r3, #24
 800646e:	431a      	orrs	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	071b      	lsls	r3, r3, #28
 8006474:	4925      	ldr	r1, [pc, #148]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006484:	2b00      	cmp	r3, #0
 8006486:	d016      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	019b      	lsls	r3, r3, #6
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	3b01      	subs	r3, #1
 800649c:	041b      	lsls	r3, r3, #16
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	071b      	lsls	r3, r3, #28
 80064ae:	4917      	ldr	r1, [pc, #92]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064b6:	4b16      	ldr	r3, [pc, #88]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064bc:	f7fc f9f6 	bl	80028ac <HAL_GetTick>
 80064c0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064c4:	f7fc f9f2 	bl	80028ac <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e09f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f040 8095 	bne.w	8006614 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064f0:	f7fc f9dc 	bl	80028ac <HAL_GetTick>
 80064f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064f6:	e00f      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064f8:	f7fc f9d8 	bl	80028ac <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d908      	bls.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e085      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800
 8006510:	42470068 	.word	0x42470068
 8006514:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006518:	4b41      	ldr	r3, [pc, #260]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006524:	d0e8      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02b      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	2b00      	cmp	r3, #0
 800654c:	d127      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800654e:	4b34      	ldr	r3, [pc, #208]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	3301      	adds	r3, #1
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	431a      	orrs	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	3b01      	subs	r3, #1
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	4928      	ldr	r1, [pc, #160]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006584:	4b26      	ldr	r3, [pc, #152]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	3b01      	subs	r3, #1
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	4922      	ldr	r1, [pc, #136]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01d      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065b2:	d118      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	0e1b      	lsrs	r3, r3, #24
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	019b      	lsls	r3, r3, #6
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	3b01      	subs	r3, #1
 80065d6:	041b      	lsls	r3, r3, #16
 80065d8:	431a      	orrs	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	4910      	ldr	r1, [pc, #64]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ec:	f7fc f95e 	bl	80028ac <HAL_GetTick>
 80065f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065f4:	f7fc f95a 	bl	80028ac <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e007      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800660e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006612:	d1ef      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3730      	adds	r7, #48	; 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023800 	.word	0x40023800
 8006624:	42470070 	.word	0x42470070

08006628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800662c:	b0a6      	sub	sp, #152	; 0x98
 800662e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800664e:	4bc8      	ldr	r3, [pc, #800]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 030c 	and.w	r3, r3, #12
 8006656:	2b0c      	cmp	r3, #12
 8006658:	f200 817e 	bhi.w	8006958 <HAL_RCC_GetSysClockFreq+0x330>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_RCC_GetSysClockFreq+0x3c>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006699 	.word	0x08006699
 8006668:	08006959 	.word	0x08006959
 800666c:	08006959 	.word	0x08006959
 8006670:	08006959 	.word	0x08006959
 8006674:	080066a1 	.word	0x080066a1
 8006678:	08006959 	.word	0x08006959
 800667c:	08006959 	.word	0x08006959
 8006680:	08006959 	.word	0x08006959
 8006684:	080066a9 	.word	0x080066a9
 8006688:	08006959 	.word	0x08006959
 800668c:	08006959 	.word	0x08006959
 8006690:	08006959 	.word	0x08006959
 8006694:	08006813 	.word	0x08006813
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006698:	4bb6      	ldr	r3, [pc, #728]	; (8006974 <HAL_RCC_GetSysClockFreq+0x34c>)
 800669a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800669e:	e15f      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066a0:	4bb5      	ldr	r3, [pc, #724]	; (8006978 <HAL_RCC_GetSysClockFreq+0x350>)
 80066a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80066a6:	e15b      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a8:	4bb1      	ldr	r3, [pc, #708]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066b4:	4bae      	ldr	r3, [pc, #696]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d031      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c0:	4bab      	ldr	r3, [pc, #684]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	099b      	lsrs	r3, r3, #6
 80066c6:	2200      	movs	r2, #0
 80066c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d2:	663b      	str	r3, [r7, #96]	; 0x60
 80066d4:	2300      	movs	r3, #0
 80066d6:	667b      	str	r3, [r7, #100]	; 0x64
 80066d8:	4ba7      	ldr	r3, [pc, #668]	; (8006978 <HAL_RCC_GetSysClockFreq+0x350>)
 80066da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80066de:	462a      	mov	r2, r5
 80066e0:	fb03 f202 	mul.w	r2, r3, r2
 80066e4:	2300      	movs	r3, #0
 80066e6:	4621      	mov	r1, r4
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	4aa2      	ldr	r2, [pc, #648]	; (8006978 <HAL_RCC_GetSysClockFreq+0x350>)
 80066f0:	4621      	mov	r1, r4
 80066f2:	fba1 1202 	umull	r1, r2, r1, r2
 80066f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066f8:	460a      	mov	r2, r1
 80066fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80066fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066fe:	4413      	add	r3, r2
 8006700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006706:	2200      	movs	r2, #0
 8006708:	65bb      	str	r3, [r7, #88]	; 0x58
 800670a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800670c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006710:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006714:	f7fa fad8 	bl	8000cc8 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4613      	mov	r3, r2
 800671e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006722:	e064      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006724:	4b92      	ldr	r3, [pc, #584]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	099b      	lsrs	r3, r3, #6
 800672a:	2200      	movs	r2, #0
 800672c:	653b      	str	r3, [r7, #80]	; 0x50
 800672e:	657a      	str	r2, [r7, #84]	; 0x54
 8006730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006736:	64bb      	str	r3, [r7, #72]	; 0x48
 8006738:	2300      	movs	r3, #0
 800673a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006740:	4622      	mov	r2, r4
 8006742:	462b      	mov	r3, r5
 8006744:	f04f 0000 	mov.w	r0, #0
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	0159      	lsls	r1, r3, #5
 800674e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006752:	0150      	lsls	r0, r2, #5
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4621      	mov	r1, r4
 800675a:	1a51      	subs	r1, r2, r1
 800675c:	6139      	str	r1, [r7, #16]
 800675e:	4629      	mov	r1, r5
 8006760:	eb63 0301 	sbc.w	r3, r3, r1
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006772:	4659      	mov	r1, fp
 8006774:	018b      	lsls	r3, r1, #6
 8006776:	4651      	mov	r1, sl
 8006778:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800677c:	4651      	mov	r1, sl
 800677e:	018a      	lsls	r2, r1, #6
 8006780:	4651      	mov	r1, sl
 8006782:	ebb2 0801 	subs.w	r8, r2, r1
 8006786:	4659      	mov	r1, fp
 8006788:	eb63 0901 	sbc.w	r9, r3, r1
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006798:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800679c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a0:	4690      	mov	r8, r2
 80067a2:	4699      	mov	r9, r3
 80067a4:	4623      	mov	r3, r4
 80067a6:	eb18 0303 	adds.w	r3, r8, r3
 80067aa:	60bb      	str	r3, [r7, #8]
 80067ac:	462b      	mov	r3, r5
 80067ae:	eb49 0303 	adc.w	r3, r9, r3
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067c0:	4629      	mov	r1, r5
 80067c2:	028b      	lsls	r3, r1, #10
 80067c4:	4621      	mov	r1, r4
 80067c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067ca:	4621      	mov	r1, r4
 80067cc:	028a      	lsls	r2, r1, #10
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d6:	2200      	movs	r2, #0
 80067d8:	643b      	str	r3, [r7, #64]	; 0x40
 80067da:	647a      	str	r2, [r7, #68]	; 0x44
 80067dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067e0:	f7fa fa72 	bl	8000cc8 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067ee:	4b60      	ldr	r3, [pc, #384]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	3301      	adds	r3, #1
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006800:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006810:	e0a6      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006812:	4b57      	ldr	r3, [pc, #348]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800681a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800681e:	4b54      	ldr	r3, [pc, #336]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02a      	beq.n	8006880 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800682a:	4b51      	ldr	r3, [pc, #324]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	099b      	lsrs	r3, r3, #6
 8006830:	2200      	movs	r2, #0
 8006832:	63bb      	str	r3, [r7, #56]	; 0x38
 8006834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800683c:	2100      	movs	r1, #0
 800683e:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <HAL_RCC_GetSysClockFreq+0x350>)
 8006840:	fb03 f201 	mul.w	r2, r3, r1
 8006844:	2300      	movs	r3, #0
 8006846:	fb00 f303 	mul.w	r3, r0, r3
 800684a:	4413      	add	r3, r2
 800684c:	4a4a      	ldr	r2, [pc, #296]	; (8006978 <HAL_RCC_GetSysClockFreq+0x350>)
 800684e:	fba0 1202 	umull	r1, r2, r0, r2
 8006852:	677a      	str	r2, [r7, #116]	; 0x74
 8006854:	460a      	mov	r2, r1
 8006856:	673a      	str	r2, [r7, #112]	; 0x70
 8006858:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800685a:	4413      	add	r3, r2
 800685c:	677b      	str	r3, [r7, #116]	; 0x74
 800685e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006862:	2200      	movs	r2, #0
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
 8006866:	637a      	str	r2, [r7, #52]	; 0x34
 8006868:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800686c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006870:	f7fa fa2a 	bl	8000cc8 <__aeabi_uldivmod>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4613      	mov	r3, r2
 800687a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800687e:	e05b      	b.n	8006938 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006880:	4b3b      	ldr	r3, [pc, #236]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	099b      	lsrs	r3, r3, #6
 8006886:	2200      	movs	r2, #0
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
 800688a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
 8006898:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	f04f 0000 	mov.w	r0, #0
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	0159      	lsls	r1, r3, #5
 80068aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ae:	0150      	lsls	r0, r2, #5
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4641      	mov	r1, r8
 80068b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ba:	4649      	mov	r1, r9
 80068bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068d4:	ebb2 040a 	subs.w	r4, r2, sl
 80068d8:	eb63 050b 	sbc.w	r5, r3, fp
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	00eb      	lsls	r3, r5, #3
 80068e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ea:	00e2      	lsls	r2, r4, #3
 80068ec:	4614      	mov	r4, r2
 80068ee:	461d      	mov	r5, r3
 80068f0:	4643      	mov	r3, r8
 80068f2:	18e3      	adds	r3, r4, r3
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	464b      	mov	r3, r9
 80068f8:	eb45 0303 	adc.w	r3, r5, r3
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800690a:	4629      	mov	r1, r5
 800690c:	028b      	lsls	r3, r1, #10
 800690e:	4621      	mov	r1, r4
 8006910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006914:	4621      	mov	r1, r4
 8006916:	028a      	lsls	r2, r1, #10
 8006918:	4610      	mov	r0, r2
 800691a:	4619      	mov	r1, r3
 800691c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006920:	2200      	movs	r2, #0
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	61fa      	str	r2, [r7, #28]
 8006926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692a:	f7fa f9cd 	bl	8000cc8 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4613      	mov	r3, r2
 8006934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006938:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <HAL_RCC_GetSysClockFreq+0x348>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	0f1b      	lsrs	r3, r3, #28
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800694a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800694e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006956:	e003      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_RCC_GetSysClockFreq+0x34c>)
 800695a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800695e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006964:	4618      	mov	r0, r3
 8006966:	3798      	adds	r7, #152	; 0x98
 8006968:	46bd      	mov	sp, r7
 800696a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696e:	bf00      	nop
 8006970:	40023800 	.word	0x40023800
 8006974:	00f42400 	.word	0x00f42400
 8006978:	017d7840 	.word	0x017d7840

0800697c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e28d      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8083 	beq.w	8006aa2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800699c:	4b94      	ldr	r3, [pc, #592]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 030c 	and.w	r3, r3, #12
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d019      	beq.n	80069dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069a8:	4b91      	ldr	r3, [pc, #580]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d106      	bne.n	80069c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069b4:	4b8e      	ldr	r3, [pc, #568]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c0:	d00c      	beq.n	80069dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069c2:	4b8b      	ldr	r3, [pc, #556]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069ca:	2b0c      	cmp	r3, #12
 80069cc:	d112      	bne.n	80069f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ce:	4b88      	ldr	r3, [pc, #544]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069da:	d10b      	bne.n	80069f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069dc:	4b84      	ldr	r3, [pc, #528]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d05b      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x124>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d157      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e25a      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fc:	d106      	bne.n	8006a0c <HAL_RCC_OscConfig+0x90>
 80069fe:	4b7c      	ldr	r3, [pc, #496]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a7b      	ldr	r2, [pc, #492]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e01d      	b.n	8006a48 <HAL_RCC_OscConfig+0xcc>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a14:	d10c      	bne.n	8006a30 <HAL_RCC_OscConfig+0xb4>
 8006a16:	4b76      	ldr	r3, [pc, #472]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a75      	ldr	r2, [pc, #468]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	4b73      	ldr	r3, [pc, #460]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a72      	ldr	r2, [pc, #456]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e00b      	b.n	8006a48 <HAL_RCC_OscConfig+0xcc>
 8006a30:	4b6f      	ldr	r3, [pc, #444]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a6e      	ldr	r2, [pc, #440]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	4b6c      	ldr	r3, [pc, #432]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a6b      	ldr	r2, [pc, #428]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d013      	beq.n	8006a78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fb ff2c 	bl	80028ac <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fb ff28 	bl	80028ac <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	; 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e21f      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	4b61      	ldr	r3, [pc, #388]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0xdc>
 8006a76:	e014      	b.n	8006aa2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fb ff18 	bl	80028ac <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fb ff14 	bl	80028ac <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e20b      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a92:	4b57      	ldr	r3, [pc, #348]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x104>
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d06f      	beq.n	8006b8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006aae:	4b50      	ldr	r3, [pc, #320]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d017      	beq.n	8006aea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006aba:	4b4d      	ldr	r3, [pc, #308]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d105      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ac6:	4b4a      	ldr	r3, [pc, #296]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad2:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ada:	2b0c      	cmp	r3, #12
 8006adc:	d11c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ade:	4b44      	ldr	r3, [pc, #272]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d116      	bne.n	8006b18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	4b41      	ldr	r3, [pc, #260]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_RCC_OscConfig+0x186>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d001      	beq.n	8006b02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e1d3      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b02:	4b3b      	ldr	r3, [pc, #236]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4937      	ldr	r1, [pc, #220]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b16:	e03a      	b.n	8006b8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d020      	beq.n	8006b62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b20:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <HAL_RCC_OscConfig+0x278>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b26:	f7fb fec1 	bl	80028ac <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2e:	f7fb febd 	bl	80028ac <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e1b4      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b40:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4925      	ldr	r1, [pc, #148]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]
 8006b60:	e015      	b.n	8006b8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <HAL_RCC_OscConfig+0x278>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b68:	f7fb fea0 	bl	80028ac <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b70:	f7fb fe9c 	bl	80028ac <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e193      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b82:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d036      	beq.n	8006c08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <HAL_RCC_OscConfig+0x27c>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba8:	f7fb fe80 	bl	80028ac <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb0:	f7fb fe7c 	bl	80028ac <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e173      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_OscConfig+0x274>)
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x234>
 8006bce:	e01b      	b.n	8006c08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_OscConfig+0x27c>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd6:	f7fb fe69 	bl	80028ac <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bdc:	e00e      	b.n	8006bfc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bde:	f7fb fe65 	bl	80028ac <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d907      	bls.n	8006bfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e15c      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	42470000 	.word	0x42470000
 8006bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bfc:	4b8a      	ldr	r3, [pc, #552]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ea      	bne.n	8006bde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8097 	beq.w	8006d44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1a:	4b83      	ldr	r3, [pc, #524]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10f      	bne.n	8006c46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	4b7f      	ldr	r3, [pc, #508]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	4a7e      	ldr	r2, [pc, #504]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6413      	str	r3, [r2, #64]	; 0x40
 8006c36:	4b7c      	ldr	r3, [pc, #496]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60bb      	str	r3, [r7, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c46:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <HAL_RCC_OscConfig+0x4b0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d118      	bne.n	8006c84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c52:	4b76      	ldr	r3, [pc, #472]	; (8006e2c <HAL_RCC_OscConfig+0x4b0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a75      	ldr	r2, [pc, #468]	; (8006e2c <HAL_RCC_OscConfig+0x4b0>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5e:	f7fb fe25 	bl	80028ac <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fb fe21 	bl	80028ac <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e118      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c78:	4b6c      	ldr	r3, [pc, #432]	; (8006e2c <HAL_RCC_OscConfig+0x4b0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCC_OscConfig+0x31e>
 8006c8c:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4a65      	ldr	r2, [pc, #404]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
 8006c98:	e01c      	b.n	8006cd4 <HAL_RCC_OscConfig+0x358>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x340>
 8006ca2:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a60      	ldr	r2, [pc, #384]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006ca8:	f043 0304 	orr.w	r3, r3, #4
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
 8006cae:	4b5e      	ldr	r3, [pc, #376]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a5d      	ldr	r2, [pc, #372]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	e00b      	b.n	8006cd4 <HAL_RCC_OscConfig+0x358>
 8006cbc:	4b5a      	ldr	r3, [pc, #360]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	4a59      	ldr	r2, [pc, #356]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc8:	4b57      	ldr	r3, [pc, #348]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	4a56      	ldr	r2, [pc, #344]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cce:	f023 0304 	bic.w	r3, r3, #4
 8006cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fb fde6 	bl	80028ac <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f7fb fde2 	bl	80028ac <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0d7      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cfa:	4b4b      	ldr	r3, [pc, #300]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0ee      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x368>
 8006d06:	e014      	b.n	8006d32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d08:	f7fb fdd0 	bl	80028ac <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d10:	f7fb fdcc 	bl	80028ac <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e0c1      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d26:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1ee      	bne.n	8006d10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d105      	bne.n	8006d44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d38:	4b3b      	ldr	r3, [pc, #236]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80ad 	beq.w	8006ea8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d4e:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d060      	beq.n	8006e1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d145      	bne.n	8006dee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d62:	4b33      	ldr	r3, [pc, #204]	; (8006e30 <HAL_RCC_OscConfig+0x4b4>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fb fda0 	bl	80028ac <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d70:	f7fb fd9c 	bl	80028ac <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e093      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d82:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1f0      	bne.n	8006d70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	019b      	lsls	r3, r3, #6
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	3b01      	subs	r3, #1
 8006da8:	041b      	lsls	r3, r3, #16
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	061b      	lsls	r3, r3, #24
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	071b      	lsls	r3, r3, #28
 8006dba:	491b      	ldr	r1, [pc, #108]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dc0:	4b1b      	ldr	r3, [pc, #108]	; (8006e30 <HAL_RCC_OscConfig+0x4b4>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc6:	f7fb fd71 	bl	80028ac <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dcc:	e008      	b.n	8006de0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dce:	f7fb fd6d 	bl	80028ac <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e064      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006de0:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <HAL_RCC_OscConfig+0x452>
 8006dec:	e05c      	b.n	8006ea8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <HAL_RCC_OscConfig+0x4b4>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fb fd5a 	bl	80028ac <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dfc:	f7fb fd56 	bl	80028ac <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e04d      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_RCC_OscConfig+0x4ac>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x480>
 8006e1a:	e045      	b.n	8006ea8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d107      	bne.n	8006e34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e040      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	40007000 	.word	0x40007000
 8006e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e34:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <HAL_RCC_OscConfig+0x538>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d030      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d129      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d122      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d119      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	085b      	lsrs	r3, r3, #1
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d10f      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d107      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d001      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40023800 	.word	0x40023800

08006eb8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e022      	b.n	8006f10 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa ff37 	bl	8001d50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f814 	bl	8006f18 <HAL_SD_InitCard>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e00a      	b.n	8006f10 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f18:	b5b0      	push	{r4, r5, r7, lr}
 8006f1a:	b08e      	sub	sp, #56	; 0x38
 8006f1c:	af04      	add	r7, sp, #16
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006f34:	2376      	movs	r3, #118	; 0x76
 8006f36:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681d      	ldr	r5, [r3, #0]
 8006f3c:	466c      	mov	r4, sp
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f4a:	f107 0308 	add.w	r3, r7, #8
 8006f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f50:	4628      	mov	r0, r5
 8006f52:	f002 fb35 	bl	80095c0 <SDIO_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e04f      	b.n	8007008 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006f68:	4b29      	ldr	r3, [pc, #164]	; (8007010 <HAL_SD_InitCard+0xf8>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f002 fb6d 	bl	8009652 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <HAL_SD_InitCard+0xf8>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006f7e:	2002      	movs	r0, #2
 8006f80:	f7fb fca0 	bl	80028c4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 ff55 	bl	8007e34 <SD_PowerON>
 8006f8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00b      	beq.n	8006faa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02e      	b.n	8007008 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fe74 	bl	8007c98 <SD_InitCard>
 8006fb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e01b      	b.n	8007008 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f002 fbcc 	bl	8009776 <SDMMC_CmdBlockLength>
 8006fde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <HAL_SD_InitCard+0xfc>)
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3728      	adds	r7, #40	; 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bdb0      	pop	{r4, r5, r7, pc}
 8007010:	422580a0 	.word	0x422580a0
 8007014:	004005ff 	.word	0x004005ff

08007018 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d107      	bne.n	8007040 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0be      	b.n	80071be <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b01      	cmp	r3, #1
 800704a:	f040 80b7 	bne.w	80071bc <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	441a      	add	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705e:	429a      	cmp	r2, r3
 8007060:	d907      	bls.n	8007072 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e0a5      	b.n	80071be <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2203      	movs	r2, #3
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	4a4c      	ldr	r2, [pc, #304]	; (80071c8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	4a4b      	ldr	r2, [pc, #300]	; (80071cc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80070a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2200      	movs	r2, #0
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3380      	adds	r3, #128	; 0x80
 80070d8:	4619      	mov	r1, r3
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	025b      	lsls	r3, r3, #9
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	f7fb fda3 	bl	8002c2c <HAL_DMA_Start_IT>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d017      	beq.n	800711c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80070fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a33      	ldr	r2, [pc, #204]	; (80071d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e050      	b.n	80071be <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800711c:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	2b01      	cmp	r3, #1
 8007128:	d002      	beq.n	8007130 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	025b      	lsls	r3, r3, #9
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	025b      	lsls	r3, r3, #9
 800713a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800713c:	2390      	movs	r3, #144	; 0x90
 800713e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007140:	2302      	movs	r3, #2
 8007142:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007144:	2300      	movs	r3, #0
 8007146:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007148:	2301      	movs	r3, #1
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f107 0210 	add.w	r2, r7, #16
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f002 fae1 	bl	800971e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d90a      	bls.n	8007178 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2282      	movs	r2, #130	; 0x82
 8007166:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	4618      	mov	r0, r3
 8007170:	f002 fb45 	bl	80097fe <SDMMC_CmdReadMultiBlock>
 8007174:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007176:	e009      	b.n	800718c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2281      	movs	r2, #129	; 0x81
 800717c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007184:	4618      	mov	r0, r3
 8007186:	f002 fb18 	bl	80097ba <SDMMC_CmdReadSingleBlock>
 800718a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d012      	beq.n	80071b8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a0e      	ldr	r2, [pc, #56]	; (80071d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007198:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	431a      	orrs	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e002      	b.n	80071be <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80071bc:	2302      	movs	r3, #2
  }
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3730      	adds	r7, #48	; 0x30
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	08007aa7 	.word	0x08007aa7
 80071cc:	08007b19 	.word	0x08007b19
 80071d0:	004005ff 	.word	0x004005ff
 80071d4:	4225858c 	.word	0x4225858c

080071d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08c      	sub	sp, #48	; 0x30
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d107      	bne.n	8007200 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0c1      	b.n	8007384 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	f040 80ba 	bne.w	8007382 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	441a      	add	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721e:	429a      	cmp	r2, r3
 8007220:	d907      	bls.n	8007232 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e0a8      	b.n	8007384 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2203      	movs	r2, #3
 8007236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f042 021a 	orr.w	r2, r2, #26
 8007250:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	4a4d      	ldr	r2, [pc, #308]	; (800738c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	4a4c      	ldr	r2, [pc, #304]	; (8007390 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007260:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	2200      	movs	r2, #0
 8007268:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	2b01      	cmp	r3, #1
 8007270:	d002      	beq.n	8007278 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	025b      	lsls	r3, r3, #9
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d90a      	bls.n	8007294 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	22a0      	movs	r2, #160	; 0xa0
 8007282:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800728a:	4618      	mov	r0, r3
 800728c:	f002 fafb 	bl	8009886 <SDMMC_CmdWriteMultiBlock>
 8007290:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007292:	e009      	b.n	80072a8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2290      	movs	r2, #144	; 0x90
 8007298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a0:	4618      	mov	r0, r3
 80072a2:	f002 face 	bl	8009842 <SDMMC_CmdWriteSingleBlock>
 80072a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d012      	beq.n	80072d4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a38      	ldr	r2, [pc, #224]	; (8007394 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80072b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	431a      	orrs	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e057      	b.n	8007384 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80072d4:	4b30      	ldr	r3, [pc, #192]	; (8007398 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3380      	adds	r3, #128	; 0x80
 800730a:	461a      	mov	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	025b      	lsls	r3, r3, #9
 8007310:	089b      	lsrs	r3, r3, #2
 8007312:	f7fb fc8b 	bl	8002c2c <HAL_DMA_Start_IT>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 021a 	bic.w	r2, r2, #26
 800732a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a18      	ldr	r2, [pc, #96]	; (8007394 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e018      	b.n	8007384 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007352:	f04f 33ff 	mov.w	r3, #4294967295
 8007356:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	025b      	lsls	r3, r3, #9
 800735c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800735e:	2390      	movs	r3, #144	; 0x90
 8007360:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007366:	2300      	movs	r3, #0
 8007368:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800736a:	2301      	movs	r3, #1
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f107 0210 	add.w	r2, r7, #16
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f002 f9d0 	bl	800971e <SDIO_ConfigData>

      return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007382:	2302      	movs	r3, #2
  }
}
 8007384:	4618      	mov	r0, r3
 8007386:	3730      	adds	r7, #48	; 0x30
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	08007a7d 	.word	0x08007a7d
 8007390:	08007b19 	.word	0x08007b19
 8007394:	004005ff 	.word	0x004005ff
 8007398:	4225858c 	.word	0x4225858c

0800739c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_SD_IRQHandler+0x2e>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fdec 	bl	8007fa0 <SD_Read_IT>
 80073c8:	e155      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 808f 	beq.w	80074f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80073f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80073f6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b00      	cmp	r3, #0
 8007410:	d039      	beq.n	8007486 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <HAL_SD_IRQHandler+0x8a>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d011      	beq.n	800744a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f002 fa4e 	bl	80098cc <SDMMC_CmdStopTransfer>
 8007430:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f91f 	bl	8007688 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007452:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <HAL_SD_IRQHandler+0xda>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f002 fe64 	bl	800a144 <HAL_SD_RxCpltCallback>
 800747c:	e0fb      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f002 fe56 	bl	800a130 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007484:	e0f7      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80f2 	beq.w	8007676 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d011      	beq.n	80074c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f002 fa13 	bl	80098cc <SDMMC_CmdStopTransfer>
 80074a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d008      	beq.n	80074c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8e4 	bl	8007688 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f040 80d5 	bne.w	8007676 <HAL_SD_IRQHandler+0x2da>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 80cf 	bne.w	8007676 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0208 	bic.w	r2, r2, #8
 80074e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f002 fe1d 	bl	800a130 <HAL_SD_TxCpltCallback>
}
 80074f6:	e0be      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <HAL_SD_IRQHandler+0x17c>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fd96 	bl	8008042 <SD_Write_IT>
 8007516:	e0ae      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80a7 	beq.w	8007676 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	f043 0202 	orr.w	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	f043 0208 	orr.w	r2, r3, #8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	f043 0220 	orr.w	r2, r3, #32
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	f043 0210 	orr.w	r2, r3, #16
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f240 523a 	movw	r2, #1338	; 0x53a
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80075a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f002 f98c 	bl	80098cc <SDMMC_CmdStopTransfer>
 80075b4:	4602      	mov	r2, r0
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f855 	bl	8007688 <HAL_SD_ErrorCallback>
}
 80075de:	e04a      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d045      	beq.n	8007676 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <HAL_SD_IRQHandler+0x262>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d011      	beq.n	8007622 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	4a1f      	ldr	r2, [pc, #124]	; (8007680 <HAL_SD_IRQHandler+0x2e4>)
 8007604:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	4618      	mov	r0, r3
 800760c:	f7fb fbd6 	bl	8002dbc <HAL_DMA_Abort_IT>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d02f      	beq.n	8007676 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	4618      	mov	r0, r3
 800761c:	f000 face 	bl	8007bbc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007620:	e029      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <HAL_SD_IRQHandler+0x29a>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d011      	beq.n	800765a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	4a12      	ldr	r2, [pc, #72]	; (8007684 <HAL_SD_IRQHandler+0x2e8>)
 800763c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	4618      	mov	r0, r3
 8007644:	f7fb fbba 	bl	8002dbc <HAL_DMA_Abort_IT>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d013      	beq.n	8007676 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fae9 	bl	8007c2a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007658:	e00d      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f002 fd54 	bl	800a11c <HAL_SD_AbortCallback>
}
 8007674:	e7ff      	b.n	8007676 <HAL_SD_IRQHandler+0x2da>
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	08007bbd 	.word	0x08007bbd
 8007684:	08007c2b 	.word	0x08007c2b

08007688 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076aa:	0f9b      	lsrs	r3, r3, #30
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b6:	0e9b      	lsrs	r3, r3, #26
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c8:	0e1b      	lsrs	r3, r3, #24
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076fc:	0d1b      	lsrs	r3, r3, #20
 80076fe:	b29a      	uxth	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	b2da      	uxtb	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800771a:	0bdb      	lsrs	r3, r3, #15
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	b2da      	uxtb	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772c:	0b9b      	lsrs	r3, r3, #14
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	b2da      	uxtb	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800773e:	0b5b      	lsrs	r3, r3, #13
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	b2da      	uxtb	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007750:	0b1b      	lsrs	r3, r3, #12
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	b2da      	uxtb	r2, r3
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2200      	movs	r2, #0
 8007762:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007768:	2b00      	cmp	r3, #0
 800776a:	d163      	bne.n	8007834 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007770:	009a      	lsls	r2, r3, #2
 8007772:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007776:	4013      	ands	r3, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800777c:	0f92      	lsrs	r2, r2, #30
 800777e:	431a      	orrs	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007788:	0edb      	lsrs	r3, r3, #27
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	b2da      	uxtb	r2, r3
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779a:	0e1b      	lsrs	r3, r3, #24
 800779c:	b2db      	uxtb	r3, r3
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ac:	0d5b      	lsrs	r3, r3, #21
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077be:	0c9b      	lsrs	r3, r3, #18
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d0:	0bdb      	lsrs	r3, r3, #15
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	7e1b      	ldrb	r3, [r3, #24]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	3302      	adds	r3, #2
 80077f4:	2201      	movs	r2, #1
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80077fe:	fb03 f202 	mul.w	r2, r3, r2
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	7a1b      	ldrb	r3, [r3, #8]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	2201      	movs	r2, #1
 8007812:	409a      	lsls	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007820:	0a52      	lsrs	r2, r2, #9
 8007822:	fb03 f202 	mul.w	r2, r3, r2
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007830:	661a      	str	r2, [r3, #96]	; 0x60
 8007832:	e031      	b.n	8007898 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007838:	2b01      	cmp	r3, #1
 800783a:	d11d      	bne.n	8007878 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007840:	041b      	lsls	r3, r3, #16
 8007842:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784a:	0c1b      	lsrs	r3, r3, #16
 800784c:	431a      	orrs	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	3301      	adds	r3, #1
 8007858:	029a      	lsls	r2, r3, #10
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	661a      	str	r2, [r3, #96]	; 0x60
 8007876:	e00f      	b.n	8007898 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a58      	ldr	r2, [pc, #352]	; (80079e0 <HAL_SD_GetCardCSD+0x344>)
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e09d      	b.n	80079d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789c:	0b9b      	lsrs	r3, r3, #14
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	09db      	lsrs	r3, r3, #7
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d0:	0fdb      	lsrs	r3, r3, #31
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078dc:	0f5b      	lsrs	r3, r3, #29
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	0e9b      	lsrs	r3, r3, #26
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	0d9b      	lsrs	r3, r3, #22
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	b2da      	uxtb	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	0d5b      	lsrs	r3, r3, #21
 8007914:	b2db      	uxtb	r3, r3
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	b2da      	uxtb	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	0bdb      	lsrs	r3, r3, #15
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	b2da      	uxtb	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	0b9b      	lsrs	r3, r3, #14
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	0b5b      	lsrs	r3, r3, #13
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	0b1b      	lsrs	r3, r3, #12
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	0a9b      	lsrs	r3, r3, #10
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	b2da      	uxtb	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	004005ff 	.word	0x004005ff

080079e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a48:	f107 030c 	add.w	r3, r7, #12
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa7e 	bl	8007f50 <SD_SendStatus>
 8007a54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	0a5b      	lsrs	r3, r3, #9
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007a72:	693b      	ldr	r3, [r7, #16]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	2b82      	cmp	r3, #130	; 0x82
 8007aba:	d111      	bne.n	8007ae0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 ff03 	bl	80098cc <SDMMC_CmdStopTransfer>
 8007ac6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff fdd4 	bl	8007688 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0208 	bic.w	r2, r2, #8
 8007aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f240 523a 	movw	r2, #1338	; 0x53a
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f002 fb1b 	bl	800a144 <HAL_SD_RxCpltCallback>
#endif
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fb fb02 	bl	8003130 <HAL_DMA_GetError>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d03e      	beq.n	8007bb0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b40:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d002      	beq.n	8007b4e <SD_DMAError+0x36>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d12d      	bne.n	8007baa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <SD_DMAError+0xa0>)
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007b64:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007b72:	6978      	ldr	r0, [r7, #20]
 8007b74:	f7ff ff62 	bl	8007a3c <HAL_SD_GetCardState>
 8007b78:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b06      	cmp	r3, #6
 8007b7e:	d002      	beq.n	8007b86 <SD_DMAError+0x6e>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b05      	cmp	r3, #5
 8007b84:	d10a      	bne.n	8007b9c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fe9e 	bl	80098cc <SDMMC_CmdStopTransfer>
 8007b90:	4602      	mov	r2, r0
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	431a      	orrs	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007baa:	6978      	ldr	r0, [r7, #20]
 8007bac:	f7ff fd6c 	bl	8007688 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	004005ff 	.word	0x004005ff

08007bbc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff ff31 	bl	8007a3c <HAL_SD_GetCardState>
 8007bda:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b06      	cmp	r3, #6
 8007bee:	d002      	beq.n	8007bf6 <SD_DMATxAbort+0x3a>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d10a      	bne.n	8007c0c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 fe66 	bl	80098cc <SDMMC_CmdStopTransfer>
 8007c00:	4602      	mov	r2, r0
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	431a      	orrs	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d103      	bne.n	8007c1c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f002 fa81 	bl	800a11c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007c1a:	e002      	b.n	8007c22 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff fd33 	bl	8007688 <HAL_SD_ErrorCallback>
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff fefa 	bl	8007a3c <HAL_SD_GetCardState>
 8007c48:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b06      	cmp	r3, #6
 8007c5c:	d002      	beq.n	8007c64 <SD_DMARxAbort+0x3a>
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	d10a      	bne.n	8007c7a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fe2f 	bl	80098cc <SDMMC_CmdStopTransfer>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f002 fa4a 	bl	800a11c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007c88:	e002      	b.n	8007c90 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fcfc 	bl	8007688 <HAL_SD_ErrorCallback>
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b094      	sub	sp, #80	; 0x50
 8007c9c:	af04      	add	r7, sp, #16
 8007c9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 fce0 	bl	800966e <SDIO_GetPowerState>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007cb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007cb8:	e0b8      	b.n	8007e2c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d02f      	beq.n	8007d22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fec7 	bl	8009a5a <SDMMC_CmdSendCID>
 8007ccc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SD_InitCard+0x40>
    {
      return errorstate;
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd6:	e0a9      	b.n	8007e2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fd0a 	bl	80096f8 <SDIO_GetResponse>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2104      	movs	r1, #4
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fd01 	bl	80096f8 <SDIO_GetResponse>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2108      	movs	r1, #8
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 fcf8 	bl	80096f8 <SDIO_GetResponse>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	210c      	movs	r1, #12
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 fcef 	bl	80096f8 <SDIO_GetResponse>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d00d      	beq.n	8007d46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f107 020e 	add.w	r2, r7, #14
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fecd 	bl	8009ad4 <SDMMC_CmdSetRelAdd>
 8007d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <SD_InitCard+0xae>
    {
      return errorstate;
 8007d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d44:	e072      	b.n	8007e2c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d036      	beq.n	8007dbc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007d4e:	89fb      	ldrh	r3, [r7, #14]
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5e:	041b      	lsls	r3, r3, #16
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f001 fe97 	bl	8009a96 <SDMMC_CmdSendCSD>
 8007d68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	e05b      	b.n	8007e2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fcbc 	bl	80096f8 <SDIO_GetResponse>
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2104      	movs	r1, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 fcb3 	bl	80096f8 <SDIO_GetResponse>
 8007d92:	4602      	mov	r2, r0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2108      	movs	r1, #8
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fcaa 	bl	80096f8 <SDIO_GetResponse>
 8007da4:	4602      	mov	r2, r0
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	210c      	movs	r1, #12
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 fca1 	bl	80096f8 <SDIO_GetResponse>
 8007db6:	4602      	mov	r2, r0
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2104      	movs	r1, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 fc98 	bl	80096f8 <SDIO_GetResponse>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	0d1a      	lsrs	r2, r3, #20
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007dd0:	f107 0310 	add.w	r3, r7, #16
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fc60 	bl	800769c <HAL_SD_GetCardCSD>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007de2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007de6:	e021      	b.n	8007e2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	2200      	movs	r2, #0
 8007df4:	461c      	mov	r4, r3
 8007df6:	4615      	mov	r5, r2
 8007df8:	4622      	mov	r2, r4
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	f001 fd87 	bl	8009910 <SDMMC_CmdSelDesel>
 8007e02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <SD_InitCard+0x176>
  {
    return errorstate;
 8007e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0c:	e00e      	b.n	8007e2c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	466c      	mov	r4, sp
 8007e16:	f103 0210 	add.w	r2, r3, #16
 8007e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e20:	3304      	adds	r3, #4
 8007e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e24:	4628      	mov	r0, r5
 8007e26:	f001 fbcb 	bl	80095c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3740      	adds	r7, #64	; 0x40
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bdb0      	pop	{r4, r5, r7, pc}

08007e34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	2300      	movs	r3, #0
 8007e46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fd82 	bl	8009956 <SDMMC_CmdGoIdleState>
 8007e52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	e072      	b.n	8007f44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fd95 	bl	8009992 <SDMMC_CmdOperCond>
 8007e68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00d      	beq.n	8007e8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fd6b 	bl	8009956 <SDMMC_CmdGoIdleState>
 8007e80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	e05b      	b.n	8007f44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d137      	bne.n	8007f0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fd95 	bl	80099d0 <SDMMC_CmdAppCommand>
 8007ea6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02d      	beq.n	8007f0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007eb2:	e047      	b.n	8007f44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 fd88 	bl	80099d0 <SDMMC_CmdAppCommand>
 8007ec0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <SD_PowerON+0x98>
    {
      return errorstate;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	e03b      	b.n	8007f44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	491e      	ldr	r1, [pc, #120]	; (8007f4c <SD_PowerON+0x118>)
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fd9e 	bl	8009a14 <SDMMC_CmdAppOperCommand>
 8007ed8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ee4:	e02e      	b.n	8007f44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fc03 	bl	80096f8 <SDIO_GetResponse>
 8007ef2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	0fdb      	lsrs	r3, r3, #31
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <SD_PowerON+0xcc>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <SD_PowerON+0xce>
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]

    count++;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d802      	bhi.n	8007f1a <SD_PowerON+0xe6>
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0cc      	beq.n	8007eb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d902      	bls.n	8007f2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f28:	e00c      	b.n	8007f44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	645a      	str	r2, [r3, #68]	; 0x44
 8007f3a:	e002      	b.n	8007f42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	c1100000 	.word	0xc1100000

08007f50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007f60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f64:	e018      	b.n	8007f98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f001 fdcf 	bl	8009b16 <SDMMC_CmdSendStatus>
 8007f78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	e009      	b.n	8007f98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 fbb4 	bl	80096f8 <SDIO_GetResponse>
 8007f90:	4602      	mov	r2, r0
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d03f      	beq.n	800803a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e033      	b.n	8008028 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fb26 	bl	8009616 <SDIO_ReadFIFO>
 8007fca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	0a1b      	lsrs	r3, r3, #8
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	3b01      	subs	r3, #1
 800800a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	0e1b      	lsrs	r3, r3, #24
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3b01      	subs	r3, #1
 8008020:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	3301      	adds	r3, #1
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b07      	cmp	r3, #7
 800802c:	d9c8      	bls.n	8007fc0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800803a:	bf00      	nop
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d043      	beq.n	80080e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e037      	b.n	80080d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3b01      	subs	r3, #1
 8008072:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	021a      	lsls	r2, r3, #8
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4313      	orrs	r3, r2
 800807e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	3b01      	subs	r3, #1
 800808a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	041a      	lsls	r2, r3, #16
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4313      	orrs	r3, r2
 8008096:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	061a      	lsls	r2, r3, #24
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f107 0208 	add.w	r2, r7, #8
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fab2 	bl	8009630 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	3301      	adds	r3, #1
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b07      	cmp	r3, #7
 80080d6:	d9c4      	bls.n	8008062 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e041      	b.n	8008182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f839 	bl	800818a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f000 f9d8 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e04e      	b.n	8008256 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a23      	ldr	r2, [pc, #140]	; (8008264 <HAL_TIM_Base_Start_IT+0xc4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e2:	d01d      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <HAL_TIM_Base_Start_IT+0xc8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_TIM_Base_Start_IT+0xcc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1c      	ldr	r2, [pc, #112]	; (8008270 <HAL_TIM_Base_Start_IT+0xd0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <HAL_TIM_Base_Start_IT+0xd4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <HAL_TIM_Base_Start_IT+0xd8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a18      	ldr	r2, [pc, #96]	; (800827c <HAL_TIM_Base_Start_IT+0xdc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d111      	bne.n	8008244 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b06      	cmp	r3, #6
 8008230:	d010      	beq.n	8008254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008242:	e007      	b.n	8008254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40001800 	.word	0x40001800

08008280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b02      	cmp	r3, #2
 8008294:	d122      	bne.n	80082dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0202 	mvn.w	r2, #2
 80082ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8ee 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f8e0 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8f1 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d122      	bne.n	8008330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d11b      	bne.n	8008330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0204 	mvn.w	r2, #4
 8008300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8c4 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8b6 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f8c7 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b08      	cmp	r3, #8
 800833c:	d122      	bne.n	8008384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b08      	cmp	r3, #8
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0208 	mvn.w	r2, #8
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f89a 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f88c 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f89d 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	2b10      	cmp	r3, #16
 8008390:	d122      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b10      	cmp	r3, #16
 800839e:	d11b      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0210 	mvn.w	r2, #16
 80083a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2208      	movs	r2, #8
 80083ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f870 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f862 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f873 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d10e      	bne.n	8008404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d107      	bne.n	8008404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0201 	mvn.w	r2, #1
 80083fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7f9 fc6e 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f902 	bl	8008634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d10e      	bne.n	800845c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d107      	bne.n	800845c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f838 	bl	80084cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b20      	cmp	r3, #32
 8008468:	d10e      	bne.n	8008488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b20      	cmp	r3, #32
 8008476:	d107      	bne.n	8008488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0220 	mvn.w	r2, #32
 8008480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f8cc 	bl	8008620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a40      	ldr	r2, [pc, #256]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3d      	ldr	r2, [pc, #244]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3c      	ldr	r2, [pc, #240]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3b      	ldr	r2, [pc, #236]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d108      	bne.n	8008532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2f      	ldr	r2, [pc, #188]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d02b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d027      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2c      	ldr	r2, [pc, #176]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d023      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2b      	ldr	r2, [pc, #172]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2a      	ldr	r2, [pc, #168]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a29      	ldr	r2, [pc, #164]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d017      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a28      	ldr	r2, [pc, #160]	; (8008608 <TIM_Base_SetConfig+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a27      	ldr	r2, [pc, #156]	; (800860c <TIM_Base_SetConfig+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a26      	ldr	r2, [pc, #152]	; (8008610 <TIM_Base_SetConfig+0x130>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <TIM_Base_SetConfig+0x134>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a24      	ldr	r2, [pc, #144]	; (8008618 <TIM_Base_SetConfig+0x138>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a23      	ldr	r2, [pc, #140]	; (800861c <TIM_Base_SetConfig+0x13c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d108      	bne.n	80085a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <TIM_Base_SetConfig+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	40001800 	.word	0x40001800
 8008618:	40001c00 	.word	0x40001c00
 800861c:	40002000 	.word	0x40002000

08008620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e03f      	b.n	80086da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7f9 fffa 	bl	8002668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2224      	movs	r2, #36	; 0x24
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800868a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fd23 	bl	80090d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	695a      	ldr	r2, [r3, #20]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d130      	bne.n	800875e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_UART_Transmit_IT+0x26>
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e029      	b.n	8008760 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UART_Transmit_IT+0x38>
 8008716:	2302      	movs	r3, #2
 8008718:	e022      	b.n	8008760 <HAL_UART_Transmit_IT+0x7e>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	88fa      	ldrh	r2, [r7, #6]
 800872c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	88fa      	ldrh	r2, [r7, #6]
 8008732:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2221      	movs	r2, #33	; 0x21
 800873e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008758:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	e000      	b.n	8008760 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800875e:	2302      	movs	r3, #2
  }
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b20      	cmp	r3, #32
 8008784:	d11d      	bne.n	80087c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <HAL_UART_Receive_IT+0x26>
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e016      	b.n	80087c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_UART_Receive_IT+0x38>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e00f      	b.n	80087c4 <HAL_UART_Receive_IT+0x58>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	461a      	mov	r2, r3
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fab5 	bl	8008d28 <UART_Start_Receive_IT>
 80087be:	4603      	mov	r3, r0
 80087c0:	e000      	b.n	80087c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087c2:	2302      	movs	r3, #2
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b0ba      	sub	sp, #232	; 0xe8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800880a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10f      	bne.n	8008832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <HAL_UART_IRQHandler+0x66>
 800881e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb99 	bl	8008f62 <UART_Receive_IT>
      return;
 8008830:	e256      	b.n	8008ce0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 80de 	beq.w	80089f8 <HAL_UART_IRQHandler+0x22c>
 800883c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80d1 	beq.w	80089f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <HAL_UART_IRQHandler+0xae>
 8008862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f043 0201 	orr.w	r2, r3, #1
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_UART_IRQHandler+0xd2>
 8008886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f043 0202 	orr.w	r2, r3, #2
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00b      	beq.n	80088c2 <HAL_UART_IRQHandler+0xf6>
 80088aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	f043 0204 	orr.w	r2, r3, #4
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d011      	beq.n	80088f2 <HAL_UART_IRQHandler+0x126>
 80088ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f043 0208 	orr.w	r2, r3, #8
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 81ed 	beq.w	8008cd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <HAL_UART_IRQHandler+0x14e>
 8008908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800890c:	f003 0320 	and.w	r3, r3, #32
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fb24 	bl	8008f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	bf0c      	ite	eq
 8008928:	2301      	moveq	r3, #1
 800892a:	2300      	movne	r3, #0
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <HAL_UART_IRQHandler+0x17a>
 800893e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008942:	2b00      	cmp	r3, #0
 8008944:	d04f      	beq.n	80089e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa2c 	bl	8008da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008956:	2b40      	cmp	r3, #64	; 0x40
 8008958:	d141      	bne.n	80089de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3314      	adds	r3, #20
 8008960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3314      	adds	r3, #20
 8008982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800898a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800899e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1d9      	bne.n	800895a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d013      	beq.n	80089d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	4a7d      	ldr	r2, [pc, #500]	; (8008ba8 <HAL_UART_IRQHandler+0x3dc>)
 80089b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fa f9fe 	bl	8002dbc <HAL_DMA_Abort_IT>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d016      	beq.n	80089f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d4:	e00e      	b.n	80089f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f990 	bl	8008cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089dc:	e00a      	b.n	80089f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f98c 	bl	8008cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e4:	e006      	b.n	80089f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f988 	bl	8008cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089f2:	e170      	b.n	8008cd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f4:	bf00      	nop
    return;
 80089f6:	e16e      	b.n	8008cd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	f040 814a 	bne.w	8008c96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a06:	f003 0310 	and.w	r3, r3, #16
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 8143 	beq.w	8008c96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 813c 	beq.w	8008c96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60bb      	str	r3, [r7, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	f040 80b4 	bne.w	8008bac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8140 	beq.w	8008cda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a62:	429a      	cmp	r2, r3
 8008a64:	f080 8139 	bcs.w	8008cda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a7a:	f000 8088 	beq.w	8008b8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	330c      	adds	r3, #12
 8008a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008aaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1d9      	bne.n	8008a7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3314      	adds	r3, #20
 8008ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008aee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e1      	bne.n	8008aca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3314      	adds	r3, #20
 8008b0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3314      	adds	r3, #20
 8008b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e3      	bne.n	8008b06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	330c      	adds	r3, #12
 8008b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b5e:	f023 0310 	bic.w	r3, r3, #16
 8008b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	330c      	adds	r3, #12
 8008b6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b70:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e3      	bne.n	8008b4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fa f8a7 	bl	8002cdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f8b6 	bl	8008d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ba4:	e099      	b.n	8008cda <HAL_UART_IRQHandler+0x50e>
 8008ba6:	bf00      	nop
 8008ba8:	08008e6b 	.word	0x08008e6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 808b 	beq.w	8008cde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8086 	beq.w	8008cde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008be8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	330c      	adds	r3, #12
 8008bf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bf6:	647a      	str	r2, [r7, #68]	; 0x44
 8008bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e3      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3314      	adds	r3, #20
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	623b      	str	r3, [r7, #32]
   return(result);
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	f023 0301 	bic.w	r3, r3, #1
 8008c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3314      	adds	r3, #20
 8008c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e3      	bne.n	8008c0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0310 	bic.w	r3, r3, #16
 8008c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	330c      	adds	r3, #12
 8008c70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c74:	61fa      	str	r2, [r7, #28]
 8008c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	69b9      	ldr	r1, [r7, #24]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	617b      	str	r3, [r7, #20]
   return(result);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e3      	bne.n	8008c50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f83e 	bl	8008d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c94:	e023      	b.n	8008cde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x4ea>
 8008ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f8ef 	bl	8008e92 <UART_Transmit_IT>
    return;
 8008cb4:	e014      	b.n	8008ce0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x514>
 8008cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f92f 	bl	8008f32 <UART_EndTransmit_IT>
    return;
 8008cd4:	e004      	b.n	8008ce0 <HAL_UART_IRQHandler+0x514>
    return;
 8008cd6:	bf00      	nop
 8008cd8:	e002      	b.n	8008ce0 <HAL_UART_IRQHandler+0x514>
      return;
 8008cda:	bf00      	nop
 8008cdc:	e000      	b.n	8008ce0 <HAL_UART_IRQHandler+0x514>
      return;
 8008cde:	bf00      	nop
  }
}
 8008ce0:	37e8      	adds	r7, #232	; 0xe8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop

08008ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	88fa      	ldrh	r2, [r7, #6]
 8008d46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2222      	movs	r2, #34	; 0x22
 8008d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f042 0220 	orr.w	r2, r2, #32
 8008d94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b095      	sub	sp, #84	; 0x54
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dcc:	643a      	str	r2, [r7, #64]	; 0x40
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd4:	e841 2300 	strex	r3, r2, [r1]
 8008dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e5      	bne.n	8008dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3314      	adds	r3, #20
 8008de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3314      	adds	r3, #20
 8008dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e5      	bne.n	8008de0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d119      	bne.n	8008e50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	330c      	adds	r3, #12
 8008e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f023 0310 	bic.w	r3, r3, #16
 8008e32:	647b      	str	r3, [r7, #68]	; 0x44
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3c:	61ba      	str	r2, [r7, #24]
 8008e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6979      	ldr	r1, [r7, #20]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e5      	bne.n	8008e1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e5e:	bf00      	nop
 8008e60:	3754      	adds	r7, #84	; 0x54
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff ff39 	bl	8008cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b21      	cmp	r3, #33	; 0x21
 8008ea4:	d13e      	bne.n	8008f24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eae:	d114      	bne.n	8008eda <UART_Transmit_IT+0x48>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d110      	bne.n	8008eda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	1c9a      	adds	r2, r3, #2
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	621a      	str	r2, [r3, #32]
 8008ed8:	e008      	b.n	8008eec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	1c59      	adds	r1, r3, #1
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6211      	str	r1, [r2, #32]
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10f      	bne.n	8008f20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e000      	b.n	8008f26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fec8 	bl	8008ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b08c      	sub	sp, #48	; 0x30
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b22      	cmp	r3, #34	; 0x22
 8008f74:	f040 80ab 	bne.w	80090ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f80:	d117      	bne.n	8008fb2 <UART_Receive_IT+0x50>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d113      	bne.n	8008fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	1c9a      	adds	r2, r3, #2
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	629a      	str	r2, [r3, #40]	; 0x28
 8008fb0:	e026      	b.n	8009000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc4:	d007      	beq.n	8008fd6 <UART_Receive_IT+0x74>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <UART_Receive_IT+0x82>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	e008      	b.n	8008ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4619      	mov	r1, r3
 800900e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009010:	2b00      	cmp	r3, #0
 8009012:	d15a      	bne.n	80090ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 0220 	bic.w	r2, r2, #32
 8009022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	695a      	ldr	r2, [r3, #20]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	2b01      	cmp	r3, #1
 8009052:	d135      	bne.n	80090c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	330c      	adds	r3, #12
 8009060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	613b      	str	r3, [r7, #16]
   return(result);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f023 0310 	bic.w	r3, r3, #16
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	623a      	str	r2, [r7, #32]
 800907c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	69f9      	ldr	r1, [r7, #28]
 8009080:	6a3a      	ldr	r2, [r7, #32]
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	61bb      	str	r3, [r7, #24]
   return(result);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0310 	and.w	r3, r3, #16
 8009098:	2b10      	cmp	r3, #16
 800909a:	d10a      	bne.n	80090b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fe29 	bl	8008d10 <HAL_UARTEx_RxEventCallback>
 80090be:	e002      	b.n	80090c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7f8 fcb5 	bl	8001a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e002      	b.n	80090d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e000      	b.n	80090d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80090ce:	2302      	movs	r3, #2
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3730      	adds	r7, #48	; 0x30
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090dc:	b0c0      	sub	sp, #256	; 0x100
 80090de:	af00      	add	r7, sp, #0
 80090e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f4:	68d9      	ldr	r1, [r3, #12]
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	ea40 0301 	orr.w	r3, r0, r1
 8009100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	431a      	orrs	r2, r3
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	431a      	orrs	r2, r3
 8009118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4313      	orrs	r3, r2
 8009120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009130:	f021 010c 	bic.w	r1, r1, #12
 8009134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800913e:	430b      	orrs	r3, r1
 8009140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800914e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009152:	6999      	ldr	r1, [r3, #24]
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	ea40 0301 	orr.w	r3, r0, r1
 800915e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b8f      	ldr	r3, [pc, #572]	; (80093a4 <UART_SetConfig+0x2cc>)
 8009168:	429a      	cmp	r2, r3
 800916a:	d005      	beq.n	8009178 <UART_SetConfig+0xa0>
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b8d      	ldr	r3, [pc, #564]	; (80093a8 <UART_SetConfig+0x2d0>)
 8009174:	429a      	cmp	r2, r3
 8009176:	d104      	bne.n	8009182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009178:	f7fc fee6 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 800917c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009180:	e003      	b.n	800918a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fc fecd 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8009186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800918a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009194:	f040 810c 	bne.w	80093b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800919c:	2200      	movs	r2, #0
 800919e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	1891      	adds	r1, r2, r2
 80091b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80091b2:	415b      	adcs	r3, r3
 80091b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091ba:	4621      	mov	r1, r4
 80091bc:	eb12 0801 	adds.w	r8, r2, r1
 80091c0:	4629      	mov	r1, r5
 80091c2:	eb43 0901 	adc.w	r9, r3, r1
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091da:	4690      	mov	r8, r2
 80091dc:	4699      	mov	r9, r3
 80091de:	4623      	mov	r3, r4
 80091e0:	eb18 0303 	adds.w	r3, r8, r3
 80091e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091e8:	462b      	mov	r3, r5
 80091ea:	eb49 0303 	adc.w	r3, r9, r3
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009206:	460b      	mov	r3, r1
 8009208:	18db      	adds	r3, r3, r3
 800920a:	653b      	str	r3, [r7, #80]	; 0x50
 800920c:	4613      	mov	r3, r2
 800920e:	eb42 0303 	adc.w	r3, r2, r3
 8009212:	657b      	str	r3, [r7, #84]	; 0x54
 8009214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800921c:	f7f7 fd54 	bl	8000cc8 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4b61      	ldr	r3, [pc, #388]	; (80093ac <UART_SetConfig+0x2d4>)
 8009226:	fba3 2302 	umull	r2, r3, r3, r2
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	011c      	lsls	r4, r3, #4
 800922e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009232:	2200      	movs	r2, #0
 8009234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800923c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	1891      	adds	r1, r2, r2
 8009246:	64b9      	str	r1, [r7, #72]	; 0x48
 8009248:	415b      	adcs	r3, r3
 800924a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800924c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009250:	4641      	mov	r1, r8
 8009252:	eb12 0a01 	adds.w	sl, r2, r1
 8009256:	4649      	mov	r1, r9
 8009258:	eb43 0b01 	adc.w	fp, r3, r1
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800926c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009270:	4692      	mov	sl, r2
 8009272:	469b      	mov	fp, r3
 8009274:	4643      	mov	r3, r8
 8009276:	eb1a 0303 	adds.w	r3, sl, r3
 800927a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800927e:	464b      	mov	r3, r9
 8009280:	eb4b 0303 	adc.w	r3, fp, r3
 8009284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800929c:	460b      	mov	r3, r1
 800929e:	18db      	adds	r3, r3, r3
 80092a0:	643b      	str	r3, [r7, #64]	; 0x40
 80092a2:	4613      	mov	r3, r2
 80092a4:	eb42 0303 	adc.w	r3, r2, r3
 80092a8:	647b      	str	r3, [r7, #68]	; 0x44
 80092aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092b2:	f7f7 fd09 	bl	8000cc8 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	4b3b      	ldr	r3, [pc, #236]	; (80093ac <UART_SetConfig+0x2d4>)
 80092be:	fba3 2301 	umull	r2, r3, r3, r1
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	2264      	movs	r2, #100	; 0x64
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	1acb      	subs	r3, r1, r3
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092d2:	4b36      	ldr	r3, [pc, #216]	; (80093ac <UART_SetConfig+0x2d4>)
 80092d4:	fba3 2302 	umull	r2, r3, r3, r2
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092e0:	441c      	add	r4, r3
 80092e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	1891      	adds	r1, r2, r2
 80092fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80092fc:	415b      	adcs	r3, r3
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009304:	4641      	mov	r1, r8
 8009306:	1851      	adds	r1, r2, r1
 8009308:	6339      	str	r1, [r7, #48]	; 0x30
 800930a:	4649      	mov	r1, r9
 800930c:	414b      	adcs	r3, r1
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800931c:	4659      	mov	r1, fp
 800931e:	00cb      	lsls	r3, r1, #3
 8009320:	4651      	mov	r1, sl
 8009322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009326:	4651      	mov	r1, sl
 8009328:	00ca      	lsls	r2, r1, #3
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	4603      	mov	r3, r0
 8009330:	4642      	mov	r2, r8
 8009332:	189b      	adds	r3, r3, r2
 8009334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009338:	464b      	mov	r3, r9
 800933a:	460a      	mov	r2, r1
 800933c:	eb42 0303 	adc.w	r3, r2, r3
 8009340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009358:	460b      	mov	r3, r1
 800935a:	18db      	adds	r3, r3, r3
 800935c:	62bb      	str	r3, [r7, #40]	; 0x28
 800935e:	4613      	mov	r3, r2
 8009360:	eb42 0303 	adc.w	r3, r2, r3
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800936a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800936e:	f7f7 fcab 	bl	8000cc8 <__aeabi_uldivmod>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <UART_SetConfig+0x2d4>)
 8009378:	fba3 1302 	umull	r1, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	2164      	movs	r1, #100	; 0x64
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	3332      	adds	r3, #50	; 0x32
 800938a:	4a08      	ldr	r2, [pc, #32]	; (80093ac <UART_SetConfig+0x2d4>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f003 0207 	and.w	r2, r3, #7
 8009396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4422      	add	r2, r4
 800939e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093a0:	e106      	b.n	80095b0 <UART_SetConfig+0x4d8>
 80093a2:	bf00      	nop
 80093a4:	40011000 	.word	0x40011000
 80093a8:	40011400 	.word	0x40011400
 80093ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093c2:	4642      	mov	r2, r8
 80093c4:	464b      	mov	r3, r9
 80093c6:	1891      	adds	r1, r2, r2
 80093c8:	6239      	str	r1, [r7, #32]
 80093ca:	415b      	adcs	r3, r3
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
 80093ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093d2:	4641      	mov	r1, r8
 80093d4:	1854      	adds	r4, r2, r1
 80093d6:	4649      	mov	r1, r9
 80093d8:	eb43 0501 	adc.w	r5, r3, r1
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	00eb      	lsls	r3, r5, #3
 80093e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ea:	00e2      	lsls	r2, r4, #3
 80093ec:	4614      	mov	r4, r2
 80093ee:	461d      	mov	r5, r3
 80093f0:	4643      	mov	r3, r8
 80093f2:	18e3      	adds	r3, r4, r3
 80093f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093f8:	464b      	mov	r3, r9
 80093fa:	eb45 0303 	adc.w	r3, r5, r3
 80093fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800940e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800941e:	4629      	mov	r1, r5
 8009420:	008b      	lsls	r3, r1, #2
 8009422:	4621      	mov	r1, r4
 8009424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009428:	4621      	mov	r1, r4
 800942a:	008a      	lsls	r2, r1, #2
 800942c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009430:	f7f7 fc4a 	bl	8000cc8 <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4b60      	ldr	r3, [pc, #384]	; (80095bc <UART_SetConfig+0x4e4>)
 800943a:	fba3 2302 	umull	r2, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	011c      	lsls	r4, r3, #4
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009446:	2200      	movs	r2, #0
 8009448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800944c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	61b9      	str	r1, [r7, #24]
 800945c:	415b      	adcs	r3, r3
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009464:	4641      	mov	r1, r8
 8009466:	1851      	adds	r1, r2, r1
 8009468:	6139      	str	r1, [r7, #16]
 800946a:	4649      	mov	r1, r9
 800946c:	414b      	adcs	r3, r1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800947c:	4659      	mov	r1, fp
 800947e:	00cb      	lsls	r3, r1, #3
 8009480:	4651      	mov	r1, sl
 8009482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009486:	4651      	mov	r1, sl
 8009488:	00ca      	lsls	r2, r1, #3
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	4603      	mov	r3, r0
 8009490:	4642      	mov	r2, r8
 8009492:	189b      	adds	r3, r3, r2
 8009494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009498:	464b      	mov	r3, r9
 800949a:	460a      	mov	r2, r1
 800949c:	eb42 0303 	adc.w	r3, r2, r3
 80094a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80094ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094bc:	4649      	mov	r1, r9
 80094be:	008b      	lsls	r3, r1, #2
 80094c0:	4641      	mov	r1, r8
 80094c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c6:	4641      	mov	r1, r8
 80094c8:	008a      	lsls	r2, r1, #2
 80094ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094ce:	f7f7 fbfb 	bl	8000cc8 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	4b38      	ldr	r3, [pc, #224]	; (80095bc <UART_SetConfig+0x4e4>)
 80094da:	fba3 2301 	umull	r2, r3, r3, r1
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2264      	movs	r2, #100	; 0x64
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	1acb      	subs	r3, r1, r3
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	3332      	adds	r3, #50	; 0x32
 80094ec:	4a33      	ldr	r2, [pc, #204]	; (80095bc <UART_SetConfig+0x4e4>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f8:	441c      	add	r4, r3
 80094fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094fe:	2200      	movs	r2, #0
 8009500:	673b      	str	r3, [r7, #112]	; 0x70
 8009502:	677a      	str	r2, [r7, #116]	; 0x74
 8009504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	1891      	adds	r1, r2, r2
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	415b      	adcs	r3, r3
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009518:	4641      	mov	r1, r8
 800951a:	1851      	adds	r1, r2, r1
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	4649      	mov	r1, r9
 8009520:	414b      	adcs	r3, r1
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009530:	4659      	mov	r1, fp
 8009532:	00cb      	lsls	r3, r1, #3
 8009534:	4651      	mov	r1, sl
 8009536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800953a:	4651      	mov	r1, sl
 800953c:	00ca      	lsls	r2, r1, #3
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	4603      	mov	r3, r0
 8009544:	4642      	mov	r2, r8
 8009546:	189b      	adds	r3, r3, r2
 8009548:	66bb      	str	r3, [r7, #104]	; 0x68
 800954a:	464b      	mov	r3, r9
 800954c:	460a      	mov	r2, r1
 800954e:	eb42 0303 	adc.w	r3, r2, r3
 8009552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	663b      	str	r3, [r7, #96]	; 0x60
 800955e:	667a      	str	r2, [r7, #100]	; 0x64
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800956c:	4649      	mov	r1, r9
 800956e:	008b      	lsls	r3, r1, #2
 8009570:	4641      	mov	r1, r8
 8009572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009576:	4641      	mov	r1, r8
 8009578:	008a      	lsls	r2, r1, #2
 800957a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800957e:	f7f7 fba3 	bl	8000cc8 <__aeabi_uldivmod>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <UART_SetConfig+0x4e4>)
 8009588:	fba3 1302 	umull	r1, r3, r3, r2
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	2164      	movs	r1, #100	; 0x64
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	3332      	adds	r3, #50	; 0x32
 800959a:	4a08      	ldr	r2, [pc, #32]	; (80095bc <UART_SetConfig+0x4e4>)
 800959c:	fba2 2303 	umull	r2, r3, r2, r3
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	f003 020f 	and.w	r2, r3, #15
 80095a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4422      	add	r2, r4
 80095ae:	609a      	str	r2, [r3, #8]
}
 80095b0:	bf00      	nop
 80095b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095b6:	46bd      	mov	sp, r7
 80095b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095bc:	51eb851f 	.word	0x51eb851f

080095c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80095c0:	b084      	sub	sp, #16
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	f107 001c 	add.w	r0, r7, #28
 80095ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80095d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80095d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80095da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80095de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80095e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80095e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80095ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80095fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	b004      	add	sp, #16
 8009614:	4770      	bx	lr

08009616 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2203      	movs	r2, #3
 800965e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0303 	and.w	r3, r3, #3
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80096ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80096c4:	f023 030f 	bic.w	r3, r3, #15
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	b2db      	uxtb	r3, r3
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3314      	adds	r3, #20
 8009706:	461a      	mov	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	4413      	add	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
}  
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009744:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800974a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009750:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	431a      	orrs	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009768:	2300      	movs	r3, #0

}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b088      	sub	sp, #32
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009784:	2310      	movs	r3, #16
 8009786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009788:	2340      	movs	r3, #64	; 0x40
 800978a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800978c:	2300      	movs	r3, #0
 800978e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff ff74 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80097a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a6:	2110      	movs	r1, #16
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9d7 	bl	8009b5c <SDMMC_GetCmdResp1>
 80097ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097b0:	69fb      	ldr	r3, [r7, #28]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3720      	adds	r7, #32
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b088      	sub	sp, #32
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80097c8:	2311      	movs	r3, #17
 80097ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097cc:	2340      	movs	r3, #64	; 0x40
 80097ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff52 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ea:	2111      	movs	r1, #17
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f9b5 	bl	8009b5c <SDMMC_GetCmdResp1>
 80097f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f4:	69fb      	ldr	r3, [r7, #28]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b088      	sub	sp, #32
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800980c:	2312      	movs	r3, #18
 800980e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009810:	2340      	movs	r3, #64	; 0x40
 8009812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009814:	2300      	movs	r3, #0
 8009816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800981c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff30 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800982a:	f241 3288 	movw	r2, #5000	; 0x1388
 800982e:	2112      	movs	r1, #18
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f993 	bl	8009b5c <SDMMC_GetCmdResp1>
 8009836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009838:	69fb      	ldr	r3, [r7, #28]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b088      	sub	sp, #32
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009850:	2318      	movs	r3, #24
 8009852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800985c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009860:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ff0e 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800986e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009872:	2118      	movs	r1, #24
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f971 	bl	8009b5c <SDMMC_GetCmdResp1>
 800987a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800987c:	69fb      	ldr	r3, [r7, #28]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b088      	sub	sp, #32
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009894:	2319      	movs	r3, #25
 8009896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff feec 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b6:	2119      	movs	r1, #25
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f94f 	bl	8009b5c <SDMMC_GetCmdResp1>
 80098be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c0:	69fb      	ldr	r3, [r7, #28]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80098d8:	230c      	movs	r3, #12
 80098da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098ea:	f107 0308 	add.w	r3, r7, #8
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff feca 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80098f6:	4a05      	ldr	r2, [pc, #20]	; (800990c <SDMMC_CmdStopTransfer+0x40>)
 80098f8:	210c      	movs	r1, #12
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f92e 	bl	8009b5c <SDMMC_GetCmdResp1>
 8009900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009902:	69fb      	ldr	r3, [r7, #28]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	05f5e100 	.word	0x05f5e100

08009910 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08a      	sub	sp, #40	; 0x28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009920:	2307      	movs	r3, #7
 8009922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009932:	f107 0310 	add.w	r3, r7, #16
 8009936:	4619      	mov	r1, r3
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff fea6 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800993e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009942:	2107      	movs	r1, #7
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f909 	bl	8009b5c <SDMMC_GetCmdResp1>
 800994a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800994e:	4618      	mov	r0, r3
 8009950:	3728      	adds	r7, #40	; 0x28
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b088      	sub	sp, #32
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800996e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fe85 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fb23 	bl	8009fcc <SDMMC_GetCmdError>
 8009986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009988:	69fb      	ldr	r3, [r7, #28]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b088      	sub	sp, #32
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800999a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800999e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80099a0:	2308      	movs	r3, #8
 80099a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099a4:	2340      	movs	r3, #64	; 0x40
 80099a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099b2:	f107 0308 	add.w	r3, r7, #8
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fe66 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fab6 	bl	8009f30 <SDMMC_GetCmdResp7>
 80099c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099c6:	69fb      	ldr	r3, [r7, #28]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3720      	adds	r7, #32
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80099de:	2337      	movs	r3, #55	; 0x37
 80099e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099e2:	2340      	movs	r3, #64	; 0x40
 80099e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099e6:	2300      	movs	r3, #0
 80099e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fe47 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80099fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a00:	2137      	movs	r1, #55	; 0x37
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f8aa 	bl	8009b5c <SDMMC_GetCmdResp1>
 8009a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a2a:	2329      	movs	r3, #41	; 0x29
 8009a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a2e:	2340      	movs	r3, #64	; 0x40
 8009a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a32:	2300      	movs	r3, #0
 8009a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a3c:	f107 0308 	add.w	r3, r7, #8
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fe21 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f9bd 	bl	8009dc8 <SDMMC_GetCmdResp3>
 8009a4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a50:	69fb      	ldr	r3, [r7, #28]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b088      	sub	sp, #32
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a66:	2302      	movs	r3, #2
 8009a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a6a:	23c0      	movs	r3, #192	; 0xc0
 8009a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fe03 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f957 	bl	8009d38 <SDMMC_GetCmdResp2>
 8009a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009aa4:	2309      	movs	r3, #9
 8009aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009aa8:	23c0      	movs	r3, #192	; 0xc0
 8009aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fde4 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f938 	bl	8009d38 <SDMMC_GetCmdResp2>
 8009ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aca:	69fb      	ldr	r3, [r7, #28]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ae6:	2340      	movs	r3, #64	; 0x40
 8009ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009af4:	f107 0308 	add.w	r3, r7, #8
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fdc5 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	2103      	movs	r1, #3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f99d 	bl	8009e44 <SDMMC_GetCmdResp6>
 8009b0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b088      	sub	sp, #32
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b24:	230d      	movs	r3, #13
 8009b26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b28:	2340      	movs	r3, #64	; 0x40
 8009b2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b36:	f107 0308 	add.w	r3, r7, #8
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff fda4 	bl	800968a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b46:	210d      	movs	r1, #13
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f807 	bl	8009b5c <SDMMC_GetCmdResp1>
 8009b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b50:	69fb      	ldr	r3, [r7, #28]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3720      	adds	r7, #32
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	460b      	mov	r3, r1
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b6a:	4b70      	ldr	r3, [pc, #448]	; (8009d2c <SDMMC_GetCmdResp1+0x1d0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a70      	ldr	r2, [pc, #448]	; (8009d30 <SDMMC_GetCmdResp1+0x1d4>)
 8009b70:	fba2 2303 	umull	r2, r3, r2, r3
 8009b74:	0a5a      	lsrs	r2, r3, #9
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	fb02 f303 	mul.w	r3, r2, r3
 8009b7c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	1e5a      	subs	r2, r3, #1
 8009b82:	61fa      	str	r2, [r7, #28]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b8c:	e0c9      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b92:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0ef      	beq.n	8009b7e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1ea      	bne.n	8009b7e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bba:	2304      	movs	r3, #4
 8009bbc:	e0b1      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e0a6      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	22c5      	movs	r2, #197	; 0xc5
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fd7f 	bl	80096de <SDIO_GetCommandResponse>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d001      	beq.n	8009bee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e099      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009bee:	2100      	movs	r1, #0
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff fd81 	bl	80096f8 <SDIO_GetResponse>
 8009bf6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	4b4e      	ldr	r3, [pc, #312]	; (8009d34 <SDMMC_GetCmdResp1+0x1d8>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e08d      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	da02      	bge.n	8009c12 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c10:	e087      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	e080      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c2a:	2380      	movs	r3, #128	; 0x80
 8009c2c:	e079      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c3c:	e071      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c4c:	e069      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c5c:	e061      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c6c:	e059      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c7c:	e051      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c8c:	e049      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c9c:	e041      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cac:	e039      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009cbc:	e031      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009cc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ccc:	e029      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009cd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009cdc:	e021      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ce8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009cec:	e019      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009cf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009cfc:	e011      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009d08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d0c:	e009      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d1c:	e001      	b.n	8009d22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000004 	.word	0x20000004
 8009d30:	10624dd3 	.word	0x10624dd3
 8009d34:	fdffe008 	.word	0xfdffe008

08009d38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d40:	4b1f      	ldr	r3, [pc, #124]	; (8009dc0 <SDMMC_GetCmdResp2+0x88>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1f      	ldr	r2, [pc, #124]	; (8009dc4 <SDMMC_GetCmdResp2+0x8c>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	0a5b      	lsrs	r3, r3, #9
 8009d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d50:	fb02 f303 	mul.w	r3, r2, r3
 8009d54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1e5a      	subs	r2, r3, #1
 8009d5a:	60fa      	str	r2, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d64:	e026      	b.n	8009db4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0ef      	beq.n	8009d56 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1ea      	bne.n	8009d56 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d004      	beq.n	8009d96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2204      	movs	r2, #4
 8009d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d92:	2304      	movs	r3, #4
 8009d94:	e00e      	b.n	8009db4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e003      	b.n	8009db4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	22c5      	movs	r2, #197	; 0xc5
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20000004 	.word	0x20000004
 8009dc4:	10624dd3 	.word	0x10624dd3

08009dc8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <SDMMC_GetCmdResp3+0x74>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1a      	ldr	r2, [pc, #104]	; (8009e40 <SDMMC_GetCmdResp3+0x78>)
 8009dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dda:	0a5b      	lsrs	r3, r3, #9
 8009ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	1e5a      	subs	r2, r3, #1
 8009dea:	60fa      	str	r2, [r7, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009df0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009df4:	e01b      	b.n	8009e2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0ef      	beq.n	8009de6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1ea      	bne.n	8009de6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2204      	movs	r2, #4
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e22:	2304      	movs	r3, #4
 8009e24:	e003      	b.n	8009e2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	22c5      	movs	r2, #197	; 0xc5
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000004 	.word	0x20000004
 8009e40:	10624dd3 	.word	0x10624dd3

08009e44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e52:	4b35      	ldr	r3, [pc, #212]	; (8009f28 <SDMMC_GetCmdResp6+0xe4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a35      	ldr	r2, [pc, #212]	; (8009f2c <SDMMC_GetCmdResp6+0xe8>)
 8009e58:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5c:	0a5b      	lsrs	r3, r3, #9
 8009e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e62:	fb02 f303 	mul.w	r3, r2, r3
 8009e66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	1e5a      	subs	r2, r3, #1
 8009e6c:	61fa      	str	r2, [r7, #28]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d102      	bne.n	8009e78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e76:	e052      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0ef      	beq.n	8009e68 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1ea      	bne.n	8009e68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	e03a      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d004      	beq.n	8009ebe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e02f      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fc0d 	bl	80096de <SDIO_GetCommandResponse>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	7afb      	ldrb	r3, [r7, #11]
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d001      	beq.n	8009ed2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e025      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	22c5      	movs	r2, #197	; 0xc5
 8009ed6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009ed8:	2100      	movs	r1, #0
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff fc0c 	bl	80096f8 <SDIO_GetResponse>
 8009ee0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e011      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f08:	e009      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f18:	e001      	b.n	8009f1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3720      	adds	r7, #32
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000004 	.word	0x20000004
 8009f2c:	10624dd3 	.word	0x10624dd3

08009f30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f38:	4b22      	ldr	r3, [pc, #136]	; (8009fc4 <SDMMC_GetCmdResp7+0x94>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a22      	ldr	r2, [pc, #136]	; (8009fc8 <SDMMC_GetCmdResp7+0x98>)
 8009f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f42:	0a5b      	lsrs	r3, r3, #9
 8009f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f48:	fb02 f303 	mul.w	r3, r2, r3
 8009f4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	1e5a      	subs	r2, r3, #1
 8009f52:	60fa      	str	r2, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f5c:	e02c      	b.n	8009fb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0ef      	beq.n	8009f4e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1ea      	bne.n	8009f4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d004      	beq.n	8009f8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2204      	movs	r2, #4
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f8a:	2304      	movs	r3, #4
 8009f8c:	e014      	b.n	8009fb8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e009      	b.n	8009fb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2240      	movs	r2, #64	; 0x40
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009fb6:	2300      	movs	r3, #0
  
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	20000004 	.word	0x20000004
 8009fc8:	10624dd3 	.word	0x10624dd3

08009fcc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fd4:	4b11      	ldr	r3, [pc, #68]	; (800a01c <SDMMC_GetCmdError+0x50>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a11      	ldr	r2, [pc, #68]	; (800a020 <SDMMC_GetCmdError+0x54>)
 8009fda:	fba2 2303 	umull	r2, r3, r2, r3
 8009fde:	0a5b      	lsrs	r3, r3, #9
 8009fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe4:	fb02 f303 	mul.w	r3, r2, r3
 8009fe8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1e5a      	subs	r2, r3, #1
 8009fee:	60fa      	str	r2, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ff8:	e009      	b.n	800a00e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0f1      	beq.n	8009fea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	22c5      	movs	r2, #197	; 0xc5
 800a00a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20000004 	.word	0x20000004
 800a020:	10624dd3 	.word	0x10624dd3

0800a024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a028:	4904      	ldr	r1, [pc, #16]	; (800a03c <MX_FATFS_Init+0x18>)
 800a02a:	4805      	ldr	r0, [pc, #20]	; (800a040 <MX_FATFS_Init+0x1c>)
 800a02c:	f000 faaa 	bl	800a584 <FATFS_LinkDriver>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	4b03      	ldr	r3, [pc, #12]	; (800a044 <MX_FATFS_Init+0x20>)
 800a036:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a038:	bf00      	nop
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	2000099c 	.word	0x2000099c
 800a040:	080129a4 	.word	0x080129a4
 800a044:	20000998 	.word	0x20000998

0800a048 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a052:	f000 f888 	bl	800a166 <BSP_SD_IsDetected>
 800a056:	4603      	mov	r3, r0
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d001      	beq.n	800a060 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e005      	b.n	800a06c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a060:	4804      	ldr	r0, [pc, #16]	; (800a074 <BSP_SD_Init+0x2c>)
 800a062:	f7fc ff29 	bl	8006eb8 <HAL_SD_Init>
 800a066:	4603      	mov	r3, r0
 800a068:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a06a:	79fb      	ldrb	r3, [r7, #7]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20000438 	.word	0x20000438

0800a078 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	4806      	ldr	r0, [pc, #24]	; (800a0a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a090:	f7fc ffc2 	bl	8007018 <HAL_SD_ReadBlocks_DMA>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000438 	.word	0x20000438

0800a0ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	4806      	ldr	r0, [pc, #24]	; (800a0dc <BSP_SD_WriteBlocks_DMA+0x30>)
 800a0c4:	f7fd f888 	bl	80071d8 <HAL_SD_WriteBlocks_DMA>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000438 	.word	0x20000438

0800a0e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a0e4:	4805      	ldr	r0, [pc, #20]	; (800a0fc <BSP_SD_GetCardState+0x1c>)
 800a0e6:	f7fd fca9 	bl	8007a3c <HAL_SD_GetCardState>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	bf14      	ite	ne
 800a0f0:	2301      	movne	r3, #1
 800a0f2:	2300      	moveq	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000438 	.word	0x20000438

0800a100 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a108:	6879      	ldr	r1, [r7, #4]
 800a10a:	4803      	ldr	r0, [pc, #12]	; (800a118 <BSP_SD_GetCardInfo+0x18>)
 800a10c:	f7fd fc6a 	bl	80079e4 <HAL_SD_GetCardInfo>
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000438 	.word	0x20000438

0800a11c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a124:	f000 f818 	bl	800a158 <BSP_SD_AbortCallback>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a138:	f000 f9b4 	bl	800a4a4 <BSP_SD_WriteCpltCallback>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a14c:	f000 f9bc 	bl	800a4c8 <BSP_SD_ReadCpltCallback>
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0

}
 800a15c:	bf00      	nop
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a16c:	2301      	movs	r3, #1
 800a16e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a170:	f000 f80c 	bl	800a18c <BSP_PlatformIsDetected>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a17a:	2300      	movs	r3, #0
 800a17c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	b2db      	uxtb	r3, r3
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a192:	2301      	movs	r3, #1
 800a194:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a19a:	4806      	ldr	r0, [pc, #24]	; (800a1b4 <BSP_PlatformIsDetected+0x28>)
 800a19c:	f7f9 fa48 	bl	8003630 <HAL_GPIO_ReadPin>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a1aa:	79fb      	ldrb	r3, [r7, #7]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	40020800 	.word	0x40020800

0800a1b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a1c0:	f000 faa0 	bl	800a704 <osKernelGetTickCount>
 800a1c4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a1c6:	e006      	b.n	800a1d6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a1c8:	f7ff ff8a 	bl	800a0e0 <BSP_SD_GetCardState>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	e009      	b.n	800a1ea <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a1d6:	f000 fa95 	bl	800a704 <osKernelGetTickCount>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d8f0      	bhi.n	800a1c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a1e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a1fe:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <SD_CheckStatus+0x38>)
 800a200:	2201      	movs	r2, #1
 800a202:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a204:	f7ff ff6c 	bl	800a0e0 <BSP_SD_GetCardState>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d107      	bne.n	800a21e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a20e:	4b07      	ldr	r3, [pc, #28]	; (800a22c <SD_CheckStatus+0x38>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f023 0301 	bic.w	r3, r3, #1
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b04      	ldr	r3, [pc, #16]	; (800a22c <SD_CheckStatus+0x38>)
 800a21c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a21e:	4b03      	ldr	r3, [pc, #12]	; (800a22c <SD_CheckStatus+0x38>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b2db      	uxtb	r3, r3
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	2000000d 	.word	0x2000000d

0800a230 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a23a:	4b1c      	ldr	r3, [pc, #112]	; (800a2ac <SD_initialize+0x7c>)
 800a23c:	2201      	movs	r2, #1
 800a23e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a240:	f000 fa18 	bl	800a674 <osKernelGetState>
 800a244:	4603      	mov	r3, r0
 800a246:	2b02      	cmp	r3, #2
 800a248:	d129      	bne.n	800a29e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a24a:	f7ff fefd 	bl	800a048 <BSP_SD_Init>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d107      	bne.n	800a264 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff ffcc 	bl	800a1f4 <SD_CheckStatus>
 800a25c:	4603      	mov	r3, r0
 800a25e:	461a      	mov	r2, r3
 800a260:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <SD_initialize+0x7c>)
 800a262:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a264:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <SD_initialize+0x7c>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d017      	beq.n	800a29e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a26e:	4b10      	ldr	r3, [pc, #64]	; (800a2b0 <SD_initialize+0x80>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d107      	bne.n	800a286 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a276:	2200      	movs	r2, #0
 800a278:	2102      	movs	r1, #2
 800a27a:	200a      	movs	r0, #10
 800a27c:	f000 fb04 	bl	800a888 <osMessageQueueNew>
 800a280:	4603      	mov	r3, r0
 800a282:	4a0b      	ldr	r2, [pc, #44]	; (800a2b0 <SD_initialize+0x80>)
 800a284:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a286:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <SD_initialize+0x80>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d107      	bne.n	800a29e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a28e:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <SD_initialize+0x7c>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f043 0301 	orr.w	r3, r3, #1
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <SD_initialize+0x7c>)
 800a29c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a29e:	4b03      	ldr	r3, [pc, #12]	; (800a2ac <SD_initialize+0x7c>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	b2db      	uxtb	r3, r3
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	2000000d 	.word	0x2000000d
 800a2b0:	200009a0 	.word	0x200009a0

0800a2b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff ff97 	bl	800a1f4 <SD_CheckStatus>
 800a2c6:	4603      	mov	r3, r0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a2e4:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2e8:	f7ff ff66 	bl	800a1b8 <SD_CheckStatusWithTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	da01      	bge.n	800a2f6 <SD_read+0x26>
  {
    return res;
 800a2f2:	7ffb      	ldrb	r3, [r7, #31]
 800a2f4:	e02f      	b.n	800a356 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	68b8      	ldr	r0, [r7, #8]
 800a2fc:	f7ff febc 	bl	800a078 <BSP_SD_ReadBlocks_DMA>
 800a300:	4603      	mov	r3, r0
 800a302:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a304:	7fbb      	ldrb	r3, [r7, #30]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d124      	bne.n	800a354 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a30a:	4b15      	ldr	r3, [pc, #84]	; (800a360 <SD_read+0x90>)
 800a30c:	6818      	ldr	r0, [r3, #0]
 800a30e:	f107 0112 	add.w	r1, r7, #18
 800a312:	f247 5330 	movw	r3, #30000	; 0x7530
 800a316:	2200      	movs	r2, #0
 800a318:	f000 fb8a 	bl	800aa30 <osMessageQueueGet>
 800a31c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d117      	bne.n	800a354 <SD_read+0x84>
 800a324:	8a7b      	ldrh	r3, [r7, #18]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d114      	bne.n	800a354 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a32a:	f000 f9eb 	bl	800a704 <osKernelGetTickCount>
 800a32e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a330:	e007      	b.n	800a342 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a332:	f7ff fed5 	bl	800a0e0 <BSP_SD_GetCardState>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <SD_read+0x72>
              {
                res = RES_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a340:	e008      	b.n	800a354 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a342:	f000 f9df 	bl	800a704 <osKernelGetTickCount>
 800a346:	4602      	mov	r2, r0
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a350:	4293      	cmp	r3, r2
 800a352:	d9ee      	bls.n	800a332 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a354:	7ffb      	ldrb	r3, [r7, #31]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3720      	adds	r7, #32
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	200009a0 	.word	0x200009a0

0800a364 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60b9      	str	r1, [r7, #8]
 800a36c:	607a      	str	r2, [r7, #4]
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	4603      	mov	r3, r0
 800a372:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a378:	f247 5030 	movw	r0, #30000	; 0x7530
 800a37c:	f7ff ff1c 	bl	800a1b8 <SD_CheckStatusWithTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	da01      	bge.n	800a38a <SD_write+0x26>
  {
    return res;
 800a386:	7ffb      	ldrb	r3, [r7, #31]
 800a388:	e02d      	b.n	800a3e6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	68b8      	ldr	r0, [r7, #8]
 800a390:	f7ff fe8c 	bl	800a0ac <BSP_SD_WriteBlocks_DMA>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d124      	bne.n	800a3e4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a39a:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <SD_write+0x8c>)
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	f107 0112 	add.w	r1, r7, #18
 800a3a2:	f247 5330 	movw	r3, #30000	; 0x7530
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f000 fb42 	bl	800aa30 <osMessageQueueGet>
 800a3ac:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d117      	bne.n	800a3e4 <SD_write+0x80>
 800a3b4:	8a7b      	ldrh	r3, [r7, #18]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d114      	bne.n	800a3e4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a3ba:	f000 f9a3 	bl	800a704 <osKernelGetTickCount>
 800a3be:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a3c0:	e007      	b.n	800a3d2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3c2:	f7ff fe8d 	bl	800a0e0 <BSP_SD_GetCardState>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d102      	bne.n	800a3d2 <SD_write+0x6e>
          {
            res = RES_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	77fb      	strb	r3, [r7, #31]
            break;
 800a3d0:	e008      	b.n	800a3e4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a3d2:	f000 f997 	bl	800a704 <osKernelGetTickCount>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d9ee      	bls.n	800a3c2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a3e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	200009a0 	.word	0x200009a0

0800a3f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	; 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	603a      	str	r2, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
 800a400:	460b      	mov	r3, r1
 800a402:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a40a:	4b25      	ldr	r3, [pc, #148]	; (800a4a0 <SD_ioctl+0xac>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <SD_ioctl+0x28>
 800a418:	2303      	movs	r3, #3
 800a41a:	e03c      	b.n	800a496 <SD_ioctl+0xa2>

  switch (cmd)
 800a41c:	79bb      	ldrb	r3, [r7, #6]
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d834      	bhi.n	800a48c <SD_ioctl+0x98>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <SD_ioctl+0x34>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a441 	.word	0x0800a441
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a473 	.word	0x0800a473
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a43e:	e028      	b.n	800a492 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4618      	mov	r0, r3
 800a446:	f7ff fe5b 	bl	800a100 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a456:	e01c      	b.n	800a492 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff fe4f 	bl	800a100 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	b29a      	uxth	r2, r3
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a470:	e00f      	b.n	800a492 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a472:	f107 030c 	add.w	r3, r7, #12
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fe42 	bl	800a100 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	0a5a      	lsrs	r2, r3, #9
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a48a:	e002      	b.n	800a492 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a48c:	2304      	movs	r3, #4
 800a48e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a496:	4618      	mov	r0, r3
 800a498:	3730      	adds	r7, #48	; 0x30
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000000d 	.word	0x2000000d

0800a4a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <BSP_SD_WriteCpltCallback+0x20>)
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	1db9      	adds	r1, r7, #6
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f000 fa5a 	bl	800a970 <osMessageQueuePut>
#endif
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	200009a0 	.word	0x200009a0

0800a4c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <BSP_SD_ReadCpltCallback+0x20>)
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	1db9      	adds	r1, r7, #6
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f000 fa48 	bl	800a970 <osMessageQueuePut>
#endif
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	200009a0 	.word	0x200009a0

0800a4ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a502:	4b1f      	ldr	r3, [pc, #124]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a504:	7a5b      	ldrb	r3, [r3, #9]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d131      	bne.n	800a570 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a50c:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a50e:	7a5b      	ldrb	r3, [r3, #9]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	461a      	mov	r2, r3
 800a514:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a516:	2100      	movs	r1, #0
 800a518:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a51a:	4b19      	ldr	r3, [pc, #100]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a51c:	7a5b      	ldrb	r3, [r3, #9]
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	4a17      	ldr	r2, [pc, #92]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a52a:	4b15      	ldr	r3, [pc, #84]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a52c:	7a5b      	ldrb	r3, [r3, #9]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	461a      	mov	r2, r3
 800a532:	4b13      	ldr	r3, [pc, #76]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a534:	4413      	add	r3, r2
 800a536:	79fa      	ldrb	r2, [r7, #7]
 800a538:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a53a:	4b11      	ldr	r3, [pc, #68]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a53c:	7a5b      	ldrb	r3, [r3, #9]
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	b2d1      	uxtb	r1, r2
 800a544:	4a0e      	ldr	r2, [pc, #56]	; (800a580 <FATFS_LinkDriverEx+0x94>)
 800a546:	7251      	strb	r1, [r2, #9]
 800a548:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a54a:	7dbb      	ldrb	r3, [r7, #22]
 800a54c:	3330      	adds	r3, #48	; 0x30
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	3301      	adds	r3, #1
 800a558:	223a      	movs	r2, #58	; 0x3a
 800a55a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	3302      	adds	r3, #2
 800a560:	222f      	movs	r2, #47	; 0x2f
 800a562:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	3303      	adds	r3, #3
 800a568:	2200      	movs	r2, #0
 800a56a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
}
 800a572:	4618      	mov	r0, r3
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	200009a4 	.word	0x200009a4

0800a584 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a58e:	2200      	movs	r2, #0
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff ffaa 	bl	800a4ec <FATFS_LinkDriverEx>
 800a598:	4603      	mov	r3, r0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <__NVIC_SetPriority>:
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	6039      	str	r1, [r7, #0]
 800a5ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	db0a      	blt.n	800a5ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	490c      	ldr	r1, [pc, #48]	; (800a5f0 <__NVIC_SetPriority+0x4c>)
 800a5be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5c2:	0112      	lsls	r2, r2, #4
 800a5c4:	b2d2      	uxtb	r2, r2
 800a5c6:	440b      	add	r3, r1
 800a5c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5cc:	e00a      	b.n	800a5e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	4908      	ldr	r1, [pc, #32]	; (800a5f4 <__NVIC_SetPriority+0x50>)
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	f003 030f 	and.w	r3, r3, #15
 800a5da:	3b04      	subs	r3, #4
 800a5dc:	0112      	lsls	r2, r2, #4
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	761a      	strb	r2, [r3, #24]
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	e000e100 	.word	0xe000e100
 800a5f4:	e000ed00 	.word	0xe000ed00

0800a5f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <SysTick_Handler+0x1c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a600:	f001 ff5c 	bl	800c4bc <xTaskGetSchedulerState>
 800a604:	4603      	mov	r3, r0
 800a606:	2b01      	cmp	r3, #1
 800a608:	d001      	beq.n	800a60e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a60a:	f002 fd45 	bl	800d098 <xPortSysTickHandler>
  }
}
 800a60e:	bf00      	nop
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	e000e010 	.word	0xe000e010

0800a618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a61c:	2100      	movs	r1, #0
 800a61e:	f06f 0004 	mvn.w	r0, #4
 800a622:	f7ff ffbf 	bl	800a5a4 <__NVIC_SetPriority>
#endif
}
 800a626:	bf00      	nop
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a632:	f3ef 8305 	mrs	r3, IPSR
 800a636:	603b      	str	r3, [r7, #0]
  return(result);
 800a638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a63e:	f06f 0305 	mvn.w	r3, #5
 800a642:	607b      	str	r3, [r7, #4]
 800a644:	e00c      	b.n	800a660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a646:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <osKernelInitialize+0x44>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d105      	bne.n	800a65a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a64e:	4b08      	ldr	r3, [pc, #32]	; (800a670 <osKernelInitialize+0x44>)
 800a650:	2201      	movs	r2, #1
 800a652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a654:	2300      	movs	r3, #0
 800a656:	607b      	str	r3, [r7, #4]
 800a658:	e002      	b.n	800a660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a65a:	f04f 33ff 	mov.w	r3, #4294967295
 800a65e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a660:	687b      	ldr	r3, [r7, #4]
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	200009b0 	.word	0x200009b0

0800a674 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a67a:	f001 ff1f 	bl	800c4bc <xTaskGetSchedulerState>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <osKernelGetState+0x1a>
 800a684:	2b02      	cmp	r3, #2
 800a686:	d105      	bne.n	800a694 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a688:	2302      	movs	r3, #2
 800a68a:	607b      	str	r3, [r7, #4]
      break;
 800a68c:	e00c      	b.n	800a6a8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a68e:	2303      	movs	r3, #3
 800a690:	607b      	str	r3, [r7, #4]
      break;
 800a692:	e009      	b.n	800a6a8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a694:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <osKernelGetState+0x40>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d102      	bne.n	800a6a2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800a69c:	2301      	movs	r3, #1
 800a69e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a6a0:	e001      	b.n	800a6a6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	607b      	str	r3, [r7, #4]
      break;
 800a6a6:	bf00      	nop
  }

  return (state);
 800a6a8:	687b      	ldr	r3, [r7, #4]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	200009b0 	.word	0x200009b0

0800a6b8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a6c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6ca:	f06f 0305 	mvn.w	r3, #5
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e010      	b.n	800a6f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6d2:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <osKernelStart+0x48>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d109      	bne.n	800a6ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6da:	f7ff ff9d 	bl	800a618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6de:	4b08      	ldr	r3, [pc, #32]	; (800a700 <osKernelStart+0x48>)
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6e4:	f001 fa7c 	bl	800bbe0 <vTaskStartScheduler>
      stat = osOK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	607b      	str	r3, [r7, #4]
 800a6ec:	e002      	b.n	800a6f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6f4:	687b      	ldr	r3, [r7, #4]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	200009b0 	.word	0x200009b0

0800a704 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a70a:	f3ef 8305 	mrs	r3, IPSR
 800a70e:	603b      	str	r3, [r7, #0]
  return(result);
 800a710:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a716:	f001 fb8f 	bl	800be38 <xTaskGetTickCountFromISR>
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	e002      	b.n	800a724 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a71e:	f001 fb7b 	bl	800be18 <xTaskGetTickCount>
 800a722:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a724:	687b      	ldr	r3, [r7, #4]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a72e:	b580      	push	{r7, lr}
 800a730:	b08e      	sub	sp, #56	; 0x38
 800a732:	af04      	add	r7, sp, #16
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a73e:	f3ef 8305 	mrs	r3, IPSR
 800a742:	617b      	str	r3, [r7, #20]
  return(result);
 800a744:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a746:	2b00      	cmp	r3, #0
 800a748:	d17e      	bne.n	800a848 <osThreadNew+0x11a>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d07b      	beq.n	800a848 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a754:	2318      	movs	r3, #24
 800a756:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a758:	2300      	movs	r3, #0
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a75c:	f04f 33ff 	mov.w	r3, #4294967295
 800a760:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d045      	beq.n	800a7f4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <osThreadNew+0x48>
        name = attr->name;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <osThreadNew+0x6e>
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	2b38      	cmp	r3, #56	; 0x38
 800a78e:	d805      	bhi.n	800a79c <osThreadNew+0x6e>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <osThreadNew+0x72>
        return (NULL);
 800a79c:	2300      	movs	r3, #0
 800a79e:	e054      	b.n	800a84a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	089b      	lsrs	r3, r3, #2
 800a7ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00e      	beq.n	800a7d6 <osThreadNew+0xa8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	2ba7      	cmp	r3, #167	; 0xa7
 800a7be:	d90a      	bls.n	800a7d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d006      	beq.n	800a7d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <osThreadNew+0xa8>
        mem = 1;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e010      	b.n	800a7f8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10c      	bne.n	800a7f8 <osThreadNew+0xca>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d108      	bne.n	800a7f8 <osThreadNew+0xca>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d104      	bne.n	800a7f8 <osThreadNew+0xca>
          mem = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	61bb      	str	r3, [r7, #24]
 800a7f2:	e001      	b.n	800a7f8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d110      	bne.n	800a820 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a806:	9202      	str	r2, [sp, #8]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	6a3a      	ldr	r2, [r7, #32]
 800a812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fff7 	bl	800b808 <xTaskCreateStatic>
 800a81a:	4603      	mov	r3, r0
 800a81c:	613b      	str	r3, [r7, #16]
 800a81e:	e013      	b.n	800a848 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d110      	bne.n	800a848 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	b29a      	uxth	r2, r3
 800a82a:	f107 0310 	add.w	r3, r7, #16
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f001 f842 	bl	800b8c2 <xTaskCreate>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d001      	beq.n	800a848 <osThreadNew+0x11a>
            hTask = NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a848:	693b      	ldr	r3, [r7, #16]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3728      	adds	r7, #40	; 0x28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a85a:	f3ef 8305 	mrs	r3, IPSR
 800a85e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a860:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <osDelay+0x1c>
    stat = osErrorISR;
 800a866:	f06f 0305 	mvn.w	r3, #5
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	e007      	b.n	800a87e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <osDelay+0x2c>
      vTaskDelay(ticks);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 f97d 	bl	800bb78 <vTaskDelay>
    }
  }

  return (stat);
 800a87e:	68fb      	ldr	r3, [r7, #12]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08a      	sub	sp, #40	; 0x28
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a898:	f3ef 8305 	mrs	r3, IPSR
 800a89c:	613b      	str	r3, [r7, #16]
  return(result);
 800a89e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d15f      	bne.n	800a964 <osMessageQueueNew+0xdc>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d05c      	beq.n	800a964 <osMessageQueueNew+0xdc>
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d059      	beq.n	800a964 <osMessageQueueNew+0xdc>
    mem = -1;
 800a8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d029      	beq.n	800a910 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d012      	beq.n	800a8ea <osMessageQueueNew+0x62>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b4f      	cmp	r3, #79	; 0x4f
 800a8ca:	d90e      	bls.n	800a8ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00a      	beq.n	800a8ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	695a      	ldr	r2, [r3, #20]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d302      	bcc.n	800a8ea <osMessageQueueNew+0x62>
        mem = 1;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	61bb      	str	r3, [r7, #24]
 800a8e8:	e014      	b.n	800a914 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d110      	bne.n	800a914 <osMessageQueueNew+0x8c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10c      	bne.n	800a914 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d108      	bne.n	800a914 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <osMessageQueueNew+0x8c>
          mem = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	e001      	b.n	800a914 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d10b      	bne.n	800a932 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691a      	ldr	r2, [r3, #16]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	2100      	movs	r1, #0
 800a924:	9100      	str	r1, [sp, #0]
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fa2f 	bl	800ad8c <xQueueGenericCreateStatic>
 800a92e:	61f8      	str	r0, [r7, #28]
 800a930:	e008      	b.n	800a944 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d105      	bne.n	800a944 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a938:	2200      	movs	r2, #0
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fa9d 	bl	800ae7c <xQueueGenericCreate>
 800a942:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00c      	beq.n	800a964 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	e001      	b.n	800a95c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a95c:	6979      	ldr	r1, [r7, #20]
 800a95e:	69f8      	ldr	r0, [r7, #28]
 800a960:	f000 fef4 	bl	800b74c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a964:	69fb      	ldr	r3, [r7, #28]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	4613      	mov	r3, r2
 800a97e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a984:	2300      	movs	r3, #0
 800a986:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a988:	f3ef 8305 	mrs	r3, IPSR
 800a98c:	617b      	str	r3, [r7, #20]
  return(result);
 800a98e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a990:	2b00      	cmp	r3, #0
 800a992:	d028      	beq.n	800a9e6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <osMessageQueuePut+0x36>
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <osMessageQueuePut+0x36>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a9a6:	f06f 0303 	mvn.w	r3, #3
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	e038      	b.n	800aa20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a9b2:	f107 0210 	add.w	r2, r7, #16
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	69b8      	ldr	r0, [r7, #24]
 800a9bc:	f000 fbba 	bl	800b134 <xQueueGenericSendFromISR>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d003      	beq.n	800a9ce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a9c6:	f06f 0302 	mvn.w	r3, #2
 800a9ca:	61fb      	str	r3, [r7, #28]
 800a9cc:	e028      	b.n	800aa20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d025      	beq.n	800aa20 <osMessageQueuePut+0xb0>
 800a9d4:	4b15      	ldr	r3, [pc, #84]	; (800aa2c <osMessageQueuePut+0xbc>)
 800a9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	e01c      	b.n	800aa20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <osMessageQueuePut+0x82>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a9f2:	f06f 0303 	mvn.w	r3, #3
 800a9f6:	61fb      	str	r3, [r7, #28]
 800a9f8:	e012      	b.n	800aa20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	69b8      	ldr	r0, [r7, #24]
 800aa02:	f000 fa99 	bl	800af38 <xQueueGenericSend>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d009      	beq.n	800aa20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800aa12:	f06f 0301 	mvn.w	r3, #1
 800aa16:	61fb      	str	r3, [r7, #28]
 800aa18:	e002      	b.n	800aa20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800aa1a:	f06f 0302 	mvn.w	r3, #2
 800aa1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa20:	69fb      	ldr	r3, [r7, #28]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	e000ed04 	.word	0xe000ed04

0800aa30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa46:	f3ef 8305 	mrs	r3, IPSR
 800aa4a:	617b      	str	r3, [r7, #20]
  return(result);
 800aa4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d028      	beq.n	800aaa4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <osMessageQueueGet+0x34>
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <osMessageQueueGet+0x34>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aa64:	f06f 0303 	mvn.w	r3, #3
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	e037      	b.n	800aadc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa70:	f107 0310 	add.w	r3, r7, #16
 800aa74:	461a      	mov	r2, r3
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	69b8      	ldr	r0, [r7, #24]
 800aa7a:	f000 fcd7 	bl	800b42c <xQueueReceiveFromISR>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d003      	beq.n	800aa8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aa84:	f06f 0302 	mvn.w	r3, #2
 800aa88:	61fb      	str	r3, [r7, #28]
 800aa8a:	e027      	b.n	800aadc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d024      	beq.n	800aadc <osMessageQueueGet+0xac>
 800aa92:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <osMessageQueueGet+0xb8>)
 800aa94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	e01b      	b.n	800aadc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <osMessageQueueGet+0x80>
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d103      	bne.n	800aab8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aab0:	f06f 0303 	mvn.w	r3, #3
 800aab4:	61fb      	str	r3, [r7, #28]
 800aab6:	e011      	b.n	800aadc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	69b8      	ldr	r0, [r7, #24]
 800aabe:	f000 fbd5 	bl	800b26c <xQueueReceive>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d009      	beq.n	800aadc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aace:	f06f 0301 	mvn.w	r3, #1
 800aad2:	61fb      	str	r3, [r7, #28]
 800aad4:	e002      	b.n	800aadc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aad6:	f06f 0302 	mvn.w	r3, #2
 800aada:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aadc:	69fb      	ldr	r3, [r7, #28]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3720      	adds	r7, #32
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	e000ed04 	.word	0xe000ed04

0800aaec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4a07      	ldr	r2, [pc, #28]	; (800ab18 <vApplicationGetIdleTaskMemory+0x2c>)
 800aafc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	4a06      	ldr	r2, [pc, #24]	; (800ab1c <vApplicationGetIdleTaskMemory+0x30>)
 800ab02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2280      	movs	r2, #128	; 0x80
 800ab08:	601a      	str	r2, [r3, #0]
}
 800ab0a:	bf00      	nop
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	200009b4 	.word	0x200009b4
 800ab1c:	20000a5c 	.word	0x20000a5c

0800ab20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4a07      	ldr	r2, [pc, #28]	; (800ab4c <vApplicationGetTimerTaskMemory+0x2c>)
 800ab30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	4a06      	ldr	r2, [pc, #24]	; (800ab50 <vApplicationGetTimerTaskMemory+0x30>)
 800ab36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab3e:	601a      	str	r2, [r3, #0]
}
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	20000c5c 	.word	0x20000c5c
 800ab50:	20000d04 	.word	0x20000d04

0800ab54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f103 0208 	add.w	r2, r3, #8
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f103 0208 	add.w	r2, r3, #8
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f103 0208 	add.w	r2, r3, #8
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abae:	b480      	push	{r7}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	601a      	str	r2, [r3, #0]
}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abf6:	b480      	push	{r7}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0c:	d103      	bne.n	800ac16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	e00c      	b.n	800ac30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	e002      	b.n	800ac24 <vListInsert+0x2e>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d2f6      	bcs.n	800ac1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	601a      	str	r2, [r3, #0]
}
 800ac5c:	bf00      	nop
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6892      	ldr	r2, [r2, #8]
 800ac7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	6852      	ldr	r2, [r2, #4]
 800ac88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d103      	bne.n	800ac9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	1e5a      	subs	r2, r3, #1
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ace6:	f002 f945 	bl	800cf74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800acf6:	fb01 f303 	mul.w	r3, r1, r3
 800acfa:	441a      	add	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad16:	3b01      	subs	r3, #1
 800ad18:	68f9      	ldr	r1, [r7, #12]
 800ad1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad1c:	fb01 f303 	mul.w	r3, r1, r3
 800ad20:	441a      	add	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	22ff      	movs	r2, #255	; 0xff
 800ad2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d114      	bne.n	800ad66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d01a      	beq.n	800ad7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3310      	adds	r3, #16
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 f9f5 	bl	800c138 <xTaskRemoveFromEventList>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d012      	beq.n	800ad7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad54:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <xQueueGenericReset+0xcc>)
 800ad56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	e009      	b.n	800ad7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3310      	adds	r3, #16
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff fef2 	bl	800ab54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3324      	adds	r3, #36	; 0x24
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff feed 	bl	800ab54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad7a:	f002 f92b 	bl	800cfd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad7e:	2301      	movs	r3, #1
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08e      	sub	sp, #56	; 0x38
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <xQueueGenericCreateStatic+0x52>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <xQueueGenericCreateStatic+0x56>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <xQueueGenericCreateStatic+0x58>
 800ade2:	2300      	movs	r3, #0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	623b      	str	r3, [r7, #32]
}
 800adfa:	bf00      	nop
 800adfc:	e7fe      	b.n	800adfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <xQueueGenericCreateStatic+0x7e>
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <xQueueGenericCreateStatic+0x82>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueGenericCreateStatic+0x84>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	61fb      	str	r3, [r7, #28]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae2a:	2350      	movs	r3, #80	; 0x50
 800ae2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b50      	cmp	r3, #80	; 0x50
 800ae32:	d00a      	beq.n	800ae4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	61bb      	str	r3, [r7, #24]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00d      	beq.n	800ae72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4613      	mov	r3, r2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f83f 	bl	800aef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3730      	adds	r7, #48	; 0x30
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08a      	sub	sp, #40	; 0x28
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	4613      	mov	r3, r2
 800ae88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	613b      	str	r3, [r7, #16]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	fb02 f303 	mul.w	r3, r2, r3
 800aeae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	3350      	adds	r3, #80	; 0x50
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 f97f 	bl	800d1b8 <pvPortMalloc>
 800aeba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d011      	beq.n	800aee6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	3350      	adds	r3, #80	; 0x50
 800aeca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aed4:	79fa      	ldrb	r2, [r7, #7]
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	4613      	mov	r3, r2
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f805 	bl	800aef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aee6:	69bb      	ldr	r3, [r7, #24]
	}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d103      	bne.n	800af0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	e002      	b.n	800af12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af1e:	2101      	movs	r1, #1
 800af20:	69b8      	ldr	r0, [r7, #24]
 800af22:	f7ff fecb 	bl	800acbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	78fa      	ldrb	r2, [r7, #3]
 800af2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af2e:	bf00      	nop
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af46:	2300      	movs	r3, #0
 800af48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10a      	bne.n	800af6a <xQueueGenericSend+0x32>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d103      	bne.n	800af78 <xQueueGenericSend+0x40>
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <xQueueGenericSend+0x44>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <xQueueGenericSend+0x46>
 800af7c:	2300      	movs	r3, #0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10a      	bne.n	800af98 <xQueueGenericSend+0x60>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d103      	bne.n	800afa6 <xQueueGenericSend+0x6e>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d101      	bne.n	800afaa <xQueueGenericSend+0x72>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e000      	b.n	800afac <xQueueGenericSend+0x74>
 800afaa:	2300      	movs	r3, #0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	623b      	str	r3, [r7, #32]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc6:	f001 fa79 	bl	800c4bc <xTaskGetSchedulerState>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <xQueueGenericSend+0x9e>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <xQueueGenericSend+0xa2>
 800afd6:	2301      	movs	r3, #1
 800afd8:	e000      	b.n	800afdc <xQueueGenericSend+0xa4>
 800afda:	2300      	movs	r3, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <xQueueGenericSend+0xbe>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	61fb      	str	r3, [r7, #28]
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aff6:	f001 ffbd 	bl	800cf74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	429a      	cmp	r2, r3
 800b004:	d302      	bcc.n	800b00c <xQueueGenericSend+0xd4>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d129      	bne.n	800b060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b012:	f000 fa8b 	bl	800b52c <prvCopyDataToQueue>
 800b016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d010      	beq.n	800b042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	3324      	adds	r3, #36	; 0x24
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f887 	bl	800c138 <xTaskRemoveFromEventList>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d013      	beq.n	800b058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b030:	4b3f      	ldr	r3, [pc, #252]	; (800b130 <xQueueGenericSend+0x1f8>)
 800b032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	e00a      	b.n	800b058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b048:	4b39      	ldr	r3, [pc, #228]	; (800b130 <xQueueGenericSend+0x1f8>)
 800b04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b058:	f001 ffbc 	bl	800cfd4 <vPortExitCritical>
				return pdPASS;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e063      	b.n	800b128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d103      	bne.n	800b06e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b066:	f001 ffb5 	bl	800cfd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e05c      	b.n	800b128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b074:	f107 0314 	add.w	r3, r7, #20
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 f8c1 	bl	800c200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b07e:	2301      	movs	r3, #1
 800b080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b082:	f001 ffa7 	bl	800cfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b086:	f000 fe1b 	bl	800bcc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b08a:	f001 ff73 	bl	800cf74 <vPortEnterCritical>
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b094:	b25b      	sxtb	r3, r3
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	d103      	bne.n	800b0a4 <xQueueGenericSend+0x16c>
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0aa:	b25b      	sxtb	r3, r3
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d103      	bne.n	800b0ba <xQueueGenericSend+0x182>
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0ba:	f001 ff8b 	bl	800cfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0be:	1d3a      	adds	r2, r7, #4
 800b0c0:	f107 0314 	add.w	r3, r7, #20
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 f8b0 	bl	800c22c <xTaskCheckForTimeOut>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d124      	bne.n	800b11c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0d4:	f000 fb22 	bl	800b71c <prvIsQueueFull>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d018      	beq.n	800b110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	3310      	adds	r3, #16
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 ffd6 	bl	800c098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ee:	f000 faad 	bl	800b64c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0f2:	f000 fdf3 	bl	800bcdc <xTaskResumeAll>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f47f af7c 	bne.w	800aff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <xQueueGenericSend+0x1f8>)
 800b100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	e772      	b.n	800aff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b112:	f000 fa9b 	bl	800b64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b116:	f000 fde1 	bl	800bcdc <xTaskResumeAll>
 800b11a:	e76c      	b.n	800aff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b11e:	f000 fa95 	bl	800b64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b122:	f000 fddb 	bl	800bcdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3738      	adds	r7, #56	; 0x38
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b090      	sub	sp, #64	; 0x40
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10a      	bne.n	800b162 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d103      	bne.n	800b170 <xQueueGenericSendFromISR+0x3c>
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <xQueueGenericSendFromISR+0x40>
 800b170:	2301      	movs	r3, #1
 800b172:	e000      	b.n	800b176 <xQueueGenericSendFromISR+0x42>
 800b174:	2300      	movs	r3, #0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b02      	cmp	r3, #2
 800b194:	d103      	bne.n	800b19e <xQueueGenericSendFromISR+0x6a>
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d101      	bne.n	800b1a2 <xQueueGenericSendFromISR+0x6e>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <xQueueGenericSendFromISR+0x70>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10a      	bne.n	800b1be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	623b      	str	r3, [r7, #32]
}
 800b1ba:	bf00      	nop
 800b1bc:	e7fe      	b.n	800b1bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1be:	f001 ffbb 	bl	800d138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1c2:	f3ef 8211 	mrs	r2, BASEPRI
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	61fa      	str	r2, [r7, #28]
 800b1d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d302      	bcc.n	800b1f0 <xQueueGenericSendFromISR+0xbc>
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d12f      	bne.n	800b250 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b206:	f000 f991 	bl	800b52c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b20a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b212:	d112      	bne.n	800b23a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d016      	beq.n	800b24a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	3324      	adds	r3, #36	; 0x24
 800b220:	4618      	mov	r0, r3
 800b222:	f000 ff89 	bl	800c138 <xTaskRemoveFromEventList>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00e      	beq.n	800b24a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	e007      	b.n	800b24a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b23a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b23e:	3301      	adds	r3, #1
 800b240:	b2db      	uxtb	r3, r3
 800b242:	b25a      	sxtb	r2, r3
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b24a:	2301      	movs	r3, #1
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b24e:	e001      	b.n	800b254 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b256:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b25e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b262:	4618      	mov	r0, r3
 800b264:	3740      	adds	r7, #64	; 0x40
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08c      	sub	sp, #48	; 0x30
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b278:	2300      	movs	r3, #0
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10a      	bne.n	800b29c <xQueueReceive+0x30>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	623b      	str	r3, [r7, #32]
}
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d103      	bne.n	800b2aa <xQueueReceive+0x3e>
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <xQueueReceive+0x42>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <xQueueReceive+0x44>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <xQueueReceive+0x5e>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	61fb      	str	r3, [r7, #28]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2ca:	f001 f8f7 	bl	800c4bc <xTaskGetSchedulerState>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <xQueueReceive+0x6e>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <xQueueReceive+0x72>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <xQueueReceive+0x74>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <xQueueReceive+0x8e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	61bb      	str	r3, [r7, #24]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2fa:	f001 fe3b 	bl	800cf74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	2b00      	cmp	r3, #0
 800b308:	d01f      	beq.n	800b34a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30e:	f000 f977 	bl	800b600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	1e5a      	subs	r2, r3, #1
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00f      	beq.n	800b342 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	3310      	adds	r3, #16
 800b326:	4618      	mov	r0, r3
 800b328:	f000 ff06 	bl	800c138 <xTaskRemoveFromEventList>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d007      	beq.n	800b342 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b332:	4b3d      	ldr	r3, [pc, #244]	; (800b428 <xQueueReceive+0x1bc>)
 800b334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b342:	f001 fe47 	bl	800cfd4 <vPortExitCritical>
				return pdPASS;
 800b346:	2301      	movs	r3, #1
 800b348:	e069      	b.n	800b41e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d103      	bne.n	800b358 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b350:	f001 fe40 	bl	800cfd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b354:	2300      	movs	r3, #0
 800b356:	e062      	b.n	800b41e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d106      	bne.n	800b36c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b35e:	f107 0310 	add.w	r3, r7, #16
 800b362:	4618      	mov	r0, r3
 800b364:	f000 ff4c 	bl	800c200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b368:	2301      	movs	r3, #1
 800b36a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b36c:	f001 fe32 	bl	800cfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b370:	f000 fca6 	bl	800bcc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b374:	f001 fdfe 	bl	800cf74 <vPortEnterCritical>
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b37e:	b25b      	sxtb	r3, r3
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b384:	d103      	bne.n	800b38e <xQueueReceive+0x122>
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b394:	b25b      	sxtb	r3, r3
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d103      	bne.n	800b3a4 <xQueueReceive+0x138>
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a4:	f001 fe16 	bl	800cfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3a8:	1d3a      	adds	r2, r7, #4
 800b3aa:	f107 0310 	add.w	r3, r7, #16
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 ff3b 	bl	800c22c <xTaskCheckForTimeOut>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d123      	bne.n	800b404 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3be:	f000 f997 	bl	800b6f0 <prvIsQueueEmpty>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d017      	beq.n	800b3f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	3324      	adds	r3, #36	; 0x24
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fe61 	bl	800c098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d8:	f000 f938 	bl	800b64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3dc:	f000 fc7e 	bl	800bcdc <xTaskResumeAll>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d189      	bne.n	800b2fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b3e6:	4b10      	ldr	r3, [pc, #64]	; (800b428 <xQueueReceive+0x1bc>)
 800b3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	e780      	b.n	800b2fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3fa:	f000 f927 	bl	800b64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3fe:	f000 fc6d 	bl	800bcdc <xTaskResumeAll>
 800b402:	e77a      	b.n	800b2fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b406:	f000 f921 	bl	800b64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b40a:	f000 fc67 	bl	800bcdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b410:	f000 f96e 	bl	800b6f0 <prvIsQueueEmpty>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	f43f af6f 	beq.w	800b2fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b41c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3730      	adds	r7, #48	; 0x30
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08e      	sub	sp, #56	; 0x38
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	623b      	str	r3, [r7, #32]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <xQueueReceiveFromISR+0x3a>
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <xQueueReceiveFromISR+0x3e>
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <xQueueReceiveFromISR+0x40>
 800b46a:	2300      	movs	r3, #0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	61fb      	str	r3, [r7, #28]
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b486:	f001 fe57 	bl	800d138 <vPortValidateInterruptPriority>
	__asm volatile
 800b48a:	f3ef 8211 	mrs	r2, BASEPRI
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	61ba      	str	r2, [r7, #24]
 800b4a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b4a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02f      	beq.n	800b512 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4bc:	68b9      	ldr	r1, [r7, #8]
 800b4be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4c0:	f000 f89e 	bl	800b600 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	1e5a      	subs	r2, r3, #1
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d112      	bne.n	800b4fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d016      	beq.n	800b50c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	3310      	adds	r3, #16
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fe28 	bl	800c138 <xTaskRemoveFromEventList>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00e      	beq.n	800b50c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	e007      	b.n	800b50c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b500:	3301      	adds	r3, #1
 800b502:	b2db      	uxtb	r3, r3
 800b504:	b25a      	sxtb	r2, r3
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b50c:	2301      	movs	r3, #1
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34
 800b510:	e001      	b.n	800b516 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b512:	2300      	movs	r3, #0
 800b514:	637b      	str	r3, [r7, #52]	; 0x34
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f383 8811 	msr	BASEPRI, r3
}
 800b520:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b524:	4618      	mov	r0, r3
 800b526:	3738      	adds	r7, #56	; 0x38
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10d      	bne.n	800b566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d14d      	bne.n	800b5ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 ffce 	bl	800c4f8 <xTaskPriorityDisinherit>
 800b55c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	609a      	str	r2, [r3, #8]
 800b564:	e043      	b.n	800b5ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d119      	bne.n	800b5a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6858      	ldr	r0, [r3, #4]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b574:	461a      	mov	r2, r3
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	f003 f966 	bl	800e848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b584:	441a      	add	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	d32b      	bcc.n	800b5ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	605a      	str	r2, [r3, #4]
 800b59e:	e026      	b.n	800b5ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68d8      	ldr	r0, [r3, #12]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	68b9      	ldr	r1, [r7, #8]
 800b5ac:	f003 f94c 	bl	800e848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68da      	ldr	r2, [r3, #12]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b8:	425b      	negs	r3, r3
 800b5ba:	441a      	add	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	68da      	ldr	r2, [r3, #12]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d207      	bcs.n	800b5dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	689a      	ldr	r2, [r3, #8]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d4:	425b      	negs	r3, r3
 800b5d6:	441a      	add	r2, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d105      	bne.n	800b5ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b5f6:	697b      	ldr	r3, [r7, #20]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d018      	beq.n	800b644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61a:	441a      	add	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d303      	bcc.n	800b634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68d9      	ldr	r1, [r3, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63c:	461a      	mov	r2, r3
 800b63e:	6838      	ldr	r0, [r7, #0]
 800b640:	f003 f902 	bl	800e848 <memcpy>
	}
}
 800b644:	bf00      	nop
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b654:	f001 fc8e 	bl	800cf74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b65e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b660:	e011      	b.n	800b686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b666:	2b00      	cmp	r3, #0
 800b668:	d012      	beq.n	800b690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3324      	adds	r3, #36	; 0x24
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fd62 	bl	800c138 <xTaskRemoveFromEventList>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b67a:	f000 fe39 	bl	800c2f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	3b01      	subs	r3, #1
 800b682:	b2db      	uxtb	r3, r3
 800b684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	dce9      	bgt.n	800b662 <prvUnlockQueue+0x16>
 800b68e:	e000      	b.n	800b692 <prvUnlockQueue+0x46>
					break;
 800b690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	22ff      	movs	r2, #255	; 0xff
 800b696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b69a:	f001 fc9b 	bl	800cfd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b69e:	f001 fc69 	bl	800cf74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6aa:	e011      	b.n	800b6d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d012      	beq.n	800b6da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3310      	adds	r3, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 fd3d 	bl	800c138 <xTaskRemoveFromEventList>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6c4:	f000 fe14 	bl	800c2f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dce9      	bgt.n	800b6ac <prvUnlockQueue+0x60>
 800b6d8:	e000      	b.n	800b6dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	22ff      	movs	r2, #255	; 0xff
 800b6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6e4:	f001 fc76 	bl	800cfd4 <vPortExitCritical>
}
 800b6e8:	bf00      	nop
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6f8:	f001 fc3c 	bl	800cf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b704:	2301      	movs	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e001      	b.n	800b70e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b70e:	f001 fc61 	bl	800cfd4 <vPortExitCritical>

	return xReturn;
 800b712:	68fb      	ldr	r3, [r7, #12]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b724:	f001 fc26 	bl	800cf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b730:	429a      	cmp	r2, r3
 800b732:	d102      	bne.n	800b73a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b734:	2301      	movs	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e001      	b.n	800b73e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b73e:	f001 fc49 	bl	800cfd4 <vPortExitCritical>

	return xReturn;
 800b742:	68fb      	ldr	r3, [r7, #12]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b756:	2300      	movs	r3, #0
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	e014      	b.n	800b786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b75c:	4a0f      	ldr	r2, [pc, #60]	; (800b79c <vQueueAddToRegistry+0x50>)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10b      	bne.n	800b780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b768:	490c      	ldr	r1, [pc, #48]	; (800b79c <vQueueAddToRegistry+0x50>)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b772:	4a0a      	ldr	r2, [pc, #40]	; (800b79c <vQueueAddToRegistry+0x50>)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	4413      	add	r3, r2
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b77e:	e006      	b.n	800b78e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3301      	adds	r3, #1
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b07      	cmp	r3, #7
 800b78a:	d9e7      	bls.n	800b75c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	20001104 	.word	0x20001104

0800b7a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7b0:	f001 fbe0 	bl	800cf74 <vPortEnterCritical>
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7ba:	b25b      	sxtb	r3, r3
 800b7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c0:	d103      	bne.n	800b7ca <vQueueWaitForMessageRestricted+0x2a>
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7d0:	b25b      	sxtb	r3, r3
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d103      	bne.n	800b7e0 <vQueueWaitForMessageRestricted+0x40>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7e0:	f001 fbf8 	bl	800cfd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	3324      	adds	r3, #36	; 0x24
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fc73 	bl	800c0e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7fa:	6978      	ldr	r0, [r7, #20]
 800b7fc:	f7ff ff26 	bl	800b64c <prvUnlockQueue>
	}
 800b800:	bf00      	nop
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08e      	sub	sp, #56	; 0x38
 800b80c:	af04      	add	r7, sp, #16
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	623b      	str	r3, [r7, #32]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10a      	bne.n	800b84e <xTaskCreateStatic+0x46>
	__asm volatile
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	61fb      	str	r3, [r7, #28]
}
 800b84a:	bf00      	nop
 800b84c:	e7fe      	b.n	800b84c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b84e:	23a8      	movs	r3, #168	; 0xa8
 800b850:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2ba8      	cmp	r3, #168	; 0xa8
 800b856:	d00a      	beq.n	800b86e <xTaskCreateStatic+0x66>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	61bb      	str	r3, [r7, #24]
}
 800b86a:	bf00      	nop
 800b86c:	e7fe      	b.n	800b86c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b86e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	2b00      	cmp	r3, #0
 800b874:	d01e      	beq.n	800b8b4 <xTaskCreateStatic+0xac>
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d01b      	beq.n	800b8b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b884:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	2202      	movs	r2, #2
 800b88a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b88e:	2300      	movs	r3, #0
 800b890:	9303      	str	r3, [sp, #12]
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	9302      	str	r3, [sp, #8]
 800b896:	f107 0314 	add.w	r3, r7, #20
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	68b9      	ldr	r1, [r7, #8]
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f000 f850 	bl	800b94c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8ae:	f000 f8f3 	bl	800ba98 <prvAddNewTaskToReadyList>
 800b8b2:	e001      	b.n	800b8b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8b8:	697b      	ldr	r3, [r7, #20]
	}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3728      	adds	r7, #40	; 0x28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b08c      	sub	sp, #48	; 0x30
 800b8c6:	af04      	add	r7, sp, #16
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	603b      	str	r3, [r7, #0]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8d2:	88fb      	ldrh	r3, [r7, #6]
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f001 fc6e 	bl	800d1b8 <pvPortMalloc>
 800b8dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00e      	beq.n	800b902 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8e4:	20a8      	movs	r0, #168	; 0xa8
 800b8e6:	f001 fc67 	bl	800d1b8 <pvPortMalloc>
 800b8ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	631a      	str	r2, [r3, #48]	; 0x30
 800b8f8:	e005      	b.n	800b906 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8fa:	6978      	ldr	r0, [r7, #20]
 800b8fc:	f001 fd28 	bl	800d350 <vPortFree>
 800b900:	e001      	b.n	800b906 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d017      	beq.n	800b93c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b914:	88fa      	ldrh	r2, [r7, #6]
 800b916:	2300      	movs	r3, #0
 800b918:	9303      	str	r3, [sp, #12]
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	9302      	str	r3, [sp, #8]
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 f80e 	bl	800b94c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b930:	69f8      	ldr	r0, [r7, #28]
 800b932:	f000 f8b1 	bl	800ba98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b936:	2301      	movs	r3, #1
 800b938:	61bb      	str	r3, [r7, #24]
 800b93a:	e002      	b.n	800b942 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b942:	69bb      	ldr	r3, [r7, #24]
	}
 800b944:	4618      	mov	r0, r3
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	461a      	mov	r2, r3
 800b964:	21a5      	movs	r1, #165	; 0xa5
 800b966:	f002 fe8a 	bl	800e67e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b974:	3b01      	subs	r3, #1
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	f023 0307 	bic.w	r3, r3, #7
 800b982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	f003 0307 	and.w	r3, r3, #7
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00a      	beq.n	800b9a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	617b      	str	r3, [r7, #20]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d01f      	beq.n	800b9ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	e012      	b.n	800b9d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	7819      	ldrb	r1, [r3, #0]
 800b9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	4413      	add	r3, r2
 800b9be:	3334      	adds	r3, #52	; 0x34
 800b9c0:	460a      	mov	r2, r1
 800b9c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d006      	beq.n	800b9de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	2b0f      	cmp	r3, #15
 800b9da:	d9e9      	bls.n	800b9b0 <prvInitialiseNewTask+0x64>
 800b9dc:	e000      	b.n	800b9e0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b9de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9e8:	e003      	b.n	800b9f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	2b37      	cmp	r3, #55	; 0x37
 800b9f6:	d901      	bls.n	800b9fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9f8:	2337      	movs	r3, #55	; 0x37
 800b9fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	3304      	adds	r3, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff f8be 	bl	800ab94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	3318      	adds	r3, #24
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff f8b9 	bl	800ab94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	3354      	adds	r3, #84	; 0x54
 800ba4c:	224c      	movs	r2, #76	; 0x4c
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f002 fe14 	bl	800e67e <memset>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	4a0c      	ldr	r2, [pc, #48]	; (800ba8c <prvInitialiseNewTask+0x140>)
 800ba5a:	659a      	str	r2, [r3, #88]	; 0x58
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	4a0c      	ldr	r2, [pc, #48]	; (800ba90 <prvInitialiseNewTask+0x144>)
 800ba60:	65da      	str	r2, [r3, #92]	; 0x5c
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	4a0b      	ldr	r2, [pc, #44]	; (800ba94 <prvInitialiseNewTask+0x148>)
 800ba66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	68f9      	ldr	r1, [r7, #12]
 800ba6c:	69b8      	ldr	r0, [r7, #24]
 800ba6e:	f001 f953 	bl	800cd18 <pxPortInitialiseStack>
 800ba72:	4602      	mov	r2, r0
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba84:	bf00      	nop
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20006ef8 	.word	0x20006ef8
 800ba90:	20006f60 	.word	0x20006f60
 800ba94:	20006fc8 	.word	0x20006fc8

0800ba98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800baa0:	f001 fa68 	bl	800cf74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800baa4:	4b2d      	ldr	r3, [pc, #180]	; (800bb5c <prvAddNewTaskToReadyList+0xc4>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3301      	adds	r3, #1
 800baaa:	4a2c      	ldr	r2, [pc, #176]	; (800bb5c <prvAddNewTaskToReadyList+0xc4>)
 800baac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baae:	4b2c      	ldr	r3, [pc, #176]	; (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bab6:	4a2a      	ldr	r2, [pc, #168]	; (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800babc:	4b27      	ldr	r3, [pc, #156]	; (800bb5c <prvAddNewTaskToReadyList+0xc4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d110      	bne.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bac4:	f000 fc38 	bl	800c338 <prvInitialiseTaskLists>
 800bac8:	e00d      	b.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baca:	4b26      	ldr	r3, [pc, #152]	; (800bb64 <prvAddNewTaskToReadyList+0xcc>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d109      	bne.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bad2:	4b23      	ldr	r3, [pc, #140]	; (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	429a      	cmp	r2, r3
 800bade:	d802      	bhi.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bae0:	4a1f      	ldr	r2, [pc, #124]	; (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bae6:	4b20      	ldr	r3, [pc, #128]	; (800bb68 <prvAddNewTaskToReadyList+0xd0>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3301      	adds	r3, #1
 800baec:	4a1e      	ldr	r2, [pc, #120]	; (800bb68 <prvAddNewTaskToReadyList+0xd0>)
 800baee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800baf0:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <prvAddNewTaskToReadyList+0xd0>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	4b1b      	ldr	r3, [pc, #108]	; (800bb6c <prvAddNewTaskToReadyList+0xd4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d903      	bls.n	800bb0c <prvAddNewTaskToReadyList+0x74>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb08:	4a18      	ldr	r2, [pc, #96]	; (800bb6c <prvAddNewTaskToReadyList+0xd4>)
 800bb0a:	6013      	str	r3, [r2, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb10:	4613      	mov	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4a15      	ldr	r2, [pc, #84]	; (800bb70 <prvAddNewTaskToReadyList+0xd8>)
 800bb1a:	441a      	add	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3304      	adds	r3, #4
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7ff f843 	bl	800abae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb28:	f001 fa54 	bl	800cfd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	; (800bb64 <prvAddNewTaskToReadyList+0xcc>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00e      	beq.n	800bb52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d207      	bcs.n	800bb52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb42:	4b0c      	ldr	r3, [pc, #48]	; (800bb74 <prvAddNewTaskToReadyList+0xdc>)
 800bb44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20001618 	.word	0x20001618
 800bb60:	20001144 	.word	0x20001144
 800bb64:	20001624 	.word	0x20001624
 800bb68:	20001634 	.word	0x20001634
 800bb6c:	20001620 	.word	0x20001620
 800bb70:	20001148 	.word	0x20001148
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d017      	beq.n	800bbba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb8a:	4b13      	ldr	r3, [pc, #76]	; (800bbd8 <vTaskDelay+0x60>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <vTaskDelay+0x30>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	60bb      	str	r3, [r7, #8]
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bba8:	f000 f88a 	bl	800bcc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbac:	2100      	movs	r1, #0
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fd10 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbb4:	f000 f892 	bl	800bcdc <xTaskResumeAll>
 800bbb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d107      	bne.n	800bbd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <vTaskDelay+0x64>)
 800bbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	20001640 	.word	0x20001640
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08a      	sub	sp, #40	; 0x28
 800bbe4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbea:	2300      	movs	r3, #0
 800bbec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbee:	463a      	mov	r2, r7
 800bbf0:	1d39      	adds	r1, r7, #4
 800bbf2:	f107 0308 	add.w	r3, r7, #8
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe ff78 	bl	800aaec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	9202      	str	r2, [sp, #8]
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	2300      	movs	r3, #0
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	4924      	ldr	r1, [pc, #144]	; (800bca0 <vTaskStartScheduler+0xc0>)
 800bc10:	4824      	ldr	r0, [pc, #144]	; (800bca4 <vTaskStartScheduler+0xc4>)
 800bc12:	f7ff fdf9 	bl	800b808 <xTaskCreateStatic>
 800bc16:	4603      	mov	r3, r0
 800bc18:	4a23      	ldr	r2, [pc, #140]	; (800bca8 <vTaskStartScheduler+0xc8>)
 800bc1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc1c:	4b22      	ldr	r3, [pc, #136]	; (800bca8 <vTaskStartScheduler+0xc8>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc24:	2301      	movs	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e001      	b.n	800bc2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d102      	bne.n	800bc3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc34:	f000 fd22 	bl	800c67c <xTimerCreateTimerTask>
 800bc38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d11b      	bne.n	800bc78 <vTaskStartScheduler+0x98>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc54:	4b15      	ldr	r3, [pc, #84]	; (800bcac <vTaskStartScheduler+0xcc>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3354      	adds	r3, #84	; 0x54
 800bc5a:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <vTaskStartScheduler+0xd0>)
 800bc5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc5e:	4b15      	ldr	r3, [pc, #84]	; (800bcb4 <vTaskStartScheduler+0xd4>)
 800bc60:	f04f 32ff 	mov.w	r2, #4294967295
 800bc64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc66:	4b14      	ldr	r3, [pc, #80]	; (800bcb8 <vTaskStartScheduler+0xd8>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc6c:	4b13      	ldr	r3, [pc, #76]	; (800bcbc <vTaskStartScheduler+0xdc>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc72:	f001 f8dd 	bl	800ce30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc76:	e00e      	b.n	800bc96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d10a      	bne.n	800bc96 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60fb      	str	r3, [r7, #12]
}
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <vTaskStartScheduler+0xb4>
}
 800bc96:	bf00      	nop
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	08012864 	.word	0x08012864
 800bca4:	0800c309 	.word	0x0800c309
 800bca8:	2000163c 	.word	0x2000163c
 800bcac:	20001144 	.word	0x20001144
 800bcb0:	2000006c 	.word	0x2000006c
 800bcb4:	20001638 	.word	0x20001638
 800bcb8:	20001624 	.word	0x20001624
 800bcbc:	2000161c 	.word	0x2000161c

0800bcc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bcc4:	4b04      	ldr	r3, [pc, #16]	; (800bcd8 <vTaskSuspendAll+0x18>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	4a03      	ldr	r2, [pc, #12]	; (800bcd8 <vTaskSuspendAll+0x18>)
 800bccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcce:	bf00      	nop
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	20001640 	.word	0x20001640

0800bcdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bce6:	2300      	movs	r3, #0
 800bce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcea:	4b42      	ldr	r3, [pc, #264]	; (800bdf4 <xTaskResumeAll+0x118>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <xTaskResumeAll+0x2c>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	603b      	str	r3, [r7, #0]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd08:	f001 f934 	bl	800cf74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd0c:	4b39      	ldr	r3, [pc, #228]	; (800bdf4 <xTaskResumeAll+0x118>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	4a38      	ldr	r2, [pc, #224]	; (800bdf4 <xTaskResumeAll+0x118>)
 800bd14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd16:	4b37      	ldr	r3, [pc, #220]	; (800bdf4 <xTaskResumeAll+0x118>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d162      	bne.n	800bde4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd1e:	4b36      	ldr	r3, [pc, #216]	; (800bdf8 <xTaskResumeAll+0x11c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d05e      	beq.n	800bde4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd26:	e02f      	b.n	800bd88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd28:	4b34      	ldr	r3, [pc, #208]	; (800bdfc <xTaskResumeAll+0x120>)
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3318      	adds	r3, #24
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe ff97 	bl	800ac68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe ff92 	bl	800ac68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd48:	4b2d      	ldr	r3, [pc, #180]	; (800be00 <xTaskResumeAll+0x124>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d903      	bls.n	800bd58 <xTaskResumeAll+0x7c>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	4a2a      	ldr	r2, [pc, #168]	; (800be00 <xTaskResumeAll+0x124>)
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4a27      	ldr	r2, [pc, #156]	; (800be04 <xTaskResumeAll+0x128>)
 800bd66:	441a      	add	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	f7fe ff1d 	bl	800abae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd78:	4b23      	ldr	r3, [pc, #140]	; (800be08 <xTaskResumeAll+0x12c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d302      	bcc.n	800bd88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd82:	4b22      	ldr	r3, [pc, #136]	; (800be0c <xTaskResumeAll+0x130>)
 800bd84:	2201      	movs	r2, #1
 800bd86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd88:	4b1c      	ldr	r3, [pc, #112]	; (800bdfc <xTaskResumeAll+0x120>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1cb      	bne.n	800bd28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd96:	f000 fb71 	bl	800c47c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd9a:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <xTaskResumeAll+0x134>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d010      	beq.n	800bdc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bda6:	f000 f859 	bl	800be5c <xTaskIncrementTick>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bdb0:	4b16      	ldr	r3, [pc, #88]	; (800be0c <xTaskResumeAll+0x130>)
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f1      	bne.n	800bda6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bdc2:	4b13      	ldr	r3, [pc, #76]	; (800be10 <xTaskResumeAll+0x134>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdc8:	4b10      	ldr	r3, [pc, #64]	; (800be0c <xTaskResumeAll+0x130>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d009      	beq.n	800bde4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdd4:	4b0f      	ldr	r3, [pc, #60]	; (800be14 <xTaskResumeAll+0x138>)
 800bdd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bde4:	f001 f8f6 	bl	800cfd4 <vPortExitCritical>

	return xAlreadyYielded;
 800bde8:	68bb      	ldr	r3, [r7, #8]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20001640 	.word	0x20001640
 800bdf8:	20001618 	.word	0x20001618
 800bdfc:	200015d8 	.word	0x200015d8
 800be00:	20001620 	.word	0x20001620
 800be04:	20001148 	.word	0x20001148
 800be08:	20001144 	.word	0x20001144
 800be0c:	2000162c 	.word	0x2000162c
 800be10:	20001628 	.word	0x20001628
 800be14:	e000ed04 	.word	0xe000ed04

0800be18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be1e:	4b05      	ldr	r3, [pc, #20]	; (800be34 <xTaskGetTickCount+0x1c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be24:	687b      	ldr	r3, [r7, #4]
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	2000161c 	.word	0x2000161c

0800be38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be3e:	f001 f97b 	bl	800d138 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be42:	2300      	movs	r3, #0
 800be44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be46:	4b04      	ldr	r3, [pc, #16]	; (800be58 <xTaskGetTickCountFromISR+0x20>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be4c:	683b      	ldr	r3, [r7, #0]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	2000161c 	.word	0x2000161c

0800be5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be66:	4b4f      	ldr	r3, [pc, #316]	; (800bfa4 <xTaskIncrementTick+0x148>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f040 808f 	bne.w	800bf8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be70:	4b4d      	ldr	r3, [pc, #308]	; (800bfa8 <xTaskIncrementTick+0x14c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3301      	adds	r3, #1
 800be76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be78:	4a4b      	ldr	r2, [pc, #300]	; (800bfa8 <xTaskIncrementTick+0x14c>)
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d120      	bne.n	800bec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be84:	4b49      	ldr	r3, [pc, #292]	; (800bfac <xTaskIncrementTick+0x150>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <xTaskIncrementTick+0x48>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	603b      	str	r3, [r7, #0]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <xTaskIncrementTick+0x46>
 800bea4:	4b41      	ldr	r3, [pc, #260]	; (800bfac <xTaskIncrementTick+0x150>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60fb      	str	r3, [r7, #12]
 800beaa:	4b41      	ldr	r3, [pc, #260]	; (800bfb0 <xTaskIncrementTick+0x154>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a3f      	ldr	r2, [pc, #252]	; (800bfac <xTaskIncrementTick+0x150>)
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	4a3f      	ldr	r2, [pc, #252]	; (800bfb0 <xTaskIncrementTick+0x154>)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	4b3e      	ldr	r3, [pc, #248]	; (800bfb4 <xTaskIncrementTick+0x158>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3301      	adds	r3, #1
 800bebe:	4a3d      	ldr	r2, [pc, #244]	; (800bfb4 <xTaskIncrementTick+0x158>)
 800bec0:	6013      	str	r3, [r2, #0]
 800bec2:	f000 fadb 	bl	800c47c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bec6:	4b3c      	ldr	r3, [pc, #240]	; (800bfb8 <xTaskIncrementTick+0x15c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	429a      	cmp	r2, r3
 800bece:	d349      	bcc.n	800bf64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bed0:	4b36      	ldr	r3, [pc, #216]	; (800bfac <xTaskIncrementTick+0x150>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d104      	bne.n	800bee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beda:	4b37      	ldr	r3, [pc, #220]	; (800bfb8 <xTaskIncrementTick+0x15c>)
 800bedc:	f04f 32ff 	mov.w	r2, #4294967295
 800bee0:	601a      	str	r2, [r3, #0]
					break;
 800bee2:	e03f      	b.n	800bf64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bee4:	4b31      	ldr	r3, [pc, #196]	; (800bfac <xTaskIncrementTick+0x150>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d203      	bcs.n	800bf04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800befc:	4a2e      	ldr	r2, [pc, #184]	; (800bfb8 <xTaskIncrementTick+0x15c>)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf02:	e02f      	b.n	800bf64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe fead 	bl	800ac68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d004      	beq.n	800bf20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	3318      	adds	r3, #24
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fe fea4 	bl	800ac68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf24:	4b25      	ldr	r3, [pc, #148]	; (800bfbc <xTaskIncrementTick+0x160>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d903      	bls.n	800bf34 <xTaskIncrementTick+0xd8>
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	4a22      	ldr	r2, [pc, #136]	; (800bfbc <xTaskIncrementTick+0x160>)
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4a1f      	ldr	r2, [pc, #124]	; (800bfc0 <xTaskIncrementTick+0x164>)
 800bf42:	441a      	add	r2, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	3304      	adds	r3, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7fe fe2f 	bl	800abae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf54:	4b1b      	ldr	r3, [pc, #108]	; (800bfc4 <xTaskIncrementTick+0x168>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d3b8      	bcc.n	800bed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf62:	e7b5      	b.n	800bed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf64:	4b17      	ldr	r3, [pc, #92]	; (800bfc4 <xTaskIncrementTick+0x168>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6a:	4915      	ldr	r1, [pc, #84]	; (800bfc0 <xTaskIncrementTick+0x164>)
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d901      	bls.n	800bf80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf80:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <xTaskIncrementTick+0x16c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d007      	beq.n	800bf98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	617b      	str	r3, [r7, #20]
 800bf8c:	e004      	b.n	800bf98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <xTaskIncrementTick+0x170>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	4a0d      	ldr	r2, [pc, #52]	; (800bfcc <xTaskIncrementTick+0x170>)
 800bf96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf98:	697b      	ldr	r3, [r7, #20]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20001640 	.word	0x20001640
 800bfa8:	2000161c 	.word	0x2000161c
 800bfac:	200015d0 	.word	0x200015d0
 800bfb0:	200015d4 	.word	0x200015d4
 800bfb4:	20001630 	.word	0x20001630
 800bfb8:	20001638 	.word	0x20001638
 800bfbc:	20001620 	.word	0x20001620
 800bfc0:	20001148 	.word	0x20001148
 800bfc4:	20001144 	.word	0x20001144
 800bfc8:	2000162c 	.word	0x2000162c
 800bfcc:	20001628 	.word	0x20001628

0800bfd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfd6:	4b2a      	ldr	r3, [pc, #168]	; (800c080 <vTaskSwitchContext+0xb0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfde:	4b29      	ldr	r3, [pc, #164]	; (800c084 <vTaskSwitchContext+0xb4>)
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfe4:	e046      	b.n	800c074 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bfe6:	4b27      	ldr	r3, [pc, #156]	; (800c084 <vTaskSwitchContext+0xb4>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfec:	4b26      	ldr	r3, [pc, #152]	; (800c088 <vTaskSwitchContext+0xb8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	e010      	b.n	800c016 <vTaskSwitchContext+0x46>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10a      	bne.n	800c010 <vTaskSwitchContext+0x40>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	607b      	str	r3, [r7, #4]
}
 800c00c:	bf00      	nop
 800c00e:	e7fe      	b.n	800c00e <vTaskSwitchContext+0x3e>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3b01      	subs	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	491d      	ldr	r1, [pc, #116]	; (800c08c <vTaskSwitchContext+0xbc>)
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	4613      	mov	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	440b      	add	r3, r1
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0e4      	beq.n	800bff4 <vTaskSwitchContext+0x24>
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	4613      	mov	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4a15      	ldr	r2, [pc, #84]	; (800c08c <vTaskSwitchContext+0xbc>)
 800c036:	4413      	add	r3, r2
 800c038:	60bb      	str	r3, [r7, #8]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	605a      	str	r2, [r3, #4]
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	3308      	adds	r3, #8
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d104      	bne.n	800c05a <vTaskSwitchContext+0x8a>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	605a      	str	r2, [r3, #4]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	4a0b      	ldr	r2, [pc, #44]	; (800c090 <vTaskSwitchContext+0xc0>)
 800c062:	6013      	str	r3, [r2, #0]
 800c064:	4a08      	ldr	r2, [pc, #32]	; (800c088 <vTaskSwitchContext+0xb8>)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c06a:	4b09      	ldr	r3, [pc, #36]	; (800c090 <vTaskSwitchContext+0xc0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3354      	adds	r3, #84	; 0x54
 800c070:	4a08      	ldr	r2, [pc, #32]	; (800c094 <vTaskSwitchContext+0xc4>)
 800c072:	6013      	str	r3, [r2, #0]
}
 800c074:	bf00      	nop
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	20001640 	.word	0x20001640
 800c084:	2000162c 	.word	0x2000162c
 800c088:	20001620 	.word	0x20001620
 800c08c:	20001148 	.word	0x20001148
 800c090:	20001144 	.word	0x20001144
 800c094:	2000006c 	.word	0x2000006c

0800c098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	60fb      	str	r3, [r7, #12]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0be:	4b07      	ldr	r3, [pc, #28]	; (800c0dc <vTaskPlaceOnEventList+0x44>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3318      	adds	r3, #24
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7fe fd95 	bl	800abf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	6838      	ldr	r0, [r7, #0]
 800c0d0:	f000 fa80 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>
}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	20001144 	.word	0x20001144

0800c0e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10a      	bne.n	800c108 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	617b      	str	r3, [r7, #20]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c108:	4b0a      	ldr	r3, [pc, #40]	; (800c134 <vTaskPlaceOnEventListRestricted+0x54>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	3318      	adds	r3, #24
 800c10e:	4619      	mov	r1, r3
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f7fe fd4c 	bl	800abae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c11c:	f04f 33ff 	mov.w	r3, #4294967295
 800c120:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	68b8      	ldr	r0, [r7, #8]
 800c126:	f000 fa55 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>
	}
 800c12a:	bf00      	nop
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20001144 	.word	0x20001144

0800c138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	60fb      	str	r3, [r7, #12]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	3318      	adds	r3, #24
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe fd7d 	bl	800ac68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c16e:	4b1e      	ldr	r3, [pc, #120]	; (800c1e8 <xTaskRemoveFromEventList+0xb0>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d11d      	bne.n	800c1b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3304      	adds	r3, #4
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fd74 	bl	800ac68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c184:	4b19      	ldr	r3, [pc, #100]	; (800c1ec <xTaskRemoveFromEventList+0xb4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d903      	bls.n	800c194 <xTaskRemoveFromEventList+0x5c>
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c190:	4a16      	ldr	r2, [pc, #88]	; (800c1ec <xTaskRemoveFromEventList+0xb4>)
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4a13      	ldr	r2, [pc, #76]	; (800c1f0 <xTaskRemoveFromEventList+0xb8>)
 800c1a2:	441a      	add	r2, r3
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	f7fe fcff 	bl	800abae <vListInsertEnd>
 800c1b0:	e005      	b.n	800c1be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	3318      	adds	r3, #24
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	480e      	ldr	r0, [pc, #56]	; (800c1f4 <xTaskRemoveFromEventList+0xbc>)
 800c1ba:	f7fe fcf8 	bl	800abae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c2:	4b0d      	ldr	r3, [pc, #52]	; (800c1f8 <xTaskRemoveFromEventList+0xc0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d905      	bls.n	800c1d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <xTaskRemoveFromEventList+0xc4>)
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	e001      	b.n	800c1dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1dc:	697b      	ldr	r3, [r7, #20]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20001640 	.word	0x20001640
 800c1ec:	20001620 	.word	0x20001620
 800c1f0:	20001148 	.word	0x20001148
 800c1f4:	200015d8 	.word	0x200015d8
 800c1f8:	20001144 	.word	0x20001144
 800c1fc:	2000162c 	.word	0x2000162c

0800c200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c208:	4b06      	ldr	r3, [pc, #24]	; (800c224 <vTaskInternalSetTimeOutState+0x24>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c210:	4b05      	ldr	r3, [pc, #20]	; (800c228 <vTaskInternalSetTimeOutState+0x28>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	605a      	str	r2, [r3, #4]
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	20001630 	.word	0x20001630
 800c228:	2000161c 	.word	0x2000161c

0800c22c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b088      	sub	sp, #32
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10a      	bne.n	800c252 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	613b      	str	r3, [r7, #16]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60fb      	str	r3, [r7, #12]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c26e:	f000 fe81 	bl	800cf74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c272:	4b1d      	ldr	r3, [pc, #116]	; (800c2e8 <xTaskCheckForTimeOut+0xbc>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28a:	d102      	bne.n	800c292 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61fb      	str	r3, [r7, #28]
 800c290:	e023      	b.n	800c2da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4b15      	ldr	r3, [pc, #84]	; (800c2ec <xTaskCheckForTimeOut+0xc0>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d007      	beq.n	800c2ae <xTaskCheckForTimeOut+0x82>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	61fb      	str	r3, [r7, #28]
 800c2ac:	e015      	b.n	800c2da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d20b      	bcs.n	800c2d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	1ad2      	subs	r2, r2, r3
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff ff9b 	bl	800c200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61fb      	str	r3, [r7, #28]
 800c2ce:	e004      	b.n	800c2da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2da:	f000 fe7b 	bl	800cfd4 <vPortExitCritical>

	return xReturn;
 800c2de:	69fb      	ldr	r3, [r7, #28]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3720      	adds	r7, #32
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	2000161c 	.word	0x2000161c
 800c2ec:	20001630 	.word	0x20001630

0800c2f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2f4:	4b03      	ldr	r3, [pc, #12]	; (800c304 <vTaskMissedYield+0x14>)
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
}
 800c2fa:	bf00      	nop
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	2000162c 	.word	0x2000162c

0800c308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c310:	f000 f852 	bl	800c3b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c314:	4b06      	ldr	r3, [pc, #24]	; (800c330 <prvIdleTask+0x28>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d9f9      	bls.n	800c310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c31c:	4b05      	ldr	r3, [pc, #20]	; (800c334 <prvIdleTask+0x2c>)
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c32c:	e7f0      	b.n	800c310 <prvIdleTask+0x8>
 800c32e:	bf00      	nop
 800c330:	20001148 	.word	0x20001148
 800c334:	e000ed04 	.word	0xe000ed04

0800c338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c33e:	2300      	movs	r3, #0
 800c340:	607b      	str	r3, [r7, #4]
 800c342:	e00c      	b.n	800c35e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4a12      	ldr	r2, [pc, #72]	; (800c398 <prvInitialiseTaskLists+0x60>)
 800c350:	4413      	add	r3, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe fbfe 	bl	800ab54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	3301      	adds	r3, #1
 800c35c:	607b      	str	r3, [r7, #4]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b37      	cmp	r3, #55	; 0x37
 800c362:	d9ef      	bls.n	800c344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c364:	480d      	ldr	r0, [pc, #52]	; (800c39c <prvInitialiseTaskLists+0x64>)
 800c366:	f7fe fbf5 	bl	800ab54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c36a:	480d      	ldr	r0, [pc, #52]	; (800c3a0 <prvInitialiseTaskLists+0x68>)
 800c36c:	f7fe fbf2 	bl	800ab54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c370:	480c      	ldr	r0, [pc, #48]	; (800c3a4 <prvInitialiseTaskLists+0x6c>)
 800c372:	f7fe fbef 	bl	800ab54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c376:	480c      	ldr	r0, [pc, #48]	; (800c3a8 <prvInitialiseTaskLists+0x70>)
 800c378:	f7fe fbec 	bl	800ab54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c37c:	480b      	ldr	r0, [pc, #44]	; (800c3ac <prvInitialiseTaskLists+0x74>)
 800c37e:	f7fe fbe9 	bl	800ab54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c382:	4b0b      	ldr	r3, [pc, #44]	; (800c3b0 <prvInitialiseTaskLists+0x78>)
 800c384:	4a05      	ldr	r2, [pc, #20]	; (800c39c <prvInitialiseTaskLists+0x64>)
 800c386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c388:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <prvInitialiseTaskLists+0x7c>)
 800c38a:	4a05      	ldr	r2, [pc, #20]	; (800c3a0 <prvInitialiseTaskLists+0x68>)
 800c38c:	601a      	str	r2, [r3, #0]
}
 800c38e:	bf00      	nop
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001148 	.word	0x20001148
 800c39c:	200015a8 	.word	0x200015a8
 800c3a0:	200015bc 	.word	0x200015bc
 800c3a4:	200015d8 	.word	0x200015d8
 800c3a8:	200015ec 	.word	0x200015ec
 800c3ac:	20001604 	.word	0x20001604
 800c3b0:	200015d0 	.word	0x200015d0
 800c3b4:	200015d4 	.word	0x200015d4

0800c3b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3be:	e019      	b.n	800c3f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3c0:	f000 fdd8 	bl	800cf74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c4:	4b10      	ldr	r3, [pc, #64]	; (800c408 <prvCheckTasksWaitingTermination+0x50>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fe fc49 	bl	800ac68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3d6:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <prvCheckTasksWaitingTermination+0x54>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <prvCheckTasksWaitingTermination+0x54>)
 800c3de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3e0:	4b0b      	ldr	r3, [pc, #44]	; (800c410 <prvCheckTasksWaitingTermination+0x58>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	4a0a      	ldr	r2, [pc, #40]	; (800c410 <prvCheckTasksWaitingTermination+0x58>)
 800c3e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3ea:	f000 fdf3 	bl	800cfd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f810 	bl	800c414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3f4:	4b06      	ldr	r3, [pc, #24]	; (800c410 <prvCheckTasksWaitingTermination+0x58>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e1      	bne.n	800c3c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3fc:	bf00      	nop
 800c3fe:	bf00      	nop
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	200015ec 	.word	0x200015ec
 800c40c:	20001618 	.word	0x20001618
 800c410:	20001600 	.word	0x20001600

0800c414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3354      	adds	r3, #84	; 0x54
 800c420:	4618      	mov	r0, r3
 800c422:	f002 f949 	bl	800e6b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d108      	bne.n	800c442 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c434:	4618      	mov	r0, r3
 800c436:	f000 ff8b 	bl	800d350 <vPortFree>
				vPortFree( pxTCB );
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 ff88 	bl	800d350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c440:	e018      	b.n	800c474 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d103      	bne.n	800c454 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 ff7f 	bl	800d350 <vPortFree>
	}
 800c452:	e00f      	b.n	800c474 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d00a      	beq.n	800c474 <prvDeleteTCB+0x60>
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	60fb      	str	r3, [r7, #12]
}
 800c470:	bf00      	nop
 800c472:	e7fe      	b.n	800c472 <prvDeleteTCB+0x5e>
	}
 800c474:	bf00      	nop
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c482:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <prvResetNextTaskUnblockTime+0x38>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d104      	bne.n	800c496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c494:	e008      	b.n	800c4a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c496:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <prvResetNextTaskUnblockTime+0x38>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	4a04      	ldr	r2, [pc, #16]	; (800c4b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c4a6:	6013      	str	r3, [r2, #0]
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	200015d0 	.word	0x200015d0
 800c4b8:	20001638 	.word	0x20001638

0800c4bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4c2:	4b0b      	ldr	r3, [pc, #44]	; (800c4f0 <xTaskGetSchedulerState+0x34>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	607b      	str	r3, [r7, #4]
 800c4ce:	e008      	b.n	800c4e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4d0:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <xTaskGetSchedulerState+0x38>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d102      	bne.n	800c4de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4d8:	2302      	movs	r3, #2
 800c4da:	607b      	str	r3, [r7, #4]
 800c4dc:	e001      	b.n	800c4e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4e2:	687b      	ldr	r3, [r7, #4]
	}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20001624 	.word	0x20001624
 800c4f4:	20001640 	.word	0x20001640

0800c4f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c504:	2300      	movs	r3, #0
 800c506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d056      	beq.n	800c5bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c50e:	4b2e      	ldr	r3, [pc, #184]	; (800c5c8 <xTaskPriorityDisinherit+0xd0>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	429a      	cmp	r2, r3
 800c516:	d00a      	beq.n	800c52e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	60fb      	str	r3, [r7, #12]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10a      	bne.n	800c54c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	60bb      	str	r3, [r7, #8]
}
 800c548:	bf00      	nop
 800c54a:	e7fe      	b.n	800c54a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c550:	1e5a      	subs	r2, r3, #1
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c55e:	429a      	cmp	r2, r3
 800c560:	d02c      	beq.n	800c5bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c566:	2b00      	cmp	r3, #0
 800c568:	d128      	bne.n	800c5bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe fb7a 	bl	800ac68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58c:	4b0f      	ldr	r3, [pc, #60]	; (800c5cc <xTaskPriorityDisinherit+0xd4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	429a      	cmp	r2, r3
 800c592:	d903      	bls.n	800c59c <xTaskPriorityDisinherit+0xa4>
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c598:	4a0c      	ldr	r2, [pc, #48]	; (800c5cc <xTaskPriorityDisinherit+0xd4>)
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4a09      	ldr	r2, [pc, #36]	; (800c5d0 <xTaskPriorityDisinherit+0xd8>)
 800c5aa:	441a      	add	r2, r3
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	f7fe fafb 	bl	800abae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5bc:	697b      	ldr	r3, [r7, #20]
	}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20001144 	.word	0x20001144
 800c5cc:	20001620 	.word	0x20001620
 800c5d0:	20001148 	.word	0x20001148

0800c5d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5de:	4b21      	ldr	r3, [pc, #132]	; (800c664 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5e4:	4b20      	ldr	r3, [pc, #128]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fb3c 	bl	800ac68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d10a      	bne.n	800c60e <prvAddCurrentTaskToDelayedList+0x3a>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fe:	4b1a      	ldr	r3, [pc, #104]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3304      	adds	r3, #4
 800c604:	4619      	mov	r1, r3
 800c606:	4819      	ldr	r0, [pc, #100]	; (800c66c <prvAddCurrentTaskToDelayedList+0x98>)
 800c608:	f7fe fad1 	bl	800abae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c60c:	e026      	b.n	800c65c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4413      	add	r3, r2
 800c614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	429a      	cmp	r2, r3
 800c624:	d209      	bcs.n	800c63a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c626:	4b12      	ldr	r3, [pc, #72]	; (800c670 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3304      	adds	r3, #4
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7fe fadf 	bl	800abf6 <vListInsert>
}
 800c638:	e010      	b.n	800c65c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c63a:	4b0e      	ldr	r3, [pc, #56]	; (800c674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b0a      	ldr	r3, [pc, #40]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3304      	adds	r3, #4
 800c644:	4619      	mov	r1, r3
 800c646:	4610      	mov	r0, r2
 800c648:	f7fe fad5 	bl	800abf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	429a      	cmp	r2, r3
 800c654:	d202      	bcs.n	800c65c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c656:	4a08      	ldr	r2, [pc, #32]	; (800c678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	6013      	str	r3, [r2, #0]
}
 800c65c:	bf00      	nop
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	2000161c 	.word	0x2000161c
 800c668:	20001144 	.word	0x20001144
 800c66c:	20001604 	.word	0x20001604
 800c670:	200015d4 	.word	0x200015d4
 800c674:	200015d0 	.word	0x200015d0
 800c678:	20001638 	.word	0x20001638

0800c67c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08a      	sub	sp, #40	; 0x28
 800c680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c682:	2300      	movs	r3, #0
 800c684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c686:	f000 fb07 	bl	800cc98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c68a:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <xTimerCreateTimerTask+0x80>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d021      	beq.n	800c6d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c69a:	1d3a      	adds	r2, r7, #4
 800c69c:	f107 0108 	add.w	r1, r7, #8
 800c6a0:	f107 030c 	add.w	r3, r7, #12
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fa3b 	bl	800ab20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	9202      	str	r2, [sp, #8]
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	460a      	mov	r2, r1
 800c6bc:	4910      	ldr	r1, [pc, #64]	; (800c700 <xTimerCreateTimerTask+0x84>)
 800c6be:	4811      	ldr	r0, [pc, #68]	; (800c704 <xTimerCreateTimerTask+0x88>)
 800c6c0:	f7ff f8a2 	bl	800b808 <xTaskCreateStatic>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	4a10      	ldr	r2, [pc, #64]	; (800c708 <xTimerCreateTimerTask+0x8c>)
 800c6c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6ca:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <xTimerCreateTimerTask+0x8c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10a      	bne.n	800c6f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	613b      	str	r3, [r7, #16]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6f2:	697b      	ldr	r3, [r7, #20]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20001674 	.word	0x20001674
 800c700:	0801286c 	.word	0x0801286c
 800c704:	0800c841 	.word	0x0800c841
 800c708:	20001678 	.word	0x20001678

0800c70c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b08a      	sub	sp, #40	; 0x28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c71a:	2300      	movs	r3, #0
 800c71c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10a      	bne.n	800c73a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	623b      	str	r3, [r7, #32]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c73a:	4b1a      	ldr	r3, [pc, #104]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d02a      	beq.n	800c798 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b05      	cmp	r3, #5
 800c752:	dc18      	bgt.n	800c786 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c754:	f7ff feb2 	bl	800c4bc <xTaskGetSchedulerState>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d109      	bne.n	800c772 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c75e:	4b11      	ldr	r3, [pc, #68]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	f107 0110 	add.w	r1, r7, #16
 800c766:	2300      	movs	r3, #0
 800c768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76a:	f7fe fbe5 	bl	800af38 <xQueueGenericSend>
 800c76e:	6278      	str	r0, [r7, #36]	; 0x24
 800c770:	e012      	b.n	800c798 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c772:	4b0c      	ldr	r3, [pc, #48]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f107 0110 	add.w	r1, r7, #16
 800c77a:	2300      	movs	r3, #0
 800c77c:	2200      	movs	r2, #0
 800c77e:	f7fe fbdb 	bl	800af38 <xQueueGenericSend>
 800c782:	6278      	str	r0, [r7, #36]	; 0x24
 800c784:	e008      	b.n	800c798 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c786:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	f107 0110 	add.w	r1, r7, #16
 800c78e:	2300      	movs	r3, #0
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	f7fe fccf 	bl	800b134 <xQueueGenericSendFromISR>
 800c796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3728      	adds	r7, #40	; 0x28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20001674 	.word	0x20001674

0800c7a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af02      	add	r7, sp, #8
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b2:	4b22      	ldr	r3, [pc, #136]	; (800c83c <prvProcessExpiredTimer+0x94>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	3304      	adds	r3, #4
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe fa51 	bl	800ac68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d022      	beq.n	800c81a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	699a      	ldr	r2, [r3, #24]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	18d1      	adds	r1, r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	6978      	ldr	r0, [r7, #20]
 800c7e2:	f000 f8d1 	bl	800c988 <prvInsertTimerInActiveList>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01f      	beq.n	800c82c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	6978      	ldr	r0, [r7, #20]
 800c7f8:	f7ff ff88 	bl	800c70c <xTimerGenericCommand>
 800c7fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d113      	bne.n	800c82c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	60fb      	str	r3, [r7, #12]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c820:	f023 0301 	bic.w	r3, r3, #1
 800c824:	b2da      	uxtb	r2, r3
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	6a1b      	ldr	r3, [r3, #32]
 800c830:	6978      	ldr	r0, [r7, #20]
 800c832:	4798      	blx	r3
}
 800c834:	bf00      	nop
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	2000166c 	.word	0x2000166c

0800c840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c848:	f107 0308 	add.w	r3, r7, #8
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 f857 	bl	800c900 <prvGetNextExpireTime>
 800c852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	4619      	mov	r1, r3
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f000 f803 	bl	800c864 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c85e:	f000 f8d5 	bl	800ca0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c862:	e7f1      	b.n	800c848 <prvTimerTask+0x8>

0800c864 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c86e:	f7ff fa27 	bl	800bcc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f866 	bl	800c948 <prvSampleTimeNow>
 800c87c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d130      	bne.n	800c8e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10a      	bne.n	800c8a0 <prvProcessTimerOrBlockTask+0x3c>
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d806      	bhi.n	800c8a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c892:	f7ff fa23 	bl	800bcdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c896:	68f9      	ldr	r1, [r7, #12]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7ff ff85 	bl	800c7a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c89e:	e024      	b.n	800c8ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d008      	beq.n	800c8b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8a6:	4b13      	ldr	r3, [pc, #76]	; (800c8f4 <prvProcessTimerOrBlockTask+0x90>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <prvProcessTimerOrBlockTask+0x50>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e000      	b.n	800c8b6 <prvProcessTimerOrBlockTask+0x52>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8b8:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <prvProcessTimerOrBlockTask+0x94>)
 800c8ba:	6818      	ldr	r0, [r3, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	f7fe ff6b 	bl	800b7a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8ca:	f7ff fa07 	bl	800bcdc <xTaskResumeAll>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8d4:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <prvProcessTimerOrBlockTask+0x98>)
 800c8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8da:	601a      	str	r2, [r3, #0]
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	f3bf 8f6f 	isb	sy
}
 800c8e4:	e001      	b.n	800c8ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8e6:	f7ff f9f9 	bl	800bcdc <xTaskResumeAll>
}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	20001670 	.word	0x20001670
 800c8f8:	20001674 	.word	0x20001674
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c908:	4b0e      	ldr	r3, [pc, #56]	; (800c944 <prvGetNextExpireTime+0x44>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <prvGetNextExpireTime+0x16>
 800c912:	2201      	movs	r2, #1
 800c914:	e000      	b.n	800c918 <prvGetNextExpireTime+0x18>
 800c916:	2200      	movs	r2, #0
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d105      	bne.n	800c930 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c924:	4b07      	ldr	r3, [pc, #28]	; (800c944 <prvGetNextExpireTime+0x44>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	e001      	b.n	800c934 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c934:	68fb      	ldr	r3, [r7, #12]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000166c 	.word	0x2000166c

0800c948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c950:	f7ff fa62 	bl	800be18 <xTaskGetTickCount>
 800c954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <prvSampleTimeNow+0x3c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d205      	bcs.n	800c96c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c960:	f000 f936 	bl	800cbd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	601a      	str	r2, [r3, #0]
 800c96a:	e002      	b.n	800c972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c972:	4a04      	ldr	r2, [pc, #16]	; (800c984 <prvSampleTimeNow+0x3c>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c978:	68fb      	ldr	r3, [r7, #12]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	2000167c 	.word	0x2000167c

0800c988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d812      	bhi.n	800c9d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	1ad2      	subs	r2, r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d302      	bcc.n	800c9c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e01b      	b.n	800c9fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9c2:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <prvInsertTimerInActiveList+0x7c>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f7fe f912 	bl	800abf6 <vListInsert>
 800c9d2:	e012      	b.n	800c9fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d206      	bcs.n	800c9ea <prvInsertTimerInActiveList+0x62>
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d302      	bcc.n	800c9ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]
 800c9e8:	e007      	b.n	800c9fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ea:	4b07      	ldr	r3, [pc, #28]	; (800ca08 <prvInsertTimerInActiveList+0x80>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	f7fe f8fe 	bl	800abf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9fa:	697b      	ldr	r3, [r7, #20]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20001670 	.word	0x20001670
 800ca08:	2000166c 	.word	0x2000166c

0800ca0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08e      	sub	sp, #56	; 0x38
 800ca10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca12:	e0ca      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	da18      	bge.n	800ca4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca1a:	1d3b      	adds	r3, r7, #4
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10a      	bne.n	800ca3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	61fb      	str	r3, [r7, #28]
}
 800ca38:	bf00      	nop
 800ca3a:	e7fe      	b.n	800ca3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca42:	6850      	ldr	r0, [r2, #4]
 800ca44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca46:	6892      	ldr	r2, [r2, #8]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f2c0 80ab 	blt.w	800cbaa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	3304      	adds	r3, #4
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe f8ff 	bl	800ac68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff ff6b 	bl	800c948 <prvSampleTimeNow>
 800ca72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b09      	cmp	r3, #9
 800ca78:	f200 8096 	bhi.w	800cba8 <prvProcessReceivedCommands+0x19c>
 800ca7c:	a201      	add	r2, pc, #4	; (adr r2, 800ca84 <prvProcessReceivedCommands+0x78>)
 800ca7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca82:	bf00      	nop
 800ca84:	0800caad 	.word	0x0800caad
 800ca88:	0800caad 	.word	0x0800caad
 800ca8c:	0800caad 	.word	0x0800caad
 800ca90:	0800cb21 	.word	0x0800cb21
 800ca94:	0800cb35 	.word	0x0800cb35
 800ca98:	0800cb7f 	.word	0x0800cb7f
 800ca9c:	0800caad 	.word	0x0800caad
 800caa0:	0800caad 	.word	0x0800caad
 800caa4:	0800cb21 	.word	0x0800cb21
 800caa8:	0800cb35 	.word	0x0800cb35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab2:	f043 0301 	orr.w	r3, r3, #1
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	18d1      	adds	r1, r2, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cacc:	f7ff ff5c 	bl	800c988 <prvInsertTimerInActiveList>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d069      	beq.n	800cbaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cadc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d05e      	beq.n	800cbaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	441a      	add	r2, r3
 800caf4:	2300      	movs	r3, #0
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	2300      	movs	r3, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafe:	f7ff fe05 	bl	800c70c <xTimerGenericCommand>
 800cb02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d14f      	bne.n	800cbaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	61bb      	str	r3, [r7, #24]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb26:	f023 0301 	bic.w	r3, r3, #1
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb32:	e03a      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb3a:	f043 0301 	orr.w	r3, r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10a      	bne.n	800cb6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	f383 8811 	msr	BASEPRI, r3
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f3bf 8f4f 	dsb	sy
 800cb64:	617b      	str	r3, [r7, #20]
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	699a      	ldr	r2, [r3, #24]
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	18d1      	adds	r1, r2, r3
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb78:	f7ff ff06 	bl	800c988 <prvInsertTimerInActiveList>
					break;
 800cb7c:	e015      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb84:	f003 0302 	and.w	r3, r3, #2
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb8e:	f000 fbdf 	bl	800d350 <vPortFree>
 800cb92:	e00a      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb9a:	f023 0301 	bic.w	r3, r3, #1
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cba6:	e000      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbaa:	4b08      	ldr	r3, [pc, #32]	; (800cbcc <prvProcessReceivedCommands+0x1c0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	1d39      	adds	r1, r7, #4
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fb5a 	bl	800b26c <xQueueReceive>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f47f af2a 	bne.w	800ca14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	3730      	adds	r7, #48	; 0x30
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20001674 	.word	0x20001674

0800cbd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b088      	sub	sp, #32
 800cbd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbd6:	e048      	b.n	800cc6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbd8:	4b2d      	ldr	r3, [pc, #180]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe2:	4b2b      	ldr	r3, [pc, #172]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe f839 	bl	800ac68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d02e      	beq.n	800cc6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	4413      	add	r3, r2
 800cc14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d90e      	bls.n	800cc3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc2a:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fd ffde 	bl	800abf6 <vListInsert>
 800cc3a:	e016      	b.n	800cc6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2300      	movs	r3, #0
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	2100      	movs	r1, #0
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff fd60 	bl	800c70c <xTimerGenericCommand>
 800cc4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	603b      	str	r3, [r7, #0]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1b1      	bne.n	800cbd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc74:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc7a:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <prvSwitchTimerLists+0xc4>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a04      	ldr	r2, [pc, #16]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc82:	4a04      	ldr	r2, [pc, #16]	; (800cc94 <prvSwitchTimerLists+0xc4>)
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	6013      	str	r3, [r2, #0]
}
 800cc88:	bf00      	nop
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	2000166c 	.word	0x2000166c
 800cc94:	20001670 	.word	0x20001670

0800cc98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc9e:	f000 f969 	bl	800cf74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cca2:	4b15      	ldr	r3, [pc, #84]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d120      	bne.n	800ccec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccaa:	4814      	ldr	r0, [pc, #80]	; (800ccfc <prvCheckForValidListAndQueue+0x64>)
 800ccac:	f7fd ff52 	bl	800ab54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ccb0:	4813      	ldr	r0, [pc, #76]	; (800cd00 <prvCheckForValidListAndQueue+0x68>)
 800ccb2:	f7fd ff4f 	bl	800ab54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ccb6:	4b13      	ldr	r3, [pc, #76]	; (800cd04 <prvCheckForValidListAndQueue+0x6c>)
 800ccb8:	4a10      	ldr	r2, [pc, #64]	; (800ccfc <prvCheckForValidListAndQueue+0x64>)
 800ccba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ccbc:	4b12      	ldr	r3, [pc, #72]	; (800cd08 <prvCheckForValidListAndQueue+0x70>)
 800ccbe:	4a10      	ldr	r2, [pc, #64]	; (800cd00 <prvCheckForValidListAndQueue+0x68>)
 800ccc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	4b11      	ldr	r3, [pc, #68]	; (800cd0c <prvCheckForValidListAndQueue+0x74>)
 800ccc8:	4a11      	ldr	r2, [pc, #68]	; (800cd10 <prvCheckForValidListAndQueue+0x78>)
 800ccca:	2110      	movs	r1, #16
 800cccc:	200a      	movs	r0, #10
 800ccce:	f7fe f85d 	bl	800ad8c <xQueueGenericCreateStatic>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4a08      	ldr	r2, [pc, #32]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800ccd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d005      	beq.n	800ccec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cce0:	4b05      	ldr	r3, [pc, #20]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	490b      	ldr	r1, [pc, #44]	; (800cd14 <prvCheckForValidListAndQueue+0x7c>)
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fe fd30 	bl	800b74c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccec:	f000 f972 	bl	800cfd4 <vPortExitCritical>
}
 800ccf0:	bf00      	nop
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20001674 	.word	0x20001674
 800ccfc:	20001644 	.word	0x20001644
 800cd00:	20001658 	.word	0x20001658
 800cd04:	2000166c 	.word	0x2000166c
 800cd08:	20001670 	.word	0x20001670
 800cd0c:	20001720 	.word	0x20001720
 800cd10:	20001680 	.word	0x20001680
 800cd14:	08012874 	.word	0x08012874

0800cd18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3b04      	subs	r3, #4
 800cd28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3b04      	subs	r3, #4
 800cd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f023 0201 	bic.w	r2, r3, #1
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3b04      	subs	r3, #4
 800cd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd48:	4a0c      	ldr	r2, [pc, #48]	; (800cd7c <pxPortInitialiseStack+0x64>)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	3b14      	subs	r3, #20
 800cd52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	3b04      	subs	r3, #4
 800cd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f06f 0202 	mvn.w	r2, #2
 800cd66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3b20      	subs	r3, #32
 800cd6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	0800cd81 	.word	0x0800cd81

0800cd80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd8a:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <prvTaskExitError+0x54>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d00a      	beq.n	800cdaa <prvTaskExitError+0x2a>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	60fb      	str	r3, [r7, #12]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <prvTaskExitError+0x28>
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	60bb      	str	r3, [r7, #8]
}
 800cdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cdbe:	bf00      	nop
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0fc      	beq.n	800cdc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	20000010 	.word	0x20000010
	...

0800cde0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cde0:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <pxCurrentTCBConst2>)
 800cde2:	6819      	ldr	r1, [r3, #0]
 800cde4:	6808      	ldr	r0, [r1, #0]
 800cde6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdea:	f380 8809 	msr	PSP, r0
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f04f 0000 	mov.w	r0, #0
 800cdf6:	f380 8811 	msr	BASEPRI, r0
 800cdfa:	4770      	bx	lr
 800cdfc:	f3af 8000 	nop.w

0800ce00 <pxCurrentTCBConst2>:
 800ce00:	20001144 	.word	0x20001144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce04:	bf00      	nop
 800ce06:	bf00      	nop

0800ce08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce08:	4808      	ldr	r0, [pc, #32]	; (800ce2c <prvPortStartFirstTask+0x24>)
 800ce0a:	6800      	ldr	r0, [r0, #0]
 800ce0c:	6800      	ldr	r0, [r0, #0]
 800ce0e:	f380 8808 	msr	MSP, r0
 800ce12:	f04f 0000 	mov.w	r0, #0
 800ce16:	f380 8814 	msr	CONTROL, r0
 800ce1a:	b662      	cpsie	i
 800ce1c:	b661      	cpsie	f
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	df00      	svc	0
 800ce28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce2a:	bf00      	nop
 800ce2c:	e000ed08 	.word	0xe000ed08

0800ce30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce36:	4b46      	ldr	r3, [pc, #280]	; (800cf50 <xPortStartScheduler+0x120>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a46      	ldr	r2, [pc, #280]	; (800cf54 <xPortStartScheduler+0x124>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d10a      	bne.n	800ce56 <xPortStartScheduler+0x26>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	613b      	str	r3, [r7, #16]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce56:	4b3e      	ldr	r3, [pc, #248]	; (800cf50 <xPortStartScheduler+0x120>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a3f      	ldr	r2, [pc, #252]	; (800cf58 <xPortStartScheduler+0x128>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10a      	bne.n	800ce76 <xPortStartScheduler+0x46>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	60fb      	str	r3, [r7, #12]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce76:	4b39      	ldr	r3, [pc, #228]	; (800cf5c <xPortStartScheduler+0x12c>)
 800ce78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	22ff      	movs	r2, #255	; 0xff
 800ce86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce90:	78fb      	ldrb	r3, [r7, #3]
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	4b31      	ldr	r3, [pc, #196]	; (800cf60 <xPortStartScheduler+0x130>)
 800ce9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce9e:	4b31      	ldr	r3, [pc, #196]	; (800cf64 <xPortStartScheduler+0x134>)
 800cea0:	2207      	movs	r2, #7
 800cea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cea4:	e009      	b.n	800ceba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cea6:	4b2f      	ldr	r3, [pc, #188]	; (800cf64 <xPortStartScheduler+0x134>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	4a2d      	ldr	r2, [pc, #180]	; (800cf64 <xPortStartScheduler+0x134>)
 800ceae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec2:	2b80      	cmp	r3, #128	; 0x80
 800cec4:	d0ef      	beq.n	800cea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cec6:	4b27      	ldr	r3, [pc, #156]	; (800cf64 <xPortStartScheduler+0x134>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f1c3 0307 	rsb	r3, r3, #7
 800cece:	2b04      	cmp	r3, #4
 800ced0:	d00a      	beq.n	800cee8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	60bb      	str	r3, [r7, #8]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cee8:	4b1e      	ldr	r3, [pc, #120]	; (800cf64 <xPortStartScheduler+0x134>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	021b      	lsls	r3, r3, #8
 800ceee:	4a1d      	ldr	r2, [pc, #116]	; (800cf64 <xPortStartScheduler+0x134>)
 800cef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cef2:	4b1c      	ldr	r3, [pc, #112]	; (800cf64 <xPortStartScheduler+0x134>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cefa:	4a1a      	ldr	r2, [pc, #104]	; (800cf64 <xPortStartScheduler+0x134>)
 800cefc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf06:	4b18      	ldr	r3, [pc, #96]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a17      	ldr	r2, [pc, #92]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf12:	4b15      	ldr	r3, [pc, #84]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a14      	ldr	r2, [pc, #80]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf1e:	f000 f8dd 	bl	800d0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf22:	4b12      	ldr	r3, [pc, #72]	; (800cf6c <xPortStartScheduler+0x13c>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf28:	f000 f8fc 	bl	800d124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf2c:	4b10      	ldr	r3, [pc, #64]	; (800cf70 <xPortStartScheduler+0x140>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a0f      	ldr	r2, [pc, #60]	; (800cf70 <xPortStartScheduler+0x140>)
 800cf32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf38:	f7ff ff66 	bl	800ce08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf3c:	f7ff f848 	bl	800bfd0 <vTaskSwitchContext>
	prvTaskExitError();
 800cf40:	f7ff ff1e 	bl	800cd80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	e000ed00 	.word	0xe000ed00
 800cf54:	410fc271 	.word	0x410fc271
 800cf58:	410fc270 	.word	0x410fc270
 800cf5c:	e000e400 	.word	0xe000e400
 800cf60:	20001770 	.word	0x20001770
 800cf64:	20001774 	.word	0x20001774
 800cf68:	e000ed20 	.word	0xe000ed20
 800cf6c:	20000010 	.word	0x20000010
 800cf70:	e000ef34 	.word	0xe000ef34

0800cf74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	607b      	str	r3, [r7, #4]
}
 800cf8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf8e:	4b0f      	ldr	r3, [pc, #60]	; (800cfcc <vPortEnterCritical+0x58>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3301      	adds	r3, #1
 800cf94:	4a0d      	ldr	r2, [pc, #52]	; (800cfcc <vPortEnterCritical+0x58>)
 800cf96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf98:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <vPortEnterCritical+0x58>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d10f      	bne.n	800cfc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfa0:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <vPortEnterCritical+0x5c>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	603b      	str	r3, [r7, #0]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <vPortEnterCritical+0x4a>
	}
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	20000010 	.word	0x20000010
 800cfd0:	e000ed04 	.word	0xe000ed04

0800cfd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cfda:	4b12      	ldr	r3, [pc, #72]	; (800d024 <vPortExitCritical+0x50>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10a      	bne.n	800cff8 <vPortExitCritical+0x24>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	607b      	str	r3, [r7, #4]
}
 800cff4:	bf00      	nop
 800cff6:	e7fe      	b.n	800cff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cff8:	4b0a      	ldr	r3, [pc, #40]	; (800d024 <vPortExitCritical+0x50>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	4a09      	ldr	r2, [pc, #36]	; (800d024 <vPortExitCritical+0x50>)
 800d000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d002:	4b08      	ldr	r3, [pc, #32]	; (800d024 <vPortExitCritical+0x50>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <vPortExitCritical+0x42>
 800d00a:	2300      	movs	r3, #0
 800d00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	f383 8811 	msr	BASEPRI, r3
}
 800d014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d016:	bf00      	nop
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	20000010 	.word	0x20000010
	...

0800d030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d030:	f3ef 8009 	mrs	r0, PSP
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	4b15      	ldr	r3, [pc, #84]	; (800d090 <pxCurrentTCBConst>)
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	f01e 0f10 	tst.w	lr, #16
 800d040:	bf08      	it	eq
 800d042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04a:	6010      	str	r0, [r2, #0]
 800d04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d054:	f380 8811 	msr	BASEPRI, r0
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f7fe ffb6 	bl	800bfd0 <vTaskSwitchContext>
 800d064:	f04f 0000 	mov.w	r0, #0
 800d068:	f380 8811 	msr	BASEPRI, r0
 800d06c:	bc09      	pop	{r0, r3}
 800d06e:	6819      	ldr	r1, [r3, #0]
 800d070:	6808      	ldr	r0, [r1, #0]
 800d072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d076:	f01e 0f10 	tst.w	lr, #16
 800d07a:	bf08      	it	eq
 800d07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d080:	f380 8809 	msr	PSP, r0
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	f3af 8000 	nop.w

0800d090 <pxCurrentTCBConst>:
 800d090:	20001144 	.word	0x20001144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop

0800d098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	607b      	str	r3, [r7, #4]
}
 800d0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0b2:	f7fe fed3 	bl	800be5c <xTaskIncrementTick>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0bc:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <xPortSysTickHandler+0x40>)
 800d0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	f383 8811 	msr	BASEPRI, r3
}
 800d0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	e000ed04 	.word	0xe000ed04

0800d0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0e0:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <vPortSetupTimerInterrupt+0x34>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0e6:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <vPortSetupTimerInterrupt+0x38>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <vPortSetupTimerInterrupt+0x3c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a0a      	ldr	r2, [pc, #40]	; (800d11c <vPortSetupTimerInterrupt+0x40>)
 800d0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f6:	099b      	lsrs	r3, r3, #6
 800d0f8:	4a09      	ldr	r2, [pc, #36]	; (800d120 <vPortSetupTimerInterrupt+0x44>)
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0fe:	4b04      	ldr	r3, [pc, #16]	; (800d110 <vPortSetupTimerInterrupt+0x34>)
 800d100:	2207      	movs	r2, #7
 800d102:	601a      	str	r2, [r3, #0]
}
 800d104:	bf00      	nop
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	e000e010 	.word	0xe000e010
 800d114:	e000e018 	.word	0xe000e018
 800d118:	20000004 	.word	0x20000004
 800d11c:	10624dd3 	.word	0x10624dd3
 800d120:	e000e014 	.word	0xe000e014

0800d124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d134 <vPortEnableVFP+0x10>
 800d128:	6801      	ldr	r1, [r0, #0]
 800d12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d12e:	6001      	str	r1, [r0, #0]
 800d130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d132:	bf00      	nop
 800d134:	e000ed88 	.word	0xe000ed88

0800d138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d13e:	f3ef 8305 	mrs	r3, IPSR
 800d142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b0f      	cmp	r3, #15
 800d148:	d914      	bls.n	800d174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d14a:	4a17      	ldr	r2, [pc, #92]	; (800d1a8 <vPortValidateInterruptPriority+0x70>)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d154:	4b15      	ldr	r3, [pc, #84]	; (800d1ac <vPortValidateInterruptPriority+0x74>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	7afa      	ldrb	r2, [r7, #11]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d20a      	bcs.n	800d174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	607b      	str	r3, [r7, #4]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d174:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <vPortValidateInterruptPriority+0x78>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d17c:	4b0d      	ldr	r3, [pc, #52]	; (800d1b4 <vPortValidateInterruptPriority+0x7c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d90a      	bls.n	800d19a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	603b      	str	r3, [r7, #0]
}
 800d196:	bf00      	nop
 800d198:	e7fe      	b.n	800d198 <vPortValidateInterruptPriority+0x60>
	}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	e000e3f0 	.word	0xe000e3f0
 800d1ac:	20001770 	.word	0x20001770
 800d1b0:	e000ed0c 	.word	0xe000ed0c
 800d1b4:	20001774 	.word	0x20001774

0800d1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08a      	sub	sp, #40	; 0x28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1c4:	f7fe fd7c 	bl	800bcc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1c8:	4b5b      	ldr	r3, [pc, #364]	; (800d338 <pvPortMalloc+0x180>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1d0:	f000 f920 	bl	800d414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1d4:	4b59      	ldr	r3, [pc, #356]	; (800d33c <pvPortMalloc+0x184>)
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f040 8093 	bne.w	800d308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01d      	beq.n	800d224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d1e8:	2208      	movs	r2, #8
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d014      	beq.n	800d224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f023 0307 	bic.w	r3, r3, #7
 800d200:	3308      	adds	r3, #8
 800d202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <pvPortMalloc+0x6c>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	617b      	str	r3, [r7, #20]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d06e      	beq.n	800d308 <pvPortMalloc+0x150>
 800d22a:	4b45      	ldr	r3, [pc, #276]	; (800d340 <pvPortMalloc+0x188>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	429a      	cmp	r2, r3
 800d232:	d869      	bhi.n	800d308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d234:	4b43      	ldr	r3, [pc, #268]	; (800d344 <pvPortMalloc+0x18c>)
 800d236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d238:	4b42      	ldr	r3, [pc, #264]	; (800d344 <pvPortMalloc+0x18c>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d23e:	e004      	b.n	800d24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d903      	bls.n	800d25c <pvPortMalloc+0xa4>
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1f1      	bne.n	800d240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d25c:	4b36      	ldr	r3, [pc, #216]	; (800d338 <pvPortMalloc+0x180>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d262:	429a      	cmp	r2, r3
 800d264:	d050      	beq.n	800d308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2208      	movs	r2, #8
 800d26c:	4413      	add	r3, r2
 800d26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	2308      	movs	r3, #8
 800d282:	005b      	lsls	r3, r3, #1
 800d284:	429a      	cmp	r2, r3
 800d286:	d91f      	bls.n	800d2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4413      	add	r3, r2
 800d28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00a      	beq.n	800d2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	613b      	str	r3, [r7, #16]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	1ad2      	subs	r2, r2, r3
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2c2:	69b8      	ldr	r0, [r7, #24]
 800d2c4:	f000 f908 	bl	800d4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2c8:	4b1d      	ldr	r3, [pc, #116]	; (800d340 <pvPortMalloc+0x188>)
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	4a1b      	ldr	r2, [pc, #108]	; (800d340 <pvPortMalloc+0x188>)
 800d2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2d6:	4b1a      	ldr	r3, [pc, #104]	; (800d340 <pvPortMalloc+0x188>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <pvPortMalloc+0x190>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d203      	bcs.n	800d2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2e2:	4b17      	ldr	r3, [pc, #92]	; (800d340 <pvPortMalloc+0x188>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a18      	ldr	r2, [pc, #96]	; (800d348 <pvPortMalloc+0x190>)
 800d2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	4b13      	ldr	r3, [pc, #76]	; (800d33c <pvPortMalloc+0x184>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	431a      	orrs	r2, r3
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d2fe:	4b13      	ldr	r3, [pc, #76]	; (800d34c <pvPortMalloc+0x194>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	4a11      	ldr	r2, [pc, #68]	; (800d34c <pvPortMalloc+0x194>)
 800d306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d308:	f7fe fce8 	bl	800bcdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <pvPortMalloc+0x174>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	60fb      	str	r3, [r7, #12]
}
 800d328:	bf00      	nop
 800d32a:	e7fe      	b.n	800d32a <pvPortMalloc+0x172>
	return pvReturn;
 800d32c:	69fb      	ldr	r3, [r7, #28]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3728      	adds	r7, #40	; 0x28
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	20006ed8 	.word	0x20006ed8
 800d33c:	20006eec 	.word	0x20006eec
 800d340:	20006edc 	.word	0x20006edc
 800d344:	20006ed0 	.word	0x20006ed0
 800d348:	20006ee0 	.word	0x20006ee0
 800d34c:	20006ee4 	.word	0x20006ee4

0800d350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d04d      	beq.n	800d3fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d362:	2308      	movs	r3, #8
 800d364:	425b      	negs	r3, r3
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	4413      	add	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	4b24      	ldr	r3, [pc, #144]	; (800d408 <vPortFree+0xb8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4013      	ands	r3, r2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <vPortFree+0x44>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	60fb      	str	r3, [r7, #12]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <vPortFree+0x62>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	60bb      	str	r3, [r7, #8]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	4b14      	ldr	r3, [pc, #80]	; (800d408 <vPortFree+0xb8>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d01e      	beq.n	800d3fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d11a      	bne.n	800d3fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	4b0e      	ldr	r3, [pc, #56]	; (800d408 <vPortFree+0xb8>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	43db      	mvns	r3, r3
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3d8:	f7fe fc72 	bl	800bcc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <vPortFree+0xbc>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	4a09      	ldr	r2, [pc, #36]	; (800d40c <vPortFree+0xbc>)
 800d3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3ea:	6938      	ldr	r0, [r7, #16]
 800d3ec:	f000 f874 	bl	800d4d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d3f0:	4b07      	ldr	r3, [pc, #28]	; (800d410 <vPortFree+0xc0>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	4a06      	ldr	r2, [pc, #24]	; (800d410 <vPortFree+0xc0>)
 800d3f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d3fa:	f7fe fc6f 	bl	800bcdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3fe:	bf00      	nop
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20006eec 	.word	0x20006eec
 800d40c:	20006edc 	.word	0x20006edc
 800d410:	20006ee8 	.word	0x20006ee8

0800d414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d41a:	f245 7358 	movw	r3, #22360	; 0x5758
 800d41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d420:	4b27      	ldr	r3, [pc, #156]	; (800d4c0 <prvHeapInit+0xac>)
 800d422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00c      	beq.n	800d448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	3307      	adds	r3, #7
 800d432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0307 	bic.w	r3, r3, #7
 800d43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	4a1f      	ldr	r2, [pc, #124]	; (800d4c0 <prvHeapInit+0xac>)
 800d444:	4413      	add	r3, r2
 800d446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d44c:	4a1d      	ldr	r2, [pc, #116]	; (800d4c4 <prvHeapInit+0xb0>)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d452:	4b1c      	ldr	r3, [pc, #112]	; (800d4c4 <prvHeapInit+0xb0>)
 800d454:	2200      	movs	r2, #0
 800d456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	4413      	add	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d460:	2208      	movs	r2, #8
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f023 0307 	bic.w	r3, r3, #7
 800d46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4a15      	ldr	r2, [pc, #84]	; (800d4c8 <prvHeapInit+0xb4>)
 800d474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d476:	4b14      	ldr	r3, [pc, #80]	; (800d4c8 <prvHeapInit+0xb4>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2200      	movs	r2, #0
 800d47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d47e:	4b12      	ldr	r3, [pc, #72]	; (800d4c8 <prvHeapInit+0xb4>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d494:	4b0c      	ldr	r3, [pc, #48]	; (800d4c8 <prvHeapInit+0xb4>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	; (800d4cc <prvHeapInit+0xb8>)
 800d4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <prvHeapInit+0xbc>)
 800d4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4ac:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <prvHeapInit+0xc0>)
 800d4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4b2:	601a      	str	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	20001778 	.word	0x20001778
 800d4c4:	20006ed0 	.word	0x20006ed0
 800d4c8:	20006ed8 	.word	0x20006ed8
 800d4cc:	20006ee0 	.word	0x20006ee0
 800d4d0:	20006edc 	.word	0x20006edc
 800d4d4:	20006eec 	.word	0x20006eec

0800d4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4e0:	4b28      	ldr	r3, [pc, #160]	; (800d584 <prvInsertBlockIntoFreeList+0xac>)
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	e002      	b.n	800d4ec <prvInsertBlockIntoFreeList+0x14>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	60fb      	str	r3, [r7, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d8f7      	bhi.n	800d4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	4413      	add	r3, r2
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	429a      	cmp	r2, r3
 800d506:	d108      	bne.n	800d51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	441a      	add	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	441a      	add	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d118      	bne.n	800d560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	4b15      	ldr	r3, [pc, #84]	; (800d588 <prvInsertBlockIntoFreeList+0xb0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	429a      	cmp	r2, r3
 800d538:	d00d      	beq.n	800d556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	441a      	add	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	e008      	b.n	800d568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d556:	4b0c      	ldr	r3, [pc, #48]	; (800d588 <prvInsertBlockIntoFreeList+0xb0>)
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	e003      	b.n	800d568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d002      	beq.n	800d576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d576:	bf00      	nop
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	20006ed0 	.word	0x20006ed0
 800d588:	20006ed8 	.word	0x20006ed8

0800d58c <_calloc_r>:
 800d58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d58e:	fba1 2402 	umull	r2, r4, r1, r2
 800d592:	b94c      	cbnz	r4, 800d5a8 <_calloc_r+0x1c>
 800d594:	4611      	mov	r1, r2
 800d596:	9201      	str	r2, [sp, #4]
 800d598:	f000 f82e 	bl	800d5f8 <_malloc_r>
 800d59c:	9a01      	ldr	r2, [sp, #4]
 800d59e:	4605      	mov	r5, r0
 800d5a0:	b930      	cbnz	r0, 800d5b0 <_calloc_r+0x24>
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	b003      	add	sp, #12
 800d5a6:	bd30      	pop	{r4, r5, pc}
 800d5a8:	220c      	movs	r2, #12
 800d5aa:	6002      	str	r2, [r0, #0]
 800d5ac:	2500      	movs	r5, #0
 800d5ae:	e7f8      	b.n	800d5a2 <_calloc_r+0x16>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	f001 f864 	bl	800e67e <memset>
 800d5b6:	e7f4      	b.n	800d5a2 <_calloc_r+0x16>

0800d5b8 <sbrk_aligned>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	4e0e      	ldr	r6, [pc, #56]	; (800d5f4 <sbrk_aligned+0x3c>)
 800d5bc:	460c      	mov	r4, r1
 800d5be:	6831      	ldr	r1, [r6, #0]
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	b911      	cbnz	r1, 800d5ca <sbrk_aligned+0x12>
 800d5c4:	f001 f8f2 	bl	800e7ac <_sbrk_r>
 800d5c8:	6030      	str	r0, [r6, #0]
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f001 f8ed 	bl	800e7ac <_sbrk_r>
 800d5d2:	1c43      	adds	r3, r0, #1
 800d5d4:	d00a      	beq.n	800d5ec <sbrk_aligned+0x34>
 800d5d6:	1cc4      	adds	r4, r0, #3
 800d5d8:	f024 0403 	bic.w	r4, r4, #3
 800d5dc:	42a0      	cmp	r0, r4
 800d5de:	d007      	beq.n	800d5f0 <sbrk_aligned+0x38>
 800d5e0:	1a21      	subs	r1, r4, r0
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f001 f8e2 	bl	800e7ac <_sbrk_r>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d101      	bne.n	800d5f0 <sbrk_aligned+0x38>
 800d5ec:	f04f 34ff 	mov.w	r4, #4294967295
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	20006ef4 	.word	0x20006ef4

0800d5f8 <_malloc_r>:
 800d5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5fc:	1ccd      	adds	r5, r1, #3
 800d5fe:	f025 0503 	bic.w	r5, r5, #3
 800d602:	3508      	adds	r5, #8
 800d604:	2d0c      	cmp	r5, #12
 800d606:	bf38      	it	cc
 800d608:	250c      	movcc	r5, #12
 800d60a:	2d00      	cmp	r5, #0
 800d60c:	4607      	mov	r7, r0
 800d60e:	db01      	blt.n	800d614 <_malloc_r+0x1c>
 800d610:	42a9      	cmp	r1, r5
 800d612:	d905      	bls.n	800d620 <_malloc_r+0x28>
 800d614:	230c      	movs	r3, #12
 800d616:	603b      	str	r3, [r7, #0]
 800d618:	2600      	movs	r6, #0
 800d61a:	4630      	mov	r0, r6
 800d61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d620:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6f4 <_malloc_r+0xfc>
 800d624:	f000 f868 	bl	800d6f8 <__malloc_lock>
 800d628:	f8d8 3000 	ldr.w	r3, [r8]
 800d62c:	461c      	mov	r4, r3
 800d62e:	bb5c      	cbnz	r4, 800d688 <_malloc_r+0x90>
 800d630:	4629      	mov	r1, r5
 800d632:	4638      	mov	r0, r7
 800d634:	f7ff ffc0 	bl	800d5b8 <sbrk_aligned>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	4604      	mov	r4, r0
 800d63c:	d155      	bne.n	800d6ea <_malloc_r+0xf2>
 800d63e:	f8d8 4000 	ldr.w	r4, [r8]
 800d642:	4626      	mov	r6, r4
 800d644:	2e00      	cmp	r6, #0
 800d646:	d145      	bne.n	800d6d4 <_malloc_r+0xdc>
 800d648:	2c00      	cmp	r4, #0
 800d64a:	d048      	beq.n	800d6de <_malloc_r+0xe6>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	4631      	mov	r1, r6
 800d650:	4638      	mov	r0, r7
 800d652:	eb04 0903 	add.w	r9, r4, r3
 800d656:	f001 f8a9 	bl	800e7ac <_sbrk_r>
 800d65a:	4581      	cmp	r9, r0
 800d65c:	d13f      	bne.n	800d6de <_malloc_r+0xe6>
 800d65e:	6821      	ldr	r1, [r4, #0]
 800d660:	1a6d      	subs	r5, r5, r1
 800d662:	4629      	mov	r1, r5
 800d664:	4638      	mov	r0, r7
 800d666:	f7ff ffa7 	bl	800d5b8 <sbrk_aligned>
 800d66a:	3001      	adds	r0, #1
 800d66c:	d037      	beq.n	800d6de <_malloc_r+0xe6>
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	442b      	add	r3, r5
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	f8d8 3000 	ldr.w	r3, [r8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d038      	beq.n	800d6ee <_malloc_r+0xf6>
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	42a2      	cmp	r2, r4
 800d680:	d12b      	bne.n	800d6da <_malloc_r+0xe2>
 800d682:	2200      	movs	r2, #0
 800d684:	605a      	str	r2, [r3, #4]
 800d686:	e00f      	b.n	800d6a8 <_malloc_r+0xb0>
 800d688:	6822      	ldr	r2, [r4, #0]
 800d68a:	1b52      	subs	r2, r2, r5
 800d68c:	d41f      	bmi.n	800d6ce <_malloc_r+0xd6>
 800d68e:	2a0b      	cmp	r2, #11
 800d690:	d917      	bls.n	800d6c2 <_malloc_r+0xca>
 800d692:	1961      	adds	r1, r4, r5
 800d694:	42a3      	cmp	r3, r4
 800d696:	6025      	str	r5, [r4, #0]
 800d698:	bf18      	it	ne
 800d69a:	6059      	strne	r1, [r3, #4]
 800d69c:	6863      	ldr	r3, [r4, #4]
 800d69e:	bf08      	it	eq
 800d6a0:	f8c8 1000 	streq.w	r1, [r8]
 800d6a4:	5162      	str	r2, [r4, r5]
 800d6a6:	604b      	str	r3, [r1, #4]
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f104 060b 	add.w	r6, r4, #11
 800d6ae:	f000 f829 	bl	800d704 <__malloc_unlock>
 800d6b2:	f026 0607 	bic.w	r6, r6, #7
 800d6b6:	1d23      	adds	r3, r4, #4
 800d6b8:	1af2      	subs	r2, r6, r3
 800d6ba:	d0ae      	beq.n	800d61a <_malloc_r+0x22>
 800d6bc:	1b9b      	subs	r3, r3, r6
 800d6be:	50a3      	str	r3, [r4, r2]
 800d6c0:	e7ab      	b.n	800d61a <_malloc_r+0x22>
 800d6c2:	42a3      	cmp	r3, r4
 800d6c4:	6862      	ldr	r2, [r4, #4]
 800d6c6:	d1dd      	bne.n	800d684 <_malloc_r+0x8c>
 800d6c8:	f8c8 2000 	str.w	r2, [r8]
 800d6cc:	e7ec      	b.n	800d6a8 <_malloc_r+0xb0>
 800d6ce:	4623      	mov	r3, r4
 800d6d0:	6864      	ldr	r4, [r4, #4]
 800d6d2:	e7ac      	b.n	800d62e <_malloc_r+0x36>
 800d6d4:	4634      	mov	r4, r6
 800d6d6:	6876      	ldr	r6, [r6, #4]
 800d6d8:	e7b4      	b.n	800d644 <_malloc_r+0x4c>
 800d6da:	4613      	mov	r3, r2
 800d6dc:	e7cc      	b.n	800d678 <_malloc_r+0x80>
 800d6de:	230c      	movs	r3, #12
 800d6e0:	603b      	str	r3, [r7, #0]
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f000 f80e 	bl	800d704 <__malloc_unlock>
 800d6e8:	e797      	b.n	800d61a <_malloc_r+0x22>
 800d6ea:	6025      	str	r5, [r4, #0]
 800d6ec:	e7dc      	b.n	800d6a8 <_malloc_r+0xb0>
 800d6ee:	605b      	str	r3, [r3, #4]
 800d6f0:	deff      	udf	#255	; 0xff
 800d6f2:	bf00      	nop
 800d6f4:	20006ef0 	.word	0x20006ef0

0800d6f8 <__malloc_lock>:
 800d6f8:	4801      	ldr	r0, [pc, #4]	; (800d700 <__malloc_lock+0x8>)
 800d6fa:	f001 b8a3 	b.w	800e844 <__retarget_lock_acquire_recursive>
 800d6fe:	bf00      	nop
 800d700:	20007038 	.word	0x20007038

0800d704 <__malloc_unlock>:
 800d704:	4801      	ldr	r0, [pc, #4]	; (800d70c <__malloc_unlock+0x8>)
 800d706:	f001 b89e 	b.w	800e846 <__retarget_lock_release_recursive>
 800d70a:	bf00      	nop
 800d70c:	20007038 	.word	0x20007038

0800d710 <__cvt>:
 800d710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d714:	ec55 4b10 	vmov	r4, r5, d0
 800d718:	2d00      	cmp	r5, #0
 800d71a:	460e      	mov	r6, r1
 800d71c:	4619      	mov	r1, r3
 800d71e:	462b      	mov	r3, r5
 800d720:	bfbb      	ittet	lt
 800d722:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d726:	461d      	movlt	r5, r3
 800d728:	2300      	movge	r3, #0
 800d72a:	232d      	movlt	r3, #45	; 0x2d
 800d72c:	700b      	strb	r3, [r1, #0]
 800d72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d730:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d734:	4691      	mov	r9, r2
 800d736:	f023 0820 	bic.w	r8, r3, #32
 800d73a:	bfbc      	itt	lt
 800d73c:	4622      	movlt	r2, r4
 800d73e:	4614      	movlt	r4, r2
 800d740:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d744:	d005      	beq.n	800d752 <__cvt+0x42>
 800d746:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d74a:	d100      	bne.n	800d74e <__cvt+0x3e>
 800d74c:	3601      	adds	r6, #1
 800d74e:	2102      	movs	r1, #2
 800d750:	e000      	b.n	800d754 <__cvt+0x44>
 800d752:	2103      	movs	r1, #3
 800d754:	ab03      	add	r3, sp, #12
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	ab02      	add	r3, sp, #8
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	ec45 4b10 	vmov	d0, r4, r5
 800d760:	4653      	mov	r3, sl
 800d762:	4632      	mov	r2, r6
 800d764:	f001 f90c 	bl	800e980 <_dtoa_r>
 800d768:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d76c:	4607      	mov	r7, r0
 800d76e:	d102      	bne.n	800d776 <__cvt+0x66>
 800d770:	f019 0f01 	tst.w	r9, #1
 800d774:	d022      	beq.n	800d7bc <__cvt+0xac>
 800d776:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d77a:	eb07 0906 	add.w	r9, r7, r6
 800d77e:	d110      	bne.n	800d7a2 <__cvt+0x92>
 800d780:	783b      	ldrb	r3, [r7, #0]
 800d782:	2b30      	cmp	r3, #48	; 0x30
 800d784:	d10a      	bne.n	800d79c <__cvt+0x8c>
 800d786:	2200      	movs	r2, #0
 800d788:	2300      	movs	r3, #0
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f3 f9bb 	bl	8000b08 <__aeabi_dcmpeq>
 800d792:	b918      	cbnz	r0, 800d79c <__cvt+0x8c>
 800d794:	f1c6 0601 	rsb	r6, r6, #1
 800d798:	f8ca 6000 	str.w	r6, [sl]
 800d79c:	f8da 3000 	ldr.w	r3, [sl]
 800d7a0:	4499      	add	r9, r3
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	f7f3 f9ad 	bl	8000b08 <__aeabi_dcmpeq>
 800d7ae:	b108      	cbz	r0, 800d7b4 <__cvt+0xa4>
 800d7b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7b4:	2230      	movs	r2, #48	; 0x30
 800d7b6:	9b03      	ldr	r3, [sp, #12]
 800d7b8:	454b      	cmp	r3, r9
 800d7ba:	d307      	bcc.n	800d7cc <__cvt+0xbc>
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7c0:	1bdb      	subs	r3, r3, r7
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	b004      	add	sp, #16
 800d7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7cc:	1c59      	adds	r1, r3, #1
 800d7ce:	9103      	str	r1, [sp, #12]
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	e7f0      	b.n	800d7b6 <__cvt+0xa6>

0800d7d4 <__exponent>:
 800d7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2900      	cmp	r1, #0
 800d7da:	bfb8      	it	lt
 800d7dc:	4249      	neglt	r1, r1
 800d7de:	f803 2b02 	strb.w	r2, [r3], #2
 800d7e2:	bfb4      	ite	lt
 800d7e4:	222d      	movlt	r2, #45	; 0x2d
 800d7e6:	222b      	movge	r2, #43	; 0x2b
 800d7e8:	2909      	cmp	r1, #9
 800d7ea:	7042      	strb	r2, [r0, #1]
 800d7ec:	dd2a      	ble.n	800d844 <__exponent+0x70>
 800d7ee:	f10d 0207 	add.w	r2, sp, #7
 800d7f2:	4617      	mov	r7, r2
 800d7f4:	260a      	movs	r6, #10
 800d7f6:	4694      	mov	ip, r2
 800d7f8:	fb91 f5f6 	sdiv	r5, r1, r6
 800d7fc:	fb06 1415 	mls	r4, r6, r5, r1
 800d800:	3430      	adds	r4, #48	; 0x30
 800d802:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d806:	460c      	mov	r4, r1
 800d808:	2c63      	cmp	r4, #99	; 0x63
 800d80a:	f102 32ff 	add.w	r2, r2, #4294967295
 800d80e:	4629      	mov	r1, r5
 800d810:	dcf1      	bgt.n	800d7f6 <__exponent+0x22>
 800d812:	3130      	adds	r1, #48	; 0x30
 800d814:	f1ac 0402 	sub.w	r4, ip, #2
 800d818:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d81c:	1c41      	adds	r1, r0, #1
 800d81e:	4622      	mov	r2, r4
 800d820:	42ba      	cmp	r2, r7
 800d822:	d30a      	bcc.n	800d83a <__exponent+0x66>
 800d824:	f10d 0209 	add.w	r2, sp, #9
 800d828:	eba2 020c 	sub.w	r2, r2, ip
 800d82c:	42bc      	cmp	r4, r7
 800d82e:	bf88      	it	hi
 800d830:	2200      	movhi	r2, #0
 800d832:	4413      	add	r3, r2
 800d834:	1a18      	subs	r0, r3, r0
 800d836:	b003      	add	sp, #12
 800d838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d83a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d83e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d842:	e7ed      	b.n	800d820 <__exponent+0x4c>
 800d844:	2330      	movs	r3, #48	; 0x30
 800d846:	3130      	adds	r1, #48	; 0x30
 800d848:	7083      	strb	r3, [r0, #2]
 800d84a:	70c1      	strb	r1, [r0, #3]
 800d84c:	1d03      	adds	r3, r0, #4
 800d84e:	e7f1      	b.n	800d834 <__exponent+0x60>

0800d850 <_printf_float>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	ed2d 8b02 	vpush	{d8}
 800d858:	b08d      	sub	sp, #52	; 0x34
 800d85a:	460c      	mov	r4, r1
 800d85c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d860:	4616      	mov	r6, r2
 800d862:	461f      	mov	r7, r3
 800d864:	4605      	mov	r5, r0
 800d866:	f000 ff13 	bl	800e690 <_localeconv_r>
 800d86a:	f8d0 a000 	ldr.w	sl, [r0]
 800d86e:	4650      	mov	r0, sl
 800d870:	f7f2 fd1e 	bl	80002b0 <strlen>
 800d874:	2300      	movs	r3, #0
 800d876:	930a      	str	r3, [sp, #40]	; 0x28
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	9305      	str	r3, [sp, #20]
 800d87c:	f8d8 3000 	ldr.w	r3, [r8]
 800d880:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d884:	3307      	adds	r3, #7
 800d886:	f023 0307 	bic.w	r3, r3, #7
 800d88a:	f103 0208 	add.w	r2, r3, #8
 800d88e:	f8c8 2000 	str.w	r2, [r8]
 800d892:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d89a:	9307      	str	r3, [sp, #28]
 800d89c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8a0:	ee08 0a10 	vmov	s16, r0
 800d8a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d8a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8ac:	4b9e      	ldr	r3, [pc, #632]	; (800db28 <_printf_float+0x2d8>)
 800d8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b2:	f7f3 f95b 	bl	8000b6c <__aeabi_dcmpun>
 800d8b6:	bb88      	cbnz	r0, 800d91c <_printf_float+0xcc>
 800d8b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8bc:	4b9a      	ldr	r3, [pc, #616]	; (800db28 <_printf_float+0x2d8>)
 800d8be:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c2:	f7f3 f935 	bl	8000b30 <__aeabi_dcmple>
 800d8c6:	bb48      	cbnz	r0, 800d91c <_printf_float+0xcc>
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4640      	mov	r0, r8
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	f7f3 f924 	bl	8000b1c <__aeabi_dcmplt>
 800d8d4:	b110      	cbz	r0, 800d8dc <_printf_float+0x8c>
 800d8d6:	232d      	movs	r3, #45	; 0x2d
 800d8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8dc:	4a93      	ldr	r2, [pc, #588]	; (800db2c <_printf_float+0x2dc>)
 800d8de:	4b94      	ldr	r3, [pc, #592]	; (800db30 <_printf_float+0x2e0>)
 800d8e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d8e4:	bf94      	ite	ls
 800d8e6:	4690      	movls	r8, r2
 800d8e8:	4698      	movhi	r8, r3
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	6123      	str	r3, [r4, #16]
 800d8ee:	9b05      	ldr	r3, [sp, #20]
 800d8f0:	f023 0304 	bic.w	r3, r3, #4
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	f04f 0900 	mov.w	r9, #0
 800d8fa:	9700      	str	r7, [sp, #0]
 800d8fc:	4633      	mov	r3, r6
 800d8fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800d900:	4621      	mov	r1, r4
 800d902:	4628      	mov	r0, r5
 800d904:	f000 f9da 	bl	800dcbc <_printf_common>
 800d908:	3001      	adds	r0, #1
 800d90a:	f040 8090 	bne.w	800da2e <_printf_float+0x1de>
 800d90e:	f04f 30ff 	mov.w	r0, #4294967295
 800d912:	b00d      	add	sp, #52	; 0x34
 800d914:	ecbd 8b02 	vpop	{d8}
 800d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91c:	4642      	mov	r2, r8
 800d91e:	464b      	mov	r3, r9
 800d920:	4640      	mov	r0, r8
 800d922:	4649      	mov	r1, r9
 800d924:	f7f3 f922 	bl	8000b6c <__aeabi_dcmpun>
 800d928:	b140      	cbz	r0, 800d93c <_printf_float+0xec>
 800d92a:	464b      	mov	r3, r9
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bfbc      	itt	lt
 800d930:	232d      	movlt	r3, #45	; 0x2d
 800d932:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d936:	4a7f      	ldr	r2, [pc, #508]	; (800db34 <_printf_float+0x2e4>)
 800d938:	4b7f      	ldr	r3, [pc, #508]	; (800db38 <_printf_float+0x2e8>)
 800d93a:	e7d1      	b.n	800d8e0 <_printf_float+0x90>
 800d93c:	6863      	ldr	r3, [r4, #4]
 800d93e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d942:	9206      	str	r2, [sp, #24]
 800d944:	1c5a      	adds	r2, r3, #1
 800d946:	d13f      	bne.n	800d9c8 <_printf_float+0x178>
 800d948:	2306      	movs	r3, #6
 800d94a:	6063      	str	r3, [r4, #4]
 800d94c:	9b05      	ldr	r3, [sp, #20]
 800d94e:	6861      	ldr	r1, [r4, #4]
 800d950:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d954:	2300      	movs	r3, #0
 800d956:	9303      	str	r3, [sp, #12]
 800d958:	ab0a      	add	r3, sp, #40	; 0x28
 800d95a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d95e:	ab09      	add	r3, sp, #36	; 0x24
 800d960:	ec49 8b10 	vmov	d0, r8, r9
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	6022      	str	r2, [r4, #0]
 800d968:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d96c:	4628      	mov	r0, r5
 800d96e:	f7ff fecf 	bl	800d710 <__cvt>
 800d972:	9b06      	ldr	r3, [sp, #24]
 800d974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d976:	2b47      	cmp	r3, #71	; 0x47
 800d978:	4680      	mov	r8, r0
 800d97a:	d108      	bne.n	800d98e <_printf_float+0x13e>
 800d97c:	1cc8      	adds	r0, r1, #3
 800d97e:	db02      	blt.n	800d986 <_printf_float+0x136>
 800d980:	6863      	ldr	r3, [r4, #4]
 800d982:	4299      	cmp	r1, r3
 800d984:	dd41      	ble.n	800da0a <_printf_float+0x1ba>
 800d986:	f1ab 0302 	sub.w	r3, fp, #2
 800d98a:	fa5f fb83 	uxtb.w	fp, r3
 800d98e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d992:	d820      	bhi.n	800d9d6 <_printf_float+0x186>
 800d994:	3901      	subs	r1, #1
 800d996:	465a      	mov	r2, fp
 800d998:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d99c:	9109      	str	r1, [sp, #36]	; 0x24
 800d99e:	f7ff ff19 	bl	800d7d4 <__exponent>
 800d9a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9a4:	1813      	adds	r3, r2, r0
 800d9a6:	2a01      	cmp	r2, #1
 800d9a8:	4681      	mov	r9, r0
 800d9aa:	6123      	str	r3, [r4, #16]
 800d9ac:	dc02      	bgt.n	800d9b4 <_printf_float+0x164>
 800d9ae:	6822      	ldr	r2, [r4, #0]
 800d9b0:	07d2      	lsls	r2, r2, #31
 800d9b2:	d501      	bpl.n	800d9b8 <_printf_float+0x168>
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	6123      	str	r3, [r4, #16]
 800d9b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d09c      	beq.n	800d8fa <_printf_float+0xaa>
 800d9c0:	232d      	movs	r3, #45	; 0x2d
 800d9c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9c6:	e798      	b.n	800d8fa <_printf_float+0xaa>
 800d9c8:	9a06      	ldr	r2, [sp, #24]
 800d9ca:	2a47      	cmp	r2, #71	; 0x47
 800d9cc:	d1be      	bne.n	800d94c <_printf_float+0xfc>
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1bc      	bne.n	800d94c <_printf_float+0xfc>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e7b9      	b.n	800d94a <_printf_float+0xfa>
 800d9d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d9da:	d118      	bne.n	800da0e <_printf_float+0x1be>
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	6863      	ldr	r3, [r4, #4]
 800d9e0:	dd0b      	ble.n	800d9fa <_printf_float+0x1aa>
 800d9e2:	6121      	str	r1, [r4, #16]
 800d9e4:	b913      	cbnz	r3, 800d9ec <_printf_float+0x19c>
 800d9e6:	6822      	ldr	r2, [r4, #0]
 800d9e8:	07d0      	lsls	r0, r2, #31
 800d9ea:	d502      	bpl.n	800d9f2 <_printf_float+0x1a2>
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	440b      	add	r3, r1
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9f4:	f04f 0900 	mov.w	r9, #0
 800d9f8:	e7de      	b.n	800d9b8 <_printf_float+0x168>
 800d9fa:	b913      	cbnz	r3, 800da02 <_printf_float+0x1b2>
 800d9fc:	6822      	ldr	r2, [r4, #0]
 800d9fe:	07d2      	lsls	r2, r2, #31
 800da00:	d501      	bpl.n	800da06 <_printf_float+0x1b6>
 800da02:	3302      	adds	r3, #2
 800da04:	e7f4      	b.n	800d9f0 <_printf_float+0x1a0>
 800da06:	2301      	movs	r3, #1
 800da08:	e7f2      	b.n	800d9f0 <_printf_float+0x1a0>
 800da0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da10:	4299      	cmp	r1, r3
 800da12:	db05      	blt.n	800da20 <_printf_float+0x1d0>
 800da14:	6823      	ldr	r3, [r4, #0]
 800da16:	6121      	str	r1, [r4, #16]
 800da18:	07d8      	lsls	r0, r3, #31
 800da1a:	d5ea      	bpl.n	800d9f2 <_printf_float+0x1a2>
 800da1c:	1c4b      	adds	r3, r1, #1
 800da1e:	e7e7      	b.n	800d9f0 <_printf_float+0x1a0>
 800da20:	2900      	cmp	r1, #0
 800da22:	bfd4      	ite	le
 800da24:	f1c1 0202 	rsble	r2, r1, #2
 800da28:	2201      	movgt	r2, #1
 800da2a:	4413      	add	r3, r2
 800da2c:	e7e0      	b.n	800d9f0 <_printf_float+0x1a0>
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	055a      	lsls	r2, r3, #21
 800da32:	d407      	bmi.n	800da44 <_printf_float+0x1f4>
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	4642      	mov	r2, r8
 800da38:	4631      	mov	r1, r6
 800da3a:	4628      	mov	r0, r5
 800da3c:	47b8      	blx	r7
 800da3e:	3001      	adds	r0, #1
 800da40:	d12c      	bne.n	800da9c <_printf_float+0x24c>
 800da42:	e764      	b.n	800d90e <_printf_float+0xbe>
 800da44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da48:	f240 80e0 	bls.w	800dc0c <_printf_float+0x3bc>
 800da4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da50:	2200      	movs	r2, #0
 800da52:	2300      	movs	r3, #0
 800da54:	f7f3 f858 	bl	8000b08 <__aeabi_dcmpeq>
 800da58:	2800      	cmp	r0, #0
 800da5a:	d034      	beq.n	800dac6 <_printf_float+0x276>
 800da5c:	4a37      	ldr	r2, [pc, #220]	; (800db3c <_printf_float+0x2ec>)
 800da5e:	2301      	movs	r3, #1
 800da60:	4631      	mov	r1, r6
 800da62:	4628      	mov	r0, r5
 800da64:	47b8      	blx	r7
 800da66:	3001      	adds	r0, #1
 800da68:	f43f af51 	beq.w	800d90e <_printf_float+0xbe>
 800da6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da70:	429a      	cmp	r2, r3
 800da72:	db02      	blt.n	800da7a <_printf_float+0x22a>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	07d8      	lsls	r0, r3, #31
 800da78:	d510      	bpl.n	800da9c <_printf_float+0x24c>
 800da7a:	ee18 3a10 	vmov	r3, s16
 800da7e:	4652      	mov	r2, sl
 800da80:	4631      	mov	r1, r6
 800da82:	4628      	mov	r0, r5
 800da84:	47b8      	blx	r7
 800da86:	3001      	adds	r0, #1
 800da88:	f43f af41 	beq.w	800d90e <_printf_float+0xbe>
 800da8c:	f04f 0800 	mov.w	r8, #0
 800da90:	f104 091a 	add.w	r9, r4, #26
 800da94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da96:	3b01      	subs	r3, #1
 800da98:	4543      	cmp	r3, r8
 800da9a:	dc09      	bgt.n	800dab0 <_printf_float+0x260>
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	079b      	lsls	r3, r3, #30
 800daa0:	f100 8107 	bmi.w	800dcb2 <_printf_float+0x462>
 800daa4:	68e0      	ldr	r0, [r4, #12]
 800daa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa8:	4298      	cmp	r0, r3
 800daaa:	bfb8      	it	lt
 800daac:	4618      	movlt	r0, r3
 800daae:	e730      	b.n	800d912 <_printf_float+0xc2>
 800dab0:	2301      	movs	r3, #1
 800dab2:	464a      	mov	r2, r9
 800dab4:	4631      	mov	r1, r6
 800dab6:	4628      	mov	r0, r5
 800dab8:	47b8      	blx	r7
 800daba:	3001      	adds	r0, #1
 800dabc:	f43f af27 	beq.w	800d90e <_printf_float+0xbe>
 800dac0:	f108 0801 	add.w	r8, r8, #1
 800dac4:	e7e6      	b.n	800da94 <_printf_float+0x244>
 800dac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dc39      	bgt.n	800db40 <_printf_float+0x2f0>
 800dacc:	4a1b      	ldr	r2, [pc, #108]	; (800db3c <_printf_float+0x2ec>)
 800dace:	2301      	movs	r3, #1
 800dad0:	4631      	mov	r1, r6
 800dad2:	4628      	mov	r0, r5
 800dad4:	47b8      	blx	r7
 800dad6:	3001      	adds	r0, #1
 800dad8:	f43f af19 	beq.w	800d90e <_printf_float+0xbe>
 800dadc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dae0:	4313      	orrs	r3, r2
 800dae2:	d102      	bne.n	800daea <_printf_float+0x29a>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	07d9      	lsls	r1, r3, #31
 800dae8:	d5d8      	bpl.n	800da9c <_printf_float+0x24c>
 800daea:	ee18 3a10 	vmov	r3, s16
 800daee:	4652      	mov	r2, sl
 800daf0:	4631      	mov	r1, r6
 800daf2:	4628      	mov	r0, r5
 800daf4:	47b8      	blx	r7
 800daf6:	3001      	adds	r0, #1
 800daf8:	f43f af09 	beq.w	800d90e <_printf_float+0xbe>
 800dafc:	f04f 0900 	mov.w	r9, #0
 800db00:	f104 0a1a 	add.w	sl, r4, #26
 800db04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db06:	425b      	negs	r3, r3
 800db08:	454b      	cmp	r3, r9
 800db0a:	dc01      	bgt.n	800db10 <_printf_float+0x2c0>
 800db0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db0e:	e792      	b.n	800da36 <_printf_float+0x1e6>
 800db10:	2301      	movs	r3, #1
 800db12:	4652      	mov	r2, sl
 800db14:	4631      	mov	r1, r6
 800db16:	4628      	mov	r0, r5
 800db18:	47b8      	blx	r7
 800db1a:	3001      	adds	r0, #1
 800db1c:	f43f aef7 	beq.w	800d90e <_printf_float+0xbe>
 800db20:	f109 0901 	add.w	r9, r9, #1
 800db24:	e7ee      	b.n	800db04 <_printf_float+0x2b4>
 800db26:	bf00      	nop
 800db28:	7fefffff 	.word	0x7fefffff
 800db2c:	080129b8 	.word	0x080129b8
 800db30:	080129bc 	.word	0x080129bc
 800db34:	080129c0 	.word	0x080129c0
 800db38:	080129c4 	.word	0x080129c4
 800db3c:	08012d50 	.word	0x08012d50
 800db40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db44:	429a      	cmp	r2, r3
 800db46:	bfa8      	it	ge
 800db48:	461a      	movge	r2, r3
 800db4a:	2a00      	cmp	r2, #0
 800db4c:	4691      	mov	r9, r2
 800db4e:	dc37      	bgt.n	800dbc0 <_printf_float+0x370>
 800db50:	f04f 0b00 	mov.w	fp, #0
 800db54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db58:	f104 021a 	add.w	r2, r4, #26
 800db5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db5e:	9305      	str	r3, [sp, #20]
 800db60:	eba3 0309 	sub.w	r3, r3, r9
 800db64:	455b      	cmp	r3, fp
 800db66:	dc33      	bgt.n	800dbd0 <_printf_float+0x380>
 800db68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db6c:	429a      	cmp	r2, r3
 800db6e:	db3b      	blt.n	800dbe8 <_printf_float+0x398>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	07da      	lsls	r2, r3, #31
 800db74:	d438      	bmi.n	800dbe8 <_printf_float+0x398>
 800db76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800db7a:	eba2 0903 	sub.w	r9, r2, r3
 800db7e:	9b05      	ldr	r3, [sp, #20]
 800db80:	1ad2      	subs	r2, r2, r3
 800db82:	4591      	cmp	r9, r2
 800db84:	bfa8      	it	ge
 800db86:	4691      	movge	r9, r2
 800db88:	f1b9 0f00 	cmp.w	r9, #0
 800db8c:	dc35      	bgt.n	800dbfa <_printf_float+0x3aa>
 800db8e:	f04f 0800 	mov.w	r8, #0
 800db92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db96:	f104 0a1a 	add.w	sl, r4, #26
 800db9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db9e:	1a9b      	subs	r3, r3, r2
 800dba0:	eba3 0309 	sub.w	r3, r3, r9
 800dba4:	4543      	cmp	r3, r8
 800dba6:	f77f af79 	ble.w	800da9c <_printf_float+0x24c>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	4652      	mov	r2, sl
 800dbae:	4631      	mov	r1, r6
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	47b8      	blx	r7
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	f43f aeaa 	beq.w	800d90e <_printf_float+0xbe>
 800dbba:	f108 0801 	add.w	r8, r8, #1
 800dbbe:	e7ec      	b.n	800db9a <_printf_float+0x34a>
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	4642      	mov	r2, r8
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47b8      	blx	r7
 800dbca:	3001      	adds	r0, #1
 800dbcc:	d1c0      	bne.n	800db50 <_printf_float+0x300>
 800dbce:	e69e      	b.n	800d90e <_printf_float+0xbe>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	9205      	str	r2, [sp, #20]
 800dbd8:	47b8      	blx	r7
 800dbda:	3001      	adds	r0, #1
 800dbdc:	f43f ae97 	beq.w	800d90e <_printf_float+0xbe>
 800dbe0:	9a05      	ldr	r2, [sp, #20]
 800dbe2:	f10b 0b01 	add.w	fp, fp, #1
 800dbe6:	e7b9      	b.n	800db5c <_printf_float+0x30c>
 800dbe8:	ee18 3a10 	vmov	r3, s16
 800dbec:	4652      	mov	r2, sl
 800dbee:	4631      	mov	r1, r6
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	47b8      	blx	r7
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	d1be      	bne.n	800db76 <_printf_float+0x326>
 800dbf8:	e689      	b.n	800d90e <_printf_float+0xbe>
 800dbfa:	9a05      	ldr	r2, [sp, #20]
 800dbfc:	464b      	mov	r3, r9
 800dbfe:	4442      	add	r2, r8
 800dc00:	4631      	mov	r1, r6
 800dc02:	4628      	mov	r0, r5
 800dc04:	47b8      	blx	r7
 800dc06:	3001      	adds	r0, #1
 800dc08:	d1c1      	bne.n	800db8e <_printf_float+0x33e>
 800dc0a:	e680      	b.n	800d90e <_printf_float+0xbe>
 800dc0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc0e:	2a01      	cmp	r2, #1
 800dc10:	dc01      	bgt.n	800dc16 <_printf_float+0x3c6>
 800dc12:	07db      	lsls	r3, r3, #31
 800dc14:	d53a      	bpl.n	800dc8c <_printf_float+0x43c>
 800dc16:	2301      	movs	r3, #1
 800dc18:	4642      	mov	r2, r8
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	47b8      	blx	r7
 800dc20:	3001      	adds	r0, #1
 800dc22:	f43f ae74 	beq.w	800d90e <_printf_float+0xbe>
 800dc26:	ee18 3a10 	vmov	r3, s16
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4628      	mov	r0, r5
 800dc30:	47b8      	blx	r7
 800dc32:	3001      	adds	r0, #1
 800dc34:	f43f ae6b 	beq.w	800d90e <_printf_float+0xbe>
 800dc38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2300      	movs	r3, #0
 800dc40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dc44:	f7f2 ff60 	bl	8000b08 <__aeabi_dcmpeq>
 800dc48:	b9d8      	cbnz	r0, 800dc82 <_printf_float+0x432>
 800dc4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dc4e:	f108 0201 	add.w	r2, r8, #1
 800dc52:	4631      	mov	r1, r6
 800dc54:	4628      	mov	r0, r5
 800dc56:	47b8      	blx	r7
 800dc58:	3001      	adds	r0, #1
 800dc5a:	d10e      	bne.n	800dc7a <_printf_float+0x42a>
 800dc5c:	e657      	b.n	800d90e <_printf_float+0xbe>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	4652      	mov	r2, sl
 800dc62:	4631      	mov	r1, r6
 800dc64:	4628      	mov	r0, r5
 800dc66:	47b8      	blx	r7
 800dc68:	3001      	adds	r0, #1
 800dc6a:	f43f ae50 	beq.w	800d90e <_printf_float+0xbe>
 800dc6e:	f108 0801 	add.w	r8, r8, #1
 800dc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc74:	3b01      	subs	r3, #1
 800dc76:	4543      	cmp	r3, r8
 800dc78:	dcf1      	bgt.n	800dc5e <_printf_float+0x40e>
 800dc7a:	464b      	mov	r3, r9
 800dc7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc80:	e6da      	b.n	800da38 <_printf_float+0x1e8>
 800dc82:	f04f 0800 	mov.w	r8, #0
 800dc86:	f104 0a1a 	add.w	sl, r4, #26
 800dc8a:	e7f2      	b.n	800dc72 <_printf_float+0x422>
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	4642      	mov	r2, r8
 800dc90:	e7df      	b.n	800dc52 <_printf_float+0x402>
 800dc92:	2301      	movs	r3, #1
 800dc94:	464a      	mov	r2, r9
 800dc96:	4631      	mov	r1, r6
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b8      	blx	r7
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	f43f ae36 	beq.w	800d90e <_printf_float+0xbe>
 800dca2:	f108 0801 	add.w	r8, r8, #1
 800dca6:	68e3      	ldr	r3, [r4, #12]
 800dca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcaa:	1a5b      	subs	r3, r3, r1
 800dcac:	4543      	cmp	r3, r8
 800dcae:	dcf0      	bgt.n	800dc92 <_printf_float+0x442>
 800dcb0:	e6f8      	b.n	800daa4 <_printf_float+0x254>
 800dcb2:	f04f 0800 	mov.w	r8, #0
 800dcb6:	f104 0919 	add.w	r9, r4, #25
 800dcba:	e7f4      	b.n	800dca6 <_printf_float+0x456>

0800dcbc <_printf_common>:
 800dcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc0:	4616      	mov	r6, r2
 800dcc2:	4699      	mov	r9, r3
 800dcc4:	688a      	ldr	r2, [r1, #8]
 800dcc6:	690b      	ldr	r3, [r1, #16]
 800dcc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dccc:	4293      	cmp	r3, r2
 800dcce:	bfb8      	it	lt
 800dcd0:	4613      	movlt	r3, r2
 800dcd2:	6033      	str	r3, [r6, #0]
 800dcd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcd8:	4607      	mov	r7, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	b10a      	cbz	r2, 800dce2 <_printf_common+0x26>
 800dcde:	3301      	adds	r3, #1
 800dce0:	6033      	str	r3, [r6, #0]
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	0699      	lsls	r1, r3, #26
 800dce6:	bf42      	ittt	mi
 800dce8:	6833      	ldrmi	r3, [r6, #0]
 800dcea:	3302      	addmi	r3, #2
 800dcec:	6033      	strmi	r3, [r6, #0]
 800dcee:	6825      	ldr	r5, [r4, #0]
 800dcf0:	f015 0506 	ands.w	r5, r5, #6
 800dcf4:	d106      	bne.n	800dd04 <_printf_common+0x48>
 800dcf6:	f104 0a19 	add.w	sl, r4, #25
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	6832      	ldr	r2, [r6, #0]
 800dcfe:	1a9b      	subs	r3, r3, r2
 800dd00:	42ab      	cmp	r3, r5
 800dd02:	dc26      	bgt.n	800dd52 <_printf_common+0x96>
 800dd04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd08:	1e13      	subs	r3, r2, #0
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	bf18      	it	ne
 800dd0e:	2301      	movne	r3, #1
 800dd10:	0692      	lsls	r2, r2, #26
 800dd12:	d42b      	bmi.n	800dd6c <_printf_common+0xb0>
 800dd14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd18:	4649      	mov	r1, r9
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	47c0      	blx	r8
 800dd1e:	3001      	adds	r0, #1
 800dd20:	d01e      	beq.n	800dd60 <_printf_common+0xa4>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	6922      	ldr	r2, [r4, #16]
 800dd26:	f003 0306 	and.w	r3, r3, #6
 800dd2a:	2b04      	cmp	r3, #4
 800dd2c:	bf02      	ittt	eq
 800dd2e:	68e5      	ldreq	r5, [r4, #12]
 800dd30:	6833      	ldreq	r3, [r6, #0]
 800dd32:	1aed      	subeq	r5, r5, r3
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	bf0c      	ite	eq
 800dd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd3c:	2500      	movne	r5, #0
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	bfc4      	itt	gt
 800dd42:	1a9b      	subgt	r3, r3, r2
 800dd44:	18ed      	addgt	r5, r5, r3
 800dd46:	2600      	movs	r6, #0
 800dd48:	341a      	adds	r4, #26
 800dd4a:	42b5      	cmp	r5, r6
 800dd4c:	d11a      	bne.n	800dd84 <_printf_common+0xc8>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e008      	b.n	800dd64 <_printf_common+0xa8>
 800dd52:	2301      	movs	r3, #1
 800dd54:	4652      	mov	r2, sl
 800dd56:	4649      	mov	r1, r9
 800dd58:	4638      	mov	r0, r7
 800dd5a:	47c0      	blx	r8
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d103      	bne.n	800dd68 <_printf_common+0xac>
 800dd60:	f04f 30ff 	mov.w	r0, #4294967295
 800dd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd68:	3501      	adds	r5, #1
 800dd6a:	e7c6      	b.n	800dcfa <_printf_common+0x3e>
 800dd6c:	18e1      	adds	r1, r4, r3
 800dd6e:	1c5a      	adds	r2, r3, #1
 800dd70:	2030      	movs	r0, #48	; 0x30
 800dd72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd76:	4422      	add	r2, r4
 800dd78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd80:	3302      	adds	r3, #2
 800dd82:	e7c7      	b.n	800dd14 <_printf_common+0x58>
 800dd84:	2301      	movs	r3, #1
 800dd86:	4622      	mov	r2, r4
 800dd88:	4649      	mov	r1, r9
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	47c0      	blx	r8
 800dd8e:	3001      	adds	r0, #1
 800dd90:	d0e6      	beq.n	800dd60 <_printf_common+0xa4>
 800dd92:	3601      	adds	r6, #1
 800dd94:	e7d9      	b.n	800dd4a <_printf_common+0x8e>
	...

0800dd98 <_printf_i>:
 800dd98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9c:	7e0f      	ldrb	r7, [r1, #24]
 800dd9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dda0:	2f78      	cmp	r7, #120	; 0x78
 800dda2:	4691      	mov	r9, r2
 800dda4:	4680      	mov	r8, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	469a      	mov	sl, r3
 800ddaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddae:	d807      	bhi.n	800ddc0 <_printf_i+0x28>
 800ddb0:	2f62      	cmp	r7, #98	; 0x62
 800ddb2:	d80a      	bhi.n	800ddca <_printf_i+0x32>
 800ddb4:	2f00      	cmp	r7, #0
 800ddb6:	f000 80d4 	beq.w	800df62 <_printf_i+0x1ca>
 800ddba:	2f58      	cmp	r7, #88	; 0x58
 800ddbc:	f000 80c0 	beq.w	800df40 <_printf_i+0x1a8>
 800ddc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ddc8:	e03a      	b.n	800de40 <_printf_i+0xa8>
 800ddca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddce:	2b15      	cmp	r3, #21
 800ddd0:	d8f6      	bhi.n	800ddc0 <_printf_i+0x28>
 800ddd2:	a101      	add	r1, pc, #4	; (adr r1, 800ddd8 <_printf_i+0x40>)
 800ddd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddd8:	0800de31 	.word	0x0800de31
 800dddc:	0800de45 	.word	0x0800de45
 800dde0:	0800ddc1 	.word	0x0800ddc1
 800dde4:	0800ddc1 	.word	0x0800ddc1
 800dde8:	0800ddc1 	.word	0x0800ddc1
 800ddec:	0800ddc1 	.word	0x0800ddc1
 800ddf0:	0800de45 	.word	0x0800de45
 800ddf4:	0800ddc1 	.word	0x0800ddc1
 800ddf8:	0800ddc1 	.word	0x0800ddc1
 800ddfc:	0800ddc1 	.word	0x0800ddc1
 800de00:	0800ddc1 	.word	0x0800ddc1
 800de04:	0800df49 	.word	0x0800df49
 800de08:	0800de71 	.word	0x0800de71
 800de0c:	0800df03 	.word	0x0800df03
 800de10:	0800ddc1 	.word	0x0800ddc1
 800de14:	0800ddc1 	.word	0x0800ddc1
 800de18:	0800df6b 	.word	0x0800df6b
 800de1c:	0800ddc1 	.word	0x0800ddc1
 800de20:	0800de71 	.word	0x0800de71
 800de24:	0800ddc1 	.word	0x0800ddc1
 800de28:	0800ddc1 	.word	0x0800ddc1
 800de2c:	0800df0b 	.word	0x0800df0b
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	1d1a      	adds	r2, r3, #4
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	602a      	str	r2, [r5, #0]
 800de38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de40:	2301      	movs	r3, #1
 800de42:	e09f      	b.n	800df84 <_printf_i+0x1ec>
 800de44:	6820      	ldr	r0, [r4, #0]
 800de46:	682b      	ldr	r3, [r5, #0]
 800de48:	0607      	lsls	r7, r0, #24
 800de4a:	f103 0104 	add.w	r1, r3, #4
 800de4e:	6029      	str	r1, [r5, #0]
 800de50:	d501      	bpl.n	800de56 <_printf_i+0xbe>
 800de52:	681e      	ldr	r6, [r3, #0]
 800de54:	e003      	b.n	800de5e <_printf_i+0xc6>
 800de56:	0646      	lsls	r6, r0, #25
 800de58:	d5fb      	bpl.n	800de52 <_printf_i+0xba>
 800de5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de5e:	2e00      	cmp	r6, #0
 800de60:	da03      	bge.n	800de6a <_printf_i+0xd2>
 800de62:	232d      	movs	r3, #45	; 0x2d
 800de64:	4276      	negs	r6, r6
 800de66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de6a:	485a      	ldr	r0, [pc, #360]	; (800dfd4 <_printf_i+0x23c>)
 800de6c:	230a      	movs	r3, #10
 800de6e:	e012      	b.n	800de96 <_printf_i+0xfe>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	6820      	ldr	r0, [r4, #0]
 800de74:	1d19      	adds	r1, r3, #4
 800de76:	6029      	str	r1, [r5, #0]
 800de78:	0605      	lsls	r5, r0, #24
 800de7a:	d501      	bpl.n	800de80 <_printf_i+0xe8>
 800de7c:	681e      	ldr	r6, [r3, #0]
 800de7e:	e002      	b.n	800de86 <_printf_i+0xee>
 800de80:	0641      	lsls	r1, r0, #25
 800de82:	d5fb      	bpl.n	800de7c <_printf_i+0xe4>
 800de84:	881e      	ldrh	r6, [r3, #0]
 800de86:	4853      	ldr	r0, [pc, #332]	; (800dfd4 <_printf_i+0x23c>)
 800de88:	2f6f      	cmp	r7, #111	; 0x6f
 800de8a:	bf0c      	ite	eq
 800de8c:	2308      	moveq	r3, #8
 800de8e:	230a      	movne	r3, #10
 800de90:	2100      	movs	r1, #0
 800de92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de96:	6865      	ldr	r5, [r4, #4]
 800de98:	60a5      	str	r5, [r4, #8]
 800de9a:	2d00      	cmp	r5, #0
 800de9c:	bfa2      	ittt	ge
 800de9e:	6821      	ldrge	r1, [r4, #0]
 800dea0:	f021 0104 	bicge.w	r1, r1, #4
 800dea4:	6021      	strge	r1, [r4, #0]
 800dea6:	b90e      	cbnz	r6, 800deac <_printf_i+0x114>
 800dea8:	2d00      	cmp	r5, #0
 800deaa:	d04b      	beq.n	800df44 <_printf_i+0x1ac>
 800deac:	4615      	mov	r5, r2
 800deae:	fbb6 f1f3 	udiv	r1, r6, r3
 800deb2:	fb03 6711 	mls	r7, r3, r1, r6
 800deb6:	5dc7      	ldrb	r7, [r0, r7]
 800deb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800debc:	4637      	mov	r7, r6
 800debe:	42bb      	cmp	r3, r7
 800dec0:	460e      	mov	r6, r1
 800dec2:	d9f4      	bls.n	800deae <_printf_i+0x116>
 800dec4:	2b08      	cmp	r3, #8
 800dec6:	d10b      	bne.n	800dee0 <_printf_i+0x148>
 800dec8:	6823      	ldr	r3, [r4, #0]
 800deca:	07de      	lsls	r6, r3, #31
 800decc:	d508      	bpl.n	800dee0 <_printf_i+0x148>
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	6861      	ldr	r1, [r4, #4]
 800ded2:	4299      	cmp	r1, r3
 800ded4:	bfde      	ittt	le
 800ded6:	2330      	movle	r3, #48	; 0x30
 800ded8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dedc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dee0:	1b52      	subs	r2, r2, r5
 800dee2:	6122      	str	r2, [r4, #16]
 800dee4:	f8cd a000 	str.w	sl, [sp]
 800dee8:	464b      	mov	r3, r9
 800deea:	aa03      	add	r2, sp, #12
 800deec:	4621      	mov	r1, r4
 800deee:	4640      	mov	r0, r8
 800def0:	f7ff fee4 	bl	800dcbc <_printf_common>
 800def4:	3001      	adds	r0, #1
 800def6:	d14a      	bne.n	800df8e <_printf_i+0x1f6>
 800def8:	f04f 30ff 	mov.w	r0, #4294967295
 800defc:	b004      	add	sp, #16
 800defe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	f043 0320 	orr.w	r3, r3, #32
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	4833      	ldr	r0, [pc, #204]	; (800dfd8 <_printf_i+0x240>)
 800df0c:	2778      	movs	r7, #120	; 0x78
 800df0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	6829      	ldr	r1, [r5, #0]
 800df16:	061f      	lsls	r7, r3, #24
 800df18:	f851 6b04 	ldr.w	r6, [r1], #4
 800df1c:	d402      	bmi.n	800df24 <_printf_i+0x18c>
 800df1e:	065f      	lsls	r7, r3, #25
 800df20:	bf48      	it	mi
 800df22:	b2b6      	uxthmi	r6, r6
 800df24:	07df      	lsls	r7, r3, #31
 800df26:	bf48      	it	mi
 800df28:	f043 0320 	orrmi.w	r3, r3, #32
 800df2c:	6029      	str	r1, [r5, #0]
 800df2e:	bf48      	it	mi
 800df30:	6023      	strmi	r3, [r4, #0]
 800df32:	b91e      	cbnz	r6, 800df3c <_printf_i+0x1a4>
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	f023 0320 	bic.w	r3, r3, #32
 800df3a:	6023      	str	r3, [r4, #0]
 800df3c:	2310      	movs	r3, #16
 800df3e:	e7a7      	b.n	800de90 <_printf_i+0xf8>
 800df40:	4824      	ldr	r0, [pc, #144]	; (800dfd4 <_printf_i+0x23c>)
 800df42:	e7e4      	b.n	800df0e <_printf_i+0x176>
 800df44:	4615      	mov	r5, r2
 800df46:	e7bd      	b.n	800dec4 <_printf_i+0x12c>
 800df48:	682b      	ldr	r3, [r5, #0]
 800df4a:	6826      	ldr	r6, [r4, #0]
 800df4c:	6961      	ldr	r1, [r4, #20]
 800df4e:	1d18      	adds	r0, r3, #4
 800df50:	6028      	str	r0, [r5, #0]
 800df52:	0635      	lsls	r5, r6, #24
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	d501      	bpl.n	800df5c <_printf_i+0x1c4>
 800df58:	6019      	str	r1, [r3, #0]
 800df5a:	e002      	b.n	800df62 <_printf_i+0x1ca>
 800df5c:	0670      	lsls	r0, r6, #25
 800df5e:	d5fb      	bpl.n	800df58 <_printf_i+0x1c0>
 800df60:	8019      	strh	r1, [r3, #0]
 800df62:	2300      	movs	r3, #0
 800df64:	6123      	str	r3, [r4, #16]
 800df66:	4615      	mov	r5, r2
 800df68:	e7bc      	b.n	800dee4 <_printf_i+0x14c>
 800df6a:	682b      	ldr	r3, [r5, #0]
 800df6c:	1d1a      	adds	r2, r3, #4
 800df6e:	602a      	str	r2, [r5, #0]
 800df70:	681d      	ldr	r5, [r3, #0]
 800df72:	6862      	ldr	r2, [r4, #4]
 800df74:	2100      	movs	r1, #0
 800df76:	4628      	mov	r0, r5
 800df78:	f7f2 f94a 	bl	8000210 <memchr>
 800df7c:	b108      	cbz	r0, 800df82 <_printf_i+0x1ea>
 800df7e:	1b40      	subs	r0, r0, r5
 800df80:	6060      	str	r0, [r4, #4]
 800df82:	6863      	ldr	r3, [r4, #4]
 800df84:	6123      	str	r3, [r4, #16]
 800df86:	2300      	movs	r3, #0
 800df88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df8c:	e7aa      	b.n	800dee4 <_printf_i+0x14c>
 800df8e:	6923      	ldr	r3, [r4, #16]
 800df90:	462a      	mov	r2, r5
 800df92:	4649      	mov	r1, r9
 800df94:	4640      	mov	r0, r8
 800df96:	47d0      	blx	sl
 800df98:	3001      	adds	r0, #1
 800df9a:	d0ad      	beq.n	800def8 <_printf_i+0x160>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	079b      	lsls	r3, r3, #30
 800dfa0:	d413      	bmi.n	800dfca <_printf_i+0x232>
 800dfa2:	68e0      	ldr	r0, [r4, #12]
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	4298      	cmp	r0, r3
 800dfa8:	bfb8      	it	lt
 800dfaa:	4618      	movlt	r0, r3
 800dfac:	e7a6      	b.n	800defc <_printf_i+0x164>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	4649      	mov	r1, r9
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	47d0      	blx	sl
 800dfb8:	3001      	adds	r0, #1
 800dfba:	d09d      	beq.n	800def8 <_printf_i+0x160>
 800dfbc:	3501      	adds	r5, #1
 800dfbe:	68e3      	ldr	r3, [r4, #12]
 800dfc0:	9903      	ldr	r1, [sp, #12]
 800dfc2:	1a5b      	subs	r3, r3, r1
 800dfc4:	42ab      	cmp	r3, r5
 800dfc6:	dcf2      	bgt.n	800dfae <_printf_i+0x216>
 800dfc8:	e7eb      	b.n	800dfa2 <_printf_i+0x20a>
 800dfca:	2500      	movs	r5, #0
 800dfcc:	f104 0619 	add.w	r6, r4, #25
 800dfd0:	e7f5      	b.n	800dfbe <_printf_i+0x226>
 800dfd2:	bf00      	nop
 800dfd4:	080129c8 	.word	0x080129c8
 800dfd8:	080129d9 	.word	0x080129d9

0800dfdc <_scanf_float>:
 800dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe0:	b087      	sub	sp, #28
 800dfe2:	4617      	mov	r7, r2
 800dfe4:	9303      	str	r3, [sp, #12]
 800dfe6:	688b      	ldr	r3, [r1, #8]
 800dfe8:	1e5a      	subs	r2, r3, #1
 800dfea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dfee:	bf83      	ittte	hi
 800dff0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dff4:	195b      	addhi	r3, r3, r5
 800dff6:	9302      	strhi	r3, [sp, #8]
 800dff8:	2300      	movls	r3, #0
 800dffa:	bf86      	itte	hi
 800dffc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e000:	608b      	strhi	r3, [r1, #8]
 800e002:	9302      	strls	r3, [sp, #8]
 800e004:	680b      	ldr	r3, [r1, #0]
 800e006:	468b      	mov	fp, r1
 800e008:	2500      	movs	r5, #0
 800e00a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e00e:	f84b 3b1c 	str.w	r3, [fp], #28
 800e012:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e016:	4680      	mov	r8, r0
 800e018:	460c      	mov	r4, r1
 800e01a:	465e      	mov	r6, fp
 800e01c:	46aa      	mov	sl, r5
 800e01e:	46a9      	mov	r9, r5
 800e020:	9501      	str	r5, [sp, #4]
 800e022:	68a2      	ldr	r2, [r4, #8]
 800e024:	b152      	cbz	r2, 800e03c <_scanf_float+0x60>
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b4e      	cmp	r3, #78	; 0x4e
 800e02c:	d864      	bhi.n	800e0f8 <_scanf_float+0x11c>
 800e02e:	2b40      	cmp	r3, #64	; 0x40
 800e030:	d83c      	bhi.n	800e0ac <_scanf_float+0xd0>
 800e032:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e036:	b2c8      	uxtb	r0, r1
 800e038:	280e      	cmp	r0, #14
 800e03a:	d93a      	bls.n	800e0b2 <_scanf_float+0xd6>
 800e03c:	f1b9 0f00 	cmp.w	r9, #0
 800e040:	d003      	beq.n	800e04a <_scanf_float+0x6e>
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e04e:	f1ba 0f01 	cmp.w	sl, #1
 800e052:	f200 8113 	bhi.w	800e27c <_scanf_float+0x2a0>
 800e056:	455e      	cmp	r6, fp
 800e058:	f200 8105 	bhi.w	800e266 <_scanf_float+0x28a>
 800e05c:	2501      	movs	r5, #1
 800e05e:	4628      	mov	r0, r5
 800e060:	b007      	add	sp, #28
 800e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e066:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e06a:	2a0d      	cmp	r2, #13
 800e06c:	d8e6      	bhi.n	800e03c <_scanf_float+0x60>
 800e06e:	a101      	add	r1, pc, #4	; (adr r1, 800e074 <_scanf_float+0x98>)
 800e070:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e074:	0800e1b3 	.word	0x0800e1b3
 800e078:	0800e03d 	.word	0x0800e03d
 800e07c:	0800e03d 	.word	0x0800e03d
 800e080:	0800e03d 	.word	0x0800e03d
 800e084:	0800e213 	.word	0x0800e213
 800e088:	0800e1eb 	.word	0x0800e1eb
 800e08c:	0800e03d 	.word	0x0800e03d
 800e090:	0800e03d 	.word	0x0800e03d
 800e094:	0800e1c1 	.word	0x0800e1c1
 800e098:	0800e03d 	.word	0x0800e03d
 800e09c:	0800e03d 	.word	0x0800e03d
 800e0a0:	0800e03d 	.word	0x0800e03d
 800e0a4:	0800e03d 	.word	0x0800e03d
 800e0a8:	0800e179 	.word	0x0800e179
 800e0ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e0b0:	e7db      	b.n	800e06a <_scanf_float+0x8e>
 800e0b2:	290e      	cmp	r1, #14
 800e0b4:	d8c2      	bhi.n	800e03c <_scanf_float+0x60>
 800e0b6:	a001      	add	r0, pc, #4	; (adr r0, 800e0bc <_scanf_float+0xe0>)
 800e0b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e0bc:	0800e16b 	.word	0x0800e16b
 800e0c0:	0800e03d 	.word	0x0800e03d
 800e0c4:	0800e16b 	.word	0x0800e16b
 800e0c8:	0800e1ff 	.word	0x0800e1ff
 800e0cc:	0800e03d 	.word	0x0800e03d
 800e0d0:	0800e119 	.word	0x0800e119
 800e0d4:	0800e155 	.word	0x0800e155
 800e0d8:	0800e155 	.word	0x0800e155
 800e0dc:	0800e155 	.word	0x0800e155
 800e0e0:	0800e155 	.word	0x0800e155
 800e0e4:	0800e155 	.word	0x0800e155
 800e0e8:	0800e155 	.word	0x0800e155
 800e0ec:	0800e155 	.word	0x0800e155
 800e0f0:	0800e155 	.word	0x0800e155
 800e0f4:	0800e155 	.word	0x0800e155
 800e0f8:	2b6e      	cmp	r3, #110	; 0x6e
 800e0fa:	d809      	bhi.n	800e110 <_scanf_float+0x134>
 800e0fc:	2b60      	cmp	r3, #96	; 0x60
 800e0fe:	d8b2      	bhi.n	800e066 <_scanf_float+0x8a>
 800e100:	2b54      	cmp	r3, #84	; 0x54
 800e102:	d077      	beq.n	800e1f4 <_scanf_float+0x218>
 800e104:	2b59      	cmp	r3, #89	; 0x59
 800e106:	d199      	bne.n	800e03c <_scanf_float+0x60>
 800e108:	2d07      	cmp	r5, #7
 800e10a:	d197      	bne.n	800e03c <_scanf_float+0x60>
 800e10c:	2508      	movs	r5, #8
 800e10e:	e029      	b.n	800e164 <_scanf_float+0x188>
 800e110:	2b74      	cmp	r3, #116	; 0x74
 800e112:	d06f      	beq.n	800e1f4 <_scanf_float+0x218>
 800e114:	2b79      	cmp	r3, #121	; 0x79
 800e116:	e7f6      	b.n	800e106 <_scanf_float+0x12a>
 800e118:	6821      	ldr	r1, [r4, #0]
 800e11a:	05c8      	lsls	r0, r1, #23
 800e11c:	d51a      	bpl.n	800e154 <_scanf_float+0x178>
 800e11e:	9b02      	ldr	r3, [sp, #8]
 800e120:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e124:	6021      	str	r1, [r4, #0]
 800e126:	f109 0901 	add.w	r9, r9, #1
 800e12a:	b11b      	cbz	r3, 800e134 <_scanf_float+0x158>
 800e12c:	3b01      	subs	r3, #1
 800e12e:	3201      	adds	r2, #1
 800e130:	9302      	str	r3, [sp, #8]
 800e132:	60a2      	str	r2, [r4, #8]
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	3b01      	subs	r3, #1
 800e138:	60a3      	str	r3, [r4, #8]
 800e13a:	6923      	ldr	r3, [r4, #16]
 800e13c:	3301      	adds	r3, #1
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3b01      	subs	r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	607b      	str	r3, [r7, #4]
 800e148:	f340 8084 	ble.w	800e254 <_scanf_float+0x278>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	3301      	adds	r3, #1
 800e150:	603b      	str	r3, [r7, #0]
 800e152:	e766      	b.n	800e022 <_scanf_float+0x46>
 800e154:	eb1a 0f05 	cmn.w	sl, r5
 800e158:	f47f af70 	bne.w	800e03c <_scanf_float+0x60>
 800e15c:	6822      	ldr	r2, [r4, #0]
 800e15e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e162:	6022      	str	r2, [r4, #0]
 800e164:	f806 3b01 	strb.w	r3, [r6], #1
 800e168:	e7e4      	b.n	800e134 <_scanf_float+0x158>
 800e16a:	6822      	ldr	r2, [r4, #0]
 800e16c:	0610      	lsls	r0, r2, #24
 800e16e:	f57f af65 	bpl.w	800e03c <_scanf_float+0x60>
 800e172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e176:	e7f4      	b.n	800e162 <_scanf_float+0x186>
 800e178:	f1ba 0f00 	cmp.w	sl, #0
 800e17c:	d10e      	bne.n	800e19c <_scanf_float+0x1c0>
 800e17e:	f1b9 0f00 	cmp.w	r9, #0
 800e182:	d10e      	bne.n	800e1a2 <_scanf_float+0x1c6>
 800e184:	6822      	ldr	r2, [r4, #0]
 800e186:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e18a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e18e:	d108      	bne.n	800e1a2 <_scanf_float+0x1c6>
 800e190:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e194:	6022      	str	r2, [r4, #0]
 800e196:	f04f 0a01 	mov.w	sl, #1
 800e19a:	e7e3      	b.n	800e164 <_scanf_float+0x188>
 800e19c:	f1ba 0f02 	cmp.w	sl, #2
 800e1a0:	d055      	beq.n	800e24e <_scanf_float+0x272>
 800e1a2:	2d01      	cmp	r5, #1
 800e1a4:	d002      	beq.n	800e1ac <_scanf_float+0x1d0>
 800e1a6:	2d04      	cmp	r5, #4
 800e1a8:	f47f af48 	bne.w	800e03c <_scanf_float+0x60>
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	b2ed      	uxtb	r5, r5
 800e1b0:	e7d8      	b.n	800e164 <_scanf_float+0x188>
 800e1b2:	f1ba 0f01 	cmp.w	sl, #1
 800e1b6:	f47f af41 	bne.w	800e03c <_scanf_float+0x60>
 800e1ba:	f04f 0a02 	mov.w	sl, #2
 800e1be:	e7d1      	b.n	800e164 <_scanf_float+0x188>
 800e1c0:	b97d      	cbnz	r5, 800e1e2 <_scanf_float+0x206>
 800e1c2:	f1b9 0f00 	cmp.w	r9, #0
 800e1c6:	f47f af3c 	bne.w	800e042 <_scanf_float+0x66>
 800e1ca:	6822      	ldr	r2, [r4, #0]
 800e1cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e1d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e1d4:	f47f af39 	bne.w	800e04a <_scanf_float+0x6e>
 800e1d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e1dc:	6022      	str	r2, [r4, #0]
 800e1de:	2501      	movs	r5, #1
 800e1e0:	e7c0      	b.n	800e164 <_scanf_float+0x188>
 800e1e2:	2d03      	cmp	r5, #3
 800e1e4:	d0e2      	beq.n	800e1ac <_scanf_float+0x1d0>
 800e1e6:	2d05      	cmp	r5, #5
 800e1e8:	e7de      	b.n	800e1a8 <_scanf_float+0x1cc>
 800e1ea:	2d02      	cmp	r5, #2
 800e1ec:	f47f af26 	bne.w	800e03c <_scanf_float+0x60>
 800e1f0:	2503      	movs	r5, #3
 800e1f2:	e7b7      	b.n	800e164 <_scanf_float+0x188>
 800e1f4:	2d06      	cmp	r5, #6
 800e1f6:	f47f af21 	bne.w	800e03c <_scanf_float+0x60>
 800e1fa:	2507      	movs	r5, #7
 800e1fc:	e7b2      	b.n	800e164 <_scanf_float+0x188>
 800e1fe:	6822      	ldr	r2, [r4, #0]
 800e200:	0591      	lsls	r1, r2, #22
 800e202:	f57f af1b 	bpl.w	800e03c <_scanf_float+0x60>
 800e206:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e20a:	6022      	str	r2, [r4, #0]
 800e20c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e210:	e7a8      	b.n	800e164 <_scanf_float+0x188>
 800e212:	6822      	ldr	r2, [r4, #0]
 800e214:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e218:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e21c:	d006      	beq.n	800e22c <_scanf_float+0x250>
 800e21e:	0550      	lsls	r0, r2, #21
 800e220:	f57f af0c 	bpl.w	800e03c <_scanf_float+0x60>
 800e224:	f1b9 0f00 	cmp.w	r9, #0
 800e228:	f43f af0f 	beq.w	800e04a <_scanf_float+0x6e>
 800e22c:	0591      	lsls	r1, r2, #22
 800e22e:	bf58      	it	pl
 800e230:	9901      	ldrpl	r1, [sp, #4]
 800e232:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e236:	bf58      	it	pl
 800e238:	eba9 0101 	subpl.w	r1, r9, r1
 800e23c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e240:	bf58      	it	pl
 800e242:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e246:	6022      	str	r2, [r4, #0]
 800e248:	f04f 0900 	mov.w	r9, #0
 800e24c:	e78a      	b.n	800e164 <_scanf_float+0x188>
 800e24e:	f04f 0a03 	mov.w	sl, #3
 800e252:	e787      	b.n	800e164 <_scanf_float+0x188>
 800e254:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e258:	4639      	mov	r1, r7
 800e25a:	4640      	mov	r0, r8
 800e25c:	4798      	blx	r3
 800e25e:	2800      	cmp	r0, #0
 800e260:	f43f aedf 	beq.w	800e022 <_scanf_float+0x46>
 800e264:	e6ea      	b.n	800e03c <_scanf_float+0x60>
 800e266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e26a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e26e:	463a      	mov	r2, r7
 800e270:	4640      	mov	r0, r8
 800e272:	4798      	blx	r3
 800e274:	6923      	ldr	r3, [r4, #16]
 800e276:	3b01      	subs	r3, #1
 800e278:	6123      	str	r3, [r4, #16]
 800e27a:	e6ec      	b.n	800e056 <_scanf_float+0x7a>
 800e27c:	1e6b      	subs	r3, r5, #1
 800e27e:	2b06      	cmp	r3, #6
 800e280:	d825      	bhi.n	800e2ce <_scanf_float+0x2f2>
 800e282:	2d02      	cmp	r5, #2
 800e284:	d836      	bhi.n	800e2f4 <_scanf_float+0x318>
 800e286:	455e      	cmp	r6, fp
 800e288:	f67f aee8 	bls.w	800e05c <_scanf_float+0x80>
 800e28c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e290:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e294:	463a      	mov	r2, r7
 800e296:	4640      	mov	r0, r8
 800e298:	4798      	blx	r3
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	3b01      	subs	r3, #1
 800e29e:	6123      	str	r3, [r4, #16]
 800e2a0:	e7f1      	b.n	800e286 <_scanf_float+0x2aa>
 800e2a2:	9802      	ldr	r0, [sp, #8]
 800e2a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e2ac:	9002      	str	r0, [sp, #8]
 800e2ae:	463a      	mov	r2, r7
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4798      	blx	r3
 800e2b4:	6923      	ldr	r3, [r4, #16]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	6123      	str	r3, [r4, #16]
 800e2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2be:	fa5f fa8a 	uxtb.w	sl, sl
 800e2c2:	f1ba 0f02 	cmp.w	sl, #2
 800e2c6:	d1ec      	bne.n	800e2a2 <_scanf_float+0x2c6>
 800e2c8:	3d03      	subs	r5, #3
 800e2ca:	b2ed      	uxtb	r5, r5
 800e2cc:	1b76      	subs	r6, r6, r5
 800e2ce:	6823      	ldr	r3, [r4, #0]
 800e2d0:	05da      	lsls	r2, r3, #23
 800e2d2:	d52f      	bpl.n	800e334 <_scanf_float+0x358>
 800e2d4:	055b      	lsls	r3, r3, #21
 800e2d6:	d510      	bpl.n	800e2fa <_scanf_float+0x31e>
 800e2d8:	455e      	cmp	r6, fp
 800e2da:	f67f aebf 	bls.w	800e05c <_scanf_float+0x80>
 800e2de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e2e6:	463a      	mov	r2, r7
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	4798      	blx	r3
 800e2ec:	6923      	ldr	r3, [r4, #16]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	6123      	str	r3, [r4, #16]
 800e2f2:	e7f1      	b.n	800e2d8 <_scanf_float+0x2fc>
 800e2f4:	46aa      	mov	sl, r5
 800e2f6:	9602      	str	r6, [sp, #8]
 800e2f8:	e7df      	b.n	800e2ba <_scanf_float+0x2de>
 800e2fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e2fe:	6923      	ldr	r3, [r4, #16]
 800e300:	2965      	cmp	r1, #101	; 0x65
 800e302:	f103 33ff 	add.w	r3, r3, #4294967295
 800e306:	f106 35ff 	add.w	r5, r6, #4294967295
 800e30a:	6123      	str	r3, [r4, #16]
 800e30c:	d00c      	beq.n	800e328 <_scanf_float+0x34c>
 800e30e:	2945      	cmp	r1, #69	; 0x45
 800e310:	d00a      	beq.n	800e328 <_scanf_float+0x34c>
 800e312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e316:	463a      	mov	r2, r7
 800e318:	4640      	mov	r0, r8
 800e31a:	4798      	blx	r3
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e322:	3b01      	subs	r3, #1
 800e324:	1eb5      	subs	r5, r6, #2
 800e326:	6123      	str	r3, [r4, #16]
 800e328:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e32c:	463a      	mov	r2, r7
 800e32e:	4640      	mov	r0, r8
 800e330:	4798      	blx	r3
 800e332:	462e      	mov	r6, r5
 800e334:	6825      	ldr	r5, [r4, #0]
 800e336:	f015 0510 	ands.w	r5, r5, #16
 800e33a:	d158      	bne.n	800e3ee <_scanf_float+0x412>
 800e33c:	7035      	strb	r5, [r6, #0]
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e348:	d11c      	bne.n	800e384 <_scanf_float+0x3a8>
 800e34a:	9b01      	ldr	r3, [sp, #4]
 800e34c:	454b      	cmp	r3, r9
 800e34e:	eba3 0209 	sub.w	r2, r3, r9
 800e352:	d124      	bne.n	800e39e <_scanf_float+0x3c2>
 800e354:	2200      	movs	r2, #0
 800e356:	4659      	mov	r1, fp
 800e358:	4640      	mov	r0, r8
 800e35a:	f002 fc11 	bl	8010b80 <_strtod_r>
 800e35e:	9b03      	ldr	r3, [sp, #12]
 800e360:	6821      	ldr	r1, [r4, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f011 0f02 	tst.w	r1, #2
 800e368:	ec57 6b10 	vmov	r6, r7, d0
 800e36c:	f103 0204 	add.w	r2, r3, #4
 800e370:	d020      	beq.n	800e3b4 <_scanf_float+0x3d8>
 800e372:	9903      	ldr	r1, [sp, #12]
 800e374:	600a      	str	r2, [r1, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	e9c3 6700 	strd	r6, r7, [r3]
 800e37c:	68e3      	ldr	r3, [r4, #12]
 800e37e:	3301      	adds	r3, #1
 800e380:	60e3      	str	r3, [r4, #12]
 800e382:	e66c      	b.n	800e05e <_scanf_float+0x82>
 800e384:	9b04      	ldr	r3, [sp, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d0e4      	beq.n	800e354 <_scanf_float+0x378>
 800e38a:	9905      	ldr	r1, [sp, #20]
 800e38c:	230a      	movs	r3, #10
 800e38e:	462a      	mov	r2, r5
 800e390:	3101      	adds	r1, #1
 800e392:	4640      	mov	r0, r8
 800e394:	f002 fc7c 	bl	8010c90 <_strtol_r>
 800e398:	9b04      	ldr	r3, [sp, #16]
 800e39a:	9e05      	ldr	r6, [sp, #20]
 800e39c:	1ac2      	subs	r2, r0, r3
 800e39e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e3a2:	429e      	cmp	r6, r3
 800e3a4:	bf28      	it	cs
 800e3a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e3aa:	4912      	ldr	r1, [pc, #72]	; (800e3f4 <_scanf_float+0x418>)
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f000 f8d5 	bl	800e55c <siprintf>
 800e3b2:	e7cf      	b.n	800e354 <_scanf_float+0x378>
 800e3b4:	f011 0f04 	tst.w	r1, #4
 800e3b8:	9903      	ldr	r1, [sp, #12]
 800e3ba:	600a      	str	r2, [r1, #0]
 800e3bc:	d1db      	bne.n	800e376 <_scanf_float+0x39a>
 800e3be:	f8d3 8000 	ldr.w	r8, [r3]
 800e3c2:	ee10 2a10 	vmov	r2, s0
 800e3c6:	ee10 0a10 	vmov	r0, s0
 800e3ca:	463b      	mov	r3, r7
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f2 fbcd 	bl	8000b6c <__aeabi_dcmpun>
 800e3d2:	b128      	cbz	r0, 800e3e0 <_scanf_float+0x404>
 800e3d4:	4808      	ldr	r0, [pc, #32]	; (800e3f8 <_scanf_float+0x41c>)
 800e3d6:	f000 fa45 	bl	800e864 <nanf>
 800e3da:	ed88 0a00 	vstr	s0, [r8]
 800e3de:	e7cd      	b.n	800e37c <_scanf_float+0x3a0>
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	f7f2 fc20 	bl	8000c28 <__aeabi_d2f>
 800e3e8:	f8c8 0000 	str.w	r0, [r8]
 800e3ec:	e7c6      	b.n	800e37c <_scanf_float+0x3a0>
 800e3ee:	2500      	movs	r5, #0
 800e3f0:	e635      	b.n	800e05e <_scanf_float+0x82>
 800e3f2:	bf00      	nop
 800e3f4:	080129ea 	.word	0x080129ea
 800e3f8:	08012d98 	.word	0x08012d98

0800e3fc <std>:
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	b510      	push	{r4, lr}
 800e400:	4604      	mov	r4, r0
 800e402:	e9c0 3300 	strd	r3, r3, [r0]
 800e406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e40a:	6083      	str	r3, [r0, #8]
 800e40c:	8181      	strh	r1, [r0, #12]
 800e40e:	6643      	str	r3, [r0, #100]	; 0x64
 800e410:	81c2      	strh	r2, [r0, #14]
 800e412:	6183      	str	r3, [r0, #24]
 800e414:	4619      	mov	r1, r3
 800e416:	2208      	movs	r2, #8
 800e418:	305c      	adds	r0, #92	; 0x5c
 800e41a:	f000 f930 	bl	800e67e <memset>
 800e41e:	4b05      	ldr	r3, [pc, #20]	; (800e434 <std+0x38>)
 800e420:	6263      	str	r3, [r4, #36]	; 0x24
 800e422:	4b05      	ldr	r3, [pc, #20]	; (800e438 <std+0x3c>)
 800e424:	62a3      	str	r3, [r4, #40]	; 0x28
 800e426:	4b05      	ldr	r3, [pc, #20]	; (800e43c <std+0x40>)
 800e428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e42a:	4b05      	ldr	r3, [pc, #20]	; (800e440 <std+0x44>)
 800e42c:	6224      	str	r4, [r4, #32]
 800e42e:	6323      	str	r3, [r4, #48]	; 0x30
 800e430:	bd10      	pop	{r4, pc}
 800e432:	bf00      	nop
 800e434:	0800e5f5 	.word	0x0800e5f5
 800e438:	0800e61b 	.word	0x0800e61b
 800e43c:	0800e653 	.word	0x0800e653
 800e440:	0800e677 	.word	0x0800e677

0800e444 <stdio_exit_handler>:
 800e444:	4a02      	ldr	r2, [pc, #8]	; (800e450 <stdio_exit_handler+0xc>)
 800e446:	4903      	ldr	r1, [pc, #12]	; (800e454 <stdio_exit_handler+0x10>)
 800e448:	4803      	ldr	r0, [pc, #12]	; (800e458 <stdio_exit_handler+0x14>)
 800e44a:	f000 b869 	b.w	800e520 <_fwalk_sglue>
 800e44e:	bf00      	nop
 800e450:	20000014 	.word	0x20000014
 800e454:	08011691 	.word	0x08011691
 800e458:	20000020 	.word	0x20000020

0800e45c <cleanup_stdio>:
 800e45c:	6841      	ldr	r1, [r0, #4]
 800e45e:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <cleanup_stdio+0x34>)
 800e460:	4299      	cmp	r1, r3
 800e462:	b510      	push	{r4, lr}
 800e464:	4604      	mov	r4, r0
 800e466:	d001      	beq.n	800e46c <cleanup_stdio+0x10>
 800e468:	f003 f912 	bl	8011690 <_fflush_r>
 800e46c:	68a1      	ldr	r1, [r4, #8]
 800e46e:	4b09      	ldr	r3, [pc, #36]	; (800e494 <cleanup_stdio+0x38>)
 800e470:	4299      	cmp	r1, r3
 800e472:	d002      	beq.n	800e47a <cleanup_stdio+0x1e>
 800e474:	4620      	mov	r0, r4
 800e476:	f003 f90b 	bl	8011690 <_fflush_r>
 800e47a:	68e1      	ldr	r1, [r4, #12]
 800e47c:	4b06      	ldr	r3, [pc, #24]	; (800e498 <cleanup_stdio+0x3c>)
 800e47e:	4299      	cmp	r1, r3
 800e480:	d004      	beq.n	800e48c <cleanup_stdio+0x30>
 800e482:	4620      	mov	r0, r4
 800e484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e488:	f003 b902 	b.w	8011690 <_fflush_r>
 800e48c:	bd10      	pop	{r4, pc}
 800e48e:	bf00      	nop
 800e490:	20006ef8 	.word	0x20006ef8
 800e494:	20006f60 	.word	0x20006f60
 800e498:	20006fc8 	.word	0x20006fc8

0800e49c <global_stdio_init.part.0>:
 800e49c:	b510      	push	{r4, lr}
 800e49e:	4b0b      	ldr	r3, [pc, #44]	; (800e4cc <global_stdio_init.part.0+0x30>)
 800e4a0:	4c0b      	ldr	r4, [pc, #44]	; (800e4d0 <global_stdio_init.part.0+0x34>)
 800e4a2:	4a0c      	ldr	r2, [pc, #48]	; (800e4d4 <global_stdio_init.part.0+0x38>)
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	2104      	movs	r1, #4
 800e4ac:	f7ff ffa6 	bl	800e3fc <std>
 800e4b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	2109      	movs	r1, #9
 800e4b8:	f7ff ffa0 	bl	800e3fc <std>
 800e4bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4c6:	2112      	movs	r1, #18
 800e4c8:	f7ff bf98 	b.w	800e3fc <std>
 800e4cc:	20007030 	.word	0x20007030
 800e4d0:	20006ef8 	.word	0x20006ef8
 800e4d4:	0800e445 	.word	0x0800e445

0800e4d8 <__sfp_lock_acquire>:
 800e4d8:	4801      	ldr	r0, [pc, #4]	; (800e4e0 <__sfp_lock_acquire+0x8>)
 800e4da:	f000 b9b3 	b.w	800e844 <__retarget_lock_acquire_recursive>
 800e4de:	bf00      	nop
 800e4e0:	20007039 	.word	0x20007039

0800e4e4 <__sfp_lock_release>:
 800e4e4:	4801      	ldr	r0, [pc, #4]	; (800e4ec <__sfp_lock_release+0x8>)
 800e4e6:	f000 b9ae 	b.w	800e846 <__retarget_lock_release_recursive>
 800e4ea:	bf00      	nop
 800e4ec:	20007039 	.word	0x20007039

0800e4f0 <__sinit>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	f7ff fff0 	bl	800e4d8 <__sfp_lock_acquire>
 800e4f8:	6a23      	ldr	r3, [r4, #32]
 800e4fa:	b11b      	cbz	r3, 800e504 <__sinit+0x14>
 800e4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e500:	f7ff bff0 	b.w	800e4e4 <__sfp_lock_release>
 800e504:	4b04      	ldr	r3, [pc, #16]	; (800e518 <__sinit+0x28>)
 800e506:	6223      	str	r3, [r4, #32]
 800e508:	4b04      	ldr	r3, [pc, #16]	; (800e51c <__sinit+0x2c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1f5      	bne.n	800e4fc <__sinit+0xc>
 800e510:	f7ff ffc4 	bl	800e49c <global_stdio_init.part.0>
 800e514:	e7f2      	b.n	800e4fc <__sinit+0xc>
 800e516:	bf00      	nop
 800e518:	0800e45d 	.word	0x0800e45d
 800e51c:	20007030 	.word	0x20007030

0800e520 <_fwalk_sglue>:
 800e520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e524:	4607      	mov	r7, r0
 800e526:	4688      	mov	r8, r1
 800e528:	4614      	mov	r4, r2
 800e52a:	2600      	movs	r6, #0
 800e52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e530:	f1b9 0901 	subs.w	r9, r9, #1
 800e534:	d505      	bpl.n	800e542 <_fwalk_sglue+0x22>
 800e536:	6824      	ldr	r4, [r4, #0]
 800e538:	2c00      	cmp	r4, #0
 800e53a:	d1f7      	bne.n	800e52c <_fwalk_sglue+0xc>
 800e53c:	4630      	mov	r0, r6
 800e53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d907      	bls.n	800e558 <_fwalk_sglue+0x38>
 800e548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e54c:	3301      	adds	r3, #1
 800e54e:	d003      	beq.n	800e558 <_fwalk_sglue+0x38>
 800e550:	4629      	mov	r1, r5
 800e552:	4638      	mov	r0, r7
 800e554:	47c0      	blx	r8
 800e556:	4306      	orrs	r6, r0
 800e558:	3568      	adds	r5, #104	; 0x68
 800e55a:	e7e9      	b.n	800e530 <_fwalk_sglue+0x10>

0800e55c <siprintf>:
 800e55c:	b40e      	push	{r1, r2, r3}
 800e55e:	b500      	push	{lr}
 800e560:	b09c      	sub	sp, #112	; 0x70
 800e562:	ab1d      	add	r3, sp, #116	; 0x74
 800e564:	9002      	str	r0, [sp, #8]
 800e566:	9006      	str	r0, [sp, #24]
 800e568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e56c:	4809      	ldr	r0, [pc, #36]	; (800e594 <siprintf+0x38>)
 800e56e:	9107      	str	r1, [sp, #28]
 800e570:	9104      	str	r1, [sp, #16]
 800e572:	4909      	ldr	r1, [pc, #36]	; (800e598 <siprintf+0x3c>)
 800e574:	f853 2b04 	ldr.w	r2, [r3], #4
 800e578:	9105      	str	r1, [sp, #20]
 800e57a:	6800      	ldr	r0, [r0, #0]
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	a902      	add	r1, sp, #8
 800e580:	f002 fbe2 	bl	8010d48 <_svfiprintf_r>
 800e584:	9b02      	ldr	r3, [sp, #8]
 800e586:	2200      	movs	r2, #0
 800e588:	701a      	strb	r2, [r3, #0]
 800e58a:	b01c      	add	sp, #112	; 0x70
 800e58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e590:	b003      	add	sp, #12
 800e592:	4770      	bx	lr
 800e594:	2000006c 	.word	0x2000006c
 800e598:	ffff0208 	.word	0xffff0208

0800e59c <siscanf>:
 800e59c:	b40e      	push	{r1, r2, r3}
 800e59e:	b510      	push	{r4, lr}
 800e5a0:	b09f      	sub	sp, #124	; 0x7c
 800e5a2:	ac21      	add	r4, sp, #132	; 0x84
 800e5a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e5a8:	f854 2b04 	ldr.w	r2, [r4], #4
 800e5ac:	9201      	str	r2, [sp, #4]
 800e5ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e5b2:	9004      	str	r0, [sp, #16]
 800e5b4:	9008      	str	r0, [sp, #32]
 800e5b6:	f7f1 fe7b 	bl	80002b0 <strlen>
 800e5ba:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <siscanf+0x50>)
 800e5bc:	9005      	str	r0, [sp, #20]
 800e5be:	9009      	str	r0, [sp, #36]	; 0x24
 800e5c0:	930d      	str	r3, [sp, #52]	; 0x34
 800e5c2:	480b      	ldr	r0, [pc, #44]	; (800e5f0 <siscanf+0x54>)
 800e5c4:	9a01      	ldr	r2, [sp, #4]
 800e5c6:	6800      	ldr	r0, [r0, #0]
 800e5c8:	9403      	str	r4, [sp, #12]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	9311      	str	r3, [sp, #68]	; 0x44
 800e5ce:	9316      	str	r3, [sp, #88]	; 0x58
 800e5d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e5d8:	a904      	add	r1, sp, #16
 800e5da:	4623      	mov	r3, r4
 800e5dc:	f002 fd0c 	bl	8010ff8 <__ssvfiscanf_r>
 800e5e0:	b01f      	add	sp, #124	; 0x7c
 800e5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5e6:	b003      	add	sp, #12
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	0800e617 	.word	0x0800e617
 800e5f0:	2000006c 	.word	0x2000006c

0800e5f4 <__sread>:
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	460c      	mov	r4, r1
 800e5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5fc:	f000 f8c4 	bl	800e788 <_read_r>
 800e600:	2800      	cmp	r0, #0
 800e602:	bfab      	itete	ge
 800e604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e606:	89a3      	ldrhlt	r3, [r4, #12]
 800e608:	181b      	addge	r3, r3, r0
 800e60a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e60e:	bfac      	ite	ge
 800e610:	6563      	strge	r3, [r4, #84]	; 0x54
 800e612:	81a3      	strhlt	r3, [r4, #12]
 800e614:	bd10      	pop	{r4, pc}

0800e616 <__seofread>:
 800e616:	2000      	movs	r0, #0
 800e618:	4770      	bx	lr

0800e61a <__swrite>:
 800e61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61e:	461f      	mov	r7, r3
 800e620:	898b      	ldrh	r3, [r1, #12]
 800e622:	05db      	lsls	r3, r3, #23
 800e624:	4605      	mov	r5, r0
 800e626:	460c      	mov	r4, r1
 800e628:	4616      	mov	r6, r2
 800e62a:	d505      	bpl.n	800e638 <__swrite+0x1e>
 800e62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e630:	2302      	movs	r3, #2
 800e632:	2200      	movs	r2, #0
 800e634:	f000 f896 	bl	800e764 <_lseek_r>
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e642:	81a3      	strh	r3, [r4, #12]
 800e644:	4632      	mov	r2, r6
 800e646:	463b      	mov	r3, r7
 800e648:	4628      	mov	r0, r5
 800e64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e64e:	f000 b8bd 	b.w	800e7cc <_write_r>

0800e652 <__sseek>:
 800e652:	b510      	push	{r4, lr}
 800e654:	460c      	mov	r4, r1
 800e656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e65a:	f000 f883 	bl	800e764 <_lseek_r>
 800e65e:	1c43      	adds	r3, r0, #1
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	bf15      	itete	ne
 800e664:	6560      	strne	r0, [r4, #84]	; 0x54
 800e666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e66e:	81a3      	strheq	r3, [r4, #12]
 800e670:	bf18      	it	ne
 800e672:	81a3      	strhne	r3, [r4, #12]
 800e674:	bd10      	pop	{r4, pc}

0800e676 <__sclose>:
 800e676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e67a:	f000 b80d 	b.w	800e698 <_close_r>

0800e67e <memset>:
 800e67e:	4402      	add	r2, r0
 800e680:	4603      	mov	r3, r0
 800e682:	4293      	cmp	r3, r2
 800e684:	d100      	bne.n	800e688 <memset+0xa>
 800e686:	4770      	bx	lr
 800e688:	f803 1b01 	strb.w	r1, [r3], #1
 800e68c:	e7f9      	b.n	800e682 <memset+0x4>
	...

0800e690 <_localeconv_r>:
 800e690:	4800      	ldr	r0, [pc, #0]	; (800e694 <_localeconv_r+0x4>)
 800e692:	4770      	bx	lr
 800e694:	20000160 	.word	0x20000160

0800e698 <_close_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4d06      	ldr	r5, [pc, #24]	; (800e6b4 <_close_r+0x1c>)
 800e69c:	2300      	movs	r3, #0
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4608      	mov	r0, r1
 800e6a2:	602b      	str	r3, [r5, #0]
 800e6a4:	f7f3 fe0b 	bl	80022be <_close>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_close_r+0x1a>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_close_r+0x1a>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	20007034 	.word	0x20007034

0800e6b8 <_reclaim_reent>:
 800e6b8:	4b29      	ldr	r3, [pc, #164]	; (800e760 <_reclaim_reent+0xa8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4283      	cmp	r3, r0
 800e6be:	b570      	push	{r4, r5, r6, lr}
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	d04b      	beq.n	800e75c <_reclaim_reent+0xa4>
 800e6c4:	69c3      	ldr	r3, [r0, #28]
 800e6c6:	b143      	cbz	r3, 800e6da <_reclaim_reent+0x22>
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d144      	bne.n	800e758 <_reclaim_reent+0xa0>
 800e6ce:	69e3      	ldr	r3, [r4, #28]
 800e6d0:	6819      	ldr	r1, [r3, #0]
 800e6d2:	b111      	cbz	r1, 800e6da <_reclaim_reent+0x22>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 ff45 	bl	800f564 <_free_r>
 800e6da:	6961      	ldr	r1, [r4, #20]
 800e6dc:	b111      	cbz	r1, 800e6e4 <_reclaim_reent+0x2c>
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 ff40 	bl	800f564 <_free_r>
 800e6e4:	69e1      	ldr	r1, [r4, #28]
 800e6e6:	b111      	cbz	r1, 800e6ee <_reclaim_reent+0x36>
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f000 ff3b 	bl	800f564 <_free_r>
 800e6ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e6f0:	b111      	cbz	r1, 800e6f8 <_reclaim_reent+0x40>
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f000 ff36 	bl	800f564 <_free_r>
 800e6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6fa:	b111      	cbz	r1, 800e702 <_reclaim_reent+0x4a>
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f000 ff31 	bl	800f564 <_free_r>
 800e702:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e704:	b111      	cbz	r1, 800e70c <_reclaim_reent+0x54>
 800e706:	4620      	mov	r0, r4
 800e708:	f000 ff2c 	bl	800f564 <_free_r>
 800e70c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e70e:	b111      	cbz	r1, 800e716 <_reclaim_reent+0x5e>
 800e710:	4620      	mov	r0, r4
 800e712:	f000 ff27 	bl	800f564 <_free_r>
 800e716:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e718:	b111      	cbz	r1, 800e720 <_reclaim_reent+0x68>
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 ff22 	bl	800f564 <_free_r>
 800e720:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e722:	b111      	cbz	r1, 800e72a <_reclaim_reent+0x72>
 800e724:	4620      	mov	r0, r4
 800e726:	f000 ff1d 	bl	800f564 <_free_r>
 800e72a:	6a23      	ldr	r3, [r4, #32]
 800e72c:	b1b3      	cbz	r3, 800e75c <_reclaim_reent+0xa4>
 800e72e:	4620      	mov	r0, r4
 800e730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e734:	4718      	bx	r3
 800e736:	5949      	ldr	r1, [r1, r5]
 800e738:	b941      	cbnz	r1, 800e74c <_reclaim_reent+0x94>
 800e73a:	3504      	adds	r5, #4
 800e73c:	69e3      	ldr	r3, [r4, #28]
 800e73e:	2d80      	cmp	r5, #128	; 0x80
 800e740:	68d9      	ldr	r1, [r3, #12]
 800e742:	d1f8      	bne.n	800e736 <_reclaim_reent+0x7e>
 800e744:	4620      	mov	r0, r4
 800e746:	f000 ff0d 	bl	800f564 <_free_r>
 800e74a:	e7c0      	b.n	800e6ce <_reclaim_reent+0x16>
 800e74c:	680e      	ldr	r6, [r1, #0]
 800e74e:	4620      	mov	r0, r4
 800e750:	f000 ff08 	bl	800f564 <_free_r>
 800e754:	4631      	mov	r1, r6
 800e756:	e7ef      	b.n	800e738 <_reclaim_reent+0x80>
 800e758:	2500      	movs	r5, #0
 800e75a:	e7ef      	b.n	800e73c <_reclaim_reent+0x84>
 800e75c:	bd70      	pop	{r4, r5, r6, pc}
 800e75e:	bf00      	nop
 800e760:	2000006c 	.word	0x2000006c

0800e764 <_lseek_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d07      	ldr	r5, [pc, #28]	; (800e784 <_lseek_r+0x20>)
 800e768:	4604      	mov	r4, r0
 800e76a:	4608      	mov	r0, r1
 800e76c:	4611      	mov	r1, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	602a      	str	r2, [r5, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	f7f3 fdca 	bl	800230c <_lseek>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_lseek_r+0x1e>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_lseek_r+0x1e>
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	20007034 	.word	0x20007034

0800e788 <_read_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4d07      	ldr	r5, [pc, #28]	; (800e7a8 <_read_r+0x20>)
 800e78c:	4604      	mov	r4, r0
 800e78e:	4608      	mov	r0, r1
 800e790:	4611      	mov	r1, r2
 800e792:	2200      	movs	r2, #0
 800e794:	602a      	str	r2, [r5, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	f7f3 fd58 	bl	800224c <_read>
 800e79c:	1c43      	adds	r3, r0, #1
 800e79e:	d102      	bne.n	800e7a6 <_read_r+0x1e>
 800e7a0:	682b      	ldr	r3, [r5, #0]
 800e7a2:	b103      	cbz	r3, 800e7a6 <_read_r+0x1e>
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	bd38      	pop	{r3, r4, r5, pc}
 800e7a8:	20007034 	.word	0x20007034

0800e7ac <_sbrk_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4d06      	ldr	r5, [pc, #24]	; (800e7c8 <_sbrk_r+0x1c>)
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	4608      	mov	r0, r1
 800e7b6:	602b      	str	r3, [r5, #0]
 800e7b8:	f7f3 fdb6 	bl	8002328 <_sbrk>
 800e7bc:	1c43      	adds	r3, r0, #1
 800e7be:	d102      	bne.n	800e7c6 <_sbrk_r+0x1a>
 800e7c0:	682b      	ldr	r3, [r5, #0]
 800e7c2:	b103      	cbz	r3, 800e7c6 <_sbrk_r+0x1a>
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	20007034 	.word	0x20007034

0800e7cc <_write_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d07      	ldr	r5, [pc, #28]	; (800e7ec <_write_r+0x20>)
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	602a      	str	r2, [r5, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f7f3 fd53 	bl	8002286 <_write>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d102      	bne.n	800e7ea <_write_r+0x1e>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	b103      	cbz	r3, 800e7ea <_write_r+0x1e>
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	20007034 	.word	0x20007034

0800e7f0 <__errno>:
 800e7f0:	4b01      	ldr	r3, [pc, #4]	; (800e7f8 <__errno+0x8>)
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	2000006c 	.word	0x2000006c

0800e7fc <__libc_init_array>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4d0d      	ldr	r5, [pc, #52]	; (800e834 <__libc_init_array+0x38>)
 800e800:	4c0d      	ldr	r4, [pc, #52]	; (800e838 <__libc_init_array+0x3c>)
 800e802:	1b64      	subs	r4, r4, r5
 800e804:	10a4      	asrs	r4, r4, #2
 800e806:	2600      	movs	r6, #0
 800e808:	42a6      	cmp	r6, r4
 800e80a:	d109      	bne.n	800e820 <__libc_init_array+0x24>
 800e80c:	4d0b      	ldr	r5, [pc, #44]	; (800e83c <__libc_init_array+0x40>)
 800e80e:	4c0c      	ldr	r4, [pc, #48]	; (800e840 <__libc_init_array+0x44>)
 800e810:	f003 ff08 	bl	8012624 <_init>
 800e814:	1b64      	subs	r4, r4, r5
 800e816:	10a4      	asrs	r4, r4, #2
 800e818:	2600      	movs	r6, #0
 800e81a:	42a6      	cmp	r6, r4
 800e81c:	d105      	bne.n	800e82a <__libc_init_array+0x2e>
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	f855 3b04 	ldr.w	r3, [r5], #4
 800e824:	4798      	blx	r3
 800e826:	3601      	adds	r6, #1
 800e828:	e7ee      	b.n	800e808 <__libc_init_array+0xc>
 800e82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e82e:	4798      	blx	r3
 800e830:	3601      	adds	r6, #1
 800e832:	e7f2      	b.n	800e81a <__libc_init_array+0x1e>
 800e834:	08012e04 	.word	0x08012e04
 800e838:	08012e04 	.word	0x08012e04
 800e83c:	08012e04 	.word	0x08012e04
 800e840:	08012e08 	.word	0x08012e08

0800e844 <__retarget_lock_acquire_recursive>:
 800e844:	4770      	bx	lr

0800e846 <__retarget_lock_release_recursive>:
 800e846:	4770      	bx	lr

0800e848 <memcpy>:
 800e848:	440a      	add	r2, r1
 800e84a:	4291      	cmp	r1, r2
 800e84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e850:	d100      	bne.n	800e854 <memcpy+0xc>
 800e852:	4770      	bx	lr
 800e854:	b510      	push	{r4, lr}
 800e856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e85e:	4291      	cmp	r1, r2
 800e860:	d1f9      	bne.n	800e856 <memcpy+0xe>
 800e862:	bd10      	pop	{r4, pc}

0800e864 <nanf>:
 800e864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e86c <nanf+0x8>
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	7fc00000 	.word	0x7fc00000

0800e870 <quorem>:
 800e870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e874:	6903      	ldr	r3, [r0, #16]
 800e876:	690c      	ldr	r4, [r1, #16]
 800e878:	42a3      	cmp	r3, r4
 800e87a:	4607      	mov	r7, r0
 800e87c:	db7e      	blt.n	800e97c <quorem+0x10c>
 800e87e:	3c01      	subs	r4, #1
 800e880:	f101 0814 	add.w	r8, r1, #20
 800e884:	f100 0514 	add.w	r5, r0, #20
 800e888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e88c:	9301      	str	r3, [sp, #4]
 800e88e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e896:	3301      	adds	r3, #1
 800e898:	429a      	cmp	r2, r3
 800e89a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e89e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e8a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8a6:	d331      	bcc.n	800e90c <quorem+0x9c>
 800e8a8:	f04f 0e00 	mov.w	lr, #0
 800e8ac:	4640      	mov	r0, r8
 800e8ae:	46ac      	mov	ip, r5
 800e8b0:	46f2      	mov	sl, lr
 800e8b2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e8b6:	b293      	uxth	r3, r2
 800e8b8:	fb06 e303 	mla	r3, r6, r3, lr
 800e8bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8c0:	0c1a      	lsrs	r2, r3, #16
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	ebaa 0303 	sub.w	r3, sl, r3
 800e8c8:	f8dc a000 	ldr.w	sl, [ip]
 800e8cc:	fa13 f38a 	uxtah	r3, r3, sl
 800e8d0:	fb06 220e 	mla	r2, r6, lr, r2
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	9b00      	ldr	r3, [sp, #0]
 800e8d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8dc:	b292      	uxth	r2, r2
 800e8de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e8e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8e6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8ea:	4581      	cmp	r9, r0
 800e8ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8f0:	f84c 3b04 	str.w	r3, [ip], #4
 800e8f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8f8:	d2db      	bcs.n	800e8b2 <quorem+0x42>
 800e8fa:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8fe:	b92b      	cbnz	r3, 800e90c <quorem+0x9c>
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	3b04      	subs	r3, #4
 800e904:	429d      	cmp	r5, r3
 800e906:	461a      	mov	r2, r3
 800e908:	d32c      	bcc.n	800e964 <quorem+0xf4>
 800e90a:	613c      	str	r4, [r7, #16]
 800e90c:	4638      	mov	r0, r7
 800e90e:	f001 f943 	bl	800fb98 <__mcmp>
 800e912:	2800      	cmp	r0, #0
 800e914:	db22      	blt.n	800e95c <quorem+0xec>
 800e916:	3601      	adds	r6, #1
 800e918:	4629      	mov	r1, r5
 800e91a:	2000      	movs	r0, #0
 800e91c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e920:	f8d1 c000 	ldr.w	ip, [r1]
 800e924:	b293      	uxth	r3, r2
 800e926:	1ac3      	subs	r3, r0, r3
 800e928:	0c12      	lsrs	r2, r2, #16
 800e92a:	fa13 f38c 	uxtah	r3, r3, ip
 800e92e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e932:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e936:	b29b      	uxth	r3, r3
 800e938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e93c:	45c1      	cmp	r9, r8
 800e93e:	f841 3b04 	str.w	r3, [r1], #4
 800e942:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e946:	d2e9      	bcs.n	800e91c <quorem+0xac>
 800e948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e94c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e950:	b922      	cbnz	r2, 800e95c <quorem+0xec>
 800e952:	3b04      	subs	r3, #4
 800e954:	429d      	cmp	r5, r3
 800e956:	461a      	mov	r2, r3
 800e958:	d30a      	bcc.n	800e970 <quorem+0x100>
 800e95a:	613c      	str	r4, [r7, #16]
 800e95c:	4630      	mov	r0, r6
 800e95e:	b003      	add	sp, #12
 800e960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e964:	6812      	ldr	r2, [r2, #0]
 800e966:	3b04      	subs	r3, #4
 800e968:	2a00      	cmp	r2, #0
 800e96a:	d1ce      	bne.n	800e90a <quorem+0x9a>
 800e96c:	3c01      	subs	r4, #1
 800e96e:	e7c9      	b.n	800e904 <quorem+0x94>
 800e970:	6812      	ldr	r2, [r2, #0]
 800e972:	3b04      	subs	r3, #4
 800e974:	2a00      	cmp	r2, #0
 800e976:	d1f0      	bne.n	800e95a <quorem+0xea>
 800e978:	3c01      	subs	r4, #1
 800e97a:	e7eb      	b.n	800e954 <quorem+0xe4>
 800e97c:	2000      	movs	r0, #0
 800e97e:	e7ee      	b.n	800e95e <quorem+0xee>

0800e980 <_dtoa_r>:
 800e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e984:	ed2d 8b04 	vpush	{d8-d9}
 800e988:	69c5      	ldr	r5, [r0, #28]
 800e98a:	b093      	sub	sp, #76	; 0x4c
 800e98c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e990:	ec57 6b10 	vmov	r6, r7, d0
 800e994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e998:	9107      	str	r1, [sp, #28]
 800e99a:	4604      	mov	r4, r0
 800e99c:	920a      	str	r2, [sp, #40]	; 0x28
 800e99e:	930d      	str	r3, [sp, #52]	; 0x34
 800e9a0:	b975      	cbnz	r5, 800e9c0 <_dtoa_r+0x40>
 800e9a2:	2010      	movs	r0, #16
 800e9a4:	f000 fe2a 	bl	800f5fc <malloc>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	61e0      	str	r0, [r4, #28]
 800e9ac:	b920      	cbnz	r0, 800e9b8 <_dtoa_r+0x38>
 800e9ae:	4bae      	ldr	r3, [pc, #696]	; (800ec68 <_dtoa_r+0x2e8>)
 800e9b0:	21ef      	movs	r1, #239	; 0xef
 800e9b2:	48ae      	ldr	r0, [pc, #696]	; (800ec6c <_dtoa_r+0x2ec>)
 800e9b4:	f002 ff3c 	bl	8011830 <__assert_func>
 800e9b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9bc:	6005      	str	r5, [r0, #0]
 800e9be:	60c5      	str	r5, [r0, #12]
 800e9c0:	69e3      	ldr	r3, [r4, #28]
 800e9c2:	6819      	ldr	r1, [r3, #0]
 800e9c4:	b151      	cbz	r1, 800e9dc <_dtoa_r+0x5c>
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	604a      	str	r2, [r1, #4]
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	4093      	lsls	r3, r2
 800e9ce:	608b      	str	r3, [r1, #8]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 fe5b 	bl	800f68c <_Bfree>
 800e9d6:	69e3      	ldr	r3, [r4, #28]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
 800e9dc:	1e3b      	subs	r3, r7, #0
 800e9de:	bfbb      	ittet	lt
 800e9e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e9e4:	9303      	strlt	r3, [sp, #12]
 800e9e6:	2300      	movge	r3, #0
 800e9e8:	2201      	movlt	r2, #1
 800e9ea:	bfac      	ite	ge
 800e9ec:	f8c8 3000 	strge.w	r3, [r8]
 800e9f0:	f8c8 2000 	strlt.w	r2, [r8]
 800e9f4:	4b9e      	ldr	r3, [pc, #632]	; (800ec70 <_dtoa_r+0x2f0>)
 800e9f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e9fa:	ea33 0308 	bics.w	r3, r3, r8
 800e9fe:	d11b      	bne.n	800ea38 <_dtoa_r+0xb8>
 800ea00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea06:	6013      	str	r3, [r2, #0]
 800ea08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ea0c:	4333      	orrs	r3, r6
 800ea0e:	f000 8593 	beq.w	800f538 <_dtoa_r+0xbb8>
 800ea12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea14:	b963      	cbnz	r3, 800ea30 <_dtoa_r+0xb0>
 800ea16:	4b97      	ldr	r3, [pc, #604]	; (800ec74 <_dtoa_r+0x2f4>)
 800ea18:	e027      	b.n	800ea6a <_dtoa_r+0xea>
 800ea1a:	4b97      	ldr	r3, [pc, #604]	; (800ec78 <_dtoa_r+0x2f8>)
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	3308      	adds	r3, #8
 800ea20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea22:	6013      	str	r3, [r2, #0]
 800ea24:	9800      	ldr	r0, [sp, #0]
 800ea26:	b013      	add	sp, #76	; 0x4c
 800ea28:	ecbd 8b04 	vpop	{d8-d9}
 800ea2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea30:	4b90      	ldr	r3, [pc, #576]	; (800ec74 <_dtoa_r+0x2f4>)
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	3303      	adds	r3, #3
 800ea36:	e7f3      	b.n	800ea20 <_dtoa_r+0xa0>
 800ea38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	ec51 0b17 	vmov	r0, r1, d7
 800ea42:	eeb0 8a47 	vmov.f32	s16, s14
 800ea46:	eef0 8a67 	vmov.f32	s17, s15
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	f7f2 f85c 	bl	8000b08 <__aeabi_dcmpeq>
 800ea50:	4681      	mov	r9, r0
 800ea52:	b160      	cbz	r0, 800ea6e <_dtoa_r+0xee>
 800ea54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea56:	2301      	movs	r3, #1
 800ea58:	6013      	str	r3, [r2, #0]
 800ea5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 8568 	beq.w	800f532 <_dtoa_r+0xbb2>
 800ea62:	4b86      	ldr	r3, [pc, #536]	; (800ec7c <_dtoa_r+0x2fc>)
 800ea64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	e7da      	b.n	800ea24 <_dtoa_r+0xa4>
 800ea6e:	aa10      	add	r2, sp, #64	; 0x40
 800ea70:	a911      	add	r1, sp, #68	; 0x44
 800ea72:	4620      	mov	r0, r4
 800ea74:	eeb0 0a48 	vmov.f32	s0, s16
 800ea78:	eef0 0a68 	vmov.f32	s1, s17
 800ea7c:	f001 f9a2 	bl	800fdc4 <__d2b>
 800ea80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ea84:	4682      	mov	sl, r0
 800ea86:	2d00      	cmp	r5, #0
 800ea88:	d07f      	beq.n	800eb8a <_dtoa_r+0x20a>
 800ea8a:	ee18 3a90 	vmov	r3, s17
 800ea8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ea96:	ec51 0b18 	vmov	r0, r1, d8
 800ea9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eaa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4b75      	ldr	r3, [pc, #468]	; (800ec80 <_dtoa_r+0x300>)
 800eaac:	f7f1 fc0c 	bl	80002c8 <__aeabi_dsub>
 800eab0:	a367      	add	r3, pc, #412	; (adr r3, 800ec50 <_dtoa_r+0x2d0>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fdbf 	bl	8000638 <__aeabi_dmul>
 800eaba:	a367      	add	r3, pc, #412	; (adr r3, 800ec58 <_dtoa_r+0x2d8>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	f7f1 fc04 	bl	80002cc <__adddf3>
 800eac4:	4606      	mov	r6, r0
 800eac6:	4628      	mov	r0, r5
 800eac8:	460f      	mov	r7, r1
 800eaca:	f7f1 fd4b 	bl	8000564 <__aeabi_i2d>
 800eace:	a364      	add	r3, pc, #400	; (adr r3, 800ec60 <_dtoa_r+0x2e0>)
 800ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead4:	f7f1 fdb0 	bl	8000638 <__aeabi_dmul>
 800ead8:	4602      	mov	r2, r0
 800eada:	460b      	mov	r3, r1
 800eadc:	4630      	mov	r0, r6
 800eade:	4639      	mov	r1, r7
 800eae0:	f7f1 fbf4 	bl	80002cc <__adddf3>
 800eae4:	4606      	mov	r6, r0
 800eae6:	460f      	mov	r7, r1
 800eae8:	f7f2 f856 	bl	8000b98 <__aeabi_d2iz>
 800eaec:	2200      	movs	r2, #0
 800eaee:	4683      	mov	fp, r0
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	f7f2 f811 	bl	8000b1c <__aeabi_dcmplt>
 800eafa:	b148      	cbz	r0, 800eb10 <_dtoa_r+0x190>
 800eafc:	4658      	mov	r0, fp
 800eafe:	f7f1 fd31 	bl	8000564 <__aeabi_i2d>
 800eb02:	4632      	mov	r2, r6
 800eb04:	463b      	mov	r3, r7
 800eb06:	f7f1 ffff 	bl	8000b08 <__aeabi_dcmpeq>
 800eb0a:	b908      	cbnz	r0, 800eb10 <_dtoa_r+0x190>
 800eb0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb10:	f1bb 0f16 	cmp.w	fp, #22
 800eb14:	d857      	bhi.n	800ebc6 <_dtoa_r+0x246>
 800eb16:	4b5b      	ldr	r3, [pc, #364]	; (800ec84 <_dtoa_r+0x304>)
 800eb18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	ec51 0b18 	vmov	r0, r1, d8
 800eb24:	f7f1 fffa 	bl	8000b1c <__aeabi_dcmplt>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d04e      	beq.n	800ebca <_dtoa_r+0x24a>
 800eb2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb30:	2300      	movs	r3, #0
 800eb32:	930c      	str	r3, [sp, #48]	; 0x30
 800eb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb36:	1b5b      	subs	r3, r3, r5
 800eb38:	1e5a      	subs	r2, r3, #1
 800eb3a:	bf45      	ittet	mi
 800eb3c:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb40:	9305      	strmi	r3, [sp, #20]
 800eb42:	2300      	movpl	r3, #0
 800eb44:	2300      	movmi	r3, #0
 800eb46:	9206      	str	r2, [sp, #24]
 800eb48:	bf54      	ite	pl
 800eb4a:	9305      	strpl	r3, [sp, #20]
 800eb4c:	9306      	strmi	r3, [sp, #24]
 800eb4e:	f1bb 0f00 	cmp.w	fp, #0
 800eb52:	db3c      	blt.n	800ebce <_dtoa_r+0x24e>
 800eb54:	9b06      	ldr	r3, [sp, #24]
 800eb56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800eb5a:	445b      	add	r3, fp
 800eb5c:	9306      	str	r3, [sp, #24]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	9308      	str	r3, [sp, #32]
 800eb62:	9b07      	ldr	r3, [sp, #28]
 800eb64:	2b09      	cmp	r3, #9
 800eb66:	d868      	bhi.n	800ec3a <_dtoa_r+0x2ba>
 800eb68:	2b05      	cmp	r3, #5
 800eb6a:	bfc4      	itt	gt
 800eb6c:	3b04      	subgt	r3, #4
 800eb6e:	9307      	strgt	r3, [sp, #28]
 800eb70:	9b07      	ldr	r3, [sp, #28]
 800eb72:	f1a3 0302 	sub.w	r3, r3, #2
 800eb76:	bfcc      	ite	gt
 800eb78:	2500      	movgt	r5, #0
 800eb7a:	2501      	movle	r5, #1
 800eb7c:	2b03      	cmp	r3, #3
 800eb7e:	f200 8085 	bhi.w	800ec8c <_dtoa_r+0x30c>
 800eb82:	e8df f003 	tbb	[pc, r3]
 800eb86:	3b2e      	.short	0x3b2e
 800eb88:	5839      	.short	0x5839
 800eb8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb8e:	441d      	add	r5, r3
 800eb90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb94:	2b20      	cmp	r3, #32
 800eb96:	bfc1      	itttt	gt
 800eb98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb9c:	fa08 f803 	lslgt.w	r8, r8, r3
 800eba0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800eba4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800eba8:	bfd6      	itet	le
 800ebaa:	f1c3 0320 	rsble	r3, r3, #32
 800ebae:	ea48 0003 	orrgt.w	r0, r8, r3
 800ebb2:	fa06 f003 	lslle.w	r0, r6, r3
 800ebb6:	f7f1 fcc5 	bl	8000544 <__aeabi_ui2d>
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ebc0:	3d01      	subs	r5, #1
 800ebc2:	920e      	str	r2, [sp, #56]	; 0x38
 800ebc4:	e76f      	b.n	800eaa6 <_dtoa_r+0x126>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e7b3      	b.n	800eb32 <_dtoa_r+0x1b2>
 800ebca:	900c      	str	r0, [sp, #48]	; 0x30
 800ebcc:	e7b2      	b.n	800eb34 <_dtoa_r+0x1b4>
 800ebce:	9b05      	ldr	r3, [sp, #20]
 800ebd0:	eba3 030b 	sub.w	r3, r3, fp
 800ebd4:	9305      	str	r3, [sp, #20]
 800ebd6:	f1cb 0300 	rsb	r3, fp, #0
 800ebda:	9308      	str	r3, [sp, #32]
 800ebdc:	2300      	movs	r3, #0
 800ebde:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebe0:	e7bf      	b.n	800eb62 <_dtoa_r+0x1e2>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dc52      	bgt.n	800ec92 <_dtoa_r+0x312>
 800ebec:	2301      	movs	r3, #1
 800ebee:	9301      	str	r3, [sp, #4]
 800ebf0:	9304      	str	r3, [sp, #16]
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	920a      	str	r2, [sp, #40]	; 0x28
 800ebf6:	e00b      	b.n	800ec10 <_dtoa_r+0x290>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e7f3      	b.n	800ebe4 <_dtoa_r+0x264>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ec00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec02:	445b      	add	r3, fp
 800ec04:	9301      	str	r3, [sp, #4]
 800ec06:	3301      	adds	r3, #1
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	9304      	str	r3, [sp, #16]
 800ec0c:	bfb8      	it	lt
 800ec0e:	2301      	movlt	r3, #1
 800ec10:	69e0      	ldr	r0, [r4, #28]
 800ec12:	2100      	movs	r1, #0
 800ec14:	2204      	movs	r2, #4
 800ec16:	f102 0614 	add.w	r6, r2, #20
 800ec1a:	429e      	cmp	r6, r3
 800ec1c:	d93d      	bls.n	800ec9a <_dtoa_r+0x31a>
 800ec1e:	6041      	str	r1, [r0, #4]
 800ec20:	4620      	mov	r0, r4
 800ec22:	f000 fcf3 	bl	800f60c <_Balloc>
 800ec26:	9000      	str	r0, [sp, #0]
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d139      	bne.n	800eca0 <_dtoa_r+0x320>
 800ec2c:	4b16      	ldr	r3, [pc, #88]	; (800ec88 <_dtoa_r+0x308>)
 800ec2e:	4602      	mov	r2, r0
 800ec30:	f240 11af 	movw	r1, #431	; 0x1af
 800ec34:	e6bd      	b.n	800e9b2 <_dtoa_r+0x32>
 800ec36:	2301      	movs	r3, #1
 800ec38:	e7e1      	b.n	800ebfe <_dtoa_r+0x27e>
 800ec3a:	2501      	movs	r5, #1
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9307      	str	r3, [sp, #28]
 800ec40:	9509      	str	r5, [sp, #36]	; 0x24
 800ec42:	f04f 33ff 	mov.w	r3, #4294967295
 800ec46:	9301      	str	r3, [sp, #4]
 800ec48:	9304      	str	r3, [sp, #16]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	2312      	movs	r3, #18
 800ec4e:	e7d1      	b.n	800ebf4 <_dtoa_r+0x274>
 800ec50:	636f4361 	.word	0x636f4361
 800ec54:	3fd287a7 	.word	0x3fd287a7
 800ec58:	8b60c8b3 	.word	0x8b60c8b3
 800ec5c:	3fc68a28 	.word	0x3fc68a28
 800ec60:	509f79fb 	.word	0x509f79fb
 800ec64:	3fd34413 	.word	0x3fd34413
 800ec68:	080129fc 	.word	0x080129fc
 800ec6c:	08012a13 	.word	0x08012a13
 800ec70:	7ff00000 	.word	0x7ff00000
 800ec74:	080129f8 	.word	0x080129f8
 800ec78:	080129ef 	.word	0x080129ef
 800ec7c:	08012d51 	.word	0x08012d51
 800ec80:	3ff80000 	.word	0x3ff80000
 800ec84:	08012b00 	.word	0x08012b00
 800ec88:	08012a6b 	.word	0x08012a6b
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec90:	e7d7      	b.n	800ec42 <_dtoa_r+0x2c2>
 800ec92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec94:	9301      	str	r3, [sp, #4]
 800ec96:	9304      	str	r3, [sp, #16]
 800ec98:	e7ba      	b.n	800ec10 <_dtoa_r+0x290>
 800ec9a:	3101      	adds	r1, #1
 800ec9c:	0052      	lsls	r2, r2, #1
 800ec9e:	e7ba      	b.n	800ec16 <_dtoa_r+0x296>
 800eca0:	69e3      	ldr	r3, [r4, #28]
 800eca2:	9a00      	ldr	r2, [sp, #0]
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	9b04      	ldr	r3, [sp, #16]
 800eca8:	2b0e      	cmp	r3, #14
 800ecaa:	f200 80a8 	bhi.w	800edfe <_dtoa_r+0x47e>
 800ecae:	2d00      	cmp	r5, #0
 800ecb0:	f000 80a5 	beq.w	800edfe <_dtoa_r+0x47e>
 800ecb4:	f1bb 0f00 	cmp.w	fp, #0
 800ecb8:	dd38      	ble.n	800ed2c <_dtoa_r+0x3ac>
 800ecba:	4bc0      	ldr	r3, [pc, #768]	; (800efbc <_dtoa_r+0x63c>)
 800ecbc:	f00b 020f 	and.w	r2, fp, #15
 800ecc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ecc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eccc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ecd0:	d019      	beq.n	800ed06 <_dtoa_r+0x386>
 800ecd2:	4bbb      	ldr	r3, [pc, #748]	; (800efc0 <_dtoa_r+0x640>)
 800ecd4:	ec51 0b18 	vmov	r0, r1, d8
 800ecd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecdc:	f7f1 fdd6 	bl	800088c <__aeabi_ddiv>
 800ece0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ece4:	f008 080f 	and.w	r8, r8, #15
 800ece8:	2503      	movs	r5, #3
 800ecea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800efc0 <_dtoa_r+0x640>
 800ecee:	f1b8 0f00 	cmp.w	r8, #0
 800ecf2:	d10a      	bne.n	800ed0a <_dtoa_r+0x38a>
 800ecf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecf8:	4632      	mov	r2, r6
 800ecfa:	463b      	mov	r3, r7
 800ecfc:	f7f1 fdc6 	bl	800088c <__aeabi_ddiv>
 800ed00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed04:	e02b      	b.n	800ed5e <_dtoa_r+0x3de>
 800ed06:	2502      	movs	r5, #2
 800ed08:	e7ef      	b.n	800ecea <_dtoa_r+0x36a>
 800ed0a:	f018 0f01 	tst.w	r8, #1
 800ed0e:	d008      	beq.n	800ed22 <_dtoa_r+0x3a2>
 800ed10:	4630      	mov	r0, r6
 800ed12:	4639      	mov	r1, r7
 800ed14:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ed18:	f7f1 fc8e 	bl	8000638 <__aeabi_dmul>
 800ed1c:	3501      	adds	r5, #1
 800ed1e:	4606      	mov	r6, r0
 800ed20:	460f      	mov	r7, r1
 800ed22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed26:	f109 0908 	add.w	r9, r9, #8
 800ed2a:	e7e0      	b.n	800ecee <_dtoa_r+0x36e>
 800ed2c:	f000 809f 	beq.w	800ee6e <_dtoa_r+0x4ee>
 800ed30:	f1cb 0600 	rsb	r6, fp, #0
 800ed34:	4ba1      	ldr	r3, [pc, #644]	; (800efbc <_dtoa_r+0x63c>)
 800ed36:	4fa2      	ldr	r7, [pc, #648]	; (800efc0 <_dtoa_r+0x640>)
 800ed38:	f006 020f 	and.w	r2, r6, #15
 800ed3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	ec51 0b18 	vmov	r0, r1, d8
 800ed48:	f7f1 fc76 	bl	8000638 <__aeabi_dmul>
 800ed4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed50:	1136      	asrs	r6, r6, #4
 800ed52:	2300      	movs	r3, #0
 800ed54:	2502      	movs	r5, #2
 800ed56:	2e00      	cmp	r6, #0
 800ed58:	d17e      	bne.n	800ee58 <_dtoa_r+0x4d8>
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1d0      	bne.n	800ed00 <_dtoa_r+0x380>
 800ed5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f000 8084 	beq.w	800ee72 <_dtoa_r+0x4f2>
 800ed6a:	4b96      	ldr	r3, [pc, #600]	; (800efc4 <_dtoa_r+0x644>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	4640      	mov	r0, r8
 800ed70:	4649      	mov	r1, r9
 800ed72:	f7f1 fed3 	bl	8000b1c <__aeabi_dcmplt>
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d07b      	beq.n	800ee72 <_dtoa_r+0x4f2>
 800ed7a:	9b04      	ldr	r3, [sp, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d078      	beq.n	800ee72 <_dtoa_r+0x4f2>
 800ed80:	9b01      	ldr	r3, [sp, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	dd39      	ble.n	800edfa <_dtoa_r+0x47a>
 800ed86:	4b90      	ldr	r3, [pc, #576]	; (800efc8 <_dtoa_r+0x648>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	4649      	mov	r1, r9
 800ed8e:	f7f1 fc53 	bl	8000638 <__aeabi_dmul>
 800ed92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed96:	9e01      	ldr	r6, [sp, #4]
 800ed98:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ed9c:	3501      	adds	r5, #1
 800ed9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eda2:	4628      	mov	r0, r5
 800eda4:	f7f1 fbde 	bl	8000564 <__aeabi_i2d>
 800eda8:	4642      	mov	r2, r8
 800edaa:	464b      	mov	r3, r9
 800edac:	f7f1 fc44 	bl	8000638 <__aeabi_dmul>
 800edb0:	4b86      	ldr	r3, [pc, #536]	; (800efcc <_dtoa_r+0x64c>)
 800edb2:	2200      	movs	r2, #0
 800edb4:	f7f1 fa8a 	bl	80002cc <__adddf3>
 800edb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800edbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edc0:	9303      	str	r3, [sp, #12]
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	d158      	bne.n	800ee78 <_dtoa_r+0x4f8>
 800edc6:	4b82      	ldr	r3, [pc, #520]	; (800efd0 <_dtoa_r+0x650>)
 800edc8:	2200      	movs	r2, #0
 800edca:	4640      	mov	r0, r8
 800edcc:	4649      	mov	r1, r9
 800edce:	f7f1 fa7b 	bl	80002c8 <__aeabi_dsub>
 800edd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edd6:	4680      	mov	r8, r0
 800edd8:	4689      	mov	r9, r1
 800edda:	f7f1 febd 	bl	8000b58 <__aeabi_dcmpgt>
 800edde:	2800      	cmp	r0, #0
 800ede0:	f040 8296 	bne.w	800f310 <_dtoa_r+0x990>
 800ede4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ede8:	4640      	mov	r0, r8
 800edea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edee:	4649      	mov	r1, r9
 800edf0:	f7f1 fe94 	bl	8000b1c <__aeabi_dcmplt>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	f040 8289 	bne.w	800f30c <_dtoa_r+0x98c>
 800edfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800edfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f2c0 814e 	blt.w	800f0a2 <_dtoa_r+0x722>
 800ee06:	f1bb 0f0e 	cmp.w	fp, #14
 800ee0a:	f300 814a 	bgt.w	800f0a2 <_dtoa_r+0x722>
 800ee0e:	4b6b      	ldr	r3, [pc, #428]	; (800efbc <_dtoa_r+0x63c>)
 800ee10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ee14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f280 80dc 	bge.w	800efd8 <_dtoa_r+0x658>
 800ee20:	9b04      	ldr	r3, [sp, #16]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f300 80d8 	bgt.w	800efd8 <_dtoa_r+0x658>
 800ee28:	f040 826f 	bne.w	800f30a <_dtoa_r+0x98a>
 800ee2c:	4b68      	ldr	r3, [pc, #416]	; (800efd0 <_dtoa_r+0x650>)
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4640      	mov	r0, r8
 800ee32:	4649      	mov	r1, r9
 800ee34:	f7f1 fc00 	bl	8000638 <__aeabi_dmul>
 800ee38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee3c:	f7f1 fe82 	bl	8000b44 <__aeabi_dcmpge>
 800ee40:	9e04      	ldr	r6, [sp, #16]
 800ee42:	4637      	mov	r7, r6
 800ee44:	2800      	cmp	r0, #0
 800ee46:	f040 8245 	bne.w	800f2d4 <_dtoa_r+0x954>
 800ee4a:	9d00      	ldr	r5, [sp, #0]
 800ee4c:	2331      	movs	r3, #49	; 0x31
 800ee4e:	f805 3b01 	strb.w	r3, [r5], #1
 800ee52:	f10b 0b01 	add.w	fp, fp, #1
 800ee56:	e241      	b.n	800f2dc <_dtoa_r+0x95c>
 800ee58:	07f2      	lsls	r2, r6, #31
 800ee5a:	d505      	bpl.n	800ee68 <_dtoa_r+0x4e8>
 800ee5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee60:	f7f1 fbea 	bl	8000638 <__aeabi_dmul>
 800ee64:	3501      	adds	r5, #1
 800ee66:	2301      	movs	r3, #1
 800ee68:	1076      	asrs	r6, r6, #1
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	e773      	b.n	800ed56 <_dtoa_r+0x3d6>
 800ee6e:	2502      	movs	r5, #2
 800ee70:	e775      	b.n	800ed5e <_dtoa_r+0x3de>
 800ee72:	9e04      	ldr	r6, [sp, #16]
 800ee74:	465f      	mov	r7, fp
 800ee76:	e792      	b.n	800ed9e <_dtoa_r+0x41e>
 800ee78:	9900      	ldr	r1, [sp, #0]
 800ee7a:	4b50      	ldr	r3, [pc, #320]	; (800efbc <_dtoa_r+0x63c>)
 800ee7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee80:	4431      	add	r1, r6
 800ee82:	9102      	str	r1, [sp, #8]
 800ee84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee86:	eeb0 9a47 	vmov.f32	s18, s14
 800ee8a:	eef0 9a67 	vmov.f32	s19, s15
 800ee8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee96:	2900      	cmp	r1, #0
 800ee98:	d044      	beq.n	800ef24 <_dtoa_r+0x5a4>
 800ee9a:	494e      	ldr	r1, [pc, #312]	; (800efd4 <_dtoa_r+0x654>)
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	f7f1 fcf5 	bl	800088c <__aeabi_ddiv>
 800eea2:	ec53 2b19 	vmov	r2, r3, d9
 800eea6:	f7f1 fa0f 	bl	80002c8 <__aeabi_dsub>
 800eeaa:	9d00      	ldr	r5, [sp, #0]
 800eeac:	ec41 0b19 	vmov	d9, r0, r1
 800eeb0:	4649      	mov	r1, r9
 800eeb2:	4640      	mov	r0, r8
 800eeb4:	f7f1 fe70 	bl	8000b98 <__aeabi_d2iz>
 800eeb8:	4606      	mov	r6, r0
 800eeba:	f7f1 fb53 	bl	8000564 <__aeabi_i2d>
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	4640      	mov	r0, r8
 800eec4:	4649      	mov	r1, r9
 800eec6:	f7f1 f9ff 	bl	80002c8 <__aeabi_dsub>
 800eeca:	3630      	adds	r6, #48	; 0x30
 800eecc:	f805 6b01 	strb.w	r6, [r5], #1
 800eed0:	ec53 2b19 	vmov	r2, r3, d9
 800eed4:	4680      	mov	r8, r0
 800eed6:	4689      	mov	r9, r1
 800eed8:	f7f1 fe20 	bl	8000b1c <__aeabi_dcmplt>
 800eedc:	2800      	cmp	r0, #0
 800eede:	d164      	bne.n	800efaa <_dtoa_r+0x62a>
 800eee0:	4642      	mov	r2, r8
 800eee2:	464b      	mov	r3, r9
 800eee4:	4937      	ldr	r1, [pc, #220]	; (800efc4 <_dtoa_r+0x644>)
 800eee6:	2000      	movs	r0, #0
 800eee8:	f7f1 f9ee 	bl	80002c8 <__aeabi_dsub>
 800eeec:	ec53 2b19 	vmov	r2, r3, d9
 800eef0:	f7f1 fe14 	bl	8000b1c <__aeabi_dcmplt>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	f040 80b6 	bne.w	800f066 <_dtoa_r+0x6e6>
 800eefa:	9b02      	ldr	r3, [sp, #8]
 800eefc:	429d      	cmp	r5, r3
 800eefe:	f43f af7c 	beq.w	800edfa <_dtoa_r+0x47a>
 800ef02:	4b31      	ldr	r3, [pc, #196]	; (800efc8 <_dtoa_r+0x648>)
 800ef04:	ec51 0b19 	vmov	r0, r1, d9
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f7f1 fb95 	bl	8000638 <__aeabi_dmul>
 800ef0e:	4b2e      	ldr	r3, [pc, #184]	; (800efc8 <_dtoa_r+0x648>)
 800ef10:	ec41 0b19 	vmov	d9, r0, r1
 800ef14:	2200      	movs	r2, #0
 800ef16:	4640      	mov	r0, r8
 800ef18:	4649      	mov	r1, r9
 800ef1a:	f7f1 fb8d 	bl	8000638 <__aeabi_dmul>
 800ef1e:	4680      	mov	r8, r0
 800ef20:	4689      	mov	r9, r1
 800ef22:	e7c5      	b.n	800eeb0 <_dtoa_r+0x530>
 800ef24:	ec51 0b17 	vmov	r0, r1, d7
 800ef28:	f7f1 fb86 	bl	8000638 <__aeabi_dmul>
 800ef2c:	9b02      	ldr	r3, [sp, #8]
 800ef2e:	9d00      	ldr	r5, [sp, #0]
 800ef30:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef32:	ec41 0b19 	vmov	d9, r0, r1
 800ef36:	4649      	mov	r1, r9
 800ef38:	4640      	mov	r0, r8
 800ef3a:	f7f1 fe2d 	bl	8000b98 <__aeabi_d2iz>
 800ef3e:	4606      	mov	r6, r0
 800ef40:	f7f1 fb10 	bl	8000564 <__aeabi_i2d>
 800ef44:	3630      	adds	r6, #48	; 0x30
 800ef46:	4602      	mov	r2, r0
 800ef48:	460b      	mov	r3, r1
 800ef4a:	4640      	mov	r0, r8
 800ef4c:	4649      	mov	r1, r9
 800ef4e:	f7f1 f9bb 	bl	80002c8 <__aeabi_dsub>
 800ef52:	f805 6b01 	strb.w	r6, [r5], #1
 800ef56:	9b02      	ldr	r3, [sp, #8]
 800ef58:	429d      	cmp	r5, r3
 800ef5a:	4680      	mov	r8, r0
 800ef5c:	4689      	mov	r9, r1
 800ef5e:	f04f 0200 	mov.w	r2, #0
 800ef62:	d124      	bne.n	800efae <_dtoa_r+0x62e>
 800ef64:	4b1b      	ldr	r3, [pc, #108]	; (800efd4 <_dtoa_r+0x654>)
 800ef66:	ec51 0b19 	vmov	r0, r1, d9
 800ef6a:	f7f1 f9af 	bl	80002cc <__adddf3>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4640      	mov	r0, r8
 800ef74:	4649      	mov	r1, r9
 800ef76:	f7f1 fdef 	bl	8000b58 <__aeabi_dcmpgt>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d173      	bne.n	800f066 <_dtoa_r+0x6e6>
 800ef7e:	ec53 2b19 	vmov	r2, r3, d9
 800ef82:	4914      	ldr	r1, [pc, #80]	; (800efd4 <_dtoa_r+0x654>)
 800ef84:	2000      	movs	r0, #0
 800ef86:	f7f1 f99f 	bl	80002c8 <__aeabi_dsub>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	4640      	mov	r0, r8
 800ef90:	4649      	mov	r1, r9
 800ef92:	f7f1 fdc3 	bl	8000b1c <__aeabi_dcmplt>
 800ef96:	2800      	cmp	r0, #0
 800ef98:	f43f af2f 	beq.w	800edfa <_dtoa_r+0x47a>
 800ef9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef9e:	1e6b      	subs	r3, r5, #1
 800efa0:	930f      	str	r3, [sp, #60]	; 0x3c
 800efa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800efa6:	2b30      	cmp	r3, #48	; 0x30
 800efa8:	d0f8      	beq.n	800ef9c <_dtoa_r+0x61c>
 800efaa:	46bb      	mov	fp, r7
 800efac:	e04a      	b.n	800f044 <_dtoa_r+0x6c4>
 800efae:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <_dtoa_r+0x648>)
 800efb0:	f7f1 fb42 	bl	8000638 <__aeabi_dmul>
 800efb4:	4680      	mov	r8, r0
 800efb6:	4689      	mov	r9, r1
 800efb8:	e7bd      	b.n	800ef36 <_dtoa_r+0x5b6>
 800efba:	bf00      	nop
 800efbc:	08012b00 	.word	0x08012b00
 800efc0:	08012ad8 	.word	0x08012ad8
 800efc4:	3ff00000 	.word	0x3ff00000
 800efc8:	40240000 	.word	0x40240000
 800efcc:	401c0000 	.word	0x401c0000
 800efd0:	40140000 	.word	0x40140000
 800efd4:	3fe00000 	.word	0x3fe00000
 800efd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800efdc:	9d00      	ldr	r5, [sp, #0]
 800efde:	4642      	mov	r2, r8
 800efe0:	464b      	mov	r3, r9
 800efe2:	4630      	mov	r0, r6
 800efe4:	4639      	mov	r1, r7
 800efe6:	f7f1 fc51 	bl	800088c <__aeabi_ddiv>
 800efea:	f7f1 fdd5 	bl	8000b98 <__aeabi_d2iz>
 800efee:	9001      	str	r0, [sp, #4]
 800eff0:	f7f1 fab8 	bl	8000564 <__aeabi_i2d>
 800eff4:	4642      	mov	r2, r8
 800eff6:	464b      	mov	r3, r9
 800eff8:	f7f1 fb1e 	bl	8000638 <__aeabi_dmul>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	4630      	mov	r0, r6
 800f002:	4639      	mov	r1, r7
 800f004:	f7f1 f960 	bl	80002c8 <__aeabi_dsub>
 800f008:	9e01      	ldr	r6, [sp, #4]
 800f00a:	9f04      	ldr	r7, [sp, #16]
 800f00c:	3630      	adds	r6, #48	; 0x30
 800f00e:	f805 6b01 	strb.w	r6, [r5], #1
 800f012:	9e00      	ldr	r6, [sp, #0]
 800f014:	1bae      	subs	r6, r5, r6
 800f016:	42b7      	cmp	r7, r6
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	d134      	bne.n	800f088 <_dtoa_r+0x708>
 800f01e:	f7f1 f955 	bl	80002cc <__adddf3>
 800f022:	4642      	mov	r2, r8
 800f024:	464b      	mov	r3, r9
 800f026:	4606      	mov	r6, r0
 800f028:	460f      	mov	r7, r1
 800f02a:	f7f1 fd95 	bl	8000b58 <__aeabi_dcmpgt>
 800f02e:	b9c8      	cbnz	r0, 800f064 <_dtoa_r+0x6e4>
 800f030:	4642      	mov	r2, r8
 800f032:	464b      	mov	r3, r9
 800f034:	4630      	mov	r0, r6
 800f036:	4639      	mov	r1, r7
 800f038:	f7f1 fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800f03c:	b110      	cbz	r0, 800f044 <_dtoa_r+0x6c4>
 800f03e:	9b01      	ldr	r3, [sp, #4]
 800f040:	07db      	lsls	r3, r3, #31
 800f042:	d40f      	bmi.n	800f064 <_dtoa_r+0x6e4>
 800f044:	4651      	mov	r1, sl
 800f046:	4620      	mov	r0, r4
 800f048:	f000 fb20 	bl	800f68c <_Bfree>
 800f04c:	2300      	movs	r3, #0
 800f04e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f050:	702b      	strb	r3, [r5, #0]
 800f052:	f10b 0301 	add.w	r3, fp, #1
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f43f ace2 	beq.w	800ea24 <_dtoa_r+0xa4>
 800f060:	601d      	str	r5, [r3, #0]
 800f062:	e4df      	b.n	800ea24 <_dtoa_r+0xa4>
 800f064:	465f      	mov	r7, fp
 800f066:	462b      	mov	r3, r5
 800f068:	461d      	mov	r5, r3
 800f06a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f06e:	2a39      	cmp	r2, #57	; 0x39
 800f070:	d106      	bne.n	800f080 <_dtoa_r+0x700>
 800f072:	9a00      	ldr	r2, [sp, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	d1f7      	bne.n	800f068 <_dtoa_r+0x6e8>
 800f078:	9900      	ldr	r1, [sp, #0]
 800f07a:	2230      	movs	r2, #48	; 0x30
 800f07c:	3701      	adds	r7, #1
 800f07e:	700a      	strb	r2, [r1, #0]
 800f080:	781a      	ldrb	r2, [r3, #0]
 800f082:	3201      	adds	r2, #1
 800f084:	701a      	strb	r2, [r3, #0]
 800f086:	e790      	b.n	800efaa <_dtoa_r+0x62a>
 800f088:	4ba3      	ldr	r3, [pc, #652]	; (800f318 <_dtoa_r+0x998>)
 800f08a:	2200      	movs	r2, #0
 800f08c:	f7f1 fad4 	bl	8000638 <__aeabi_dmul>
 800f090:	2200      	movs	r2, #0
 800f092:	2300      	movs	r3, #0
 800f094:	4606      	mov	r6, r0
 800f096:	460f      	mov	r7, r1
 800f098:	f7f1 fd36 	bl	8000b08 <__aeabi_dcmpeq>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d09e      	beq.n	800efde <_dtoa_r+0x65e>
 800f0a0:	e7d0      	b.n	800f044 <_dtoa_r+0x6c4>
 800f0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0a4:	2a00      	cmp	r2, #0
 800f0a6:	f000 80ca 	beq.w	800f23e <_dtoa_r+0x8be>
 800f0aa:	9a07      	ldr	r2, [sp, #28]
 800f0ac:	2a01      	cmp	r2, #1
 800f0ae:	f300 80ad 	bgt.w	800f20c <_dtoa_r+0x88c>
 800f0b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0b4:	2a00      	cmp	r2, #0
 800f0b6:	f000 80a5 	beq.w	800f204 <_dtoa_r+0x884>
 800f0ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f0be:	9e08      	ldr	r6, [sp, #32]
 800f0c0:	9d05      	ldr	r5, [sp, #20]
 800f0c2:	9a05      	ldr	r2, [sp, #20]
 800f0c4:	441a      	add	r2, r3
 800f0c6:	9205      	str	r2, [sp, #20]
 800f0c8:	9a06      	ldr	r2, [sp, #24]
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	441a      	add	r2, r3
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	9206      	str	r2, [sp, #24]
 800f0d2:	f000 fbdb 	bl	800f88c <__i2b>
 800f0d6:	4607      	mov	r7, r0
 800f0d8:	b165      	cbz	r5, 800f0f4 <_dtoa_r+0x774>
 800f0da:	9b06      	ldr	r3, [sp, #24]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	dd09      	ble.n	800f0f4 <_dtoa_r+0x774>
 800f0e0:	42ab      	cmp	r3, r5
 800f0e2:	9a05      	ldr	r2, [sp, #20]
 800f0e4:	bfa8      	it	ge
 800f0e6:	462b      	movge	r3, r5
 800f0e8:	1ad2      	subs	r2, r2, r3
 800f0ea:	9205      	str	r2, [sp, #20]
 800f0ec:	9a06      	ldr	r2, [sp, #24]
 800f0ee:	1aed      	subs	r5, r5, r3
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	9306      	str	r3, [sp, #24]
 800f0f4:	9b08      	ldr	r3, [sp, #32]
 800f0f6:	b1f3      	cbz	r3, 800f136 <_dtoa_r+0x7b6>
 800f0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 80a3 	beq.w	800f246 <_dtoa_r+0x8c6>
 800f100:	2e00      	cmp	r6, #0
 800f102:	dd10      	ble.n	800f126 <_dtoa_r+0x7a6>
 800f104:	4639      	mov	r1, r7
 800f106:	4632      	mov	r2, r6
 800f108:	4620      	mov	r0, r4
 800f10a:	f000 fc7f 	bl	800fa0c <__pow5mult>
 800f10e:	4652      	mov	r2, sl
 800f110:	4601      	mov	r1, r0
 800f112:	4607      	mov	r7, r0
 800f114:	4620      	mov	r0, r4
 800f116:	f000 fbcf 	bl	800f8b8 <__multiply>
 800f11a:	4651      	mov	r1, sl
 800f11c:	4680      	mov	r8, r0
 800f11e:	4620      	mov	r0, r4
 800f120:	f000 fab4 	bl	800f68c <_Bfree>
 800f124:	46c2      	mov	sl, r8
 800f126:	9b08      	ldr	r3, [sp, #32]
 800f128:	1b9a      	subs	r2, r3, r6
 800f12a:	d004      	beq.n	800f136 <_dtoa_r+0x7b6>
 800f12c:	4651      	mov	r1, sl
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 fc6c 	bl	800fa0c <__pow5mult>
 800f134:	4682      	mov	sl, r0
 800f136:	2101      	movs	r1, #1
 800f138:	4620      	mov	r0, r4
 800f13a:	f000 fba7 	bl	800f88c <__i2b>
 800f13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f140:	2b00      	cmp	r3, #0
 800f142:	4606      	mov	r6, r0
 800f144:	f340 8081 	ble.w	800f24a <_dtoa_r+0x8ca>
 800f148:	461a      	mov	r2, r3
 800f14a:	4601      	mov	r1, r0
 800f14c:	4620      	mov	r0, r4
 800f14e:	f000 fc5d 	bl	800fa0c <__pow5mult>
 800f152:	9b07      	ldr	r3, [sp, #28]
 800f154:	2b01      	cmp	r3, #1
 800f156:	4606      	mov	r6, r0
 800f158:	dd7a      	ble.n	800f250 <_dtoa_r+0x8d0>
 800f15a:	f04f 0800 	mov.w	r8, #0
 800f15e:	6933      	ldr	r3, [r6, #16]
 800f160:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f164:	6918      	ldr	r0, [r3, #16]
 800f166:	f000 fb43 	bl	800f7f0 <__hi0bits>
 800f16a:	f1c0 0020 	rsb	r0, r0, #32
 800f16e:	9b06      	ldr	r3, [sp, #24]
 800f170:	4418      	add	r0, r3
 800f172:	f010 001f 	ands.w	r0, r0, #31
 800f176:	f000 8094 	beq.w	800f2a2 <_dtoa_r+0x922>
 800f17a:	f1c0 0320 	rsb	r3, r0, #32
 800f17e:	2b04      	cmp	r3, #4
 800f180:	f340 8085 	ble.w	800f28e <_dtoa_r+0x90e>
 800f184:	9b05      	ldr	r3, [sp, #20]
 800f186:	f1c0 001c 	rsb	r0, r0, #28
 800f18a:	4403      	add	r3, r0
 800f18c:	9305      	str	r3, [sp, #20]
 800f18e:	9b06      	ldr	r3, [sp, #24]
 800f190:	4403      	add	r3, r0
 800f192:	4405      	add	r5, r0
 800f194:	9306      	str	r3, [sp, #24]
 800f196:	9b05      	ldr	r3, [sp, #20]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	dd05      	ble.n	800f1a8 <_dtoa_r+0x828>
 800f19c:	4651      	mov	r1, sl
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f000 fc8d 	bl	800fac0 <__lshift>
 800f1a6:	4682      	mov	sl, r0
 800f1a8:	9b06      	ldr	r3, [sp, #24]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	dd05      	ble.n	800f1ba <_dtoa_r+0x83a>
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 fc84 	bl	800fac0 <__lshift>
 800f1b8:	4606      	mov	r6, r0
 800f1ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d072      	beq.n	800f2a6 <_dtoa_r+0x926>
 800f1c0:	4631      	mov	r1, r6
 800f1c2:	4650      	mov	r0, sl
 800f1c4:	f000 fce8 	bl	800fb98 <__mcmp>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	da6c      	bge.n	800f2a6 <_dtoa_r+0x926>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4651      	mov	r1, sl
 800f1d0:	220a      	movs	r2, #10
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f000 fa7c 	bl	800f6d0 <__multadd>
 800f1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1de:	4682      	mov	sl, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 81b0 	beq.w	800f546 <_dtoa_r+0xbc6>
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	4639      	mov	r1, r7
 800f1ea:	220a      	movs	r2, #10
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 fa6f 	bl	800f6d0 <__multadd>
 800f1f2:	9b01      	ldr	r3, [sp, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	4607      	mov	r7, r0
 800f1f8:	f300 8096 	bgt.w	800f328 <_dtoa_r+0x9a8>
 800f1fc:	9b07      	ldr	r3, [sp, #28]
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	dc59      	bgt.n	800f2b6 <_dtoa_r+0x936>
 800f202:	e091      	b.n	800f328 <_dtoa_r+0x9a8>
 800f204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f20a:	e758      	b.n	800f0be <_dtoa_r+0x73e>
 800f20c:	9b04      	ldr	r3, [sp, #16]
 800f20e:	1e5e      	subs	r6, r3, #1
 800f210:	9b08      	ldr	r3, [sp, #32]
 800f212:	42b3      	cmp	r3, r6
 800f214:	bfbf      	itttt	lt
 800f216:	9b08      	ldrlt	r3, [sp, #32]
 800f218:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f21a:	9608      	strlt	r6, [sp, #32]
 800f21c:	1af3      	sublt	r3, r6, r3
 800f21e:	bfb4      	ite	lt
 800f220:	18d2      	addlt	r2, r2, r3
 800f222:	1b9e      	subge	r6, r3, r6
 800f224:	9b04      	ldr	r3, [sp, #16]
 800f226:	bfbc      	itt	lt
 800f228:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f22a:	2600      	movlt	r6, #0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	bfb7      	itett	lt
 800f230:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f234:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f238:	1a9d      	sublt	r5, r3, r2
 800f23a:	2300      	movlt	r3, #0
 800f23c:	e741      	b.n	800f0c2 <_dtoa_r+0x742>
 800f23e:	9e08      	ldr	r6, [sp, #32]
 800f240:	9d05      	ldr	r5, [sp, #20]
 800f242:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f244:	e748      	b.n	800f0d8 <_dtoa_r+0x758>
 800f246:	9a08      	ldr	r2, [sp, #32]
 800f248:	e770      	b.n	800f12c <_dtoa_r+0x7ac>
 800f24a:	9b07      	ldr	r3, [sp, #28]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	dc19      	bgt.n	800f284 <_dtoa_r+0x904>
 800f250:	9b02      	ldr	r3, [sp, #8]
 800f252:	b9bb      	cbnz	r3, 800f284 <_dtoa_r+0x904>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f25a:	b99b      	cbnz	r3, 800f284 <_dtoa_r+0x904>
 800f25c:	9b03      	ldr	r3, [sp, #12]
 800f25e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f262:	0d1b      	lsrs	r3, r3, #20
 800f264:	051b      	lsls	r3, r3, #20
 800f266:	b183      	cbz	r3, 800f28a <_dtoa_r+0x90a>
 800f268:	9b05      	ldr	r3, [sp, #20]
 800f26a:	3301      	adds	r3, #1
 800f26c:	9305      	str	r3, [sp, #20]
 800f26e:	9b06      	ldr	r3, [sp, #24]
 800f270:	3301      	adds	r3, #1
 800f272:	9306      	str	r3, [sp, #24]
 800f274:	f04f 0801 	mov.w	r8, #1
 800f278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f47f af6f 	bne.w	800f15e <_dtoa_r+0x7de>
 800f280:	2001      	movs	r0, #1
 800f282:	e774      	b.n	800f16e <_dtoa_r+0x7ee>
 800f284:	f04f 0800 	mov.w	r8, #0
 800f288:	e7f6      	b.n	800f278 <_dtoa_r+0x8f8>
 800f28a:	4698      	mov	r8, r3
 800f28c:	e7f4      	b.n	800f278 <_dtoa_r+0x8f8>
 800f28e:	d082      	beq.n	800f196 <_dtoa_r+0x816>
 800f290:	9a05      	ldr	r2, [sp, #20]
 800f292:	331c      	adds	r3, #28
 800f294:	441a      	add	r2, r3
 800f296:	9205      	str	r2, [sp, #20]
 800f298:	9a06      	ldr	r2, [sp, #24]
 800f29a:	441a      	add	r2, r3
 800f29c:	441d      	add	r5, r3
 800f29e:	9206      	str	r2, [sp, #24]
 800f2a0:	e779      	b.n	800f196 <_dtoa_r+0x816>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	e7f4      	b.n	800f290 <_dtoa_r+0x910>
 800f2a6:	9b04      	ldr	r3, [sp, #16]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	dc37      	bgt.n	800f31c <_dtoa_r+0x99c>
 800f2ac:	9b07      	ldr	r3, [sp, #28]
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	dd34      	ble.n	800f31c <_dtoa_r+0x99c>
 800f2b2:	9b04      	ldr	r3, [sp, #16]
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	b963      	cbnz	r3, 800f2d4 <_dtoa_r+0x954>
 800f2ba:	4631      	mov	r1, r6
 800f2bc:	2205      	movs	r2, #5
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 fa06 	bl	800f6d0 <__multadd>
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	4650      	mov	r0, sl
 800f2ca:	f000 fc65 	bl	800fb98 <__mcmp>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f73f adbb 	bgt.w	800ee4a <_dtoa_r+0x4ca>
 800f2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d6:	9d00      	ldr	r5, [sp, #0]
 800f2d8:	ea6f 0b03 	mvn.w	fp, r3
 800f2dc:	f04f 0800 	mov.w	r8, #0
 800f2e0:	4631      	mov	r1, r6
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f000 f9d2 	bl	800f68c <_Bfree>
 800f2e8:	2f00      	cmp	r7, #0
 800f2ea:	f43f aeab 	beq.w	800f044 <_dtoa_r+0x6c4>
 800f2ee:	f1b8 0f00 	cmp.w	r8, #0
 800f2f2:	d005      	beq.n	800f300 <_dtoa_r+0x980>
 800f2f4:	45b8      	cmp	r8, r7
 800f2f6:	d003      	beq.n	800f300 <_dtoa_r+0x980>
 800f2f8:	4641      	mov	r1, r8
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 f9c6 	bl	800f68c <_Bfree>
 800f300:	4639      	mov	r1, r7
 800f302:	4620      	mov	r0, r4
 800f304:	f000 f9c2 	bl	800f68c <_Bfree>
 800f308:	e69c      	b.n	800f044 <_dtoa_r+0x6c4>
 800f30a:	2600      	movs	r6, #0
 800f30c:	4637      	mov	r7, r6
 800f30e:	e7e1      	b.n	800f2d4 <_dtoa_r+0x954>
 800f310:	46bb      	mov	fp, r7
 800f312:	4637      	mov	r7, r6
 800f314:	e599      	b.n	800ee4a <_dtoa_r+0x4ca>
 800f316:	bf00      	nop
 800f318:	40240000 	.word	0x40240000
 800f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f000 80c8 	beq.w	800f4b4 <_dtoa_r+0xb34>
 800f324:	9b04      	ldr	r3, [sp, #16]
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	2d00      	cmp	r5, #0
 800f32a:	dd05      	ble.n	800f338 <_dtoa_r+0x9b8>
 800f32c:	4639      	mov	r1, r7
 800f32e:	462a      	mov	r2, r5
 800f330:	4620      	mov	r0, r4
 800f332:	f000 fbc5 	bl	800fac0 <__lshift>
 800f336:	4607      	mov	r7, r0
 800f338:	f1b8 0f00 	cmp.w	r8, #0
 800f33c:	d05b      	beq.n	800f3f6 <_dtoa_r+0xa76>
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	4620      	mov	r0, r4
 800f342:	f000 f963 	bl	800f60c <_Balloc>
 800f346:	4605      	mov	r5, r0
 800f348:	b928      	cbnz	r0, 800f356 <_dtoa_r+0x9d6>
 800f34a:	4b83      	ldr	r3, [pc, #524]	; (800f558 <_dtoa_r+0xbd8>)
 800f34c:	4602      	mov	r2, r0
 800f34e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f352:	f7ff bb2e 	b.w	800e9b2 <_dtoa_r+0x32>
 800f356:	693a      	ldr	r2, [r7, #16]
 800f358:	3202      	adds	r2, #2
 800f35a:	0092      	lsls	r2, r2, #2
 800f35c:	f107 010c 	add.w	r1, r7, #12
 800f360:	300c      	adds	r0, #12
 800f362:	f7ff fa71 	bl	800e848 <memcpy>
 800f366:	2201      	movs	r2, #1
 800f368:	4629      	mov	r1, r5
 800f36a:	4620      	mov	r0, r4
 800f36c:	f000 fba8 	bl	800fac0 <__lshift>
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	3301      	adds	r3, #1
 800f374:	9304      	str	r3, [sp, #16]
 800f376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f37a:	4413      	add	r3, r2
 800f37c:	9308      	str	r3, [sp, #32]
 800f37e:	9b02      	ldr	r3, [sp, #8]
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	46b8      	mov	r8, r7
 800f386:	9306      	str	r3, [sp, #24]
 800f388:	4607      	mov	r7, r0
 800f38a:	9b04      	ldr	r3, [sp, #16]
 800f38c:	4631      	mov	r1, r6
 800f38e:	3b01      	subs	r3, #1
 800f390:	4650      	mov	r0, sl
 800f392:	9301      	str	r3, [sp, #4]
 800f394:	f7ff fa6c 	bl	800e870 <quorem>
 800f398:	4641      	mov	r1, r8
 800f39a:	9002      	str	r0, [sp, #8]
 800f39c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f3a0:	4650      	mov	r0, sl
 800f3a2:	f000 fbf9 	bl	800fb98 <__mcmp>
 800f3a6:	463a      	mov	r2, r7
 800f3a8:	9005      	str	r0, [sp, #20]
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	f000 fc0f 	bl	800fbd0 <__mdiff>
 800f3b2:	68c2      	ldr	r2, [r0, #12]
 800f3b4:	4605      	mov	r5, r0
 800f3b6:	bb02      	cbnz	r2, 800f3fa <_dtoa_r+0xa7a>
 800f3b8:	4601      	mov	r1, r0
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	f000 fbec 	bl	800fb98 <__mcmp>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	9209      	str	r2, [sp, #36]	; 0x24
 800f3c8:	f000 f960 	bl	800f68c <_Bfree>
 800f3cc:	9b07      	ldr	r3, [sp, #28]
 800f3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3d0:	9d04      	ldr	r5, [sp, #16]
 800f3d2:	ea43 0102 	orr.w	r1, r3, r2
 800f3d6:	9b06      	ldr	r3, [sp, #24]
 800f3d8:	4319      	orrs	r1, r3
 800f3da:	d110      	bne.n	800f3fe <_dtoa_r+0xa7e>
 800f3dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f3e0:	d029      	beq.n	800f436 <_dtoa_r+0xab6>
 800f3e2:	9b05      	ldr	r3, [sp, #20]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dd02      	ble.n	800f3ee <_dtoa_r+0xa6e>
 800f3e8:	9b02      	ldr	r3, [sp, #8]
 800f3ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	f883 9000 	strb.w	r9, [r3]
 800f3f4:	e774      	b.n	800f2e0 <_dtoa_r+0x960>
 800f3f6:	4638      	mov	r0, r7
 800f3f8:	e7ba      	b.n	800f370 <_dtoa_r+0x9f0>
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	e7e1      	b.n	800f3c2 <_dtoa_r+0xa42>
 800f3fe:	9b05      	ldr	r3, [sp, #20]
 800f400:	2b00      	cmp	r3, #0
 800f402:	db04      	blt.n	800f40e <_dtoa_r+0xa8e>
 800f404:	9907      	ldr	r1, [sp, #28]
 800f406:	430b      	orrs	r3, r1
 800f408:	9906      	ldr	r1, [sp, #24]
 800f40a:	430b      	orrs	r3, r1
 800f40c:	d120      	bne.n	800f450 <_dtoa_r+0xad0>
 800f40e:	2a00      	cmp	r2, #0
 800f410:	dded      	ble.n	800f3ee <_dtoa_r+0xa6e>
 800f412:	4651      	mov	r1, sl
 800f414:	2201      	movs	r2, #1
 800f416:	4620      	mov	r0, r4
 800f418:	f000 fb52 	bl	800fac0 <__lshift>
 800f41c:	4631      	mov	r1, r6
 800f41e:	4682      	mov	sl, r0
 800f420:	f000 fbba 	bl	800fb98 <__mcmp>
 800f424:	2800      	cmp	r0, #0
 800f426:	dc03      	bgt.n	800f430 <_dtoa_r+0xab0>
 800f428:	d1e1      	bne.n	800f3ee <_dtoa_r+0xa6e>
 800f42a:	f019 0f01 	tst.w	r9, #1
 800f42e:	d0de      	beq.n	800f3ee <_dtoa_r+0xa6e>
 800f430:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f434:	d1d8      	bne.n	800f3e8 <_dtoa_r+0xa68>
 800f436:	9a01      	ldr	r2, [sp, #4]
 800f438:	2339      	movs	r3, #57	; 0x39
 800f43a:	7013      	strb	r3, [r2, #0]
 800f43c:	462b      	mov	r3, r5
 800f43e:	461d      	mov	r5, r3
 800f440:	3b01      	subs	r3, #1
 800f442:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f446:	2a39      	cmp	r2, #57	; 0x39
 800f448:	d06c      	beq.n	800f524 <_dtoa_r+0xba4>
 800f44a:	3201      	adds	r2, #1
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	e747      	b.n	800f2e0 <_dtoa_r+0x960>
 800f450:	2a00      	cmp	r2, #0
 800f452:	dd07      	ble.n	800f464 <_dtoa_r+0xae4>
 800f454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f458:	d0ed      	beq.n	800f436 <_dtoa_r+0xab6>
 800f45a:	9a01      	ldr	r2, [sp, #4]
 800f45c:	f109 0301 	add.w	r3, r9, #1
 800f460:	7013      	strb	r3, [r2, #0]
 800f462:	e73d      	b.n	800f2e0 <_dtoa_r+0x960>
 800f464:	9b04      	ldr	r3, [sp, #16]
 800f466:	9a08      	ldr	r2, [sp, #32]
 800f468:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d043      	beq.n	800f4f8 <_dtoa_r+0xb78>
 800f470:	4651      	mov	r1, sl
 800f472:	2300      	movs	r3, #0
 800f474:	220a      	movs	r2, #10
 800f476:	4620      	mov	r0, r4
 800f478:	f000 f92a 	bl	800f6d0 <__multadd>
 800f47c:	45b8      	cmp	r8, r7
 800f47e:	4682      	mov	sl, r0
 800f480:	f04f 0300 	mov.w	r3, #0
 800f484:	f04f 020a 	mov.w	r2, #10
 800f488:	4641      	mov	r1, r8
 800f48a:	4620      	mov	r0, r4
 800f48c:	d107      	bne.n	800f49e <_dtoa_r+0xb1e>
 800f48e:	f000 f91f 	bl	800f6d0 <__multadd>
 800f492:	4680      	mov	r8, r0
 800f494:	4607      	mov	r7, r0
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	3301      	adds	r3, #1
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	e775      	b.n	800f38a <_dtoa_r+0xa0a>
 800f49e:	f000 f917 	bl	800f6d0 <__multadd>
 800f4a2:	4639      	mov	r1, r7
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f000 f910 	bl	800f6d0 <__multadd>
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	e7f0      	b.n	800f496 <_dtoa_r+0xb16>
 800f4b4:	9b04      	ldr	r3, [sp, #16]
 800f4b6:	9301      	str	r3, [sp, #4]
 800f4b8:	9d00      	ldr	r5, [sp, #0]
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4650      	mov	r0, sl
 800f4be:	f7ff f9d7 	bl	800e870 <quorem>
 800f4c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f4c6:	9b00      	ldr	r3, [sp, #0]
 800f4c8:	f805 9b01 	strb.w	r9, [r5], #1
 800f4cc:	1aea      	subs	r2, r5, r3
 800f4ce:	9b01      	ldr	r3, [sp, #4]
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	dd07      	ble.n	800f4e4 <_dtoa_r+0xb64>
 800f4d4:	4651      	mov	r1, sl
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	220a      	movs	r2, #10
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f000 f8f8 	bl	800f6d0 <__multadd>
 800f4e0:	4682      	mov	sl, r0
 800f4e2:	e7ea      	b.n	800f4ba <_dtoa_r+0xb3a>
 800f4e4:	9b01      	ldr	r3, [sp, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	bfc8      	it	gt
 800f4ea:	461d      	movgt	r5, r3
 800f4ec:	9b00      	ldr	r3, [sp, #0]
 800f4ee:	bfd8      	it	le
 800f4f0:	2501      	movle	r5, #1
 800f4f2:	441d      	add	r5, r3
 800f4f4:	f04f 0800 	mov.w	r8, #0
 800f4f8:	4651      	mov	r1, sl
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 fadf 	bl	800fac0 <__lshift>
 800f502:	4631      	mov	r1, r6
 800f504:	4682      	mov	sl, r0
 800f506:	f000 fb47 	bl	800fb98 <__mcmp>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	dc96      	bgt.n	800f43c <_dtoa_r+0xabc>
 800f50e:	d102      	bne.n	800f516 <_dtoa_r+0xb96>
 800f510:	f019 0f01 	tst.w	r9, #1
 800f514:	d192      	bne.n	800f43c <_dtoa_r+0xabc>
 800f516:	462b      	mov	r3, r5
 800f518:	461d      	mov	r5, r3
 800f51a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f51e:	2a30      	cmp	r2, #48	; 0x30
 800f520:	d0fa      	beq.n	800f518 <_dtoa_r+0xb98>
 800f522:	e6dd      	b.n	800f2e0 <_dtoa_r+0x960>
 800f524:	9a00      	ldr	r2, [sp, #0]
 800f526:	429a      	cmp	r2, r3
 800f528:	d189      	bne.n	800f43e <_dtoa_r+0xabe>
 800f52a:	f10b 0b01 	add.w	fp, fp, #1
 800f52e:	2331      	movs	r3, #49	; 0x31
 800f530:	e796      	b.n	800f460 <_dtoa_r+0xae0>
 800f532:	4b0a      	ldr	r3, [pc, #40]	; (800f55c <_dtoa_r+0xbdc>)
 800f534:	f7ff ba99 	b.w	800ea6a <_dtoa_r+0xea>
 800f538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f47f aa6d 	bne.w	800ea1a <_dtoa_r+0x9a>
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <_dtoa_r+0xbe0>)
 800f542:	f7ff ba92 	b.w	800ea6a <_dtoa_r+0xea>
 800f546:	9b01      	ldr	r3, [sp, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	dcb5      	bgt.n	800f4b8 <_dtoa_r+0xb38>
 800f54c:	9b07      	ldr	r3, [sp, #28]
 800f54e:	2b02      	cmp	r3, #2
 800f550:	f73f aeb1 	bgt.w	800f2b6 <_dtoa_r+0x936>
 800f554:	e7b0      	b.n	800f4b8 <_dtoa_r+0xb38>
 800f556:	bf00      	nop
 800f558:	08012a6b 	.word	0x08012a6b
 800f55c:	08012d50 	.word	0x08012d50
 800f560:	080129ef 	.word	0x080129ef

0800f564 <_free_r>:
 800f564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f566:	2900      	cmp	r1, #0
 800f568:	d044      	beq.n	800f5f4 <_free_r+0x90>
 800f56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f56e:	9001      	str	r0, [sp, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	f1a1 0404 	sub.w	r4, r1, #4
 800f576:	bfb8      	it	lt
 800f578:	18e4      	addlt	r4, r4, r3
 800f57a:	f7fe f8bd 	bl	800d6f8 <__malloc_lock>
 800f57e:	4a1e      	ldr	r2, [pc, #120]	; (800f5f8 <_free_r+0x94>)
 800f580:	9801      	ldr	r0, [sp, #4]
 800f582:	6813      	ldr	r3, [r2, #0]
 800f584:	b933      	cbnz	r3, 800f594 <_free_r+0x30>
 800f586:	6063      	str	r3, [r4, #4]
 800f588:	6014      	str	r4, [r2, #0]
 800f58a:	b003      	add	sp, #12
 800f58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f590:	f7fe b8b8 	b.w	800d704 <__malloc_unlock>
 800f594:	42a3      	cmp	r3, r4
 800f596:	d908      	bls.n	800f5aa <_free_r+0x46>
 800f598:	6825      	ldr	r5, [r4, #0]
 800f59a:	1961      	adds	r1, r4, r5
 800f59c:	428b      	cmp	r3, r1
 800f59e:	bf01      	itttt	eq
 800f5a0:	6819      	ldreq	r1, [r3, #0]
 800f5a2:	685b      	ldreq	r3, [r3, #4]
 800f5a4:	1949      	addeq	r1, r1, r5
 800f5a6:	6021      	streq	r1, [r4, #0]
 800f5a8:	e7ed      	b.n	800f586 <_free_r+0x22>
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	b10b      	cbz	r3, 800f5b4 <_free_r+0x50>
 800f5b0:	42a3      	cmp	r3, r4
 800f5b2:	d9fa      	bls.n	800f5aa <_free_r+0x46>
 800f5b4:	6811      	ldr	r1, [r2, #0]
 800f5b6:	1855      	adds	r5, r2, r1
 800f5b8:	42a5      	cmp	r5, r4
 800f5ba:	d10b      	bne.n	800f5d4 <_free_r+0x70>
 800f5bc:	6824      	ldr	r4, [r4, #0]
 800f5be:	4421      	add	r1, r4
 800f5c0:	1854      	adds	r4, r2, r1
 800f5c2:	42a3      	cmp	r3, r4
 800f5c4:	6011      	str	r1, [r2, #0]
 800f5c6:	d1e0      	bne.n	800f58a <_free_r+0x26>
 800f5c8:	681c      	ldr	r4, [r3, #0]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	6053      	str	r3, [r2, #4]
 800f5ce:	440c      	add	r4, r1
 800f5d0:	6014      	str	r4, [r2, #0]
 800f5d2:	e7da      	b.n	800f58a <_free_r+0x26>
 800f5d4:	d902      	bls.n	800f5dc <_free_r+0x78>
 800f5d6:	230c      	movs	r3, #12
 800f5d8:	6003      	str	r3, [r0, #0]
 800f5da:	e7d6      	b.n	800f58a <_free_r+0x26>
 800f5dc:	6825      	ldr	r5, [r4, #0]
 800f5de:	1961      	adds	r1, r4, r5
 800f5e0:	428b      	cmp	r3, r1
 800f5e2:	bf04      	itt	eq
 800f5e4:	6819      	ldreq	r1, [r3, #0]
 800f5e6:	685b      	ldreq	r3, [r3, #4]
 800f5e8:	6063      	str	r3, [r4, #4]
 800f5ea:	bf04      	itt	eq
 800f5ec:	1949      	addeq	r1, r1, r5
 800f5ee:	6021      	streq	r1, [r4, #0]
 800f5f0:	6054      	str	r4, [r2, #4]
 800f5f2:	e7ca      	b.n	800f58a <_free_r+0x26>
 800f5f4:	b003      	add	sp, #12
 800f5f6:	bd30      	pop	{r4, r5, pc}
 800f5f8:	20006ef0 	.word	0x20006ef0

0800f5fc <malloc>:
 800f5fc:	4b02      	ldr	r3, [pc, #8]	; (800f608 <malloc+0xc>)
 800f5fe:	4601      	mov	r1, r0
 800f600:	6818      	ldr	r0, [r3, #0]
 800f602:	f7fd bff9 	b.w	800d5f8 <_malloc_r>
 800f606:	bf00      	nop
 800f608:	2000006c 	.word	0x2000006c

0800f60c <_Balloc>:
 800f60c:	b570      	push	{r4, r5, r6, lr}
 800f60e:	69c6      	ldr	r6, [r0, #28]
 800f610:	4604      	mov	r4, r0
 800f612:	460d      	mov	r5, r1
 800f614:	b976      	cbnz	r6, 800f634 <_Balloc+0x28>
 800f616:	2010      	movs	r0, #16
 800f618:	f7ff fff0 	bl	800f5fc <malloc>
 800f61c:	4602      	mov	r2, r0
 800f61e:	61e0      	str	r0, [r4, #28]
 800f620:	b920      	cbnz	r0, 800f62c <_Balloc+0x20>
 800f622:	4b18      	ldr	r3, [pc, #96]	; (800f684 <_Balloc+0x78>)
 800f624:	4818      	ldr	r0, [pc, #96]	; (800f688 <_Balloc+0x7c>)
 800f626:	216b      	movs	r1, #107	; 0x6b
 800f628:	f002 f902 	bl	8011830 <__assert_func>
 800f62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f630:	6006      	str	r6, [r0, #0]
 800f632:	60c6      	str	r6, [r0, #12]
 800f634:	69e6      	ldr	r6, [r4, #28]
 800f636:	68f3      	ldr	r3, [r6, #12]
 800f638:	b183      	cbz	r3, 800f65c <_Balloc+0x50>
 800f63a:	69e3      	ldr	r3, [r4, #28]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f642:	b9b8      	cbnz	r0, 800f674 <_Balloc+0x68>
 800f644:	2101      	movs	r1, #1
 800f646:	fa01 f605 	lsl.w	r6, r1, r5
 800f64a:	1d72      	adds	r2, r6, #5
 800f64c:	0092      	lsls	r2, r2, #2
 800f64e:	4620      	mov	r0, r4
 800f650:	f7fd ff9c 	bl	800d58c <_calloc_r>
 800f654:	b160      	cbz	r0, 800f670 <_Balloc+0x64>
 800f656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f65a:	e00e      	b.n	800f67a <_Balloc+0x6e>
 800f65c:	2221      	movs	r2, #33	; 0x21
 800f65e:	2104      	movs	r1, #4
 800f660:	4620      	mov	r0, r4
 800f662:	f7fd ff93 	bl	800d58c <_calloc_r>
 800f666:	69e3      	ldr	r3, [r4, #28]
 800f668:	60f0      	str	r0, [r6, #12]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e4      	bne.n	800f63a <_Balloc+0x2e>
 800f670:	2000      	movs	r0, #0
 800f672:	bd70      	pop	{r4, r5, r6, pc}
 800f674:	6802      	ldr	r2, [r0, #0]
 800f676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f67a:	2300      	movs	r3, #0
 800f67c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f680:	e7f7      	b.n	800f672 <_Balloc+0x66>
 800f682:	bf00      	nop
 800f684:	080129fc 	.word	0x080129fc
 800f688:	08012a7c 	.word	0x08012a7c

0800f68c <_Bfree>:
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	69c6      	ldr	r6, [r0, #28]
 800f690:	4605      	mov	r5, r0
 800f692:	460c      	mov	r4, r1
 800f694:	b976      	cbnz	r6, 800f6b4 <_Bfree+0x28>
 800f696:	2010      	movs	r0, #16
 800f698:	f7ff ffb0 	bl	800f5fc <malloc>
 800f69c:	4602      	mov	r2, r0
 800f69e:	61e8      	str	r0, [r5, #28]
 800f6a0:	b920      	cbnz	r0, 800f6ac <_Bfree+0x20>
 800f6a2:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <_Bfree+0x3c>)
 800f6a4:	4809      	ldr	r0, [pc, #36]	; (800f6cc <_Bfree+0x40>)
 800f6a6:	218f      	movs	r1, #143	; 0x8f
 800f6a8:	f002 f8c2 	bl	8011830 <__assert_func>
 800f6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6b0:	6006      	str	r6, [r0, #0]
 800f6b2:	60c6      	str	r6, [r0, #12]
 800f6b4:	b13c      	cbz	r4, 800f6c6 <_Bfree+0x3a>
 800f6b6:	69eb      	ldr	r3, [r5, #28]
 800f6b8:	6862      	ldr	r2, [r4, #4]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6c0:	6021      	str	r1, [r4, #0]
 800f6c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6c6:	bd70      	pop	{r4, r5, r6, pc}
 800f6c8:	080129fc 	.word	0x080129fc
 800f6cc:	08012a7c 	.word	0x08012a7c

0800f6d0 <__multadd>:
 800f6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d4:	690d      	ldr	r5, [r1, #16]
 800f6d6:	4607      	mov	r7, r0
 800f6d8:	460c      	mov	r4, r1
 800f6da:	461e      	mov	r6, r3
 800f6dc:	f101 0c14 	add.w	ip, r1, #20
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f6e6:	b299      	uxth	r1, r3
 800f6e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f6ec:	0c1e      	lsrs	r6, r3, #16
 800f6ee:	0c0b      	lsrs	r3, r1, #16
 800f6f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f6f4:	b289      	uxth	r1, r1
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6fc:	4285      	cmp	r5, r0
 800f6fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f706:	dcec      	bgt.n	800f6e2 <__multadd+0x12>
 800f708:	b30e      	cbz	r6, 800f74e <__multadd+0x7e>
 800f70a:	68a3      	ldr	r3, [r4, #8]
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dc19      	bgt.n	800f744 <__multadd+0x74>
 800f710:	6861      	ldr	r1, [r4, #4]
 800f712:	4638      	mov	r0, r7
 800f714:	3101      	adds	r1, #1
 800f716:	f7ff ff79 	bl	800f60c <_Balloc>
 800f71a:	4680      	mov	r8, r0
 800f71c:	b928      	cbnz	r0, 800f72a <__multadd+0x5a>
 800f71e:	4602      	mov	r2, r0
 800f720:	4b0c      	ldr	r3, [pc, #48]	; (800f754 <__multadd+0x84>)
 800f722:	480d      	ldr	r0, [pc, #52]	; (800f758 <__multadd+0x88>)
 800f724:	21ba      	movs	r1, #186	; 0xba
 800f726:	f002 f883 	bl	8011830 <__assert_func>
 800f72a:	6922      	ldr	r2, [r4, #16]
 800f72c:	3202      	adds	r2, #2
 800f72e:	f104 010c 	add.w	r1, r4, #12
 800f732:	0092      	lsls	r2, r2, #2
 800f734:	300c      	adds	r0, #12
 800f736:	f7ff f887 	bl	800e848 <memcpy>
 800f73a:	4621      	mov	r1, r4
 800f73c:	4638      	mov	r0, r7
 800f73e:	f7ff ffa5 	bl	800f68c <_Bfree>
 800f742:	4644      	mov	r4, r8
 800f744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f748:	3501      	adds	r5, #1
 800f74a:	615e      	str	r6, [r3, #20]
 800f74c:	6125      	str	r5, [r4, #16]
 800f74e:	4620      	mov	r0, r4
 800f750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f754:	08012a6b 	.word	0x08012a6b
 800f758:	08012a7c 	.word	0x08012a7c

0800f75c <__s2b>:
 800f75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f760:	460c      	mov	r4, r1
 800f762:	4615      	mov	r5, r2
 800f764:	461f      	mov	r7, r3
 800f766:	2209      	movs	r2, #9
 800f768:	3308      	adds	r3, #8
 800f76a:	4606      	mov	r6, r0
 800f76c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f770:	2100      	movs	r1, #0
 800f772:	2201      	movs	r2, #1
 800f774:	429a      	cmp	r2, r3
 800f776:	db09      	blt.n	800f78c <__s2b+0x30>
 800f778:	4630      	mov	r0, r6
 800f77a:	f7ff ff47 	bl	800f60c <_Balloc>
 800f77e:	b940      	cbnz	r0, 800f792 <__s2b+0x36>
 800f780:	4602      	mov	r2, r0
 800f782:	4b19      	ldr	r3, [pc, #100]	; (800f7e8 <__s2b+0x8c>)
 800f784:	4819      	ldr	r0, [pc, #100]	; (800f7ec <__s2b+0x90>)
 800f786:	21d3      	movs	r1, #211	; 0xd3
 800f788:	f002 f852 	bl	8011830 <__assert_func>
 800f78c:	0052      	lsls	r2, r2, #1
 800f78e:	3101      	adds	r1, #1
 800f790:	e7f0      	b.n	800f774 <__s2b+0x18>
 800f792:	9b08      	ldr	r3, [sp, #32]
 800f794:	6143      	str	r3, [r0, #20]
 800f796:	2d09      	cmp	r5, #9
 800f798:	f04f 0301 	mov.w	r3, #1
 800f79c:	6103      	str	r3, [r0, #16]
 800f79e:	dd16      	ble.n	800f7ce <__s2b+0x72>
 800f7a0:	f104 0909 	add.w	r9, r4, #9
 800f7a4:	46c8      	mov	r8, r9
 800f7a6:	442c      	add	r4, r5
 800f7a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f7ac:	4601      	mov	r1, r0
 800f7ae:	3b30      	subs	r3, #48	; 0x30
 800f7b0:	220a      	movs	r2, #10
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f7ff ff8c 	bl	800f6d0 <__multadd>
 800f7b8:	45a0      	cmp	r8, r4
 800f7ba:	d1f5      	bne.n	800f7a8 <__s2b+0x4c>
 800f7bc:	f1a5 0408 	sub.w	r4, r5, #8
 800f7c0:	444c      	add	r4, r9
 800f7c2:	1b2d      	subs	r5, r5, r4
 800f7c4:	1963      	adds	r3, r4, r5
 800f7c6:	42bb      	cmp	r3, r7
 800f7c8:	db04      	blt.n	800f7d4 <__s2b+0x78>
 800f7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ce:	340a      	adds	r4, #10
 800f7d0:	2509      	movs	r5, #9
 800f7d2:	e7f6      	b.n	800f7c2 <__s2b+0x66>
 800f7d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7d8:	4601      	mov	r1, r0
 800f7da:	3b30      	subs	r3, #48	; 0x30
 800f7dc:	220a      	movs	r2, #10
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f7ff ff76 	bl	800f6d0 <__multadd>
 800f7e4:	e7ee      	b.n	800f7c4 <__s2b+0x68>
 800f7e6:	bf00      	nop
 800f7e8:	08012a6b 	.word	0x08012a6b
 800f7ec:	08012a7c 	.word	0x08012a7c

0800f7f0 <__hi0bits>:
 800f7f0:	0c03      	lsrs	r3, r0, #16
 800f7f2:	041b      	lsls	r3, r3, #16
 800f7f4:	b9d3      	cbnz	r3, 800f82c <__hi0bits+0x3c>
 800f7f6:	0400      	lsls	r0, r0, #16
 800f7f8:	2310      	movs	r3, #16
 800f7fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7fe:	bf04      	itt	eq
 800f800:	0200      	lsleq	r0, r0, #8
 800f802:	3308      	addeq	r3, #8
 800f804:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f808:	bf04      	itt	eq
 800f80a:	0100      	lsleq	r0, r0, #4
 800f80c:	3304      	addeq	r3, #4
 800f80e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f812:	bf04      	itt	eq
 800f814:	0080      	lsleq	r0, r0, #2
 800f816:	3302      	addeq	r3, #2
 800f818:	2800      	cmp	r0, #0
 800f81a:	db05      	blt.n	800f828 <__hi0bits+0x38>
 800f81c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f820:	f103 0301 	add.w	r3, r3, #1
 800f824:	bf08      	it	eq
 800f826:	2320      	moveq	r3, #32
 800f828:	4618      	mov	r0, r3
 800f82a:	4770      	bx	lr
 800f82c:	2300      	movs	r3, #0
 800f82e:	e7e4      	b.n	800f7fa <__hi0bits+0xa>

0800f830 <__lo0bits>:
 800f830:	6803      	ldr	r3, [r0, #0]
 800f832:	f013 0207 	ands.w	r2, r3, #7
 800f836:	d00c      	beq.n	800f852 <__lo0bits+0x22>
 800f838:	07d9      	lsls	r1, r3, #31
 800f83a:	d422      	bmi.n	800f882 <__lo0bits+0x52>
 800f83c:	079a      	lsls	r2, r3, #30
 800f83e:	bf49      	itett	mi
 800f840:	085b      	lsrmi	r3, r3, #1
 800f842:	089b      	lsrpl	r3, r3, #2
 800f844:	6003      	strmi	r3, [r0, #0]
 800f846:	2201      	movmi	r2, #1
 800f848:	bf5c      	itt	pl
 800f84a:	6003      	strpl	r3, [r0, #0]
 800f84c:	2202      	movpl	r2, #2
 800f84e:	4610      	mov	r0, r2
 800f850:	4770      	bx	lr
 800f852:	b299      	uxth	r1, r3
 800f854:	b909      	cbnz	r1, 800f85a <__lo0bits+0x2a>
 800f856:	0c1b      	lsrs	r3, r3, #16
 800f858:	2210      	movs	r2, #16
 800f85a:	b2d9      	uxtb	r1, r3
 800f85c:	b909      	cbnz	r1, 800f862 <__lo0bits+0x32>
 800f85e:	3208      	adds	r2, #8
 800f860:	0a1b      	lsrs	r3, r3, #8
 800f862:	0719      	lsls	r1, r3, #28
 800f864:	bf04      	itt	eq
 800f866:	091b      	lsreq	r3, r3, #4
 800f868:	3204      	addeq	r2, #4
 800f86a:	0799      	lsls	r1, r3, #30
 800f86c:	bf04      	itt	eq
 800f86e:	089b      	lsreq	r3, r3, #2
 800f870:	3202      	addeq	r2, #2
 800f872:	07d9      	lsls	r1, r3, #31
 800f874:	d403      	bmi.n	800f87e <__lo0bits+0x4e>
 800f876:	085b      	lsrs	r3, r3, #1
 800f878:	f102 0201 	add.w	r2, r2, #1
 800f87c:	d003      	beq.n	800f886 <__lo0bits+0x56>
 800f87e:	6003      	str	r3, [r0, #0]
 800f880:	e7e5      	b.n	800f84e <__lo0bits+0x1e>
 800f882:	2200      	movs	r2, #0
 800f884:	e7e3      	b.n	800f84e <__lo0bits+0x1e>
 800f886:	2220      	movs	r2, #32
 800f888:	e7e1      	b.n	800f84e <__lo0bits+0x1e>
	...

0800f88c <__i2b>:
 800f88c:	b510      	push	{r4, lr}
 800f88e:	460c      	mov	r4, r1
 800f890:	2101      	movs	r1, #1
 800f892:	f7ff febb 	bl	800f60c <_Balloc>
 800f896:	4602      	mov	r2, r0
 800f898:	b928      	cbnz	r0, 800f8a6 <__i2b+0x1a>
 800f89a:	4b05      	ldr	r3, [pc, #20]	; (800f8b0 <__i2b+0x24>)
 800f89c:	4805      	ldr	r0, [pc, #20]	; (800f8b4 <__i2b+0x28>)
 800f89e:	f240 1145 	movw	r1, #325	; 0x145
 800f8a2:	f001 ffc5 	bl	8011830 <__assert_func>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	6144      	str	r4, [r0, #20]
 800f8aa:	6103      	str	r3, [r0, #16]
 800f8ac:	bd10      	pop	{r4, pc}
 800f8ae:	bf00      	nop
 800f8b0:	08012a6b 	.word	0x08012a6b
 800f8b4:	08012a7c 	.word	0x08012a7c

0800f8b8 <__multiply>:
 800f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	4691      	mov	r9, r2
 800f8be:	690a      	ldr	r2, [r1, #16]
 800f8c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	bfb8      	it	lt
 800f8c8:	460b      	movlt	r3, r1
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	bfbc      	itt	lt
 800f8ce:	464c      	movlt	r4, r9
 800f8d0:	4699      	movlt	r9, r3
 800f8d2:	6927      	ldr	r7, [r4, #16]
 800f8d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f8d8:	68a3      	ldr	r3, [r4, #8]
 800f8da:	6861      	ldr	r1, [r4, #4]
 800f8dc:	eb07 060a 	add.w	r6, r7, sl
 800f8e0:	42b3      	cmp	r3, r6
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	bfb8      	it	lt
 800f8e6:	3101      	addlt	r1, #1
 800f8e8:	f7ff fe90 	bl	800f60c <_Balloc>
 800f8ec:	b930      	cbnz	r0, 800f8fc <__multiply+0x44>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	4b44      	ldr	r3, [pc, #272]	; (800fa04 <__multiply+0x14c>)
 800f8f2:	4845      	ldr	r0, [pc, #276]	; (800fa08 <__multiply+0x150>)
 800f8f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f8f8:	f001 ff9a 	bl	8011830 <__assert_func>
 800f8fc:	f100 0514 	add.w	r5, r0, #20
 800f900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f904:	462b      	mov	r3, r5
 800f906:	2200      	movs	r2, #0
 800f908:	4543      	cmp	r3, r8
 800f90a:	d321      	bcc.n	800f950 <__multiply+0x98>
 800f90c:	f104 0314 	add.w	r3, r4, #20
 800f910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f914:	f109 0314 	add.w	r3, r9, #20
 800f918:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f91c:	9202      	str	r2, [sp, #8]
 800f91e:	1b3a      	subs	r2, r7, r4
 800f920:	3a15      	subs	r2, #21
 800f922:	f022 0203 	bic.w	r2, r2, #3
 800f926:	3204      	adds	r2, #4
 800f928:	f104 0115 	add.w	r1, r4, #21
 800f92c:	428f      	cmp	r7, r1
 800f92e:	bf38      	it	cc
 800f930:	2204      	movcc	r2, #4
 800f932:	9201      	str	r2, [sp, #4]
 800f934:	9a02      	ldr	r2, [sp, #8]
 800f936:	9303      	str	r3, [sp, #12]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d80c      	bhi.n	800f956 <__multiply+0x9e>
 800f93c:	2e00      	cmp	r6, #0
 800f93e:	dd03      	ble.n	800f948 <__multiply+0x90>
 800f940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f944:	2b00      	cmp	r3, #0
 800f946:	d05b      	beq.n	800fa00 <__multiply+0x148>
 800f948:	6106      	str	r6, [r0, #16]
 800f94a:	b005      	add	sp, #20
 800f94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f950:	f843 2b04 	str.w	r2, [r3], #4
 800f954:	e7d8      	b.n	800f908 <__multiply+0x50>
 800f956:	f8b3 a000 	ldrh.w	sl, [r3]
 800f95a:	f1ba 0f00 	cmp.w	sl, #0
 800f95e:	d024      	beq.n	800f9aa <__multiply+0xf2>
 800f960:	f104 0e14 	add.w	lr, r4, #20
 800f964:	46a9      	mov	r9, r5
 800f966:	f04f 0c00 	mov.w	ip, #0
 800f96a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f96e:	f8d9 1000 	ldr.w	r1, [r9]
 800f972:	fa1f fb82 	uxth.w	fp, r2
 800f976:	b289      	uxth	r1, r1
 800f978:	fb0a 110b 	mla	r1, sl, fp, r1
 800f97c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f980:	f8d9 2000 	ldr.w	r2, [r9]
 800f984:	4461      	add	r1, ip
 800f986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f98a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f98e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f992:	b289      	uxth	r1, r1
 800f994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f998:	4577      	cmp	r7, lr
 800f99a:	f849 1b04 	str.w	r1, [r9], #4
 800f99e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f9a2:	d8e2      	bhi.n	800f96a <__multiply+0xb2>
 800f9a4:	9a01      	ldr	r2, [sp, #4]
 800f9a6:	f845 c002 	str.w	ip, [r5, r2]
 800f9aa:	9a03      	ldr	r2, [sp, #12]
 800f9ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f9b0:	3304      	adds	r3, #4
 800f9b2:	f1b9 0f00 	cmp.w	r9, #0
 800f9b6:	d021      	beq.n	800f9fc <__multiply+0x144>
 800f9b8:	6829      	ldr	r1, [r5, #0]
 800f9ba:	f104 0c14 	add.w	ip, r4, #20
 800f9be:	46ae      	mov	lr, r5
 800f9c0:	f04f 0a00 	mov.w	sl, #0
 800f9c4:	f8bc b000 	ldrh.w	fp, [ip]
 800f9c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f9cc:	fb09 220b 	mla	r2, r9, fp, r2
 800f9d0:	4452      	add	r2, sl
 800f9d2:	b289      	uxth	r1, r1
 800f9d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f9d8:	f84e 1b04 	str.w	r1, [lr], #4
 800f9dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f9e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9e4:	f8be 1000 	ldrh.w	r1, [lr]
 800f9e8:	fb09 110a 	mla	r1, r9, sl, r1
 800f9ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f9f0:	4567      	cmp	r7, ip
 800f9f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9f6:	d8e5      	bhi.n	800f9c4 <__multiply+0x10c>
 800f9f8:	9a01      	ldr	r2, [sp, #4]
 800f9fa:	50a9      	str	r1, [r5, r2]
 800f9fc:	3504      	adds	r5, #4
 800f9fe:	e799      	b.n	800f934 <__multiply+0x7c>
 800fa00:	3e01      	subs	r6, #1
 800fa02:	e79b      	b.n	800f93c <__multiply+0x84>
 800fa04:	08012a6b 	.word	0x08012a6b
 800fa08:	08012a7c 	.word	0x08012a7c

0800fa0c <__pow5mult>:
 800fa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa10:	4615      	mov	r5, r2
 800fa12:	f012 0203 	ands.w	r2, r2, #3
 800fa16:	4606      	mov	r6, r0
 800fa18:	460f      	mov	r7, r1
 800fa1a:	d007      	beq.n	800fa2c <__pow5mult+0x20>
 800fa1c:	4c25      	ldr	r4, [pc, #148]	; (800fab4 <__pow5mult+0xa8>)
 800fa1e:	3a01      	subs	r2, #1
 800fa20:	2300      	movs	r3, #0
 800fa22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa26:	f7ff fe53 	bl	800f6d0 <__multadd>
 800fa2a:	4607      	mov	r7, r0
 800fa2c:	10ad      	asrs	r5, r5, #2
 800fa2e:	d03d      	beq.n	800faac <__pow5mult+0xa0>
 800fa30:	69f4      	ldr	r4, [r6, #28]
 800fa32:	b97c      	cbnz	r4, 800fa54 <__pow5mult+0x48>
 800fa34:	2010      	movs	r0, #16
 800fa36:	f7ff fde1 	bl	800f5fc <malloc>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	61f0      	str	r0, [r6, #28]
 800fa3e:	b928      	cbnz	r0, 800fa4c <__pow5mult+0x40>
 800fa40:	4b1d      	ldr	r3, [pc, #116]	; (800fab8 <__pow5mult+0xac>)
 800fa42:	481e      	ldr	r0, [pc, #120]	; (800fabc <__pow5mult+0xb0>)
 800fa44:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fa48:	f001 fef2 	bl	8011830 <__assert_func>
 800fa4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa50:	6004      	str	r4, [r0, #0]
 800fa52:	60c4      	str	r4, [r0, #12]
 800fa54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fa58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa5c:	b94c      	cbnz	r4, 800fa72 <__pow5mult+0x66>
 800fa5e:	f240 2171 	movw	r1, #625	; 0x271
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7ff ff12 	bl	800f88c <__i2b>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa6e:	4604      	mov	r4, r0
 800fa70:	6003      	str	r3, [r0, #0]
 800fa72:	f04f 0900 	mov.w	r9, #0
 800fa76:	07eb      	lsls	r3, r5, #31
 800fa78:	d50a      	bpl.n	800fa90 <__pow5mult+0x84>
 800fa7a:	4639      	mov	r1, r7
 800fa7c:	4622      	mov	r2, r4
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f7ff ff1a 	bl	800f8b8 <__multiply>
 800fa84:	4639      	mov	r1, r7
 800fa86:	4680      	mov	r8, r0
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7ff fdff 	bl	800f68c <_Bfree>
 800fa8e:	4647      	mov	r7, r8
 800fa90:	106d      	asrs	r5, r5, #1
 800fa92:	d00b      	beq.n	800faac <__pow5mult+0xa0>
 800fa94:	6820      	ldr	r0, [r4, #0]
 800fa96:	b938      	cbnz	r0, 800faa8 <__pow5mult+0x9c>
 800fa98:	4622      	mov	r2, r4
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f7ff ff0b 	bl	800f8b8 <__multiply>
 800faa2:	6020      	str	r0, [r4, #0]
 800faa4:	f8c0 9000 	str.w	r9, [r0]
 800faa8:	4604      	mov	r4, r0
 800faaa:	e7e4      	b.n	800fa76 <__pow5mult+0x6a>
 800faac:	4638      	mov	r0, r7
 800faae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab2:	bf00      	nop
 800fab4:	08012bc8 	.word	0x08012bc8
 800fab8:	080129fc 	.word	0x080129fc
 800fabc:	08012a7c 	.word	0x08012a7c

0800fac0 <__lshift>:
 800fac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac4:	460c      	mov	r4, r1
 800fac6:	6849      	ldr	r1, [r1, #4]
 800fac8:	6923      	ldr	r3, [r4, #16]
 800faca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	4607      	mov	r7, r0
 800fad2:	4691      	mov	r9, r2
 800fad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fad8:	f108 0601 	add.w	r6, r8, #1
 800fadc:	42b3      	cmp	r3, r6
 800fade:	db0b      	blt.n	800faf8 <__lshift+0x38>
 800fae0:	4638      	mov	r0, r7
 800fae2:	f7ff fd93 	bl	800f60c <_Balloc>
 800fae6:	4605      	mov	r5, r0
 800fae8:	b948      	cbnz	r0, 800fafe <__lshift+0x3e>
 800faea:	4602      	mov	r2, r0
 800faec:	4b28      	ldr	r3, [pc, #160]	; (800fb90 <__lshift+0xd0>)
 800faee:	4829      	ldr	r0, [pc, #164]	; (800fb94 <__lshift+0xd4>)
 800faf0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800faf4:	f001 fe9c 	bl	8011830 <__assert_func>
 800faf8:	3101      	adds	r1, #1
 800fafa:	005b      	lsls	r3, r3, #1
 800fafc:	e7ee      	b.n	800fadc <__lshift+0x1c>
 800fafe:	2300      	movs	r3, #0
 800fb00:	f100 0114 	add.w	r1, r0, #20
 800fb04:	f100 0210 	add.w	r2, r0, #16
 800fb08:	4618      	mov	r0, r3
 800fb0a:	4553      	cmp	r3, sl
 800fb0c:	db33      	blt.n	800fb76 <__lshift+0xb6>
 800fb0e:	6920      	ldr	r0, [r4, #16]
 800fb10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb14:	f104 0314 	add.w	r3, r4, #20
 800fb18:	f019 091f 	ands.w	r9, r9, #31
 800fb1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb24:	d02b      	beq.n	800fb7e <__lshift+0xbe>
 800fb26:	f1c9 0e20 	rsb	lr, r9, #32
 800fb2a:	468a      	mov	sl, r1
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	6818      	ldr	r0, [r3, #0]
 800fb30:	fa00 f009 	lsl.w	r0, r0, r9
 800fb34:	4310      	orrs	r0, r2
 800fb36:	f84a 0b04 	str.w	r0, [sl], #4
 800fb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb3e:	459c      	cmp	ip, r3
 800fb40:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb44:	d8f3      	bhi.n	800fb2e <__lshift+0x6e>
 800fb46:	ebac 0304 	sub.w	r3, ip, r4
 800fb4a:	3b15      	subs	r3, #21
 800fb4c:	f023 0303 	bic.w	r3, r3, #3
 800fb50:	3304      	adds	r3, #4
 800fb52:	f104 0015 	add.w	r0, r4, #21
 800fb56:	4584      	cmp	ip, r0
 800fb58:	bf38      	it	cc
 800fb5a:	2304      	movcc	r3, #4
 800fb5c:	50ca      	str	r2, [r1, r3]
 800fb5e:	b10a      	cbz	r2, 800fb64 <__lshift+0xa4>
 800fb60:	f108 0602 	add.w	r6, r8, #2
 800fb64:	3e01      	subs	r6, #1
 800fb66:	4638      	mov	r0, r7
 800fb68:	612e      	str	r6, [r5, #16]
 800fb6a:	4621      	mov	r1, r4
 800fb6c:	f7ff fd8e 	bl	800f68c <_Bfree>
 800fb70:	4628      	mov	r0, r5
 800fb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb76:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	e7c5      	b.n	800fb0a <__lshift+0x4a>
 800fb7e:	3904      	subs	r1, #4
 800fb80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb84:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb88:	459c      	cmp	ip, r3
 800fb8a:	d8f9      	bhi.n	800fb80 <__lshift+0xc0>
 800fb8c:	e7ea      	b.n	800fb64 <__lshift+0xa4>
 800fb8e:	bf00      	nop
 800fb90:	08012a6b 	.word	0x08012a6b
 800fb94:	08012a7c 	.word	0x08012a7c

0800fb98 <__mcmp>:
 800fb98:	b530      	push	{r4, r5, lr}
 800fb9a:	6902      	ldr	r2, [r0, #16]
 800fb9c:	690c      	ldr	r4, [r1, #16]
 800fb9e:	1b12      	subs	r2, r2, r4
 800fba0:	d10e      	bne.n	800fbc0 <__mcmp+0x28>
 800fba2:	f100 0314 	add.w	r3, r0, #20
 800fba6:	3114      	adds	r1, #20
 800fba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fbac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fbb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fbb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fbb8:	42a5      	cmp	r5, r4
 800fbba:	d003      	beq.n	800fbc4 <__mcmp+0x2c>
 800fbbc:	d305      	bcc.n	800fbca <__mcmp+0x32>
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	bd30      	pop	{r4, r5, pc}
 800fbc4:	4283      	cmp	r3, r0
 800fbc6:	d3f3      	bcc.n	800fbb0 <__mcmp+0x18>
 800fbc8:	e7fa      	b.n	800fbc0 <__mcmp+0x28>
 800fbca:	f04f 32ff 	mov.w	r2, #4294967295
 800fbce:	e7f7      	b.n	800fbc0 <__mcmp+0x28>

0800fbd0 <__mdiff>:
 800fbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	4606      	mov	r6, r0
 800fbd8:	4611      	mov	r1, r2
 800fbda:	4620      	mov	r0, r4
 800fbdc:	4690      	mov	r8, r2
 800fbde:	f7ff ffdb 	bl	800fb98 <__mcmp>
 800fbe2:	1e05      	subs	r5, r0, #0
 800fbe4:	d110      	bne.n	800fc08 <__mdiff+0x38>
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	4630      	mov	r0, r6
 800fbea:	f7ff fd0f 	bl	800f60c <_Balloc>
 800fbee:	b930      	cbnz	r0, 800fbfe <__mdiff+0x2e>
 800fbf0:	4b3a      	ldr	r3, [pc, #232]	; (800fcdc <__mdiff+0x10c>)
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	f240 2137 	movw	r1, #567	; 0x237
 800fbf8:	4839      	ldr	r0, [pc, #228]	; (800fce0 <__mdiff+0x110>)
 800fbfa:	f001 fe19 	bl	8011830 <__assert_func>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc08:	bfa4      	itt	ge
 800fc0a:	4643      	movge	r3, r8
 800fc0c:	46a0      	movge	r8, r4
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fc14:	bfa6      	itte	ge
 800fc16:	461c      	movge	r4, r3
 800fc18:	2500      	movge	r5, #0
 800fc1a:	2501      	movlt	r5, #1
 800fc1c:	f7ff fcf6 	bl	800f60c <_Balloc>
 800fc20:	b920      	cbnz	r0, 800fc2c <__mdiff+0x5c>
 800fc22:	4b2e      	ldr	r3, [pc, #184]	; (800fcdc <__mdiff+0x10c>)
 800fc24:	4602      	mov	r2, r0
 800fc26:	f240 2145 	movw	r1, #581	; 0x245
 800fc2a:	e7e5      	b.n	800fbf8 <__mdiff+0x28>
 800fc2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc30:	6926      	ldr	r6, [r4, #16]
 800fc32:	60c5      	str	r5, [r0, #12]
 800fc34:	f104 0914 	add.w	r9, r4, #20
 800fc38:	f108 0514 	add.w	r5, r8, #20
 800fc3c:	f100 0e14 	add.w	lr, r0, #20
 800fc40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fc44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fc48:	f108 0210 	add.w	r2, r8, #16
 800fc4c:	46f2      	mov	sl, lr
 800fc4e:	2100      	movs	r1, #0
 800fc50:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc58:	fa11 f88b 	uxtah	r8, r1, fp
 800fc5c:	b299      	uxth	r1, r3
 800fc5e:	0c1b      	lsrs	r3, r3, #16
 800fc60:	eba8 0801 	sub.w	r8, r8, r1
 800fc64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc6c:	fa1f f888 	uxth.w	r8, r8
 800fc70:	1419      	asrs	r1, r3, #16
 800fc72:	454e      	cmp	r6, r9
 800fc74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc78:	f84a 3b04 	str.w	r3, [sl], #4
 800fc7c:	d8e8      	bhi.n	800fc50 <__mdiff+0x80>
 800fc7e:	1b33      	subs	r3, r6, r4
 800fc80:	3b15      	subs	r3, #21
 800fc82:	f023 0303 	bic.w	r3, r3, #3
 800fc86:	3304      	adds	r3, #4
 800fc88:	3415      	adds	r4, #21
 800fc8a:	42a6      	cmp	r6, r4
 800fc8c:	bf38      	it	cc
 800fc8e:	2304      	movcc	r3, #4
 800fc90:	441d      	add	r5, r3
 800fc92:	4473      	add	r3, lr
 800fc94:	469e      	mov	lr, r3
 800fc96:	462e      	mov	r6, r5
 800fc98:	4566      	cmp	r6, ip
 800fc9a:	d30e      	bcc.n	800fcba <__mdiff+0xea>
 800fc9c:	f10c 0203 	add.w	r2, ip, #3
 800fca0:	1b52      	subs	r2, r2, r5
 800fca2:	f022 0203 	bic.w	r2, r2, #3
 800fca6:	3d03      	subs	r5, #3
 800fca8:	45ac      	cmp	ip, r5
 800fcaa:	bf38      	it	cc
 800fcac:	2200      	movcc	r2, #0
 800fcae:	4413      	add	r3, r2
 800fcb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fcb4:	b17a      	cbz	r2, 800fcd6 <__mdiff+0x106>
 800fcb6:	6107      	str	r7, [r0, #16]
 800fcb8:	e7a4      	b.n	800fc04 <__mdiff+0x34>
 800fcba:	f856 8b04 	ldr.w	r8, [r6], #4
 800fcbe:	fa11 f288 	uxtah	r2, r1, r8
 800fcc2:	1414      	asrs	r4, r2, #16
 800fcc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fcc8:	b292      	uxth	r2, r2
 800fcca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fcce:	f84e 2b04 	str.w	r2, [lr], #4
 800fcd2:	1421      	asrs	r1, r4, #16
 800fcd4:	e7e0      	b.n	800fc98 <__mdiff+0xc8>
 800fcd6:	3f01      	subs	r7, #1
 800fcd8:	e7ea      	b.n	800fcb0 <__mdiff+0xe0>
 800fcda:	bf00      	nop
 800fcdc:	08012a6b 	.word	0x08012a6b
 800fce0:	08012a7c 	.word	0x08012a7c

0800fce4 <__ulp>:
 800fce4:	b082      	sub	sp, #8
 800fce6:	ed8d 0b00 	vstr	d0, [sp]
 800fcea:	9a01      	ldr	r2, [sp, #4]
 800fcec:	4b0f      	ldr	r3, [pc, #60]	; (800fd2c <__ulp+0x48>)
 800fcee:	4013      	ands	r3, r2
 800fcf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	dc08      	bgt.n	800fd0a <__ulp+0x26>
 800fcf8:	425b      	negs	r3, r3
 800fcfa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fcfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd02:	da04      	bge.n	800fd0e <__ulp+0x2a>
 800fd04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd08:	4113      	asrs	r3, r2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	e008      	b.n	800fd20 <__ulp+0x3c>
 800fd0e:	f1a2 0314 	sub.w	r3, r2, #20
 800fd12:	2b1e      	cmp	r3, #30
 800fd14:	bfda      	itte	le
 800fd16:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fd1a:	40da      	lsrle	r2, r3
 800fd1c:	2201      	movgt	r2, #1
 800fd1e:	2300      	movs	r3, #0
 800fd20:	4619      	mov	r1, r3
 800fd22:	4610      	mov	r0, r2
 800fd24:	ec41 0b10 	vmov	d0, r0, r1
 800fd28:	b002      	add	sp, #8
 800fd2a:	4770      	bx	lr
 800fd2c:	7ff00000 	.word	0x7ff00000

0800fd30 <__b2d>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	6906      	ldr	r6, [r0, #16]
 800fd36:	f100 0814 	add.w	r8, r0, #20
 800fd3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fd3e:	1f37      	subs	r7, r6, #4
 800fd40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fd44:	4610      	mov	r0, r2
 800fd46:	f7ff fd53 	bl	800f7f0 <__hi0bits>
 800fd4a:	f1c0 0320 	rsb	r3, r0, #32
 800fd4e:	280a      	cmp	r0, #10
 800fd50:	600b      	str	r3, [r1, #0]
 800fd52:	491b      	ldr	r1, [pc, #108]	; (800fdc0 <__b2d+0x90>)
 800fd54:	dc15      	bgt.n	800fd82 <__b2d+0x52>
 800fd56:	f1c0 0c0b 	rsb	ip, r0, #11
 800fd5a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fd5e:	45b8      	cmp	r8, r7
 800fd60:	ea43 0501 	orr.w	r5, r3, r1
 800fd64:	bf34      	ite	cc
 800fd66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fd6a:	2300      	movcs	r3, #0
 800fd6c:	3015      	adds	r0, #21
 800fd6e:	fa02 f000 	lsl.w	r0, r2, r0
 800fd72:	fa23 f30c 	lsr.w	r3, r3, ip
 800fd76:	4303      	orrs	r3, r0
 800fd78:	461c      	mov	r4, r3
 800fd7a:	ec45 4b10 	vmov	d0, r4, r5
 800fd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd82:	45b8      	cmp	r8, r7
 800fd84:	bf3a      	itte	cc
 800fd86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fd8a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fd8e:	2300      	movcs	r3, #0
 800fd90:	380b      	subs	r0, #11
 800fd92:	d012      	beq.n	800fdba <__b2d+0x8a>
 800fd94:	f1c0 0120 	rsb	r1, r0, #32
 800fd98:	fa23 f401 	lsr.w	r4, r3, r1
 800fd9c:	4082      	lsls	r2, r0
 800fd9e:	4322      	orrs	r2, r4
 800fda0:	4547      	cmp	r7, r8
 800fda2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fda6:	bf8c      	ite	hi
 800fda8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fdac:	2200      	movls	r2, #0
 800fdae:	4083      	lsls	r3, r0
 800fdb0:	40ca      	lsrs	r2, r1
 800fdb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	e7de      	b.n	800fd78 <__b2d+0x48>
 800fdba:	ea42 0501 	orr.w	r5, r2, r1
 800fdbe:	e7db      	b.n	800fd78 <__b2d+0x48>
 800fdc0:	3ff00000 	.word	0x3ff00000

0800fdc4 <__d2b>:
 800fdc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdc8:	460f      	mov	r7, r1
 800fdca:	2101      	movs	r1, #1
 800fdcc:	ec59 8b10 	vmov	r8, r9, d0
 800fdd0:	4616      	mov	r6, r2
 800fdd2:	f7ff fc1b 	bl	800f60c <_Balloc>
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	b930      	cbnz	r0, 800fde8 <__d2b+0x24>
 800fdda:	4602      	mov	r2, r0
 800fddc:	4b24      	ldr	r3, [pc, #144]	; (800fe70 <__d2b+0xac>)
 800fdde:	4825      	ldr	r0, [pc, #148]	; (800fe74 <__d2b+0xb0>)
 800fde0:	f240 310f 	movw	r1, #783	; 0x30f
 800fde4:	f001 fd24 	bl	8011830 <__assert_func>
 800fde8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fdec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdf0:	bb2d      	cbnz	r5, 800fe3e <__d2b+0x7a>
 800fdf2:	9301      	str	r3, [sp, #4]
 800fdf4:	f1b8 0300 	subs.w	r3, r8, #0
 800fdf8:	d026      	beq.n	800fe48 <__d2b+0x84>
 800fdfa:	4668      	mov	r0, sp
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	f7ff fd17 	bl	800f830 <__lo0bits>
 800fe02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe06:	b1e8      	cbz	r0, 800fe44 <__d2b+0x80>
 800fe08:	f1c0 0320 	rsb	r3, r0, #32
 800fe0c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe10:	430b      	orrs	r3, r1
 800fe12:	40c2      	lsrs	r2, r0
 800fe14:	6163      	str	r3, [r4, #20]
 800fe16:	9201      	str	r2, [sp, #4]
 800fe18:	9b01      	ldr	r3, [sp, #4]
 800fe1a:	61a3      	str	r3, [r4, #24]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	bf14      	ite	ne
 800fe20:	2202      	movne	r2, #2
 800fe22:	2201      	moveq	r2, #1
 800fe24:	6122      	str	r2, [r4, #16]
 800fe26:	b1bd      	cbz	r5, 800fe58 <__d2b+0x94>
 800fe28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe2c:	4405      	add	r5, r0
 800fe2e:	603d      	str	r5, [r7, #0]
 800fe30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe34:	6030      	str	r0, [r6, #0]
 800fe36:	4620      	mov	r0, r4
 800fe38:	b003      	add	sp, #12
 800fe3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe42:	e7d6      	b.n	800fdf2 <__d2b+0x2e>
 800fe44:	6161      	str	r1, [r4, #20]
 800fe46:	e7e7      	b.n	800fe18 <__d2b+0x54>
 800fe48:	a801      	add	r0, sp, #4
 800fe4a:	f7ff fcf1 	bl	800f830 <__lo0bits>
 800fe4e:	9b01      	ldr	r3, [sp, #4]
 800fe50:	6163      	str	r3, [r4, #20]
 800fe52:	3020      	adds	r0, #32
 800fe54:	2201      	movs	r2, #1
 800fe56:	e7e5      	b.n	800fe24 <__d2b+0x60>
 800fe58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe60:	6038      	str	r0, [r7, #0]
 800fe62:	6918      	ldr	r0, [r3, #16]
 800fe64:	f7ff fcc4 	bl	800f7f0 <__hi0bits>
 800fe68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe6c:	e7e2      	b.n	800fe34 <__d2b+0x70>
 800fe6e:	bf00      	nop
 800fe70:	08012a6b 	.word	0x08012a6b
 800fe74:	08012a7c 	.word	0x08012a7c

0800fe78 <__ratio>:
 800fe78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7c:	4688      	mov	r8, r1
 800fe7e:	4669      	mov	r1, sp
 800fe80:	4681      	mov	r9, r0
 800fe82:	f7ff ff55 	bl	800fd30 <__b2d>
 800fe86:	a901      	add	r1, sp, #4
 800fe88:	4640      	mov	r0, r8
 800fe8a:	ec55 4b10 	vmov	r4, r5, d0
 800fe8e:	f7ff ff4f 	bl	800fd30 <__b2d>
 800fe92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe9a:	eba3 0c02 	sub.w	ip, r3, r2
 800fe9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fea2:	1a9b      	subs	r3, r3, r2
 800fea4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fea8:	ec51 0b10 	vmov	r0, r1, d0
 800feac:	2b00      	cmp	r3, #0
 800feae:	bfd6      	itet	le
 800feb0:	460a      	movle	r2, r1
 800feb2:	462a      	movgt	r2, r5
 800feb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800feb8:	468b      	mov	fp, r1
 800feba:	462f      	mov	r7, r5
 800febc:	bfd4      	ite	le
 800febe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fec2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fec6:	4620      	mov	r0, r4
 800fec8:	ee10 2a10 	vmov	r2, s0
 800fecc:	465b      	mov	r3, fp
 800fece:	4639      	mov	r1, r7
 800fed0:	f7f0 fcdc 	bl	800088c <__aeabi_ddiv>
 800fed4:	ec41 0b10 	vmov	d0, r0, r1
 800fed8:	b003      	add	sp, #12
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fede <__copybits>:
 800fede:	3901      	subs	r1, #1
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	1149      	asrs	r1, r1, #5
 800fee4:	6914      	ldr	r4, [r2, #16]
 800fee6:	3101      	adds	r1, #1
 800fee8:	f102 0314 	add.w	r3, r2, #20
 800feec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fef0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fef4:	1f05      	subs	r5, r0, #4
 800fef6:	42a3      	cmp	r3, r4
 800fef8:	d30c      	bcc.n	800ff14 <__copybits+0x36>
 800fefa:	1aa3      	subs	r3, r4, r2
 800fefc:	3b11      	subs	r3, #17
 800fefe:	f023 0303 	bic.w	r3, r3, #3
 800ff02:	3211      	adds	r2, #17
 800ff04:	42a2      	cmp	r2, r4
 800ff06:	bf88      	it	hi
 800ff08:	2300      	movhi	r3, #0
 800ff0a:	4418      	add	r0, r3
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	4288      	cmp	r0, r1
 800ff10:	d305      	bcc.n	800ff1e <__copybits+0x40>
 800ff12:	bd70      	pop	{r4, r5, r6, pc}
 800ff14:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff18:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff1c:	e7eb      	b.n	800fef6 <__copybits+0x18>
 800ff1e:	f840 3b04 	str.w	r3, [r0], #4
 800ff22:	e7f4      	b.n	800ff0e <__copybits+0x30>

0800ff24 <__any_on>:
 800ff24:	f100 0214 	add.w	r2, r0, #20
 800ff28:	6900      	ldr	r0, [r0, #16]
 800ff2a:	114b      	asrs	r3, r1, #5
 800ff2c:	4298      	cmp	r0, r3
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	db11      	blt.n	800ff56 <__any_on+0x32>
 800ff32:	dd0a      	ble.n	800ff4a <__any_on+0x26>
 800ff34:	f011 011f 	ands.w	r1, r1, #31
 800ff38:	d007      	beq.n	800ff4a <__any_on+0x26>
 800ff3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff3e:	fa24 f001 	lsr.w	r0, r4, r1
 800ff42:	fa00 f101 	lsl.w	r1, r0, r1
 800ff46:	428c      	cmp	r4, r1
 800ff48:	d10b      	bne.n	800ff62 <__any_on+0x3e>
 800ff4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d803      	bhi.n	800ff5a <__any_on+0x36>
 800ff52:	2000      	movs	r0, #0
 800ff54:	bd10      	pop	{r4, pc}
 800ff56:	4603      	mov	r3, r0
 800ff58:	e7f7      	b.n	800ff4a <__any_on+0x26>
 800ff5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	d0f5      	beq.n	800ff4e <__any_on+0x2a>
 800ff62:	2001      	movs	r0, #1
 800ff64:	e7f6      	b.n	800ff54 <__any_on+0x30>

0800ff66 <sulp>:
 800ff66:	b570      	push	{r4, r5, r6, lr}
 800ff68:	4604      	mov	r4, r0
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	ec45 4b10 	vmov	d0, r4, r5
 800ff70:	4616      	mov	r6, r2
 800ff72:	f7ff feb7 	bl	800fce4 <__ulp>
 800ff76:	ec51 0b10 	vmov	r0, r1, d0
 800ff7a:	b17e      	cbz	r6, 800ff9c <sulp+0x36>
 800ff7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ff80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	dd09      	ble.n	800ff9c <sulp+0x36>
 800ff88:	051b      	lsls	r3, r3, #20
 800ff8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ff8e:	2400      	movs	r4, #0
 800ff90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ff94:	4622      	mov	r2, r4
 800ff96:	462b      	mov	r3, r5
 800ff98:	f7f0 fb4e 	bl	8000638 <__aeabi_dmul>
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffa0 <_strtod_l>:
 800ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	ed2d 8b02 	vpush	{d8}
 800ffa8:	b09b      	sub	sp, #108	; 0x6c
 800ffaa:	4604      	mov	r4, r0
 800ffac:	9213      	str	r2, [sp, #76]	; 0x4c
 800ffae:	2200      	movs	r2, #0
 800ffb0:	9216      	str	r2, [sp, #88]	; 0x58
 800ffb2:	460d      	mov	r5, r1
 800ffb4:	f04f 0800 	mov.w	r8, #0
 800ffb8:	f04f 0900 	mov.w	r9, #0
 800ffbc:	460a      	mov	r2, r1
 800ffbe:	9215      	str	r2, [sp, #84]	; 0x54
 800ffc0:	7811      	ldrb	r1, [r2, #0]
 800ffc2:	292b      	cmp	r1, #43	; 0x2b
 800ffc4:	d04c      	beq.n	8010060 <_strtod_l+0xc0>
 800ffc6:	d83a      	bhi.n	801003e <_strtod_l+0x9e>
 800ffc8:	290d      	cmp	r1, #13
 800ffca:	d834      	bhi.n	8010036 <_strtod_l+0x96>
 800ffcc:	2908      	cmp	r1, #8
 800ffce:	d834      	bhi.n	801003a <_strtod_l+0x9a>
 800ffd0:	2900      	cmp	r1, #0
 800ffd2:	d03d      	beq.n	8010050 <_strtod_l+0xb0>
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	920a      	str	r2, [sp, #40]	; 0x28
 800ffd8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ffda:	7832      	ldrb	r2, [r6, #0]
 800ffdc:	2a30      	cmp	r2, #48	; 0x30
 800ffde:	f040 80b4 	bne.w	801014a <_strtod_l+0x1aa>
 800ffe2:	7872      	ldrb	r2, [r6, #1]
 800ffe4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ffe8:	2a58      	cmp	r2, #88	; 0x58
 800ffea:	d170      	bne.n	80100ce <_strtod_l+0x12e>
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	ab16      	add	r3, sp, #88	; 0x58
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	4a8e      	ldr	r2, [pc, #568]	; (8010230 <_strtod_l+0x290>)
 800fff8:	ab17      	add	r3, sp, #92	; 0x5c
 800fffa:	a915      	add	r1, sp, #84	; 0x54
 800fffc:	4620      	mov	r0, r4
 800fffe:	f001 fc9d 	bl	801193c <__gethex>
 8010002:	f010 070f 	ands.w	r7, r0, #15
 8010006:	4605      	mov	r5, r0
 8010008:	d005      	beq.n	8010016 <_strtod_l+0x76>
 801000a:	2f06      	cmp	r7, #6
 801000c:	d12a      	bne.n	8010064 <_strtod_l+0xc4>
 801000e:	3601      	adds	r6, #1
 8010010:	2300      	movs	r3, #0
 8010012:	9615      	str	r6, [sp, #84]	; 0x54
 8010014:	930a      	str	r3, [sp, #40]	; 0x28
 8010016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010018:	2b00      	cmp	r3, #0
 801001a:	f040 857f 	bne.w	8010b1c <_strtod_l+0xb7c>
 801001e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010020:	b1db      	cbz	r3, 801005a <_strtod_l+0xba>
 8010022:	4642      	mov	r2, r8
 8010024:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010028:	ec43 2b10 	vmov	d0, r2, r3
 801002c:	b01b      	add	sp, #108	; 0x6c
 801002e:	ecbd 8b02 	vpop	{d8}
 8010032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010036:	2920      	cmp	r1, #32
 8010038:	d1cc      	bne.n	800ffd4 <_strtod_l+0x34>
 801003a:	3201      	adds	r2, #1
 801003c:	e7bf      	b.n	800ffbe <_strtod_l+0x1e>
 801003e:	292d      	cmp	r1, #45	; 0x2d
 8010040:	d1c8      	bne.n	800ffd4 <_strtod_l+0x34>
 8010042:	2101      	movs	r1, #1
 8010044:	910a      	str	r1, [sp, #40]	; 0x28
 8010046:	1c51      	adds	r1, r2, #1
 8010048:	9115      	str	r1, [sp, #84]	; 0x54
 801004a:	7852      	ldrb	r2, [r2, #1]
 801004c:	2a00      	cmp	r2, #0
 801004e:	d1c3      	bne.n	800ffd8 <_strtod_l+0x38>
 8010050:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010052:	9515      	str	r5, [sp, #84]	; 0x54
 8010054:	2b00      	cmp	r3, #0
 8010056:	f040 855f 	bne.w	8010b18 <_strtod_l+0xb78>
 801005a:	4642      	mov	r2, r8
 801005c:	464b      	mov	r3, r9
 801005e:	e7e3      	b.n	8010028 <_strtod_l+0x88>
 8010060:	2100      	movs	r1, #0
 8010062:	e7ef      	b.n	8010044 <_strtod_l+0xa4>
 8010064:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010066:	b13a      	cbz	r2, 8010078 <_strtod_l+0xd8>
 8010068:	2135      	movs	r1, #53	; 0x35
 801006a:	a818      	add	r0, sp, #96	; 0x60
 801006c:	f7ff ff37 	bl	800fede <__copybits>
 8010070:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010072:	4620      	mov	r0, r4
 8010074:	f7ff fb0a 	bl	800f68c <_Bfree>
 8010078:	3f01      	subs	r7, #1
 801007a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801007c:	2f04      	cmp	r7, #4
 801007e:	d806      	bhi.n	801008e <_strtod_l+0xee>
 8010080:	e8df f007 	tbb	[pc, r7]
 8010084:	201d0314 	.word	0x201d0314
 8010088:	14          	.byte	0x14
 8010089:	00          	.byte	0x00
 801008a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801008e:	05e9      	lsls	r1, r5, #23
 8010090:	bf48      	it	mi
 8010092:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801009a:	0d1b      	lsrs	r3, r3, #20
 801009c:	051b      	lsls	r3, r3, #20
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1b9      	bne.n	8010016 <_strtod_l+0x76>
 80100a2:	f7fe fba5 	bl	800e7f0 <__errno>
 80100a6:	2322      	movs	r3, #34	; 0x22
 80100a8:	6003      	str	r3, [r0, #0]
 80100aa:	e7b4      	b.n	8010016 <_strtod_l+0x76>
 80100ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80100b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80100b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80100b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80100bc:	e7e7      	b.n	801008e <_strtod_l+0xee>
 80100be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010238 <_strtod_l+0x298>
 80100c2:	e7e4      	b.n	801008e <_strtod_l+0xee>
 80100c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80100c8:	f04f 38ff 	mov.w	r8, #4294967295
 80100cc:	e7df      	b.n	801008e <_strtod_l+0xee>
 80100ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100d0:	1c5a      	adds	r2, r3, #1
 80100d2:	9215      	str	r2, [sp, #84]	; 0x54
 80100d4:	785b      	ldrb	r3, [r3, #1]
 80100d6:	2b30      	cmp	r3, #48	; 0x30
 80100d8:	d0f9      	beq.n	80100ce <_strtod_l+0x12e>
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d09b      	beq.n	8010016 <_strtod_l+0x76>
 80100de:	2301      	movs	r3, #1
 80100e0:	f04f 0a00 	mov.w	sl, #0
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80100ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80100ee:	46d3      	mov	fp, sl
 80100f0:	220a      	movs	r2, #10
 80100f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80100f4:	7806      	ldrb	r6, [r0, #0]
 80100f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80100fa:	b2d9      	uxtb	r1, r3
 80100fc:	2909      	cmp	r1, #9
 80100fe:	d926      	bls.n	801014e <_strtod_l+0x1ae>
 8010100:	494c      	ldr	r1, [pc, #304]	; (8010234 <_strtod_l+0x294>)
 8010102:	2201      	movs	r2, #1
 8010104:	f001 fb79 	bl	80117fa <strncmp>
 8010108:	2800      	cmp	r0, #0
 801010a:	d030      	beq.n	801016e <_strtod_l+0x1ce>
 801010c:	2000      	movs	r0, #0
 801010e:	4632      	mov	r2, r6
 8010110:	9005      	str	r0, [sp, #20]
 8010112:	465e      	mov	r6, fp
 8010114:	4603      	mov	r3, r0
 8010116:	2a65      	cmp	r2, #101	; 0x65
 8010118:	d001      	beq.n	801011e <_strtod_l+0x17e>
 801011a:	2a45      	cmp	r2, #69	; 0x45
 801011c:	d113      	bne.n	8010146 <_strtod_l+0x1a6>
 801011e:	b91e      	cbnz	r6, 8010128 <_strtod_l+0x188>
 8010120:	9a04      	ldr	r2, [sp, #16]
 8010122:	4302      	orrs	r2, r0
 8010124:	d094      	beq.n	8010050 <_strtod_l+0xb0>
 8010126:	2600      	movs	r6, #0
 8010128:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801012a:	1c6a      	adds	r2, r5, #1
 801012c:	9215      	str	r2, [sp, #84]	; 0x54
 801012e:	786a      	ldrb	r2, [r5, #1]
 8010130:	2a2b      	cmp	r2, #43	; 0x2b
 8010132:	d074      	beq.n	801021e <_strtod_l+0x27e>
 8010134:	2a2d      	cmp	r2, #45	; 0x2d
 8010136:	d078      	beq.n	801022a <_strtod_l+0x28a>
 8010138:	f04f 0c00 	mov.w	ip, #0
 801013c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010140:	2909      	cmp	r1, #9
 8010142:	d97f      	bls.n	8010244 <_strtod_l+0x2a4>
 8010144:	9515      	str	r5, [sp, #84]	; 0x54
 8010146:	2700      	movs	r7, #0
 8010148:	e09e      	b.n	8010288 <_strtod_l+0x2e8>
 801014a:	2300      	movs	r3, #0
 801014c:	e7c8      	b.n	80100e0 <_strtod_l+0x140>
 801014e:	f1bb 0f08 	cmp.w	fp, #8
 8010152:	bfd8      	it	le
 8010154:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010156:	f100 0001 	add.w	r0, r0, #1
 801015a:	bfda      	itte	le
 801015c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010160:	9309      	strle	r3, [sp, #36]	; 0x24
 8010162:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010166:	f10b 0b01 	add.w	fp, fp, #1
 801016a:	9015      	str	r0, [sp, #84]	; 0x54
 801016c:	e7c1      	b.n	80100f2 <_strtod_l+0x152>
 801016e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010170:	1c5a      	adds	r2, r3, #1
 8010172:	9215      	str	r2, [sp, #84]	; 0x54
 8010174:	785a      	ldrb	r2, [r3, #1]
 8010176:	f1bb 0f00 	cmp.w	fp, #0
 801017a:	d037      	beq.n	80101ec <_strtod_l+0x24c>
 801017c:	9005      	str	r0, [sp, #20]
 801017e:	465e      	mov	r6, fp
 8010180:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010184:	2b09      	cmp	r3, #9
 8010186:	d912      	bls.n	80101ae <_strtod_l+0x20e>
 8010188:	2301      	movs	r3, #1
 801018a:	e7c4      	b.n	8010116 <_strtod_l+0x176>
 801018c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	9215      	str	r2, [sp, #84]	; 0x54
 8010192:	785a      	ldrb	r2, [r3, #1]
 8010194:	3001      	adds	r0, #1
 8010196:	2a30      	cmp	r2, #48	; 0x30
 8010198:	d0f8      	beq.n	801018c <_strtod_l+0x1ec>
 801019a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801019e:	2b08      	cmp	r3, #8
 80101a0:	f200 84c1 	bhi.w	8010b26 <_strtod_l+0xb86>
 80101a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101a6:	9005      	str	r0, [sp, #20]
 80101a8:	2000      	movs	r0, #0
 80101aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80101ac:	4606      	mov	r6, r0
 80101ae:	3a30      	subs	r2, #48	; 0x30
 80101b0:	f100 0301 	add.w	r3, r0, #1
 80101b4:	d014      	beq.n	80101e0 <_strtod_l+0x240>
 80101b6:	9905      	ldr	r1, [sp, #20]
 80101b8:	4419      	add	r1, r3
 80101ba:	9105      	str	r1, [sp, #20]
 80101bc:	4633      	mov	r3, r6
 80101be:	eb00 0c06 	add.w	ip, r0, r6
 80101c2:	210a      	movs	r1, #10
 80101c4:	4563      	cmp	r3, ip
 80101c6:	d113      	bne.n	80101f0 <_strtod_l+0x250>
 80101c8:	1833      	adds	r3, r6, r0
 80101ca:	2b08      	cmp	r3, #8
 80101cc:	f106 0601 	add.w	r6, r6, #1
 80101d0:	4406      	add	r6, r0
 80101d2:	dc1a      	bgt.n	801020a <_strtod_l+0x26a>
 80101d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101d6:	230a      	movs	r3, #10
 80101d8:	fb03 2301 	mla	r3, r3, r1, r2
 80101dc:	9309      	str	r3, [sp, #36]	; 0x24
 80101de:	2300      	movs	r3, #0
 80101e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80101e2:	1c51      	adds	r1, r2, #1
 80101e4:	9115      	str	r1, [sp, #84]	; 0x54
 80101e6:	7852      	ldrb	r2, [r2, #1]
 80101e8:	4618      	mov	r0, r3
 80101ea:	e7c9      	b.n	8010180 <_strtod_l+0x1e0>
 80101ec:	4658      	mov	r0, fp
 80101ee:	e7d2      	b.n	8010196 <_strtod_l+0x1f6>
 80101f0:	2b08      	cmp	r3, #8
 80101f2:	f103 0301 	add.w	r3, r3, #1
 80101f6:	dc03      	bgt.n	8010200 <_strtod_l+0x260>
 80101f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80101fa:	434f      	muls	r7, r1
 80101fc:	9709      	str	r7, [sp, #36]	; 0x24
 80101fe:	e7e1      	b.n	80101c4 <_strtod_l+0x224>
 8010200:	2b10      	cmp	r3, #16
 8010202:	bfd8      	it	le
 8010204:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010208:	e7dc      	b.n	80101c4 <_strtod_l+0x224>
 801020a:	2e10      	cmp	r6, #16
 801020c:	bfdc      	itt	le
 801020e:	230a      	movle	r3, #10
 8010210:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010214:	e7e3      	b.n	80101de <_strtod_l+0x23e>
 8010216:	2300      	movs	r3, #0
 8010218:	9305      	str	r3, [sp, #20]
 801021a:	2301      	movs	r3, #1
 801021c:	e780      	b.n	8010120 <_strtod_l+0x180>
 801021e:	f04f 0c00 	mov.w	ip, #0
 8010222:	1caa      	adds	r2, r5, #2
 8010224:	9215      	str	r2, [sp, #84]	; 0x54
 8010226:	78aa      	ldrb	r2, [r5, #2]
 8010228:	e788      	b.n	801013c <_strtod_l+0x19c>
 801022a:	f04f 0c01 	mov.w	ip, #1
 801022e:	e7f8      	b.n	8010222 <_strtod_l+0x282>
 8010230:	08012bd8 	.word	0x08012bd8
 8010234:	08012bd4 	.word	0x08012bd4
 8010238:	7ff00000 	.word	0x7ff00000
 801023c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801023e:	1c51      	adds	r1, r2, #1
 8010240:	9115      	str	r1, [sp, #84]	; 0x54
 8010242:	7852      	ldrb	r2, [r2, #1]
 8010244:	2a30      	cmp	r2, #48	; 0x30
 8010246:	d0f9      	beq.n	801023c <_strtod_l+0x29c>
 8010248:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801024c:	2908      	cmp	r1, #8
 801024e:	f63f af7a 	bhi.w	8010146 <_strtod_l+0x1a6>
 8010252:	3a30      	subs	r2, #48	; 0x30
 8010254:	9208      	str	r2, [sp, #32]
 8010256:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010258:	920c      	str	r2, [sp, #48]	; 0x30
 801025a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801025c:	1c57      	adds	r7, r2, #1
 801025e:	9715      	str	r7, [sp, #84]	; 0x54
 8010260:	7852      	ldrb	r2, [r2, #1]
 8010262:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010266:	f1be 0f09 	cmp.w	lr, #9
 801026a:	d938      	bls.n	80102de <_strtod_l+0x33e>
 801026c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801026e:	1a7f      	subs	r7, r7, r1
 8010270:	2f08      	cmp	r7, #8
 8010272:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010276:	dc03      	bgt.n	8010280 <_strtod_l+0x2e0>
 8010278:	9908      	ldr	r1, [sp, #32]
 801027a:	428f      	cmp	r7, r1
 801027c:	bfa8      	it	ge
 801027e:	460f      	movge	r7, r1
 8010280:	f1bc 0f00 	cmp.w	ip, #0
 8010284:	d000      	beq.n	8010288 <_strtod_l+0x2e8>
 8010286:	427f      	negs	r7, r7
 8010288:	2e00      	cmp	r6, #0
 801028a:	d14f      	bne.n	801032c <_strtod_l+0x38c>
 801028c:	9904      	ldr	r1, [sp, #16]
 801028e:	4301      	orrs	r1, r0
 8010290:	f47f aec1 	bne.w	8010016 <_strtod_l+0x76>
 8010294:	2b00      	cmp	r3, #0
 8010296:	f47f aedb 	bne.w	8010050 <_strtod_l+0xb0>
 801029a:	2a69      	cmp	r2, #105	; 0x69
 801029c:	d029      	beq.n	80102f2 <_strtod_l+0x352>
 801029e:	dc26      	bgt.n	80102ee <_strtod_l+0x34e>
 80102a0:	2a49      	cmp	r2, #73	; 0x49
 80102a2:	d026      	beq.n	80102f2 <_strtod_l+0x352>
 80102a4:	2a4e      	cmp	r2, #78	; 0x4e
 80102a6:	f47f aed3 	bne.w	8010050 <_strtod_l+0xb0>
 80102aa:	499b      	ldr	r1, [pc, #620]	; (8010518 <_strtod_l+0x578>)
 80102ac:	a815      	add	r0, sp, #84	; 0x54
 80102ae:	f001 fd85 	bl	8011dbc <__match>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	f43f aecc 	beq.w	8010050 <_strtod_l+0xb0>
 80102b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	2b28      	cmp	r3, #40	; 0x28
 80102be:	d12f      	bne.n	8010320 <_strtod_l+0x380>
 80102c0:	4996      	ldr	r1, [pc, #600]	; (801051c <_strtod_l+0x57c>)
 80102c2:	aa18      	add	r2, sp, #96	; 0x60
 80102c4:	a815      	add	r0, sp, #84	; 0x54
 80102c6:	f001 fd8d 	bl	8011de4 <__hexnan>
 80102ca:	2805      	cmp	r0, #5
 80102cc:	d128      	bne.n	8010320 <_strtod_l+0x380>
 80102ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80102d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80102d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80102d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80102dc:	e69b      	b.n	8010016 <_strtod_l+0x76>
 80102de:	9f08      	ldr	r7, [sp, #32]
 80102e0:	210a      	movs	r1, #10
 80102e2:	fb01 2107 	mla	r1, r1, r7, r2
 80102e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80102ea:	9208      	str	r2, [sp, #32]
 80102ec:	e7b5      	b.n	801025a <_strtod_l+0x2ba>
 80102ee:	2a6e      	cmp	r2, #110	; 0x6e
 80102f0:	e7d9      	b.n	80102a6 <_strtod_l+0x306>
 80102f2:	498b      	ldr	r1, [pc, #556]	; (8010520 <_strtod_l+0x580>)
 80102f4:	a815      	add	r0, sp, #84	; 0x54
 80102f6:	f001 fd61 	bl	8011dbc <__match>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	f43f aea8 	beq.w	8010050 <_strtod_l+0xb0>
 8010300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010302:	4988      	ldr	r1, [pc, #544]	; (8010524 <_strtod_l+0x584>)
 8010304:	3b01      	subs	r3, #1
 8010306:	a815      	add	r0, sp, #84	; 0x54
 8010308:	9315      	str	r3, [sp, #84]	; 0x54
 801030a:	f001 fd57 	bl	8011dbc <__match>
 801030e:	b910      	cbnz	r0, 8010316 <_strtod_l+0x376>
 8010310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010312:	3301      	adds	r3, #1
 8010314:	9315      	str	r3, [sp, #84]	; 0x54
 8010316:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010534 <_strtod_l+0x594>
 801031a:	f04f 0800 	mov.w	r8, #0
 801031e:	e67a      	b.n	8010016 <_strtod_l+0x76>
 8010320:	4881      	ldr	r0, [pc, #516]	; (8010528 <_strtod_l+0x588>)
 8010322:	f001 fa7d 	bl	8011820 <nan>
 8010326:	ec59 8b10 	vmov	r8, r9, d0
 801032a:	e674      	b.n	8010016 <_strtod_l+0x76>
 801032c:	9b05      	ldr	r3, [sp, #20]
 801032e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010330:	1afb      	subs	r3, r7, r3
 8010332:	f1bb 0f00 	cmp.w	fp, #0
 8010336:	bf08      	it	eq
 8010338:	46b3      	moveq	fp, r6
 801033a:	2e10      	cmp	r6, #16
 801033c:	9308      	str	r3, [sp, #32]
 801033e:	4635      	mov	r5, r6
 8010340:	bfa8      	it	ge
 8010342:	2510      	movge	r5, #16
 8010344:	f7f0 f8fe 	bl	8000544 <__aeabi_ui2d>
 8010348:	2e09      	cmp	r6, #9
 801034a:	4680      	mov	r8, r0
 801034c:	4689      	mov	r9, r1
 801034e:	dd13      	ble.n	8010378 <_strtod_l+0x3d8>
 8010350:	4b76      	ldr	r3, [pc, #472]	; (801052c <_strtod_l+0x58c>)
 8010352:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010356:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801035a:	f7f0 f96d 	bl	8000638 <__aeabi_dmul>
 801035e:	4680      	mov	r8, r0
 8010360:	4650      	mov	r0, sl
 8010362:	4689      	mov	r9, r1
 8010364:	f7f0 f8ee 	bl	8000544 <__aeabi_ui2d>
 8010368:	4602      	mov	r2, r0
 801036a:	460b      	mov	r3, r1
 801036c:	4640      	mov	r0, r8
 801036e:	4649      	mov	r1, r9
 8010370:	f7ef ffac 	bl	80002cc <__adddf3>
 8010374:	4680      	mov	r8, r0
 8010376:	4689      	mov	r9, r1
 8010378:	2e0f      	cmp	r6, #15
 801037a:	dc38      	bgt.n	80103ee <_strtod_l+0x44e>
 801037c:	9b08      	ldr	r3, [sp, #32]
 801037e:	2b00      	cmp	r3, #0
 8010380:	f43f ae49 	beq.w	8010016 <_strtod_l+0x76>
 8010384:	dd24      	ble.n	80103d0 <_strtod_l+0x430>
 8010386:	2b16      	cmp	r3, #22
 8010388:	dc0b      	bgt.n	80103a2 <_strtod_l+0x402>
 801038a:	4968      	ldr	r1, [pc, #416]	; (801052c <_strtod_l+0x58c>)
 801038c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010394:	4642      	mov	r2, r8
 8010396:	464b      	mov	r3, r9
 8010398:	f7f0 f94e 	bl	8000638 <__aeabi_dmul>
 801039c:	4680      	mov	r8, r0
 801039e:	4689      	mov	r9, r1
 80103a0:	e639      	b.n	8010016 <_strtod_l+0x76>
 80103a2:	9a08      	ldr	r2, [sp, #32]
 80103a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80103a8:	4293      	cmp	r3, r2
 80103aa:	db20      	blt.n	80103ee <_strtod_l+0x44e>
 80103ac:	4c5f      	ldr	r4, [pc, #380]	; (801052c <_strtod_l+0x58c>)
 80103ae:	f1c6 060f 	rsb	r6, r6, #15
 80103b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80103b6:	4642      	mov	r2, r8
 80103b8:	464b      	mov	r3, r9
 80103ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103be:	f7f0 f93b 	bl	8000638 <__aeabi_dmul>
 80103c2:	9b08      	ldr	r3, [sp, #32]
 80103c4:	1b9e      	subs	r6, r3, r6
 80103c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80103ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80103ce:	e7e3      	b.n	8010398 <_strtod_l+0x3f8>
 80103d0:	9b08      	ldr	r3, [sp, #32]
 80103d2:	3316      	adds	r3, #22
 80103d4:	db0b      	blt.n	80103ee <_strtod_l+0x44e>
 80103d6:	9b05      	ldr	r3, [sp, #20]
 80103d8:	1bdf      	subs	r7, r3, r7
 80103da:	4b54      	ldr	r3, [pc, #336]	; (801052c <_strtod_l+0x58c>)
 80103dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80103e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103e4:	4640      	mov	r0, r8
 80103e6:	4649      	mov	r1, r9
 80103e8:	f7f0 fa50 	bl	800088c <__aeabi_ddiv>
 80103ec:	e7d6      	b.n	801039c <_strtod_l+0x3fc>
 80103ee:	9b08      	ldr	r3, [sp, #32]
 80103f0:	1b75      	subs	r5, r6, r5
 80103f2:	441d      	add	r5, r3
 80103f4:	2d00      	cmp	r5, #0
 80103f6:	dd70      	ble.n	80104da <_strtod_l+0x53a>
 80103f8:	f015 030f 	ands.w	r3, r5, #15
 80103fc:	d00a      	beq.n	8010414 <_strtod_l+0x474>
 80103fe:	494b      	ldr	r1, [pc, #300]	; (801052c <_strtod_l+0x58c>)
 8010400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010404:	4642      	mov	r2, r8
 8010406:	464b      	mov	r3, r9
 8010408:	e9d1 0100 	ldrd	r0, r1, [r1]
 801040c:	f7f0 f914 	bl	8000638 <__aeabi_dmul>
 8010410:	4680      	mov	r8, r0
 8010412:	4689      	mov	r9, r1
 8010414:	f035 050f 	bics.w	r5, r5, #15
 8010418:	d04d      	beq.n	80104b6 <_strtod_l+0x516>
 801041a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801041e:	dd22      	ble.n	8010466 <_strtod_l+0x4c6>
 8010420:	2500      	movs	r5, #0
 8010422:	46ab      	mov	fp, r5
 8010424:	9509      	str	r5, [sp, #36]	; 0x24
 8010426:	9505      	str	r5, [sp, #20]
 8010428:	2322      	movs	r3, #34	; 0x22
 801042a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010534 <_strtod_l+0x594>
 801042e:	6023      	str	r3, [r4, #0]
 8010430:	f04f 0800 	mov.w	r8, #0
 8010434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010436:	2b00      	cmp	r3, #0
 8010438:	f43f aded 	beq.w	8010016 <_strtod_l+0x76>
 801043c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801043e:	4620      	mov	r0, r4
 8010440:	f7ff f924 	bl	800f68c <_Bfree>
 8010444:	9905      	ldr	r1, [sp, #20]
 8010446:	4620      	mov	r0, r4
 8010448:	f7ff f920 	bl	800f68c <_Bfree>
 801044c:	4659      	mov	r1, fp
 801044e:	4620      	mov	r0, r4
 8010450:	f7ff f91c 	bl	800f68c <_Bfree>
 8010454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010456:	4620      	mov	r0, r4
 8010458:	f7ff f918 	bl	800f68c <_Bfree>
 801045c:	4629      	mov	r1, r5
 801045e:	4620      	mov	r0, r4
 8010460:	f7ff f914 	bl	800f68c <_Bfree>
 8010464:	e5d7      	b.n	8010016 <_strtod_l+0x76>
 8010466:	4b32      	ldr	r3, [pc, #200]	; (8010530 <_strtod_l+0x590>)
 8010468:	9304      	str	r3, [sp, #16]
 801046a:	2300      	movs	r3, #0
 801046c:	112d      	asrs	r5, r5, #4
 801046e:	4640      	mov	r0, r8
 8010470:	4649      	mov	r1, r9
 8010472:	469a      	mov	sl, r3
 8010474:	2d01      	cmp	r5, #1
 8010476:	dc21      	bgt.n	80104bc <_strtod_l+0x51c>
 8010478:	b10b      	cbz	r3, 801047e <_strtod_l+0x4de>
 801047a:	4680      	mov	r8, r0
 801047c:	4689      	mov	r9, r1
 801047e:	492c      	ldr	r1, [pc, #176]	; (8010530 <_strtod_l+0x590>)
 8010480:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010484:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010488:	4642      	mov	r2, r8
 801048a:	464b      	mov	r3, r9
 801048c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010490:	f7f0 f8d2 	bl	8000638 <__aeabi_dmul>
 8010494:	4b27      	ldr	r3, [pc, #156]	; (8010534 <_strtod_l+0x594>)
 8010496:	460a      	mov	r2, r1
 8010498:	400b      	ands	r3, r1
 801049a:	4927      	ldr	r1, [pc, #156]	; (8010538 <_strtod_l+0x598>)
 801049c:	428b      	cmp	r3, r1
 801049e:	4680      	mov	r8, r0
 80104a0:	d8be      	bhi.n	8010420 <_strtod_l+0x480>
 80104a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80104a6:	428b      	cmp	r3, r1
 80104a8:	bf86      	itte	hi
 80104aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801053c <_strtod_l+0x59c>
 80104ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80104b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80104b6:	2300      	movs	r3, #0
 80104b8:	9304      	str	r3, [sp, #16]
 80104ba:	e07b      	b.n	80105b4 <_strtod_l+0x614>
 80104bc:	07ea      	lsls	r2, r5, #31
 80104be:	d505      	bpl.n	80104cc <_strtod_l+0x52c>
 80104c0:	9b04      	ldr	r3, [sp, #16]
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	f7f0 f8b7 	bl	8000638 <__aeabi_dmul>
 80104ca:	2301      	movs	r3, #1
 80104cc:	9a04      	ldr	r2, [sp, #16]
 80104ce:	3208      	adds	r2, #8
 80104d0:	f10a 0a01 	add.w	sl, sl, #1
 80104d4:	106d      	asrs	r5, r5, #1
 80104d6:	9204      	str	r2, [sp, #16]
 80104d8:	e7cc      	b.n	8010474 <_strtod_l+0x4d4>
 80104da:	d0ec      	beq.n	80104b6 <_strtod_l+0x516>
 80104dc:	426d      	negs	r5, r5
 80104de:	f015 020f 	ands.w	r2, r5, #15
 80104e2:	d00a      	beq.n	80104fa <_strtod_l+0x55a>
 80104e4:	4b11      	ldr	r3, [pc, #68]	; (801052c <_strtod_l+0x58c>)
 80104e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104ea:	4640      	mov	r0, r8
 80104ec:	4649      	mov	r1, r9
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7f0 f9cb 	bl	800088c <__aeabi_ddiv>
 80104f6:	4680      	mov	r8, r0
 80104f8:	4689      	mov	r9, r1
 80104fa:	112d      	asrs	r5, r5, #4
 80104fc:	d0db      	beq.n	80104b6 <_strtod_l+0x516>
 80104fe:	2d1f      	cmp	r5, #31
 8010500:	dd1e      	ble.n	8010540 <_strtod_l+0x5a0>
 8010502:	2500      	movs	r5, #0
 8010504:	46ab      	mov	fp, r5
 8010506:	9509      	str	r5, [sp, #36]	; 0x24
 8010508:	9505      	str	r5, [sp, #20]
 801050a:	2322      	movs	r3, #34	; 0x22
 801050c:	f04f 0800 	mov.w	r8, #0
 8010510:	f04f 0900 	mov.w	r9, #0
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	e78d      	b.n	8010434 <_strtod_l+0x494>
 8010518:	080129c5 	.word	0x080129c5
 801051c:	08012bec 	.word	0x08012bec
 8010520:	080129bd 	.word	0x080129bd
 8010524:	080129f2 	.word	0x080129f2
 8010528:	08012d98 	.word	0x08012d98
 801052c:	08012b00 	.word	0x08012b00
 8010530:	08012ad8 	.word	0x08012ad8
 8010534:	7ff00000 	.word	0x7ff00000
 8010538:	7ca00000 	.word	0x7ca00000
 801053c:	7fefffff 	.word	0x7fefffff
 8010540:	f015 0310 	ands.w	r3, r5, #16
 8010544:	bf18      	it	ne
 8010546:	236a      	movne	r3, #106	; 0x6a
 8010548:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80108ec <_strtod_l+0x94c>
 801054c:	9304      	str	r3, [sp, #16]
 801054e:	4640      	mov	r0, r8
 8010550:	4649      	mov	r1, r9
 8010552:	2300      	movs	r3, #0
 8010554:	07ea      	lsls	r2, r5, #31
 8010556:	d504      	bpl.n	8010562 <_strtod_l+0x5c2>
 8010558:	e9da 2300 	ldrd	r2, r3, [sl]
 801055c:	f7f0 f86c 	bl	8000638 <__aeabi_dmul>
 8010560:	2301      	movs	r3, #1
 8010562:	106d      	asrs	r5, r5, #1
 8010564:	f10a 0a08 	add.w	sl, sl, #8
 8010568:	d1f4      	bne.n	8010554 <_strtod_l+0x5b4>
 801056a:	b10b      	cbz	r3, 8010570 <_strtod_l+0x5d0>
 801056c:	4680      	mov	r8, r0
 801056e:	4689      	mov	r9, r1
 8010570:	9b04      	ldr	r3, [sp, #16]
 8010572:	b1bb      	cbz	r3, 80105a4 <_strtod_l+0x604>
 8010574:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010578:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801057c:	2b00      	cmp	r3, #0
 801057e:	4649      	mov	r1, r9
 8010580:	dd10      	ble.n	80105a4 <_strtod_l+0x604>
 8010582:	2b1f      	cmp	r3, #31
 8010584:	f340 811e 	ble.w	80107c4 <_strtod_l+0x824>
 8010588:	2b34      	cmp	r3, #52	; 0x34
 801058a:	bfde      	ittt	le
 801058c:	f04f 33ff 	movle.w	r3, #4294967295
 8010590:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010594:	4093      	lslle	r3, r2
 8010596:	f04f 0800 	mov.w	r8, #0
 801059a:	bfcc      	ite	gt
 801059c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80105a0:	ea03 0901 	andle.w	r9, r3, r1
 80105a4:	2200      	movs	r2, #0
 80105a6:	2300      	movs	r3, #0
 80105a8:	4640      	mov	r0, r8
 80105aa:	4649      	mov	r1, r9
 80105ac:	f7f0 faac 	bl	8000b08 <__aeabi_dcmpeq>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d1a6      	bne.n	8010502 <_strtod_l+0x562>
 80105b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105ba:	4633      	mov	r3, r6
 80105bc:	465a      	mov	r2, fp
 80105be:	4620      	mov	r0, r4
 80105c0:	f7ff f8cc 	bl	800f75c <__s2b>
 80105c4:	9009      	str	r0, [sp, #36]	; 0x24
 80105c6:	2800      	cmp	r0, #0
 80105c8:	f43f af2a 	beq.w	8010420 <_strtod_l+0x480>
 80105cc:	9a08      	ldr	r2, [sp, #32]
 80105ce:	9b05      	ldr	r3, [sp, #20]
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	eba3 0307 	sub.w	r3, r3, r7
 80105d6:	bfa8      	it	ge
 80105d8:	2300      	movge	r3, #0
 80105da:	930c      	str	r3, [sp, #48]	; 0x30
 80105dc:	2500      	movs	r5, #0
 80105de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80105e2:	9312      	str	r3, [sp, #72]	; 0x48
 80105e4:	46ab      	mov	fp, r5
 80105e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105e8:	4620      	mov	r0, r4
 80105ea:	6859      	ldr	r1, [r3, #4]
 80105ec:	f7ff f80e 	bl	800f60c <_Balloc>
 80105f0:	9005      	str	r0, [sp, #20]
 80105f2:	2800      	cmp	r0, #0
 80105f4:	f43f af18 	beq.w	8010428 <_strtod_l+0x488>
 80105f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105fa:	691a      	ldr	r2, [r3, #16]
 80105fc:	3202      	adds	r2, #2
 80105fe:	f103 010c 	add.w	r1, r3, #12
 8010602:	0092      	lsls	r2, r2, #2
 8010604:	300c      	adds	r0, #12
 8010606:	f7fe f91f 	bl	800e848 <memcpy>
 801060a:	ec49 8b10 	vmov	d0, r8, r9
 801060e:	aa18      	add	r2, sp, #96	; 0x60
 8010610:	a917      	add	r1, sp, #92	; 0x5c
 8010612:	4620      	mov	r0, r4
 8010614:	f7ff fbd6 	bl	800fdc4 <__d2b>
 8010618:	ec49 8b18 	vmov	d8, r8, r9
 801061c:	9016      	str	r0, [sp, #88]	; 0x58
 801061e:	2800      	cmp	r0, #0
 8010620:	f43f af02 	beq.w	8010428 <_strtod_l+0x488>
 8010624:	2101      	movs	r1, #1
 8010626:	4620      	mov	r0, r4
 8010628:	f7ff f930 	bl	800f88c <__i2b>
 801062c:	4683      	mov	fp, r0
 801062e:	2800      	cmp	r0, #0
 8010630:	f43f aefa 	beq.w	8010428 <_strtod_l+0x488>
 8010634:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010636:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010638:	2e00      	cmp	r6, #0
 801063a:	bfab      	itete	ge
 801063c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801063e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010640:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010642:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010646:	bfac      	ite	ge
 8010648:	eb06 0a03 	addge.w	sl, r6, r3
 801064c:	1b9f      	sublt	r7, r3, r6
 801064e:	9b04      	ldr	r3, [sp, #16]
 8010650:	1af6      	subs	r6, r6, r3
 8010652:	4416      	add	r6, r2
 8010654:	4ba0      	ldr	r3, [pc, #640]	; (80108d8 <_strtod_l+0x938>)
 8010656:	3e01      	subs	r6, #1
 8010658:	429e      	cmp	r6, r3
 801065a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801065e:	f280 80c4 	bge.w	80107ea <_strtod_l+0x84a>
 8010662:	1b9b      	subs	r3, r3, r6
 8010664:	2b1f      	cmp	r3, #31
 8010666:	eba2 0203 	sub.w	r2, r2, r3
 801066a:	f04f 0101 	mov.w	r1, #1
 801066e:	f300 80b0 	bgt.w	80107d2 <_strtod_l+0x832>
 8010672:	fa01 f303 	lsl.w	r3, r1, r3
 8010676:	930e      	str	r3, [sp, #56]	; 0x38
 8010678:	2300      	movs	r3, #0
 801067a:	930d      	str	r3, [sp, #52]	; 0x34
 801067c:	eb0a 0602 	add.w	r6, sl, r2
 8010680:	9b04      	ldr	r3, [sp, #16]
 8010682:	45b2      	cmp	sl, r6
 8010684:	4417      	add	r7, r2
 8010686:	441f      	add	r7, r3
 8010688:	4653      	mov	r3, sl
 801068a:	bfa8      	it	ge
 801068c:	4633      	movge	r3, r6
 801068e:	42bb      	cmp	r3, r7
 8010690:	bfa8      	it	ge
 8010692:	463b      	movge	r3, r7
 8010694:	2b00      	cmp	r3, #0
 8010696:	bfc2      	ittt	gt
 8010698:	1af6      	subgt	r6, r6, r3
 801069a:	1aff      	subgt	r7, r7, r3
 801069c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80106a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	dd17      	ble.n	80106d6 <_strtod_l+0x736>
 80106a6:	4659      	mov	r1, fp
 80106a8:	461a      	mov	r2, r3
 80106aa:	4620      	mov	r0, r4
 80106ac:	f7ff f9ae 	bl	800fa0c <__pow5mult>
 80106b0:	4683      	mov	fp, r0
 80106b2:	2800      	cmp	r0, #0
 80106b4:	f43f aeb8 	beq.w	8010428 <_strtod_l+0x488>
 80106b8:	4601      	mov	r1, r0
 80106ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80106bc:	4620      	mov	r0, r4
 80106be:	f7ff f8fb 	bl	800f8b8 <__multiply>
 80106c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80106c4:	2800      	cmp	r0, #0
 80106c6:	f43f aeaf 	beq.w	8010428 <_strtod_l+0x488>
 80106ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80106cc:	4620      	mov	r0, r4
 80106ce:	f7fe ffdd 	bl	800f68c <_Bfree>
 80106d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106d4:	9316      	str	r3, [sp, #88]	; 0x58
 80106d6:	2e00      	cmp	r6, #0
 80106d8:	f300 808c 	bgt.w	80107f4 <_strtod_l+0x854>
 80106dc:	9b08      	ldr	r3, [sp, #32]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	dd08      	ble.n	80106f4 <_strtod_l+0x754>
 80106e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80106e4:	9905      	ldr	r1, [sp, #20]
 80106e6:	4620      	mov	r0, r4
 80106e8:	f7ff f990 	bl	800fa0c <__pow5mult>
 80106ec:	9005      	str	r0, [sp, #20]
 80106ee:	2800      	cmp	r0, #0
 80106f0:	f43f ae9a 	beq.w	8010428 <_strtod_l+0x488>
 80106f4:	2f00      	cmp	r7, #0
 80106f6:	dd08      	ble.n	801070a <_strtod_l+0x76a>
 80106f8:	9905      	ldr	r1, [sp, #20]
 80106fa:	463a      	mov	r2, r7
 80106fc:	4620      	mov	r0, r4
 80106fe:	f7ff f9df 	bl	800fac0 <__lshift>
 8010702:	9005      	str	r0, [sp, #20]
 8010704:	2800      	cmp	r0, #0
 8010706:	f43f ae8f 	beq.w	8010428 <_strtod_l+0x488>
 801070a:	f1ba 0f00 	cmp.w	sl, #0
 801070e:	dd08      	ble.n	8010722 <_strtod_l+0x782>
 8010710:	4659      	mov	r1, fp
 8010712:	4652      	mov	r2, sl
 8010714:	4620      	mov	r0, r4
 8010716:	f7ff f9d3 	bl	800fac0 <__lshift>
 801071a:	4683      	mov	fp, r0
 801071c:	2800      	cmp	r0, #0
 801071e:	f43f ae83 	beq.w	8010428 <_strtod_l+0x488>
 8010722:	9a05      	ldr	r2, [sp, #20]
 8010724:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010726:	4620      	mov	r0, r4
 8010728:	f7ff fa52 	bl	800fbd0 <__mdiff>
 801072c:	4605      	mov	r5, r0
 801072e:	2800      	cmp	r0, #0
 8010730:	f43f ae7a 	beq.w	8010428 <_strtod_l+0x488>
 8010734:	68c3      	ldr	r3, [r0, #12]
 8010736:	930b      	str	r3, [sp, #44]	; 0x2c
 8010738:	2300      	movs	r3, #0
 801073a:	60c3      	str	r3, [r0, #12]
 801073c:	4659      	mov	r1, fp
 801073e:	f7ff fa2b 	bl	800fb98 <__mcmp>
 8010742:	2800      	cmp	r0, #0
 8010744:	da60      	bge.n	8010808 <_strtod_l+0x868>
 8010746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010748:	ea53 0308 	orrs.w	r3, r3, r8
 801074c:	f040 8084 	bne.w	8010858 <_strtod_l+0x8b8>
 8010750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010754:	2b00      	cmp	r3, #0
 8010756:	d17f      	bne.n	8010858 <_strtod_l+0x8b8>
 8010758:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801075c:	0d1b      	lsrs	r3, r3, #20
 801075e:	051b      	lsls	r3, r3, #20
 8010760:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010764:	d978      	bls.n	8010858 <_strtod_l+0x8b8>
 8010766:	696b      	ldr	r3, [r5, #20]
 8010768:	b913      	cbnz	r3, 8010770 <_strtod_l+0x7d0>
 801076a:	692b      	ldr	r3, [r5, #16]
 801076c:	2b01      	cmp	r3, #1
 801076e:	dd73      	ble.n	8010858 <_strtod_l+0x8b8>
 8010770:	4629      	mov	r1, r5
 8010772:	2201      	movs	r2, #1
 8010774:	4620      	mov	r0, r4
 8010776:	f7ff f9a3 	bl	800fac0 <__lshift>
 801077a:	4659      	mov	r1, fp
 801077c:	4605      	mov	r5, r0
 801077e:	f7ff fa0b 	bl	800fb98 <__mcmp>
 8010782:	2800      	cmp	r0, #0
 8010784:	dd68      	ble.n	8010858 <_strtod_l+0x8b8>
 8010786:	9904      	ldr	r1, [sp, #16]
 8010788:	4a54      	ldr	r2, [pc, #336]	; (80108dc <_strtod_l+0x93c>)
 801078a:	464b      	mov	r3, r9
 801078c:	2900      	cmp	r1, #0
 801078e:	f000 8084 	beq.w	801089a <_strtod_l+0x8fa>
 8010792:	ea02 0109 	and.w	r1, r2, r9
 8010796:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801079a:	dc7e      	bgt.n	801089a <_strtod_l+0x8fa>
 801079c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80107a0:	f77f aeb3 	ble.w	801050a <_strtod_l+0x56a>
 80107a4:	4b4e      	ldr	r3, [pc, #312]	; (80108e0 <_strtod_l+0x940>)
 80107a6:	4640      	mov	r0, r8
 80107a8:	4649      	mov	r1, r9
 80107aa:	2200      	movs	r2, #0
 80107ac:	f7ef ff44 	bl	8000638 <__aeabi_dmul>
 80107b0:	4b4a      	ldr	r3, [pc, #296]	; (80108dc <_strtod_l+0x93c>)
 80107b2:	400b      	ands	r3, r1
 80107b4:	4680      	mov	r8, r0
 80107b6:	4689      	mov	r9, r1
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f47f ae3f 	bne.w	801043c <_strtod_l+0x49c>
 80107be:	2322      	movs	r3, #34	; 0x22
 80107c0:	6023      	str	r3, [r4, #0]
 80107c2:	e63b      	b.n	801043c <_strtod_l+0x49c>
 80107c4:	f04f 32ff 	mov.w	r2, #4294967295
 80107c8:	fa02 f303 	lsl.w	r3, r2, r3
 80107cc:	ea03 0808 	and.w	r8, r3, r8
 80107d0:	e6e8      	b.n	80105a4 <_strtod_l+0x604>
 80107d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80107d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80107da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80107de:	36e2      	adds	r6, #226	; 0xe2
 80107e0:	fa01 f306 	lsl.w	r3, r1, r6
 80107e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80107e8:	e748      	b.n	801067c <_strtod_l+0x6dc>
 80107ea:	2100      	movs	r1, #0
 80107ec:	2301      	movs	r3, #1
 80107ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80107f2:	e743      	b.n	801067c <_strtod_l+0x6dc>
 80107f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80107f6:	4632      	mov	r2, r6
 80107f8:	4620      	mov	r0, r4
 80107fa:	f7ff f961 	bl	800fac0 <__lshift>
 80107fe:	9016      	str	r0, [sp, #88]	; 0x58
 8010800:	2800      	cmp	r0, #0
 8010802:	f47f af6b 	bne.w	80106dc <_strtod_l+0x73c>
 8010806:	e60f      	b.n	8010428 <_strtod_l+0x488>
 8010808:	46ca      	mov	sl, r9
 801080a:	d171      	bne.n	80108f0 <_strtod_l+0x950>
 801080c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801080e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010812:	b352      	cbz	r2, 801086a <_strtod_l+0x8ca>
 8010814:	4a33      	ldr	r2, [pc, #204]	; (80108e4 <_strtod_l+0x944>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d12a      	bne.n	8010870 <_strtod_l+0x8d0>
 801081a:	9b04      	ldr	r3, [sp, #16]
 801081c:	4641      	mov	r1, r8
 801081e:	b1fb      	cbz	r3, 8010860 <_strtod_l+0x8c0>
 8010820:	4b2e      	ldr	r3, [pc, #184]	; (80108dc <_strtod_l+0x93c>)
 8010822:	ea09 0303 	and.w	r3, r9, r3
 8010826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801082a:	f04f 32ff 	mov.w	r2, #4294967295
 801082e:	d81a      	bhi.n	8010866 <_strtod_l+0x8c6>
 8010830:	0d1b      	lsrs	r3, r3, #20
 8010832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010836:	fa02 f303 	lsl.w	r3, r2, r3
 801083a:	4299      	cmp	r1, r3
 801083c:	d118      	bne.n	8010870 <_strtod_l+0x8d0>
 801083e:	4b2a      	ldr	r3, [pc, #168]	; (80108e8 <_strtod_l+0x948>)
 8010840:	459a      	cmp	sl, r3
 8010842:	d102      	bne.n	801084a <_strtod_l+0x8aa>
 8010844:	3101      	adds	r1, #1
 8010846:	f43f adef 	beq.w	8010428 <_strtod_l+0x488>
 801084a:	4b24      	ldr	r3, [pc, #144]	; (80108dc <_strtod_l+0x93c>)
 801084c:	ea0a 0303 	and.w	r3, sl, r3
 8010850:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010854:	f04f 0800 	mov.w	r8, #0
 8010858:	9b04      	ldr	r3, [sp, #16]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1a2      	bne.n	80107a4 <_strtod_l+0x804>
 801085e:	e5ed      	b.n	801043c <_strtod_l+0x49c>
 8010860:	f04f 33ff 	mov.w	r3, #4294967295
 8010864:	e7e9      	b.n	801083a <_strtod_l+0x89a>
 8010866:	4613      	mov	r3, r2
 8010868:	e7e7      	b.n	801083a <_strtod_l+0x89a>
 801086a:	ea53 0308 	orrs.w	r3, r3, r8
 801086e:	d08a      	beq.n	8010786 <_strtod_l+0x7e6>
 8010870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010872:	b1e3      	cbz	r3, 80108ae <_strtod_l+0x90e>
 8010874:	ea13 0f0a 	tst.w	r3, sl
 8010878:	d0ee      	beq.n	8010858 <_strtod_l+0x8b8>
 801087a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801087c:	9a04      	ldr	r2, [sp, #16]
 801087e:	4640      	mov	r0, r8
 8010880:	4649      	mov	r1, r9
 8010882:	b1c3      	cbz	r3, 80108b6 <_strtod_l+0x916>
 8010884:	f7ff fb6f 	bl	800ff66 <sulp>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	ec51 0b18 	vmov	r0, r1, d8
 8010890:	f7ef fd1c 	bl	80002cc <__adddf3>
 8010894:	4680      	mov	r8, r0
 8010896:	4689      	mov	r9, r1
 8010898:	e7de      	b.n	8010858 <_strtod_l+0x8b8>
 801089a:	4013      	ands	r3, r2
 801089c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80108a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80108a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80108a8:	f04f 38ff 	mov.w	r8, #4294967295
 80108ac:	e7d4      	b.n	8010858 <_strtod_l+0x8b8>
 80108ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108b0:	ea13 0f08 	tst.w	r3, r8
 80108b4:	e7e0      	b.n	8010878 <_strtod_l+0x8d8>
 80108b6:	f7ff fb56 	bl	800ff66 <sulp>
 80108ba:	4602      	mov	r2, r0
 80108bc:	460b      	mov	r3, r1
 80108be:	ec51 0b18 	vmov	r0, r1, d8
 80108c2:	f7ef fd01 	bl	80002c8 <__aeabi_dsub>
 80108c6:	2200      	movs	r2, #0
 80108c8:	2300      	movs	r3, #0
 80108ca:	4680      	mov	r8, r0
 80108cc:	4689      	mov	r9, r1
 80108ce:	f7f0 f91b 	bl	8000b08 <__aeabi_dcmpeq>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d0c0      	beq.n	8010858 <_strtod_l+0x8b8>
 80108d6:	e618      	b.n	801050a <_strtod_l+0x56a>
 80108d8:	fffffc02 	.word	0xfffffc02
 80108dc:	7ff00000 	.word	0x7ff00000
 80108e0:	39500000 	.word	0x39500000
 80108e4:	000fffff 	.word	0x000fffff
 80108e8:	7fefffff 	.word	0x7fefffff
 80108ec:	08012c00 	.word	0x08012c00
 80108f0:	4659      	mov	r1, fp
 80108f2:	4628      	mov	r0, r5
 80108f4:	f7ff fac0 	bl	800fe78 <__ratio>
 80108f8:	ec57 6b10 	vmov	r6, r7, d0
 80108fc:	ee10 0a10 	vmov	r0, s0
 8010900:	2200      	movs	r2, #0
 8010902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010906:	4639      	mov	r1, r7
 8010908:	f7f0 f912 	bl	8000b30 <__aeabi_dcmple>
 801090c:	2800      	cmp	r0, #0
 801090e:	d071      	beq.n	80109f4 <_strtod_l+0xa54>
 8010910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010912:	2b00      	cmp	r3, #0
 8010914:	d17c      	bne.n	8010a10 <_strtod_l+0xa70>
 8010916:	f1b8 0f00 	cmp.w	r8, #0
 801091a:	d15a      	bne.n	80109d2 <_strtod_l+0xa32>
 801091c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010920:	2b00      	cmp	r3, #0
 8010922:	d15d      	bne.n	80109e0 <_strtod_l+0xa40>
 8010924:	4b90      	ldr	r3, [pc, #576]	; (8010b68 <_strtod_l+0xbc8>)
 8010926:	2200      	movs	r2, #0
 8010928:	4630      	mov	r0, r6
 801092a:	4639      	mov	r1, r7
 801092c:	f7f0 f8f6 	bl	8000b1c <__aeabi_dcmplt>
 8010930:	2800      	cmp	r0, #0
 8010932:	d15c      	bne.n	80109ee <_strtod_l+0xa4e>
 8010934:	4630      	mov	r0, r6
 8010936:	4639      	mov	r1, r7
 8010938:	4b8c      	ldr	r3, [pc, #560]	; (8010b6c <_strtod_l+0xbcc>)
 801093a:	2200      	movs	r2, #0
 801093c:	f7ef fe7c 	bl	8000638 <__aeabi_dmul>
 8010940:	4606      	mov	r6, r0
 8010942:	460f      	mov	r7, r1
 8010944:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010948:	9606      	str	r6, [sp, #24]
 801094a:	9307      	str	r3, [sp, #28]
 801094c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010950:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010954:	4b86      	ldr	r3, [pc, #536]	; (8010b70 <_strtod_l+0xbd0>)
 8010956:	ea0a 0303 	and.w	r3, sl, r3
 801095a:	930d      	str	r3, [sp, #52]	; 0x34
 801095c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801095e:	4b85      	ldr	r3, [pc, #532]	; (8010b74 <_strtod_l+0xbd4>)
 8010960:	429a      	cmp	r2, r3
 8010962:	f040 8090 	bne.w	8010a86 <_strtod_l+0xae6>
 8010966:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801096a:	ec49 8b10 	vmov	d0, r8, r9
 801096e:	f7ff f9b9 	bl	800fce4 <__ulp>
 8010972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010976:	ec51 0b10 	vmov	r0, r1, d0
 801097a:	f7ef fe5d 	bl	8000638 <__aeabi_dmul>
 801097e:	4642      	mov	r2, r8
 8010980:	464b      	mov	r3, r9
 8010982:	f7ef fca3 	bl	80002cc <__adddf3>
 8010986:	460b      	mov	r3, r1
 8010988:	4979      	ldr	r1, [pc, #484]	; (8010b70 <_strtod_l+0xbd0>)
 801098a:	4a7b      	ldr	r2, [pc, #492]	; (8010b78 <_strtod_l+0xbd8>)
 801098c:	4019      	ands	r1, r3
 801098e:	4291      	cmp	r1, r2
 8010990:	4680      	mov	r8, r0
 8010992:	d944      	bls.n	8010a1e <_strtod_l+0xa7e>
 8010994:	ee18 2a90 	vmov	r2, s17
 8010998:	4b78      	ldr	r3, [pc, #480]	; (8010b7c <_strtod_l+0xbdc>)
 801099a:	429a      	cmp	r2, r3
 801099c:	d104      	bne.n	80109a8 <_strtod_l+0xa08>
 801099e:	ee18 3a10 	vmov	r3, s16
 80109a2:	3301      	adds	r3, #1
 80109a4:	f43f ad40 	beq.w	8010428 <_strtod_l+0x488>
 80109a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010b7c <_strtod_l+0xbdc>
 80109ac:	f04f 38ff 	mov.w	r8, #4294967295
 80109b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80109b2:	4620      	mov	r0, r4
 80109b4:	f7fe fe6a 	bl	800f68c <_Bfree>
 80109b8:	9905      	ldr	r1, [sp, #20]
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7fe fe66 	bl	800f68c <_Bfree>
 80109c0:	4659      	mov	r1, fp
 80109c2:	4620      	mov	r0, r4
 80109c4:	f7fe fe62 	bl	800f68c <_Bfree>
 80109c8:	4629      	mov	r1, r5
 80109ca:	4620      	mov	r0, r4
 80109cc:	f7fe fe5e 	bl	800f68c <_Bfree>
 80109d0:	e609      	b.n	80105e6 <_strtod_l+0x646>
 80109d2:	f1b8 0f01 	cmp.w	r8, #1
 80109d6:	d103      	bne.n	80109e0 <_strtod_l+0xa40>
 80109d8:	f1b9 0f00 	cmp.w	r9, #0
 80109dc:	f43f ad95 	beq.w	801050a <_strtod_l+0x56a>
 80109e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010b38 <_strtod_l+0xb98>
 80109e4:	4f60      	ldr	r7, [pc, #384]	; (8010b68 <_strtod_l+0xbc8>)
 80109e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80109ea:	2600      	movs	r6, #0
 80109ec:	e7ae      	b.n	801094c <_strtod_l+0x9ac>
 80109ee:	4f5f      	ldr	r7, [pc, #380]	; (8010b6c <_strtod_l+0xbcc>)
 80109f0:	2600      	movs	r6, #0
 80109f2:	e7a7      	b.n	8010944 <_strtod_l+0x9a4>
 80109f4:	4b5d      	ldr	r3, [pc, #372]	; (8010b6c <_strtod_l+0xbcc>)
 80109f6:	4630      	mov	r0, r6
 80109f8:	4639      	mov	r1, r7
 80109fa:	2200      	movs	r2, #0
 80109fc:	f7ef fe1c 	bl	8000638 <__aeabi_dmul>
 8010a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a02:	4606      	mov	r6, r0
 8010a04:	460f      	mov	r7, r1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d09c      	beq.n	8010944 <_strtod_l+0x9a4>
 8010a0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010a0e:	e79d      	b.n	801094c <_strtod_l+0x9ac>
 8010a10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010b40 <_strtod_l+0xba0>
 8010a14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010a18:	ec57 6b17 	vmov	r6, r7, d7
 8010a1c:	e796      	b.n	801094c <_strtod_l+0x9ac>
 8010a1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010a22:	9b04      	ldr	r3, [sp, #16]
 8010a24:	46ca      	mov	sl, r9
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d1c2      	bne.n	80109b0 <_strtod_l+0xa10>
 8010a2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a30:	0d1b      	lsrs	r3, r3, #20
 8010a32:	051b      	lsls	r3, r3, #20
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d1bb      	bne.n	80109b0 <_strtod_l+0xa10>
 8010a38:	4630      	mov	r0, r6
 8010a3a:	4639      	mov	r1, r7
 8010a3c:	f7f0 f95c 	bl	8000cf8 <__aeabi_d2lz>
 8010a40:	f7ef fdcc 	bl	80005dc <__aeabi_l2d>
 8010a44:	4602      	mov	r2, r0
 8010a46:	460b      	mov	r3, r1
 8010a48:	4630      	mov	r0, r6
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f7ef fc3c 	bl	80002c8 <__aeabi_dsub>
 8010a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a56:	ea43 0308 	orr.w	r3, r3, r8
 8010a5a:	4313      	orrs	r3, r2
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	460f      	mov	r7, r1
 8010a60:	d054      	beq.n	8010b0c <_strtod_l+0xb6c>
 8010a62:	a339      	add	r3, pc, #228	; (adr r3, 8010b48 <_strtod_l+0xba8>)
 8010a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a68:	f7f0 f858 	bl	8000b1c <__aeabi_dcmplt>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	f47f ace5 	bne.w	801043c <_strtod_l+0x49c>
 8010a72:	a337      	add	r3, pc, #220	; (adr r3, 8010b50 <_strtod_l+0xbb0>)
 8010a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a78:	4630      	mov	r0, r6
 8010a7a:	4639      	mov	r1, r7
 8010a7c:	f7f0 f86c 	bl	8000b58 <__aeabi_dcmpgt>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d095      	beq.n	80109b0 <_strtod_l+0xa10>
 8010a84:	e4da      	b.n	801043c <_strtod_l+0x49c>
 8010a86:	9b04      	ldr	r3, [sp, #16]
 8010a88:	b333      	cbz	r3, 8010ad8 <_strtod_l+0xb38>
 8010a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010a90:	d822      	bhi.n	8010ad8 <_strtod_l+0xb38>
 8010a92:	a331      	add	r3, pc, #196	; (adr r3, 8010b58 <_strtod_l+0xbb8>)
 8010a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a98:	4630      	mov	r0, r6
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	f7f0 f848 	bl	8000b30 <__aeabi_dcmple>
 8010aa0:	b1a0      	cbz	r0, 8010acc <_strtod_l+0xb2c>
 8010aa2:	4639      	mov	r1, r7
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f7f0 f89f 	bl	8000be8 <__aeabi_d2uiz>
 8010aaa:	2801      	cmp	r0, #1
 8010aac:	bf38      	it	cc
 8010aae:	2001      	movcc	r0, #1
 8010ab0:	f7ef fd48 	bl	8000544 <__aeabi_ui2d>
 8010ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	460f      	mov	r7, r1
 8010aba:	bb23      	cbnz	r3, 8010b06 <_strtod_l+0xb66>
 8010abc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ac0:	9010      	str	r0, [sp, #64]	; 0x40
 8010ac2:	9311      	str	r3, [sp, #68]	; 0x44
 8010ac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ac8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ad0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010ad4:	1a9b      	subs	r3, r3, r2
 8010ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ad8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010adc:	eeb0 0a48 	vmov.f32	s0, s16
 8010ae0:	eef0 0a68 	vmov.f32	s1, s17
 8010ae4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010ae8:	f7ff f8fc 	bl	800fce4 <__ulp>
 8010aec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010af0:	ec53 2b10 	vmov	r2, r3, d0
 8010af4:	f7ef fda0 	bl	8000638 <__aeabi_dmul>
 8010af8:	ec53 2b18 	vmov	r2, r3, d8
 8010afc:	f7ef fbe6 	bl	80002cc <__adddf3>
 8010b00:	4680      	mov	r8, r0
 8010b02:	4689      	mov	r9, r1
 8010b04:	e78d      	b.n	8010a22 <_strtod_l+0xa82>
 8010b06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010b0a:	e7db      	b.n	8010ac4 <_strtod_l+0xb24>
 8010b0c:	a314      	add	r3, pc, #80	; (adr r3, 8010b60 <_strtod_l+0xbc0>)
 8010b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b12:	f7f0 f803 	bl	8000b1c <__aeabi_dcmplt>
 8010b16:	e7b3      	b.n	8010a80 <_strtod_l+0xae0>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b20:	6013      	str	r3, [r2, #0]
 8010b22:	f7ff ba7c 	b.w	801001e <_strtod_l+0x7e>
 8010b26:	2a65      	cmp	r2, #101	; 0x65
 8010b28:	f43f ab75 	beq.w	8010216 <_strtod_l+0x276>
 8010b2c:	2a45      	cmp	r2, #69	; 0x45
 8010b2e:	f43f ab72 	beq.w	8010216 <_strtod_l+0x276>
 8010b32:	2301      	movs	r3, #1
 8010b34:	f7ff bbaa 	b.w	801028c <_strtod_l+0x2ec>
 8010b38:	00000000 	.word	0x00000000
 8010b3c:	bff00000 	.word	0xbff00000
 8010b40:	00000000 	.word	0x00000000
 8010b44:	3ff00000 	.word	0x3ff00000
 8010b48:	94a03595 	.word	0x94a03595
 8010b4c:	3fdfffff 	.word	0x3fdfffff
 8010b50:	35afe535 	.word	0x35afe535
 8010b54:	3fe00000 	.word	0x3fe00000
 8010b58:	ffc00000 	.word	0xffc00000
 8010b5c:	41dfffff 	.word	0x41dfffff
 8010b60:	94a03595 	.word	0x94a03595
 8010b64:	3fcfffff 	.word	0x3fcfffff
 8010b68:	3ff00000 	.word	0x3ff00000
 8010b6c:	3fe00000 	.word	0x3fe00000
 8010b70:	7ff00000 	.word	0x7ff00000
 8010b74:	7fe00000 	.word	0x7fe00000
 8010b78:	7c9fffff 	.word	0x7c9fffff
 8010b7c:	7fefffff 	.word	0x7fefffff

08010b80 <_strtod_r>:
 8010b80:	4b01      	ldr	r3, [pc, #4]	; (8010b88 <_strtod_r+0x8>)
 8010b82:	f7ff ba0d 	b.w	800ffa0 <_strtod_l>
 8010b86:	bf00      	nop
 8010b88:	20000070 	.word	0x20000070

08010b8c <_strtol_l.constprop.0>:
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b92:	d001      	beq.n	8010b98 <_strtol_l.constprop.0+0xc>
 8010b94:	2b24      	cmp	r3, #36	; 0x24
 8010b96:	d906      	bls.n	8010ba6 <_strtol_l.constprop.0+0x1a>
 8010b98:	f7fd fe2a 	bl	800e7f0 <__errno>
 8010b9c:	2316      	movs	r3, #22
 8010b9e:	6003      	str	r3, [r0, #0]
 8010ba0:	2000      	movs	r0, #0
 8010ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010c8c <_strtol_l.constprop.0+0x100>
 8010baa:	460d      	mov	r5, r1
 8010bac:	462e      	mov	r6, r5
 8010bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010bb6:	f017 0708 	ands.w	r7, r7, #8
 8010bba:	d1f7      	bne.n	8010bac <_strtol_l.constprop.0+0x20>
 8010bbc:	2c2d      	cmp	r4, #45	; 0x2d
 8010bbe:	d132      	bne.n	8010c26 <_strtol_l.constprop.0+0x9a>
 8010bc0:	782c      	ldrb	r4, [r5, #0]
 8010bc2:	2701      	movs	r7, #1
 8010bc4:	1cb5      	adds	r5, r6, #2
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d05b      	beq.n	8010c82 <_strtol_l.constprop.0+0xf6>
 8010bca:	2b10      	cmp	r3, #16
 8010bcc:	d109      	bne.n	8010be2 <_strtol_l.constprop.0+0x56>
 8010bce:	2c30      	cmp	r4, #48	; 0x30
 8010bd0:	d107      	bne.n	8010be2 <_strtol_l.constprop.0+0x56>
 8010bd2:	782c      	ldrb	r4, [r5, #0]
 8010bd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010bd8:	2c58      	cmp	r4, #88	; 0x58
 8010bda:	d14d      	bne.n	8010c78 <_strtol_l.constprop.0+0xec>
 8010bdc:	786c      	ldrb	r4, [r5, #1]
 8010bde:	2310      	movs	r3, #16
 8010be0:	3502      	adds	r5, #2
 8010be2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010bea:	f04f 0e00 	mov.w	lr, #0
 8010bee:	fbb8 f9f3 	udiv	r9, r8, r3
 8010bf2:	4676      	mov	r6, lr
 8010bf4:	fb03 8a19 	mls	sl, r3, r9, r8
 8010bf8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010bfc:	f1bc 0f09 	cmp.w	ip, #9
 8010c00:	d816      	bhi.n	8010c30 <_strtol_l.constprop.0+0xa4>
 8010c02:	4664      	mov	r4, ip
 8010c04:	42a3      	cmp	r3, r4
 8010c06:	dd24      	ble.n	8010c52 <_strtol_l.constprop.0+0xc6>
 8010c08:	f1be 3fff 	cmp.w	lr, #4294967295
 8010c0c:	d008      	beq.n	8010c20 <_strtol_l.constprop.0+0x94>
 8010c0e:	45b1      	cmp	r9, r6
 8010c10:	d31c      	bcc.n	8010c4c <_strtol_l.constprop.0+0xc0>
 8010c12:	d101      	bne.n	8010c18 <_strtol_l.constprop.0+0x8c>
 8010c14:	45a2      	cmp	sl, r4
 8010c16:	db19      	blt.n	8010c4c <_strtol_l.constprop.0+0xc0>
 8010c18:	fb06 4603 	mla	r6, r6, r3, r4
 8010c1c:	f04f 0e01 	mov.w	lr, #1
 8010c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c24:	e7e8      	b.n	8010bf8 <_strtol_l.constprop.0+0x6c>
 8010c26:	2c2b      	cmp	r4, #43	; 0x2b
 8010c28:	bf04      	itt	eq
 8010c2a:	782c      	ldrbeq	r4, [r5, #0]
 8010c2c:	1cb5      	addeq	r5, r6, #2
 8010c2e:	e7ca      	b.n	8010bc6 <_strtol_l.constprop.0+0x3a>
 8010c30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010c34:	f1bc 0f19 	cmp.w	ip, #25
 8010c38:	d801      	bhi.n	8010c3e <_strtol_l.constprop.0+0xb2>
 8010c3a:	3c37      	subs	r4, #55	; 0x37
 8010c3c:	e7e2      	b.n	8010c04 <_strtol_l.constprop.0+0x78>
 8010c3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010c42:	f1bc 0f19 	cmp.w	ip, #25
 8010c46:	d804      	bhi.n	8010c52 <_strtol_l.constprop.0+0xc6>
 8010c48:	3c57      	subs	r4, #87	; 0x57
 8010c4a:	e7db      	b.n	8010c04 <_strtol_l.constprop.0+0x78>
 8010c4c:	f04f 3eff 	mov.w	lr, #4294967295
 8010c50:	e7e6      	b.n	8010c20 <_strtol_l.constprop.0+0x94>
 8010c52:	f1be 3fff 	cmp.w	lr, #4294967295
 8010c56:	d105      	bne.n	8010c64 <_strtol_l.constprop.0+0xd8>
 8010c58:	2322      	movs	r3, #34	; 0x22
 8010c5a:	6003      	str	r3, [r0, #0]
 8010c5c:	4646      	mov	r6, r8
 8010c5e:	b942      	cbnz	r2, 8010c72 <_strtol_l.constprop.0+0xe6>
 8010c60:	4630      	mov	r0, r6
 8010c62:	e79e      	b.n	8010ba2 <_strtol_l.constprop.0+0x16>
 8010c64:	b107      	cbz	r7, 8010c68 <_strtol_l.constprop.0+0xdc>
 8010c66:	4276      	negs	r6, r6
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	d0f9      	beq.n	8010c60 <_strtol_l.constprop.0+0xd4>
 8010c6c:	f1be 0f00 	cmp.w	lr, #0
 8010c70:	d000      	beq.n	8010c74 <_strtol_l.constprop.0+0xe8>
 8010c72:	1e69      	subs	r1, r5, #1
 8010c74:	6011      	str	r1, [r2, #0]
 8010c76:	e7f3      	b.n	8010c60 <_strtol_l.constprop.0+0xd4>
 8010c78:	2430      	movs	r4, #48	; 0x30
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1b1      	bne.n	8010be2 <_strtol_l.constprop.0+0x56>
 8010c7e:	2308      	movs	r3, #8
 8010c80:	e7af      	b.n	8010be2 <_strtol_l.constprop.0+0x56>
 8010c82:	2c30      	cmp	r4, #48	; 0x30
 8010c84:	d0a5      	beq.n	8010bd2 <_strtol_l.constprop.0+0x46>
 8010c86:	230a      	movs	r3, #10
 8010c88:	e7ab      	b.n	8010be2 <_strtol_l.constprop.0+0x56>
 8010c8a:	bf00      	nop
 8010c8c:	08012c29 	.word	0x08012c29

08010c90 <_strtol_r>:
 8010c90:	f7ff bf7c 	b.w	8010b8c <_strtol_l.constprop.0>

08010c94 <__ssputs_r>:
 8010c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c98:	688e      	ldr	r6, [r1, #8]
 8010c9a:	461f      	mov	r7, r3
 8010c9c:	42be      	cmp	r6, r7
 8010c9e:	680b      	ldr	r3, [r1, #0]
 8010ca0:	4682      	mov	sl, r0
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	4690      	mov	r8, r2
 8010ca6:	d82c      	bhi.n	8010d02 <__ssputs_r+0x6e>
 8010ca8:	898a      	ldrh	r2, [r1, #12]
 8010caa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010cae:	d026      	beq.n	8010cfe <__ssputs_r+0x6a>
 8010cb0:	6965      	ldr	r5, [r4, #20]
 8010cb2:	6909      	ldr	r1, [r1, #16]
 8010cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cb8:	eba3 0901 	sub.w	r9, r3, r1
 8010cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cc0:	1c7b      	adds	r3, r7, #1
 8010cc2:	444b      	add	r3, r9
 8010cc4:	106d      	asrs	r5, r5, #1
 8010cc6:	429d      	cmp	r5, r3
 8010cc8:	bf38      	it	cc
 8010cca:	461d      	movcc	r5, r3
 8010ccc:	0553      	lsls	r3, r2, #21
 8010cce:	d527      	bpl.n	8010d20 <__ssputs_r+0x8c>
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	f7fc fc91 	bl	800d5f8 <_malloc_r>
 8010cd6:	4606      	mov	r6, r0
 8010cd8:	b360      	cbz	r0, 8010d34 <__ssputs_r+0xa0>
 8010cda:	6921      	ldr	r1, [r4, #16]
 8010cdc:	464a      	mov	r2, r9
 8010cde:	f7fd fdb3 	bl	800e848 <memcpy>
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cec:	81a3      	strh	r3, [r4, #12]
 8010cee:	6126      	str	r6, [r4, #16]
 8010cf0:	6165      	str	r5, [r4, #20]
 8010cf2:	444e      	add	r6, r9
 8010cf4:	eba5 0509 	sub.w	r5, r5, r9
 8010cf8:	6026      	str	r6, [r4, #0]
 8010cfa:	60a5      	str	r5, [r4, #8]
 8010cfc:	463e      	mov	r6, r7
 8010cfe:	42be      	cmp	r6, r7
 8010d00:	d900      	bls.n	8010d04 <__ssputs_r+0x70>
 8010d02:	463e      	mov	r6, r7
 8010d04:	6820      	ldr	r0, [r4, #0]
 8010d06:	4632      	mov	r2, r6
 8010d08:	4641      	mov	r1, r8
 8010d0a:	f000 fd5c 	bl	80117c6 <memmove>
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	1b9b      	subs	r3, r3, r6
 8010d12:	60a3      	str	r3, [r4, #8]
 8010d14:	6823      	ldr	r3, [r4, #0]
 8010d16:	4433      	add	r3, r6
 8010d18:	6023      	str	r3, [r4, #0]
 8010d1a:	2000      	movs	r0, #0
 8010d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d20:	462a      	mov	r2, r5
 8010d22:	f001 f90c 	bl	8011f3e <_realloc_r>
 8010d26:	4606      	mov	r6, r0
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	d1e0      	bne.n	8010cee <__ssputs_r+0x5a>
 8010d2c:	6921      	ldr	r1, [r4, #16]
 8010d2e:	4650      	mov	r0, sl
 8010d30:	f7fe fc18 	bl	800f564 <_free_r>
 8010d34:	230c      	movs	r3, #12
 8010d36:	f8ca 3000 	str.w	r3, [sl]
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d40:	81a3      	strh	r3, [r4, #12]
 8010d42:	f04f 30ff 	mov.w	r0, #4294967295
 8010d46:	e7e9      	b.n	8010d1c <__ssputs_r+0x88>

08010d48 <_svfiprintf_r>:
 8010d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4c:	4698      	mov	r8, r3
 8010d4e:	898b      	ldrh	r3, [r1, #12]
 8010d50:	061b      	lsls	r3, r3, #24
 8010d52:	b09d      	sub	sp, #116	; 0x74
 8010d54:	4607      	mov	r7, r0
 8010d56:	460d      	mov	r5, r1
 8010d58:	4614      	mov	r4, r2
 8010d5a:	d50e      	bpl.n	8010d7a <_svfiprintf_r+0x32>
 8010d5c:	690b      	ldr	r3, [r1, #16]
 8010d5e:	b963      	cbnz	r3, 8010d7a <_svfiprintf_r+0x32>
 8010d60:	2140      	movs	r1, #64	; 0x40
 8010d62:	f7fc fc49 	bl	800d5f8 <_malloc_r>
 8010d66:	6028      	str	r0, [r5, #0]
 8010d68:	6128      	str	r0, [r5, #16]
 8010d6a:	b920      	cbnz	r0, 8010d76 <_svfiprintf_r+0x2e>
 8010d6c:	230c      	movs	r3, #12
 8010d6e:	603b      	str	r3, [r7, #0]
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	e0d0      	b.n	8010f18 <_svfiprintf_r+0x1d0>
 8010d76:	2340      	movs	r3, #64	; 0x40
 8010d78:	616b      	str	r3, [r5, #20]
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7e:	2320      	movs	r3, #32
 8010d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d88:	2330      	movs	r3, #48	; 0x30
 8010d8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010f30 <_svfiprintf_r+0x1e8>
 8010d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d92:	f04f 0901 	mov.w	r9, #1
 8010d96:	4623      	mov	r3, r4
 8010d98:	469a      	mov	sl, r3
 8010d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d9e:	b10a      	cbz	r2, 8010da4 <_svfiprintf_r+0x5c>
 8010da0:	2a25      	cmp	r2, #37	; 0x25
 8010da2:	d1f9      	bne.n	8010d98 <_svfiprintf_r+0x50>
 8010da4:	ebba 0b04 	subs.w	fp, sl, r4
 8010da8:	d00b      	beq.n	8010dc2 <_svfiprintf_r+0x7a>
 8010daa:	465b      	mov	r3, fp
 8010dac:	4622      	mov	r2, r4
 8010dae:	4629      	mov	r1, r5
 8010db0:	4638      	mov	r0, r7
 8010db2:	f7ff ff6f 	bl	8010c94 <__ssputs_r>
 8010db6:	3001      	adds	r0, #1
 8010db8:	f000 80a9 	beq.w	8010f0e <_svfiprintf_r+0x1c6>
 8010dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dbe:	445a      	add	r2, fp
 8010dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8010dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 80a1 	beq.w	8010f0e <_svfiprintf_r+0x1c6>
 8010dcc:	2300      	movs	r3, #0
 8010dce:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dd6:	f10a 0a01 	add.w	sl, sl, #1
 8010dda:	9304      	str	r3, [sp, #16]
 8010ddc:	9307      	str	r3, [sp, #28]
 8010dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010de2:	931a      	str	r3, [sp, #104]	; 0x68
 8010de4:	4654      	mov	r4, sl
 8010de6:	2205      	movs	r2, #5
 8010de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dec:	4850      	ldr	r0, [pc, #320]	; (8010f30 <_svfiprintf_r+0x1e8>)
 8010dee:	f7ef fa0f 	bl	8000210 <memchr>
 8010df2:	9a04      	ldr	r2, [sp, #16]
 8010df4:	b9d8      	cbnz	r0, 8010e2e <_svfiprintf_r+0xe6>
 8010df6:	06d0      	lsls	r0, r2, #27
 8010df8:	bf44      	itt	mi
 8010dfa:	2320      	movmi	r3, #32
 8010dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e00:	0711      	lsls	r1, r2, #28
 8010e02:	bf44      	itt	mi
 8010e04:	232b      	movmi	r3, #43	; 0x2b
 8010e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e10:	d015      	beq.n	8010e3e <_svfiprintf_r+0xf6>
 8010e12:	9a07      	ldr	r2, [sp, #28]
 8010e14:	4654      	mov	r4, sl
 8010e16:	2000      	movs	r0, #0
 8010e18:	f04f 0c0a 	mov.w	ip, #10
 8010e1c:	4621      	mov	r1, r4
 8010e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e22:	3b30      	subs	r3, #48	; 0x30
 8010e24:	2b09      	cmp	r3, #9
 8010e26:	d94d      	bls.n	8010ec4 <_svfiprintf_r+0x17c>
 8010e28:	b1b0      	cbz	r0, 8010e58 <_svfiprintf_r+0x110>
 8010e2a:	9207      	str	r2, [sp, #28]
 8010e2c:	e014      	b.n	8010e58 <_svfiprintf_r+0x110>
 8010e2e:	eba0 0308 	sub.w	r3, r0, r8
 8010e32:	fa09 f303 	lsl.w	r3, r9, r3
 8010e36:	4313      	orrs	r3, r2
 8010e38:	9304      	str	r3, [sp, #16]
 8010e3a:	46a2      	mov	sl, r4
 8010e3c:	e7d2      	b.n	8010de4 <_svfiprintf_r+0x9c>
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	1d19      	adds	r1, r3, #4
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	9103      	str	r1, [sp, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	bfbb      	ittet	lt
 8010e4a:	425b      	neglt	r3, r3
 8010e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8010e50:	9307      	strge	r3, [sp, #28]
 8010e52:	9307      	strlt	r3, [sp, #28]
 8010e54:	bfb8      	it	lt
 8010e56:	9204      	strlt	r2, [sp, #16]
 8010e58:	7823      	ldrb	r3, [r4, #0]
 8010e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e5c:	d10c      	bne.n	8010e78 <_svfiprintf_r+0x130>
 8010e5e:	7863      	ldrb	r3, [r4, #1]
 8010e60:	2b2a      	cmp	r3, #42	; 0x2a
 8010e62:	d134      	bne.n	8010ece <_svfiprintf_r+0x186>
 8010e64:	9b03      	ldr	r3, [sp, #12]
 8010e66:	1d1a      	adds	r2, r3, #4
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	9203      	str	r2, [sp, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bfb8      	it	lt
 8010e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e74:	3402      	adds	r4, #2
 8010e76:	9305      	str	r3, [sp, #20]
 8010e78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010f40 <_svfiprintf_r+0x1f8>
 8010e7c:	7821      	ldrb	r1, [r4, #0]
 8010e7e:	2203      	movs	r2, #3
 8010e80:	4650      	mov	r0, sl
 8010e82:	f7ef f9c5 	bl	8000210 <memchr>
 8010e86:	b138      	cbz	r0, 8010e98 <_svfiprintf_r+0x150>
 8010e88:	9b04      	ldr	r3, [sp, #16]
 8010e8a:	eba0 000a 	sub.w	r0, r0, sl
 8010e8e:	2240      	movs	r2, #64	; 0x40
 8010e90:	4082      	lsls	r2, r0
 8010e92:	4313      	orrs	r3, r2
 8010e94:	3401      	adds	r4, #1
 8010e96:	9304      	str	r3, [sp, #16]
 8010e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e9c:	4825      	ldr	r0, [pc, #148]	; (8010f34 <_svfiprintf_r+0x1ec>)
 8010e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ea2:	2206      	movs	r2, #6
 8010ea4:	f7ef f9b4 	bl	8000210 <memchr>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d038      	beq.n	8010f1e <_svfiprintf_r+0x1d6>
 8010eac:	4b22      	ldr	r3, [pc, #136]	; (8010f38 <_svfiprintf_r+0x1f0>)
 8010eae:	bb1b      	cbnz	r3, 8010ef8 <_svfiprintf_r+0x1b0>
 8010eb0:	9b03      	ldr	r3, [sp, #12]
 8010eb2:	3307      	adds	r3, #7
 8010eb4:	f023 0307 	bic.w	r3, r3, #7
 8010eb8:	3308      	adds	r3, #8
 8010eba:	9303      	str	r3, [sp, #12]
 8010ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ebe:	4433      	add	r3, r6
 8010ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ec2:	e768      	b.n	8010d96 <_svfiprintf_r+0x4e>
 8010ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ec8:	460c      	mov	r4, r1
 8010eca:	2001      	movs	r0, #1
 8010ecc:	e7a6      	b.n	8010e1c <_svfiprintf_r+0xd4>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	3401      	adds	r4, #1
 8010ed2:	9305      	str	r3, [sp, #20]
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	f04f 0c0a 	mov.w	ip, #10
 8010eda:	4620      	mov	r0, r4
 8010edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ee0:	3a30      	subs	r2, #48	; 0x30
 8010ee2:	2a09      	cmp	r2, #9
 8010ee4:	d903      	bls.n	8010eee <_svfiprintf_r+0x1a6>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d0c6      	beq.n	8010e78 <_svfiprintf_r+0x130>
 8010eea:	9105      	str	r1, [sp, #20]
 8010eec:	e7c4      	b.n	8010e78 <_svfiprintf_r+0x130>
 8010eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e7f0      	b.n	8010eda <_svfiprintf_r+0x192>
 8010ef8:	ab03      	add	r3, sp, #12
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	462a      	mov	r2, r5
 8010efe:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <_svfiprintf_r+0x1f4>)
 8010f00:	a904      	add	r1, sp, #16
 8010f02:	4638      	mov	r0, r7
 8010f04:	f7fc fca4 	bl	800d850 <_printf_float>
 8010f08:	1c42      	adds	r2, r0, #1
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	d1d6      	bne.n	8010ebc <_svfiprintf_r+0x174>
 8010f0e:	89ab      	ldrh	r3, [r5, #12]
 8010f10:	065b      	lsls	r3, r3, #25
 8010f12:	f53f af2d 	bmi.w	8010d70 <_svfiprintf_r+0x28>
 8010f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f18:	b01d      	add	sp, #116	; 0x74
 8010f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1e:	ab03      	add	r3, sp, #12
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	462a      	mov	r2, r5
 8010f24:	4b05      	ldr	r3, [pc, #20]	; (8010f3c <_svfiprintf_r+0x1f4>)
 8010f26:	a904      	add	r1, sp, #16
 8010f28:	4638      	mov	r0, r7
 8010f2a:	f7fc ff35 	bl	800dd98 <_printf_i>
 8010f2e:	e7eb      	b.n	8010f08 <_svfiprintf_r+0x1c0>
 8010f30:	08012d29 	.word	0x08012d29
 8010f34:	08012d33 	.word	0x08012d33
 8010f38:	0800d851 	.word	0x0800d851
 8010f3c:	08010c95 	.word	0x08010c95
 8010f40:	08012d2f 	.word	0x08012d2f

08010f44 <_sungetc_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	1c4b      	adds	r3, r1, #1
 8010f48:	4614      	mov	r4, r2
 8010f4a:	d103      	bne.n	8010f54 <_sungetc_r+0x10>
 8010f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8010f50:	4628      	mov	r0, r5
 8010f52:	bd38      	pop	{r3, r4, r5, pc}
 8010f54:	8993      	ldrh	r3, [r2, #12]
 8010f56:	f023 0320 	bic.w	r3, r3, #32
 8010f5a:	8193      	strh	r3, [r2, #12]
 8010f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f5e:	6852      	ldr	r2, [r2, #4]
 8010f60:	b2cd      	uxtb	r5, r1
 8010f62:	b18b      	cbz	r3, 8010f88 <_sungetc_r+0x44>
 8010f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f66:	4293      	cmp	r3, r2
 8010f68:	dd08      	ble.n	8010f7c <_sungetc_r+0x38>
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	1e5a      	subs	r2, r3, #1
 8010f6e:	6022      	str	r2, [r4, #0]
 8010f70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010f74:	6863      	ldr	r3, [r4, #4]
 8010f76:	3301      	adds	r3, #1
 8010f78:	6063      	str	r3, [r4, #4]
 8010f7a:	e7e9      	b.n	8010f50 <_sungetc_r+0xc>
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	f000 fbe8 	bl	8011752 <__submore>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d0f1      	beq.n	8010f6a <_sungetc_r+0x26>
 8010f86:	e7e1      	b.n	8010f4c <_sungetc_r+0x8>
 8010f88:	6921      	ldr	r1, [r4, #16]
 8010f8a:	6823      	ldr	r3, [r4, #0]
 8010f8c:	b151      	cbz	r1, 8010fa4 <_sungetc_r+0x60>
 8010f8e:	4299      	cmp	r1, r3
 8010f90:	d208      	bcs.n	8010fa4 <_sungetc_r+0x60>
 8010f92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010f96:	42a9      	cmp	r1, r5
 8010f98:	d104      	bne.n	8010fa4 <_sungetc_r+0x60>
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	3201      	adds	r2, #1
 8010f9e:	6023      	str	r3, [r4, #0]
 8010fa0:	6062      	str	r2, [r4, #4]
 8010fa2:	e7d5      	b.n	8010f50 <_sungetc_r+0xc>
 8010fa4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fac:	6363      	str	r3, [r4, #52]	; 0x34
 8010fae:	2303      	movs	r3, #3
 8010fb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8010fb2:	4623      	mov	r3, r4
 8010fb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010fb8:	6023      	str	r3, [r4, #0]
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e7dc      	b.n	8010f78 <_sungetc_r+0x34>

08010fbe <__ssrefill_r>:
 8010fbe:	b510      	push	{r4, lr}
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010fc4:	b169      	cbz	r1, 8010fe2 <__ssrefill_r+0x24>
 8010fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fca:	4299      	cmp	r1, r3
 8010fcc:	d001      	beq.n	8010fd2 <__ssrefill_r+0x14>
 8010fce:	f7fe fac9 	bl	800f564 <_free_r>
 8010fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010fd4:	6063      	str	r3, [r4, #4]
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8010fda:	b113      	cbz	r3, 8010fe2 <__ssrefill_r+0x24>
 8010fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010fde:	6023      	str	r3, [r4, #0]
 8010fe0:	bd10      	pop	{r4, pc}
 8010fe2:	6923      	ldr	r3, [r4, #16]
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	6063      	str	r3, [r4, #4]
 8010fea:	89a3      	ldrh	r3, [r4, #12]
 8010fec:	f043 0320 	orr.w	r3, r3, #32
 8010ff0:	81a3      	strh	r3, [r4, #12]
 8010ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ff6:	e7f3      	b.n	8010fe0 <__ssrefill_r+0x22>

08010ff8 <__ssvfiscanf_r>:
 8010ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ffc:	460c      	mov	r4, r1
 8010ffe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011002:	2100      	movs	r1, #0
 8011004:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011008:	49a6      	ldr	r1, [pc, #664]	; (80112a4 <__ssvfiscanf_r+0x2ac>)
 801100a:	91a0      	str	r1, [sp, #640]	; 0x280
 801100c:	f10d 0804 	add.w	r8, sp, #4
 8011010:	49a5      	ldr	r1, [pc, #660]	; (80112a8 <__ssvfiscanf_r+0x2b0>)
 8011012:	4fa6      	ldr	r7, [pc, #664]	; (80112ac <__ssvfiscanf_r+0x2b4>)
 8011014:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80112b0 <__ssvfiscanf_r+0x2b8>
 8011018:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801101c:	4606      	mov	r6, r0
 801101e:	91a1      	str	r1, [sp, #644]	; 0x284
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	7813      	ldrb	r3, [r2, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 815a 	beq.w	80112de <__ssvfiscanf_r+0x2e6>
 801102a:	5cf9      	ldrb	r1, [r7, r3]
 801102c:	f011 0108 	ands.w	r1, r1, #8
 8011030:	f102 0501 	add.w	r5, r2, #1
 8011034:	d019      	beq.n	801106a <__ssvfiscanf_r+0x72>
 8011036:	6863      	ldr	r3, [r4, #4]
 8011038:	2b00      	cmp	r3, #0
 801103a:	dd0f      	ble.n	801105c <__ssvfiscanf_r+0x64>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	781a      	ldrb	r2, [r3, #0]
 8011040:	5cba      	ldrb	r2, [r7, r2]
 8011042:	0712      	lsls	r2, r2, #28
 8011044:	d401      	bmi.n	801104a <__ssvfiscanf_r+0x52>
 8011046:	462a      	mov	r2, r5
 8011048:	e7eb      	b.n	8011022 <__ssvfiscanf_r+0x2a>
 801104a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801104c:	3201      	adds	r2, #1
 801104e:	9245      	str	r2, [sp, #276]	; 0x114
 8011050:	6862      	ldr	r2, [r4, #4]
 8011052:	3301      	adds	r3, #1
 8011054:	3a01      	subs	r2, #1
 8011056:	6062      	str	r2, [r4, #4]
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	e7ec      	b.n	8011036 <__ssvfiscanf_r+0x3e>
 801105c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801105e:	4621      	mov	r1, r4
 8011060:	4630      	mov	r0, r6
 8011062:	4798      	blx	r3
 8011064:	2800      	cmp	r0, #0
 8011066:	d0e9      	beq.n	801103c <__ssvfiscanf_r+0x44>
 8011068:	e7ed      	b.n	8011046 <__ssvfiscanf_r+0x4e>
 801106a:	2b25      	cmp	r3, #37	; 0x25
 801106c:	d012      	beq.n	8011094 <__ssvfiscanf_r+0x9c>
 801106e:	469a      	mov	sl, r3
 8011070:	6863      	ldr	r3, [r4, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	f340 8091 	ble.w	801119a <__ssvfiscanf_r+0x1a2>
 8011078:	6822      	ldr	r2, [r4, #0]
 801107a:	7813      	ldrb	r3, [r2, #0]
 801107c:	4553      	cmp	r3, sl
 801107e:	f040 812e 	bne.w	80112de <__ssvfiscanf_r+0x2e6>
 8011082:	6863      	ldr	r3, [r4, #4]
 8011084:	3b01      	subs	r3, #1
 8011086:	6063      	str	r3, [r4, #4]
 8011088:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801108a:	3201      	adds	r2, #1
 801108c:	3301      	adds	r3, #1
 801108e:	6022      	str	r2, [r4, #0]
 8011090:	9345      	str	r3, [sp, #276]	; 0x114
 8011092:	e7d8      	b.n	8011046 <__ssvfiscanf_r+0x4e>
 8011094:	9141      	str	r1, [sp, #260]	; 0x104
 8011096:	9143      	str	r1, [sp, #268]	; 0x10c
 8011098:	7853      	ldrb	r3, [r2, #1]
 801109a:	2b2a      	cmp	r3, #42	; 0x2a
 801109c:	bf02      	ittt	eq
 801109e:	2310      	moveq	r3, #16
 80110a0:	1c95      	addeq	r5, r2, #2
 80110a2:	9341      	streq	r3, [sp, #260]	; 0x104
 80110a4:	220a      	movs	r2, #10
 80110a6:	46aa      	mov	sl, r5
 80110a8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80110ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80110b0:	2b09      	cmp	r3, #9
 80110b2:	d91c      	bls.n	80110ee <__ssvfiscanf_r+0xf6>
 80110b4:	487e      	ldr	r0, [pc, #504]	; (80112b0 <__ssvfiscanf_r+0x2b8>)
 80110b6:	2203      	movs	r2, #3
 80110b8:	f7ef f8aa 	bl	8000210 <memchr>
 80110bc:	b138      	cbz	r0, 80110ce <__ssvfiscanf_r+0xd6>
 80110be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80110c0:	eba0 0009 	sub.w	r0, r0, r9
 80110c4:	2301      	movs	r3, #1
 80110c6:	4083      	lsls	r3, r0
 80110c8:	4313      	orrs	r3, r2
 80110ca:	9341      	str	r3, [sp, #260]	; 0x104
 80110cc:	4655      	mov	r5, sl
 80110ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80110d2:	2b78      	cmp	r3, #120	; 0x78
 80110d4:	d806      	bhi.n	80110e4 <__ssvfiscanf_r+0xec>
 80110d6:	2b57      	cmp	r3, #87	; 0x57
 80110d8:	d810      	bhi.n	80110fc <__ssvfiscanf_r+0x104>
 80110da:	2b25      	cmp	r3, #37	; 0x25
 80110dc:	d0c7      	beq.n	801106e <__ssvfiscanf_r+0x76>
 80110de:	d857      	bhi.n	8011190 <__ssvfiscanf_r+0x198>
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d065      	beq.n	80111b0 <__ssvfiscanf_r+0x1b8>
 80110e4:	2303      	movs	r3, #3
 80110e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80110e8:	230a      	movs	r3, #10
 80110ea:	9342      	str	r3, [sp, #264]	; 0x108
 80110ec:	e076      	b.n	80111dc <__ssvfiscanf_r+0x1e4>
 80110ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80110f0:	fb02 1103 	mla	r1, r2, r3, r1
 80110f4:	3930      	subs	r1, #48	; 0x30
 80110f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80110f8:	4655      	mov	r5, sl
 80110fa:	e7d4      	b.n	80110a6 <__ssvfiscanf_r+0xae>
 80110fc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011100:	2a20      	cmp	r2, #32
 8011102:	d8ef      	bhi.n	80110e4 <__ssvfiscanf_r+0xec>
 8011104:	a101      	add	r1, pc, #4	; (adr r1, 801110c <__ssvfiscanf_r+0x114>)
 8011106:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801110a:	bf00      	nop
 801110c:	080111bf 	.word	0x080111bf
 8011110:	080110e5 	.word	0x080110e5
 8011114:	080110e5 	.word	0x080110e5
 8011118:	0801121d 	.word	0x0801121d
 801111c:	080110e5 	.word	0x080110e5
 8011120:	080110e5 	.word	0x080110e5
 8011124:	080110e5 	.word	0x080110e5
 8011128:	080110e5 	.word	0x080110e5
 801112c:	080110e5 	.word	0x080110e5
 8011130:	080110e5 	.word	0x080110e5
 8011134:	080110e5 	.word	0x080110e5
 8011138:	08011233 	.word	0x08011233
 801113c:	08011219 	.word	0x08011219
 8011140:	08011197 	.word	0x08011197
 8011144:	08011197 	.word	0x08011197
 8011148:	08011197 	.word	0x08011197
 801114c:	080110e5 	.word	0x080110e5
 8011150:	080111d5 	.word	0x080111d5
 8011154:	080110e5 	.word	0x080110e5
 8011158:	080110e5 	.word	0x080110e5
 801115c:	080110e5 	.word	0x080110e5
 8011160:	080110e5 	.word	0x080110e5
 8011164:	08011243 	.word	0x08011243
 8011168:	08011211 	.word	0x08011211
 801116c:	080111b7 	.word	0x080111b7
 8011170:	080110e5 	.word	0x080110e5
 8011174:	080110e5 	.word	0x080110e5
 8011178:	0801123f 	.word	0x0801123f
 801117c:	080110e5 	.word	0x080110e5
 8011180:	08011219 	.word	0x08011219
 8011184:	080110e5 	.word	0x080110e5
 8011188:	080110e5 	.word	0x080110e5
 801118c:	080111bf 	.word	0x080111bf
 8011190:	3b45      	subs	r3, #69	; 0x45
 8011192:	2b02      	cmp	r3, #2
 8011194:	d8a6      	bhi.n	80110e4 <__ssvfiscanf_r+0xec>
 8011196:	2305      	movs	r3, #5
 8011198:	e01f      	b.n	80111da <__ssvfiscanf_r+0x1e2>
 801119a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801119c:	4621      	mov	r1, r4
 801119e:	4630      	mov	r0, r6
 80111a0:	4798      	blx	r3
 80111a2:	2800      	cmp	r0, #0
 80111a4:	f43f af68 	beq.w	8011078 <__ssvfiscanf_r+0x80>
 80111a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80111aa:	2800      	cmp	r0, #0
 80111ac:	f040 808d 	bne.w	80112ca <__ssvfiscanf_r+0x2d2>
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295
 80111b4:	e08f      	b.n	80112d6 <__ssvfiscanf_r+0x2de>
 80111b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80111b8:	f042 0220 	orr.w	r2, r2, #32
 80111bc:	9241      	str	r2, [sp, #260]	; 0x104
 80111be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80111c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111c4:	9241      	str	r2, [sp, #260]	; 0x104
 80111c6:	2210      	movs	r2, #16
 80111c8:	2b6f      	cmp	r3, #111	; 0x6f
 80111ca:	9242      	str	r2, [sp, #264]	; 0x108
 80111cc:	bf34      	ite	cc
 80111ce:	2303      	movcc	r3, #3
 80111d0:	2304      	movcs	r3, #4
 80111d2:	e002      	b.n	80111da <__ssvfiscanf_r+0x1e2>
 80111d4:	2300      	movs	r3, #0
 80111d6:	9342      	str	r3, [sp, #264]	; 0x108
 80111d8:	2303      	movs	r3, #3
 80111da:	9347      	str	r3, [sp, #284]	; 0x11c
 80111dc:	6863      	ldr	r3, [r4, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	dd3d      	ble.n	801125e <__ssvfiscanf_r+0x266>
 80111e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80111e4:	0659      	lsls	r1, r3, #25
 80111e6:	d404      	bmi.n	80111f2 <__ssvfiscanf_r+0x1fa>
 80111e8:	6823      	ldr	r3, [r4, #0]
 80111ea:	781a      	ldrb	r2, [r3, #0]
 80111ec:	5cba      	ldrb	r2, [r7, r2]
 80111ee:	0712      	lsls	r2, r2, #28
 80111f0:	d43c      	bmi.n	801126c <__ssvfiscanf_r+0x274>
 80111f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	dc4b      	bgt.n	8011290 <__ssvfiscanf_r+0x298>
 80111f8:	466b      	mov	r3, sp
 80111fa:	4622      	mov	r2, r4
 80111fc:	a941      	add	r1, sp, #260	; 0x104
 80111fe:	4630      	mov	r0, r6
 8011200:	f000 f872 	bl	80112e8 <_scanf_chars>
 8011204:	2801      	cmp	r0, #1
 8011206:	d06a      	beq.n	80112de <__ssvfiscanf_r+0x2e6>
 8011208:	2802      	cmp	r0, #2
 801120a:	f47f af1c 	bne.w	8011046 <__ssvfiscanf_r+0x4e>
 801120e:	e7cb      	b.n	80111a8 <__ssvfiscanf_r+0x1b0>
 8011210:	2308      	movs	r3, #8
 8011212:	9342      	str	r3, [sp, #264]	; 0x108
 8011214:	2304      	movs	r3, #4
 8011216:	e7e0      	b.n	80111da <__ssvfiscanf_r+0x1e2>
 8011218:	220a      	movs	r2, #10
 801121a:	e7d5      	b.n	80111c8 <__ssvfiscanf_r+0x1d0>
 801121c:	4629      	mov	r1, r5
 801121e:	4640      	mov	r0, r8
 8011220:	f000 fa5e 	bl	80116e0 <__sccl>
 8011224:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801122a:	9341      	str	r3, [sp, #260]	; 0x104
 801122c:	4605      	mov	r5, r0
 801122e:	2301      	movs	r3, #1
 8011230:	e7d3      	b.n	80111da <__ssvfiscanf_r+0x1e2>
 8011232:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011238:	9341      	str	r3, [sp, #260]	; 0x104
 801123a:	2300      	movs	r3, #0
 801123c:	e7cd      	b.n	80111da <__ssvfiscanf_r+0x1e2>
 801123e:	2302      	movs	r3, #2
 8011240:	e7cb      	b.n	80111da <__ssvfiscanf_r+0x1e2>
 8011242:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011244:	06c3      	lsls	r3, r0, #27
 8011246:	f53f aefe 	bmi.w	8011046 <__ssvfiscanf_r+0x4e>
 801124a:	9b00      	ldr	r3, [sp, #0]
 801124c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801124e:	1d19      	adds	r1, r3, #4
 8011250:	9100      	str	r1, [sp, #0]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	07c0      	lsls	r0, r0, #31
 8011256:	bf4c      	ite	mi
 8011258:	801a      	strhmi	r2, [r3, #0]
 801125a:	601a      	strpl	r2, [r3, #0]
 801125c:	e6f3      	b.n	8011046 <__ssvfiscanf_r+0x4e>
 801125e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011260:	4621      	mov	r1, r4
 8011262:	4630      	mov	r0, r6
 8011264:	4798      	blx	r3
 8011266:	2800      	cmp	r0, #0
 8011268:	d0bb      	beq.n	80111e2 <__ssvfiscanf_r+0x1ea>
 801126a:	e79d      	b.n	80111a8 <__ssvfiscanf_r+0x1b0>
 801126c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801126e:	3201      	adds	r2, #1
 8011270:	9245      	str	r2, [sp, #276]	; 0x114
 8011272:	6862      	ldr	r2, [r4, #4]
 8011274:	3a01      	subs	r2, #1
 8011276:	2a00      	cmp	r2, #0
 8011278:	6062      	str	r2, [r4, #4]
 801127a:	dd02      	ble.n	8011282 <__ssvfiscanf_r+0x28a>
 801127c:	3301      	adds	r3, #1
 801127e:	6023      	str	r3, [r4, #0]
 8011280:	e7b2      	b.n	80111e8 <__ssvfiscanf_r+0x1f0>
 8011282:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011284:	4621      	mov	r1, r4
 8011286:	4630      	mov	r0, r6
 8011288:	4798      	blx	r3
 801128a:	2800      	cmp	r0, #0
 801128c:	d0ac      	beq.n	80111e8 <__ssvfiscanf_r+0x1f0>
 801128e:	e78b      	b.n	80111a8 <__ssvfiscanf_r+0x1b0>
 8011290:	2b04      	cmp	r3, #4
 8011292:	dc0f      	bgt.n	80112b4 <__ssvfiscanf_r+0x2bc>
 8011294:	466b      	mov	r3, sp
 8011296:	4622      	mov	r2, r4
 8011298:	a941      	add	r1, sp, #260	; 0x104
 801129a:	4630      	mov	r0, r6
 801129c:	f000 f87e 	bl	801139c <_scanf_i>
 80112a0:	e7b0      	b.n	8011204 <__ssvfiscanf_r+0x20c>
 80112a2:	bf00      	nop
 80112a4:	08010f45 	.word	0x08010f45
 80112a8:	08010fbf 	.word	0x08010fbf
 80112ac:	08012c29 	.word	0x08012c29
 80112b0:	08012d2f 	.word	0x08012d2f
 80112b4:	4b0b      	ldr	r3, [pc, #44]	; (80112e4 <__ssvfiscanf_r+0x2ec>)
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f43f aec5 	beq.w	8011046 <__ssvfiscanf_r+0x4e>
 80112bc:	466b      	mov	r3, sp
 80112be:	4622      	mov	r2, r4
 80112c0:	a941      	add	r1, sp, #260	; 0x104
 80112c2:	4630      	mov	r0, r6
 80112c4:	f7fc fe8a 	bl	800dfdc <_scanf_float>
 80112c8:	e79c      	b.n	8011204 <__ssvfiscanf_r+0x20c>
 80112ca:	89a3      	ldrh	r3, [r4, #12]
 80112cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80112d0:	bf18      	it	ne
 80112d2:	f04f 30ff 	movne.w	r0, #4294967295
 80112d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80112da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80112e0:	e7f9      	b.n	80112d6 <__ssvfiscanf_r+0x2de>
 80112e2:	bf00      	nop
 80112e4:	0800dfdd 	.word	0x0800dfdd

080112e8 <_scanf_chars>:
 80112e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112ec:	4615      	mov	r5, r2
 80112ee:	688a      	ldr	r2, [r1, #8]
 80112f0:	4680      	mov	r8, r0
 80112f2:	460c      	mov	r4, r1
 80112f4:	b932      	cbnz	r2, 8011304 <_scanf_chars+0x1c>
 80112f6:	698a      	ldr	r2, [r1, #24]
 80112f8:	2a00      	cmp	r2, #0
 80112fa:	bf0c      	ite	eq
 80112fc:	2201      	moveq	r2, #1
 80112fe:	f04f 32ff 	movne.w	r2, #4294967295
 8011302:	608a      	str	r2, [r1, #8]
 8011304:	6822      	ldr	r2, [r4, #0]
 8011306:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011398 <_scanf_chars+0xb0>
 801130a:	06d1      	lsls	r1, r2, #27
 801130c:	bf5f      	itttt	pl
 801130e:	681a      	ldrpl	r2, [r3, #0]
 8011310:	1d11      	addpl	r1, r2, #4
 8011312:	6019      	strpl	r1, [r3, #0]
 8011314:	6816      	ldrpl	r6, [r2, #0]
 8011316:	2700      	movs	r7, #0
 8011318:	69a0      	ldr	r0, [r4, #24]
 801131a:	b188      	cbz	r0, 8011340 <_scanf_chars+0x58>
 801131c:	2801      	cmp	r0, #1
 801131e:	d107      	bne.n	8011330 <_scanf_chars+0x48>
 8011320:	682a      	ldr	r2, [r5, #0]
 8011322:	7811      	ldrb	r1, [r2, #0]
 8011324:	6962      	ldr	r2, [r4, #20]
 8011326:	5c52      	ldrb	r2, [r2, r1]
 8011328:	b952      	cbnz	r2, 8011340 <_scanf_chars+0x58>
 801132a:	2f00      	cmp	r7, #0
 801132c:	d031      	beq.n	8011392 <_scanf_chars+0xaa>
 801132e:	e022      	b.n	8011376 <_scanf_chars+0x8e>
 8011330:	2802      	cmp	r0, #2
 8011332:	d120      	bne.n	8011376 <_scanf_chars+0x8e>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f819 3003 	ldrb.w	r3, [r9, r3]
 801133c:	071b      	lsls	r3, r3, #28
 801133e:	d41a      	bmi.n	8011376 <_scanf_chars+0x8e>
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	06da      	lsls	r2, r3, #27
 8011344:	bf5e      	ittt	pl
 8011346:	682b      	ldrpl	r3, [r5, #0]
 8011348:	781b      	ldrbpl	r3, [r3, #0]
 801134a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801134e:	682a      	ldr	r2, [r5, #0]
 8011350:	686b      	ldr	r3, [r5, #4]
 8011352:	3201      	adds	r2, #1
 8011354:	602a      	str	r2, [r5, #0]
 8011356:	68a2      	ldr	r2, [r4, #8]
 8011358:	3b01      	subs	r3, #1
 801135a:	3a01      	subs	r2, #1
 801135c:	606b      	str	r3, [r5, #4]
 801135e:	3701      	adds	r7, #1
 8011360:	60a2      	str	r2, [r4, #8]
 8011362:	b142      	cbz	r2, 8011376 <_scanf_chars+0x8e>
 8011364:	2b00      	cmp	r3, #0
 8011366:	dcd7      	bgt.n	8011318 <_scanf_chars+0x30>
 8011368:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801136c:	4629      	mov	r1, r5
 801136e:	4640      	mov	r0, r8
 8011370:	4798      	blx	r3
 8011372:	2800      	cmp	r0, #0
 8011374:	d0d0      	beq.n	8011318 <_scanf_chars+0x30>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	f013 0310 	ands.w	r3, r3, #16
 801137c:	d105      	bne.n	801138a <_scanf_chars+0xa2>
 801137e:	68e2      	ldr	r2, [r4, #12]
 8011380:	3201      	adds	r2, #1
 8011382:	60e2      	str	r2, [r4, #12]
 8011384:	69a2      	ldr	r2, [r4, #24]
 8011386:	b102      	cbz	r2, 801138a <_scanf_chars+0xa2>
 8011388:	7033      	strb	r3, [r6, #0]
 801138a:	6923      	ldr	r3, [r4, #16]
 801138c:	443b      	add	r3, r7
 801138e:	6123      	str	r3, [r4, #16]
 8011390:	2000      	movs	r0, #0
 8011392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011396:	bf00      	nop
 8011398:	08012c29 	.word	0x08012c29

0801139c <_scanf_i>:
 801139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a0:	4698      	mov	r8, r3
 80113a2:	4b74      	ldr	r3, [pc, #464]	; (8011574 <_scanf_i+0x1d8>)
 80113a4:	460c      	mov	r4, r1
 80113a6:	4682      	mov	sl, r0
 80113a8:	4616      	mov	r6, r2
 80113aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80113ae:	b087      	sub	sp, #28
 80113b0:	ab03      	add	r3, sp, #12
 80113b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80113b6:	4b70      	ldr	r3, [pc, #448]	; (8011578 <_scanf_i+0x1dc>)
 80113b8:	69a1      	ldr	r1, [r4, #24]
 80113ba:	4a70      	ldr	r2, [pc, #448]	; (801157c <_scanf_i+0x1e0>)
 80113bc:	2903      	cmp	r1, #3
 80113be:	bf18      	it	ne
 80113c0:	461a      	movne	r2, r3
 80113c2:	68a3      	ldr	r3, [r4, #8]
 80113c4:	9201      	str	r2, [sp, #4]
 80113c6:	1e5a      	subs	r2, r3, #1
 80113c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80113cc:	bf88      	it	hi
 80113ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80113d2:	4627      	mov	r7, r4
 80113d4:	bf82      	ittt	hi
 80113d6:	eb03 0905 	addhi.w	r9, r3, r5
 80113da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80113de:	60a3      	strhi	r3, [r4, #8]
 80113e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80113e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80113e8:	bf98      	it	ls
 80113ea:	f04f 0900 	movls.w	r9, #0
 80113ee:	6023      	str	r3, [r4, #0]
 80113f0:	463d      	mov	r5, r7
 80113f2:	f04f 0b00 	mov.w	fp, #0
 80113f6:	6831      	ldr	r1, [r6, #0]
 80113f8:	ab03      	add	r3, sp, #12
 80113fa:	7809      	ldrb	r1, [r1, #0]
 80113fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011400:	2202      	movs	r2, #2
 8011402:	f7ee ff05 	bl	8000210 <memchr>
 8011406:	b328      	cbz	r0, 8011454 <_scanf_i+0xb8>
 8011408:	f1bb 0f01 	cmp.w	fp, #1
 801140c:	d159      	bne.n	80114c2 <_scanf_i+0x126>
 801140e:	6862      	ldr	r2, [r4, #4]
 8011410:	b92a      	cbnz	r2, 801141e <_scanf_i+0x82>
 8011412:	6822      	ldr	r2, [r4, #0]
 8011414:	2308      	movs	r3, #8
 8011416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801141a:	6063      	str	r3, [r4, #4]
 801141c:	6022      	str	r2, [r4, #0]
 801141e:	6822      	ldr	r2, [r4, #0]
 8011420:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011424:	6022      	str	r2, [r4, #0]
 8011426:	68a2      	ldr	r2, [r4, #8]
 8011428:	1e51      	subs	r1, r2, #1
 801142a:	60a1      	str	r1, [r4, #8]
 801142c:	b192      	cbz	r2, 8011454 <_scanf_i+0xb8>
 801142e:	6832      	ldr	r2, [r6, #0]
 8011430:	1c51      	adds	r1, r2, #1
 8011432:	6031      	str	r1, [r6, #0]
 8011434:	7812      	ldrb	r2, [r2, #0]
 8011436:	f805 2b01 	strb.w	r2, [r5], #1
 801143a:	6872      	ldr	r2, [r6, #4]
 801143c:	3a01      	subs	r2, #1
 801143e:	2a00      	cmp	r2, #0
 8011440:	6072      	str	r2, [r6, #4]
 8011442:	dc07      	bgt.n	8011454 <_scanf_i+0xb8>
 8011444:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011448:	4631      	mov	r1, r6
 801144a:	4650      	mov	r0, sl
 801144c:	4790      	blx	r2
 801144e:	2800      	cmp	r0, #0
 8011450:	f040 8085 	bne.w	801155e <_scanf_i+0x1c2>
 8011454:	f10b 0b01 	add.w	fp, fp, #1
 8011458:	f1bb 0f03 	cmp.w	fp, #3
 801145c:	d1cb      	bne.n	80113f6 <_scanf_i+0x5a>
 801145e:	6863      	ldr	r3, [r4, #4]
 8011460:	b90b      	cbnz	r3, 8011466 <_scanf_i+0xca>
 8011462:	230a      	movs	r3, #10
 8011464:	6063      	str	r3, [r4, #4]
 8011466:	6863      	ldr	r3, [r4, #4]
 8011468:	4945      	ldr	r1, [pc, #276]	; (8011580 <_scanf_i+0x1e4>)
 801146a:	6960      	ldr	r0, [r4, #20]
 801146c:	1ac9      	subs	r1, r1, r3
 801146e:	f000 f937 	bl	80116e0 <__sccl>
 8011472:	f04f 0b00 	mov.w	fp, #0
 8011476:	68a3      	ldr	r3, [r4, #8]
 8011478:	6822      	ldr	r2, [r4, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d03d      	beq.n	80114fa <_scanf_i+0x15e>
 801147e:	6831      	ldr	r1, [r6, #0]
 8011480:	6960      	ldr	r0, [r4, #20]
 8011482:	f891 c000 	ldrb.w	ip, [r1]
 8011486:	f810 000c 	ldrb.w	r0, [r0, ip]
 801148a:	2800      	cmp	r0, #0
 801148c:	d035      	beq.n	80114fa <_scanf_i+0x15e>
 801148e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011492:	d124      	bne.n	80114de <_scanf_i+0x142>
 8011494:	0510      	lsls	r0, r2, #20
 8011496:	d522      	bpl.n	80114de <_scanf_i+0x142>
 8011498:	f10b 0b01 	add.w	fp, fp, #1
 801149c:	f1b9 0f00 	cmp.w	r9, #0
 80114a0:	d003      	beq.n	80114aa <_scanf_i+0x10e>
 80114a2:	3301      	adds	r3, #1
 80114a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80114a8:	60a3      	str	r3, [r4, #8]
 80114aa:	6873      	ldr	r3, [r6, #4]
 80114ac:	3b01      	subs	r3, #1
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	6073      	str	r3, [r6, #4]
 80114b2:	dd1b      	ble.n	80114ec <_scanf_i+0x150>
 80114b4:	6833      	ldr	r3, [r6, #0]
 80114b6:	3301      	adds	r3, #1
 80114b8:	6033      	str	r3, [r6, #0]
 80114ba:	68a3      	ldr	r3, [r4, #8]
 80114bc:	3b01      	subs	r3, #1
 80114be:	60a3      	str	r3, [r4, #8]
 80114c0:	e7d9      	b.n	8011476 <_scanf_i+0xda>
 80114c2:	f1bb 0f02 	cmp.w	fp, #2
 80114c6:	d1ae      	bne.n	8011426 <_scanf_i+0x8a>
 80114c8:	6822      	ldr	r2, [r4, #0]
 80114ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80114ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80114d2:	d1bf      	bne.n	8011454 <_scanf_i+0xb8>
 80114d4:	2310      	movs	r3, #16
 80114d6:	6063      	str	r3, [r4, #4]
 80114d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80114dc:	e7a2      	b.n	8011424 <_scanf_i+0x88>
 80114de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80114e2:	6022      	str	r2, [r4, #0]
 80114e4:	780b      	ldrb	r3, [r1, #0]
 80114e6:	f805 3b01 	strb.w	r3, [r5], #1
 80114ea:	e7de      	b.n	80114aa <_scanf_i+0x10e>
 80114ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80114f0:	4631      	mov	r1, r6
 80114f2:	4650      	mov	r0, sl
 80114f4:	4798      	blx	r3
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d0df      	beq.n	80114ba <_scanf_i+0x11e>
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	05d9      	lsls	r1, r3, #23
 80114fe:	d50d      	bpl.n	801151c <_scanf_i+0x180>
 8011500:	42bd      	cmp	r5, r7
 8011502:	d909      	bls.n	8011518 <_scanf_i+0x17c>
 8011504:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011508:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801150c:	4632      	mov	r2, r6
 801150e:	4650      	mov	r0, sl
 8011510:	4798      	blx	r3
 8011512:	f105 39ff 	add.w	r9, r5, #4294967295
 8011516:	464d      	mov	r5, r9
 8011518:	42bd      	cmp	r5, r7
 801151a:	d028      	beq.n	801156e <_scanf_i+0x1d2>
 801151c:	6822      	ldr	r2, [r4, #0]
 801151e:	f012 0210 	ands.w	r2, r2, #16
 8011522:	d113      	bne.n	801154c <_scanf_i+0x1b0>
 8011524:	702a      	strb	r2, [r5, #0]
 8011526:	6863      	ldr	r3, [r4, #4]
 8011528:	9e01      	ldr	r6, [sp, #4]
 801152a:	4639      	mov	r1, r7
 801152c:	4650      	mov	r0, sl
 801152e:	47b0      	blx	r6
 8011530:	f8d8 3000 	ldr.w	r3, [r8]
 8011534:	6821      	ldr	r1, [r4, #0]
 8011536:	1d1a      	adds	r2, r3, #4
 8011538:	f8c8 2000 	str.w	r2, [r8]
 801153c:	f011 0f20 	tst.w	r1, #32
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	d00f      	beq.n	8011564 <_scanf_i+0x1c8>
 8011544:	6018      	str	r0, [r3, #0]
 8011546:	68e3      	ldr	r3, [r4, #12]
 8011548:	3301      	adds	r3, #1
 801154a:	60e3      	str	r3, [r4, #12]
 801154c:	6923      	ldr	r3, [r4, #16]
 801154e:	1bed      	subs	r5, r5, r7
 8011550:	445d      	add	r5, fp
 8011552:	442b      	add	r3, r5
 8011554:	6123      	str	r3, [r4, #16]
 8011556:	2000      	movs	r0, #0
 8011558:	b007      	add	sp, #28
 801155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801155e:	f04f 0b00 	mov.w	fp, #0
 8011562:	e7ca      	b.n	80114fa <_scanf_i+0x15e>
 8011564:	07ca      	lsls	r2, r1, #31
 8011566:	bf4c      	ite	mi
 8011568:	8018      	strhmi	r0, [r3, #0]
 801156a:	6018      	strpl	r0, [r3, #0]
 801156c:	e7eb      	b.n	8011546 <_scanf_i+0x1aa>
 801156e:	2001      	movs	r0, #1
 8011570:	e7f2      	b.n	8011558 <_scanf_i+0x1bc>
 8011572:	bf00      	nop
 8011574:	0801287c 	.word	0x0801287c
 8011578:	08012081 	.word	0x08012081
 801157c:	08010c91 	.word	0x08010c91
 8011580:	08012d4a 	.word	0x08012d4a

08011584 <__sflush_r>:
 8011584:	898a      	ldrh	r2, [r1, #12]
 8011586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158a:	4605      	mov	r5, r0
 801158c:	0710      	lsls	r0, r2, #28
 801158e:	460c      	mov	r4, r1
 8011590:	d458      	bmi.n	8011644 <__sflush_r+0xc0>
 8011592:	684b      	ldr	r3, [r1, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	dc05      	bgt.n	80115a4 <__sflush_r+0x20>
 8011598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801159a:	2b00      	cmp	r3, #0
 801159c:	dc02      	bgt.n	80115a4 <__sflush_r+0x20>
 801159e:	2000      	movs	r0, #0
 80115a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115a6:	2e00      	cmp	r6, #0
 80115a8:	d0f9      	beq.n	801159e <__sflush_r+0x1a>
 80115aa:	2300      	movs	r3, #0
 80115ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115b0:	682f      	ldr	r7, [r5, #0]
 80115b2:	6a21      	ldr	r1, [r4, #32]
 80115b4:	602b      	str	r3, [r5, #0]
 80115b6:	d032      	beq.n	801161e <__sflush_r+0x9a>
 80115b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115ba:	89a3      	ldrh	r3, [r4, #12]
 80115bc:	075a      	lsls	r2, r3, #29
 80115be:	d505      	bpl.n	80115cc <__sflush_r+0x48>
 80115c0:	6863      	ldr	r3, [r4, #4]
 80115c2:	1ac0      	subs	r0, r0, r3
 80115c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115c6:	b10b      	cbz	r3, 80115cc <__sflush_r+0x48>
 80115c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115ca:	1ac0      	subs	r0, r0, r3
 80115cc:	2300      	movs	r3, #0
 80115ce:	4602      	mov	r2, r0
 80115d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115d2:	6a21      	ldr	r1, [r4, #32]
 80115d4:	4628      	mov	r0, r5
 80115d6:	47b0      	blx	r6
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	89a3      	ldrh	r3, [r4, #12]
 80115dc:	d106      	bne.n	80115ec <__sflush_r+0x68>
 80115de:	6829      	ldr	r1, [r5, #0]
 80115e0:	291d      	cmp	r1, #29
 80115e2:	d82b      	bhi.n	801163c <__sflush_r+0xb8>
 80115e4:	4a29      	ldr	r2, [pc, #164]	; (801168c <__sflush_r+0x108>)
 80115e6:	410a      	asrs	r2, r1
 80115e8:	07d6      	lsls	r6, r2, #31
 80115ea:	d427      	bmi.n	801163c <__sflush_r+0xb8>
 80115ec:	2200      	movs	r2, #0
 80115ee:	6062      	str	r2, [r4, #4]
 80115f0:	04d9      	lsls	r1, r3, #19
 80115f2:	6922      	ldr	r2, [r4, #16]
 80115f4:	6022      	str	r2, [r4, #0]
 80115f6:	d504      	bpl.n	8011602 <__sflush_r+0x7e>
 80115f8:	1c42      	adds	r2, r0, #1
 80115fa:	d101      	bne.n	8011600 <__sflush_r+0x7c>
 80115fc:	682b      	ldr	r3, [r5, #0]
 80115fe:	b903      	cbnz	r3, 8011602 <__sflush_r+0x7e>
 8011600:	6560      	str	r0, [r4, #84]	; 0x54
 8011602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011604:	602f      	str	r7, [r5, #0]
 8011606:	2900      	cmp	r1, #0
 8011608:	d0c9      	beq.n	801159e <__sflush_r+0x1a>
 801160a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801160e:	4299      	cmp	r1, r3
 8011610:	d002      	beq.n	8011618 <__sflush_r+0x94>
 8011612:	4628      	mov	r0, r5
 8011614:	f7fd ffa6 	bl	800f564 <_free_r>
 8011618:	2000      	movs	r0, #0
 801161a:	6360      	str	r0, [r4, #52]	; 0x34
 801161c:	e7c0      	b.n	80115a0 <__sflush_r+0x1c>
 801161e:	2301      	movs	r3, #1
 8011620:	4628      	mov	r0, r5
 8011622:	47b0      	blx	r6
 8011624:	1c41      	adds	r1, r0, #1
 8011626:	d1c8      	bne.n	80115ba <__sflush_r+0x36>
 8011628:	682b      	ldr	r3, [r5, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d0c5      	beq.n	80115ba <__sflush_r+0x36>
 801162e:	2b1d      	cmp	r3, #29
 8011630:	d001      	beq.n	8011636 <__sflush_r+0xb2>
 8011632:	2b16      	cmp	r3, #22
 8011634:	d101      	bne.n	801163a <__sflush_r+0xb6>
 8011636:	602f      	str	r7, [r5, #0]
 8011638:	e7b1      	b.n	801159e <__sflush_r+0x1a>
 801163a:	89a3      	ldrh	r3, [r4, #12]
 801163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011640:	81a3      	strh	r3, [r4, #12]
 8011642:	e7ad      	b.n	80115a0 <__sflush_r+0x1c>
 8011644:	690f      	ldr	r7, [r1, #16]
 8011646:	2f00      	cmp	r7, #0
 8011648:	d0a9      	beq.n	801159e <__sflush_r+0x1a>
 801164a:	0793      	lsls	r3, r2, #30
 801164c:	680e      	ldr	r6, [r1, #0]
 801164e:	bf08      	it	eq
 8011650:	694b      	ldreq	r3, [r1, #20]
 8011652:	600f      	str	r7, [r1, #0]
 8011654:	bf18      	it	ne
 8011656:	2300      	movne	r3, #0
 8011658:	eba6 0807 	sub.w	r8, r6, r7
 801165c:	608b      	str	r3, [r1, #8]
 801165e:	f1b8 0f00 	cmp.w	r8, #0
 8011662:	dd9c      	ble.n	801159e <__sflush_r+0x1a>
 8011664:	6a21      	ldr	r1, [r4, #32]
 8011666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011668:	4643      	mov	r3, r8
 801166a:	463a      	mov	r2, r7
 801166c:	4628      	mov	r0, r5
 801166e:	47b0      	blx	r6
 8011670:	2800      	cmp	r0, #0
 8011672:	dc06      	bgt.n	8011682 <__sflush_r+0xfe>
 8011674:	89a3      	ldrh	r3, [r4, #12]
 8011676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801167a:	81a3      	strh	r3, [r4, #12]
 801167c:	f04f 30ff 	mov.w	r0, #4294967295
 8011680:	e78e      	b.n	80115a0 <__sflush_r+0x1c>
 8011682:	4407      	add	r7, r0
 8011684:	eba8 0800 	sub.w	r8, r8, r0
 8011688:	e7e9      	b.n	801165e <__sflush_r+0xda>
 801168a:	bf00      	nop
 801168c:	dfbffffe 	.word	0xdfbffffe

08011690 <_fflush_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	690b      	ldr	r3, [r1, #16]
 8011694:	4605      	mov	r5, r0
 8011696:	460c      	mov	r4, r1
 8011698:	b913      	cbnz	r3, 80116a0 <_fflush_r+0x10>
 801169a:	2500      	movs	r5, #0
 801169c:	4628      	mov	r0, r5
 801169e:	bd38      	pop	{r3, r4, r5, pc}
 80116a0:	b118      	cbz	r0, 80116aa <_fflush_r+0x1a>
 80116a2:	6a03      	ldr	r3, [r0, #32]
 80116a4:	b90b      	cbnz	r3, 80116aa <_fflush_r+0x1a>
 80116a6:	f7fc ff23 	bl	800e4f0 <__sinit>
 80116aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d0f3      	beq.n	801169a <_fflush_r+0xa>
 80116b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116b4:	07d0      	lsls	r0, r2, #31
 80116b6:	d404      	bmi.n	80116c2 <_fflush_r+0x32>
 80116b8:	0599      	lsls	r1, r3, #22
 80116ba:	d402      	bmi.n	80116c2 <_fflush_r+0x32>
 80116bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116be:	f7fd f8c1 	bl	800e844 <__retarget_lock_acquire_recursive>
 80116c2:	4628      	mov	r0, r5
 80116c4:	4621      	mov	r1, r4
 80116c6:	f7ff ff5d 	bl	8011584 <__sflush_r>
 80116ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116cc:	07da      	lsls	r2, r3, #31
 80116ce:	4605      	mov	r5, r0
 80116d0:	d4e4      	bmi.n	801169c <_fflush_r+0xc>
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	059b      	lsls	r3, r3, #22
 80116d6:	d4e1      	bmi.n	801169c <_fflush_r+0xc>
 80116d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116da:	f7fd f8b4 	bl	800e846 <__retarget_lock_release_recursive>
 80116de:	e7dd      	b.n	801169c <_fflush_r+0xc>

080116e0 <__sccl>:
 80116e0:	b570      	push	{r4, r5, r6, lr}
 80116e2:	780b      	ldrb	r3, [r1, #0]
 80116e4:	4604      	mov	r4, r0
 80116e6:	2b5e      	cmp	r3, #94	; 0x5e
 80116e8:	bf0b      	itete	eq
 80116ea:	784b      	ldrbeq	r3, [r1, #1]
 80116ec:	1c4a      	addne	r2, r1, #1
 80116ee:	1c8a      	addeq	r2, r1, #2
 80116f0:	2100      	movne	r1, #0
 80116f2:	bf08      	it	eq
 80116f4:	2101      	moveq	r1, #1
 80116f6:	3801      	subs	r0, #1
 80116f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80116fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011700:	42a8      	cmp	r0, r5
 8011702:	d1fb      	bne.n	80116fc <__sccl+0x1c>
 8011704:	b90b      	cbnz	r3, 801170a <__sccl+0x2a>
 8011706:	1e50      	subs	r0, r2, #1
 8011708:	bd70      	pop	{r4, r5, r6, pc}
 801170a:	f081 0101 	eor.w	r1, r1, #1
 801170e:	54e1      	strb	r1, [r4, r3]
 8011710:	4610      	mov	r0, r2
 8011712:	4602      	mov	r2, r0
 8011714:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011718:	2d2d      	cmp	r5, #45	; 0x2d
 801171a:	d005      	beq.n	8011728 <__sccl+0x48>
 801171c:	2d5d      	cmp	r5, #93	; 0x5d
 801171e:	d016      	beq.n	801174e <__sccl+0x6e>
 8011720:	2d00      	cmp	r5, #0
 8011722:	d0f1      	beq.n	8011708 <__sccl+0x28>
 8011724:	462b      	mov	r3, r5
 8011726:	e7f2      	b.n	801170e <__sccl+0x2e>
 8011728:	7846      	ldrb	r6, [r0, #1]
 801172a:	2e5d      	cmp	r6, #93	; 0x5d
 801172c:	d0fa      	beq.n	8011724 <__sccl+0x44>
 801172e:	42b3      	cmp	r3, r6
 8011730:	dcf8      	bgt.n	8011724 <__sccl+0x44>
 8011732:	3002      	adds	r0, #2
 8011734:	461a      	mov	r2, r3
 8011736:	3201      	adds	r2, #1
 8011738:	4296      	cmp	r6, r2
 801173a:	54a1      	strb	r1, [r4, r2]
 801173c:	dcfb      	bgt.n	8011736 <__sccl+0x56>
 801173e:	1af2      	subs	r2, r6, r3
 8011740:	3a01      	subs	r2, #1
 8011742:	1c5d      	adds	r5, r3, #1
 8011744:	42b3      	cmp	r3, r6
 8011746:	bfa8      	it	ge
 8011748:	2200      	movge	r2, #0
 801174a:	18ab      	adds	r3, r5, r2
 801174c:	e7e1      	b.n	8011712 <__sccl+0x32>
 801174e:	4610      	mov	r0, r2
 8011750:	e7da      	b.n	8011708 <__sccl+0x28>

08011752 <__submore>:
 8011752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011756:	460c      	mov	r4, r1
 8011758:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801175a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801175e:	4299      	cmp	r1, r3
 8011760:	d11d      	bne.n	801179e <__submore+0x4c>
 8011762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011766:	f7fb ff47 	bl	800d5f8 <_malloc_r>
 801176a:	b918      	cbnz	r0, 8011774 <__submore+0x22>
 801176c:	f04f 30ff 	mov.w	r0, #4294967295
 8011770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011778:	63a3      	str	r3, [r4, #56]	; 0x38
 801177a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801177e:	6360      	str	r0, [r4, #52]	; 0x34
 8011780:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011784:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011788:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801178c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011790:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011794:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011798:	6020      	str	r0, [r4, #0]
 801179a:	2000      	movs	r0, #0
 801179c:	e7e8      	b.n	8011770 <__submore+0x1e>
 801179e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80117a0:	0077      	lsls	r7, r6, #1
 80117a2:	463a      	mov	r2, r7
 80117a4:	f000 fbcb 	bl	8011f3e <_realloc_r>
 80117a8:	4605      	mov	r5, r0
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d0de      	beq.n	801176c <__submore+0x1a>
 80117ae:	eb00 0806 	add.w	r8, r0, r6
 80117b2:	4601      	mov	r1, r0
 80117b4:	4632      	mov	r2, r6
 80117b6:	4640      	mov	r0, r8
 80117b8:	f7fd f846 	bl	800e848 <memcpy>
 80117bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80117c0:	f8c4 8000 	str.w	r8, [r4]
 80117c4:	e7e9      	b.n	801179a <__submore+0x48>

080117c6 <memmove>:
 80117c6:	4288      	cmp	r0, r1
 80117c8:	b510      	push	{r4, lr}
 80117ca:	eb01 0402 	add.w	r4, r1, r2
 80117ce:	d902      	bls.n	80117d6 <memmove+0x10>
 80117d0:	4284      	cmp	r4, r0
 80117d2:	4623      	mov	r3, r4
 80117d4:	d807      	bhi.n	80117e6 <memmove+0x20>
 80117d6:	1e43      	subs	r3, r0, #1
 80117d8:	42a1      	cmp	r1, r4
 80117da:	d008      	beq.n	80117ee <memmove+0x28>
 80117dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117e4:	e7f8      	b.n	80117d8 <memmove+0x12>
 80117e6:	4402      	add	r2, r0
 80117e8:	4601      	mov	r1, r0
 80117ea:	428a      	cmp	r2, r1
 80117ec:	d100      	bne.n	80117f0 <memmove+0x2a>
 80117ee:	bd10      	pop	{r4, pc}
 80117f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117f8:	e7f7      	b.n	80117ea <memmove+0x24>

080117fa <strncmp>:
 80117fa:	b510      	push	{r4, lr}
 80117fc:	b16a      	cbz	r2, 801181a <strncmp+0x20>
 80117fe:	3901      	subs	r1, #1
 8011800:	1884      	adds	r4, r0, r2
 8011802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801180a:	429a      	cmp	r2, r3
 801180c:	d103      	bne.n	8011816 <strncmp+0x1c>
 801180e:	42a0      	cmp	r0, r4
 8011810:	d001      	beq.n	8011816 <strncmp+0x1c>
 8011812:	2a00      	cmp	r2, #0
 8011814:	d1f5      	bne.n	8011802 <strncmp+0x8>
 8011816:	1ad0      	subs	r0, r2, r3
 8011818:	bd10      	pop	{r4, pc}
 801181a:	4610      	mov	r0, r2
 801181c:	e7fc      	b.n	8011818 <strncmp+0x1e>
	...

08011820 <nan>:
 8011820:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011828 <nan+0x8>
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop
 8011828:	00000000 	.word	0x00000000
 801182c:	7ff80000 	.word	0x7ff80000

08011830 <__assert_func>:
 8011830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011832:	4614      	mov	r4, r2
 8011834:	461a      	mov	r2, r3
 8011836:	4b09      	ldr	r3, [pc, #36]	; (801185c <__assert_func+0x2c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4605      	mov	r5, r0
 801183c:	68d8      	ldr	r0, [r3, #12]
 801183e:	b14c      	cbz	r4, 8011854 <__assert_func+0x24>
 8011840:	4b07      	ldr	r3, [pc, #28]	; (8011860 <__assert_func+0x30>)
 8011842:	9100      	str	r1, [sp, #0]
 8011844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011848:	4906      	ldr	r1, [pc, #24]	; (8011864 <__assert_func+0x34>)
 801184a:	462b      	mov	r3, r5
 801184c:	f000 fc28 	bl	80120a0 <fiprintf>
 8011850:	f000 fc38 	bl	80120c4 <abort>
 8011854:	4b04      	ldr	r3, [pc, #16]	; (8011868 <__assert_func+0x38>)
 8011856:	461c      	mov	r4, r3
 8011858:	e7f3      	b.n	8011842 <__assert_func+0x12>
 801185a:	bf00      	nop
 801185c:	2000006c 	.word	0x2000006c
 8011860:	08012d5d 	.word	0x08012d5d
 8011864:	08012d6a 	.word	0x08012d6a
 8011868:	08012d98 	.word	0x08012d98

0801186c <rshift>:
 801186c:	6903      	ldr	r3, [r0, #16]
 801186e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011876:	ea4f 1261 	mov.w	r2, r1, asr #5
 801187a:	f100 0414 	add.w	r4, r0, #20
 801187e:	dd45      	ble.n	801190c <rshift+0xa0>
 8011880:	f011 011f 	ands.w	r1, r1, #31
 8011884:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011888:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801188c:	d10c      	bne.n	80118a8 <rshift+0x3c>
 801188e:	f100 0710 	add.w	r7, r0, #16
 8011892:	4629      	mov	r1, r5
 8011894:	42b1      	cmp	r1, r6
 8011896:	d334      	bcc.n	8011902 <rshift+0x96>
 8011898:	1a9b      	subs	r3, r3, r2
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	1eea      	subs	r2, r5, #3
 801189e:	4296      	cmp	r6, r2
 80118a0:	bf38      	it	cc
 80118a2:	2300      	movcc	r3, #0
 80118a4:	4423      	add	r3, r4
 80118a6:	e015      	b.n	80118d4 <rshift+0x68>
 80118a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80118ac:	f1c1 0820 	rsb	r8, r1, #32
 80118b0:	40cf      	lsrs	r7, r1
 80118b2:	f105 0e04 	add.w	lr, r5, #4
 80118b6:	46a1      	mov	r9, r4
 80118b8:	4576      	cmp	r6, lr
 80118ba:	46f4      	mov	ip, lr
 80118bc:	d815      	bhi.n	80118ea <rshift+0x7e>
 80118be:	1a9a      	subs	r2, r3, r2
 80118c0:	0092      	lsls	r2, r2, #2
 80118c2:	3a04      	subs	r2, #4
 80118c4:	3501      	adds	r5, #1
 80118c6:	42ae      	cmp	r6, r5
 80118c8:	bf38      	it	cc
 80118ca:	2200      	movcc	r2, #0
 80118cc:	18a3      	adds	r3, r4, r2
 80118ce:	50a7      	str	r7, [r4, r2]
 80118d0:	b107      	cbz	r7, 80118d4 <rshift+0x68>
 80118d2:	3304      	adds	r3, #4
 80118d4:	1b1a      	subs	r2, r3, r4
 80118d6:	42a3      	cmp	r3, r4
 80118d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80118dc:	bf08      	it	eq
 80118de:	2300      	moveq	r3, #0
 80118e0:	6102      	str	r2, [r0, #16]
 80118e2:	bf08      	it	eq
 80118e4:	6143      	streq	r3, [r0, #20]
 80118e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118ea:	f8dc c000 	ldr.w	ip, [ip]
 80118ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80118f2:	ea4c 0707 	orr.w	r7, ip, r7
 80118f6:	f849 7b04 	str.w	r7, [r9], #4
 80118fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118fe:	40cf      	lsrs	r7, r1
 8011900:	e7da      	b.n	80118b8 <rshift+0x4c>
 8011902:	f851 cb04 	ldr.w	ip, [r1], #4
 8011906:	f847 cf04 	str.w	ip, [r7, #4]!
 801190a:	e7c3      	b.n	8011894 <rshift+0x28>
 801190c:	4623      	mov	r3, r4
 801190e:	e7e1      	b.n	80118d4 <rshift+0x68>

08011910 <__hexdig_fun>:
 8011910:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011914:	2b09      	cmp	r3, #9
 8011916:	d802      	bhi.n	801191e <__hexdig_fun+0xe>
 8011918:	3820      	subs	r0, #32
 801191a:	b2c0      	uxtb	r0, r0
 801191c:	4770      	bx	lr
 801191e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011922:	2b05      	cmp	r3, #5
 8011924:	d801      	bhi.n	801192a <__hexdig_fun+0x1a>
 8011926:	3847      	subs	r0, #71	; 0x47
 8011928:	e7f7      	b.n	801191a <__hexdig_fun+0xa>
 801192a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801192e:	2b05      	cmp	r3, #5
 8011930:	d801      	bhi.n	8011936 <__hexdig_fun+0x26>
 8011932:	3827      	subs	r0, #39	; 0x27
 8011934:	e7f1      	b.n	801191a <__hexdig_fun+0xa>
 8011936:	2000      	movs	r0, #0
 8011938:	4770      	bx	lr
	...

0801193c <__gethex>:
 801193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011940:	4617      	mov	r7, r2
 8011942:	680a      	ldr	r2, [r1, #0]
 8011944:	b085      	sub	sp, #20
 8011946:	f102 0b02 	add.w	fp, r2, #2
 801194a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801194e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011952:	4681      	mov	r9, r0
 8011954:	468a      	mov	sl, r1
 8011956:	9302      	str	r3, [sp, #8]
 8011958:	32fe      	adds	r2, #254	; 0xfe
 801195a:	eb02 030b 	add.w	r3, r2, fp
 801195e:	46d8      	mov	r8, fp
 8011960:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011964:	9301      	str	r3, [sp, #4]
 8011966:	2830      	cmp	r0, #48	; 0x30
 8011968:	d0f7      	beq.n	801195a <__gethex+0x1e>
 801196a:	f7ff ffd1 	bl	8011910 <__hexdig_fun>
 801196e:	4604      	mov	r4, r0
 8011970:	2800      	cmp	r0, #0
 8011972:	d138      	bne.n	80119e6 <__gethex+0xaa>
 8011974:	49a7      	ldr	r1, [pc, #668]	; (8011c14 <__gethex+0x2d8>)
 8011976:	2201      	movs	r2, #1
 8011978:	4640      	mov	r0, r8
 801197a:	f7ff ff3e 	bl	80117fa <strncmp>
 801197e:	4606      	mov	r6, r0
 8011980:	2800      	cmp	r0, #0
 8011982:	d169      	bne.n	8011a58 <__gethex+0x11c>
 8011984:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011988:	465d      	mov	r5, fp
 801198a:	f7ff ffc1 	bl	8011910 <__hexdig_fun>
 801198e:	2800      	cmp	r0, #0
 8011990:	d064      	beq.n	8011a5c <__gethex+0x120>
 8011992:	465a      	mov	r2, fp
 8011994:	7810      	ldrb	r0, [r2, #0]
 8011996:	2830      	cmp	r0, #48	; 0x30
 8011998:	4690      	mov	r8, r2
 801199a:	f102 0201 	add.w	r2, r2, #1
 801199e:	d0f9      	beq.n	8011994 <__gethex+0x58>
 80119a0:	f7ff ffb6 	bl	8011910 <__hexdig_fun>
 80119a4:	2301      	movs	r3, #1
 80119a6:	fab0 f480 	clz	r4, r0
 80119aa:	0964      	lsrs	r4, r4, #5
 80119ac:	465e      	mov	r6, fp
 80119ae:	9301      	str	r3, [sp, #4]
 80119b0:	4642      	mov	r2, r8
 80119b2:	4615      	mov	r5, r2
 80119b4:	3201      	adds	r2, #1
 80119b6:	7828      	ldrb	r0, [r5, #0]
 80119b8:	f7ff ffaa 	bl	8011910 <__hexdig_fun>
 80119bc:	2800      	cmp	r0, #0
 80119be:	d1f8      	bne.n	80119b2 <__gethex+0x76>
 80119c0:	4994      	ldr	r1, [pc, #592]	; (8011c14 <__gethex+0x2d8>)
 80119c2:	2201      	movs	r2, #1
 80119c4:	4628      	mov	r0, r5
 80119c6:	f7ff ff18 	bl	80117fa <strncmp>
 80119ca:	b978      	cbnz	r0, 80119ec <__gethex+0xb0>
 80119cc:	b946      	cbnz	r6, 80119e0 <__gethex+0xa4>
 80119ce:	1c6e      	adds	r6, r5, #1
 80119d0:	4632      	mov	r2, r6
 80119d2:	4615      	mov	r5, r2
 80119d4:	3201      	adds	r2, #1
 80119d6:	7828      	ldrb	r0, [r5, #0]
 80119d8:	f7ff ff9a 	bl	8011910 <__hexdig_fun>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d1f8      	bne.n	80119d2 <__gethex+0x96>
 80119e0:	1b73      	subs	r3, r6, r5
 80119e2:	009e      	lsls	r6, r3, #2
 80119e4:	e004      	b.n	80119f0 <__gethex+0xb4>
 80119e6:	2400      	movs	r4, #0
 80119e8:	4626      	mov	r6, r4
 80119ea:	e7e1      	b.n	80119b0 <__gethex+0x74>
 80119ec:	2e00      	cmp	r6, #0
 80119ee:	d1f7      	bne.n	80119e0 <__gethex+0xa4>
 80119f0:	782b      	ldrb	r3, [r5, #0]
 80119f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80119f6:	2b50      	cmp	r3, #80	; 0x50
 80119f8:	d13d      	bne.n	8011a76 <__gethex+0x13a>
 80119fa:	786b      	ldrb	r3, [r5, #1]
 80119fc:	2b2b      	cmp	r3, #43	; 0x2b
 80119fe:	d02f      	beq.n	8011a60 <__gethex+0x124>
 8011a00:	2b2d      	cmp	r3, #45	; 0x2d
 8011a02:	d031      	beq.n	8011a68 <__gethex+0x12c>
 8011a04:	1c69      	adds	r1, r5, #1
 8011a06:	f04f 0b00 	mov.w	fp, #0
 8011a0a:	7808      	ldrb	r0, [r1, #0]
 8011a0c:	f7ff ff80 	bl	8011910 <__hexdig_fun>
 8011a10:	1e42      	subs	r2, r0, #1
 8011a12:	b2d2      	uxtb	r2, r2
 8011a14:	2a18      	cmp	r2, #24
 8011a16:	d82e      	bhi.n	8011a76 <__gethex+0x13a>
 8011a18:	f1a0 0210 	sub.w	r2, r0, #16
 8011a1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a20:	f7ff ff76 	bl	8011910 <__hexdig_fun>
 8011a24:	f100 3cff 	add.w	ip, r0, #4294967295
 8011a28:	fa5f fc8c 	uxtb.w	ip, ip
 8011a2c:	f1bc 0f18 	cmp.w	ip, #24
 8011a30:	d91d      	bls.n	8011a6e <__gethex+0x132>
 8011a32:	f1bb 0f00 	cmp.w	fp, #0
 8011a36:	d000      	beq.n	8011a3a <__gethex+0xfe>
 8011a38:	4252      	negs	r2, r2
 8011a3a:	4416      	add	r6, r2
 8011a3c:	f8ca 1000 	str.w	r1, [sl]
 8011a40:	b1dc      	cbz	r4, 8011a7a <__gethex+0x13e>
 8011a42:	9b01      	ldr	r3, [sp, #4]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	bf14      	ite	ne
 8011a48:	f04f 0800 	movne.w	r8, #0
 8011a4c:	f04f 0806 	moveq.w	r8, #6
 8011a50:	4640      	mov	r0, r8
 8011a52:	b005      	add	sp, #20
 8011a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a58:	4645      	mov	r5, r8
 8011a5a:	4626      	mov	r6, r4
 8011a5c:	2401      	movs	r4, #1
 8011a5e:	e7c7      	b.n	80119f0 <__gethex+0xb4>
 8011a60:	f04f 0b00 	mov.w	fp, #0
 8011a64:	1ca9      	adds	r1, r5, #2
 8011a66:	e7d0      	b.n	8011a0a <__gethex+0xce>
 8011a68:	f04f 0b01 	mov.w	fp, #1
 8011a6c:	e7fa      	b.n	8011a64 <__gethex+0x128>
 8011a6e:	230a      	movs	r3, #10
 8011a70:	fb03 0002 	mla	r0, r3, r2, r0
 8011a74:	e7d0      	b.n	8011a18 <__gethex+0xdc>
 8011a76:	4629      	mov	r1, r5
 8011a78:	e7e0      	b.n	8011a3c <__gethex+0x100>
 8011a7a:	eba5 0308 	sub.w	r3, r5, r8
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	4621      	mov	r1, r4
 8011a82:	2b07      	cmp	r3, #7
 8011a84:	dc0a      	bgt.n	8011a9c <__gethex+0x160>
 8011a86:	4648      	mov	r0, r9
 8011a88:	f7fd fdc0 	bl	800f60c <_Balloc>
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	b940      	cbnz	r0, 8011aa2 <__gethex+0x166>
 8011a90:	4b61      	ldr	r3, [pc, #388]	; (8011c18 <__gethex+0x2dc>)
 8011a92:	4602      	mov	r2, r0
 8011a94:	21e4      	movs	r1, #228	; 0xe4
 8011a96:	4861      	ldr	r0, [pc, #388]	; (8011c1c <__gethex+0x2e0>)
 8011a98:	f7ff feca 	bl	8011830 <__assert_func>
 8011a9c:	3101      	adds	r1, #1
 8011a9e:	105b      	asrs	r3, r3, #1
 8011aa0:	e7ef      	b.n	8011a82 <__gethex+0x146>
 8011aa2:	f100 0a14 	add.w	sl, r0, #20
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	495a      	ldr	r1, [pc, #360]	; (8011c14 <__gethex+0x2d8>)
 8011aaa:	f8cd a004 	str.w	sl, [sp, #4]
 8011aae:	469b      	mov	fp, r3
 8011ab0:	45a8      	cmp	r8, r5
 8011ab2:	d342      	bcc.n	8011b3a <__gethex+0x1fe>
 8011ab4:	9801      	ldr	r0, [sp, #4]
 8011ab6:	f840 bb04 	str.w	fp, [r0], #4
 8011aba:	eba0 000a 	sub.w	r0, r0, sl
 8011abe:	1080      	asrs	r0, r0, #2
 8011ac0:	6120      	str	r0, [r4, #16]
 8011ac2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011ac6:	4658      	mov	r0, fp
 8011ac8:	f7fd fe92 	bl	800f7f0 <__hi0bits>
 8011acc:	683d      	ldr	r5, [r7, #0]
 8011ace:	eba8 0000 	sub.w	r0, r8, r0
 8011ad2:	42a8      	cmp	r0, r5
 8011ad4:	dd59      	ble.n	8011b8a <__gethex+0x24e>
 8011ad6:	eba0 0805 	sub.w	r8, r0, r5
 8011ada:	4641      	mov	r1, r8
 8011adc:	4620      	mov	r0, r4
 8011ade:	f7fe fa21 	bl	800ff24 <__any_on>
 8011ae2:	4683      	mov	fp, r0
 8011ae4:	b1b8      	cbz	r0, 8011b16 <__gethex+0x1da>
 8011ae6:	f108 33ff 	add.w	r3, r8, #4294967295
 8011aea:	1159      	asrs	r1, r3, #5
 8011aec:	f003 021f 	and.w	r2, r3, #31
 8011af0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011af4:	f04f 0b01 	mov.w	fp, #1
 8011af8:	fa0b f202 	lsl.w	r2, fp, r2
 8011afc:	420a      	tst	r2, r1
 8011afe:	d00a      	beq.n	8011b16 <__gethex+0x1da>
 8011b00:	455b      	cmp	r3, fp
 8011b02:	dd06      	ble.n	8011b12 <__gethex+0x1d6>
 8011b04:	f1a8 0102 	sub.w	r1, r8, #2
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f7fe fa0b 	bl	800ff24 <__any_on>
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d138      	bne.n	8011b84 <__gethex+0x248>
 8011b12:	f04f 0b02 	mov.w	fp, #2
 8011b16:	4641      	mov	r1, r8
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f7ff fea7 	bl	801186c <rshift>
 8011b1e:	4446      	add	r6, r8
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	42b3      	cmp	r3, r6
 8011b24:	da41      	bge.n	8011baa <__gethex+0x26e>
 8011b26:	4621      	mov	r1, r4
 8011b28:	4648      	mov	r0, r9
 8011b2a:	f7fd fdaf 	bl	800f68c <_Bfree>
 8011b2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b30:	2300      	movs	r3, #0
 8011b32:	6013      	str	r3, [r2, #0]
 8011b34:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011b38:	e78a      	b.n	8011a50 <__gethex+0x114>
 8011b3a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011b3e:	2a2e      	cmp	r2, #46	; 0x2e
 8011b40:	d014      	beq.n	8011b6c <__gethex+0x230>
 8011b42:	2b20      	cmp	r3, #32
 8011b44:	d106      	bne.n	8011b54 <__gethex+0x218>
 8011b46:	9b01      	ldr	r3, [sp, #4]
 8011b48:	f843 bb04 	str.w	fp, [r3], #4
 8011b4c:	f04f 0b00 	mov.w	fp, #0
 8011b50:	9301      	str	r3, [sp, #4]
 8011b52:	465b      	mov	r3, fp
 8011b54:	7828      	ldrb	r0, [r5, #0]
 8011b56:	9303      	str	r3, [sp, #12]
 8011b58:	f7ff feda 	bl	8011910 <__hexdig_fun>
 8011b5c:	9b03      	ldr	r3, [sp, #12]
 8011b5e:	f000 000f 	and.w	r0, r0, #15
 8011b62:	4098      	lsls	r0, r3
 8011b64:	ea4b 0b00 	orr.w	fp, fp, r0
 8011b68:	3304      	adds	r3, #4
 8011b6a:	e7a1      	b.n	8011ab0 <__gethex+0x174>
 8011b6c:	45a8      	cmp	r8, r5
 8011b6e:	d8e8      	bhi.n	8011b42 <__gethex+0x206>
 8011b70:	2201      	movs	r2, #1
 8011b72:	4628      	mov	r0, r5
 8011b74:	9303      	str	r3, [sp, #12]
 8011b76:	f7ff fe40 	bl	80117fa <strncmp>
 8011b7a:	4926      	ldr	r1, [pc, #152]	; (8011c14 <__gethex+0x2d8>)
 8011b7c:	9b03      	ldr	r3, [sp, #12]
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d1df      	bne.n	8011b42 <__gethex+0x206>
 8011b82:	e795      	b.n	8011ab0 <__gethex+0x174>
 8011b84:	f04f 0b03 	mov.w	fp, #3
 8011b88:	e7c5      	b.n	8011b16 <__gethex+0x1da>
 8011b8a:	da0b      	bge.n	8011ba4 <__gethex+0x268>
 8011b8c:	eba5 0800 	sub.w	r8, r5, r0
 8011b90:	4621      	mov	r1, r4
 8011b92:	4642      	mov	r2, r8
 8011b94:	4648      	mov	r0, r9
 8011b96:	f7fd ff93 	bl	800fac0 <__lshift>
 8011b9a:	eba6 0608 	sub.w	r6, r6, r8
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	f100 0a14 	add.w	sl, r0, #20
 8011ba4:	f04f 0b00 	mov.w	fp, #0
 8011ba8:	e7ba      	b.n	8011b20 <__gethex+0x1e4>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	42b3      	cmp	r3, r6
 8011bae:	dd73      	ble.n	8011c98 <__gethex+0x35c>
 8011bb0:	1b9e      	subs	r6, r3, r6
 8011bb2:	42b5      	cmp	r5, r6
 8011bb4:	dc34      	bgt.n	8011c20 <__gethex+0x2e4>
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d023      	beq.n	8011c04 <__gethex+0x2c8>
 8011bbc:	2b03      	cmp	r3, #3
 8011bbe:	d025      	beq.n	8011c0c <__gethex+0x2d0>
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d115      	bne.n	8011bf0 <__gethex+0x2b4>
 8011bc4:	42b5      	cmp	r5, r6
 8011bc6:	d113      	bne.n	8011bf0 <__gethex+0x2b4>
 8011bc8:	2d01      	cmp	r5, #1
 8011bca:	d10b      	bne.n	8011be4 <__gethex+0x2a8>
 8011bcc:	9a02      	ldr	r2, [sp, #8]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6013      	str	r3, [r2, #0]
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	6123      	str	r3, [r4, #16]
 8011bd6:	f8ca 3000 	str.w	r3, [sl]
 8011bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bdc:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011be0:	601c      	str	r4, [r3, #0]
 8011be2:	e735      	b.n	8011a50 <__gethex+0x114>
 8011be4:	1e69      	subs	r1, r5, #1
 8011be6:	4620      	mov	r0, r4
 8011be8:	f7fe f99c 	bl	800ff24 <__any_on>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d1ed      	bne.n	8011bcc <__gethex+0x290>
 8011bf0:	4621      	mov	r1, r4
 8011bf2:	4648      	mov	r0, r9
 8011bf4:	f7fd fd4a 	bl	800f68c <_Bfree>
 8011bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	6013      	str	r3, [r2, #0]
 8011bfe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011c02:	e725      	b.n	8011a50 <__gethex+0x114>
 8011c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1f2      	bne.n	8011bf0 <__gethex+0x2b4>
 8011c0a:	e7df      	b.n	8011bcc <__gethex+0x290>
 8011c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1dc      	bne.n	8011bcc <__gethex+0x290>
 8011c12:	e7ed      	b.n	8011bf0 <__gethex+0x2b4>
 8011c14:	08012bd4 	.word	0x08012bd4
 8011c18:	08012a6b 	.word	0x08012a6b
 8011c1c:	08012d99 	.word	0x08012d99
 8011c20:	f106 38ff 	add.w	r8, r6, #4294967295
 8011c24:	f1bb 0f00 	cmp.w	fp, #0
 8011c28:	d133      	bne.n	8011c92 <__gethex+0x356>
 8011c2a:	f1b8 0f00 	cmp.w	r8, #0
 8011c2e:	d004      	beq.n	8011c3a <__gethex+0x2fe>
 8011c30:	4641      	mov	r1, r8
 8011c32:	4620      	mov	r0, r4
 8011c34:	f7fe f976 	bl	800ff24 <__any_on>
 8011c38:	4683      	mov	fp, r0
 8011c3a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011c44:	f008 081f 	and.w	r8, r8, #31
 8011c48:	fa03 f308 	lsl.w	r3, r3, r8
 8011c4c:	4213      	tst	r3, r2
 8011c4e:	4631      	mov	r1, r6
 8011c50:	4620      	mov	r0, r4
 8011c52:	bf18      	it	ne
 8011c54:	f04b 0b02 	orrne.w	fp, fp, #2
 8011c58:	1bad      	subs	r5, r5, r6
 8011c5a:	f7ff fe07 	bl	801186c <rshift>
 8011c5e:	687e      	ldr	r6, [r7, #4]
 8011c60:	f04f 0802 	mov.w	r8, #2
 8011c64:	f1bb 0f00 	cmp.w	fp, #0
 8011c68:	d04a      	beq.n	8011d00 <__gethex+0x3c4>
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d016      	beq.n	8011c9e <__gethex+0x362>
 8011c70:	2b03      	cmp	r3, #3
 8011c72:	d018      	beq.n	8011ca6 <__gethex+0x36a>
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d109      	bne.n	8011c8c <__gethex+0x350>
 8011c78:	f01b 0f02 	tst.w	fp, #2
 8011c7c:	d006      	beq.n	8011c8c <__gethex+0x350>
 8011c7e:	f8da 3000 	ldr.w	r3, [sl]
 8011c82:	ea4b 0b03 	orr.w	fp, fp, r3
 8011c86:	f01b 0f01 	tst.w	fp, #1
 8011c8a:	d10f      	bne.n	8011cac <__gethex+0x370>
 8011c8c:	f048 0810 	orr.w	r8, r8, #16
 8011c90:	e036      	b.n	8011d00 <__gethex+0x3c4>
 8011c92:	f04f 0b01 	mov.w	fp, #1
 8011c96:	e7d0      	b.n	8011c3a <__gethex+0x2fe>
 8011c98:	f04f 0801 	mov.w	r8, #1
 8011c9c:	e7e2      	b.n	8011c64 <__gethex+0x328>
 8011c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ca0:	f1c3 0301 	rsb	r3, r3, #1
 8011ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d0ef      	beq.n	8011c8c <__gethex+0x350>
 8011cac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011cb0:	f104 0214 	add.w	r2, r4, #20
 8011cb4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011cb8:	9301      	str	r3, [sp, #4]
 8011cba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	4694      	mov	ip, r2
 8011cc2:	f852 1b04 	ldr.w	r1, [r2], #4
 8011cc6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011cca:	d01e      	beq.n	8011d0a <__gethex+0x3ce>
 8011ccc:	3101      	adds	r1, #1
 8011cce:	f8cc 1000 	str.w	r1, [ip]
 8011cd2:	f1b8 0f02 	cmp.w	r8, #2
 8011cd6:	f104 0214 	add.w	r2, r4, #20
 8011cda:	d13d      	bne.n	8011d58 <__gethex+0x41c>
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	3b01      	subs	r3, #1
 8011ce0:	42ab      	cmp	r3, r5
 8011ce2:	d10b      	bne.n	8011cfc <__gethex+0x3c0>
 8011ce4:	1169      	asrs	r1, r5, #5
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	f005 051f 	and.w	r5, r5, #31
 8011cec:	fa03 f505 	lsl.w	r5, r3, r5
 8011cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cf4:	421d      	tst	r5, r3
 8011cf6:	bf18      	it	ne
 8011cf8:	f04f 0801 	movne.w	r8, #1
 8011cfc:	f048 0820 	orr.w	r8, r8, #32
 8011d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d02:	601c      	str	r4, [r3, #0]
 8011d04:	9b02      	ldr	r3, [sp, #8]
 8011d06:	601e      	str	r6, [r3, #0]
 8011d08:	e6a2      	b.n	8011a50 <__gethex+0x114>
 8011d0a:	4290      	cmp	r0, r2
 8011d0c:	f842 3c04 	str.w	r3, [r2, #-4]
 8011d10:	d8d6      	bhi.n	8011cc0 <__gethex+0x384>
 8011d12:	68a2      	ldr	r2, [r4, #8]
 8011d14:	4593      	cmp	fp, r2
 8011d16:	db17      	blt.n	8011d48 <__gethex+0x40c>
 8011d18:	6861      	ldr	r1, [r4, #4]
 8011d1a:	4648      	mov	r0, r9
 8011d1c:	3101      	adds	r1, #1
 8011d1e:	f7fd fc75 	bl	800f60c <_Balloc>
 8011d22:	4682      	mov	sl, r0
 8011d24:	b918      	cbnz	r0, 8011d2e <__gethex+0x3f2>
 8011d26:	4b1b      	ldr	r3, [pc, #108]	; (8011d94 <__gethex+0x458>)
 8011d28:	4602      	mov	r2, r0
 8011d2a:	2184      	movs	r1, #132	; 0x84
 8011d2c:	e6b3      	b.n	8011a96 <__gethex+0x15a>
 8011d2e:	6922      	ldr	r2, [r4, #16]
 8011d30:	3202      	adds	r2, #2
 8011d32:	f104 010c 	add.w	r1, r4, #12
 8011d36:	0092      	lsls	r2, r2, #2
 8011d38:	300c      	adds	r0, #12
 8011d3a:	f7fc fd85 	bl	800e848 <memcpy>
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4648      	mov	r0, r9
 8011d42:	f7fd fca3 	bl	800f68c <_Bfree>
 8011d46:	4654      	mov	r4, sl
 8011d48:	6922      	ldr	r2, [r4, #16]
 8011d4a:	1c51      	adds	r1, r2, #1
 8011d4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011d50:	6121      	str	r1, [r4, #16]
 8011d52:	2101      	movs	r1, #1
 8011d54:	6151      	str	r1, [r2, #20]
 8011d56:	e7bc      	b.n	8011cd2 <__gethex+0x396>
 8011d58:	6921      	ldr	r1, [r4, #16]
 8011d5a:	4559      	cmp	r1, fp
 8011d5c:	dd0b      	ble.n	8011d76 <__gethex+0x43a>
 8011d5e:	2101      	movs	r1, #1
 8011d60:	4620      	mov	r0, r4
 8011d62:	f7ff fd83 	bl	801186c <rshift>
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	3601      	adds	r6, #1
 8011d6a:	42b3      	cmp	r3, r6
 8011d6c:	f6ff aedb 	blt.w	8011b26 <__gethex+0x1ea>
 8011d70:	f04f 0801 	mov.w	r8, #1
 8011d74:	e7c2      	b.n	8011cfc <__gethex+0x3c0>
 8011d76:	f015 051f 	ands.w	r5, r5, #31
 8011d7a:	d0f9      	beq.n	8011d70 <__gethex+0x434>
 8011d7c:	9b01      	ldr	r3, [sp, #4]
 8011d7e:	441a      	add	r2, r3
 8011d80:	f1c5 0520 	rsb	r5, r5, #32
 8011d84:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011d88:	f7fd fd32 	bl	800f7f0 <__hi0bits>
 8011d8c:	42a8      	cmp	r0, r5
 8011d8e:	dbe6      	blt.n	8011d5e <__gethex+0x422>
 8011d90:	e7ee      	b.n	8011d70 <__gethex+0x434>
 8011d92:	bf00      	nop
 8011d94:	08012a6b 	.word	0x08012a6b

08011d98 <L_shift>:
 8011d98:	f1c2 0208 	rsb	r2, r2, #8
 8011d9c:	0092      	lsls	r2, r2, #2
 8011d9e:	b570      	push	{r4, r5, r6, lr}
 8011da0:	f1c2 0620 	rsb	r6, r2, #32
 8011da4:	6843      	ldr	r3, [r0, #4]
 8011da6:	6804      	ldr	r4, [r0, #0]
 8011da8:	fa03 f506 	lsl.w	r5, r3, r6
 8011dac:	432c      	orrs	r4, r5
 8011dae:	40d3      	lsrs	r3, r2
 8011db0:	6004      	str	r4, [r0, #0]
 8011db2:	f840 3f04 	str.w	r3, [r0, #4]!
 8011db6:	4288      	cmp	r0, r1
 8011db8:	d3f4      	bcc.n	8011da4 <L_shift+0xc>
 8011dba:	bd70      	pop	{r4, r5, r6, pc}

08011dbc <__match>:
 8011dbc:	b530      	push	{r4, r5, lr}
 8011dbe:	6803      	ldr	r3, [r0, #0]
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dc6:	b914      	cbnz	r4, 8011dce <__match+0x12>
 8011dc8:	6003      	str	r3, [r0, #0]
 8011dca:	2001      	movs	r0, #1
 8011dcc:	bd30      	pop	{r4, r5, pc}
 8011dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011dd6:	2d19      	cmp	r5, #25
 8011dd8:	bf98      	it	ls
 8011dda:	3220      	addls	r2, #32
 8011ddc:	42a2      	cmp	r2, r4
 8011dde:	d0f0      	beq.n	8011dc2 <__match+0x6>
 8011de0:	2000      	movs	r0, #0
 8011de2:	e7f3      	b.n	8011dcc <__match+0x10>

08011de4 <__hexnan>:
 8011de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de8:	680b      	ldr	r3, [r1, #0]
 8011dea:	6801      	ldr	r1, [r0, #0]
 8011dec:	115e      	asrs	r6, r3, #5
 8011dee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011df2:	f013 031f 	ands.w	r3, r3, #31
 8011df6:	b087      	sub	sp, #28
 8011df8:	bf18      	it	ne
 8011dfa:	3604      	addne	r6, #4
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	1f37      	subs	r7, r6, #4
 8011e00:	4682      	mov	sl, r0
 8011e02:	4690      	mov	r8, r2
 8011e04:	9301      	str	r3, [sp, #4]
 8011e06:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e0a:	46b9      	mov	r9, r7
 8011e0c:	463c      	mov	r4, r7
 8011e0e:	9502      	str	r5, [sp, #8]
 8011e10:	46ab      	mov	fp, r5
 8011e12:	784a      	ldrb	r2, [r1, #1]
 8011e14:	1c4b      	adds	r3, r1, #1
 8011e16:	9303      	str	r3, [sp, #12]
 8011e18:	b342      	cbz	r2, 8011e6c <__hexnan+0x88>
 8011e1a:	4610      	mov	r0, r2
 8011e1c:	9105      	str	r1, [sp, #20]
 8011e1e:	9204      	str	r2, [sp, #16]
 8011e20:	f7ff fd76 	bl	8011910 <__hexdig_fun>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d14f      	bne.n	8011ec8 <__hexnan+0xe4>
 8011e28:	9a04      	ldr	r2, [sp, #16]
 8011e2a:	9905      	ldr	r1, [sp, #20]
 8011e2c:	2a20      	cmp	r2, #32
 8011e2e:	d818      	bhi.n	8011e62 <__hexnan+0x7e>
 8011e30:	9b02      	ldr	r3, [sp, #8]
 8011e32:	459b      	cmp	fp, r3
 8011e34:	dd13      	ble.n	8011e5e <__hexnan+0x7a>
 8011e36:	454c      	cmp	r4, r9
 8011e38:	d206      	bcs.n	8011e48 <__hexnan+0x64>
 8011e3a:	2d07      	cmp	r5, #7
 8011e3c:	dc04      	bgt.n	8011e48 <__hexnan+0x64>
 8011e3e:	462a      	mov	r2, r5
 8011e40:	4649      	mov	r1, r9
 8011e42:	4620      	mov	r0, r4
 8011e44:	f7ff ffa8 	bl	8011d98 <L_shift>
 8011e48:	4544      	cmp	r4, r8
 8011e4a:	d950      	bls.n	8011eee <__hexnan+0x10a>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	f1a4 0904 	sub.w	r9, r4, #4
 8011e52:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e56:	f8cd b008 	str.w	fp, [sp, #8]
 8011e5a:	464c      	mov	r4, r9
 8011e5c:	461d      	mov	r5, r3
 8011e5e:	9903      	ldr	r1, [sp, #12]
 8011e60:	e7d7      	b.n	8011e12 <__hexnan+0x2e>
 8011e62:	2a29      	cmp	r2, #41	; 0x29
 8011e64:	d155      	bne.n	8011f12 <__hexnan+0x12e>
 8011e66:	3102      	adds	r1, #2
 8011e68:	f8ca 1000 	str.w	r1, [sl]
 8011e6c:	f1bb 0f00 	cmp.w	fp, #0
 8011e70:	d04f      	beq.n	8011f12 <__hexnan+0x12e>
 8011e72:	454c      	cmp	r4, r9
 8011e74:	d206      	bcs.n	8011e84 <__hexnan+0xa0>
 8011e76:	2d07      	cmp	r5, #7
 8011e78:	dc04      	bgt.n	8011e84 <__hexnan+0xa0>
 8011e7a:	462a      	mov	r2, r5
 8011e7c:	4649      	mov	r1, r9
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f7ff ff8a 	bl	8011d98 <L_shift>
 8011e84:	4544      	cmp	r4, r8
 8011e86:	d934      	bls.n	8011ef2 <__hexnan+0x10e>
 8011e88:	f1a8 0204 	sub.w	r2, r8, #4
 8011e8c:	4623      	mov	r3, r4
 8011e8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e92:	f842 1f04 	str.w	r1, [r2, #4]!
 8011e96:	429f      	cmp	r7, r3
 8011e98:	d2f9      	bcs.n	8011e8e <__hexnan+0xaa>
 8011e9a:	1b3b      	subs	r3, r7, r4
 8011e9c:	f023 0303 	bic.w	r3, r3, #3
 8011ea0:	3304      	adds	r3, #4
 8011ea2:	3e03      	subs	r6, #3
 8011ea4:	3401      	adds	r4, #1
 8011ea6:	42a6      	cmp	r6, r4
 8011ea8:	bf38      	it	cc
 8011eaa:	2304      	movcc	r3, #4
 8011eac:	4443      	add	r3, r8
 8011eae:	2200      	movs	r2, #0
 8011eb0:	f843 2b04 	str.w	r2, [r3], #4
 8011eb4:	429f      	cmp	r7, r3
 8011eb6:	d2fb      	bcs.n	8011eb0 <__hexnan+0xcc>
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	b91b      	cbnz	r3, 8011ec4 <__hexnan+0xe0>
 8011ebc:	4547      	cmp	r7, r8
 8011ebe:	d126      	bne.n	8011f0e <__hexnan+0x12a>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	603b      	str	r3, [r7, #0]
 8011ec4:	2005      	movs	r0, #5
 8011ec6:	e025      	b.n	8011f14 <__hexnan+0x130>
 8011ec8:	3501      	adds	r5, #1
 8011eca:	2d08      	cmp	r5, #8
 8011ecc:	f10b 0b01 	add.w	fp, fp, #1
 8011ed0:	dd06      	ble.n	8011ee0 <__hexnan+0xfc>
 8011ed2:	4544      	cmp	r4, r8
 8011ed4:	d9c3      	bls.n	8011e5e <__hexnan+0x7a>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	f844 3c04 	str.w	r3, [r4, #-4]
 8011edc:	2501      	movs	r5, #1
 8011ede:	3c04      	subs	r4, #4
 8011ee0:	6822      	ldr	r2, [r4, #0]
 8011ee2:	f000 000f 	and.w	r0, r0, #15
 8011ee6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011eea:	6020      	str	r0, [r4, #0]
 8011eec:	e7b7      	b.n	8011e5e <__hexnan+0x7a>
 8011eee:	2508      	movs	r5, #8
 8011ef0:	e7b5      	b.n	8011e5e <__hexnan+0x7a>
 8011ef2:	9b01      	ldr	r3, [sp, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d0df      	beq.n	8011eb8 <__hexnan+0xd4>
 8011ef8:	f1c3 0320 	rsb	r3, r3, #32
 8011efc:	f04f 32ff 	mov.w	r2, #4294967295
 8011f00:	40da      	lsrs	r2, r3
 8011f02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011f06:	4013      	ands	r3, r2
 8011f08:	f846 3c04 	str.w	r3, [r6, #-4]
 8011f0c:	e7d4      	b.n	8011eb8 <__hexnan+0xd4>
 8011f0e:	3f04      	subs	r7, #4
 8011f10:	e7d2      	b.n	8011eb8 <__hexnan+0xd4>
 8011f12:	2004      	movs	r0, #4
 8011f14:	b007      	add	sp, #28
 8011f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f1a <__ascii_mbtowc>:
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	b901      	cbnz	r1, 8011f20 <__ascii_mbtowc+0x6>
 8011f1e:	a901      	add	r1, sp, #4
 8011f20:	b142      	cbz	r2, 8011f34 <__ascii_mbtowc+0x1a>
 8011f22:	b14b      	cbz	r3, 8011f38 <__ascii_mbtowc+0x1e>
 8011f24:	7813      	ldrb	r3, [r2, #0]
 8011f26:	600b      	str	r3, [r1, #0]
 8011f28:	7812      	ldrb	r2, [r2, #0]
 8011f2a:	1e10      	subs	r0, r2, #0
 8011f2c:	bf18      	it	ne
 8011f2e:	2001      	movne	r0, #1
 8011f30:	b002      	add	sp, #8
 8011f32:	4770      	bx	lr
 8011f34:	4610      	mov	r0, r2
 8011f36:	e7fb      	b.n	8011f30 <__ascii_mbtowc+0x16>
 8011f38:	f06f 0001 	mvn.w	r0, #1
 8011f3c:	e7f8      	b.n	8011f30 <__ascii_mbtowc+0x16>

08011f3e <_realloc_r>:
 8011f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f42:	4680      	mov	r8, r0
 8011f44:	4614      	mov	r4, r2
 8011f46:	460e      	mov	r6, r1
 8011f48:	b921      	cbnz	r1, 8011f54 <_realloc_r+0x16>
 8011f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4e:	4611      	mov	r1, r2
 8011f50:	f7fb bb52 	b.w	800d5f8 <_malloc_r>
 8011f54:	b92a      	cbnz	r2, 8011f62 <_realloc_r+0x24>
 8011f56:	f7fd fb05 	bl	800f564 <_free_r>
 8011f5a:	4625      	mov	r5, r4
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f62:	f000 f8b6 	bl	80120d2 <_malloc_usable_size_r>
 8011f66:	4284      	cmp	r4, r0
 8011f68:	4607      	mov	r7, r0
 8011f6a:	d802      	bhi.n	8011f72 <_realloc_r+0x34>
 8011f6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f70:	d812      	bhi.n	8011f98 <_realloc_r+0x5a>
 8011f72:	4621      	mov	r1, r4
 8011f74:	4640      	mov	r0, r8
 8011f76:	f7fb fb3f 	bl	800d5f8 <_malloc_r>
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d0ed      	beq.n	8011f5c <_realloc_r+0x1e>
 8011f80:	42bc      	cmp	r4, r7
 8011f82:	4622      	mov	r2, r4
 8011f84:	4631      	mov	r1, r6
 8011f86:	bf28      	it	cs
 8011f88:	463a      	movcs	r2, r7
 8011f8a:	f7fc fc5d 	bl	800e848 <memcpy>
 8011f8e:	4631      	mov	r1, r6
 8011f90:	4640      	mov	r0, r8
 8011f92:	f7fd fae7 	bl	800f564 <_free_r>
 8011f96:	e7e1      	b.n	8011f5c <_realloc_r+0x1e>
 8011f98:	4635      	mov	r5, r6
 8011f9a:	e7df      	b.n	8011f5c <_realloc_r+0x1e>

08011f9c <_strtoul_l.constprop.0>:
 8011f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fa0:	4f36      	ldr	r7, [pc, #216]	; (801207c <_strtoul_l.constprop.0+0xe0>)
 8011fa2:	4686      	mov	lr, r0
 8011fa4:	460d      	mov	r5, r1
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fac:	5d3e      	ldrb	r6, [r7, r4]
 8011fae:	f016 0608 	ands.w	r6, r6, #8
 8011fb2:	d1f8      	bne.n	8011fa6 <_strtoul_l.constprop.0+0xa>
 8011fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8011fb6:	d130      	bne.n	801201a <_strtoul_l.constprop.0+0x7e>
 8011fb8:	782c      	ldrb	r4, [r5, #0]
 8011fba:	2601      	movs	r6, #1
 8011fbc:	1c85      	adds	r5, r0, #2
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d057      	beq.n	8012072 <_strtoul_l.constprop.0+0xd6>
 8011fc2:	2b10      	cmp	r3, #16
 8011fc4:	d109      	bne.n	8011fda <_strtoul_l.constprop.0+0x3e>
 8011fc6:	2c30      	cmp	r4, #48	; 0x30
 8011fc8:	d107      	bne.n	8011fda <_strtoul_l.constprop.0+0x3e>
 8011fca:	7828      	ldrb	r0, [r5, #0]
 8011fcc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011fd0:	2858      	cmp	r0, #88	; 0x58
 8011fd2:	d149      	bne.n	8012068 <_strtoul_l.constprop.0+0xcc>
 8011fd4:	786c      	ldrb	r4, [r5, #1]
 8011fd6:	2310      	movs	r3, #16
 8011fd8:	3502      	adds	r5, #2
 8011fda:	f04f 38ff 	mov.w	r8, #4294967295
 8011fde:	2700      	movs	r7, #0
 8011fe0:	fbb8 f8f3 	udiv	r8, r8, r3
 8011fe4:	fb03 f908 	mul.w	r9, r3, r8
 8011fe8:	ea6f 0909 	mvn.w	r9, r9
 8011fec:	4638      	mov	r0, r7
 8011fee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011ff2:	f1bc 0f09 	cmp.w	ip, #9
 8011ff6:	d815      	bhi.n	8012024 <_strtoul_l.constprop.0+0x88>
 8011ff8:	4664      	mov	r4, ip
 8011ffa:	42a3      	cmp	r3, r4
 8011ffc:	dd23      	ble.n	8012046 <_strtoul_l.constprop.0+0xaa>
 8011ffe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8012002:	d007      	beq.n	8012014 <_strtoul_l.constprop.0+0x78>
 8012004:	4580      	cmp	r8, r0
 8012006:	d31b      	bcc.n	8012040 <_strtoul_l.constprop.0+0xa4>
 8012008:	d101      	bne.n	801200e <_strtoul_l.constprop.0+0x72>
 801200a:	45a1      	cmp	r9, r4
 801200c:	db18      	blt.n	8012040 <_strtoul_l.constprop.0+0xa4>
 801200e:	fb00 4003 	mla	r0, r0, r3, r4
 8012012:	2701      	movs	r7, #1
 8012014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012018:	e7e9      	b.n	8011fee <_strtoul_l.constprop.0+0x52>
 801201a:	2c2b      	cmp	r4, #43	; 0x2b
 801201c:	bf04      	itt	eq
 801201e:	782c      	ldrbeq	r4, [r5, #0]
 8012020:	1c85      	addeq	r5, r0, #2
 8012022:	e7cc      	b.n	8011fbe <_strtoul_l.constprop.0+0x22>
 8012024:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012028:	f1bc 0f19 	cmp.w	ip, #25
 801202c:	d801      	bhi.n	8012032 <_strtoul_l.constprop.0+0x96>
 801202e:	3c37      	subs	r4, #55	; 0x37
 8012030:	e7e3      	b.n	8011ffa <_strtoul_l.constprop.0+0x5e>
 8012032:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012036:	f1bc 0f19 	cmp.w	ip, #25
 801203a:	d804      	bhi.n	8012046 <_strtoul_l.constprop.0+0xaa>
 801203c:	3c57      	subs	r4, #87	; 0x57
 801203e:	e7dc      	b.n	8011ffa <_strtoul_l.constprop.0+0x5e>
 8012040:	f04f 37ff 	mov.w	r7, #4294967295
 8012044:	e7e6      	b.n	8012014 <_strtoul_l.constprop.0+0x78>
 8012046:	1c7b      	adds	r3, r7, #1
 8012048:	d106      	bne.n	8012058 <_strtoul_l.constprop.0+0xbc>
 801204a:	2322      	movs	r3, #34	; 0x22
 801204c:	f8ce 3000 	str.w	r3, [lr]
 8012050:	4638      	mov	r0, r7
 8012052:	b932      	cbnz	r2, 8012062 <_strtoul_l.constprop.0+0xc6>
 8012054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012058:	b106      	cbz	r6, 801205c <_strtoul_l.constprop.0+0xc0>
 801205a:	4240      	negs	r0, r0
 801205c:	2a00      	cmp	r2, #0
 801205e:	d0f9      	beq.n	8012054 <_strtoul_l.constprop.0+0xb8>
 8012060:	b107      	cbz	r7, 8012064 <_strtoul_l.constprop.0+0xc8>
 8012062:	1e69      	subs	r1, r5, #1
 8012064:	6011      	str	r1, [r2, #0]
 8012066:	e7f5      	b.n	8012054 <_strtoul_l.constprop.0+0xb8>
 8012068:	2430      	movs	r4, #48	; 0x30
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1b5      	bne.n	8011fda <_strtoul_l.constprop.0+0x3e>
 801206e:	2308      	movs	r3, #8
 8012070:	e7b3      	b.n	8011fda <_strtoul_l.constprop.0+0x3e>
 8012072:	2c30      	cmp	r4, #48	; 0x30
 8012074:	d0a9      	beq.n	8011fca <_strtoul_l.constprop.0+0x2e>
 8012076:	230a      	movs	r3, #10
 8012078:	e7af      	b.n	8011fda <_strtoul_l.constprop.0+0x3e>
 801207a:	bf00      	nop
 801207c:	08012c29 	.word	0x08012c29

08012080 <_strtoul_r>:
 8012080:	f7ff bf8c 	b.w	8011f9c <_strtoul_l.constprop.0>

08012084 <__ascii_wctomb>:
 8012084:	b149      	cbz	r1, 801209a <__ascii_wctomb+0x16>
 8012086:	2aff      	cmp	r2, #255	; 0xff
 8012088:	bf85      	ittet	hi
 801208a:	238a      	movhi	r3, #138	; 0x8a
 801208c:	6003      	strhi	r3, [r0, #0]
 801208e:	700a      	strbls	r2, [r1, #0]
 8012090:	f04f 30ff 	movhi.w	r0, #4294967295
 8012094:	bf98      	it	ls
 8012096:	2001      	movls	r0, #1
 8012098:	4770      	bx	lr
 801209a:	4608      	mov	r0, r1
 801209c:	4770      	bx	lr
	...

080120a0 <fiprintf>:
 80120a0:	b40e      	push	{r1, r2, r3}
 80120a2:	b503      	push	{r0, r1, lr}
 80120a4:	4601      	mov	r1, r0
 80120a6:	ab03      	add	r3, sp, #12
 80120a8:	4805      	ldr	r0, [pc, #20]	; (80120c0 <fiprintf+0x20>)
 80120aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80120ae:	6800      	ldr	r0, [r0, #0]
 80120b0:	9301      	str	r3, [sp, #4]
 80120b2:	f000 f83f 	bl	8012134 <_vfiprintf_r>
 80120b6:	b002      	add	sp, #8
 80120b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80120bc:	b003      	add	sp, #12
 80120be:	4770      	bx	lr
 80120c0:	2000006c 	.word	0x2000006c

080120c4 <abort>:
 80120c4:	b508      	push	{r3, lr}
 80120c6:	2006      	movs	r0, #6
 80120c8:	f000 fa0c 	bl	80124e4 <raise>
 80120cc:	2001      	movs	r0, #1
 80120ce:	f7f0 f8b3 	bl	8002238 <_exit>

080120d2 <_malloc_usable_size_r>:
 80120d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120d6:	1f18      	subs	r0, r3, #4
 80120d8:	2b00      	cmp	r3, #0
 80120da:	bfbc      	itt	lt
 80120dc:	580b      	ldrlt	r3, [r1, r0]
 80120de:	18c0      	addlt	r0, r0, r3
 80120e0:	4770      	bx	lr

080120e2 <__sfputc_r>:
 80120e2:	6893      	ldr	r3, [r2, #8]
 80120e4:	3b01      	subs	r3, #1
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	b410      	push	{r4}
 80120ea:	6093      	str	r3, [r2, #8]
 80120ec:	da08      	bge.n	8012100 <__sfputc_r+0x1e>
 80120ee:	6994      	ldr	r4, [r2, #24]
 80120f0:	42a3      	cmp	r3, r4
 80120f2:	db01      	blt.n	80120f8 <__sfputc_r+0x16>
 80120f4:	290a      	cmp	r1, #10
 80120f6:	d103      	bne.n	8012100 <__sfputc_r+0x1e>
 80120f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120fc:	f000 b934 	b.w	8012368 <__swbuf_r>
 8012100:	6813      	ldr	r3, [r2, #0]
 8012102:	1c58      	adds	r0, r3, #1
 8012104:	6010      	str	r0, [r2, #0]
 8012106:	7019      	strb	r1, [r3, #0]
 8012108:	4608      	mov	r0, r1
 801210a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801210e:	4770      	bx	lr

08012110 <__sfputs_r>:
 8012110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012112:	4606      	mov	r6, r0
 8012114:	460f      	mov	r7, r1
 8012116:	4614      	mov	r4, r2
 8012118:	18d5      	adds	r5, r2, r3
 801211a:	42ac      	cmp	r4, r5
 801211c:	d101      	bne.n	8012122 <__sfputs_r+0x12>
 801211e:	2000      	movs	r0, #0
 8012120:	e007      	b.n	8012132 <__sfputs_r+0x22>
 8012122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012126:	463a      	mov	r2, r7
 8012128:	4630      	mov	r0, r6
 801212a:	f7ff ffda 	bl	80120e2 <__sfputc_r>
 801212e:	1c43      	adds	r3, r0, #1
 8012130:	d1f3      	bne.n	801211a <__sfputs_r+0xa>
 8012132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012134 <_vfiprintf_r>:
 8012134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012138:	460d      	mov	r5, r1
 801213a:	b09d      	sub	sp, #116	; 0x74
 801213c:	4614      	mov	r4, r2
 801213e:	4698      	mov	r8, r3
 8012140:	4606      	mov	r6, r0
 8012142:	b118      	cbz	r0, 801214c <_vfiprintf_r+0x18>
 8012144:	6a03      	ldr	r3, [r0, #32]
 8012146:	b90b      	cbnz	r3, 801214c <_vfiprintf_r+0x18>
 8012148:	f7fc f9d2 	bl	800e4f0 <__sinit>
 801214c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801214e:	07d9      	lsls	r1, r3, #31
 8012150:	d405      	bmi.n	801215e <_vfiprintf_r+0x2a>
 8012152:	89ab      	ldrh	r3, [r5, #12]
 8012154:	059a      	lsls	r2, r3, #22
 8012156:	d402      	bmi.n	801215e <_vfiprintf_r+0x2a>
 8012158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801215a:	f7fc fb73 	bl	800e844 <__retarget_lock_acquire_recursive>
 801215e:	89ab      	ldrh	r3, [r5, #12]
 8012160:	071b      	lsls	r3, r3, #28
 8012162:	d501      	bpl.n	8012168 <_vfiprintf_r+0x34>
 8012164:	692b      	ldr	r3, [r5, #16]
 8012166:	b99b      	cbnz	r3, 8012190 <_vfiprintf_r+0x5c>
 8012168:	4629      	mov	r1, r5
 801216a:	4630      	mov	r0, r6
 801216c:	f000 f93a 	bl	80123e4 <__swsetup_r>
 8012170:	b170      	cbz	r0, 8012190 <_vfiprintf_r+0x5c>
 8012172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012174:	07dc      	lsls	r4, r3, #31
 8012176:	d504      	bpl.n	8012182 <_vfiprintf_r+0x4e>
 8012178:	f04f 30ff 	mov.w	r0, #4294967295
 801217c:	b01d      	add	sp, #116	; 0x74
 801217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012182:	89ab      	ldrh	r3, [r5, #12]
 8012184:	0598      	lsls	r0, r3, #22
 8012186:	d4f7      	bmi.n	8012178 <_vfiprintf_r+0x44>
 8012188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801218a:	f7fc fb5c 	bl	800e846 <__retarget_lock_release_recursive>
 801218e:	e7f3      	b.n	8012178 <_vfiprintf_r+0x44>
 8012190:	2300      	movs	r3, #0
 8012192:	9309      	str	r3, [sp, #36]	; 0x24
 8012194:	2320      	movs	r3, #32
 8012196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801219a:	f8cd 800c 	str.w	r8, [sp, #12]
 801219e:	2330      	movs	r3, #48	; 0x30
 80121a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012354 <_vfiprintf_r+0x220>
 80121a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121a8:	f04f 0901 	mov.w	r9, #1
 80121ac:	4623      	mov	r3, r4
 80121ae:	469a      	mov	sl, r3
 80121b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121b4:	b10a      	cbz	r2, 80121ba <_vfiprintf_r+0x86>
 80121b6:	2a25      	cmp	r2, #37	; 0x25
 80121b8:	d1f9      	bne.n	80121ae <_vfiprintf_r+0x7a>
 80121ba:	ebba 0b04 	subs.w	fp, sl, r4
 80121be:	d00b      	beq.n	80121d8 <_vfiprintf_r+0xa4>
 80121c0:	465b      	mov	r3, fp
 80121c2:	4622      	mov	r2, r4
 80121c4:	4629      	mov	r1, r5
 80121c6:	4630      	mov	r0, r6
 80121c8:	f7ff ffa2 	bl	8012110 <__sfputs_r>
 80121cc:	3001      	adds	r0, #1
 80121ce:	f000 80a9 	beq.w	8012324 <_vfiprintf_r+0x1f0>
 80121d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121d4:	445a      	add	r2, fp
 80121d6:	9209      	str	r2, [sp, #36]	; 0x24
 80121d8:	f89a 3000 	ldrb.w	r3, [sl]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	f000 80a1 	beq.w	8012324 <_vfiprintf_r+0x1f0>
 80121e2:	2300      	movs	r3, #0
 80121e4:	f04f 32ff 	mov.w	r2, #4294967295
 80121e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121ec:	f10a 0a01 	add.w	sl, sl, #1
 80121f0:	9304      	str	r3, [sp, #16]
 80121f2:	9307      	str	r3, [sp, #28]
 80121f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121f8:	931a      	str	r3, [sp, #104]	; 0x68
 80121fa:	4654      	mov	r4, sl
 80121fc:	2205      	movs	r2, #5
 80121fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012202:	4854      	ldr	r0, [pc, #336]	; (8012354 <_vfiprintf_r+0x220>)
 8012204:	f7ee f804 	bl	8000210 <memchr>
 8012208:	9a04      	ldr	r2, [sp, #16]
 801220a:	b9d8      	cbnz	r0, 8012244 <_vfiprintf_r+0x110>
 801220c:	06d1      	lsls	r1, r2, #27
 801220e:	bf44      	itt	mi
 8012210:	2320      	movmi	r3, #32
 8012212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012216:	0713      	lsls	r3, r2, #28
 8012218:	bf44      	itt	mi
 801221a:	232b      	movmi	r3, #43	; 0x2b
 801221c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012220:	f89a 3000 	ldrb.w	r3, [sl]
 8012224:	2b2a      	cmp	r3, #42	; 0x2a
 8012226:	d015      	beq.n	8012254 <_vfiprintf_r+0x120>
 8012228:	9a07      	ldr	r2, [sp, #28]
 801222a:	4654      	mov	r4, sl
 801222c:	2000      	movs	r0, #0
 801222e:	f04f 0c0a 	mov.w	ip, #10
 8012232:	4621      	mov	r1, r4
 8012234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012238:	3b30      	subs	r3, #48	; 0x30
 801223a:	2b09      	cmp	r3, #9
 801223c:	d94d      	bls.n	80122da <_vfiprintf_r+0x1a6>
 801223e:	b1b0      	cbz	r0, 801226e <_vfiprintf_r+0x13a>
 8012240:	9207      	str	r2, [sp, #28]
 8012242:	e014      	b.n	801226e <_vfiprintf_r+0x13a>
 8012244:	eba0 0308 	sub.w	r3, r0, r8
 8012248:	fa09 f303 	lsl.w	r3, r9, r3
 801224c:	4313      	orrs	r3, r2
 801224e:	9304      	str	r3, [sp, #16]
 8012250:	46a2      	mov	sl, r4
 8012252:	e7d2      	b.n	80121fa <_vfiprintf_r+0xc6>
 8012254:	9b03      	ldr	r3, [sp, #12]
 8012256:	1d19      	adds	r1, r3, #4
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	9103      	str	r1, [sp, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	bfbb      	ittet	lt
 8012260:	425b      	neglt	r3, r3
 8012262:	f042 0202 	orrlt.w	r2, r2, #2
 8012266:	9307      	strge	r3, [sp, #28]
 8012268:	9307      	strlt	r3, [sp, #28]
 801226a:	bfb8      	it	lt
 801226c:	9204      	strlt	r2, [sp, #16]
 801226e:	7823      	ldrb	r3, [r4, #0]
 8012270:	2b2e      	cmp	r3, #46	; 0x2e
 8012272:	d10c      	bne.n	801228e <_vfiprintf_r+0x15a>
 8012274:	7863      	ldrb	r3, [r4, #1]
 8012276:	2b2a      	cmp	r3, #42	; 0x2a
 8012278:	d134      	bne.n	80122e4 <_vfiprintf_r+0x1b0>
 801227a:	9b03      	ldr	r3, [sp, #12]
 801227c:	1d1a      	adds	r2, r3, #4
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	9203      	str	r2, [sp, #12]
 8012282:	2b00      	cmp	r3, #0
 8012284:	bfb8      	it	lt
 8012286:	f04f 33ff 	movlt.w	r3, #4294967295
 801228a:	3402      	adds	r4, #2
 801228c:	9305      	str	r3, [sp, #20]
 801228e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012364 <_vfiprintf_r+0x230>
 8012292:	7821      	ldrb	r1, [r4, #0]
 8012294:	2203      	movs	r2, #3
 8012296:	4650      	mov	r0, sl
 8012298:	f7ed ffba 	bl	8000210 <memchr>
 801229c:	b138      	cbz	r0, 80122ae <_vfiprintf_r+0x17a>
 801229e:	9b04      	ldr	r3, [sp, #16]
 80122a0:	eba0 000a 	sub.w	r0, r0, sl
 80122a4:	2240      	movs	r2, #64	; 0x40
 80122a6:	4082      	lsls	r2, r0
 80122a8:	4313      	orrs	r3, r2
 80122aa:	3401      	adds	r4, #1
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122b2:	4829      	ldr	r0, [pc, #164]	; (8012358 <_vfiprintf_r+0x224>)
 80122b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122b8:	2206      	movs	r2, #6
 80122ba:	f7ed ffa9 	bl	8000210 <memchr>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d03f      	beq.n	8012342 <_vfiprintf_r+0x20e>
 80122c2:	4b26      	ldr	r3, [pc, #152]	; (801235c <_vfiprintf_r+0x228>)
 80122c4:	bb1b      	cbnz	r3, 801230e <_vfiprintf_r+0x1da>
 80122c6:	9b03      	ldr	r3, [sp, #12]
 80122c8:	3307      	adds	r3, #7
 80122ca:	f023 0307 	bic.w	r3, r3, #7
 80122ce:	3308      	adds	r3, #8
 80122d0:	9303      	str	r3, [sp, #12]
 80122d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d4:	443b      	add	r3, r7
 80122d6:	9309      	str	r3, [sp, #36]	; 0x24
 80122d8:	e768      	b.n	80121ac <_vfiprintf_r+0x78>
 80122da:	fb0c 3202 	mla	r2, ip, r2, r3
 80122de:	460c      	mov	r4, r1
 80122e0:	2001      	movs	r0, #1
 80122e2:	e7a6      	b.n	8012232 <_vfiprintf_r+0xfe>
 80122e4:	2300      	movs	r3, #0
 80122e6:	3401      	adds	r4, #1
 80122e8:	9305      	str	r3, [sp, #20]
 80122ea:	4619      	mov	r1, r3
 80122ec:	f04f 0c0a 	mov.w	ip, #10
 80122f0:	4620      	mov	r0, r4
 80122f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122f6:	3a30      	subs	r2, #48	; 0x30
 80122f8:	2a09      	cmp	r2, #9
 80122fa:	d903      	bls.n	8012304 <_vfiprintf_r+0x1d0>
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d0c6      	beq.n	801228e <_vfiprintf_r+0x15a>
 8012300:	9105      	str	r1, [sp, #20]
 8012302:	e7c4      	b.n	801228e <_vfiprintf_r+0x15a>
 8012304:	fb0c 2101 	mla	r1, ip, r1, r2
 8012308:	4604      	mov	r4, r0
 801230a:	2301      	movs	r3, #1
 801230c:	e7f0      	b.n	80122f0 <_vfiprintf_r+0x1bc>
 801230e:	ab03      	add	r3, sp, #12
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	462a      	mov	r2, r5
 8012314:	4b12      	ldr	r3, [pc, #72]	; (8012360 <_vfiprintf_r+0x22c>)
 8012316:	a904      	add	r1, sp, #16
 8012318:	4630      	mov	r0, r6
 801231a:	f7fb fa99 	bl	800d850 <_printf_float>
 801231e:	4607      	mov	r7, r0
 8012320:	1c78      	adds	r0, r7, #1
 8012322:	d1d6      	bne.n	80122d2 <_vfiprintf_r+0x19e>
 8012324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012326:	07d9      	lsls	r1, r3, #31
 8012328:	d405      	bmi.n	8012336 <_vfiprintf_r+0x202>
 801232a:	89ab      	ldrh	r3, [r5, #12]
 801232c:	059a      	lsls	r2, r3, #22
 801232e:	d402      	bmi.n	8012336 <_vfiprintf_r+0x202>
 8012330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012332:	f7fc fa88 	bl	800e846 <__retarget_lock_release_recursive>
 8012336:	89ab      	ldrh	r3, [r5, #12]
 8012338:	065b      	lsls	r3, r3, #25
 801233a:	f53f af1d 	bmi.w	8012178 <_vfiprintf_r+0x44>
 801233e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012340:	e71c      	b.n	801217c <_vfiprintf_r+0x48>
 8012342:	ab03      	add	r3, sp, #12
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	462a      	mov	r2, r5
 8012348:	4b05      	ldr	r3, [pc, #20]	; (8012360 <_vfiprintf_r+0x22c>)
 801234a:	a904      	add	r1, sp, #16
 801234c:	4630      	mov	r0, r6
 801234e:	f7fb fd23 	bl	800dd98 <_printf_i>
 8012352:	e7e4      	b.n	801231e <_vfiprintf_r+0x1ea>
 8012354:	08012d29 	.word	0x08012d29
 8012358:	08012d33 	.word	0x08012d33
 801235c:	0800d851 	.word	0x0800d851
 8012360:	08012111 	.word	0x08012111
 8012364:	08012d2f 	.word	0x08012d2f

08012368 <__swbuf_r>:
 8012368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801236a:	460e      	mov	r6, r1
 801236c:	4614      	mov	r4, r2
 801236e:	4605      	mov	r5, r0
 8012370:	b118      	cbz	r0, 801237a <__swbuf_r+0x12>
 8012372:	6a03      	ldr	r3, [r0, #32]
 8012374:	b90b      	cbnz	r3, 801237a <__swbuf_r+0x12>
 8012376:	f7fc f8bb 	bl	800e4f0 <__sinit>
 801237a:	69a3      	ldr	r3, [r4, #24]
 801237c:	60a3      	str	r3, [r4, #8]
 801237e:	89a3      	ldrh	r3, [r4, #12]
 8012380:	071a      	lsls	r2, r3, #28
 8012382:	d525      	bpl.n	80123d0 <__swbuf_r+0x68>
 8012384:	6923      	ldr	r3, [r4, #16]
 8012386:	b31b      	cbz	r3, 80123d0 <__swbuf_r+0x68>
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	6922      	ldr	r2, [r4, #16]
 801238c:	1a98      	subs	r0, r3, r2
 801238e:	6963      	ldr	r3, [r4, #20]
 8012390:	b2f6      	uxtb	r6, r6
 8012392:	4283      	cmp	r3, r0
 8012394:	4637      	mov	r7, r6
 8012396:	dc04      	bgt.n	80123a2 <__swbuf_r+0x3a>
 8012398:	4621      	mov	r1, r4
 801239a:	4628      	mov	r0, r5
 801239c:	f7ff f978 	bl	8011690 <_fflush_r>
 80123a0:	b9e0      	cbnz	r0, 80123dc <__swbuf_r+0x74>
 80123a2:	68a3      	ldr	r3, [r4, #8]
 80123a4:	3b01      	subs	r3, #1
 80123a6:	60a3      	str	r3, [r4, #8]
 80123a8:	6823      	ldr	r3, [r4, #0]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	6022      	str	r2, [r4, #0]
 80123ae:	701e      	strb	r6, [r3, #0]
 80123b0:	6962      	ldr	r2, [r4, #20]
 80123b2:	1c43      	adds	r3, r0, #1
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d004      	beq.n	80123c2 <__swbuf_r+0x5a>
 80123b8:	89a3      	ldrh	r3, [r4, #12]
 80123ba:	07db      	lsls	r3, r3, #31
 80123bc:	d506      	bpl.n	80123cc <__swbuf_r+0x64>
 80123be:	2e0a      	cmp	r6, #10
 80123c0:	d104      	bne.n	80123cc <__swbuf_r+0x64>
 80123c2:	4621      	mov	r1, r4
 80123c4:	4628      	mov	r0, r5
 80123c6:	f7ff f963 	bl	8011690 <_fflush_r>
 80123ca:	b938      	cbnz	r0, 80123dc <__swbuf_r+0x74>
 80123cc:	4638      	mov	r0, r7
 80123ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123d0:	4621      	mov	r1, r4
 80123d2:	4628      	mov	r0, r5
 80123d4:	f000 f806 	bl	80123e4 <__swsetup_r>
 80123d8:	2800      	cmp	r0, #0
 80123da:	d0d5      	beq.n	8012388 <__swbuf_r+0x20>
 80123dc:	f04f 37ff 	mov.w	r7, #4294967295
 80123e0:	e7f4      	b.n	80123cc <__swbuf_r+0x64>
	...

080123e4 <__swsetup_r>:
 80123e4:	b538      	push	{r3, r4, r5, lr}
 80123e6:	4b2a      	ldr	r3, [pc, #168]	; (8012490 <__swsetup_r+0xac>)
 80123e8:	4605      	mov	r5, r0
 80123ea:	6818      	ldr	r0, [r3, #0]
 80123ec:	460c      	mov	r4, r1
 80123ee:	b118      	cbz	r0, 80123f8 <__swsetup_r+0x14>
 80123f0:	6a03      	ldr	r3, [r0, #32]
 80123f2:	b90b      	cbnz	r3, 80123f8 <__swsetup_r+0x14>
 80123f4:	f7fc f87c 	bl	800e4f0 <__sinit>
 80123f8:	89a3      	ldrh	r3, [r4, #12]
 80123fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123fe:	0718      	lsls	r0, r3, #28
 8012400:	d422      	bmi.n	8012448 <__swsetup_r+0x64>
 8012402:	06d9      	lsls	r1, r3, #27
 8012404:	d407      	bmi.n	8012416 <__swsetup_r+0x32>
 8012406:	2309      	movs	r3, #9
 8012408:	602b      	str	r3, [r5, #0]
 801240a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801240e:	81a3      	strh	r3, [r4, #12]
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	e034      	b.n	8012480 <__swsetup_r+0x9c>
 8012416:	0758      	lsls	r0, r3, #29
 8012418:	d512      	bpl.n	8012440 <__swsetup_r+0x5c>
 801241a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801241c:	b141      	cbz	r1, 8012430 <__swsetup_r+0x4c>
 801241e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012422:	4299      	cmp	r1, r3
 8012424:	d002      	beq.n	801242c <__swsetup_r+0x48>
 8012426:	4628      	mov	r0, r5
 8012428:	f7fd f89c 	bl	800f564 <_free_r>
 801242c:	2300      	movs	r3, #0
 801242e:	6363      	str	r3, [r4, #52]	; 0x34
 8012430:	89a3      	ldrh	r3, [r4, #12]
 8012432:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012436:	81a3      	strh	r3, [r4, #12]
 8012438:	2300      	movs	r3, #0
 801243a:	6063      	str	r3, [r4, #4]
 801243c:	6923      	ldr	r3, [r4, #16]
 801243e:	6023      	str	r3, [r4, #0]
 8012440:	89a3      	ldrh	r3, [r4, #12]
 8012442:	f043 0308 	orr.w	r3, r3, #8
 8012446:	81a3      	strh	r3, [r4, #12]
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	b94b      	cbnz	r3, 8012460 <__swsetup_r+0x7c>
 801244c:	89a3      	ldrh	r3, [r4, #12]
 801244e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012456:	d003      	beq.n	8012460 <__swsetup_r+0x7c>
 8012458:	4621      	mov	r1, r4
 801245a:	4628      	mov	r0, r5
 801245c:	f000 f884 	bl	8012568 <__smakebuf_r>
 8012460:	89a0      	ldrh	r0, [r4, #12]
 8012462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012466:	f010 0301 	ands.w	r3, r0, #1
 801246a:	d00a      	beq.n	8012482 <__swsetup_r+0x9e>
 801246c:	2300      	movs	r3, #0
 801246e:	60a3      	str	r3, [r4, #8]
 8012470:	6963      	ldr	r3, [r4, #20]
 8012472:	425b      	negs	r3, r3
 8012474:	61a3      	str	r3, [r4, #24]
 8012476:	6923      	ldr	r3, [r4, #16]
 8012478:	b943      	cbnz	r3, 801248c <__swsetup_r+0xa8>
 801247a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801247e:	d1c4      	bne.n	801240a <__swsetup_r+0x26>
 8012480:	bd38      	pop	{r3, r4, r5, pc}
 8012482:	0781      	lsls	r1, r0, #30
 8012484:	bf58      	it	pl
 8012486:	6963      	ldrpl	r3, [r4, #20]
 8012488:	60a3      	str	r3, [r4, #8]
 801248a:	e7f4      	b.n	8012476 <__swsetup_r+0x92>
 801248c:	2000      	movs	r0, #0
 801248e:	e7f7      	b.n	8012480 <__swsetup_r+0x9c>
 8012490:	2000006c 	.word	0x2000006c

08012494 <_raise_r>:
 8012494:	291f      	cmp	r1, #31
 8012496:	b538      	push	{r3, r4, r5, lr}
 8012498:	4604      	mov	r4, r0
 801249a:	460d      	mov	r5, r1
 801249c:	d904      	bls.n	80124a8 <_raise_r+0x14>
 801249e:	2316      	movs	r3, #22
 80124a0:	6003      	str	r3, [r0, #0]
 80124a2:	f04f 30ff 	mov.w	r0, #4294967295
 80124a6:	bd38      	pop	{r3, r4, r5, pc}
 80124a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80124aa:	b112      	cbz	r2, 80124b2 <_raise_r+0x1e>
 80124ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124b0:	b94b      	cbnz	r3, 80124c6 <_raise_r+0x32>
 80124b2:	4620      	mov	r0, r4
 80124b4:	f000 f830 	bl	8012518 <_getpid_r>
 80124b8:	462a      	mov	r2, r5
 80124ba:	4601      	mov	r1, r0
 80124bc:	4620      	mov	r0, r4
 80124be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c2:	f000 b817 	b.w	80124f4 <_kill_r>
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d00a      	beq.n	80124e0 <_raise_r+0x4c>
 80124ca:	1c59      	adds	r1, r3, #1
 80124cc:	d103      	bne.n	80124d6 <_raise_r+0x42>
 80124ce:	2316      	movs	r3, #22
 80124d0:	6003      	str	r3, [r0, #0]
 80124d2:	2001      	movs	r0, #1
 80124d4:	e7e7      	b.n	80124a6 <_raise_r+0x12>
 80124d6:	2400      	movs	r4, #0
 80124d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124dc:	4628      	mov	r0, r5
 80124de:	4798      	blx	r3
 80124e0:	2000      	movs	r0, #0
 80124e2:	e7e0      	b.n	80124a6 <_raise_r+0x12>

080124e4 <raise>:
 80124e4:	4b02      	ldr	r3, [pc, #8]	; (80124f0 <raise+0xc>)
 80124e6:	4601      	mov	r1, r0
 80124e8:	6818      	ldr	r0, [r3, #0]
 80124ea:	f7ff bfd3 	b.w	8012494 <_raise_r>
 80124ee:	bf00      	nop
 80124f0:	2000006c 	.word	0x2000006c

080124f4 <_kill_r>:
 80124f4:	b538      	push	{r3, r4, r5, lr}
 80124f6:	4d07      	ldr	r5, [pc, #28]	; (8012514 <_kill_r+0x20>)
 80124f8:	2300      	movs	r3, #0
 80124fa:	4604      	mov	r4, r0
 80124fc:	4608      	mov	r0, r1
 80124fe:	4611      	mov	r1, r2
 8012500:	602b      	str	r3, [r5, #0]
 8012502:	f7ef fe89 	bl	8002218 <_kill>
 8012506:	1c43      	adds	r3, r0, #1
 8012508:	d102      	bne.n	8012510 <_kill_r+0x1c>
 801250a:	682b      	ldr	r3, [r5, #0]
 801250c:	b103      	cbz	r3, 8012510 <_kill_r+0x1c>
 801250e:	6023      	str	r3, [r4, #0]
 8012510:	bd38      	pop	{r3, r4, r5, pc}
 8012512:	bf00      	nop
 8012514:	20007034 	.word	0x20007034

08012518 <_getpid_r>:
 8012518:	f7ef be76 	b.w	8002208 <_getpid>

0801251c <__swhatbuf_r>:
 801251c:	b570      	push	{r4, r5, r6, lr}
 801251e:	460c      	mov	r4, r1
 8012520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012524:	2900      	cmp	r1, #0
 8012526:	b096      	sub	sp, #88	; 0x58
 8012528:	4615      	mov	r5, r2
 801252a:	461e      	mov	r6, r3
 801252c:	da0d      	bge.n	801254a <__swhatbuf_r+0x2e>
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012534:	f04f 0100 	mov.w	r1, #0
 8012538:	bf0c      	ite	eq
 801253a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801253e:	2340      	movne	r3, #64	; 0x40
 8012540:	2000      	movs	r0, #0
 8012542:	6031      	str	r1, [r6, #0]
 8012544:	602b      	str	r3, [r5, #0]
 8012546:	b016      	add	sp, #88	; 0x58
 8012548:	bd70      	pop	{r4, r5, r6, pc}
 801254a:	466a      	mov	r2, sp
 801254c:	f000 f848 	bl	80125e0 <_fstat_r>
 8012550:	2800      	cmp	r0, #0
 8012552:	dbec      	blt.n	801252e <__swhatbuf_r+0x12>
 8012554:	9901      	ldr	r1, [sp, #4]
 8012556:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801255a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801255e:	4259      	negs	r1, r3
 8012560:	4159      	adcs	r1, r3
 8012562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012566:	e7eb      	b.n	8012540 <__swhatbuf_r+0x24>

08012568 <__smakebuf_r>:
 8012568:	898b      	ldrh	r3, [r1, #12]
 801256a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801256c:	079d      	lsls	r5, r3, #30
 801256e:	4606      	mov	r6, r0
 8012570:	460c      	mov	r4, r1
 8012572:	d507      	bpl.n	8012584 <__smakebuf_r+0x1c>
 8012574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	6123      	str	r3, [r4, #16]
 801257c:	2301      	movs	r3, #1
 801257e:	6163      	str	r3, [r4, #20]
 8012580:	b002      	add	sp, #8
 8012582:	bd70      	pop	{r4, r5, r6, pc}
 8012584:	ab01      	add	r3, sp, #4
 8012586:	466a      	mov	r2, sp
 8012588:	f7ff ffc8 	bl	801251c <__swhatbuf_r>
 801258c:	9900      	ldr	r1, [sp, #0]
 801258e:	4605      	mov	r5, r0
 8012590:	4630      	mov	r0, r6
 8012592:	f7fb f831 	bl	800d5f8 <_malloc_r>
 8012596:	b948      	cbnz	r0, 80125ac <__smakebuf_r+0x44>
 8012598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801259c:	059a      	lsls	r2, r3, #22
 801259e:	d4ef      	bmi.n	8012580 <__smakebuf_r+0x18>
 80125a0:	f023 0303 	bic.w	r3, r3, #3
 80125a4:	f043 0302 	orr.w	r3, r3, #2
 80125a8:	81a3      	strh	r3, [r4, #12]
 80125aa:	e7e3      	b.n	8012574 <__smakebuf_r+0xc>
 80125ac:	89a3      	ldrh	r3, [r4, #12]
 80125ae:	6020      	str	r0, [r4, #0]
 80125b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125b4:	81a3      	strh	r3, [r4, #12]
 80125b6:	9b00      	ldr	r3, [sp, #0]
 80125b8:	6163      	str	r3, [r4, #20]
 80125ba:	9b01      	ldr	r3, [sp, #4]
 80125bc:	6120      	str	r0, [r4, #16]
 80125be:	b15b      	cbz	r3, 80125d8 <__smakebuf_r+0x70>
 80125c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125c4:	4630      	mov	r0, r6
 80125c6:	f000 f81d 	bl	8012604 <_isatty_r>
 80125ca:	b128      	cbz	r0, 80125d8 <__smakebuf_r+0x70>
 80125cc:	89a3      	ldrh	r3, [r4, #12]
 80125ce:	f023 0303 	bic.w	r3, r3, #3
 80125d2:	f043 0301 	orr.w	r3, r3, #1
 80125d6:	81a3      	strh	r3, [r4, #12]
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	431d      	orrs	r5, r3
 80125dc:	81a5      	strh	r5, [r4, #12]
 80125de:	e7cf      	b.n	8012580 <__smakebuf_r+0x18>

080125e0 <_fstat_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4d07      	ldr	r5, [pc, #28]	; (8012600 <_fstat_r+0x20>)
 80125e4:	2300      	movs	r3, #0
 80125e6:	4604      	mov	r4, r0
 80125e8:	4608      	mov	r0, r1
 80125ea:	4611      	mov	r1, r2
 80125ec:	602b      	str	r3, [r5, #0]
 80125ee:	f7ef fe72 	bl	80022d6 <_fstat>
 80125f2:	1c43      	adds	r3, r0, #1
 80125f4:	d102      	bne.n	80125fc <_fstat_r+0x1c>
 80125f6:	682b      	ldr	r3, [r5, #0]
 80125f8:	b103      	cbz	r3, 80125fc <_fstat_r+0x1c>
 80125fa:	6023      	str	r3, [r4, #0]
 80125fc:	bd38      	pop	{r3, r4, r5, pc}
 80125fe:	bf00      	nop
 8012600:	20007034 	.word	0x20007034

08012604 <_isatty_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d06      	ldr	r5, [pc, #24]	; (8012620 <_isatty_r+0x1c>)
 8012608:	2300      	movs	r3, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	602b      	str	r3, [r5, #0]
 8012610:	f7ef fe71 	bl	80022f6 <_isatty>
 8012614:	1c43      	adds	r3, r0, #1
 8012616:	d102      	bne.n	801261e <_isatty_r+0x1a>
 8012618:	682b      	ldr	r3, [r5, #0]
 801261a:	b103      	cbz	r3, 801261e <_isatty_r+0x1a>
 801261c:	6023      	str	r3, [r4, #0]
 801261e:	bd38      	pop	{r3, r4, r5, pc}
 8012620:	20007034 	.word	0x20007034

08012624 <_init>:
 8012624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012626:	bf00      	nop
 8012628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801262a:	bc08      	pop	{r3}
 801262c:	469e      	mov	lr, r3
 801262e:	4770      	bx	lr

08012630 <_fini>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	bf00      	nop
 8012634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012636:	bc08      	pop	{r3}
 8012638:	469e      	mov	lr, r3
 801263a:	4770      	bx	lr
